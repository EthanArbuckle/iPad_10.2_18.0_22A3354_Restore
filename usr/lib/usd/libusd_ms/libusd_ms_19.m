void sub_20C5E8410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30)
{
  sub_20BE930F8((uint64_t)&a30);
  sub_20BE93030((void ***)&a30);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::ResolveUdimPath(const std::string *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  __int128 v5;
  void *v6;
  void **v7;
  int v8;
  std::string::size_type size;
  size_t v10;
  char *v11;
  std::string *p_str;
  uint64_t *v13;
  std::string *v14;
  void *v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  uint64_t v23;
  std::string v24;
  void *v25[2];
  uint64_t v26;
  std::string v27;
  void *__p[2];
  uint64_t v29;
  std::string __str;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  std::string v34;
  void *v35;
  char v36;
  uint64_t v37[3];
  char v38;
  _QWORD v39[3];

  v39[2] = *MEMORY[0x24BDAC8D0];
  sub_20C5E81E8(a1, a2, 1, v37);
  if (v37[0] == v37[1])
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    sub_20C5E7F54(a1, &v34);
    v31 = 0;
    v32 = 0;
    v33 = 0;
    if (*(char *)(v37[0] + 23) < 0)
    {
      sub_20BDDBFAC(&__str, *(void **)v37[0], *(_QWORD *)(v37[0] + 8));
    }
    else
    {
      v5 = *(_OWORD *)v37[0];
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v37[0] + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v5;
    }
    if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)&__str))
    {
      pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner((uint64_t)&__str, (uint64_t)&v27);
      v25[0] = &v31;
      v25[1] = &__str;
      sub_20BFC1B10(v25, (__int128 *)&v27);
      if (SHIBYTE(v29) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
    }
    sub_20C5E7F54(a1, &v27);
    *(_OWORD *)v25 = *(_OWORD *)__p;
    v26 = v29;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    v6 = (void *)HIBYTE(v26);
    if (v26 >= 0)
      v7 = v25;
    else
      v7 = (void **)v25[0];
    v8 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    v10 = strlen((const char *)v7);
    if (size < v10)
      goto LABEL_23;
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    if (!strcmp((const char *)p_str + size - v10, (const char *)v7))
    {
      if ((char)v6 >= 0)
        v15 = v6;
      else
        v15 = v25[1];
      std::string::basic_string(&v24, &__str, 0, size - (_QWORD)v15 - 4, (std::allocator<char> *)&v38);
      v16 = std::string::append(&v24, "<UDIM>");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (v26 >= 0)
        v18 = v25;
      else
        v18 = (void **)v25[0];
      if (v26 >= 0)
        v19 = HIBYTE(v26);
      else
        v19 = (std::string::size_type)v25[1];
      v20 = std::string::append(&v27, (const std::string::value_type *)v18, v19);
      v21 = v20->__r_.__value_.__r.__words[0];
      v39[0] = v20->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v39 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str.__r_.__value_.__r.__words[0] = v21;
      __str.__r_.__value_.__l.__size_ = v39[0];
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v39 + 7);
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = v22;
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      v23 = HIBYTE(v33);
      if (v33 < 0)
        v23 = v32;
      if (v23)
      {
        pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)&v31, (uint64_t)&__str, a3);
      }
      else if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_20BDDBFAC(a3, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        *a3 = __str;
      }
    }
    else
    {
LABEL_23:
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdShade/udimUtils.cpp";
      v27.__r_.__value_.__l.__size_ = (std::string::size_type)"ResolveUdimPath";
      v27.__r_.__value_.__r.__words[2] = 166;
      __p[0] = "static std::string pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::ResolveUdimPath(const std::string"
               " &, const SdfLayerHandle &)";
      LOBYTE(__p[1]) = 0;
      if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = (uint64_t *)a1;
      else
        v13 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
      v14 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v8 >= 0)
        v14 = &__str;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Resolution of first udim tile gave ambigious result. First tile for '%s' is '%s'.", v11, v13, v14);
      a3->__r_.__value_.__r.__words[0] = 0;
      a3->__r_.__value_.__l.__size_ = 0;
      a3->__r_.__value_.__r.__words[2] = 0;
    }
    if (SHIBYTE(v26) < 0)
      operator delete(v25[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33) < 0)
      operator delete(v31);
    if (v36 < 0)
      operator delete(v35);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
  }
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
  sub_20BE93030((void ***)&v34);
}

void sub_20C5E8858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a23 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  if (a46 < 0)
    operator delete(a41);
  sub_20BE930F8(v46 - 168);
  *(_QWORD *)(v46 - 168) = v46 - 120;
  sub_20BE93030((void ***)(v46 - 168));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::ReplaceUdimPattern(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type size;
  std::string::size_type v7;
  const std::string::value_type *p_p;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  std::string v13;
  void *__p;
  std::string::size_type v15;
  unsigned __int8 v16;

  sub_20C5E7F54((const std::string *)a1, &v13);
  size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v13.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_7;
  v7 = v16;
  if ((v16 & 0x80u) != 0)
    v7 = v15;
  if (v7)
  {
LABEL_7:
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)&v13.__r_.__value_.__l.__data_, a2, (uint64_t)&v12);
    if ((v16 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v16 & 0x80u) == 0)
      v9 = v16;
    else
      v9 = v15;
    v10 = std::string::append(&v12, p_p, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)a3 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else if (*(char *)(a1 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a3, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
  }
  if ((char)v16 < 0)
    operator delete(__p);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_20C5E8A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_20BE930F8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

char *sub_20C5E8A54(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  return __dst;
}

void sub_20C5E8ACC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetPrefixForAttributeType@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v3;
  uint64_t v4;
  unint64_t v5;
  __int128 v6;

  if ((_DWORD)result == 2)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v3)
      v3 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v4 = *((_QWORD *)v3 + 16);
  }
  else
  {
    if ((_DWORD)result != 1)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      return result;
    }
    v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v3)
      v3 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v4 = *((_QWORD *)v3 + 10);
  }
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if (v5)
    result = (uint64_t *)(v5 + 16);
  else
    result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  if (*((char *)result + 23) < 0)
    return (uint64_t *)sub_20BDDBFAC((_BYTE *)a2, (void *)*result, result[1]);
  v6 = *(_OWORD *)result;
  *(_QWORD *)(a2 + 16) = result[2];
  *(_OWORD *)a2 = v6;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetConnectedSourcePath(uint64_t a1@<X0>, int *a2@<X8>)
{
  uint64_t *PrefixForAttributeType;
  uint64_t *EmptyString;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  std::string v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  void *__p[2];
  std::string::size_type v23;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a2 + 1);
  if (sub_20C5BD818(a1))
  {
    PrefixForAttributeType = pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetPrefixForAttributeType((uint64_t *)*(unsigned int *)(a1 + 40), (uint64_t)&v16);
    if ((*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)PrefixForAttributeType);
    v6 = *((char *)EmptyString + 23);
    if (v6 >= 0)
      v7 = (const std::string::value_type *)EmptyString;
    else
      v7 = (const std::string::value_type *)*EmptyString;
    if (v6 >= 0)
      v8 = *((unsigned __int8 *)EmptyString + 23);
    else
      v8 = EmptyString[1];
    v9 = std::string::append(&v16, v7, v8);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v23 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    sub_20C35C4F8((uint64_t)&v16, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    sub_20C348EEC((uint64_t)&v16, &v18);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v15);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v15, &v20);
    sub_20BFD3EBC(a2, &v20);
    sub_20BFD3F10(a2 + 1, &v21);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
    sub_20BFD265C(&v20);
    if ((v15 & 7) != 0)
    {
      v11 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    sub_20BFD265C(&v18);
    if ((v17 & 7) != 0)
    {
      v13 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16.__r_.__value_.__r.__words[2] + 1);
    sub_20BFD265C(&v16.__r_.__value_.__r.__words[2]);
    if (v16.__r_.__value_.__l.__size_)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v16.__r_.__value_.__l.__size_);
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
  }
}

void sub_20C5E8D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _DWORD *v25;
  unsigned int *v27;
  unsigned int v28;

  if ((a10 & 7) != 0)
  {
    v27 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  sub_20BFD1A18(&a18);
  sub_20C35C2E0((uint64_t)&a11);
  if (a25 < 0)
    operator delete(__p);
  sub_20BFD1A18(v25);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetBaseNameAndType(pxrInternal__aapl__pxrReserved__::UsdShadeUtils *this@<X0>, uint64_t a2@<X8>)
{
  const std::string *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v6;
  uint64_t *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  int v9;
  const std::string *v10;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  std::string v16;
  char v17;
  std::string __p;
  char v19;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const std::string *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6)
    v6 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*((_QWORD *)v6 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
    v7 = (uint64_t *)((*((_QWORD *)v6 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v7 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(EmptyString, (uint64_t)v7, &__p);
  if (v19)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v16);
    *(_QWORD *)a2 = v16.__r_.__value_.__r.__words[0];
    v9 = 1;
LABEL_23:
    *(_DWORD *)(a2 + 8) = v9;
    goto LABEL_24;
  }
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    v10 = (const std::string *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v10 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  v11 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v11)
    v11 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*((_QWORD *)v11 + 16) & 0xFFFFFFFFFFFFFFF8) != 0)
    v12 = (uint64_t *)((*((_QWORD *)v11 + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v12 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(v10, (uint64_t)v12, &v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v16;
  v19 = v17;
  if (v17)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v16);
    *(_QWORD *)a2 = v16.__r_.__value_.__r.__words[0];
    v9 = 2;
    goto LABEL_23;
  }
  v13 = *(_QWORD *)this;
  *(_QWORD *)a2 = *(_QWORD *)this;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *(_QWORD *)a2 = v14;
  }
  *(_DWORD *)(a2 + 8) = 0;
LABEL_24:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C5E8F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetType(pxrInternal__aapl__pxrReserved__::UsdShadeUtils *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  const std::string *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  uint64_t v7;
  const std::string *v8;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v9;
  uint64_t *v10;
  std::string v12;
  unsigned __int8 v13;
  std::string __p;
  unsigned __int8 v15;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const std::string *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4)
    v4 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if ((*((_QWORD *)v4 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
    v5 = (uint64_t *)((*((_QWORD *)v4 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v5 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(EmptyString, (uint64_t)v5, &__p);
  if (v15)
  {
    v7 = 1;
  }
  else
  {
    if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
      v8 = (const std::string *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v8 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
    v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v9)
      v9 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if ((*((_QWORD *)v9 + 16) & 0xFFFFFFFFFFFFFFF8) != 0)
      v10 = (uint64_t *)((*((_QWORD *)v9 + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(v8, (uint64_t)v10, &v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v12;
    v15 = v13;
    v7 = 2 * v13;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_20C5E90F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetFullName(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *PrefixForAttributeType;
  uint64_t *EmptyString;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;

  PrefixForAttributeType = pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetPrefixForAttributeType(a2, (uint64_t)&v12);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)PrefixForAttributeType);
  v7 = *((char *)EmptyString + 23);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)EmptyString;
  else
    v8 = (const std::string::value_type *)*EmptyString;
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)EmptyString + 23);
  else
    v9 = EmptyString[1];
  v10 = std::string::append(&v12, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v14 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_20C5E91C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::_FollowConnectionSourceRecursive(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t v10;
  int IsContainer;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  int v19;
  int v20;
  uint64_t v21;

  v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)((char *)this + 32);
  if (*((_DWORD *)this + 10) == 2)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput(this, v9, (uint64_t)&v17);
    if ((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsContainer(this) & 1) != 0)
    {
      v10 = sub_20C5E9374((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v17, a2, a3, a4);
    }
    else
    {
      sub_20C5E99F8(a3, (uint64_t)&v17);
      v10 = 1;
    }
    if ((v21 & 7) != 0)
    {
      v14 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_20BFD265C(&v19);
    if (v18)
      sub_20C35C614(v18);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput(this, v9, (uint64_t)&v17);
    IsContainer = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsContainer(this);
    if ((IsContainer & 1) != 0)
      v4 = sub_20C5E9614(&v17, a2, a3, a4);
    if ((v21 & 7) != 0)
    {
      v12 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_20BFD265C(&v19);
    if (v18)
      sub_20C35C614(v18);
    return IsContainer & v4;
  }
  return v10;
}

void sub_20C5E9350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C5BD350((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5E9374(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, _DWORD *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _DWORD *v13;
  const char *Text;
  char *v15;
  int v16;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *v19;
  uint64_t v21;
  void *v22[6];
  _QWORD v23[4];
  char v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput(a1, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)a2))
  {
    sub_20C348EEC((uint64_t)a1, (int *)&v21);
    v8 = a2[10];
    if ((_DWORD)v8)
    {
      v9 = a2[11];
      v10 = a2;
      if (v9 >= 6)
        v10 = *(_QWORD **)a2;
      v11 = 8 * v8;
      v12 = &v10[v8];
      while (*v10 != v21)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
        {
          v10 = v12;
          break;
        }
      }
      v13 = a2;
      if (v9 >= 6)
        v13 = *(_DWORD **)a2;
      if (v10 != (_QWORD *)&v13[2 * v8])
      {
        v23[0] = "usdShade/utils.cpp";
        v23[1] = "_GetValueProducingAttributesRecursive";
        v23[2] = 193;
        v23[3] = "BOOL pxrInternal__aapl__pxrReserved__::_GetValueProducingAttributesRecursive(const UsdShadeInOutput &, "
                 "_SmallSdfPathVector *, UsdShadeAttributeVector &, BOOL) [UsdShadeInOutput = pxrInternal__aapl__pxrReser"
                 "ved__::UsdShadeOutput]";
        v24 = 0;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v21);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v23, (pxrInternal__aapl__pxrReserved__ *)"GetValueProducingAttributes: Found cycle with attribute %s", v15, Text);
        LOBYTE(v16) = 0;
LABEL_34:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
        sub_20BFD265C(&v21);
        return v16 & 1;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSources(v23, a1, 0);
    if (v25)
    {
      sub_20C5E9BD8(a2, &v21);
      if (v25 >= 2)
      {
        v16 = 0;
        if (v26 >= 2)
          v17 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v23[0];
        else
          v17 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v23;
        v18 = 56 * v25;
        do
        {
          sub_20C5E9D84(v22, a2);
          v16 |= pxrInternal__aapl__pxrReserved__::_FollowConnectionSourceRecursive(v17);
          sub_20C5E9E58(v22);
          v17 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)((char *)v17 + 56);
          v18 -= 56;
        }
        while (v18);
        goto LABEL_28;
      }
      if (v25)
      {
        if (v26 >= 2)
          v19 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v23[0];
        else
          v19 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v23;
        LOBYTE(v16) = pxrInternal__aapl__pxrReserved__::_FollowConnectionSourceRecursive(v19);
LABEL_28:
        if ((a4 & 1) == 0 && (v16 & 1) == 0)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue(a1))
          {
            sub_20C5E99F8(a3, (uint64_t)a1);
            LOBYTE(v16) = 1;
          }
          else
          {
            LOBYTE(v16) = 0;
          }
        }
        sub_20C5BD988((uint64_t)v23);
        goto LABEL_34;
      }
    }
    LOBYTE(v16) = 0;
    goto LABEL_28;
  }
  LOBYTE(v16) = 0;
  return v16 & 1;
}

void sub_20C5E95BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20C5BD988((uint64_t)va1);
  sub_20BFD1A18((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5E9614(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _DWORD *v14;
  const char *Text;
  char *v16;
  int v17;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *v20;
  uint64_t v22;
  void *v23[6];
  _QWORD v24[4];
  char v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2)&& pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput(a1, v8))
  {
    sub_20C348EEC((uint64_t)a1, (int *)&v22);
    v9 = a2[10];
    if ((_DWORD)v9)
    {
      v10 = a2[11];
      v11 = a2;
      if (v10 >= 6)
        v11 = *(_QWORD **)a2;
      v12 = 8 * v9;
      v13 = &v11[v9];
      while (*v11 != v22)
      {
        ++v11;
        v12 -= 8;
        if (!v12)
        {
          v11 = v13;
          break;
        }
      }
      v14 = a2;
      if (v10 >= 6)
        v14 = *(_DWORD **)a2;
      if (v11 != (_QWORD *)&v14[2 * v9])
      {
        v24[0] = "usdShade/utils.cpp";
        v24[1] = "_GetValueProducingAttributesRecursive";
        v24[2] = 193;
        v24[3] = "BOOL pxrInternal__aapl__pxrReserved__::_GetValueProducingAttributesRecursive(const UsdShadeInOutput &, "
                 "_SmallSdfPathVector *, UsdShadeAttributeVector &, BOOL) [UsdShadeInOutput = pxrInternal__aapl__pxrReser"
                 "ved__::UsdShadeInput]";
        v25 = 0;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v22);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v24, (pxrInternal__aapl__pxrReserved__ *)"GetValueProducingAttributes: Found cycle with attribute %s", v16, Text);
        LOBYTE(v17) = 0;
LABEL_35:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
        sub_20BFD265C(&v22);
        return v17 & 1;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSources(v24, a1, 0);
    if (v26)
    {
      sub_20C5E9BD8(a2, &v22);
      if (v26 >= 2)
      {
        v17 = 0;
        if (v27 >= 2)
          v18 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v24[0];
        else
          v18 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v24;
        v19 = 56 * v26;
        do
        {
          sub_20C5E9D84(v23, a2);
          v17 |= pxrInternal__aapl__pxrReserved__::_FollowConnectionSourceRecursive(v18, v23, a3, a4);
          sub_20C5E9E58(v23);
          v18 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)((char *)v18 + 56);
          v19 -= 56;
        }
        while (v19);
        goto LABEL_29;
      }
      if (v26)
      {
        if (v27 >= 2)
          v20 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v24[0];
        else
          v20 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v24;
        LOBYTE(v17) = pxrInternal__aapl__pxrReserved__::_FollowConnectionSourceRecursive(v20, a2, a3, a4);
LABEL_29:
        if ((a4 & 1) == 0 && (v17 & 1) == 0)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue(a1))
          {
            sub_20C5E99F8(a3, (uint64_t)a1);
            LOBYTE(v17) = 1;
          }
          else
          {
            LOBYTE(v17) = 0;
          }
        }
        sub_20C5BD988((uint64_t)v24);
        goto LABEL_35;
      }
    }
    LOBYTE(v17) = 0;
    goto LABEL_29;
  }
  LOBYTE(v17) = 0;
  return v17 & 1;
}

void sub_20C5E9868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20C5BD988((uint64_t)va1);
  sub_20BFD1A18((uint64_t *)va);
  _Unwind_Resume(a1);
}

void **pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeUtils *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdShadeInput *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4[7];

  v4[6] = *(void **)MEMORY[0x24BDAC8D0];
  v4[5] = (void *)0x500000000;
  *(_QWORD *)(a3 + 32) = 0x100000000;
  sub_20C5E9614(this, v4, a3, (uint64_t)a2);
  return sub_20C5E9E58(v4);
}

void sub_20C5E9940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20C5C9ACC(v2);
  sub_20C5E9E58((void **)va);
  _Unwind_Resume(a1);
}

void **pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeUtils *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdShadeOutput *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4[7];

  v4[6] = *(void **)MEMORY[0x24BDAC8D0];
  v4[5] = (void *)0x500000000;
  *(_QWORD *)(a3 + 32) = 0x100000000;
  sub_20C5E9374(this, v4, a3, (char)a2);
  return sub_20C5E9E58(v4);
}

void sub_20C5E99DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20C5C9ACC(v2);
  sub_20C5E9E58((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C5E99F8(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _DWORD *result;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  v5 = *(_DWORD *)(a1 + 32);
  v4 = *(_DWORD *)(a1 + 36);
  if (v5 == v4)
  {
    sub_20C5E9AD8(a1, v5 + (v5 >> 1) + 1);
    v4 = *(_DWORD *)(a1 + 36);
  }
  v6 = a1;
  if (v4 >= 2)
    v6 = *(_QWORD *)a1;
  v7 = v6 + 32 * *(unsigned int *)(a1 + 32);
  *(_DWORD *)v7 = *(_DWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v7 + 8) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 48);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_20BFD6E54((_DWORD *)(v7 + 16), (_DWORD *)(a2 + 16));
  result = sub_20BFD6EA4((_DWORD *)(v7 + 20), (_DWORD *)(a2 + 20));
  v12 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v7 + 24) = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      *(_QWORD *)(v7 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  ++*(_DWORD *)(a1 + 32);
  return result;
}

void sub_20C5E9AD8(uint64_t a1, unsigned int a2)
{
  void *v4;
  uint64_t v5;

  v4 = malloc(32 * a2);
  v5 = a1;
  if (*(_DWORD *)(a1 + 36) >= 2u)
    v5 = *(_QWORD *)a1;
  sub_20C5E9B54(v5, v5 + 32 * *(unsigned int *)(a1 + 32), (uint64_t)v4);
  sub_20C5C9B08((uint64_t *)a1);
  if (*(_DWORD *)(a1 + 36) >= 2u)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 36) = a2;
}

uint64_t sub_20C5E9B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1 + 16;
    do
    {
      *(_DWORD *)a3 = *(_DWORD *)(v5 - 16);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      sub_20BFD38A4((_DWORD *)(a3 + 16), (_DWORD *)v5);
      sub_20BFD38DC((_DWORD *)(a3 + 20), (_DWORD *)(v5 + 4));
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      a3 += 32;
      v6 = v5 + 16;
      v5 += 32;
    }
    while (v6 != a2);
  }
  return a3;
}

_DWORD *sub_20C5E9BD8(_DWORD *a1, _DWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *result;

  v5 = a1[10];
  v4 = a1[11];
  if (v5 == v4)
  {
    sub_20C5E9C50(a1, v5 + (v5 >> 1) + 1);
    v4 = a1[11];
  }
  v6 = a1;
  if (v4 >= 6)
    v6 = *(_DWORD **)a1;
  v7 = sub_20BFD6E54(&v6[2 * a1[10]], a2);
  result = sub_20BFD6EA4(v7 + 1, a2 + 1);
  ++a1[10];
  return result;
}

void sub_20C5E9C50(_DWORD *a1, unsigned int a2)
{
  _DWORD *v4;
  _DWORD *v5;

  v4 = malloc(8 * a2);
  v5 = a1;
  if (a1[11] >= 6u)
    v5 = *(_DWORD **)a1;
  sub_20C5E9D24(v5, &v5[2 * a1[10]], v4);
  sub_20C5E9CCC(a1);
  if (a1[11] >= 6u)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  a1[11] = a2;
}

_DWORD *sub_20C5E9CCC(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if (result[11] >= 6u)
    v1 = *(_DWORD **)result;
  v2 = result[10];
  if ((_DWORD)v2)
  {
    v3 = 8 * v2;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v1 + 1);
      result = sub_20BFD265C(v1);
      v1 += 2;
      v3 -= 8;
    }
    while (v3);
  }
  return result;
}

_DWORD *sub_20C5E9D24(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_20BFD38A4(a3, v5);
      sub_20BFD38DC(a3 + 1, v5 + 1);
      v5 += 2;
      a3 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

_DWORD *sub_20C5E9D84(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;

  a1[11] = 5;
  v4 = a2[10];
  v5 = a1;
  if (v4 >= 6)
  {
    v5 = malloc(8 * v4);
    *(_QWORD *)a1 = v5;
    a1[11] = v4;
  }
  a1[10] = v4;
  if (a2[11] >= 6u)
    v6 = *(_DWORD **)a2;
  else
    v6 = a2;
  sub_20C5E9DF8(v6, &v6[2 * a2[10]], v5);
  return a1;
}

_DWORD *sub_20C5E9DF8(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_20BFD6E54(a3, v5);
      sub_20BFD6EA4(a3 + 1, v5 + 1);
      v5 += 2;
      a3 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void **sub_20C5E9E58(void **a1)
{
  sub_20C5E9CCC(a1);
  if (*((_DWORD *)a1 + 11) >= 6u)
    free(*a1);
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLux_DiscoveryPlugin::GetSearchURIs(pxrInternal__aapl__pxrReserved__::UsdLux_DiscoveryPlugin *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AA58);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498AA58))
  {
    qword_25498AA40 = 0;
    *(_QWORD *)algn_25498AA48 = 0;
    qword_25498AA50 = 0;
    __cxa_atexit((void (*)(void *))sub_20BFBB378, &qword_25498AA40, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AA58);
  }
  return &qword_25498AA40;
}

void pxrInternal__aapl__pxrReserved__::UsdLux_DiscoveryPlugin::DiscoverNodes(uint64_t *a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *AllDerivedTypes;
  _QWORD *ShaderIdToAPITypeNameMap;
  uint64_t *v6;
  unsigned __int8 v7;
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v8;
  unint64_t v9;
  char *v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  pxrInternal__aapl__pxrReserved__::PlugRegistry *v20;
  _QWORD *v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *v27;
  uint64_t *v28;
  uint64_t *v29;
  pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *DiscoveryType;
  uint64_t *SourceType;
  unint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  const std::type_info *v35;
  char *v36;
  const std::type_info *v37;
  char *v38;
  uint64_t v39;
  void *__p;
  int v41;
  char v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = atomic_load((unsigned __int8 *)&qword_25498AA68);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498AA68))
  {
    __cxa_guard_release(&qword_25498AA68);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498AA78);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498AA78))
  {
    __cxa_guard_release(&qword_25498AA78);
  }
  v47 = 0;
  v48 = 0;
  v46 = (uint64_t *)&v47;
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(qword_25498AA60, &v46);
  AllDerivedTypes = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(qword_25498AA70, &v46);
  ShaderIdToAPITypeNameMap = pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::_GetShaderIdToAPITypeNameMap(AllDerivedTypes);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  sub_20BFC9A6C(&v43, ShaderIdToAPITypeNameMap[3] + v48);
  v6 = v46;
  if (v46 != (uint64_t *)&v47)
  {
    do
    {
      v7 = atomic_load((unsigned __int8 *)&qword_25498AA90);
      if ((v7 & 1) == 0)
      {
        v20 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)__cxa_guard_acquire(&qword_25498AA90);
        if ((_DWORD)v20)
        {
          pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v20);
          sub_20BDDC0E4(&__p, "usdLux");
          pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginWithName((unsigned __int8 *)&__p, &unk_25498AA80);
          if (v42 < 0)
            operator delete(__p);
          __cxa_atexit((void (*)(void *))sub_20C5EA414, &unk_25498AA80, &dword_20BDBC000);
          __cxa_guard_release(&qword_25498AA90);
        }
      }
      v8 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_20BF444D8((uint64_t *)&unk_25498AA80);
      if ((pxrInternal__aapl__pxrReserved__::PlugPlugin::DeclaresType(v8, (const pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 4), 0) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetConcreteSchemaTypeName((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)(v6 + 4), (unsigned int **)&__p);
        v9 = (unint64_t)__p;
        if (__p)
        {
          v10 = v44;
          if ((unint64_t)v44 >= v45)
          {
            v13 = sub_20BFCA068(&v43, (uint64_t *)&__p);
          }
          else
          {
            *(_QWORD *)v44 = __p;
            if ((v9 & 7) != 0)
            {
              v11 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
              do
                v12 = __ldxr(v11);
              while (__stxr(v12 + 2, v11));
              if ((v12 & 1) == 0)
                *(_QWORD *)v10 &= 0xFFFFFFFFFFFFFFF8;
            }
            v13 = v10 + 8;
          }
          v44 = v13;
          v14 = (unint64_t)__p;
        }
        else
        {
          v14 = 0;
        }
        if ((v14 & 7) != 0)
        {
          v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stlxr(v16 - 2, v15));
        }
      }
      v17 = (uint64_t *)v6[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (uint64_t *)v6[2];
          v19 = *v18 == (_QWORD)v6;
          v6 = v18;
        }
        while (!v19);
      }
      v6 = v18;
    }
    while (v18 != (uint64_t *)&v47);
  }
  v21 = (_QWORD *)ShaderIdToAPITypeNameMap[2];
  if (v21)
  {
    v22 = v44;
    do
    {
      v23 = v21 + 2;
      if ((unint64_t)v22 >= v45)
      {
        v22 = sub_20BFCA068(&v43, v23);
      }
      else
      {
        v24 = *v23;
        *(_QWORD *)v22 = *v23;
        if ((v24 & 7) != 0)
        {
          v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 2, v25));
          if ((v26 & 1) == 0)
            *(_QWORD *)v22 &= 0xFFFFFFFFFFFFFFF8;
        }
        v22 += 8;
      }
      v44 = v22;
      v21 = (_QWORD *)*v21;
    }
    while (v21);
  }
  else
  {
    v22 = v44;
  }
  v27 = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)sub_20C5EA460(a1, (v22 - v43) >> 3);
  v28 = (uint64_t *)v43;
  v29 = (uint64_t *)v44;
  if (v43 != v44)
  {
    do
    {
      v39 = 0;
      __p = 0;
      v41 = 1;
      DiscoveryType = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::_GetDiscoveryType(v27);
      SourceType = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::_GetSourceType(DiscoveryType);
      v32 = a1[1];
      if (v32 >= a1[2])
      {
        v27 = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)sub_20C5EA79C(a1, v28, (uint64_t *)&__p, v28, &v39, (uint64_t *)DiscoveryType, SourceType, "", "");
      }
      else
      {
        sub_20C5EA914((pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 2), v32, v28, (uint64_t *)&__p, v28, &v39, (uint64_t *)DiscoveryType, SourceType, "", "");
        v27 = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)(v32 + 216);
        a1[1] = v32 + 216;
      }
      a1[1] = (uint64_t)v27;
      if ((v39 & 7) != 0)
      {
        v33 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      ++v28;
    }
    while (v28 != v29);
  }
  __p = &v43;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BE6100C((uint64_t)&v46, v47);
}

void sub_20C5EA318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  __cxa_guard_abort(&qword_25498AA78);
  sub_20C1E7E2C((void ***)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5EA414(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_20C5EA460(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x84BDA12F684BDA13 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x12F684BDA12F685)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20C1E9B8C(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 216 * v6;
    sub_20C1E9AF0(a1, v7);
    return sub_20C1E9CC4((uint64_t)v7);
  }
  return result;
}

void sub_20C5EA508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1E9CC4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5EA51C()
{
  uint64_t *v0;

  v0 = sub_20C5EA548();
  return sub_20C5EA668(v0);
}

void sub_20C5EA534(unsigned int **a1, const void *a2)
{
  void *v2;

  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin(a1, a2);
  operator delete(v2);
}

uint64_t *sub_20C5EA548()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C1E7A44((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5EA61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5EA668(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C53DEE8;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20C5EA6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C5EA6F8(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);
  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C5EA70C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;

  v2 = operator new(0x18uLL);
  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::NdrDiscoveryPlugin((uint64_t)v2);
  *v2 = &off_24C53DEA0;
  *a1 = v2;
  v4 = 0;
  return sub_20C5EA770(&v4);
}

void sub_20C5EA75C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C5EA770(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

uint64_t sub_20C5EA79C(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, char *a8, char *a9)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t *v28;

  v10 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  v11 = v10 + 1;
  if (v10 + 1 > 0x12F684BDA12F684)
    sub_20BDDF694();
  if (0x97B425ED097B426 * ((a1[2] - *a1) >> 3) > v11)
    v11 = 0x97B425ED097B426 * ((a1[2] - *a1) >> 3);
  if (0x84BDA12F684BDA13 * ((a1[2] - *a1) >> 3) >= 0x97B425ED097B42)
    v19 = 0x12F684BDA12F684;
  else
    v19 = v11;
  v28 = a1 + 2;
  if (v19)
  {
    v23 = v10;
    v20 = (char *)sub_20C1E9B8C((uint64_t)(a1 + 2), v19);
    v10 = v23;
  }
  else
  {
    v20 = 0;
  }
  v24 = v20;
  v25 = &v20[216 * v10];
  v27 = &v20[216 * v19];
  sub_20C5EA914((pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 2), (uint64_t)v25, a2, a3, a4, a5, a6, a7, a8, a9);
  v26 = v25 + 216;
  sub_20C1E9AF0(a1, &v24);
  v21 = a1[1];
  sub_20C1E9CC4((uint64_t)&v24);
  return v21;
}

void sub_20C5EA900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C1E9CC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C5EA914(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, char *a9, char *a10)
{
  uint64_t *EmptyString;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  __int128 __p;
  uint64_t v21;
  _OWORD v22[2];
  int v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  __int128 v28;
  char v29;

  if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  sub_20BDDC0E4(&v28, a9);
  sub_20BDDC0E4(&v26, a10);
  v24 = 0uLL;
  v25 = 0;
  memset(v22, 0, sizeof(v22));
  v23 = 1065353216;
  __p = 0uLL;
  v21 = 0;
  v19 = 0;
  sub_20C1E936C(a2, a3, a4, (__int128 *)EmptyString, a6, a7, a8, &v28, &v26, &v24, (uint64_t)v22, &__p, &v19);
  if ((v19 & 7) != 0)
  {
    v17 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  if (SHIBYTE(v21) < 0)
    operator delete((void *)__p);
  sub_20C1E7FB4((uint64_t)v22);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
  if (v27 < 0)
    operator delete((void *)v26);
  if (v29 < 0)
    operator delete((void *)v28);
}

void sub_20C5EAA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  unsigned int *v34;
  unsigned int v35;

  if ((a15 & 7) != 0)
  {
    v34 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  if (a21 < 0)
    operator delete(__p);
  sub_20C1E7FB4((uint64_t)&a22);
  if (a32 < 0)
    operator delete(a27);
  if (*(char *)(v32 - 105) < 0)
    operator delete(*(void **)(v32 - 128));
  if (*(char *)(v32 - 81) < 0)
    operator delete(*(void **)(v32 - 104));
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType(pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *this)
{
  unint64_t *v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  void ***v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v1 = (unint64_t *)atomic_load(&qword_25498AA98);
  if (!v1)
  {
    v1 = (unint64_t *)operator new(0x60uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1, "USD", 0);
    v66 = (uint64_t *)(v1 + 1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 1, "usd-schema-gen", 0);
    v3 = (uint64_t *)(v1 + 2);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 2, "MeshLight", 0);
    v4 = (uint64_t *)(v1 + 3);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 3, "MeshLightAPI", 0);
    v5 = (uint64_t *)(v1 + 4);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 4, "LightAPI", 0);
    v6 = (uint64_t *)(v1 + 5);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 5, "ShadowAPI", 0);
    v7 = (uint64_t *)(v1 + 6);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 6, "ShapingAPI", 0);
    v8 = (uint64_t *)(v1 + 7);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 7, "VolumeLight", 0);
    v9 = (uint64_t *)(v1 + 8);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 8, "VolumeLightAPI", 0);
    v10 = *v1;
    v67 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v67 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = *v66;
    v68 = v13;
    if ((v13 & 7) != 0)
    {
      v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 2, v14));
      if ((v15 & 1) == 0)
        v68 &= 0xFFFFFFFFFFFFFFF8;
    }
    v16 = *v3;
    v69 = v16;
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 2, v17));
      if ((v18 & 1) == 0)
        v69 &= 0xFFFFFFFFFFFFFFF8;
    }
    v19 = *v4;
    v70 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 2, v20));
      if ((v21 & 1) == 0)
        v70 &= 0xFFFFFFFFFFFFFFF8;
    }
    v22 = *v5;
    v71 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v71 &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 = *v6;
    v72 = v25;
    if ((v25 & 7) != 0)
    {
      v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 2, v26));
      if ((v27 & 1) == 0)
        v72 &= 0xFFFFFFFFFFFFFFF8;
    }
    v28 = *v7;
    v73 = v28;
    if ((v28 & 7) != 0)
    {
      v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 2, v29));
      if ((v30 & 1) == 0)
        v73 &= 0xFFFFFFFFFFFFFFF8;
    }
    v31 = *v8;
    v74 = v31;
    if ((v31 & 7) != 0)
    {
      v32 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 2, v32));
      if ((v33 & 1) == 0)
        v74 &= 0xFFFFFFFFFFFFFFF8;
    }
    v34 = *v9;
    v75 = v34;
    if ((v34 & 7) != 0)
    {
      v35 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 2, v35));
      if ((v36 & 1) == 0)
        v75 &= 0xFFFFFFFFFFFFFFF8;
    }
    v1[9] = 0;
    v1[10] = 0;
    v1[11] = 0;
    v37 = operator new(0x48uLL);
    v38 = 0;
    v1[9] = (unint64_t)v37;
    v1[10] = (unint64_t)v37;
    v1[11] = (unint64_t)(v37 + 9);
    do
    {
      v39 = *(&v67 + v38);
      *v37 = v39;
      if ((v39 & 7) != 0)
      {
        v40 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 2, v40));
        if ((v41 & 1) == 0)
          *v37 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v38;
      ++v37;
    }
    while (v38 != 9);
    v42 = (void ***)&v76;
    v1[10] = (unint64_t)v37;
    do
    {
      v44 = (uint64_t)*--v42;
      v43 = v44;
      if ((v44 & 7) != 0)
      {
        v45 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
    }
    while (v42 != (void ***)&v67);
    while (!__ldaxr(&qword_25498AA98))
    {
      if (!__stlxr((unint64_t)v1, &qword_25498AA98))
        return (unint64_t)v1;
    }
    __clrex();
    v67 = (unint64_t)(v1 + 9);
    sub_20BEEB2B8((void ***)&v67);
    if ((*v9 & 7) != 0)
    {
      v48 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v49 = __ldxr(v48);
      while (__stlxr(v49 - 2, v48));
    }
    if ((*v8 & 7) != 0)
    {
      v50 = (unsigned int *)(*v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
    if ((*v7 & 7) != 0)
    {
      v52 = (unsigned int *)(*v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v53 = __ldxr(v52);
      while (__stlxr(v53 - 2, v52));
    }
    if ((*v6 & 7) != 0)
    {
      v54 = (unsigned int *)(*v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v55 = __ldxr(v54);
      while (__stlxr(v55 - 2, v54));
    }
    if ((*v5 & 7) != 0)
    {
      v56 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v57 = __ldxr(v56);
      while (__stlxr(v57 - 2, v56));
    }
    if ((*v4 & 7) != 0)
    {
      v58 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v59 = __ldxr(v58);
      while (__stlxr(v59 - 2, v58));
    }
    if ((*v3 & 7) != 0)
    {
      v60 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v61 = __ldxr(v60);
      while (__stlxr(v61 - 2, v60));
    }
    if ((*v66 & 7) != 0)
    {
      v62 = (unsigned int *)(*v66 & 0xFFFFFFFFFFFFFFF8);
      do
        v63 = __ldxr(v62);
      while (__stlxr(v63 - 2, v62));
    }
    if ((*v1 & 7) != 0)
    {
      v64 = (unsigned int *)(*v1 & 0xFFFFFFFFFFFFFFF8);
      do
        v65 = __ldxr(v64);
      while (__stlxr(v65 - 2, v64));
    }
    operator delete(v1);
    return atomic_load(&qword_25498AA98);
  }
  return (unint64_t)v1;
}

void sub_20C5EB028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, void **a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;

  sub_20BEEB2B8(&a11);
  v31 = &a22;
  while (1)
  {
    v33 = *--v31;
    v32 = v33;
    if ((v33 & 7) != 0)
    {
      v34 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    if (v31 == (uint64_t *)&a13)
    {
      if ((*v29 & 7) != 0)
      {
        v36 = (unsigned int *)(*v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      if ((*v28 & 7) != 0)
      {
        v38 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      if ((*v27 & 7) != 0)
      {
        v40 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      if ((*v26 & 7) != 0)
      {
        v42 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v43 = __ldxr(v42);
        while (__stlxr(v43 - 2, v42));
      }
      if ((*v25 & 7) != 0)
      {
        v44 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v45 = __ldxr(v44);
        while (__stlxr(v45 - 2, v44));
      }
      if ((*v24 & 7) != 0)
      {
        v46 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v47 = __ldxr(v46);
        while (__stlxr(v47 - 2, v46));
      }
      if ((*v23 & 7) != 0)
      {
        v48 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      if ((*a10 & 7) != 0)
      {
        v50 = (unsigned int *)(*a10 & 0xFFFFFFFFFFFFFFF8);
        do
          v51 = __ldxr(v50);
        while (__stlxr(v51 - 2, v50));
      }
      if ((*v22 & 7) != 0)
      {
        v52 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
      operator delete(v22);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C5EB1D8()
{
  JUMPOUT(0x20C5EB1C8);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::_GetDiscoveryType(pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *this)
{
  return pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType(this) + 8;
}

void *pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::_GetShaderIdToAPITypeNameMap(pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *v3;
  uint64_t *SourceType;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unsigned __int8 *)&qword_25498AAC8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)__cxa_guard_acquire(&qword_25498AAC8);
    if ((_DWORD)v3)
    {
      SourceType = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType(v3);
      v5 = pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType((pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)SourceType);
      v6 = sub_20C157C64(v17, SourceType + 2, (uint64_t *)(v5 + 24));
      v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType((pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)v6);
      v8 = pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType((pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)v7);
      sub_20C157C64(&v18, v7 + 7, (uint64_t *)(v8 + 64));
      sub_20C5EC6D0((uint64_t)&unk_25498AAA0, v17, 2);
      v9 = &v19;
      do
      {
        v10 = *(v9 - 1);
        if ((v10 & 7) != 0)
        {
          v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
        v14 = *(v9 - 2);
        v9 -= 2;
        v13 = v14;
        if ((v14 & 7) != 0)
        {
          v15 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stlxr(v16 - 2, v15));
        }
      }
      while (v9 != v17);
      __cxa_atexit((void (*)(void *))sub_20C5EB3B8, &unk_25498AAA0, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498AAC8);
    }
  }
  return &unk_25498AAA0;
}

void sub_20C5EB33C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20C96BE44(v2 + 32, (uint64_t)va);
  __cxa_guard_abort(&qword_25498AAC8);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::Parse@<X0>(pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PlugRegistry *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  const std::string *v12;
  uint64_t *v13;
  pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *SourceType;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::SdfPath *v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  void ***v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  const pxrInternal__aapl__pxrReserved__::TfToken *v41;
  const pxrInternal__aapl__pxrReserved__::TfToken *v42;
  pxrInternal__aapl__pxrReserved__::SdfPath *v43;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v44;
  unint64_t v45;
  const char *v46;
  uint64_t **v47;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v48;
  uint64_t **v49;
  uint64_t Size;
  uint64_t v51;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v52;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v53;
  char v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  char *v58;
  unsigned int v59;
  unsigned int v60;
  char v61;
  unsigned int *v62;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v63;
  const char *Text;
  unint64_t v65;
  const char *v66;
  void *v67;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t *v71;
  char *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v80;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v81;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v82;
  void *v83;
  pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *v84;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v90;
  _QWORD *v91;
  void **v92;
  unsigned int *v93;
  unsigned int v94;
  _QWORD *v95;
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v96;
  _QWORD *v97;
  uint64_t *v98;
  void **v99;
  unsigned int *v100;
  unsigned int v101;
  void *v102;
  _QWORD *v104;
  char *v105[3];
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  void (**v110)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden);
  uint64_t v111;
  int v112;
  uint64_t v113;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v115;
  int v116;
  int v117;
  uint64_t v118;
  pxrInternal__aapl__pxrReserved__::SdfPath *v119;
  pxrInternal__aapl__pxrReserved__::SdfPath *v120;
  char *v121;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v122;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v123;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v124;
  void *v125;
  char *v126;
  uint64_t v127;
  const char *v128;
  char v129;
  unint64_t v130;
  std::string v131;
  uint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  uint64_t v138;

  v138 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::_GetShaderIdToAPITypeNameMap(a1);
  v5 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_20BF2B2B4(qword_25498AAA0, (_QWORD *)a2);
  v6 = (unint64_t *)a2;
  if (v5)
  {
    v5 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_20BF2B2B4(qword_25498AAA0, (_QWORD *)a2);
    if (!v5)
      sub_20BEB9194("unordered_map::at: key not found");
    v6 = (unint64_t *)((char *)v5 + 24);
  }
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v5);
  sub_20BDDC0E4(&v125, "usdLux");
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginWithName((unsigned __int8 *)&v125, &v110);
  v7 = sub_20BF444D8((uint64_t *)&v110);
  sub_20BDDC0E4(&__p, "generatedSchema.usda");
  pxrInternal__aapl__pxrReserved__::PlugPlugin::FindPluginResource(v7, (uint64_t)&__p, 0, (uint64_t)&v133);
  if (SHIBYTE(v117) < 0)
    operator delete(__p);
  v8 = v111;
  if (v111)
  {
    v9 = (unsigned int *)(v111 + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  if (SHIBYTE(v127) < 0)
    operator delete(v125);
  v125 = 0;
  v126 = 0;
  v127 = 0;
  pxrInternal__aapl__pxrReserved__::SdfLayer::OpenAsAnonymous((uint64_t)&v133, 0, (uint64_t)&v125, &v124);
  if (SHIBYTE(v127) < 0)
    operator delete(v125);
  if (SHIBYTE(v135) < 0)
    operator delete((void *)v133);
  if (v124)
  {
    v12 = (const std::string *)sub_20BDDC0E4(&v133, ".usd");
    v126 = 0;
    v127 = 0;
    v125 = &v126;
    pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(v12, (pxrInternal__aapl__pxrReserved__::TfToken *)&v125, (uint64_t *)&v123);
    sub_20BDE9D48((uint64_t)&v125, v126);
    if (SHIBYTE(v135) < 0)
      operator delete((void *)v133);
    v13 = sub_20C1034E8((uint64_t *)&v125, (uint64_t *)&v123);
    if ((*v6 & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v13);
    v133 = 0;
    v134 = 0;
    v135 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::New((uint64_t *)&v125, 0, &v122);
    if (SHIBYTE(v135) < 0)
      operator delete((void *)v133);
    v14 = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)v126;
    if (v126)
    {
      v15 = (unsigned int *)(v126 + 8);
      do
      {
        v16 = __ldxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
        v14 = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *))(*(_QWORD *)v14 + 8))(v14);
    }
    SourceType = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType(v14);
    v19 = *((_QWORD *)SourceType + 4);
    v133 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 2, v20));
      if ((v21 & 1) == 0)
        v133 &= 0xFFFFFFFFFFFFFFF8;
    }
    v134 = *v6;
    if ((v134 & 7) != 0)
    {
      v22 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 2, v22));
      if ((v23 & 1) == 0)
        v134 &= 0xFFFFFFFFFFFFFFF8;
    }
    v24 = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType(SourceType);
    v25 = *((_QWORD *)v24 + 5);
    v135 = v25;
    if ((v25 & 7) != 0)
    {
      v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 2, v26));
      if ((v27 & 1) == 0)
        v135 &= 0xFFFFFFFFFFFFFFF8;
    }
    v28 = *(_QWORD *)(pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType(v24) + 48);
    v136 = v28;
    if ((v28 & 7) != 0)
    {
      v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 2, v29));
      if ((v30 & 1) == 0)
        v136 &= 0xFFFFFFFFFFFFFFF8;
    }
    v119 = 0;
    v120 = 0;
    v121 = 0;
    v125 = &v119;
    LOBYTE(v126) = 0;
    v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)operator new(0x20uLL);
    v32 = 0;
    v119 = v31;
    v120 = v31;
    v121 = (char *)v31 + 32;
    do
    {
      v33 = *(&v133 + v32);
      *(_QWORD *)v31 = v33;
      if ((v33 & 7) != 0)
      {
        v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 2, v34));
        if ((v35 & 1) == 0)
          *(_QWORD *)v31 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v32;
      v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v31 + 8);
    }
    while (v32 != 4);
    v36 = (void ***)&v137;
    v120 = v31;
    do
    {
      v38 = (uint64_t)*--v36;
      v37 = v38;
      if ((v38 & 7) != 0)
      {
        v39 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
    }
    while (v36 != (void ***)&v133);
    v104 = a3;
    v41 = v119;
    v42 = v120;
    if (v119 == v120)
    {
LABEL_95:
      v71 = sub_20C1034E8((uint64_t *)&v133, (uint64_t *)&v123);
      v125 = 0;
      v126 = 0;
      pxrInternal__aapl__pxrReserved__::UsdStage::Open(v71, (uint64_t *)&v125, 0, (pxrInternal__aapl__pxrReserved__ **)&v130);
      v72 = v126;
      if (v126)
      {
        v73 = (unsigned int *)(v126 + 8);
        do
        {
          v74 = __ldxr(v73);
          v75 = v74 - 1;
        }
        while (__stlxr(v75, v73));
        if (!v75)
          (*(void (**)(char *))(*(_QWORD *)v72 + 8))(v72);
      }
      v76 = v134;
      if (v134)
      {
        v77 = (unsigned int *)(v134 + 8);
        do
        {
          v78 = __ldxr(v77);
          v79 = v78 - 1;
        }
        while (__stlxr(v79, v77));
        if (!v79)
          (*(void (**)(unint64_t))(*(_QWORD *)v76 + 8))(v76);
      }
      if (v130)
      {
        v80 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C39A7A8((uint64_t *)&v130);
        v81 = sub_20C0B0CA4(&v122);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v81, &v133);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v80, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v133, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v133 + 1);
        sub_20BFD265C(&v133);
        if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&__p, v82) & 1) != 0)
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v110, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p);
          v113 = 0;
          v110 = off_24C53D618;
          v83 = operator new(0x220uLL);
          v84 = (pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeContext);
          if (!v84)
            v84 = sub_20C5EC744(&pxrInternal__aapl__pxrReserved__::SdrNodeContext);
          v108 = 0uLL;
          v109 = 0;
          v106 = 0uLL;
          v107 = 0;
          pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils::GetShaderProperties((pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils *)&v110, v105);
          sub_20C1E96B8((uint64_t)&v125, a2 + 144);
          sub_20C35C4F8((uint64_t)&v133, &v111, &v112);
          v87 = v134;
          if (!v134 || (*(_BYTE *)(v134 + 57) & 8) != 0)
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v134, v85);
          v88 = **(_QWORD **)(v87 + 24) & 0xFFFFFFFFFFFFFFF8;
          if (v88)
          {
            v89 = (const char *)(v88 + 16);
            if (*(char *)(v88 + 39) < 0)
              v89 = *(const char **)v89;
          }
          else
          {
            v89 = "";
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Fallback shader node generated from the USD %s schema", (const char *)v85, v86, v89);
          v90 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
          if (!v90)
            v90 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
          v132 = (uint64_t *)((char *)v90 + 24);
          v91 = sub_20C5DEC3C((uint64_t)&v125, (_QWORD *)v90 + 3, (uint64_t)&unk_20CAC184C, &v132);
          v92 = (void **)(v91 + 3);
          if (*((char *)v91 + 47) < 0)
            operator delete(*v92);
          *(std::string *)v92 = v131;
          *((_BYTE *)&v131.__r_.__value_.__s + 23) = 0;
          v131.__r_.__value_.__s.__data_[0] = 0;
          if ((v136 & 7) != 0)
          {
            v93 = (unsigned int *)(v136 & 0xFFFFFFFFFFFFFFF8);
            do
              v94 = __ldxr(v93);
            while (__stlxr(v94 - 2, v93));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v135 + 1);
          sub_20BFD265C(&v135);
          if (v134)
            sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v134);
          v95 = (_QWORD *)sub_20C1E96B8((uint64_t)&v133, (uint64_t)&v125);
          pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils::GetPrimvarNamesMetadataString(v95, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v110, &v131);
          v96 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
          if (!v96)
            v96 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
          v132 = (uint64_t *)((char *)v96 + 48);
          v97 = sub_20C5DEC3C((uint64_t)&v125, (_QWORD *)v96 + 6, (uint64_t)&unk_20CAC184C, &v132);
          v98 = (uint64_t *)((char *)v84 + 32);
          v99 = (void **)(v97 + 3);
          if (*((char *)v97 + 47) < 0)
            operator delete(*v99);
          *(std::string *)v99 = v131;
          *((_BYTE *)&v131.__r_.__value_.__s + 23) = 0;
          v131.__r_.__value_.__s.__data_[0] = 0;
          sub_20C1E7FB4((uint64_t)&v133);
          pxrInternal__aapl__pxrReserved__::SdrShaderNode::SdrShaderNode((uint64_t)v83, (uint64_t *)a2, (uint64_t *)(a2 + 8), (__int128 *)(a2 + 24), (uint64_t *)(a2 + 48), v98, (uint64_t *)(a2 + 64), &v108, &v106, (uint64_t)v105, (uint64_t)&v125, (__int128 *)(a2 + 120));
          *v104 = v83;
          sub_20C1E7FB4((uint64_t)&v125);
          v133 = (unint64_t)v105;
          sub_20C086448((void ***)&v133);
          if (SHIBYTE(v107) < 0)
            operator delete((void *)v106);
          if (SHIBYTE(v109) < 0)
            operator delete((void *)v108);
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v110);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a2, a3);
        }
        if ((v118 & 7) != 0)
        {
          v100 = (unsigned int *)(v118 & 0xFFFFFFFFFFFFFFF8);
          do
            v101 = __ldxr(v100);
          while (__stlxr(v101 - 2, v100));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v117);
        sub_20BFD265C(&v116);
        if (v115)
          sub_20C35C614(v115);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a2, a3);
      }
      sub_20C455C74((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v130);
    }
    else
    {
      while (1)
      {
        v43 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v31);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v43, v41, &v110);
        v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v124);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v44, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v110, &v131);
        if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v131))
        {
          v133 = (unint64_t)"usdLux/lightDefParser.cpp";
          v134 = (unint64_t)"_CopyPropertiesFromSchema";
          v135 = 121;
          v136 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::_CopyPropertiesFromSchema(const SdfLayerRefPtr"
                                   " &, const TfToken &, const SdfPrimSpecHandle &)";
          v137 = 0;
          v45 = *(_QWORD *)v41 & 0xFFFFFFFFFFFFFFF8;
          if (v45)
          {
            v46 = (const char *)(v45 + 16);
            if (*(char *)(v45 + 39) < 0)
              v46 = *(const char **)v46;
          }
          else
          {
            v46 = "";
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v133, 1, (pxrInternal__aapl__pxrReserved__ *)"The generatedSchema for UsdLux does not have a prim spec for schema type '%s'.", v46);
          v61 = 0;
        }
        else
        {
          v47 = (uint64_t **)sub_20C0B0CA4(&v122);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v47, (uint64_t *)&__p);
          v48 = sub_20C0B0CA4(&v122);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v48, &v108);
          v49 = (uint64_t **)sub_20C0B0CA4((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v131);
          pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetProperties(v49, (uint64_t)&v133);
          pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::GetSize((uint64_t)&v133);
          Size = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::GetSize((uint64_t)&v133);
          pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::GetSize((uint64_t)&v133);
          if (Size)
          {
            v51 = 0;
            while (1)
            {
              sub_20BFE5588((uint64_t *)&v133, v51, (unsigned int **)&v106);
              sub_20C1034E8((uint64_t *)&v125, (uint64_t *)&v124);
              v52 = sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v106);
              pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v52, v105);
              v53 = sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v106);
              pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v53, (unsigned int **)&v130);
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v108, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v130, (int *)&v132);
              v54 = pxrInternal__aapl__pxrReserved__::SdfCopySpec((uint64_t *)&v125, (pxrInternal__aapl__pxrReserved__::SdfPath *)v105, (uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v132);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v132 + 1);
              sub_20BFD265C(&v132);
              if ((v130 & 7) != 0)
              {
                v55 = (unsigned int *)(v130 & 0xFFFFFFFFFFFFFFF8);
                do
                  v56 = __ldxr(v55);
                while (__stlxr(v56 - 2, v55));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v105 + 1);
              sub_20BFD265C(v105);
              v58 = v126;
              if (v126)
              {
                v57 = (unsigned int *)(v126 + 8);
                do
                {
                  v59 = __ldxr(v57);
                  v60 = v59 - 1;
                }
                while (__stlxr(v60, v57));
                if (!v60)
                  (*(void (**)(char *))(*(_QWORD *)v58 + 8))(v58);
              }
              if ((v54 & 1) == 0)
                break;
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v57, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v106);
              if (++v51 == Size)
                goto LABEL_80;
            }
            v125 = "usdLux/lightDefParser.cpp";
            v126 = "_CopyPropertiesFromSchema";
            v127 = 135;
            v128 = "BOOL pxrInternal__aapl__pxrReserved__::_CopyPropertiesFromSchema(const SdfLayerRefPtr &, const TfToke"
                   "n &, const SdfPrimSpecHandle &)";
            v129 = 0;
            v63 = sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v106);
            pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v63, v105);
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v105);
            v65 = *(_QWORD *)v41 & 0xFFFFFFFFFFFFFFF8;
            if (v65)
            {
              v66 = (const char *)(v65 + 16);
              if (*(char *)(v65 + 39) < 0)
                v66 = *(const char **)v66;
            }
            else
            {
              v66 = "";
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v125, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not copy property spec '%s' from generatedSchema for UsdLux schema '%s' to destination layer.", Text, v66);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v105 + 1);
            sub_20BFD265C(v105);
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v67, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v106);
            sub_20BFE6AEC((uint64_t)&v133);
            v61 = 0;
          }
          else
          {
LABEL_80:
            sub_20BFE6AEC((uint64_t)&v133);
            v61 = 1;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v108 + 1);
          sub_20BFD265C(&v108);
          v68 = v115;
          if (v115)
          {
            v62 = (unsigned int *)((char *)v115 + 8);
            do
            {
              v69 = __ldxr(v62);
              v70 = v69 - 1;
            }
            while (__stlxr(v70, v62));
            if (!v70)
              (*(void (**)(pxrInternal__aapl__pxrReserved__::Usd_PrimData *))(*(_QWORD *)v68 + 8))(v68);
          }
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v62, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v131);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v110 + 1);
        v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD265C(&v110);
        if ((v61 & 1) == 0)
          break;
        v41 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v41 + 8);
        if (v41 == v42)
          goto LABEL_95;
      }
      pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a2, a3);
    }
    v133 = (unint64_t)&v119;
    sub_20BEEB2B8((void ***)&v133);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v102, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v122);
    sub_20C103234(&v123);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a2, a3);
  }
  return sub_20C103234(&v124);
}

void sub_20C5EBF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,int a45,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a46,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a47,char *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  void *v53;
  uint64_t v54;
  void *v56;

  operator delete(v53);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a30);
  sub_20C35C2E0((uint64_t)&a34);
  sub_20C455C74((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v54 - 224));
  a48 = &a41;
  sub_20BEEB2B8((void ***)&a48);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v56, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a44);
  sub_20C103234(&a46);
  sub_20C103234(&a47);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetDiscoveryTypes(pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unsigned __int8 *)&qword_25498AAE8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)__cxa_guard_acquire(&qword_25498AAE8);
    if ((_DWORD)v3)
    {
      v4 = *(_QWORD *)(pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType(v3) + 8);
      v9[0] = v4;
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 2, v5));
        if ((v6 & 1) == 0)
          v9[0] = (uint64_t)v5;
      }
      sub_20C374970(qword_25498AAD0, v9, 1uLL);
      if ((v9[0] & 7) != 0)
      {
        v7 = (unsigned int *)(v9[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stlxr(v8 - 2, v7));
      }
      __cxa_atexit((void (*)(void *))sub_20C1984B4, qword_25498AAD0, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498AAE8);
    }
  }
  return qword_25498AAD0;
}

void sub_20C5EC468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v10;
  unsigned int v11;

  if ((a9 & 7) != 0)
  {
    v10 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  __cxa_guard_abort(&qword_25498AAE8);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5EC4AC()
{
  uint64_t *v0;

  v0 = sub_20C5EC4C0();
  return sub_20C5EC5E0(v0);
}

uint64_t *sub_20C5EC4C0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5DF048((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5EC594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5EC5E0(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C53DF78;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20C5EC644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C5EC670(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);
  operator delete(v1);
}

_QWORD *sub_20C5EC684()
{
  _QWORD *v0;

  v0 = operator new(0x10uLL);
  pxrInternal__aapl__pxrReserved__::NdrParserPlugin::NdrParserPlugin(v0);
  *v0 = &off_24C53DF28;
  return v0;
}

void sub_20C5EC6BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5EC6D0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      sub_20C358C48(a1, a2, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_20C5EC730(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFC9C88(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *sub_20C5EC744(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *result;
  void *v4;

  result = sub_20C5EC78C();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType::~SdrNodeContext_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *sub_20C5EC78C()
{
  pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *)operator new(0x60uLL);
  pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType::SdrNodeContext_StaticTokenType(v0);
  return v0;
}

void sub_20C5EC7B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

int8x8_t pxrInternal__aapl__pxrReserved__::UsdLuxBlackbodyTemperatureAsRgb(pxrInternal__aapl__pxrReserved__ *this, float a2)
{
  float v2;
  float v3;
  float v4;
  unsigned int v5;
  float v6;
  char *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v22;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;

  v2 = (float)(a2 + -1000.0) / 9000.0;
  v3 = v2 * 18.0;
  if (v2 > 1.0)
    v3 = 18.0;
  if (v2 >= 0.0)
    v4 = v3;
  else
    v4 = 0.0;
  v5 = vcvtms_s32_f32(v4);
  v6 = v4 - (float)(int)floorf(v4);
  v7 = (char *)&unk_20CAEFBD8 + 12 * (int)v5;
  v8 = *((float *)v7 + 2);
  v9 = *((float *)v7 + 5);
  v10 = *((float *)v7 + 8);
  v11 = *((float *)v7 + 11);
  v12 = (float)((float)((float)((float)(v8 * 0.0) + v9) + (float)(v10 * 0.0)) + (float)(v11 * 0.0))
      + (float)(v6
              * (float)((float)((float)((float)((float)(v8 * -0.5) + (float)(v9 * 0.0)) + (float)(v10 * 0.5))
                              + (float)(v11 * 0.0))
                      + (float)(v6
                              * (float)((float)((float)((float)(v8 + (float)(v9 * -2.5)) + (float)(v10 + v10))
                                              - (float)(v11 * 0.5))
                                      + (float)(v6
                                              * (float)((float)((float)((float)(v8 * -0.5) + (float)(v9 * 1.5))
                                                              - (float)(v10 * 1.5))
                                                      + (float)(v11 * 0.5)))))));
  v13 = *(float32x2_t *)(v7 + 12);
  v14 = *(float32x2_t *)(v7 + 24);
  v15 = *(float32x2_t *)(v7 + 36);
  v16 = vmul_f32(*(float32x2_t *)v7, (float32x2_t)0xBF000000BF000000);
  __asm { FMOV            V17.2S, #1.5 }
  v22 = vmul_f32(v15, (float32x2_t)0x3F0000003F000000);
  __asm { FMOV            V20.2S, #-2.5 }
  v24 = vmul_f32(v15, 0);
  v25 = vadd_f32(vadd_f32(vadd_f32(vadd_f32(vmul_f32(*(float32x2_t *)v7, 0), v13), vmul_f32(v14, 0)), v24), vmul_n_f32(vadd_f32(vadd_f32(vadd_f32(vadd_f32(v16, vmul_f32(v13, 0)), vmul_f32(v14, (float32x2_t)0x3F0000003F000000)), v24), vmul_n_f32(vadd_f32(vsub_f32(vadd_f32(vadd_f32(*(float32x2_t *)v7, vmul_f32(v13, _D20)), vadd_f32(v14, v14)), v22), vmul_n_f32(vadd_f32(vsub_f32(vadd_f32(v16, vmul_f32(v13, _D17)), vmul_f32(v14, _D17)), v22), v6)), v6)), v6));
  v26 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v25), 1.0 / (float)(vaddv_f32(vmul_f32(v25, (float32x2_t)0x3F3717593E59B3D0)) + (float)(v12 * 0.0722))));
  return vbic_s8((int8x8_t)v26, (int8x8_t)vcltz_f32(v26));
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53DFB8;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/boundableLightBase.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdLuxBoundableLightBase pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::"
                            "Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53DFB8;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5ECB3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AAF8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498AAF8))
  {
    __cxa_guard_release(&qword_25498AAF8);
  }
  return &qword_25498AAF0;
}

void sub_20C5ECBC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AAF8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AB08);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)__cxa_guard_acquire(&qword_25498AB08);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::_GetStaticTfType(v3);
      byte_25498AB00 = sub_20C35BD7C((char *)&qword_25498AAF0, v4, v5);
      __cxa_guard_release(&qword_25498AB08);
    }
  }
  return byte_25498AB00;
}

void sub_20C5ECC44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AB08);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::_GetStaticTfType(this);
  return &qword_25498AAF0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498AB28);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498AB28))
  {
    qword_25498AB10 = 0;
    *(_QWORD *)algn_25498AB18 = 0;
    qword_25498AB20 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AB10, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AB28);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498AB48);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498AB48))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)1);
    qword_25498AB30 = 0;
    *(_QWORD *)algn_25498AB38 = 0;
    qword_25498AB40 = 0;
    sub_20BFE538C(&qword_25498AB30, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AB30, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AB48);
  }
  if (v1)
    return &qword_25498AB30;
  else
    return &qword_25498AB10;
}

void sub_20C5ECD74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AB48);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetIntensityAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetIntensityAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5ECDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  sub_20C35C4F8((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)a2 = off_24C53E348;
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C5ECE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateIntensityAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE v7[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateIntensityAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_20C5ECEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetExposureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetExposureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5ECF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateExposureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE v7[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateExposureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_20C5ECFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetDiffuseAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetDiffuseAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5ECFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateDiffuseAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE v7[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateDiffuseAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_20C5ED064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetSpecularAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetSpecularAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5ED0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateSpecularAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE v7[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateSpecularAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_20C5ED124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetNormalizeAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5ED178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE v7[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateNormalizeAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_20C5ED1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetColorAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5ED238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE v7[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateColorAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_20C5ED2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetEnableColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetEnableColorTemperatureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5ED2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateEnableColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE v7[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateEnableColorTemperatureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_20C5ED364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetColorTemperatureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5ED3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE v7[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateColorTemperatureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_20C5ED424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetFiltersRel(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetFiltersRel((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5ED478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateFiltersRel(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateFiltersRel((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5ED4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5ED4E0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C565A28((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5ED5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5ED604()
{
  void *__p[2];
  char v1;

  sub_20C5EE310();
  sub_20BDDC0E4(__p, "CylinderLight");
  sub_20C5EE430((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5ED650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::~UsdLuxCylinderLight(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E010;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/cylinderLight.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdLuxCylinderLight pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::Get(const "
                            "UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E010;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5ED7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498AB58);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498AB58))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498AB50, "CylinderLight");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498AB50, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AB58);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498AB50, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E010;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdLux/cylinderLight.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdLuxCylinderLight pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::Define(con"
                            "st UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E010;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5ED9E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AB58);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AB68);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498AB68))
  {
    __cxa_guard_release(&qword_25498AB68);
  }
  return &qword_25498AB60;
}

void sub_20C5EDA88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AB68);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AB78);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *)__cxa_guard_acquire(&qword_25498AB78);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::_GetStaticTfType(v3);
      byte_25498AB70 = sub_20C35BD7C((char *)&qword_25498AB60, v4, v5);
      __cxa_guard_release(&qword_25498AB78);
    }
  }
  return byte_25498AB70;
}

void sub_20C5EDB04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AB78);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::_GetStaticTfType(this);
  return &qword_25498AB60;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::GetLengthAttr(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 168), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5EDBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::CreateLengthAttr(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 168), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 184), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5EDD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::CreateRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 184), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::GetTreatAsLineAttr(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 456), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5EDE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::CreateTreatAsLineAttr(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 456), v9, 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *SchemaAttributeNames;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int)this;
  v26 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498AB98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498AB98))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5)
      v5 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v6 = *((_QWORD *)v5 + 21);
    v23 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v9)
      v9 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v10 = *((_QWORD *)v9 + 23);
    v24 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v13)
      v13 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v14 = *((_QWORD *)v13 + 57);
    v25 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498AB80, &v23, 3uLL);
    v17 = &v26;
    do
    {
      v19 = *--v17;
      v18 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    while (v17 != &v23);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AB80, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AB98);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498ABB8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498ABB8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)1);
    sub_20C5EE224((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498ABA0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498ABB8);
  }
  if (v1)
    return &qword_25498ABA0;
  else
    return &qword_25498AB80;
}

void sub_20C5EE194(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AB98);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5EE224(uint64_t **a1)
{
  qword_25498ABA8 = 0;
  unk_25498ABB0 = 0;
  qword_25498ABA0 = 0;
  sub_20BFC9A6C((char **)&qword_25498ABA0, ((unk_25498AB88 - qword_25498AB80) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498ABA0, (_QWORD *)qword_25498ABA8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498ABA0, (_QWORD *)qword_25498ABA8, (uint64_t *)qword_25498AB80, unk_25498AB88, (unk_25498AB88 - qword_25498AB80) >> 3);
}

void sub_20C5EE2B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C5EE2D8(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType *v3;
  char *v4;
  std::type_info var8;

  var8.__vftable = (std::type_info_vtbl *)sub_20C5EE570;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_20C5EE310()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5EE4E0((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5EE3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5EE430(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5EE4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C5EE4E0(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C5EE54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C5EE570(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3, unint64_t *a4)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v6;
  char v7;
  char v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  float v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  float32x2_t v23;
  float v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  float32x2_t *v29;
  float32x2_t *v30;
  float32x2_t v31;
  float v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  double v36;
  float64x2_t v37;
  double v38;
  uint64_t v39;
  char *v40;
  float32_t v41;
  float32x2_t *v42;
  double v43;
  uint64_t v44;
  char *v45;
  float v46;
  unint64_t v47;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  double v52;
  float64x2_t v53;
  double v54;
  float64x2_t v55;
  uint64_t v56;
  float64x2_t v57;
  double v58;
  char v59;
  float v60;
  int v61;
  void (**v62)(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *__hidden);
  uint64_t v63;

  v6 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v62, a1);
  v62 = off_24C53E010;
  if (!v63
    || (*(_BYTE *)(v63 + 57) & 8) != 0
    || (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v6) & 1) == 0)
  {
    *(_QWORD *)&v55.f64[0] = "usdLux/cylinderLight.cpp";
    *(_QWORD *)&v55.f64[1] = "_ComputeExtent";
    v56 = 223;
    *(_QWORD *)&v57.f64[0] = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtent(const UsdGeomBoundable &, const UsdTi"
                             "meCode &, const GfMatrix4d *, VtVec3fArray *)";
    LOBYTE(v57.f64[1]) = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v55, "light", 0) & 1) == 0)
      goto LABEL_19;
  }
  v61 = 0;
  pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *)&v62, (uint64_t)&v55);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>((uint64_t)&v55, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v61);
  v8 = v7;
  if ((LOBYTE(v57.f64[0]) & 7) != 0)
  {
    v9 = (unsigned int *)(*(_QWORD *)&v57.f64[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
  sub_20BFD265C(&v56);
  if (*(_QWORD *)&v55.f64[1])
    sub_20C35C614(*(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v55.f64[1]);
  if ((v8 & 1) != 0)
  {
    v60 = 0.0;
    pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::GetLengthAttr((pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *)&v62, (uint64_t)&v55);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>((uint64_t)&v55, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v60);
    v12 = v11;
    if ((LOBYTE(v57.f64[0]) & 7) != 0)
    {
      v13 = (unsigned int *)(*(_QWORD *)&v57.f64[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
    sub_20BFD265C(&v56);
    if (*(_QWORD *)&v55.f64[1])
      sub_20C35C614(*(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v55.f64[1]);
    if ((v12 & 1) != 0)
    {
      v16 = v60;
      v15 = v61;
      LODWORD(v55.f64[1]) = 0;
      v55.f64[0] = 0.0;
      *(_QWORD *)&v51.f64[0] = &v55;
      sub_20BF5AD04(a4, 2uLL, (uint64_t **)&v51);
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      v19 = a4[4];
      *(_DWORD *)(v19 + 12) = v15;
      *(_DWORD *)(v19 + 16) = v15;
      *(float *)(v19 + 20) = v16 * 0.5;
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v20, v21);
      v22 = a4[4];
      v23 = *(float32x2_t *)(v22 + 12);
      v24 = *(float *)(v22 + 20);
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v25, v26);
      v29 = (float32x2_t *)a4[4];
      *v29 = vneg_f32(v23);
      v29[1].f32[0] = -v24;
      if (a3)
      {
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v27, v28);
        v30 = (float32x2_t *)a4[4];
        v31 = *v30;
        v32 = v30[1].f32[0];
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v33, v34);
        v35 = a4[4];
        v36 = *(float *)(v35 + 20);
        v37 = vcvtq_f64_f32(*(float32x2_t *)(v35 + 12));
        v55 = vcvtq_f64_f32(v31);
        *(double *)&v56 = v32;
        v57 = v37;
        v58 = v36;
        pxrInternal__aapl__pxrReserved__::GfBBox3d::_SetMatrices((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v55, a3);
        v59 = 0;
        pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v55, (uint64_t)&v51);
        v49 = v51;
        v38 = v52;
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v39, v40);
        v41 = v38;
        v42 = (float32x2_t *)a4[4];
        *v42 = vcvt_f32_f64(v49);
        v42[1].f32[0] = v41;
        v50 = v53;
        v43 = v54;
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v44, v45);
        v46 = v43;
        v47 = a4[4];
        *(float32x2_t *)(v47 + 12) = vcvt_f32_f64(v50);
        *(float *)(v47 + 20) = v46;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)&v62);
  return v12;
}

void sub_20C5EE838(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)(v1 - 88));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *sub_20C5EE88C(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *result;
  void *v4;

  result = sub_20C5EE8D4();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C5EE914((uint64_t)result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *sub_20C5EE8D4()
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)operator new(0x2B0uLL);
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType::UsdLuxTokensType(v0);
  return v0;
}

void sub_20C5EE900(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5EE914(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int *v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int *v171;
  unsigned int v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  uint64_t v179;
  unsigned int *v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int v187;
  uint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  uint64_t v194;
  unsigned int *v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  uint64_t v200;
  unsigned int *v201;
  unsigned int v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  uint64_t v206;
  unsigned int *v207;
  unsigned int v208;
  uint64_t v209;
  unsigned int *v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int *v213;
  unsigned int v214;
  uint64_t v215;
  unsigned int *v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int *v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int *v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int *v225;
  unsigned int v226;
  uint64_t v227;
  unsigned int *v228;
  unsigned int v229;
  uint64_t v230;
  unsigned int *v231;
  unsigned int v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  uint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int *v240;
  unsigned int v241;
  uint64_t v242;
  unsigned int *v243;
  unsigned int v244;
  uint64_t v245;
  unsigned int *v246;
  unsigned int v247;
  unsigned int *v248;
  unsigned int v249;
  void **v251;

  v251 = (void **)(a1 + 664);
  sub_20BEEB2B8(&v251);
  v2 = *(_QWORD *)(a1 + 656);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 648);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 640);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 632);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 624);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 616);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *(_QWORD *)(a1 + 608);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *(_QWORD *)(a1 + 600);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *(_QWORD *)(a1 + 592);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *(_QWORD *)(a1 + 584);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *(_QWORD *)(a1 + 576);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *(_QWORD *)(a1 + 568);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(a1 + 560);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *(_QWORD *)(a1 + 552);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *(_QWORD *)(a1 + 544);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *(_QWORD *)(a1 + 536);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *(_QWORD *)(a1 + 528);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *(_QWORD *)(a1 + 520);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *(_QWORD *)(a1 + 512);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *(_QWORD *)(a1 + 504);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *(_QWORD *)(a1 + 496);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *(_QWORD *)(a1 + 488);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *(_QWORD *)(a1 + 480);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *(_QWORD *)(a1 + 472);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *(_QWORD *)(a1 + 464);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *(_QWORD *)(a1 + 456);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *(_QWORD *)(a1 + 448);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *(_QWORD *)(a1 + 440);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *(_QWORD *)(a1 + 432);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *(_QWORD *)(a1 + 424);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *(_QWORD *)(a1 + 416);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = *(_QWORD *)(a1 + 408);
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = *(_QWORD *)(a1 + 400);
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  v101 = *(_QWORD *)(a1 + 392);
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  v104 = *(_QWORD *)(a1 + 384);
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  v107 = *(_QWORD *)(a1 + 376);
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  v110 = *(_QWORD *)(a1 + 368);
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  v113 = *(_QWORD *)(a1 + 360);
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stlxr(v115 - 2, v114));
  }
  v116 = *(_QWORD *)(a1 + 352);
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stlxr(v118 - 2, v117));
  }
  v119 = *(_QWORD *)(a1 + 344);
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stlxr(v121 - 2, v120));
  }
  v122 = *(_QWORD *)(a1 + 336);
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stlxr(v124 - 2, v123));
  }
  v125 = *(_QWORD *)(a1 + 328);
  if ((v125 & 7) != 0)
  {
    v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stlxr(v127 - 2, v126));
  }
  v128 = *(_QWORD *)(a1 + 320);
  if ((v128 & 7) != 0)
  {
    v129 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stlxr(v130 - 2, v129));
  }
  v131 = *(_QWORD *)(a1 + 312);
  if ((v131 & 7) != 0)
  {
    v132 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
    do
      v133 = __ldxr(v132);
    while (__stlxr(v133 - 2, v132));
  }
  v134 = *(_QWORD *)(a1 + 304);
  if ((v134 & 7) != 0)
  {
    v135 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
    do
      v136 = __ldxr(v135);
    while (__stlxr(v136 - 2, v135));
  }
  v137 = *(_QWORD *)(a1 + 296);
  if ((v137 & 7) != 0)
  {
    v138 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stlxr(v139 - 2, v138));
  }
  v140 = *(_QWORD *)(a1 + 288);
  if ((v140 & 7) != 0)
  {
    v141 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
    do
      v142 = __ldxr(v141);
    while (__stlxr(v142 - 2, v141));
  }
  v143 = *(_QWORD *)(a1 + 280);
  if ((v143 & 7) != 0)
  {
    v144 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
    do
      v145 = __ldxr(v144);
    while (__stlxr(v145 - 2, v144));
  }
  v146 = *(_QWORD *)(a1 + 272);
  if ((v146 & 7) != 0)
  {
    v147 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
    do
      v148 = __ldxr(v147);
    while (__stlxr(v148 - 2, v147));
  }
  v149 = *(_QWORD *)(a1 + 264);
  if ((v149 & 7) != 0)
  {
    v150 = (unsigned int *)(v149 & 0xFFFFFFFFFFFFFFF8);
    do
      v151 = __ldxr(v150);
    while (__stlxr(v151 - 2, v150));
  }
  v152 = *(_QWORD *)(a1 + 256);
  if ((v152 & 7) != 0)
  {
    v153 = (unsigned int *)(v152 & 0xFFFFFFFFFFFFFFF8);
    do
      v154 = __ldxr(v153);
    while (__stlxr(v154 - 2, v153));
  }
  v155 = *(_QWORD *)(a1 + 248);
  if ((v155 & 7) != 0)
  {
    v156 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
    do
      v157 = __ldxr(v156);
    while (__stlxr(v157 - 2, v156));
  }
  v158 = *(_QWORD *)(a1 + 240);
  if ((v158 & 7) != 0)
  {
    v159 = (unsigned int *)(v158 & 0xFFFFFFFFFFFFFFF8);
    do
      v160 = __ldxr(v159);
    while (__stlxr(v160 - 2, v159));
  }
  v161 = *(_QWORD *)(a1 + 232);
  if ((v161 & 7) != 0)
  {
    v162 = (unsigned int *)(v161 & 0xFFFFFFFFFFFFFFF8);
    do
      v163 = __ldxr(v162);
    while (__stlxr(v163 - 2, v162));
  }
  v164 = *(_QWORD *)(a1 + 224);
  if ((v164 & 7) != 0)
  {
    v165 = (unsigned int *)(v164 & 0xFFFFFFFFFFFFFFF8);
    do
      v166 = __ldxr(v165);
    while (__stlxr(v166 - 2, v165));
  }
  v167 = *(_QWORD *)(a1 + 216);
  if ((v167 & 7) != 0)
  {
    v168 = (unsigned int *)(v167 & 0xFFFFFFFFFFFFFFF8);
    do
      v169 = __ldxr(v168);
    while (__stlxr(v169 - 2, v168));
  }
  v170 = *(_QWORD *)(a1 + 208);
  if ((v170 & 7) != 0)
  {
    v171 = (unsigned int *)(v170 & 0xFFFFFFFFFFFFFFF8);
    do
      v172 = __ldxr(v171);
    while (__stlxr(v172 - 2, v171));
  }
  v173 = *(_QWORD *)(a1 + 200);
  if ((v173 & 7) != 0)
  {
    v174 = (unsigned int *)(v173 & 0xFFFFFFFFFFFFFFF8);
    do
      v175 = __ldxr(v174);
    while (__stlxr(v175 - 2, v174));
  }
  v176 = *(_QWORD *)(a1 + 192);
  if ((v176 & 7) != 0)
  {
    v177 = (unsigned int *)(v176 & 0xFFFFFFFFFFFFFFF8);
    do
      v178 = __ldxr(v177);
    while (__stlxr(v178 - 2, v177));
  }
  v179 = *(_QWORD *)(a1 + 184);
  if ((v179 & 7) != 0)
  {
    v180 = (unsigned int *)(v179 & 0xFFFFFFFFFFFFFFF8);
    do
      v181 = __ldxr(v180);
    while (__stlxr(v181 - 2, v180));
  }
  v182 = *(_QWORD *)(a1 + 176);
  if ((v182 & 7) != 0)
  {
    v183 = (unsigned int *)(v182 & 0xFFFFFFFFFFFFFFF8);
    do
      v184 = __ldxr(v183);
    while (__stlxr(v184 - 2, v183));
  }
  v185 = *(_QWORD *)(a1 + 168);
  if ((v185 & 7) != 0)
  {
    v186 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
    do
      v187 = __ldxr(v186);
    while (__stlxr(v187 - 2, v186));
  }
  v188 = *(_QWORD *)(a1 + 160);
  if ((v188 & 7) != 0)
  {
    v189 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFFFF8);
    do
      v190 = __ldxr(v189);
    while (__stlxr(v190 - 2, v189));
  }
  v191 = *(_QWORD *)(a1 + 152);
  if ((v191 & 7) != 0)
  {
    v192 = (unsigned int *)(v191 & 0xFFFFFFFFFFFFFFF8);
    do
      v193 = __ldxr(v192);
    while (__stlxr(v193 - 2, v192));
  }
  v194 = *(_QWORD *)(a1 + 144);
  if ((v194 & 7) != 0)
  {
    v195 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
    do
      v196 = __ldxr(v195);
    while (__stlxr(v196 - 2, v195));
  }
  v197 = *(_QWORD *)(a1 + 136);
  if ((v197 & 7) != 0)
  {
    v198 = (unsigned int *)(v197 & 0xFFFFFFFFFFFFFFF8);
    do
      v199 = __ldxr(v198);
    while (__stlxr(v199 - 2, v198));
  }
  v200 = *(_QWORD *)(a1 + 128);
  if ((v200 & 7) != 0)
  {
    v201 = (unsigned int *)(v200 & 0xFFFFFFFFFFFFFFF8);
    do
      v202 = __ldxr(v201);
    while (__stlxr(v202 - 2, v201));
  }
  v203 = *(_QWORD *)(a1 + 120);
  if ((v203 & 7) != 0)
  {
    v204 = (unsigned int *)(v203 & 0xFFFFFFFFFFFFFFF8);
    do
      v205 = __ldxr(v204);
    while (__stlxr(v205 - 2, v204));
  }
  v206 = *(_QWORD *)(a1 + 112);
  if ((v206 & 7) != 0)
  {
    v207 = (unsigned int *)(v206 & 0xFFFFFFFFFFFFFFF8);
    do
      v208 = __ldxr(v207);
    while (__stlxr(v208 - 2, v207));
  }
  v209 = *(_QWORD *)(a1 + 104);
  if ((v209 & 7) != 0)
  {
    v210 = (unsigned int *)(v209 & 0xFFFFFFFFFFFFFFF8);
    do
      v211 = __ldxr(v210);
    while (__stlxr(v211 - 2, v210));
  }
  v212 = *(_QWORD *)(a1 + 96);
  if ((v212 & 7) != 0)
  {
    v213 = (unsigned int *)(v212 & 0xFFFFFFFFFFFFFFF8);
    do
      v214 = __ldxr(v213);
    while (__stlxr(v214 - 2, v213));
  }
  v215 = *(_QWORD *)(a1 + 88);
  if ((v215 & 7) != 0)
  {
    v216 = (unsigned int *)(v215 & 0xFFFFFFFFFFFFFFF8);
    do
      v217 = __ldxr(v216);
    while (__stlxr(v217 - 2, v216));
  }
  v218 = *(_QWORD *)(a1 + 80);
  if ((v218 & 7) != 0)
  {
    v219 = (unsigned int *)(v218 & 0xFFFFFFFFFFFFFFF8);
    do
      v220 = __ldxr(v219);
    while (__stlxr(v220 - 2, v219));
  }
  v221 = *(_QWORD *)(a1 + 72);
  if ((v221 & 7) != 0)
  {
    v222 = (unsigned int *)(v221 & 0xFFFFFFFFFFFFFFF8);
    do
      v223 = __ldxr(v222);
    while (__stlxr(v223 - 2, v222));
  }
  v224 = *(_QWORD *)(a1 + 64);
  if ((v224 & 7) != 0)
  {
    v225 = (unsigned int *)(v224 & 0xFFFFFFFFFFFFFFF8);
    do
      v226 = __ldxr(v225);
    while (__stlxr(v226 - 2, v225));
  }
  v227 = *(_QWORD *)(a1 + 56);
  if ((v227 & 7) != 0)
  {
    v228 = (unsigned int *)(v227 & 0xFFFFFFFFFFFFFFF8);
    do
      v229 = __ldxr(v228);
    while (__stlxr(v229 - 2, v228));
  }
  v230 = *(_QWORD *)(a1 + 48);
  if ((v230 & 7) != 0)
  {
    v231 = (unsigned int *)(v230 & 0xFFFFFFFFFFFFFFF8);
    do
      v232 = __ldxr(v231);
    while (__stlxr(v232 - 2, v231));
  }
  v233 = *(_QWORD *)(a1 + 40);
  if ((v233 & 7) != 0)
  {
    v234 = (unsigned int *)(v233 & 0xFFFFFFFFFFFFFFF8);
    do
      v235 = __ldxr(v234);
    while (__stlxr(v235 - 2, v234));
  }
  v236 = *(_QWORD *)(a1 + 32);
  if ((v236 & 7) != 0)
  {
    v237 = (unsigned int *)(v236 & 0xFFFFFFFFFFFFFFF8);
    do
      v238 = __ldxr(v237);
    while (__stlxr(v238 - 2, v237));
  }
  v239 = *(_QWORD *)(a1 + 24);
  if ((v239 & 7) != 0)
  {
    v240 = (unsigned int *)(v239 & 0xFFFFFFFFFFFFFFF8);
    do
      v241 = __ldxr(v240);
    while (__stlxr(v241 - 2, v240));
  }
  v242 = *(_QWORD *)(a1 + 16);
  if ((v242 & 7) != 0)
  {
    v243 = (unsigned int *)(v242 & 0xFFFFFFFFFFFFFFF8);
    do
      v244 = __ldxr(v243);
    while (__stlxr(v244 - 2, v243));
  }
  v245 = *(_QWORD *)(a1 + 8);
  if ((v245 & 7) != 0)
  {
    v246 = (unsigned int *)(v245 & 0xFFFFFFFFFFFFFFF8);
    do
      v247 = __ldxr(v246);
    while (__stlxr(v247 - 2, v246));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v248 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v249 = __ldxr(v248);
    while (__stlxr(v249 - 2, v248));
  }
  return a1;
}

void sub_20C5EF3AC()
{
  void *__p[2];
  char v1;

  sub_20C5EFD00();
  sub_20BDDC0E4(__p, "DiskLight");
  sub_20C5EFE20((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5EF3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::~UsdLuxDiskLight(pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E068;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/diskLight.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdLuxDiskLight pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::Get(const UsdStage"
                            "Ptr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E068;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5EF59C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498ABC8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498ABC8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498ABC0, "DiskLight");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498ABC0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498ABC8);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498ABC0, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E068;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdLux/diskLight.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdLuxDiskLight pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::Define(const UsdSt"
                            "agePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E068;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5EF78C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498ABC8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498ABD8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498ABD8))
  {
    __cxa_guard_release(&qword_25498ABD8);
  }
  return &qword_25498ABD0;
}

void sub_20C5EF830(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498ABD8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498ABE8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *)__cxa_guard_acquire(&qword_25498ABE8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::_GetStaticTfType(v3);
      byte_25498ABE0 = sub_20C35BD7C((char *)&qword_25498ABD0, v4, v5);
      __cxa_guard_release(&qword_25498ABE8);
    }
  }
  return byte_25498ABE0;
}

void sub_20C5EF8AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498ABE8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::_GetStaticTfType(this);
  return &qword_25498ABD0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 184), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5EF984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::CreateRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 184), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *SchemaAttributeNames;
  uint64_t v12[2];

  v1 = (int)this;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498AC08);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498AC08))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5)
      v5 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v6 = *((_QWORD *)v5 + 23);
    v12[0] = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v12[0] = (uint64_t)v7;
    }
    sub_20C374970(&qword_25498ABF0, v12, 1uLL);
    if ((v12[0] & 7) != 0)
    {
      v9 = (unsigned int *)(v12[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498ABF0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AC08);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498AC28);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498AC28))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)1);
    sub_20C5EFC14((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AC10, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AC28);
  }
  if (v1)
    return &qword_25498AC10;
  else
    return &qword_25498ABF0;
}

void sub_20C5EFBC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AC08);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5EFC14(uint64_t **a1)
{
  qword_25498AC18 = 0;
  unk_25498AC20 = 0;
  qword_25498AC10 = 0;
  sub_20BFC9A6C((char **)&qword_25498AC10, ((unk_25498ABF8 - qword_25498ABF0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498AC10, (_QWORD *)qword_25498AC18, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498AC10, (_QWORD *)qword_25498AC18, (uint64_t *)qword_25498ABF0, unk_25498ABF8, (unk_25498ABF8 - qword_25498ABF0) >> 3);
}

void sub_20C5EFCA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C5EFCC8(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType *v3;
  char *v4;
  std::type_info var8;

  var8.__vftable = (std::type_info_vtbl *)sub_20C5EFED4;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_20C5EFD00()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5EE4E0((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5EFDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5EFE20(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5EFEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C5EFED4(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3, unint64_t *a4)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  char *v13;
  _DWORD *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  float32x2_t v18;
  float v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  float32x2_t *v24;
  float32x2_t *v25;
  float32x2_t v26;
  float v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  double v31;
  float64x2_t v32;
  double v33;
  uint64_t v34;
  char *v35;
  float32_t v36;
  float32x2_t *v37;
  double v38;
  uint64_t v39;
  char *v40;
  float v41;
  unint64_t v42;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  uint64_t v51;
  float64x2_t v52;
  double v53;
  char v54;
  int v55;
  void (**v56)(pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *__hidden);
  uint64_t v57;

  v6 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v56, a1);
  v56 = off_24C53E068;
  if (v57
    && (*(_BYTE *)(v57 + 57) & 8) == 0
    && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v6) & 1) != 0
    || (*(_QWORD *)&v50.f64[0] = "usdLux/diskLight.cpp",
        *(_QWORD *)&v50.f64[1] = "_ComputeExtent",
        v51 = 185,
        *(_QWORD *)&v52.f64[0] = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtent(const UsdGeomBoundable &, const U"
                                 "sdTimeCode &, const GfMatrix4d *, VtVec3fArray *)",
        LOBYTE(v52.f64[1]) = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v50, "light", 0) & 1) != 0))
  {
    v55 = 0;
    pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *)&v56, (uint64_t)&v50);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>((uint64_t)&v50, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v55);
    v8 = v7;
    if ((LOBYTE(v52.f64[0]) & 7) != 0)
    {
      v9 = (unsigned int *)(*(_QWORD *)&v52.f64[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
    sub_20BFD265C(&v51);
    if (*(_QWORD *)&v50.f64[1])
      sub_20C35C614(*(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v50.f64[1]);
    if ((v8 & 1) != 0)
    {
      v11 = v55;
      LODWORD(v50.f64[1]) = 0;
      v50.f64[0] = 0.0;
      *(_QWORD *)&v46.f64[0] = &v50;
      sub_20BF5AD04(a4, 2uLL, (uint64_t **)&v46);
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v12, v13);
      v14 = (_DWORD *)a4[4];
      v14[3] = v11;
      v14[4] = v11;
      v14[5] = 0;
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
      v17 = a4[4];
      v18 = *(float32x2_t *)(v17 + 12);
      v19 = *(float *)(v17 + 20);
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v20, v21);
      v24 = (float32x2_t *)a4[4];
      *v24 = vneg_f32(v18);
      v24[1].f32[0] = -v19;
      if (a3)
      {
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v22, v23);
        v25 = (float32x2_t *)a4[4];
        v26 = *v25;
        v27 = v25[1].f32[0];
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v28, v29);
        v30 = a4[4];
        v31 = *(float *)(v30 + 20);
        v32 = vcvtq_f64_f32(*(float32x2_t *)(v30 + 12));
        v50 = vcvtq_f64_f32(v26);
        *(double *)&v51 = v27;
        v52 = v32;
        v53 = v31;
        pxrInternal__aapl__pxrReserved__::GfBBox3d::_SetMatrices((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v50, a3);
        v54 = 0;
        pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v50, (uint64_t)&v46);
        v44 = v46;
        v33 = v47;
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v34, v35);
        v36 = v33;
        v37 = (float32x2_t *)a4[4];
        *v37 = vcvt_f32_f64(v44);
        v37[1].f32[0] = v36;
        v45 = v48;
        v38 = v49;
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v39, v40);
        v41 = v38;
        v42 = a4[4];
        *(float32x2_t *)(v42 + 12) = vcvt_f32_f64(v45);
        *(float *)(v42 + 20) = v41;
      }
    }
  }
  else
  {
    v8 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)&v56);
  return v8;
}

void sub_20C5F012C(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_20C5F0174()
{
  void *__p[2];
  char v1;

  sub_20C5F0A90();
  sub_20BDDC0E4(__p, "DistantLight");
  sub_20C5F0BB0((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5F01C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::~UsdLuxDistantLight(pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::~UsdLuxNonboundableLightBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E0C0;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/distantLight.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdLuxDistantLight pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E0C0;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5F0364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498AC38);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498AC38))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498AC30, "DistantLight");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498AC30, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AC38);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498AC30, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E0C0;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdLux/distantLight.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdLuxDistantLight pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::Define(const"
                            " UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E0C0;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5F0554(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AC38);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AC48);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498AC48))
  {
    __cxa_guard_release(&qword_25498AC48);
  }
  return &qword_25498AC40;
}

void sub_20C5F05F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AC48);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AC58);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *)__cxa_guard_acquire(&qword_25498AC58);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::_GetStaticTfType(v3);
      byte_25498AC50 = sub_20C35BD7C((char *)&qword_25498AC40, v4, v5);
      __cxa_guard_release(&qword_25498AC58);
    }
  }
  return byte_25498AC50;
}

void sub_20C5F0674(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AC58);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::_GetStaticTfType(this);
  return &qword_25498AC40;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::GetAngleAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 104), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F074C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::CreateAngleAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 104), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *SchemaAttributeNames;
  uint64_t v12[2];

  v1 = (int)this;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498AC78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498AC78))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5)
      v5 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v6 = *((_QWORD *)v5 + 13);
    v12[0] = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v12[0] = (uint64_t)v7;
    }
    sub_20C374970(&qword_25498AC60, v12, 1uLL);
    if ((v12[0] & 7) != 0)
    {
      v9 = (unsigned int *)(v12[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AC60, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AC78);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498AC98);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498AC98))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *)1);
    sub_20C5F09DC((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AC80, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AC98);
  }
  if (v1)
    return &qword_25498AC80;
  else
    return &qword_25498AC60;
}

void sub_20C5F098C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AC78);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5F09DC(uint64_t **a1)
{
  qword_25498AC88 = 0;
  unk_25498AC90 = 0;
  qword_25498AC80 = 0;
  sub_20BFC9A6C((char **)&qword_25498AC80, ((unk_25498AC68 - qword_25498AC60) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498AC80, (_QWORD *)qword_25498AC88, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498AC80, (_QWORD *)qword_25498AC88, (uint64_t *)qword_25498AC60, unk_25498AC68, (unk_25498AC68 - qword_25498AC60) >> 3);
}

void sub_20C5F0A70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5F0A90()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5F0C60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5F0B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5F0BB0(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5F0C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C5F0C60(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C5F0CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C5F0CF0()
{
  void *__p[2];
  char v1;

  sub_20C5F1F30();
  sub_20BDDC0E4(__p, "DomeLight");
  sub_20C5F2050((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5F0D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::~UsdLuxDomeLight(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::~UsdLuxNonboundableLightBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E118;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/domeLight.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdLuxDomeLight pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::Get(const UsdStage"
                            "Ptr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E118;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5F0EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498ACA8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498ACA8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498ACA0, "DomeLight");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498ACA0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498ACA8);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498ACA0, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E118;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdLux/domeLight.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdLuxDomeLight pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::Define(const UsdSt"
                            "agePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E118;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5F10D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498ACA8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498ACB8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498ACB8))
  {
    __cxa_guard_release(&qword_25498ACB8);
  }
  return &qword_25498ACB0;
}

void sub_20C5F1174(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498ACB8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498ACC8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *)__cxa_guard_acquire(&qword_25498ACC8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::_GetStaticTfType(v3);
      byte_25498ACC0 = sub_20C35BD7C((char *)&qword_25498ACB0, v4, v5);
      __cxa_guard_release(&qword_25498ACC8);
    }
  }
  return byte_25498ACC0;
}

void sub_20C5F11F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498ACC8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::_GetStaticTfType(this);
  return &qword_25498ACB0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::GetTextureFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 296), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F12C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::CreateTextureFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 296), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::GetTextureFormatAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 304), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F1420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::CreateTextureFormatAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 304), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::GetGuideRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 80), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F1578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::CreateGuideRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 80), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::GetPortalsRel(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 432), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F16D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::CreatePortalsRel(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 432), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F1790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *SchemaAttributeNames;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int)this;
  v26 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498ACE8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498ACE8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5)
      v5 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v6 = *((_QWORD *)v5 + 37);
    v23 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v9)
      v9 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v10 = *((_QWORD *)v9 + 38);
    v24 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v13)
      v13 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v14 = *((_QWORD *)v13 + 10);
    v25 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498ACD0, &v23, 3uLL);
    v17 = &v26;
    do
    {
      v19 = *--v17;
      v18 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    while (v17 != &v23);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498ACD0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498ACE8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498AD08);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498AD08))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *)1);
    sub_20C5F1A8C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498ACF0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AD08);
  }
  if (v1)
    return &qword_25498ACF0;
  else
    return &qword_25498ACD0;
}

void sub_20C5F19FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498ACE8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5F1A8C(uint64_t **a1)
{
  qword_25498ACF8 = 0;
  unk_25498AD00 = 0;
  qword_25498ACF0 = 0;
  sub_20BFC9A6C((char **)&qword_25498ACF0, ((unk_25498ACD8 - qword_25498ACD0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498ACF0, (_QWORD *)qword_25498ACF8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498ACF0, (_QWORD *)qword_25498ACF8, (uint64_t *)qword_25498ACD0, unk_25498ACD8, (unk_25498ACD8 - qword_25498ACD0) >> 3);
}

void sub_20C5F1B20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::OrientToStageUpAxis(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v14;
  _QWORD *v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  _DWORD *v18;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;
  BOOL v27;
  void **v28;
  uint64_t v29;
  std::string v30;

  sub_20C35C4F8((uint64_t)&v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v22, v2, &v28);
  pxrInternal__aapl__pxrReserved__::UsdGeomGetStageUpAxis((uint64_t *)&v28, (unsigned int **)&v30);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v4 = (unsigned int *)(v30.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
  v5 = *((_QWORD *)v3 + 169);
  if ((v30.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    do
      v6 = __ldxr(v4);
    while (__stlxr(v6 - 2, v4));
  }
  v7 = v29;
  if (v29)
  {
    v8 = (unsigned int *)(v29 + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if ((v26 & 7) != 0)
  {
    v11 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  v13 = v5 & 0xFFFFFFFFFFFFFFF8;
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
  if (v4 == (unsigned int *)v13)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v14)
      v14 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v15 = (_QWORD *)((char *)v14 + 416);
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(3, (_QWORD *)v14 + 52, 0, &v30);
    v27 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrderedXformOps(this, &v27, &v22);
    v16 = v22;
    v17 = v23;
    while (1)
    {
      if ((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v16 == v17)
      {
        v28 = (void **)&v22;
        sub_20C54356C(&v28);
        pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp((uint64_t)this, 3, 1, v15, 0, (uint64_t)&v22);
        LODWORD(v28) = 1119092736;
        sub_20C5F1E20((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&v22, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v28, NAN);
        sub_20C5435DC((uint64_t)&v22);
        goto LABEL_24;
      }
      v18 = (_DWORD *)sub_20C555914(v16);
      v19 = sub_20C398E78(v18);
      if ((*(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8) == (v30.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8))
        break;
      v16 += 136;
    }
    v28 = (void **)&v22;
    sub_20C54356C(&v28);
LABEL_24:
    if ((v30.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v20 = (unsigned int *)(v30.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
  }
}

void sub_20C5F1D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  va_list va;

  va_start(va, a2);
  v4 = *(_QWORD *)(v2 - 40);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  v7 = *(unsigned int **)(v2 - 48);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5F1E20(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  unint64_t v3;
  const char *v4;
  pxrInternal__aapl__pxrReserved__ **v7;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  _QWORD v12[4];
  char v13;

  if (*((_BYTE *)a1 + 132))
  {
    v12[0] = "usdGeom/xformOp.h";
    v12[1] = "Set";
    v12[2] = 399;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::Set(const T &, UsdTimeCode) const [T = float]";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a1, (unsigned int **)&v11);
    v3 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v4 = (const char *)(v3 + 16);
      if (*(char *)(v3 + 39) < 0)
        v4 = *(const char **)v4;
    }
    else
    {
      v4 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set a value on the inverse xformOp '%s'. Please set value on the paired non-inverse xformOp instead.", v4);
    if ((v11 & 7) != 0)
    {
      v9 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    return 0;
  }
  else
  {
    v7 = (pxrInternal__aapl__pxrReserved__ **)sub_20C555914((uint64_t)a1);
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<float>(v7, a2, a3);
  }
}

uint64_t *sub_20C5F1F30()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5F0C60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5F2004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5F2050(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5F20E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C5F2104()
{
  void *__p[2];
  char v1;

  sub_20C5F3100();
  sub_20BDDC0E4(__p, "DomeLight_1");
  sub_20C5F3220((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5F2150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::~UsdLuxDomeLight_1(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::~UsdLuxNonboundableLightBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E170;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/domeLight_1.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdLuxDomeLight_1 pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E170;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5F22F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498AD18);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498AD18))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498AD10, "DomeLight_1");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498AD10, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AD18);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498AD10, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E170;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdLux/domeLight_1.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdLuxDomeLight_1 pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::Define(const U"
                            "sdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E170;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5F24E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AD18);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AD28);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498AD28))
  {
    __cxa_guard_release(&qword_25498AD28);
  }
  return &qword_25498AD20;
}

void sub_20C5F2588(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AD28);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AD38);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *)__cxa_guard_acquire(&qword_25498AD38);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::_GetStaticTfType(v3);
      byte_25498AD30 = sub_20C35BD7C((char *)&qword_25498AD20, v4, v5);
      __cxa_guard_release(&qword_25498AD38);
    }
  }
  return byte_25498AD30;
}

void sub_20C5F2604(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AD38);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::_GetStaticTfType(this);
  return &qword_25498AD20;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::GetTextureFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 296), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F26DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::CreateTextureFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 296), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::GetTextureFormatAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 304), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F2834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::CreateTextureFormatAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 304), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::GetGuideRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 80), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F298C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::CreateGuideRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 80), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::GetPoleAxisAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 424), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F2AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::CreatePoleAxisAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 424), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::GetPortalsRel(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 432), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F2C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::CreatePortalsRel(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 432), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F2CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t *SchemaAttributeNames;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = (int)this;
  v31 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498AD58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498AD58))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5)
      v5 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v6 = *((_QWORD *)v5 + 37);
    v27 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v9)
      v9 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v10 = *((_QWORD *)v9 + 38);
    v28 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v13)
      v13 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v14 = *((_QWORD *)v13 + 10);
    v29 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v29 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v17)
      v17 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v18 = *((_QWORD *)v17 + 53);
    v30 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498AD40, &v27, 4uLL);
    v21 = &v31;
    do
    {
      v23 = *--v21;
      v22 = v23;
      if ((v23 & 7) != 0)
      {
        v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
    }
    while (v21 != &v27);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AD40, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AD58);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498AD78);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498AD78))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *)1);
    sub_20C5F304C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AD60, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AD78);
  }
  if (v1)
    return &qword_25498AD60;
  else
    return &qword_25498AD40;
}

void sub_20C5F2FBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AD58);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5F304C(uint64_t **a1)
{
  qword_25498AD68 = 0;
  unk_25498AD70 = 0;
  qword_25498AD60 = 0;
  sub_20BFC9A6C((char **)&qword_25498AD60, ((unk_25498AD48 - qword_25498AD40) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498AD60, (_QWORD *)qword_25498AD68, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498AD60, (_QWORD *)qword_25498AD68, (uint64_t *)qword_25498AD40, unk_25498AD48, (unk_25498AD48 - qword_25498AD40) >> 3);
}

void sub_20C5F30E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5F3100()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5F0C60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5F31D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5F3220(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5F32B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C5F32D4()
{
  void *__p[2];
  char v1;

  sub_20C5F3B2C();
  sub_20BDDC0E4(__p, "GeometryLight");
  sub_20C5F3C4C((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5F3320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::~UsdLuxGeometryLight(pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::~UsdLuxNonboundableLightBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E1C8;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/geometryLight.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdLuxGeometryLight pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::Get(const "
                            "UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E1C8;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5F34C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498AD88);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498AD88))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498AD80, "GeometryLight");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498AD80, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AD88);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498AD80, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E1C8;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdLux/geometryLight.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdLuxGeometryLight pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::Define(con"
                            "st UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E1C8;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5F36B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AD88);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AD98);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498AD98))
  {
    __cxa_guard_release(&qword_25498AD98);
  }
  return &qword_25498AD90;
}

void sub_20C5F3758(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AD98);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498ADA8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *)__cxa_guard_acquire(&qword_25498ADA8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::_GetStaticTfType(v3);
      byte_25498ADA0 = sub_20C35BD7C((char *)&qword_25498AD90, v4, v5);
      __cxa_guard_release(&qword_25498ADA8);
    }
  }
  return byte_25498ADA0;
}

void sub_20C5F37D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498ADA8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::_GetStaticTfType(this);
  return &qword_25498AD90;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::GetGeometryRel(pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 72), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F38AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::CreateGeometryRel(pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 72), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F396C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498ADC8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498ADC8))
  {
    qword_25498ADB0 = 0;
    *(_QWORD *)algn_25498ADB8 = 0;
    qword_25498ADC0 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498ADB0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498ADC8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498ADE8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498ADE8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *)1);
    sub_20C5F3A78((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498ADD0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498ADE8);
  }
  if (v1)
    return &qword_25498ADD0;
  else
    return &qword_25498ADB0;
}

void sub_20C5F3A60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498ADE8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5F3A78(uint64_t **a1)
{
  qword_25498ADD8 = 0;
  unk_25498ADE0 = 0;
  qword_25498ADD0 = 0;
  sub_20BFC9A6C((char **)&qword_25498ADD0, ((*(_QWORD *)algn_25498ADB8 - qword_25498ADB0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498ADD0, (_QWORD *)qword_25498ADD8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498ADD0, (_QWORD *)qword_25498ADD8, (uint64_t *)qword_25498ADB0, *(uint64_t **)algn_25498ADB8, (*(_QWORD *)algn_25498ADB8 - qword_25498ADB0) >> 3);
}

void sub_20C5F3B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5F3B2C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5F0C60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5F3C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5F3C4C(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5F3CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::~UsdLuxLight(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E220;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/light.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdLuxLight pxrInternal__aapl__pxrReserved__::UsdLuxLight::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E220;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5F3E8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498ADF8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498ADF8))
  {
    __cxa_guard_release(&qword_25498ADF8);
  }
  return &qword_25498ADF0;
}

void sub_20C5F3F18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498ADF8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxLight *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AE08);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxLight *)__cxa_guard_acquire(&qword_25498AE08);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxLight::_GetStaticTfType(v3);
      byte_25498AE00 = sub_20C35BD7C((char *)&qword_25498ADF0, v4, v5);
      __cxa_guard_release(&qword_25498AE08);
    }
  }
  return byte_25498AE00;
}

void sub_20C5F3F94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AE08);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLight::_GetStaticTfType(this);
  return &qword_25498ADF0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetIntensityAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 160), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F406C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateIntensityAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 160), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetExposureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 144), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F41C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateExposureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 144), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetDiffuseAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 128), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F431C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateDiffuseAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 128), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetSpecularAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 288), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F4474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateSpecularAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 288), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 176), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F45CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 176), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 112), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F4724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 112), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 280), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetEnableColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 136), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F487C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateEnableColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 136), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 120), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F49D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 120), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetFiltersRel(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 328), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F4B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateFiltersRel(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 328), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F4BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t *SchemaAttributeNames;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v1 = (int)this;
  v61 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498AE28);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498AE28))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5)
      v5 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v6 = *((_QWORD *)v5 + 3);
    v51 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v9)
      v9 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v10 = *((_QWORD *)v9 + 4);
    v52 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v52 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v13)
      v13 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v14 = *((_QWORD *)v13 + 20);
    v53 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v53 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v17)
      v17 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v18 = *((_QWORD *)v17 + 18);
    v54 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v54 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v21)
      v21 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v22 = *((_QWORD *)v21 + 16);
    v55 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v55 &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v25)
      v25 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v26 = *((_QWORD *)v25 + 36);
    v56 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v56 &= 0xFFFFFFFFFFFFFFF8;
    }
    v29 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v29)
      v29 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v30 = *((_QWORD *)v29 + 22);
    v57 = v30;
    if ((v30 & 7) != 0)
    {
      v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v57 &= 0xFFFFFFFFFFFFFFF8;
    }
    v33 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v33)
      v33 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v34 = *((_QWORD *)v33 + 14);
    v58 = v34;
    if ((v34 & 7) != 0)
    {
      v35 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 2, v35));
      if ((v36 & 1) == 0)
        v58 &= 0xFFFFFFFFFFFFFFF8;
    }
    v37 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v37)
      v37 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v38 = *((_QWORD *)v37 + 17);
    v59 = v38;
    if ((v38 & 7) != 0)
    {
      v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 2, v39));
      if ((v40 & 1) == 0)
        v59 &= 0xFFFFFFFFFFFFFFF8;
    }
    v41 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v41)
      v41 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v42 = *((_QWORD *)v41 + 15);
    v60 = v42;
    if ((v42 & 7) != 0)
    {
      v43 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 2, v43));
      if ((v44 & 1) == 0)
        v60 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498AE10, &v51, 0xAuLL);
    v45 = &v61;
    do
    {
      v47 = *--v45;
      v46 = v47;
      if ((v47 & 7) != 0)
      {
        v48 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
    }
    while (v45 != &v51);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AE10, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AE28);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498AE48);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498AE48))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)1);
    sub_20C5F5134((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AE30, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AE48);
  }
  if (v1)
    return &qword_25498AE30;
  else
    return &qword_25498AE10;
}

void sub_20C5F50A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AE28);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5F5134(uint64_t **a1)
{
  qword_25498AE38 = 0;
  unk_25498AE40 = 0;
  qword_25498AE30 = 0;
  sub_20BFC9A6C((char **)&qword_25498AE30, ((unk_25498AE18 - qword_25498AE10) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498AE30, (_QWORD *)qword_25498AE38, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498AE30, (_QWORD *)qword_25498AE38, (uint64_t *)qword_25498AE10, unk_25498AE18, (unk_25498AE18 - qword_25498AE10) >> 3);
}

void sub_20C5F51C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C5F51E8(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType *v3;
  _WORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _WORD *v9;
  std::__shared_weak_count *v10;

  v4 = operator new(0x10uLL);
  v4[4] = 256;
  *(_QWORD *)v4 = &unk_24C53E278;
  v9 = v4;
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C53E2D0;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v10 = v5;
  pxrInternal__aapl__pxrReserved__::UsdShadeRegisterConnectableAPIBehavior(v3, &v9);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20C5F52A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_20C96BDF8(a10);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdLuxLight *pxrInternal__aapl__pxrReserved__::UsdLuxLight::UsdLuxLight(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this, const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  *(_QWORD *)this = off_24C53E220;
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  return this;
}

{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  *(_QWORD *)this = off_24C53E220;
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  return this;
}

void sub_20C5F5368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C5F5414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  sub_20C35C4F8((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)a2 = off_24C53D618;
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C5F54C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C5F5598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetOutput(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5F5670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5F5748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateInput(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C5F5830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetInput(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5F5908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetInputs(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5F59E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::UsdLuxLight::ComputeBaseEmission(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this)
{
  unsigned int *v2;
  unsigned int v3;
  float v4;
  unsigned int *v5;
  unsigned int v6;
  float v7;
  unsigned int *v8;
  unsigned int v9;
  float v10;
  unsigned int *v11;
  unsigned int v12;
  float v13;
  int v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__ *v18;
  float v20;
  char v21;
  uint64_t v22;
  int v23;
  float v24;
  _BYTE v25[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;

  v30 = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetIntensityAttr(this, (uint64_t)v25);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>((uint64_t)v25, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v30);
  if ((v29 & 7) != 0)
  {
    v2 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_20BFD265C(&v27);
  if (v26)
    sub_20C35C614(v26);
  v4 = *(float *)&v30;
  v24 = 0.0;
  pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetExposureAttr(this, (uint64_t)v25);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>((uint64_t)v25, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v24);
  if ((v29 & 7) != 0)
  {
    v5 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_20BFD265C(&v27);
  if (v26)
    sub_20C35C614(v26);
  v7 = exp2f(v24);
  v23 = 1065353216;
  v22 = 0x3F8000003F800000;
  pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetColorAttr(this, (uint64_t)v25);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>((uint64_t)v25, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v22);
  if ((v29 & 7) != 0)
  {
    v8 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_20BFD265C(&v27);
  if (v26)
    sub_20C35C614(v26);
  v10 = *(float *)&v22;
  v21 = 0;
  pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetEnableColorTemperatureAttr(this, (uint64_t)v25);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<BOOL>((uint64_t)v25, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v21);
  if ((v29 & 7) != 0)
  {
    v11 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_20BFD265C(&v27);
  if (v26)
    sub_20C35C614(v26);
  v13 = (float)(v4 * v7) * v10;
  if (v21)
  {
    v20 = 6500.0;
    pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetColorTemperatureAttr(this, (uint64_t)v25);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>((uint64_t)v25, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v20);
    v15 = v14;
    if ((v29 & 7) != 0)
    {
      v16 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_20BFD265C(&v27);
    v18 = v26;
    if (v26)
      sub_20C35C614(v26);
    if (v15)
      return v13 * *(float *)pxrInternal__aapl__pxrReserved__::UsdLuxBlackbodyTemperatureAsRgb(v18, v20).i32;
  }
  return v13;
}

void sub_20C5F5CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C372B54((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetLightLinkCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  sub_20C37A850(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (uint64_t *)v3 + 43);
  *(_QWORD *)a2 = off_24C537740;
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F5D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetShadowLinkCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  sub_20C37A850(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (uint64_t *)v3 + 56);
  *(_QWORD *)a2 = off_24C537740;
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F5E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5F5E70()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5506E4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5F5F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5F5F98(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::~UsdShadeConnectableAPIBehavior(a1);
  operator delete(v1);
}

uint64_t sub_20C5F5FAC(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdProperty *a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectInputToSource(a1, a2, a3, a4, 1);
}

uint64_t sub_20C5F5FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectOutputToSource(a1, a2, a3, a4, 1);
}

void sub_20C5F5FC0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C5F5FD4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C5F5FEC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C53E320))
    return a1 + 24;
  else
    return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53E348;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/lightAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdLuxLightAPI pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::Get(const UsdStagePt"
                            "r &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53E348;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5F61C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this)
{
  return 5;
}

uint64_t sub_20C5F61E8(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498AE50, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdLuxLightAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C5F63A0(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53E348;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53E348;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C5F638C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5F63A0(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498AE50, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdLuxLightAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AE58);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498AE58))
  {
    __cxa_guard_release(&qword_25498AE58);
  }
  return &qword_25498AE50;
}

void sub_20C5F64BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AE58);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AE68);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)__cxa_guard_acquire(&qword_25498AE68);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_GetStaticTfType(v3);
      byte_25498AE60 = sub_20C35BD7C((char *)&qword_25498AE50, v4, v5);
      __cxa_guard_release(&qword_25498AE68);
    }
  }
  return byte_25498AE60;
}

void sub_20C5F6538(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AE68);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_GetStaticTfType(this);
  return &qword_25498AE50;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetShaderIdAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 376), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F6610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateShaderIdAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 376), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetMaterialSyncModeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 368), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F6768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateMaterialSyncModeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 368), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetIntensityAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 160), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F68C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateIntensityAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 160), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetExposureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 144), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F6A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateExposureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 144), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetDiffuseAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 128), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F6B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateDiffuseAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 128), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetSpecularAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 288), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F6CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateSpecularAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 288), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 176), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F6E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 176), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 112), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F6F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 112), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 280), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetEnableColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 136), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F70D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateEnableColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 136), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 120), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F7228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 120), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetFiltersRel(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 328), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F7380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateFiltersRel(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 328), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F7440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t *SchemaAttributeNames;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v1 = (int)this;
  v61 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498AE88);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498AE88))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5)
      v5 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v6 = *((_QWORD *)v5 + 47);
    v51 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v9)
      v9 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v10 = *((_QWORD *)v9 + 46);
    v52 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v52 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v13)
      v13 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v14 = *((_QWORD *)v13 + 20);
    v53 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v53 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v17)
      v17 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v18 = *((_QWORD *)v17 + 18);
    v54 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v54 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v21)
      v21 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v22 = *((_QWORD *)v21 + 16);
    v55 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v55 &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v25)
      v25 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v26 = *((_QWORD *)v25 + 36);
    v56 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v56 &= 0xFFFFFFFFFFFFFFF8;
    }
    v29 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v29)
      v29 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v30 = *((_QWORD *)v29 + 22);
    v57 = v30;
    if ((v30 & 7) != 0)
    {
      v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v57 &= 0xFFFFFFFFFFFFFFF8;
    }
    v33 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v33)
      v33 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v34 = *((_QWORD *)v33 + 14);
    v58 = v34;
    if ((v34 & 7) != 0)
    {
      v35 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 2, v35));
      if ((v36 & 1) == 0)
        v58 &= 0xFFFFFFFFFFFFFFF8;
    }
    v37 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v37)
      v37 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v38 = *((_QWORD *)v37 + 17);
    v59 = v38;
    if ((v38 & 7) != 0)
    {
      v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 2, v39));
      if ((v40 & 1) == 0)
        v59 &= 0xFFFFFFFFFFFFFFF8;
    }
    v41 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v41)
      v41 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v42 = *((_QWORD *)v41 + 15);
    v60 = v42;
    if ((v42 & 7) != 0)
    {
      v43 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 2, v43));
      if ((v44 & 1) == 0)
        v60 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498AE70, &v51, 0xAuLL);
    v45 = &v61;
    do
    {
      v47 = *--v45;
      v46 = v47;
      if ((v47 & 7) != 0)
      {
        v48 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
    }
    while (v45 != &v51);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AE70, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AE88);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498AEA8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498AEA8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C5F7988((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AE90, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AEA8);
  }
  if (v1)
    return &qword_25498AE90;
  else
    return &qword_25498AE70;
}

void sub_20C5F78F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AE88);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5F7988(uint64_t **a1)
{
  qword_25498AE98 = 0;
  unk_25498AEA0 = 0;
  qword_25498AE90 = 0;
  sub_20BFC9A6C((char **)&qword_25498AE90, ((unk_25498AE78 - qword_25498AE70) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498AE90, (_QWORD *)qword_25498AE98, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498AE90, (_QWORD *)qword_25498AE98, (uint64_t *)qword_25498AE70, unk_25498AE78, (unk_25498AE78 - qword_25498AE70) >> 3);
}

void sub_20C5F7A1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C5F7A3C(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType *v3;
  _WORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _WORD *v9;
  std::__shared_weak_count *v10;

  v4 = operator new(0x10uLL);
  v4[4] = 1;
  *(_QWORD *)v4 = &unk_24C53E3A0;
  v9 = v4;
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C53E3F8;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v10 = v5;
  pxrInternal__aapl__pxrReserved__::UsdShadeRegisterConnectableAPIBehavior(v3, &v9);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20C5F7AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_20C96BDF8(a10);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::UsdLuxLightAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this, const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = off_24C53E348;
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  return this;
}

{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = off_24C53E348;
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  return this;
}

void sub_20C5F7BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C5F7C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  sub_20C35C4F8((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)a2 = off_24C53D618;
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C5F7D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C5F7DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetOutput(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5F7ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5F7FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateInput(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C5F808C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetInput(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5F8164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetInputs(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5F823C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetLightLinkCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  sub_20C37A850(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (uint64_t *)v3 + 43);
  *(_QWORD *)a2 = off_24C537740;
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F8314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetShadowLinkCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  sub_20C37A850(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (uint64_t *)v3 + 56);
  *(_QWORD *)a2 = off_24C537740;
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F83E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetShaderIdAttrForRenderContext(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  _BYTE v10[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;

  sub_20C35C4F8((uint64_t)v10, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_20C5F84EC(a2, (unsigned int **)&v9);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9, a3);
  if ((v9 & 7) != 0)
  {
    v5 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
}

void sub_20C5F84B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a3);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C5F84EC(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v4;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  void *__p;
  char v10;

  if (*(_QWORD *)this)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v4)
      v4 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v4 + 376), (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    if (v10 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5)
      v5 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v6 = (unsigned int *)*((_QWORD *)v5 + 47);
    *a2 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        *a2 = v7;
    }
  }
}

void sub_20C5F85B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateShaderIdAttrForRenderContext(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, std::type_info *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;

  sub_20C5F84EC(a2, (unsigned int **)&v12);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a3, a4, a5);
  if ((v12 & 7) != 0)
  {
    v10 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetShaderId(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken **a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  char v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  char v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;

  *(_QWORD *)a3 = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
LABEL_14:
    pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetShaderIdAttr(this, (uint64_t)&v16);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v16, a3);
    if ((v20 & 7) != 0)
    {
      v12 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    sub_20BFD265C(&v18);
    if (v17)
      sub_20C35C614(v17);
  }
  else
  {
    v7 = 0;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetShaderIdAttrForRenderContext(this, v5, (uint64_t)&v16);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v16, v8)&& (pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v16, a3), *(_QWORD *)a3))
      {
        v9 = 0;
        v7 = 1;
      }
      else
      {
        v9 = 1;
      }
      if ((v20 & 7) != 0)
      {
        v10 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stlxr(v11 - 2, v10));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_20BFD265C(&v18);
      if (v17)
        sub_20C35C614(v17);
      if ((v9 & 1) == 0)
        break;
      v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
      if (v5 == v6)
        goto LABEL_14;
    }
    if ((v7 & 1) == 0 && (*(_QWORD *)a3 & 7) != 0)
    {
      v14 = (unsigned int *)(*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
  }
}

void sub_20C5F8828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  unsigned int *v11;
  unsigned int v12;

  sub_20C372B54((uint64_t)&a9);
  if ((*v9 & 7) != 0)
  {
    v11 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5F8870()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5F8944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5F8998(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::~UsdShadeConnectableAPIBehavior(a1);
  operator delete(v1);
}

uint64_t sub_20C5F89AC(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdProperty *a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectInputToSource(a1, a2, a3, a4, 1);
}

uint64_t sub_20C5F89B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectOutputToSource(a1, a2, a3, a4, 1);
}

void sub_20C5F89C0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C5F89D4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C5F89EC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C53E448))
    return a1 + 24;
  else
    return 0;
}

void sub_20C5F8A2C()
{
  void *__p[2];
  char v1;

  sub_20C5FA0A8();
  sub_20BDDC0E4(__p, "LightFilter");
  sub_20C5FA1C8((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5F8A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::~UsdLuxLightFilter(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E470;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/lightFilter.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdLuxLightFilter pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E470;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5F8C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498AEB8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498AEB8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498AEB0, "LightFilter");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498AEB0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AEB8);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498AEB0, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E470;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdLux/lightFilter.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdLuxLightFilter pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::Define(const U"
                            "sdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E470;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5F8E0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AEB8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AEC8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498AEC8))
  {
    __cxa_guard_release(&qword_25498AEC8);
  }
  return &qword_25498AEC0;
}

void sub_20C5F8EB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AEC8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AED8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *)__cxa_guard_acquire(&qword_25498AED8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::_GetStaticTfType(v3);
      byte_25498AED0 = sub_20C35BD7C((char *)&qword_25498AEC0, v4, v5);
      __cxa_guard_release(&qword_25498AED8);
    }
  }
  return byte_25498AED0;
}

void sub_20C5F8F2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AED8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::_GetStaticTfType(this);
  return &qword_25498AEC0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetShaderIdAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 336), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F9004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::CreateShaderIdAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 336), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *SchemaAttributeNames;
  uint64_t v12[2];

  v1 = (int)this;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498AEF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498AEF8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5)
      v5 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v6 = *((_QWORD *)v5 + 42);
    v12[0] = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v12[0] = (uint64_t)v7;
    }
    sub_20C374970(&qword_25498AEE0, v12, 1uLL);
    if ((v12[0] & 7) != 0)
    {
      v9 = (unsigned int *)(v12[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AEE0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AEF8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498AF18);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498AF18))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)1);
    sub_20C5F9294((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AF00, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AF18);
  }
  if (v1)
    return &qword_25498AF00;
  else
    return &qword_25498AEE0;
}

void sub_20C5F9244(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AEF8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5F9294(uint64_t **a1)
{
  qword_25498AF08 = 0;
  unk_25498AF10 = 0;
  qword_25498AF00 = 0;
  sub_20BFC9A6C((char **)&qword_25498AF00, ((unk_25498AEE8 - qword_25498AEE0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498AF00, (_QWORD *)qword_25498AF08, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498AF00, (_QWORD *)qword_25498AF08, (uint64_t *)qword_25498AEE0, unk_25498AEE8, (unk_25498AEE8 - qword_25498AEE0) >> 3);
}

void sub_20C5F9328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C5F9348(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType *v3;
  _WORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _WORD *v9;
  std::__shared_weak_count *v10;

  v4 = operator new(0x10uLL);
  v4[4] = 1;
  *(_QWORD *)v4 = &unk_24C53E4C8;
  v9 = v4;
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C53E520;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v10 = v5;
  pxrInternal__aapl__pxrReserved__::UsdShadeRegisterConnectableAPIBehavior(v3, &v9);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20C5F9404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_20C96BDF8(a10);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::UsdLuxLightFilter(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this, const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  *(_QWORD *)this = off_24C53E470;
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  return this;
}

{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  *(_QWORD *)this = off_24C53E470;
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  return this;
}

void sub_20C5F94C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C5F9574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  sub_20C35C4F8((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)a2 = off_24C53D618;
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C5F9620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C5F96F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetOutput(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5F97D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5F98A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::CreateInput(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C5F9990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetInput(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5F9A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetInputs(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5F9B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetFilterLinkCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  sub_20C37A850(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (uint64_t *)v3 + 8);
  *(_QWORD *)a2 = off_24C537740;
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5F9C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetShaderIdAttrForRenderContext(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  _BYTE v10[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;

  sub_20C35C4F8((uint64_t)v10, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_20C5F9D24(a2, (unsigned int **)&v9);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9, a3);
  if ((v9 & 7) != 0)
  {
    v5 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
}

void sub_20C5F9CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a3);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C5F9D24(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v4;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  void *__p;
  char v10;

  if (*(_QWORD *)this)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v4)
      v4 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v4 + 336), (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    if (v10 < 0)
      operator delete(__p);
  }
  else
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5)
      v5 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v6 = (unsigned int *)*((_QWORD *)v5 + 42);
    *a2 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        *a2 = v7;
    }
  }
}

void sub_20C5F9DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::CreateShaderIdAttrForRenderContext(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, std::type_info *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;

  sub_20C5F9D24(a2, (unsigned int **)&v12);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a3, a4, a5);
  if ((v12 & 7) != 0)
  {
    v10 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetShaderId(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken **a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  char v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  char v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;

  *(_QWORD *)a3 = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
LABEL_14:
    pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetShaderIdAttr(this, (uint64_t)&v16);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v16, a3);
    if ((v20 & 7) != 0)
    {
      v12 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    sub_20BFD265C(&v18);
    if (v17)
      sub_20C35C614(v17);
  }
  else
  {
    v7 = 0;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetShaderIdAttrForRenderContext(this, v5, (uint64_t)&v16);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v16, v8)&& (pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v16, a3), *(_QWORD *)a3))
      {
        v9 = 0;
        v7 = 1;
      }
      else
      {
        v9 = 1;
      }
      if ((v20 & 7) != 0)
      {
        v10 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stlxr(v11 - 2, v10));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_20BFD265C(&v18);
      if (v17)
        sub_20C35C614(v17);
      if ((v9 & 1) == 0)
        break;
      v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
      if (v5 == v6)
        goto LABEL_14;
    }
    if ((v7 & 1) == 0 && (*(_QWORD *)a3 & 7) != 0)
    {
      v14 = (unsigned int *)(*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
  }
}

void sub_20C5FA060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  unsigned int *v11;
  unsigned int v12;

  sub_20C372B54((uint64_t)&a9);
  if ((*v9 & 7) != 0)
  {
    v11 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5FA0A8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5506E4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5FA17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5FA1C8(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5FA258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C5FA280(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::~UsdShadeConnectableAPIBehavior(a1);
  operator delete(v1);
}

uint64_t sub_20C5FA294(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdProperty *a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectInputToSource(a1, a2, a3, a4, 1);
}

uint64_t sub_20C5FA29C()
{
  return 0;
}

void sub_20C5FA2A8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C5FA2BC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C5FA2D4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C53E570))
    return a1 + 24;
  else
    return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::~UsdLuxLightListAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53E598;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/lightListAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdLuxLightListAPI pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53E598;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5FA4A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this)
{
  return 5;
}

uint64_t sub_20C5FA4D0(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498AF20, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdLuxLightListAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C5FA688(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53E598;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53E598;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C5FA674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5FA688(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498AF20, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdLuxLightListAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AF28);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498AF28))
  {
    __cxa_guard_release(&qword_25498AF28);
  }
  return &qword_25498AF20;
}

void sub_20C5FA7A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AF28);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AF38);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *)__cxa_guard_acquire(&qword_25498AF38);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::_GetStaticTfType(v3);
      byte_25498AF30 = sub_20C35BD7C((char *)&qword_25498AF20, v4, v5);
      __cxa_guard_release(&qword_25498AF38);
    }
  }
  return byte_25498AF30;
}

void sub_20C5FA820(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AF38);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::_GetStaticTfType(this);
  return &qword_25498AF20;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::GetLightListCacheBehaviorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 360), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5FA8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::CreateLightListCacheBehaviorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 360), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::GetLightListRel(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 352), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5FAA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::CreateLightListRel(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 352), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5FAB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *SchemaAttributeNames;
  uint64_t v12[2];

  v1 = (int)this;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498AF58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498AF58))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5)
      v5 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v6 = *((_QWORD *)v5 + 45);
    v12[0] = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v12[0] = (uint64_t)v7;
    }
    sub_20C374970(&qword_25498AF40, v12, 1uLL);
    if ((v12[0] & 7) != 0)
    {
      v9 = (unsigned int *)(v12[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AF40, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AF58);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498AF78);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498AF78))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C5FAD04((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AF60, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AF78);
  }
  if (v1)
    return &qword_25498AF60;
  else
    return &qword_25498AF40;
}

void sub_20C5FACB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AF58);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5FAD04(uint64_t **a1)
{
  qword_25498AF68 = 0;
  unk_25498AF70 = 0;
  qword_25498AF60 = 0;
  sub_20BFC9A6C((char **)&qword_25498AF60, ((unk_25498AF48 - qword_25498AF40) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498AF60, (_QWORD *)qword_25498AF68, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498AF60, (_QWORD *)qword_25498AF68, (uint64_t *)qword_25498AF40, unk_25498AF48, (unk_25498AF48 - qword_25498AF40) >> 3);
}

void sub_20C5FAD98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C5FADB8()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "UsdLuxLightListAPI::ComputeModeConsultModelHierarchyCache");
  sub_20BDDC0E4(__p, "Consult lightList cache");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53E5E0, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdLuxLightListAPI::ComputeModeIgnoreCache");
  sub_20BDDC0E4(__p, "Ignore lightList cache");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53E5E0, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20C5FAE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::ComputeLightList(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  a3[2] = 0;
  a3[1] = 0;
  *a3 = a3 + 1;
  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  sub_20C5FAF84((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&v7, a2, (uint64_t)a3);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5FAF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20C35C2E0((uint64_t)&a9);
  sub_20BFD7C28(v9, *(_QWORD **)(v9 + 8));
  _Unwind_Resume(a1);
}

void sub_20C5FAF84(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *v5;
  _BOOL4 IsPrimPath;
  int v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v11;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v12;
  const pxrInternal__aapl__pxrReserved__::SdfPath *i;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v26;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;
  uint64_t HasAPI;
  uint64_t *v29;
  const pxrInternal__aapl__pxrReserved__::TfType *v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  void **v42;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v43;
  int v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;

  v5 = a1;
  if ((_DWORD)a2)
    goto LABEL_30;
  sub_20C348EEC((uint64_t)a1, (int *)&v53);
  IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v53);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
  a1 = (pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)sub_20BFD265C(&v53);
  if (!IsPrimPath)
    goto LABEL_30;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v53, v5);
  *((_QWORD *)&v54 + 1) = 0;
  *(_QWORD *)&v53 = off_24C53E598;
  v61 = 0;
  pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::GetLightListCacheBehaviorAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *)&v53, (uint64_t)&v50);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v50, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v61);
  v8 = v7;
  if ((BYTE8(v51) & 7) != 0)
  {
    v9 = (unsigned int *)(*((_QWORD *)&v51 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
  sub_20BFD265C(&v51);
  if (*((_QWORD *)&v50 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v50 + 1));
  if (!v8)
    goto LABEL_25;
  v11 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v11)
    v11 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if ((v61 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v11 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    v12 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v12)
      v12 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if ((v61 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v12 + 6) & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::GetLightListRel((pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *)&v53, (uint64_t)&v50);
  v47 = 0uLL;
  *(_QWORD *)&v48 = 0;
  pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v50, (uint64_t *)&v47);
  v14 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v47 + 1);
  for (i = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v47;
        i != v14;
        i = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)i + 8))
  {
    sub_20BFD72BC((uint64_t **)a3, (_QWORD *)(a3 + 8), i, i);
  }
  v15 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v15)
    v15 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v16 = v61;
  v17 = *((_QWORD *)v15 + 6);
  v42 = (void **)&v47;
  sub_20BFD6F90(&v42);
  if ((BYTE8(v51) & 7) != 0)
  {
    v18 = (unsigned int *)(*((_QWORD *)&v51 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
  v20 = v16 & 0xFFFFFFFFFFFFFFF8;
  v21 = v17 & 0xFFFFFFFFFFFFFFF8;
  sub_20BFD265C(&v51);
  if (*((_QWORD *)&v50 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v50 + 1));
  if (v20 == v21)
    v22 = 0;
  else
LABEL_25:
    v22 = 1;
  if ((v61 & 7) != 0)
  {
    v23 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v53);
  if ((v22 & 1) != 0)
  {
LABEL_30:
    StaticTfType = pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_GetStaticTfType(a1);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v26);
    HasAPI = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)v5, SchemaInfo);
    if ((HasAPI & 1) != 0
      || (v29 = pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *)HasAPI),
          v31 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v29, v30), pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)v5, v31, v32)))
    {
      sub_20C348EEC((uint64_t)v5, (int *)&v53);
      sub_20C37F3F8((uint64_t **)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, &v53);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
      sub_20BFD265C(&v53);
    }
    v53 = 0uLL;
    LOBYTE(v54) = 0;
    v33 = sub_20C3C103C((uint64_t)&v53, 0);
    *(_QWORD *)&v51 = *(_QWORD *)(v33 + 16);
    v50 = *(_OWORD *)v33;
    v53 = v50;
    LOBYTE(v54) = v51;
    v34 = sub_20C3C103C((uint64_t)&v53, 0x100000005);
    *(_QWORD *)&v48 = *(_QWORD *)(v34 + 16);
    v47 = *(_OWORD *)v34;
    v53 = v47;
    LOBYTE(v54) = v48;
    v35 = (uint64_t *)sub_20C3C103C((uint64_t)&v53, 6);
    v36 = *v35;
    v37 = v35[1];
    v38 = v35[2];
    if (!(_DWORD)a2)
    {
      *(_QWORD *)&v53 = *v35;
      *((_QWORD *)&v53 + 1) = v37;
      LOBYTE(v54) = v38;
      v39 = sub_20C3C103C((uint64_t)&v53, 2);
      v36 = *(_QWORD *)v39;
      v37 = *(_QWORD *)(v39 + 8);
      v38 = v38 & 0xFFFFFFFFFFFFFF00 | *(unsigned __int8 *)(v39 + 16);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v5 + 4);
    *(_QWORD *)&v50 = v36 & 0xFFFFFFFFFFFFDFFFLL;
    *((_QWORD *)&v50 + 1) = v37 | 0x2000;
    *(_QWORD *)&v51 = v38;
    sub_20C3ADEFC((uint64_t)v5, (uint64_t *)&v50, (uint64_t)&v53);
    *(_QWORD *)&v50 = v53;
    sub_20BFD6E54((_DWORD *)&v50 + 2, (_DWORD *)&v53 + 2);
    sub_20BFD6EA4((_DWORD *)&v50 + 3, (_DWORD *)&v53 + 3);
    v51 = v54;
    v52 = v55;
    *(_QWORD *)&v47 = v56;
    sub_20BFD6E54((_DWORD *)&v47 + 2, &v57);
    sub_20BFD6EA4((_DWORD *)&v47 + 3, &v58);
    v48 = v59;
    v49 = v60;
    while (v50 != v47 || !sub_20C39FA44((uint64_t)&v51, (uint64_t)&v48))
    {
      sub_20C3ADDEC((uint64_t)&v50, (uint64_t)&v42);
      sub_20C5FAF84(&v42, a2, a3);
      if ((v46 & 7) != 0)
      {
        v40 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v45);
      sub_20BFD265C(&v44);
      if (v43)
        sub_20C35C614(v43);
      sub_20C3ADE64((uint64_t)&v50);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 3);
    sub_20BFD265C((_DWORD *)&v47 + 2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 3);
    sub_20BFD265C((_DWORD *)&v50 + 2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v58);
    sub_20BFD265C(&v57);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 3);
    sub_20BFD265C((_DWORD *)&v53 + 2);
  }
}

void sub_20C5FB48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;

  v31 = *(_QWORD *)(v29 - 96);
  if ((v31 & 7) != 0)
  {
    v32 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&a29);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::StoreLightList(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  BOOL HasPrefix;
  _DWORD *v6;
  _DWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v13;
  unsigned int *v14;
  unsigned int v15;
  pxrInternal__aapl__pxrReserved__::SdfPath **v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::SdfPath *v21;
  _DWORD *v22;
  unint64_t v23;
  std::type_info v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28))
        || (sub_20C3630C0((uint64_t)this, &v16),
            HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16), pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1), sub_20BFD265C(&v16), HasPrefix))
      {
        v6 = v22;
        if ((unint64_t)v22 >= v23)
        {
          v7 = (_DWORD *)sub_20BFD7890((uint64_t *)&v21, (_DWORD *)v4 + 7);
        }
        else
        {
          sub_20BFD6E54(v22, (_DWORD *)v4 + 7);
          sub_20BFD6EA4(v6 + 1, (_DWORD *)v4 + 8);
          v7 = v6 + 2;
        }
        v22 = v7;
      }
      v8 = (_QWORD *)v4[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v4[2];
          v10 = *v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != v3);
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::CreateLightListRel(this, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v16);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v16, &v21);
  if ((v20 & 7) != 0)
  {
    v11 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
  v24.__type_name = 0;
  pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::CreateLightListCacheBehaviorAttr(this, &v24, 0, (uint64_t)&v16);
  v13 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v13)
    v13 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__ **)&v16, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v13 + 40), NAN);
  if ((v20 & 7) != 0)
  {
    v14 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
  sub_20BF4C2D8((uint64_t)&v24);
  v16 = &v21;
  sub_20BFD6F90((void ***)&v16);
}

void sub_20C5FB79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_20C372B54((uint64_t)&a9);
  sub_20BF4C2D8((uint64_t)&a16);
  a9 = (void **)&a13;
  sub_20BFD6F90(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::InvalidateLightList(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v1;
  unsigned int *v2;
  unsigned int v3;
  pxrInternal__aapl__pxrReserved__ *v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;
  std::type_info v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10.__type_name = 0;
  pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::CreateLightListCacheBehaviorAttr(this, &v10, 0, (uint64_t)&v5);
  v1 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v1)
    v1 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>(&v5, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v1 + 88), NAN);
  if ((v9 & 7) != 0)
  {
    v2 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
  return sub_20BF4C2D8((uint64_t)&v10);
}

void sub_20C5FB8F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20C372B54((uint64_t)va);
  sub_20BF4C2D8((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5FB928()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5FB9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::~UsdLuxListAPI(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53E600;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/listAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdLuxListAPI pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::Get(const UsdStagePtr "
                            "&, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53E600;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5FBBE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this)
{
  return 5;
}

uint64_t sub_20C5FBC08(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498AF80, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdLuxListAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C5FBDC0(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53E600;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53E600;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C5FBDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5FBDC0(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498AF80, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdLuxListAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AF88);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498AF88))
  {
    __cxa_guard_release(&qword_25498AF88);
  }
  return &qword_25498AF80;
}

void sub_20C5FBEDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AF88);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AF98);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *)__cxa_guard_acquire(&qword_25498AF98);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::_GetStaticTfType(v3);
      byte_25498AF90 = sub_20C35BD7C((char *)&qword_25498AF80, v4, v5);
      __cxa_guard_release(&qword_25498AF98);
    }
  }
  return byte_25498AF90;
}

void sub_20C5FBF58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AF98);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::_GetStaticTfType(this);
  return &qword_25498AF80;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::GetLightListCacheBehaviorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 360), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5FC030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::CreateLightListCacheBehaviorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 360), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::GetLightListRel(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 352), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5FC188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::CreateLightListRel(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 352), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5FC248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *SchemaAttributeNames;
  uint64_t v12[2];

  v1 = (int)this;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498AFB8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498AFB8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5)
      v5 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v6 = *((_QWORD *)v5 + 45);
    v12[0] = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v12[0] = (uint64_t)v7;
    }
    sub_20C374970(&qword_25498AFA0, v12, 1uLL);
    if ((v12[0] & 7) != 0)
    {
      v9 = (unsigned int *)(v12[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AFA0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AFB8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498AFD8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498AFD8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C5FC43C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498AFC0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498AFD8);
  }
  if (v1)
    return &qword_25498AFC0;
  else
    return &qword_25498AFA0;
}

void sub_20C5FC3EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AFB8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5FC43C(uint64_t **a1)
{
  qword_25498AFC8 = 0;
  unk_25498AFD0 = 0;
  qword_25498AFC0 = 0;
  sub_20BFC9A6C((char **)&qword_25498AFC0, ((unk_25498AFA8 - qword_25498AFA0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498AFC0, (_QWORD *)qword_25498AFC8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498AFC0, (_QWORD *)qword_25498AFC8, (uint64_t *)qword_25498AFA0, unk_25498AFA8, (unk_25498AFA8 - qword_25498AFA0) >> 3);
}

void sub_20C5FC4D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C5FC4F0()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "UsdLuxListAPI::ComputeModeConsultModelHierarchyCache");
  sub_20BDDC0E4(__p, "Consult lightList cache");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53E648, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdLuxListAPI::ComputeModeIgnoreCache");
  sub_20BDDC0E4(__p, "Ignore lightList cache");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C53E648, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20C5FC5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::ComputeLightList(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  a3[2] = 0;
  a3[1] = 0;
  *a3 = a3 + 1;
  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  sub_20C5FC6BC((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&v7, a2, (uint64_t)a3);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C5FC694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20C35C2E0((uint64_t)&a9);
  sub_20BFD7C28(v9, *(_QWORD **)(v9 + 8));
  _Unwind_Resume(a1);
}

void sub_20C5FC6BC(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *v5;
  _BOOL4 IsPrimPath;
  int v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v11;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v12;
  const pxrInternal__aapl__pxrReserved__::SdfPath *i;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v26;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;
  uint64_t HasAPI;
  uint64_t *v29;
  const pxrInternal__aapl__pxrReserved__::TfType *v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  void **v42;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v43;
  int v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;

  v5 = a1;
  if ((_DWORD)a2)
    goto LABEL_30;
  sub_20C348EEC((uint64_t)a1, (int *)&v53);
  IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v53);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
  a1 = (pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)sub_20BFD265C(&v53);
  if (!IsPrimPath)
    goto LABEL_30;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v53, v5);
  *((_QWORD *)&v54 + 1) = 0;
  *(_QWORD *)&v53 = off_24C53E600;
  v61 = 0;
  pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::GetLightListCacheBehaviorAttr((pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *)&v53, (uint64_t)&v50);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v50, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v61);
  v8 = v7;
  if ((BYTE8(v51) & 7) != 0)
  {
    v9 = (unsigned int *)(*((_QWORD *)&v51 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
  sub_20BFD265C(&v51);
  if (*((_QWORD *)&v50 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v50 + 1));
  if (!v8)
    goto LABEL_25;
  v11 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v11)
    v11 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if ((v61 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v11 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    v12 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v12)
      v12 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if ((v61 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v12 + 6) & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::GetLightListRel((pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *)&v53, (uint64_t)&v50);
  v47 = 0uLL;
  *(_QWORD *)&v48 = 0;
  pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v50, (uint64_t *)&v47);
  v14 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v47 + 1);
  for (i = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v47;
        i != v14;
        i = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)i + 8))
  {
    sub_20BFD72BC((uint64_t **)a3, (_QWORD *)(a3 + 8), i, i);
  }
  v15 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v15)
    v15 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v16 = v61;
  v17 = *((_QWORD *)v15 + 6);
  v42 = (void **)&v47;
  sub_20BFD6F90(&v42);
  if ((BYTE8(v51) & 7) != 0)
  {
    v18 = (unsigned int *)(*((_QWORD *)&v51 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
  v20 = v16 & 0xFFFFFFFFFFFFFFF8;
  v21 = v17 & 0xFFFFFFFFFFFFFFF8;
  sub_20BFD265C(&v51);
  if (*((_QWORD *)&v50 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v50 + 1));
  if (v20 == v21)
    v22 = 0;
  else
LABEL_25:
    v22 = 1;
  if ((v61 & 7) != 0)
  {
    v23 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v53);
  if ((v22 & 1) != 0)
  {
LABEL_30:
    StaticTfType = pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_GetStaticTfType(a1);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v26);
    HasAPI = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)v5, SchemaInfo);
    if ((HasAPI & 1) != 0
      || (v29 = pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *)HasAPI),
          v31 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v29, v30), pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)v5, v31, v32)))
    {
      sub_20C348EEC((uint64_t)v5, (int *)&v53);
      sub_20C37F3F8((uint64_t **)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, &v53);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
      sub_20BFD265C(&v53);
    }
    v53 = 0uLL;
    LOBYTE(v54) = 0;
    v33 = sub_20C3C103C((uint64_t)&v53, 0);
    *(_QWORD *)&v51 = *(_QWORD *)(v33 + 16);
    v50 = *(_OWORD *)v33;
    v53 = v50;
    LOBYTE(v54) = v51;
    v34 = sub_20C3C103C((uint64_t)&v53, 0x100000005);
    *(_QWORD *)&v48 = *(_QWORD *)(v34 + 16);
    v47 = *(_OWORD *)v34;
    v53 = v47;
    LOBYTE(v54) = v48;
    v35 = (uint64_t *)sub_20C3C103C((uint64_t)&v53, 6);
    v36 = *v35;
    v37 = v35[1];
    v38 = v35[2];
    if (!(_DWORD)a2)
    {
      *(_QWORD *)&v53 = *v35;
      *((_QWORD *)&v53 + 1) = v37;
      LOBYTE(v54) = v38;
      v39 = sub_20C3C103C((uint64_t)&v53, 2);
      v36 = *(_QWORD *)v39;
      v37 = *(_QWORD *)(v39 + 8);
      v38 = v38 & 0xFFFFFFFFFFFFFF00 | *(unsigned __int8 *)(v39 + 16);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v5 + 4);
    *(_QWORD *)&v50 = v36 & 0xFFFFFFFFFFFFDFFFLL;
    *((_QWORD *)&v50 + 1) = v37 | 0x2000;
    *(_QWORD *)&v51 = v38;
    sub_20C3ADEFC((uint64_t)v5, (uint64_t *)&v50, (uint64_t)&v53);
    *(_QWORD *)&v50 = v53;
    sub_20BFD6E54((_DWORD *)&v50 + 2, (_DWORD *)&v53 + 2);
    sub_20BFD6EA4((_DWORD *)&v50 + 3, (_DWORD *)&v53 + 3);
    v51 = v54;
    v52 = v55;
    *(_QWORD *)&v47 = v56;
    sub_20BFD6E54((_DWORD *)&v47 + 2, &v57);
    sub_20BFD6EA4((_DWORD *)&v47 + 3, &v58);
    v48 = v59;
    v49 = v60;
    while (v50 != v47 || !sub_20C39FA44((uint64_t)&v51, (uint64_t)&v48))
    {
      sub_20C3ADDEC((uint64_t)&v50, (uint64_t)&v42);
      sub_20C5FC6BC(&v42, a2, a3);
      if ((v46 & 7) != 0)
      {
        v40 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v45);
      sub_20BFD265C(&v44);
      if (v43)
        sub_20C35C614(v43);
      sub_20C3ADE64((uint64_t)&v50);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 3);
    sub_20BFD265C((_DWORD *)&v47 + 2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 3);
    sub_20BFD265C((_DWORD *)&v50 + 2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v58);
    sub_20BFD265C(&v57);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 3);
    sub_20BFD265C((_DWORD *)&v53 + 2);
  }
}

void sub_20C5FCBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;

  v31 = *(_QWORD *)(v29 - 96);
  if ((v31 & 7) != 0)
  {
    v32 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&a29);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::StoreLightList(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  BOOL HasPrefix;
  _DWORD *v6;
  _DWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v13;
  unsigned int *v14;
  unsigned int v15;
  pxrInternal__aapl__pxrReserved__::SdfPath **v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::SdfPath *v21;
  _DWORD *v22;
  unint64_t v23;
  std::type_info v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28))
        || (sub_20C3630C0((uint64_t)this, &v16),
            HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16), pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1), sub_20BFD265C(&v16), HasPrefix))
      {
        v6 = v22;
        if ((unint64_t)v22 >= v23)
        {
          v7 = (_DWORD *)sub_20BFD7890((uint64_t *)&v21, (_DWORD *)v4 + 7);
        }
        else
        {
          sub_20BFD6E54(v22, (_DWORD *)v4 + 7);
          sub_20BFD6EA4(v6 + 1, (_DWORD *)v4 + 8);
          v7 = v6 + 2;
        }
        v22 = v7;
      }
      v8 = (_QWORD *)v4[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v4[2];
          v10 = *v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != v3);
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::CreateLightListRel(this, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v16);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v16, &v21);
  if ((v20 & 7) != 0)
  {
    v11 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
  v24.__type_name = 0;
  pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::CreateLightListCacheBehaviorAttr(this, &v24, 0, (uint64_t)&v16);
  v13 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v13)
    v13 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__ **)&v16, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v13 + 40), NAN);
  if ((v20 & 7) != 0)
  {
    v14 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
  sub_20BF4C2D8((uint64_t)&v24);
  v16 = &v21;
  sub_20BFD6F90((void ***)&v16);
}

void sub_20C5FCED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_20C372B54((uint64_t)&a9);
  sub_20BF4C2D8((uint64_t)&a16);
  a9 = (void **)&a13;
  sub_20BFD6F90(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::InvalidateLightList(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v1;
  unsigned int *v2;
  unsigned int v3;
  pxrInternal__aapl__pxrReserved__ *v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;
  std::type_info v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10.__type_name = 0;
  pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::CreateLightListCacheBehaviorAttr(this, &v10, 0, (uint64_t)&v5);
  v1 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v1)
    v1 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>(&v5, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v1 + 88), NAN);
  if ((v9 & 7) != 0)
  {
    v2 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
  return sub_20BF4C2D8((uint64_t)&v10);
}

void sub_20C5FD02C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20C372B54((uint64_t)va);
  sub_20BF4C2D8((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5FD060()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5FD134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::~UsdLuxMeshLightAPI(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53E668;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/meshLightAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdLuxMeshLightAPI pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53E668;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5FD318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *this)
{
  return 5;
}

uint64_t sub_20C5FD340(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498AFE0, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdLuxMeshLightAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C5FD4F8(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53E668;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53E668;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C5FD4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C5FD4F8(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498AFE0, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdLuxMeshLightAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AFE8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498AFE8))
  {
    __cxa_guard_release(&qword_25498AFE8);
  }
  return &qword_25498AFE0;
}

void sub_20C5FD614(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AFE8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498AFF8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *)__cxa_guard_acquire(&qword_25498AFF8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::_GetStaticTfType(v3);
      byte_25498AFF0 = sub_20C35BD7C((char *)&qword_25498AFE0, v4, v5);
      __cxa_guard_release(&qword_25498AFF8);
    }
  }
  return byte_25498AFF0;
}

void sub_20C5FD690(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498AFF8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::_GetStaticTfType(this);
  return &qword_25498AFE0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498B018);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B018))
  {
    qword_25498B000 = 0;
    *(_QWORD *)algn_25498B008 = 0;
    qword_25498B010 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B000, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B018);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B038);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B038))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C5FD7B8((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B020, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B038);
  }
  if (v1)
    return &qword_25498B020;
  else
    return &qword_25498B000;
}

void sub_20C5FD7A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B038);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C5FD7B8(uint64_t **a1)
{
  qword_25498B028 = 0;
  unk_25498B030 = 0;
  qword_25498B020 = 0;
  sub_20BFC9A6C((char **)&qword_25498B020, ((*(_QWORD *)algn_25498B008 - qword_25498B000) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498B020, (_QWORD *)qword_25498B028, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498B020, (_QWORD *)qword_25498B028, (uint64_t *)qword_25498B000, *(uint64_t **)algn_25498B008, (*(_QWORD *)algn_25498B008 - qword_25498B000) >> 3);
}

void sub_20C5FD84C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5FD86C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5FD940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::~UsdLuxNonboundableLightBase(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E6C0;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/nonboundableLightBase.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdLuxNonboundableLightBase pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLight"
                            "Base::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E6C0;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5FDB1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B048);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B048))
  {
    __cxa_guard_release(&qword_25498B048);
  }
  return &qword_25498B040;
}

void sub_20C5FDBA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B048);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B058);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *)__cxa_guard_acquire(&qword_25498B058);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::_GetStaticTfType(v3);
      byte_25498B050 = sub_20C35BD7C((char *)&qword_25498B040, v4, v5);
      __cxa_guard_release(&qword_25498B058);
    }
  }
  return byte_25498B050;
}

void sub_20C5FDC24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B058);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::_GetStaticTfType(this);
  return &qword_25498B040;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498B078);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B078))
  {
    qword_25498B060 = 0;
    *(_QWORD *)algn_25498B068 = 0;
    qword_25498B070 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B060, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B078);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B098);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B098))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)1);
    qword_25498B080 = 0;
    *(_QWORD *)algn_25498B088 = 0;
    qword_25498B090 = 0;
    sub_20BFE538C(&qword_25498B080, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B080, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B098);
  }
  if (v1)
    return &qword_25498B080;
  else
    return &qword_25498B060;
}

void sub_20C5FDD54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B098);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetIntensityAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetIntensityAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5FDDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  sub_20C35C4F8((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)a2 = off_24C53E348;
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C5FDE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateIntensityAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE v7[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateIntensityAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_20C5FDEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetExposureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetExposureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5FDF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateExposureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE v7[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateExposureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_20C5FDF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetDiffuseAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetDiffuseAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5FDFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateDiffuseAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE v7[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateDiffuseAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_20C5FE044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetSpecularAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetSpecularAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5FE098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateSpecularAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE v7[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateSpecularAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_20C5FE104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetNormalizeAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5FE158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE v7[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateNormalizeAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_20C5FE1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetColorAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5FE218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE v7[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateColorAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_20C5FE284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetEnableColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetEnableColorTemperatureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5FE2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateEnableColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE v7[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateEnableColorTemperatureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_20C5FE344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetColorTemperatureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5FE398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE v7[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateColorTemperatureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_20C5FE404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetFiltersRel(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetFiltersRel((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5FE458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateFiltersRel(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  _BYTE v3[32];

  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateFiltersRel((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_20C5FE4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5FE4C0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5506E4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5FE594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5FE5E4()
{
  void *__p[2];
  char v1;

  sub_20C5FECD8();
  sub_20BDDC0E4(__p, "PluginLight");
  sub_20C5FEDF8((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5FE630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::~UsdLuxPluginLight(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E718;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/pluginLight.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdLuxPluginLight pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E718;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5FE7D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498B0A8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498B0A8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498B0A0, "PluginLight");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498B0A0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B0A8);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498B0A0, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E718;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdLux/pluginLight.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdLuxPluginLight pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::Define(const U"
                            "sdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E718;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5FE9C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B0A8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B0B8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B0B8))
  {
    __cxa_guard_release(&qword_25498B0B8);
  }
  return &qword_25498B0B0;
}

void sub_20C5FEA68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B0B8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B0C8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight *)__cxa_guard_acquire(&qword_25498B0C8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::_GetStaticTfType(v3);
      byte_25498B0C0 = sub_20C35BD7C((char *)&qword_25498B0B0, v4, v5);
      __cxa_guard_release(&qword_25498B0C8);
    }
  }
  return byte_25498B0C0;
}

void sub_20C5FEAE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B0C8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::_GetStaticTfType(this);
  return &qword_25498B0B0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498B0E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B0E8))
  {
    qword_25498B0D0 = 0;
    *(_QWORD *)algn_25498B0D8 = 0;
    qword_25498B0E0 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B0D0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B0E8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B108);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B108))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)1);
    qword_25498B0F0 = 0;
    *(_QWORD *)algn_25498B0F8 = 0;
    qword_25498B100 = 0;
    sub_20BFE538C(&qword_25498B0F0, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B0F0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B108);
  }
  if (v1)
    return &qword_25498B0F0;
  else
    return &qword_25498B0D0;
}

void sub_20C5FEC14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B108);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::GetNodeDefAPI(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  sub_20C35C4F8((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)a2 = off_24C53DAE8;
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C5FECC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5FECD8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5506E4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5FEDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5FEDF8(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5FEE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C5FEEAC()
{
  void *__p[2];
  char v1;

  sub_20C5FF5A0();
  sub_20BDDC0E4(__p, "PluginLightFilter");
  sub_20C5FF6C0((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5FEEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::~UsdLuxPluginLightFilter(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::~UsdLuxLightFilter(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E770;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/pluginLightFilter.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdLuxPluginLightFilter pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::Ge"
                            "t(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E770;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5FF09C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498B118);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498B118))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498B110, "PluginLightFilter");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498B110, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B118);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498B110, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E770;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdLux/pluginLightFilter.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdLuxPluginLightFilter pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::De"
                            "fine(const UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E770;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5FF28C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B118);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B128);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B128))
  {
    __cxa_guard_release(&qword_25498B128);
  }
  return &qword_25498B120;
}

void sub_20C5FF330(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B128);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B138);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter *)__cxa_guard_acquire(&qword_25498B138);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::_GetStaticTfType(v3);
      byte_25498B130 = sub_20C35BD7C((char *)&qword_25498B120, v4, v5);
      __cxa_guard_release(&qword_25498B138);
    }
  }
  return byte_25498B130;
}

void sub_20C5FF3AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B138);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::_GetStaticTfType(this);
  return &qword_25498B120;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498B158);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B158))
  {
    qword_25498B140 = 0;
    *(_QWORD *)algn_25498B148 = 0;
    qword_25498B150 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B140, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B158);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B178);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B178))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *)1);
    qword_25498B160 = 0;
    *(_QWORD *)algn_25498B168 = 0;
    qword_25498B170 = 0;
    sub_20BFE538C(&qword_25498B160, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B160, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B178);
  }
  if (v1)
    return &qword_25498B160;
  else
    return &qword_25498B140;
}

void sub_20C5FF4DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B178);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::GetNodeDefAPI(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  sub_20C35C4F8((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)a2 = off_24C53DAE8;
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C5FF58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C5FF5A0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5FF770((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C5FF674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C5FF6C0(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C5FF750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C5FF770(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C5FF7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C5FF800()
{
  void *__p[2];
  char v1;

  sub_20C600334();
  sub_20BDDC0E4(__p, "PortalLight");
  sub_20C600454((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C5FF84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::~UsdLuxPortalLight(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E7C8;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/portalLight.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdLuxPortalLight pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E7C8;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C5FF9F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498B188);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498B188))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498B180, "PortalLight");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498B180, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B188);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498B180, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E7C8;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdLux/portalLight.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdLuxPortalLight pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::Define(const U"
                            "sdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E7C8;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C5FFBE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B188);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B198);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B198))
  {
    __cxa_guard_release(&qword_25498B198);
  }
  return &qword_25498B190;
}

void sub_20C5FFC84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B198);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B1A8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *)__cxa_guard_acquire(&qword_25498B1A8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::_GetStaticTfType(v3);
      byte_25498B1A0 = sub_20C35BD7C((char *)&qword_25498B190, v4, v5);
      __cxa_guard_release(&qword_25498B1A8);
    }
  }
  return byte_25498B1A0;
}

void sub_20C5FFD00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B1A8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::_GetStaticTfType(this);
  return &qword_25498B190;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::GetWidthAttr(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 312), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5FFDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::CreateWidthAttr(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 312), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::GetHeightAttr(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 152), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C5FFF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::CreateHeightAttr(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 152), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498B1C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B1C8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5)
      v5 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v6 = *((_QWORD *)v5 + 39);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v9)
      v9 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 19);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498B1B0, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B1B0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B1C8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B1E8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B1E8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)1);
    sub_20C600248((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B1D0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B1E8);
  }
  if (v1)
    return &qword_25498B1D0;
  else
    return &qword_25498B1B0;
}

void sub_20C6001C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498B1C8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C600248(uint64_t **a1)
{
  qword_25498B1D8 = 0;
  unk_25498B1E0 = 0;
  qword_25498B1D0 = 0;
  sub_20BFC9A6C((char **)&qword_25498B1D0, ((unk_25498B1B8 - qword_25498B1B0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498B1D0, (_QWORD *)qword_25498B1D8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498B1D0, (_QWORD *)qword_25498B1D8, (uint64_t *)qword_25498B1B0, unk_25498B1B8, (unk_25498B1B8 - qword_25498B1B0) >> 3);
}

void sub_20C6002DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C6002FC(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType *v3;
  char *v4;
  std::type_info var8;

  var8.__vftable = (std::type_info_vtbl *)sub_20C600508;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_20C600334()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5EE4E0((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C600408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C600454(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C6004E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C600508(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v6;
  char v7;
  char v8;
  unsigned int *v9;
  unsigned int v10;
  char v11;
  char v12;
  unsigned int *v13;
  unsigned int v14;
  float v15;
  float v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  float32x2_t v23;
  float v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  float32x2_t *v29;
  float32x2_t *v30;
  float32x2_t v31;
  float v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  double v36;
  float64x2_t v37;
  double v38;
  uint64_t v39;
  char *v40;
  float32_t v41;
  float32x2_t *v42;
  double v43;
  uint64_t v44;
  char *v45;
  float v46;
  unint64_t v47;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  double v52;
  float64x2_t v53;
  double v54;
  float64x2_t v55;
  uint64_t v56;
  float64x2_t v57;
  double v58;
  char v59;
  float v60;
  float v61;
  void (**v62)(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *__hidden);
  uint64_t v63;

  v6 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v62, a1);
  v62 = off_24C53E7C8;
  if (!v63
    || (*(_BYTE *)(v63 + 57) & 8) != 0
    || (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v6) & 1) == 0)
  {
    *(_QWORD *)&v55.f64[0] = "usdLux/portalLight.cpp";
    *(_QWORD *)&v55.f64[1] = "_ComputeExtent";
    v56 = 207;
    *(_QWORD *)&v57.f64[0] = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtent(const UsdGeomBoundable &, const UsdTi"
                             "meCode &, const GfMatrix4d *, VtVec3fArray *)";
    LOBYTE(v57.f64[1]) = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v55, "light", 0) & 1) == 0)
      goto LABEL_21;
  }
  v61 = 0.0;
  pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::GetWidthAttr((pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *)&v62, (uint64_t)&v55);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>((uint64_t)&v55, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v61);
  v8 = v7;
  if ((LOBYTE(v57.f64[0]) & 7) != 0)
  {
    v9 = (unsigned int *)(*(_QWORD *)&v57.f64[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
  sub_20BFD265C(&v56);
  if (*(_QWORD *)&v55.f64[1])
    sub_20C35C614(*(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v55.f64[1]);
  if ((v8 & 1) == 0)
    goto LABEL_21;
  v60 = 0.0;
  pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::GetHeightAttr((pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *)&v62, (uint64_t)&v55);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>((uint64_t)&v55, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v60);
  v12 = v11;
  if ((LOBYTE(v57.f64[0]) & 7) != 0)
  {
    v13 = (unsigned int *)(*(_QWORD *)&v57.f64[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
  sub_20BFD265C(&v56);
  if (*(_QWORD *)&v55.f64[1])
    sub_20C35C614(*(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v55.f64[1]);
  if ((v12 & 1) != 0)
  {
    if (a4)
    {
      v16 = v60;
      v15 = v61;
      LODWORD(v55.f64[1]) = 0;
      v55.f64[0] = 0.0;
      *(_QWORD *)&v51.f64[0] = &v55;
      sub_20BF5AD04((unint64_t *)a4, 2uLL, (uint64_t **)&v51);
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      v19 = *(_QWORD *)(a4 + 32);
      *(float *)(v19 + 12) = v15 * 0.5;
      *(float *)(v19 + 16) = v16 * 0.5;
      *(_DWORD *)(v19 + 20) = 0;
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v20, v21);
      v22 = *(_QWORD *)(a4 + 32);
      v23 = *(float32x2_t *)(v22 + 12);
      v24 = *(float *)(v22 + 20);
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v25, v26);
      v29 = *(float32x2_t **)(a4 + 32);
      *v29 = vneg_f32(v23);
      v29[1].f32[0] = -v24;
      if (a3)
      {
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v27, v28);
        v30 = *(float32x2_t **)(a4 + 32);
        v31 = *v30;
        v32 = v30[1].f32[0];
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v33, v34);
        v35 = *(_QWORD *)(a4 + 32);
        v36 = *(float *)(v35 + 20);
        v37 = vcvtq_f64_f32(*(float32x2_t *)(v35 + 12));
        v55 = vcvtq_f64_f32(v31);
        *(double *)&v56 = v32;
        v57 = v37;
        v58 = v36;
        pxrInternal__aapl__pxrReserved__::GfBBox3d::_SetMatrices((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v55, a3);
        v59 = 0;
        pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v55, (uint64_t)&v51);
        v49 = v51;
        v38 = v52;
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v39, v40);
        v41 = v38;
        v42 = *(float32x2_t **)(a4 + 32);
        *v42 = vcvt_f32_f64(v49);
        v42[1].f32[0] = v41;
        v50 = v53;
        v43 = v54;
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v44, v45);
        v46 = v43;
        v47 = *(_QWORD *)(a4 + 32);
        *(float32x2_t *)(v47 + 12) = vcvt_f32_f64(v50);
        *(float *)(v47 + 20) = v46;
      }
      a4 = 1;
    }
  }
  else
  {
LABEL_21:
    a4 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)&v62);
  return a4;
}

void sub_20C6007DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_20C600830()
{
  void *__p[2];
  char v1;

  sub_20C60153C();
  sub_20BDDC0E4(__p, "RectLight");
  sub_20C60165C((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C60087C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::~UsdLuxRectLight(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E820;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/rectLight.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdLuxRectLight pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::Get(const UsdStage"
                            "Ptr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E820;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C600A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498B1F8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498B1F8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498B1F0, "RectLight");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498B1F0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B1F8);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498B1F0, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E820;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdLux/rectLight.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdLuxRectLight pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::Define(const UsdSt"
                            "agePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E820;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C600C10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B1F8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B208);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B208))
  {
    __cxa_guard_release(&qword_25498B208);
  }
  return &qword_25498B200;
}

void sub_20C600CB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B208);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B218);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *)__cxa_guard_acquire(&qword_25498B218);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::_GetStaticTfType(v3);
      byte_25498B210 = sub_20C35BD7C((char *)&qword_25498B200, v4, v5);
      __cxa_guard_release(&qword_25498B218);
    }
  }
  return byte_25498B210;
}

void sub_20C600D30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B218);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::_GetStaticTfType(this);
  return &qword_25498B200;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::GetWidthAttr(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 312), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C600E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::CreateWidthAttr(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 312), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::GetHeightAttr(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 152), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C600F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::CreateHeightAttr(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 152), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::GetTextureFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 296), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6010B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::CreateTextureFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 296), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *SchemaAttributeNames;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int)this;
  v26 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498B238);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B238))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5)
      v5 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v6 = *((_QWORD *)v5 + 39);
    v23 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v9)
      v9 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v10 = *((_QWORD *)v9 + 19);
    v24 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v13)
      v13 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v14 = *((_QWORD *)v13 + 37);
    v25 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498B220, &v23, 3uLL);
    v17 = &v26;
    do
    {
      v19 = *--v17;
      v18 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    while (v17 != &v23);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B220, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B238);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B258);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B258))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)1);
    sub_20C601450((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B240, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B258);
  }
  if (v1)
    return &qword_25498B240;
  else
    return &qword_25498B220;
}

void sub_20C6013C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B238);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C601450(uint64_t **a1)
{
  qword_25498B248 = 0;
  unk_25498B250 = 0;
  qword_25498B240 = 0;
  sub_20BFC9A6C((char **)&qword_25498B240, ((unk_25498B228 - qword_25498B220) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498B240, (_QWORD *)qword_25498B248, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498B240, (_QWORD *)qword_25498B248, (uint64_t *)qword_25498B220, unk_25498B228, (unk_25498B228 - qword_25498B220) >> 3);
}

void sub_20C6014E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C601504(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType *v3;
  char *v4;
  std::type_info var8;

  var8.__vftable = (std::type_info_vtbl *)sub_20C601710;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_20C60153C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5EE4E0((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C601610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C60165C(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C6016EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C601710(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3, unint64_t *a4)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v6;
  char v7;
  char v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  float v15;
  float v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  float32x2_t v23;
  float v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  float32x2_t *v29;
  float32x2_t *v30;
  float32x2_t v31;
  float v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  double v36;
  float64x2_t v37;
  double v38;
  uint64_t v39;
  char *v40;
  float32_t v41;
  float32x2_t *v42;
  double v43;
  uint64_t v44;
  char *v45;
  float v46;
  unint64_t v47;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  double v52;
  float64x2_t v53;
  double v54;
  float64x2_t v55;
  uint64_t v56;
  float64x2_t v57;
  double v58;
  char v59;
  float v60;
  float v61;
  void (**v62)(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *__hidden);
  uint64_t v63;

  v6 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v62, a1);
  v62 = off_24C53E820;
  if (!v63
    || (*(_BYTE *)(v63 + 57) & 8) != 0
    || (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v6) & 1) == 0)
  {
    *(_QWORD *)&v55.f64[0] = "usdLux/rectLight.cpp";
    *(_QWORD *)&v55.f64[1] = "_ComputeExtent";
    v56 = 223;
    *(_QWORD *)&v57.f64[0] = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtent(const UsdGeomBoundable &, const UsdTi"
                             "meCode &, const GfMatrix4d *, VtVec3fArray *)";
    LOBYTE(v57.f64[1]) = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v55, "light", 0) & 1) == 0)
      goto LABEL_19;
  }
  v61 = 0.0;
  pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::GetWidthAttr((pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *)&v62, (uint64_t)&v55);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>((uint64_t)&v55, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v61);
  v8 = v7;
  if ((LOBYTE(v57.f64[0]) & 7) != 0)
  {
    v9 = (unsigned int *)(*(_QWORD *)&v57.f64[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
  sub_20BFD265C(&v56);
  if (*(_QWORD *)&v55.f64[1])
    sub_20C35C614(*(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v55.f64[1]);
  if ((v8 & 1) != 0)
  {
    v60 = 0.0;
    pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::GetHeightAttr((pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *)&v62, (uint64_t)&v55);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>((uint64_t)&v55, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v60);
    v12 = v11;
    if ((LOBYTE(v57.f64[0]) & 7) != 0)
    {
      v13 = (unsigned int *)(*(_QWORD *)&v57.f64[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
    sub_20BFD265C(&v56);
    if (*(_QWORD *)&v55.f64[1])
      sub_20C35C614(*(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v55.f64[1]);
    if ((v12 & 1) != 0)
    {
      v16 = v60;
      v15 = v61;
      LODWORD(v55.f64[1]) = 0;
      v55.f64[0] = 0.0;
      *(_QWORD *)&v51.f64[0] = &v55;
      sub_20BF5AD04(a4, 2uLL, (uint64_t **)&v51);
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      v19 = a4[4];
      *(float *)(v19 + 12) = v15 * 0.5;
      *(float *)(v19 + 16) = v16 * 0.5;
      *(_DWORD *)(v19 + 20) = 0;
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v20, v21);
      v22 = a4[4];
      v23 = *(float32x2_t *)(v22 + 12);
      v24 = *(float *)(v22 + 20);
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v25, v26);
      v29 = (float32x2_t *)a4[4];
      *v29 = vneg_f32(v23);
      v29[1].f32[0] = -v24;
      if (a3)
      {
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v27, v28);
        v30 = (float32x2_t *)a4[4];
        v31 = *v30;
        v32 = v30[1].f32[0];
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v33, v34);
        v35 = a4[4];
        v36 = *(float *)(v35 + 20);
        v37 = vcvtq_f64_f32(*(float32x2_t *)(v35 + 12));
        v55 = vcvtq_f64_f32(v31);
        *(double *)&v56 = v32;
        v57 = v37;
        v58 = v36;
        pxrInternal__aapl__pxrReserved__::GfBBox3d::_SetMatrices((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v55, a3);
        v59 = 0;
        pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v55, (uint64_t)&v51);
        v49 = v51;
        v38 = v52;
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v39, v40);
        v41 = v38;
        v42 = (float32x2_t *)a4[4];
        *v42 = vcvt_f32_f64(v49);
        v42[1].f32[0] = v41;
        v50 = v53;
        v43 = v54;
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v44, v45);
        v46 = v43;
        v47 = a4[4];
        *(float32x2_t *)(v47 + 12) = vcvt_f32_f64(v50);
        *(float *)(v47 + 20) = v46;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)&v62);
  return v12;
}

void sub_20C6019DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)(v1 - 88));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::~UsdLuxShadowAPI(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53E878;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/shadowAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdLuxShadowAPI pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::Get(const UsdStage"
                            "Ptr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53E878;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C601BC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this)
{
  return 5;
}

uint64_t sub_20C601BEC(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498B260, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdLuxShadowAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C601DA4(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53E878;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53E878;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C601D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C601DA4(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498B260, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdLuxShadowAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B268);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B268))
  {
    __cxa_guard_release(&qword_25498B268);
  }
  return &qword_25498B260;
}

void sub_20C601EC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B268);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B278);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *)__cxa_guard_acquire(&qword_25498B278);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::_GetStaticTfType(v3);
      byte_25498B270 = sub_20C35BD7C((char *)&qword_25498B260, v4, v5);
      __cxa_guard_release(&qword_25498B278);
    }
  }
  return byte_25498B270;
}

void sub_20C601F3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B278);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::_GetStaticTfType(this);
  return &qword_25498B260;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetShadowEnableAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 208), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C602014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::CreateShadowEnableAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 208), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetShadowColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 192), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60216C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::CreateShadowColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 192), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 280), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetShadowDistanceAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 200), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6022C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::CreateShadowDistanceAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 200), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetShadowFalloffAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 216), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60241C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::CreateShadowFalloffAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 216), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetShadowFalloffGammaAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 224), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C602574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::CreateShadowFalloffGammaAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 224), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t *SchemaAttributeNames;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = (int)this;
  v36 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498B298);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B298))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5)
      v5 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v6 = *((_QWORD *)v5 + 26);
    v31 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v31 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v9)
      v9 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v10 = *((_QWORD *)v9 + 24);
    v32 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v32 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v13)
      v13 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v14 = *((_QWORD *)v13 + 25);
    v33 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v17)
      v17 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v18 = *((_QWORD *)v17 + 27);
    v34 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v34 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v21)
      v21 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v22 = *((_QWORD *)v21 + 28);
    v35 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498B280, &v31, 5uLL);
    v25 = &v36;
    do
    {
      v27 = *--v25;
      v26 = v27;
      if ((v27 & 7) != 0)
      {
        v28 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
    }
    while (v25 != &v31);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B280, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B298);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B2B8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B2B8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C6029B4((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B2A0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B2B8);
  }
  if (v1)
    return &qword_25498B2A0;
  else
    return &qword_25498B280;
}

void sub_20C602924(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B298);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6029B4(uint64_t **a1)
{
  qword_25498B2A8 = 0;
  unk_25498B2B0 = 0;
  qword_25498B2A0 = 0;
  sub_20BFC9A6C((char **)&qword_25498B2A0, ((unk_25498B288 - qword_25498B280) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498B2A0, (_QWORD *)qword_25498B2A8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498B2A0, (_QWORD *)qword_25498B2A8, (uint64_t *)qword_25498B280, unk_25498B288, (unk_25498B288 - qword_25498B280) >> 3);
}

void sub_20C602A48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::UsdLuxShadowAPI(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this, const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = off_24C53E878;
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  return this;
}

{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = off_24C53E878;
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  return this;
}

void sub_20C602B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C602BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  sub_20C35C4F8((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)a2 = off_24C53D618;
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C602C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C602D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetOutput(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C602E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C602EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::CreateInput(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C602FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetInput(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C6030A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetInputs(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C603180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6031A4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C603278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::~UsdLuxShapingAPI(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53E8D0;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/shapingAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdLuxShapingAPI pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::Get(const UsdSta"
                            "gePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53E8D0;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C60345C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this)
{
  return 5;
}

uint64_t sub_20C603484(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498B2C0, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdLuxShapingAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C60363C(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53E8D0;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53E8D0;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C603628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C60363C(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498B2C0, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdLuxShapingAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B2C8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B2C8))
  {
    __cxa_guard_release(&qword_25498B2C8);
  }
  return &qword_25498B2C0;
}

void sub_20C603758(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B2C8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B2D8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *)__cxa_guard_acquire(&qword_25498B2D8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::_GetStaticTfType(v3);
      byte_25498B2D0 = sub_20C35BD7C((char *)&qword_25498B2C0, v4, v5);
      __cxa_guard_release(&qword_25498B2D8);
    }
  }
  return byte_25498B2D0;
}

void sub_20C6037D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B2D8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::_GetStaticTfType(this);
  return &qword_25498B2C0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingFocusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 248), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6038AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateShapingFocusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 248), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingFocusTintAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 256), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C603A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateShapingFocusTintAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 256), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 280), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingConeAngleAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 232), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C603B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateShapingConeAngleAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 232), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingConeSoftnessAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 240), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C603CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateShapingConeSoftnessAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 240), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingIesFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 272), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C603E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateShapingIesFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 272), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingIesAngleScaleAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 264), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C603F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateShapingIesAngleScaleAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 264), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingIesNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 280), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6040BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateShapingIesNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 280), v9, 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t *SchemaAttributeNames;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = (int)this;
  v46 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498B2F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B2F8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5)
      v5 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v6 = *((_QWORD *)v5 + 31);
    v39 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v39 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v9)
      v9 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v10 = *((_QWORD *)v9 + 32);
    v40 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v40 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v13)
      v13 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v14 = *((_QWORD *)v13 + 29);
    v41 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v41 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v17)
      v17 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v18 = *((_QWORD *)v17 + 30);
    v42 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v42 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v21)
      v21 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v22 = *((_QWORD *)v21 + 34);
    v43 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v43 &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v25)
      v25 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v26 = *((_QWORD *)v25 + 33);
    v44 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v44 &= 0xFFFFFFFFFFFFFFF8;
    }
    v29 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v29)
      v29 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v30 = *((_QWORD *)v29 + 35);
    v45 = v30;
    if ((v30 & 7) != 0)
    {
      v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v45 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498B2E0, &v39, 7uLL);
    v33 = &v46;
    do
    {
      v35 = *--v33;
      v34 = v35;
      if ((v35 & 7) != 0)
      {
        v36 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
    }
    while (v33 != &v39);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B2E0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B2F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B318);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B318))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C6045A4((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B300, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B318);
  }
  if (v1)
    return &qword_25498B300;
  else
    return &qword_25498B2E0;
}

void sub_20C604514(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B2F8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6045A4(uint64_t **a1)
{
  qword_25498B308 = 0;
  unk_25498B310 = 0;
  qword_25498B300 = 0;
  sub_20BFC9A6C((char **)&qword_25498B300, ((unk_25498B2E8 - qword_25498B2E0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498B300, (_QWORD *)qword_25498B308, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498B300, (_QWORD *)qword_25498B308, (uint64_t *)qword_25498B2E0, unk_25498B2E8, (unk_25498B2E8 - qword_25498B2E0) >> 3);
}

void sub_20C604638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::UsdLuxShapingAPI(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this, const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = off_24C53E8D0;
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  return this;
}

{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = off_24C53E8D0;
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  return this;
}

void sub_20C6046F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C6047A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  sub_20C35C4F8((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)a2 = off_24C53D618;
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C604850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C604928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetOutput(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C604A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C604AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateInput(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
  v14[3] = 0;
  v14[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v14);
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C604BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetInput(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C604C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetInputs(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[4];

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_24C53D618;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C604D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C604D94()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C604E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C604EB8()
{
  void *__p[2];
  char v1;

  sub_20C6059EC();
  sub_20BDDC0E4(__p, "SphereLight");
  sub_20C605B0C((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C604F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::~UsdLuxSphereLight(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E928;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/sphereLight.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdLuxSphereLight pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E928;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C6050A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498B328);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498B328))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498B320, "SphereLight");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498B320, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B328);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498B320, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E928;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdLux/sphereLight.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdLuxSphereLight pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::Define(const U"
                            "sdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E928;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C605298(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B328);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B338);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B338))
  {
    __cxa_guard_release(&qword_25498B338);
  }
  return &qword_25498B330;
}

void sub_20C60533C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B338);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B348);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *)__cxa_guard_acquire(&qword_25498B348);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::_GetStaticTfType(v3);
      byte_25498B340 = sub_20C35BD7C((char *)&qword_25498B330, v4, v5);
      __cxa_guard_release(&qword_25498B348);
    }
  }
  return byte_25498B340;
}

void sub_20C6053B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B348);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::_GetStaticTfType(this);
  return &qword_25498B330;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 184), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C605490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::CreateRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 184), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::GetTreatAsPointAttr(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3)
    v3 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 464), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6055E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::CreateTreatAsPointAttr(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8)
    v8 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 464), v9, 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498B368);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B368))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5)
      v5 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v6 = *((_QWORD *)v5 + 23);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v9)
      v9 = sub_20C5EE88C(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 58);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498B350, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B350, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B368);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B388);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B388))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)1);
    sub_20C605900((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B370, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B388);
  }
  if (v1)
    return &qword_25498B370;
  else
    return &qword_25498B350;
}

void sub_20C60587C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498B368);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C605900(uint64_t **a1)
{
  qword_25498B378 = 0;
  unk_25498B380 = 0;
  qword_25498B370 = 0;
  sub_20BFC9A6C((char **)&qword_25498B370, ((unk_25498B358 - qword_25498B350) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498B370, (_QWORD *)qword_25498B378, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498B370, (_QWORD *)qword_25498B378, (uint64_t *)qword_25498B350, unk_25498B358, (unk_25498B358 - qword_25498B350) >> 3);
}

void sub_20C605994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C6059B4(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType *v3;
  char *v4;
  std::type_info var8;

  var8.__vftable = (std::type_info_vtbl *)sub_20C605BC0;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_20C6059EC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5EE4E0((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C605AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C605B0C(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C605B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C605BC0(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3, unint64_t *a4)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  char *v13;
  _DWORD *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  float32x2_t v18;
  float v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  float32x2_t *v24;
  float32x2_t *v25;
  float32x2_t v26;
  float v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  double v31;
  float64x2_t v32;
  double v33;
  uint64_t v34;
  char *v35;
  float32_t v36;
  float32x2_t *v37;
  double v38;
  uint64_t v39;
  char *v40;
  float v41;
  unint64_t v42;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  uint64_t v51;
  float64x2_t v52;
  double v53;
  char v54;
  int v55;
  void (**v56)(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *__hidden);
  uint64_t v57;

  v6 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v56, a1);
  v56 = off_24C53E928;
  if (v57
    && (*(_BYTE *)(v57 + 57) & 8) == 0
    && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v6) & 1) != 0
    || (*(_QWORD *)&v50.f64[0] = "usdLux/sphereLight.cpp",
        *(_QWORD *)&v50.f64[1] = "_ComputeExtent",
        v51 = 203,
        *(_QWORD *)&v52.f64[0] = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtent(const UsdGeomBoundable &, const U"
                                 "sdTimeCode &, const GfMatrix4d *, VtVec3fArray *)",
        LOBYTE(v52.f64[1]) = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v50, "light", 0) & 1) != 0))
  {
    v55 = 0;
    pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *)&v56, (uint64_t)&v50);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>((uint64_t)&v50, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v55);
    v8 = v7;
    if ((LOBYTE(v52.f64[0]) & 7) != 0)
    {
      v9 = (unsigned int *)(*(_QWORD *)&v52.f64[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
    sub_20BFD265C(&v51);
    if (*(_QWORD *)&v50.f64[1])
      sub_20C35C614(*(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v50.f64[1]);
    if ((v8 & 1) != 0)
    {
      v11 = v55;
      LODWORD(v50.f64[1]) = 0;
      v50.f64[0] = 0.0;
      *(_QWORD *)&v46.f64[0] = &v50;
      sub_20BF5AD04(a4, 2uLL, (uint64_t **)&v46);
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v12, v13);
      v14 = (_DWORD *)a4[4];
      v14[3] = v11;
      v14[4] = v11;
      v14[5] = v11;
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
      v17 = a4[4];
      v18 = *(float32x2_t *)(v17 + 12);
      v19 = *(float *)(v17 + 20);
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v20, v21);
      v24 = (float32x2_t *)a4[4];
      *v24 = vneg_f32(v18);
      v24[1].f32[0] = -v19;
      if (a3)
      {
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v22, v23);
        v25 = (float32x2_t *)a4[4];
        v26 = *v25;
        v27 = v25[1].f32[0];
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v28, v29);
        v30 = a4[4];
        v31 = *(float *)(v30 + 20);
        v32 = vcvtq_f64_f32(*(float32x2_t *)(v30 + 12));
        v50 = vcvtq_f64_f32(v26);
        *(double *)&v51 = v27;
        v52 = v32;
        v53 = v31;
        pxrInternal__aapl__pxrReserved__::GfBBox3d::_SetMatrices((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v50, a3);
        v54 = 0;
        pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v50, (uint64_t)&v46);
        v44 = v46;
        v33 = v47;
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v34, v35);
        v36 = v33;
        v37 = (float32x2_t *)a4[4];
        *v37 = vcvt_f32_f64(v44);
        v37[1].f32[0] = v36;
        v45 = v48;
        v38 = v49;
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v39, v40);
        v41 = v38;
        v42 = a4[4];
        *(float32x2_t *)(v42 + 12) = vcvt_f32_f64(v45);
        *(float *)(v42 + 20) = v41;
      }
    }
  }
  else
  {
    v8 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)&v56);
  return v8;
}

void sub_20C605E18(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)(v1 - 88));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *pxrInternal__aapl__pxrReserved__::UsdLuxTokensType::UsdLuxTokensType(pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int *v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int *v171;
  unsigned int v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  uint64_t v179;
  unsigned int *v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int v187;
  uint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  uint64_t v194;
  unsigned int *v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  uint64_t v200;
  unsigned int *v201;
  unsigned int v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  uint64_t v206;
  unsigned int *v207;
  unsigned int v208;
  uint64_t v209;
  unsigned int *v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int *v213;
  unsigned int v214;
  uint64_t v215;
  unsigned int *v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int *v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int *v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int *v225;
  unsigned int v226;
  uint64_t v227;
  unsigned int *v228;
  unsigned int v229;
  uint64_t v230;
  unsigned int *v231;
  unsigned int v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  uint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int *v240;
  unsigned int v241;
  uint64_t v242;
  unsigned int *v243;
  unsigned int v244;
  uint64_t v245;
  unsigned int *v246;
  unsigned int v247;
  uint64_t v248;
  unsigned int *v249;
  unsigned int v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int *v254;
  unsigned int v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int *v259;
  unsigned int v260;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;

  v346 = *MEMORY[0x24BDAC8D0];
  v262 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "angular", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v262, "automatic", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "collection:filterLink:includeRoot", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "collection:lightLink:includeRoot", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "collection:shadowLink:includeRoot", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "consumeAndContinue", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "consumeAndHalt", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "cubeMapVerticalCross", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "filterLink", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "geometry", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "guideRadius", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "ignore", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "independent", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "inputs:angle", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "inputs:color", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "inputs:colorTemperature", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "inputs:diffuse", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "inputs:enableColorTemperature", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "inputs:exposure", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "inputs:height", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "inputs:intensity", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "inputs:length", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "inputs:normalize", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "inputs:radius", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "inputs:shadow:color", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "inputs:shadow:distance", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "inputs:shadow:enable", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "inputs:shadow:falloff", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "inputs:shadow:falloffGamma", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "inputs:shaping:cone:angle", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 240, "inputs:shaping:cone:softness", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 248, "inputs:shaping:focus", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 256, "inputs:shaping:focusTint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 264, "inputs:shaping:ies:angleScale", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 272, "inputs:shaping:ies:file", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 280, "inputs:shaping:ies:normalize", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 288, "inputs:specular", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 296, "inputs:texture:file", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 304, "inputs:texture:format", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 312, "inputs:width", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 320, "latlong", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 328, "light:filters", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 336, "lightFilter:shaderId", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 344, "lightLink", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 352, "lightList", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 360, "lightList:cacheBehavior", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 368, "light:materialSyncMode", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 376, "light:shaderId", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 384, "materialGlowTintsLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 392, "MeshLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 400, "mirroredBall", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 408, "noMaterialResponse", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 416, "orientToStageUpAxis", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 424, "poleAxis", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 432, "portals", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 440, "scene", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 448, "shadowLink", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 456, "treatAsLine", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 464, "treatAsPoint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 472, "VolumeLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 480, "Y", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 488, "Z", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 496, "BoundableLightBase", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 504, "CylinderLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 512, "DiskLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 520, "DistantLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 528, "DomeLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 536, "DomeLight_1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 544, "GeometryLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 552, "LightAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 560, "LightFilter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 568, "LightListAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 576, "ListAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 584, "MeshLightAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 592, "NonboundableLightBase", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 600, "PluginLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 608, "PluginLightFilter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 616, "PortalLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 624, "RectLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 632, "ShadowAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 640, "ShapingAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 648, "SphereLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 656, "VolumeLightAPI", 0);
  v2 = *(_QWORD *)this;
  v263 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v263 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v262;
  v264 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v264 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v265 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v265 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v266 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v266 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v267 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v267 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v268 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v268 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v269 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v269 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v270 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v270 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v271 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v271 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v272 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v272 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v273 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v273 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v274 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v274 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v275 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v275 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v276 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v276 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v277 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v277 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v278 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v278 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v279 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v279 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v280 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v280 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v281 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v281 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v282 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v282 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v283 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v283 &= 0xFFFFFFFFFFFFFFF8;
  }
  v65 = *((_QWORD *)this + 21);
  v284 = v65;
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 2, v66));
    if ((v67 & 1) == 0)
      v284 &= 0xFFFFFFFFFFFFFFF8;
  }
  v68 = *((_QWORD *)this + 22);
  v285 = v68;
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 2, v69));
    if ((v70 & 1) == 0)
      v285 &= 0xFFFFFFFFFFFFFFF8;
  }
  v71 = *((_QWORD *)this + 23);
  v286 = v71;
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 2, v72));
    if ((v73 & 1) == 0)
      v286 &= 0xFFFFFFFFFFFFFFF8;
  }
  v74 = *((_QWORD *)this + 24);
  v287 = v74;
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 2, v75));
    if ((v76 & 1) == 0)
      v287 &= 0xFFFFFFFFFFFFFFF8;
  }
  v77 = *((_QWORD *)this + 25);
  v288 = v77;
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 2, v78));
    if ((v79 & 1) == 0)
      v288 &= 0xFFFFFFFFFFFFFFF8;
  }
  v80 = *((_QWORD *)this + 26);
  v289 = v80;
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 2, v81));
    if ((v82 & 1) == 0)
      v289 &= 0xFFFFFFFFFFFFFFF8;
  }
  v83 = *((_QWORD *)this + 27);
  v290 = v83;
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 2, v84));
    if ((v85 & 1) == 0)
      v290 &= 0xFFFFFFFFFFFFFFF8;
  }
  v86 = *((_QWORD *)this + 28);
  v291 = v86;
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 2, v87));
    if ((v88 & 1) == 0)
      v291 &= 0xFFFFFFFFFFFFFFF8;
  }
  v89 = *((_QWORD *)this + 29);
  v292 = v89;
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 2, v90));
    if ((v91 & 1) == 0)
      v292 &= 0xFFFFFFFFFFFFFFF8;
  }
  v92 = *((_QWORD *)this + 30);
  v293 = v92;
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 2, v93));
    if ((v94 & 1) == 0)
      v293 &= 0xFFFFFFFFFFFFFFF8;
  }
  v95 = *((_QWORD *)this + 31);
  v294 = v95;
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 2, v96));
    if ((v97 & 1) == 0)
      v294 &= 0xFFFFFFFFFFFFFFF8;
  }
  v98 = *((_QWORD *)this + 32);
  v295 = v98;
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 2, v99));
    if ((v100 & 1) == 0)
      v295 &= 0xFFFFFFFFFFFFFFF8;
  }
  v101 = *((_QWORD *)this + 33);
  v296 = v101;
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 2, v102));
    if ((v103 & 1) == 0)
      v296 &= 0xFFFFFFFFFFFFFFF8;
  }
  v104 = *((_QWORD *)this + 34);
  v297 = v104;
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 2, v105));
    if ((v106 & 1) == 0)
      v297 &= 0xFFFFFFFFFFFFFFF8;
  }
  v107 = *((_QWORD *)this + 35);
  v298 = v107;
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 2, v108));
    if ((v109 & 1) == 0)
      v298 &= 0xFFFFFFFFFFFFFFF8;
  }
  v110 = *((_QWORD *)this + 36);
  v299 = v110;
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 2, v111));
    if ((v112 & 1) == 0)
      v299 &= 0xFFFFFFFFFFFFFFF8;
  }
  v113 = *((_QWORD *)this + 37);
  v300 = v113;
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 2, v114));
    if ((v115 & 1) == 0)
      v300 &= 0xFFFFFFFFFFFFFFF8;
  }
  v116 = *((_QWORD *)this + 38);
  v301 = v116;
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 2, v117));
    if ((v118 & 1) == 0)
      v301 &= 0xFFFFFFFFFFFFFFF8;
  }
  v119 = *((_QWORD *)this + 39);
  v302 = v119;
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 2, v120));
    if ((v121 & 1) == 0)
      v302 &= 0xFFFFFFFFFFFFFFF8;
  }
  v122 = *((_QWORD *)this + 40);
  v303 = v122;
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 2, v123));
    if ((v124 & 1) == 0)
      v303 &= 0xFFFFFFFFFFFFFFF8;
  }
  v125 = *((_QWORD *)this + 41);
  v304 = v125;
  if ((v125 & 7) != 0)
  {
    v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stxr(v127 + 2, v126));
    if ((v127 & 1) == 0)
      v304 &= 0xFFFFFFFFFFFFFFF8;
  }
  v128 = *((_QWORD *)this + 42);
  v305 = v128;
  if ((v128 & 7) != 0)
  {
    v129 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stxr(v130 + 2, v129));
    if ((v130 & 1) == 0)
      v305 &= 0xFFFFFFFFFFFFFFF8;
  }
  v131 = *((_QWORD *)this + 43);
  v306 = v131;
  if ((v131 & 7) != 0)
  {
    v132 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 2, v132));
    if ((v133 & 1) == 0)
      v306 &= 0xFFFFFFFFFFFFFFF8;
  }
  v134 = *((_QWORD *)this + 44);
  v307 = v134;
  if ((v134 & 7) != 0)
  {
    v135 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 2, v135));
    if ((v136 & 1) == 0)
      v307 &= 0xFFFFFFFFFFFFFFF8;
  }
  v137 = *((_QWORD *)this + 45);
  v308 = v137;
  if ((v137 & 7) != 0)
  {
    v138 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stxr(v139 + 2, v138));
    if ((v139 & 1) == 0)
      v308 &= 0xFFFFFFFFFFFFFFF8;
  }
  v140 = *((_QWORD *)this + 46);
  v309 = v140;
  if ((v140 & 7) != 0)
  {
    v141 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 2, v141));
    if ((v142 & 1) == 0)
      v309 &= 0xFFFFFFFFFFFFFFF8;
  }
  v143 = *((_QWORD *)this + 47);
  v310 = v143;
  if ((v143 & 7) != 0)
  {
    v144 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 2, v144));
    if ((v145 & 1) == 0)
      v310 &= 0xFFFFFFFFFFFFFFF8;
  }
  v146 = *((_QWORD *)this + 48);
  v311 = v146;
  if ((v146 & 7) != 0)
  {
    v147 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
    do
      v148 = __ldxr(v147);
    while (__stxr(v148 + 2, v147));
    if ((v148 & 1) == 0)
      v311 &= 0xFFFFFFFFFFFFFFF8;
  }
  v149 = *((_QWORD *)this + 49);
  v312 = v149;
  if ((v149 & 7) != 0)
  {
    v150 = (unsigned int *)(v149 & 0xFFFFFFFFFFFFFFF8);
    do
      v151 = __ldxr(v150);
    while (__stxr(v151 + 2, v150));
    if ((v151 & 1) == 0)
      v312 &= 0xFFFFFFFFFFFFFFF8;
  }
  v152 = *((_QWORD *)this + 50);
  v313 = v152;
  if ((v152 & 7) != 0)
  {
    v153 = (unsigned int *)(v152 & 0xFFFFFFFFFFFFFFF8);
    do
      v154 = __ldxr(v153);
    while (__stxr(v154 + 2, v153));
    if ((v154 & 1) == 0)
      v313 &= 0xFFFFFFFFFFFFFFF8;
  }
  v155 = *((_QWORD *)this + 51);
  v314 = v155;
  if ((v155 & 7) != 0)
  {
    v156 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
    do
      v157 = __ldxr(v156);
    while (__stxr(v157 + 2, v156));
    if ((v157 & 1) == 0)
      v314 &= 0xFFFFFFFFFFFFFFF8;
  }
  v158 = *((_QWORD *)this + 52);
  v315 = v158;
  if ((v158 & 7) != 0)
  {
    v159 = (unsigned int *)(v158 & 0xFFFFFFFFFFFFFFF8);
    do
      v160 = __ldxr(v159);
    while (__stxr(v160 + 2, v159));
    if ((v160 & 1) == 0)
      v315 &= 0xFFFFFFFFFFFFFFF8;
  }
  v161 = *((_QWORD *)this + 53);
  v316 = v161;
  if ((v161 & 7) != 0)
  {
    v162 = (unsigned int *)(v161 & 0xFFFFFFFFFFFFFFF8);
    do
      v163 = __ldxr(v162);
    while (__stxr(v163 + 2, v162));
    if ((v163 & 1) == 0)
      v316 &= 0xFFFFFFFFFFFFFFF8;
  }
  v164 = *((_QWORD *)this + 54);
  v317 = v164;
  if ((v164 & 7) != 0)
  {
    v165 = (unsigned int *)(v164 & 0xFFFFFFFFFFFFFFF8);
    do
      v166 = __ldxr(v165);
    while (__stxr(v166 + 2, v165));
    if ((v166 & 1) == 0)
      v317 &= 0xFFFFFFFFFFFFFFF8;
  }
  v167 = *((_QWORD *)this + 55);
  v318 = v167;
  if ((v167 & 7) != 0)
  {
    v168 = (unsigned int *)(v167 & 0xFFFFFFFFFFFFFFF8);
    do
      v169 = __ldxr(v168);
    while (__stxr(v169 + 2, v168));
    if ((v169 & 1) == 0)
      v318 &= 0xFFFFFFFFFFFFFFF8;
  }
  v170 = *((_QWORD *)this + 56);
  v319 = v170;
  if ((v170 & 7) != 0)
  {
    v171 = (unsigned int *)(v170 & 0xFFFFFFFFFFFFFFF8);
    do
      v172 = __ldxr(v171);
    while (__stxr(v172 + 2, v171));
    if ((v172 & 1) == 0)
      v319 &= 0xFFFFFFFFFFFFFFF8;
  }
  v173 = *((_QWORD *)this + 57);
  v320 = v173;
  if ((v173 & 7) != 0)
  {
    v174 = (unsigned int *)(v173 & 0xFFFFFFFFFFFFFFF8);
    do
      v175 = __ldxr(v174);
    while (__stxr(v175 + 2, v174));
    if ((v175 & 1) == 0)
      v320 &= 0xFFFFFFFFFFFFFFF8;
  }
  v176 = *((_QWORD *)this + 58);
  v321 = v176;
  if ((v176 & 7) != 0)
  {
    v177 = (unsigned int *)(v176 & 0xFFFFFFFFFFFFFFF8);
    do
      v178 = __ldxr(v177);
    while (__stxr(v178 + 2, v177));
    if ((v178 & 1) == 0)
      v321 &= 0xFFFFFFFFFFFFFFF8;
  }
  v179 = *((_QWORD *)this + 59);
  v322 = v179;
  if ((v179 & 7) != 0)
  {
    v180 = (unsigned int *)(v179 & 0xFFFFFFFFFFFFFFF8);
    do
      v181 = __ldxr(v180);
    while (__stxr(v181 + 2, v180));
    if ((v181 & 1) == 0)
      v322 &= 0xFFFFFFFFFFFFFFF8;
  }
  v182 = *((_QWORD *)this + 60);
  v323 = v182;
  if ((v182 & 7) != 0)
  {
    v183 = (unsigned int *)(v182 & 0xFFFFFFFFFFFFFFF8);
    do
      v184 = __ldxr(v183);
    while (__stxr(v184 + 2, v183));
    if ((v184 & 1) == 0)
      v323 &= 0xFFFFFFFFFFFFFFF8;
  }
  v185 = *((_QWORD *)this + 61);
  v324 = v185;
  if ((v185 & 7) != 0)
  {
    v186 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
    do
      v187 = __ldxr(v186);
    while (__stxr(v187 + 2, v186));
    if ((v187 & 1) == 0)
      v324 &= 0xFFFFFFFFFFFFFFF8;
  }
  v188 = *((_QWORD *)this + 62);
  v325 = v188;
  if ((v188 & 7) != 0)
  {
    v189 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFFFF8);
    do
      v190 = __ldxr(v189);
    while (__stxr(v190 + 2, v189));
    if ((v190 & 1) == 0)
      v325 &= 0xFFFFFFFFFFFFFFF8;
  }
  v191 = *((_QWORD *)this + 63);
  v326 = v191;
  if ((v191 & 7) != 0)
  {
    v192 = (unsigned int *)(v191 & 0xFFFFFFFFFFFFFFF8);
    do
      v193 = __ldxr(v192);
    while (__stxr(v193 + 2, v192));
    if ((v193 & 1) == 0)
      v326 &= 0xFFFFFFFFFFFFFFF8;
  }
  v194 = *((_QWORD *)this + 64);
  v327 = v194;
  if ((v194 & 7) != 0)
  {
    v195 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
    do
      v196 = __ldxr(v195);
    while (__stxr(v196 + 2, v195));
    if ((v196 & 1) == 0)
      v327 &= 0xFFFFFFFFFFFFFFF8;
  }
  v197 = *((_QWORD *)this + 65);
  v328 = v197;
  if ((v197 & 7) != 0)
  {
    v198 = (unsigned int *)(v197 & 0xFFFFFFFFFFFFFFF8);
    do
      v199 = __ldxr(v198);
    while (__stxr(v199 + 2, v198));
    if ((v199 & 1) == 0)
      v328 &= 0xFFFFFFFFFFFFFFF8;
  }
  v200 = *((_QWORD *)this + 66);
  v329 = v200;
  if ((v200 & 7) != 0)
  {
    v201 = (unsigned int *)(v200 & 0xFFFFFFFFFFFFFFF8);
    do
      v202 = __ldxr(v201);
    while (__stxr(v202 + 2, v201));
    if ((v202 & 1) == 0)
      v329 &= 0xFFFFFFFFFFFFFFF8;
  }
  v203 = *((_QWORD *)this + 67);
  v330 = v203;
  if ((v203 & 7) != 0)
  {
    v204 = (unsigned int *)(v203 & 0xFFFFFFFFFFFFFFF8);
    do
      v205 = __ldxr(v204);
    while (__stxr(v205 + 2, v204));
    if ((v205 & 1) == 0)
      v330 &= 0xFFFFFFFFFFFFFFF8;
  }
  v206 = *((_QWORD *)this + 68);
  v331 = v206;
  if ((v206 & 7) != 0)
  {
    v207 = (unsigned int *)(v206 & 0xFFFFFFFFFFFFFFF8);
    do
      v208 = __ldxr(v207);
    while (__stxr(v208 + 2, v207));
    if ((v208 & 1) == 0)
      v331 &= 0xFFFFFFFFFFFFFFF8;
  }
  v209 = *((_QWORD *)this + 69);
  v332 = v209;
  if ((v209 & 7) != 0)
  {
    v210 = (unsigned int *)(v209 & 0xFFFFFFFFFFFFFFF8);
    do
      v211 = __ldxr(v210);
    while (__stxr(v211 + 2, v210));
    if ((v211 & 1) == 0)
      v332 &= 0xFFFFFFFFFFFFFFF8;
  }
  v212 = *((_QWORD *)this + 70);
  v333 = v212;
  if ((v212 & 7) != 0)
  {
    v213 = (unsigned int *)(v212 & 0xFFFFFFFFFFFFFFF8);
    do
      v214 = __ldxr(v213);
    while (__stxr(v214 + 2, v213));
    if ((v214 & 1) == 0)
      v333 &= 0xFFFFFFFFFFFFFFF8;
  }
  v215 = *((_QWORD *)this + 71);
  v334 = v215;
  if ((v215 & 7) != 0)
  {
    v216 = (unsigned int *)(v215 & 0xFFFFFFFFFFFFFFF8);
    do
      v217 = __ldxr(v216);
    while (__stxr(v217 + 2, v216));
    if ((v217 & 1) == 0)
      v334 &= 0xFFFFFFFFFFFFFFF8;
  }
  v218 = *((_QWORD *)this + 72);
  v335 = v218;
  if ((v218 & 7) != 0)
  {
    v219 = (unsigned int *)(v218 & 0xFFFFFFFFFFFFFFF8);
    do
      v220 = __ldxr(v219);
    while (__stxr(v220 + 2, v219));
    if ((v220 & 1) == 0)
      v335 &= 0xFFFFFFFFFFFFFFF8;
  }
  v221 = *((_QWORD *)this + 73);
  v336 = v221;
  if ((v221 & 7) != 0)
  {
    v222 = (unsigned int *)(v221 & 0xFFFFFFFFFFFFFFF8);
    do
      v223 = __ldxr(v222);
    while (__stxr(v223 + 2, v222));
    if ((v223 & 1) == 0)
      v336 &= 0xFFFFFFFFFFFFFFF8;
  }
  v224 = *((_QWORD *)this + 74);
  v337 = v224;
  if ((v224 & 7) != 0)
  {
    v225 = (unsigned int *)(v224 & 0xFFFFFFFFFFFFFFF8);
    do
      v226 = __ldxr(v225);
    while (__stxr(v226 + 2, v225));
    if ((v226 & 1) == 0)
      v337 &= 0xFFFFFFFFFFFFFFF8;
  }
  v227 = *((_QWORD *)this + 75);
  v338 = v227;
  if ((v227 & 7) != 0)
  {
    v228 = (unsigned int *)(v227 & 0xFFFFFFFFFFFFFFF8);
    do
      v229 = __ldxr(v228);
    while (__stxr(v229 + 2, v228));
    if ((v229 & 1) == 0)
      v338 &= 0xFFFFFFFFFFFFFFF8;
  }
  v230 = *((_QWORD *)this + 76);
  v339 = v230;
  if ((v230 & 7) != 0)
  {
    v231 = (unsigned int *)(v230 & 0xFFFFFFFFFFFFFFF8);
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 2, v231));
    if ((v232 & 1) == 0)
      v339 &= 0xFFFFFFFFFFFFFFF8;
  }
  v233 = *((_QWORD *)this + 77);
  v340 = v233;
  if ((v233 & 7) != 0)
  {
    v234 = (unsigned int *)(v233 & 0xFFFFFFFFFFFFFFF8);
    do
      v235 = __ldxr(v234);
    while (__stxr(v235 + 2, v234));
    if ((v235 & 1) == 0)
      v340 &= 0xFFFFFFFFFFFFFFF8;
  }
  v236 = *((_QWORD *)this + 78);
  v341 = v236;
  if ((v236 & 7) != 0)
  {
    v237 = (unsigned int *)(v236 & 0xFFFFFFFFFFFFFFF8);
    do
      v238 = __ldxr(v237);
    while (__stxr(v238 + 2, v237));
    if ((v238 & 1) == 0)
      v341 &= 0xFFFFFFFFFFFFFFF8;
  }
  v239 = *((_QWORD *)this + 79);
  v342 = v239;
  if ((v239 & 7) != 0)
  {
    v240 = (unsigned int *)(v239 & 0xFFFFFFFFFFFFFFF8);
    do
      v241 = __ldxr(v240);
    while (__stxr(v241 + 2, v240));
    if ((v241 & 1) == 0)
      v342 &= 0xFFFFFFFFFFFFFFF8;
  }
  v242 = *((_QWORD *)this + 80);
  v343 = v242;
  if ((v242 & 7) != 0)
  {
    v243 = (unsigned int *)(v242 & 0xFFFFFFFFFFFFFFF8);
    do
      v244 = __ldxr(v243);
    while (__stxr(v244 + 2, v243));
    if ((v244 & 1) == 0)
      v343 &= 0xFFFFFFFFFFFFFFF8;
  }
  v245 = *((_QWORD *)this + 81);
  v344 = v245;
  if ((v245 & 7) != 0)
  {
    v246 = (unsigned int *)(v245 & 0xFFFFFFFFFFFFFFF8);
    do
      v247 = __ldxr(v246);
    while (__stxr(v247 + 2, v246));
    if ((v247 & 1) == 0)
      v344 &= 0xFFFFFFFFFFFFFFF8;
  }
  v248 = *((_QWORD *)this + 82);
  v345 = v248;
  if ((v248 & 7) != 0)
  {
    v249 = (unsigned int *)(v248 & 0xFFFFFFFFFFFFFFF8);
    do
      v250 = __ldxr(v249);
    while (__stxr(v250 + 2, v249));
    if ((v250 & 1) == 0)
      v345 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 84) = 0;
  *((_QWORD *)this + 85) = 0;
  v251 = operator new(0x298uLL);
  v252 = 0;
  *((_QWORD *)this + 83) = v251;
  *((_QWORD *)this + 84) = v251;
  *((_QWORD *)this + 85) = v251 + 83;
  do
  {
    v253 = *(&v263 + v252);
    *v251 = v253;
    if ((v253 & 7) != 0)
    {
      v254 = (unsigned int *)(v253 & 0xFFFFFFFFFFFFFFF8);
      do
        v255 = __ldxr(v254);
      while (__stxr(v255 + 2, v254));
      if ((v255 & 1) == 0)
        *v251 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v252;
    ++v251;
  }
  while (v252 != 83);
  v256 = &v346;
  *((_QWORD *)this + 84) = v251;
  do
  {
    v258 = *--v256;
    v257 = v258;
    if ((v258 & 7) != 0)
    {
      v259 = (unsigned int *)(v257 & 0xFFFFFFFFFFFFFFF8);
      do
        v260 = __ldxr(v259);
      while (__stlxr(v260 - 2, v259));
    }
  }
  while (v256 != &v263);
  return this;
}

void sub_20C607940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,_QWORD *a33,_QWORD *a34,_QWORD *a35,_QWORD *a36,_QWORD *a37,_QWORD *a38,_QWORD *a39,_QWORD *a40,_QWORD *a41,_QWORD *a42,_QWORD *a43,_QWORD *a44,_QWORD *a45,_QWORD *a46,_QWORD *a47,_QWORD *a48,_QWORD *a49,_QWORD *a50,_QWORD *a51,_QWORD *a52,_QWORD *a53,_QWORD *a54,_QWORD *a55,_QWORD *a56,_QWORD *a57,_QWORD *a58,_QWORD *a59,_QWORD *a60,_QWORD *a61,_QWORD *a62,_QWORD *a63)
{
  _QWORD *a64;
  _QWORD *a65;
  _QWORD *a66;
  _QWORD *a67;
  _QWORD *a68;
  _QWORD *a69;
  _QWORD *a70;
  _QWORD *a71;
  _QWORD *a72;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int *v153;
  unsigned int v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int *v163;
  unsigned int v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int *v171;
  unsigned int v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int *v175;
  unsigned int v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int *v179;
  unsigned int v180;
  unsigned int *v181;
  unsigned int v182;
  unsigned int *v183;
  unsigned int v184;
  unsigned int *v185;
  unsigned int v186;
  unsigned int *v187;
  unsigned int v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int *v191;
  unsigned int v192;
  unsigned int *v193;
  unsigned int v194;
  unsigned int *v195;
  unsigned int v196;
  unsigned int *v197;
  unsigned int v198;
  unsigned int *v199;
  unsigned int v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int *v205;
  unsigned int v206;
  unsigned int *v207;
  unsigned int v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int *v211;
  unsigned int v212;
  unsigned int *v213;
  unsigned int v214;
  unsigned int *v215;
  unsigned int v216;
  unsigned int *v217;
  unsigned int v218;
  unsigned int *v219;
  unsigned int v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int *v223;
  unsigned int v224;
  unsigned int *v225;
  unsigned int v226;
  unsigned int *v227;
  unsigned int v228;
  uint64_t v229;
  unsigned int *v230;
  unsigned int v231;
  uint64_t v232;
  unsigned int *v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int *v236;
  unsigned int v237;
  uint64_t v238;
  unsigned int *v239;
  unsigned int v240;
  uint64_t v241;
  unsigned int *v242;
  unsigned int v243;
  uint64_t v244;
  unsigned int *v245;
  unsigned int v246;
  uint64_t v247;
  unsigned int *v248;
  unsigned int v249;
  uint64_t v250;
  unsigned int *v251;
  unsigned int v252;
  uint64_t v253;
  unsigned int *v254;
  unsigned int v255;
  uint64_t v256;
  unsigned int *v257;
  unsigned int v258;
  uint64_t v259;
  unsigned int *v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int v263;

  sub_20BEEB2B8((void ***)&STACK[0x258]);
  v82 = &STACK[0x500];
  while (1)
  {
    v84 = *--v82;
    v83 = v84;
    if ((v84 & 7) != 0)
    {
      v85 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
      do
        v86 = __ldxr(v85);
      while (__stlxr(v86 - 2, v85));
    }
    if (v82 == &STACK[0x268])
    {
      if ((*v73 & 7) != 0)
      {
        v87 = (unsigned int *)(*v73 & 0xFFFFFFFFFFFFFFF8);
        do
          v88 = __ldxr(v87);
        while (__stlxr(v88 - 2, v87));
      }
      if ((*v81 & 7) != 0)
      {
        v89 = (unsigned int *)(*v81 & 0xFFFFFFFFFFFFFFF8);
        do
          v90 = __ldxr(v89);
        while (__stlxr(v90 - 2, v89));
      }
      if ((*v80 & 7) != 0)
      {
        v91 = (unsigned int *)(*v80 & 0xFFFFFFFFFFFFFFF8);
        do
          v92 = __ldxr(v91);
        while (__stlxr(v92 - 2, v91));
      }
      if ((*v79 & 7) != 0)
      {
        v93 = (unsigned int *)(*v79 & 0xFFFFFFFFFFFFFFF8);
        do
          v94 = __ldxr(v93);
        while (__stlxr(v94 - 2, v93));
      }
      if ((*v78 & 7) != 0)
      {
        v95 = (unsigned int *)(*v78 & 0xFFFFFFFFFFFFFFF8);
        do
          v96 = __ldxr(v95);
        while (__stlxr(v96 - 2, v95));
      }
      if ((*v77 & 7) != 0)
      {
        v97 = (unsigned int *)(*v77 & 0xFFFFFFFFFFFFFFF8);
        do
          v98 = __ldxr(v97);
        while (__stlxr(v98 - 2, v97));
      }
      if ((*v76 & 7) != 0)
      {
        v99 = (unsigned int *)(*v76 & 0xFFFFFFFFFFFFFFF8);
        do
          v100 = __ldxr(v99);
        while (__stlxr(v100 - 2, v99));
      }
      if ((*v75 & 7) != 0)
      {
        v101 = (unsigned int *)(*v75 & 0xFFFFFFFFFFFFFFF8);
        do
          v102 = __ldxr(v101);
        while (__stlxr(v102 - 2, v101));
      }
      if ((*v74 & 7) != 0)
      {
        v103 = (unsigned int *)(*v74 & 0xFFFFFFFFFFFFFFF8);
        do
          v104 = __ldxr(v103);
        while (__stlxr(v104 - 2, v103));
      }
      if ((*a11 & 7) != 0)
      {
        v105 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v106 = __ldxr(v105);
        while (__stlxr(v106 - 2, v105));
      }
      if ((*a12 & 7) != 0)
      {
        v107 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v108 = __ldxr(v107);
        while (__stlxr(v108 - 2, v107));
      }
      if ((*a13 & 7) != 0)
      {
        v109 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v110 = __ldxr(v109);
        while (__stlxr(v110 - 2, v109));
      }
      if ((*a14 & 7) != 0)
      {
        v111 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v112 = __ldxr(v111);
        while (__stlxr(v112 - 2, v111));
      }
      if ((*a15 & 7) != 0)
      {
        v113 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v114 = __ldxr(v113);
        while (__stlxr(v114 - 2, v113));
      }
      if ((*a16 & 7) != 0)
      {
        v115 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v116 = __ldxr(v115);
        while (__stlxr(v116 - 2, v115));
      }
      if ((*a17 & 7) != 0)
      {
        v117 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v118 = __ldxr(v117);
        while (__stlxr(v118 - 2, v117));
      }
      if ((*a18 & 7) != 0)
      {
        v119 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v120 = __ldxr(v119);
        while (__stlxr(v120 - 2, v119));
      }
      if ((*a19 & 7) != 0)
      {
        v121 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v122 = __ldxr(v121);
        while (__stlxr(v122 - 2, v121));
      }
      if ((*a20 & 7) != 0)
      {
        v123 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v124 = __ldxr(v123);
        while (__stlxr(v124 - 2, v123));
      }
      if ((*a21 & 7) != 0)
      {
        v125 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v126 = __ldxr(v125);
        while (__stlxr(v126 - 2, v125));
      }
      if ((*a22 & 7) != 0)
      {
        v127 = (unsigned int *)(*a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v128 = __ldxr(v127);
        while (__stlxr(v128 - 2, v127));
      }
      if ((*a23 & 7) != 0)
      {
        v129 = (unsigned int *)(*a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v130 = __ldxr(v129);
        while (__stlxr(v130 - 2, v129));
      }
      if ((*a24 & 7) != 0)
      {
        v131 = (unsigned int *)(*a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v132 = __ldxr(v131);
        while (__stlxr(v132 - 2, v131));
      }
      if ((*a25 & 7) != 0)
      {
        v133 = (unsigned int *)(*a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v134 = __ldxr(v133);
        while (__stlxr(v134 - 2, v133));
      }
      if ((*a26 & 7) != 0)
      {
        v135 = (unsigned int *)(*a26 & 0xFFFFFFFFFFFFFFF8);
        do
          v136 = __ldxr(v135);
        while (__stlxr(v136 - 2, v135));
      }
      if ((*a27 & 7) != 0)
      {
        v137 = (unsigned int *)(*a27 & 0xFFFFFFFFFFFFFFF8);
        do
          v138 = __ldxr(v137);
        while (__stlxr(v138 - 2, v137));
      }
      if ((*a28 & 7) != 0)
      {
        v139 = (unsigned int *)(*a28 & 0xFFFFFFFFFFFFFFF8);
        do
          v140 = __ldxr(v139);
        while (__stlxr(v140 - 2, v139));
      }
      if ((*a29 & 7) != 0)
      {
        v141 = (unsigned int *)(*a29 & 0xFFFFFFFFFFFFFFF8);
        do
          v142 = __ldxr(v141);
        while (__stlxr(v142 - 2, v141));
      }
      if ((*a30 & 7) != 0)
      {
        v143 = (unsigned int *)(*a30 & 0xFFFFFFFFFFFFFFF8);
        do
          v144 = __ldxr(v143);
        while (__stlxr(v144 - 2, v143));
      }
      if ((*a31 & 7) != 0)
      {
        v145 = (unsigned int *)(*a31 & 0xFFFFFFFFFFFFFFF8);
        do
          v146 = __ldxr(v145);
        while (__stlxr(v146 - 2, v145));
      }
      if ((*a32 & 7) != 0)
      {
        v147 = (unsigned int *)(*a32 & 0xFFFFFFFFFFFFFFF8);
        do
          v148 = __ldxr(v147);
        while (__stlxr(v148 - 2, v147));
      }
      if ((*a33 & 7) != 0)
      {
        v149 = (unsigned int *)(*a33 & 0xFFFFFFFFFFFFFFF8);
        do
          v150 = __ldxr(v149);
        while (__stlxr(v150 - 2, v149));
      }
      if ((*a34 & 7) != 0)
      {
        v151 = (unsigned int *)(*a34 & 0xFFFFFFFFFFFFFFF8);
        do
          v152 = __ldxr(v151);
        while (__stlxr(v152 - 2, v151));
      }
      if ((*a35 & 7) != 0)
      {
        v153 = (unsigned int *)(*a35 & 0xFFFFFFFFFFFFFFF8);
        do
          v154 = __ldxr(v153);
        while (__stlxr(v154 - 2, v153));
      }
      if ((*a36 & 7) != 0)
      {
        v155 = (unsigned int *)(*a36 & 0xFFFFFFFFFFFFFFF8);
        do
          v156 = __ldxr(v155);
        while (__stlxr(v156 - 2, v155));
      }
      if ((*a37 & 7) != 0)
      {
        v157 = (unsigned int *)(*a37 & 0xFFFFFFFFFFFFFFF8);
        do
          v158 = __ldxr(v157);
        while (__stlxr(v158 - 2, v157));
      }
      if ((*a38 & 7) != 0)
      {
        v159 = (unsigned int *)(*a38 & 0xFFFFFFFFFFFFFFF8);
        do
          v160 = __ldxr(v159);
        while (__stlxr(v160 - 2, v159));
      }
      if ((*a39 & 7) != 0)
      {
        v161 = (unsigned int *)(*a39 & 0xFFFFFFFFFFFFFFF8);
        do
          v162 = __ldxr(v161);
        while (__stlxr(v162 - 2, v161));
      }
      if ((*a40 & 7) != 0)
      {
        v163 = (unsigned int *)(*a40 & 0xFFFFFFFFFFFFFFF8);
        do
          v164 = __ldxr(v163);
        while (__stlxr(v164 - 2, v163));
      }
      if ((*a41 & 7) != 0)
      {
        v165 = (unsigned int *)(*a41 & 0xFFFFFFFFFFFFFFF8);
        do
          v166 = __ldxr(v165);
        while (__stlxr(v166 - 2, v165));
      }
      if ((*a42 & 7) != 0)
      {
        v167 = (unsigned int *)(*a42 & 0xFFFFFFFFFFFFFFF8);
        do
          v168 = __ldxr(v167);
        while (__stlxr(v168 - 2, v167));
      }
      if ((*a43 & 7) != 0)
      {
        v169 = (unsigned int *)(*a43 & 0xFFFFFFFFFFFFFFF8);
        do
          v170 = __ldxr(v169);
        while (__stlxr(v170 - 2, v169));
      }
      if ((*a44 & 7) != 0)
      {
        v171 = (unsigned int *)(*a44 & 0xFFFFFFFFFFFFFFF8);
        do
          v172 = __ldxr(v171);
        while (__stlxr(v172 - 2, v171));
      }
      if ((*a45 & 7) != 0)
      {
        v173 = (unsigned int *)(*a45 & 0xFFFFFFFFFFFFFFF8);
        do
          v174 = __ldxr(v173);
        while (__stlxr(v174 - 2, v173));
      }
      if ((*a46 & 7) != 0)
      {
        v175 = (unsigned int *)(*a46 & 0xFFFFFFFFFFFFFFF8);
        do
          v176 = __ldxr(v175);
        while (__stlxr(v176 - 2, v175));
      }
      if ((*a47 & 7) != 0)
      {
        v177 = (unsigned int *)(*a47 & 0xFFFFFFFFFFFFFFF8);
        do
          v178 = __ldxr(v177);
        while (__stlxr(v178 - 2, v177));
      }
      if ((*a48 & 7) != 0)
      {
        v179 = (unsigned int *)(*a48 & 0xFFFFFFFFFFFFFFF8);
        do
          v180 = __ldxr(v179);
        while (__stlxr(v180 - 2, v179));
      }
      if ((*a49 & 7) != 0)
      {
        v181 = (unsigned int *)(*a49 & 0xFFFFFFFFFFFFFFF8);
        do
          v182 = __ldxr(v181);
        while (__stlxr(v182 - 2, v181));
      }
      if ((*a50 & 7) != 0)
      {
        v183 = (unsigned int *)(*a50 & 0xFFFFFFFFFFFFFFF8);
        do
          v184 = __ldxr(v183);
        while (__stlxr(v184 - 2, v183));
      }
      if ((*a51 & 7) != 0)
      {
        v185 = (unsigned int *)(*a51 & 0xFFFFFFFFFFFFFFF8);
        do
          v186 = __ldxr(v185);
        while (__stlxr(v186 - 2, v185));
      }
      if ((*a52 & 7) != 0)
      {
        v187 = (unsigned int *)(*a52 & 0xFFFFFFFFFFFFFFF8);
        do
          v188 = __ldxr(v187);
        while (__stlxr(v188 - 2, v187));
      }
      if ((*a53 & 7) != 0)
      {
        v189 = (unsigned int *)(*a53 & 0xFFFFFFFFFFFFFFF8);
        do
          v190 = __ldxr(v189);
        while (__stlxr(v190 - 2, v189));
      }
      if ((*a54 & 7) != 0)
      {
        v191 = (unsigned int *)(*a54 & 0xFFFFFFFFFFFFFFF8);
        do
          v192 = __ldxr(v191);
        while (__stlxr(v192 - 2, v191));
      }
      if ((*a55 & 7) != 0)
      {
        v193 = (unsigned int *)(*a55 & 0xFFFFFFFFFFFFFFF8);
        do
          v194 = __ldxr(v193);
        while (__stlxr(v194 - 2, v193));
      }
      if ((*a56 & 7) != 0)
      {
        v195 = (unsigned int *)(*a56 & 0xFFFFFFFFFFFFFFF8);
        do
          v196 = __ldxr(v195);
        while (__stlxr(v196 - 2, v195));
      }
      if ((*a57 & 7) != 0)
      {
        v197 = (unsigned int *)(*a57 & 0xFFFFFFFFFFFFFFF8);
        do
          v198 = __ldxr(v197);
        while (__stlxr(v198 - 2, v197));
      }
      if ((*a58 & 7) != 0)
      {
        v199 = (unsigned int *)(*a58 & 0xFFFFFFFFFFFFFFF8);
        do
          v200 = __ldxr(v199);
        while (__stlxr(v200 - 2, v199));
      }
      if ((*a59 & 7) != 0)
      {
        v201 = (unsigned int *)(*a59 & 0xFFFFFFFFFFFFFFF8);
        do
          v202 = __ldxr(v201);
        while (__stlxr(v202 - 2, v201));
      }
      if ((*a60 & 7) != 0)
      {
        v203 = (unsigned int *)(*a60 & 0xFFFFFFFFFFFFFFF8);
        do
          v204 = __ldxr(v203);
        while (__stlxr(v204 - 2, v203));
      }
      if ((*a61 & 7) != 0)
      {
        v205 = (unsigned int *)(*a61 & 0xFFFFFFFFFFFFFFF8);
        do
          v206 = __ldxr(v205);
        while (__stlxr(v206 - 2, v205));
      }
      if ((*a62 & 7) != 0)
      {
        v207 = (unsigned int *)(*a62 & 0xFFFFFFFFFFFFFFF8);
        do
          v208 = __ldxr(v207);
        while (__stlxr(v208 - 2, v207));
      }
      if ((*a63 & 7) != 0)
      {
        v209 = (unsigned int *)(*a63 & 0xFFFFFFFFFFFFFFF8);
        do
          v210 = __ldxr(v209);
        while (__stlxr(v210 - 2, v209));
      }
      if ((*a64 & 7) != 0)
      {
        v211 = (unsigned int *)(*a64 & 0xFFFFFFFFFFFFFFF8);
        do
          v212 = __ldxr(v211);
        while (__stlxr(v212 - 2, v211));
      }
      if ((*a65 & 7) != 0)
      {
        v213 = (unsigned int *)(*a65 & 0xFFFFFFFFFFFFFFF8);
        do
          v214 = __ldxr(v213);
        while (__stlxr(v214 - 2, v213));
      }
      if ((*a66 & 7) != 0)
      {
        v215 = (unsigned int *)(*a66 & 0xFFFFFFFFFFFFFFF8);
        do
          v216 = __ldxr(v215);
        while (__stlxr(v216 - 2, v215));
      }
      if ((*a67 & 7) != 0)
      {
        v217 = (unsigned int *)(*a67 & 0xFFFFFFFFFFFFFFF8);
        do
          v218 = __ldxr(v217);
        while (__stlxr(v218 - 2, v217));
      }
      if ((*a68 & 7) != 0)
      {
        v219 = (unsigned int *)(*a68 & 0xFFFFFFFFFFFFFFF8);
        do
          v220 = __ldxr(v219);
        while (__stlxr(v220 - 2, v219));
      }
      if ((*a69 & 7) != 0)
      {
        v221 = (unsigned int *)(*a69 & 0xFFFFFFFFFFFFFFF8);
        do
          v222 = __ldxr(v221);
        while (__stlxr(v222 - 2, v221));
      }
      if ((*a70 & 7) != 0)
      {
        v223 = (unsigned int *)(*a70 & 0xFFFFFFFFFFFFFFF8);
        do
          v224 = __ldxr(v223);
        while (__stlxr(v224 - 2, v223));
      }
      if ((*a71 & 7) != 0)
      {
        v225 = (unsigned int *)(*a71 & 0xFFFFFFFFFFFFFFF8);
        do
          v226 = __ldxr(v225);
        while (__stlxr(v226 - 2, v225));
      }
      if ((*a72 & 7) != 0)
      {
        v227 = (unsigned int *)(*a72 & 0xFFFFFFFFFFFFFFF8);
        do
          v228 = __ldxr(v227);
        while (__stlxr(v228 - 2, v227));
      }
      v229 = *(_QWORD *)STACK[0x200];
      if ((v229 & 7) != 0)
      {
        v230 = (unsigned int *)(v229 & 0xFFFFFFFFFFFFFFF8);
        do
          v231 = __ldxr(v230);
        while (__stlxr(v231 - 2, v230));
      }
      v232 = *(_QWORD *)STACK[0x208];
      if ((v232 & 7) != 0)
      {
        v233 = (unsigned int *)(v232 & 0xFFFFFFFFFFFFFFF8);
        do
          v234 = __ldxr(v233);
        while (__stlxr(v234 - 2, v233));
      }
      v235 = *(_QWORD *)STACK[0x210];
      if ((v235 & 7) != 0)
      {
        v236 = (unsigned int *)(v235 & 0xFFFFFFFFFFFFFFF8);
        do
          v237 = __ldxr(v236);
        while (__stlxr(v237 - 2, v236));
      }
      v238 = *(_QWORD *)STACK[0x218];
      if ((v238 & 7) != 0)
      {
        v239 = (unsigned int *)(v238 & 0xFFFFFFFFFFFFFFF8);
        do
          v240 = __ldxr(v239);
        while (__stlxr(v240 - 2, v239));
      }
      v241 = *(_QWORD *)STACK[0x220];
      if ((v241 & 7) != 0)
      {
        v242 = (unsigned int *)(v241 & 0xFFFFFFFFFFFFFFF8);
        do
          v243 = __ldxr(v242);
        while (__stlxr(v243 - 2, v242));
      }
      v244 = *(_QWORD *)STACK[0x228];
      if ((v244 & 7) != 0)
      {
        v245 = (unsigned int *)(v244 & 0xFFFFFFFFFFFFFFF8);
        do
          v246 = __ldxr(v245);
        while (__stlxr(v246 - 2, v245));
      }
      v247 = *(_QWORD *)STACK[0x230];
      if ((v247 & 7) != 0)
      {
        v248 = (unsigned int *)(v247 & 0xFFFFFFFFFFFFFFF8);
        do
          v249 = __ldxr(v248);
        while (__stlxr(v249 - 2, v248));
      }
      v250 = *(_QWORD *)STACK[0x238];
      if ((v250 & 7) != 0)
      {
        v251 = (unsigned int *)(v250 & 0xFFFFFFFFFFFFFFF8);
        do
          v252 = __ldxr(v251);
        while (__stlxr(v252 - 2, v251));
      }
      v253 = *(_QWORD *)STACK[0x240];
      if ((v253 & 7) != 0)
      {
        v254 = (unsigned int *)(v253 & 0xFFFFFFFFFFFFFFF8);
        do
          v255 = __ldxr(v254);
        while (__stlxr(v255 - 2, v254));
      }
      v256 = *(_QWORD *)STACK[0x248];
      if ((v256 & 7) != 0)
      {
        v257 = (unsigned int *)(v256 & 0xFFFFFFFFFFFFFFF8);
        do
          v258 = __ldxr(v257);
        while (__stlxr(v258 - 2, v257));
      }
      v259 = *(_QWORD *)STACK[0x250];
      if ((v259 & 7) != 0)
      {
        v260 = (unsigned int *)(v259 & 0xFFFFFFFFFFFFFFF8);
        do
          v261 = __ldxr(v260);
        while (__stlxr(v261 - 2, v260));
      }
      if ((*v72 & 7) != 0)
      {
        v262 = (unsigned int *)(*v72 & 0xFFFFFFFFFFFFFFF8);
        do
          v263 = __ldxr(v262);
        while (__stlxr(v263 - 2, v262));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C608548()
{
  JUMPOUT(0x20C607ADCLL);
}

void sub_20C608550()
{
  JUMPOUT(0x20C607B00);
}

void sub_20C608558()
{
  JUMPOUT(0x20C607B24);
}

void sub_20C608560()
{
  JUMPOUT(0x20C607B48);
}

void sub_20C608568()
{
  JUMPOUT(0x20C607B6CLL);
}

void sub_20C608570()
{
  JUMPOUT(0x20C607B90);
}

void sub_20C608578()
{
  JUMPOUT(0x20C607BB4);
}

void sub_20C608580()
{
  JUMPOUT(0x20C607BD8);
}

void sub_20C608588()
{
  JUMPOUT(0x20C607BFCLL);
}

void sub_20C608590()
{
  JUMPOUT(0x20C607C20);
}

void sub_20C608598()
{
  JUMPOUT(0x20C607C44);
}

void sub_20C6085A0()
{
  JUMPOUT(0x20C607C68);
}

void sub_20C6085A8()
{
  JUMPOUT(0x20C607C8CLL);
}

void sub_20C6085B0()
{
  JUMPOUT(0x20C607CB0);
}

void sub_20C6085B8()
{
  JUMPOUT(0x20C607CD4);
}

void sub_20C6085C0()
{
  JUMPOUT(0x20C607CF8);
}

void sub_20C6085C8()
{
  JUMPOUT(0x20C607D1CLL);
}

void sub_20C6085D0()
{
  JUMPOUT(0x20C607D40);
}

void sub_20C6085D8()
{
  JUMPOUT(0x20C607D64);
}

void sub_20C6085E0()
{
  JUMPOUT(0x20C607D88);
}

void sub_20C6085E8()
{
  JUMPOUT(0x20C607DACLL);
}

void sub_20C6085F0()
{
  JUMPOUT(0x20C607DD0);
}

void sub_20C6085F8()
{
  JUMPOUT(0x20C607DF4);
}

void sub_20C608600()
{
  JUMPOUT(0x20C607E18);
}

void sub_20C608608()
{
  JUMPOUT(0x20C607E3CLL);
}

void sub_20C608610()
{
  JUMPOUT(0x20C607E60);
}

void sub_20C608618()
{
  JUMPOUT(0x20C607E84);
}

void sub_20C608620()
{
  JUMPOUT(0x20C607EA8);
}

void sub_20C608628()
{
  JUMPOUT(0x20C607ECCLL);
}

void sub_20C608630()
{
  JUMPOUT(0x20C607EF0);
}

void sub_20C608638()
{
  JUMPOUT(0x20C607F14);
}

void sub_20C608640()
{
  JUMPOUT(0x20C607F38);
}

void sub_20C608648()
{
  JUMPOUT(0x20C607F5CLL);
}

void sub_20C608650()
{
  JUMPOUT(0x20C607F80);
}

void sub_20C608658()
{
  JUMPOUT(0x20C607FA4);
}

void sub_20C608660()
{
  JUMPOUT(0x20C607FC8);
}

void sub_20C608668()
{
  JUMPOUT(0x20C607FECLL);
}

void sub_20C608670()
{
  JUMPOUT(0x20C608010);
}

void sub_20C608678()
{
  JUMPOUT(0x20C608034);
}

void sub_20C608680()
{
  JUMPOUT(0x20C608058);
}

void sub_20C608688()
{
  JUMPOUT(0x20C60807CLL);
}

void sub_20C608690()
{
  JUMPOUT(0x20C6080A0);
}

void sub_20C608698()
{
  JUMPOUT(0x20C6080C4);
}

void sub_20C6086A0()
{
  JUMPOUT(0x20C6080E8);
}

void sub_20C6086A8()
{
  JUMPOUT(0x20C60810CLL);
}

void sub_20C6086B0()
{
  JUMPOUT(0x20C608130);
}

void sub_20C6086B8()
{
  JUMPOUT(0x20C608154);
}

void sub_20C6086C0()
{
  JUMPOUT(0x20C608178);
}

void sub_20C6086C8()
{
  JUMPOUT(0x20C60819CLL);
}

void sub_20C6086D0()
{
  JUMPOUT(0x20C6081C0);
}

void sub_20C6086D8()
{
  JUMPOUT(0x20C6081E4);
}

void sub_20C6086E0()
{
  JUMPOUT(0x20C608208);
}

void sub_20C6086E8()
{
  JUMPOUT(0x20C60822CLL);
}

void sub_20C6086F0()
{
  JUMPOUT(0x20C608250);
}

void sub_20C6086F8()
{
  JUMPOUT(0x20C608274);
}

void sub_20C608700()
{
  JUMPOUT(0x20C608298);
}

void sub_20C608708()
{
  JUMPOUT(0x20C6082BCLL);
}

void sub_20C608710()
{
  JUMPOUT(0x20C6082E0);
}

void sub_20C608718()
{
  JUMPOUT(0x20C608304);
}

void sub_20C608720()
{
  JUMPOUT(0x20C608328);
}

void sub_20C608728()
{
  JUMPOUT(0x20C60834CLL);
}

void sub_20C608730()
{
  JUMPOUT(0x20C608370);
}

void sub_20C608738()
{
  JUMPOUT(0x20C608394);
}

void sub_20C608740()
{
  JUMPOUT(0x20C6083B8);
}

void sub_20C608748()
{
  JUMPOUT(0x20C6083DCLL);
}

void sub_20C608750()
{
  JUMPOUT(0x20C608400);
}

void sub_20C608758()
{
  JUMPOUT(0x20C608424);
}

void sub_20C608760()
{
  JUMPOUT(0x20C608448);
}

void sub_20C608768()
{
  JUMPOUT(0x20C60846CLL);
}

void sub_20C608770()
{
  JUMPOUT(0x20C608490);
}

void sub_20C608778()
{
  JUMPOUT(0x20C6084B4);
}

void sub_20C608780()
{
  JUMPOUT(0x20C6084D8);
}

void sub_20C608788()
{
  JUMPOUT(0x20C6084FCLL);
}

void sub_20C608790()
{
  JUMPOUT(0x20C608520);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::~UsdLuxVolumeLightAPI(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53E980;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdLux/volumeLightAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdLuxVolumeLightAPI pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::Get(cons"
                            "t UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53E980;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C608930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *this)
{
  return 5;
}

uint64_t sub_20C608958(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498B390, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdLuxVolumeLightAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C608B10(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53E980;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53E980;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C608AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C608B10(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498B390, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdLuxVolumeLightAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B398);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B398))
  {
    __cxa_guard_release(&qword_25498B398);
  }
  return &qword_25498B390;
}

void sub_20C608C2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B398);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B3A8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *)__cxa_guard_acquire(&qword_25498B3A8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::_GetStaticTfType(v3);
      byte_25498B3A0 = sub_20C35BD7C((char *)&qword_25498B390, v4, v5);
      __cxa_guard_release(&qword_25498B3A8);
    }
  }
  return byte_25498B3A0;
}

void sub_20C608CA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B3A8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::_GetStaticTfType(this);
  return &qword_25498B390;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498B3C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B3C8))
  {
    qword_25498B3B0 = 0;
    *(_QWORD *)algn_25498B3B8 = 0;
    qword_25498B3C0 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B3B0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B3C8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B3E8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B3E8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C608DD0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B3D0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B3E8);
  }
  if (v1)
    return &qword_25498B3D0;
  else
    return &qword_25498B3B0;
}

void sub_20C608DB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B3E8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C608DD0(uint64_t **a1)
{
  qword_25498B3D8 = 0;
  unk_25498B3E0 = 0;
  qword_25498B3D0 = 0;
  sub_20BFC9A6C((char **)&qword_25498B3D0, ((*(_QWORD *)algn_25498B3B8 - qword_25498B3B0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498B3D0, (_QWORD *)qword_25498B3D8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498B3D0, (_QWORD *)qword_25498B3D8, (uint64_t *)qword_25498B3B0, *(uint64_t **)algn_25498B3B8, (*(_QWORD *)algn_25498B3B8 - qword_25498B3B0) >> 3);
}

void sub_20C608E64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C608E84()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C608F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C608FA8()
{
  void *__p[2];
  char v1;

  sub_20C6098C4();
  sub_20BDDC0E4(__p, "GenerativeProcedural");
  sub_20C6099E4((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C608FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::~UsdProcGenerativeProcedural(pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E9D8;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdProc/generativeProcedural.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdProcGenerativeProcedural pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProced"
                            "ural::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53E9D8;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C609198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498B3F8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498B3F8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498B3F0, "GenerativeProcedural");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498B3F0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B3F8);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498B3F0, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E9D8;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdProc/generativeProcedural.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdProcGenerativeProcedural pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProced"
                            "ural::Define(const UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53E9D8;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C609388(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B3F8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B408);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B408))
  {
    __cxa_guard_release(&qword_25498B408);
  }
  return &qword_25498B400;
}

void sub_20C60942C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B408);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B418);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *)__cxa_guard_acquire(&qword_25498B418);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::_GetStaticTfType(v3);
      byte_25498B410 = sub_20C35BD7C((char *)&qword_25498B400, v4, v5);
      __cxa_guard_release(&qword_25498B418);
    }
  }
  return byte_25498B410;
}

void sub_20C6094A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B418);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *this)
{
  pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::_GetStaticTfType(this);
  return &qword_25498B400;
}

void pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::GetProceduralSystemAttr(pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdProcTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdProcTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdProcTokens);
  if (!v3)
    v3 = sub_20C609A98(&pxrInternal__aapl__pxrReserved__::UsdProcTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, v3, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C609580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::CreateProceduralSystemAttr(pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdProcTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdProcTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdProcTokens);
  if (!v8)
    v8 = sub_20C609A98(&pxrInternal__aapl__pxrReserved__::UsdProcTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, v8, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdProcTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *SchemaAttributeNames;
  uint64_t v12[2];

  v1 = (int)this;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498B438);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B438))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdProcTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdProcTokens);
    if (!v5)
      v5 = sub_20C609A98(&pxrInternal__aapl__pxrReserved__::UsdProcTokens);
    v6 = *(_QWORD *)v5;
    v12[0] = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v12[0] = (uint64_t)v7;
    }
    sub_20C374970(&qword_25498B420, v12, 1uLL);
    if ((v12[0] & 7) != 0)
    {
      v9 = (unsigned int *)(v12[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B420, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B438);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B458);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B458))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)1);
    sub_20C609810((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B440, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B458);
  }
  if (v1)
    return &qword_25498B440;
  else
    return &qword_25498B420;
}

void sub_20C6097C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B438);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C609810(uint64_t **a1)
{
  qword_25498B448 = 0;
  unk_25498B450 = 0;
  qword_25498B440 = 0;
  sub_20BFC9A6C((char **)&qword_25498B440, ((unk_25498B428 - qword_25498B420) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498B440, (_QWORD *)qword_25498B448, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498B440, (_QWORD *)qword_25498B448, (uint64_t *)qword_25498B420, unk_25498B428, (unk_25498B428 - qword_25498B420) >> 3);
}

void sub_20C6098A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6098C4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C565A28((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C609998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C6099E4(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C609A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdProcTokensType *sub_20C609A98(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdProcTokensType *result;
  void *v4;

  result = sub_20C609AE0();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C357D10((uint64_t)result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdProcTokensType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdProcTokensType *sub_20C609AE0()
{
  pxrInternal__aapl__pxrReserved__::UsdProcTokensType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdProcTokensType *)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::UsdProcTokensType::UsdProcTokensType(v0);
  return v0;
}

void sub_20C609B0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdProcTokensType *pxrInternal__aapl__pxrReserved__::UsdProcTokensType::UsdProcTokensType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "proceduralSystem", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "GenerativeProcedural", 0);
  v3 = *this;
  v20 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v20 = v4;
  }
  v6 = *v2;
  v21 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v21 = v7;
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  v9 = (unsigned int *)operator new(0x10uLL);
  v10 = 0;
  this[2] = v9;
  this[3] = v9;
  this[4] = v9 + 4;
  do
  {
    v11 = (&v20)[v10];
    *(_QWORD *)v9 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        *(_QWORD *)v9 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v10;
    v9 += 2;
  }
  while (v10 != 2);
  v14 = (unsigned int **)&v22;
  this[3] = v9;
  do
  {
    v16 = (uint64_t)*--v14;
    v15 = v16;
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  while (v14 != &v20);
  return (pxrInternal__aapl__pxrReserved__::UsdProcTokensType *)this;
}

void sub_20C609CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  sub_20BEEB2B8(&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C609D34()
{
  void *__p[2];
  char v1;

  sub_20C60A37C();
  sub_20BDDC0E4(__p, "RenderDenoisePass");
  sub_20C60A49C((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C609D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::~UsdRenderDenoisePass(pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53EA30;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdRender/denoisePass.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdRenderDenoisePass pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::Get(cons"
                            "t UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53EA30;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C609F24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498B468);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498B468))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498B460, "RenderDenoisePass");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498B460, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B468);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498B460, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53EA30;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdRender/denoisePass.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdRenderDenoisePass pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::Define(c"
                            "onst UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53EA30;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C60A114(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B468);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B478);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B478))
  {
    __cxa_guard_release(&qword_25498B478);
  }
  return &qword_25498B470;
}

void sub_20C60A1B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B478);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B488);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass *)__cxa_guard_acquire(&qword_25498B488);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::_GetStaticTfType(v3);
      byte_25498B480 = sub_20C35BD7C((char *)&qword_25498B470, v4, v5);
      __cxa_guard_release(&qword_25498B488);
    }
  }
  return byte_25498B480;
}

void sub_20C60A234(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B488);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass *this)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::_GetStaticTfType(this);
  return &qword_25498B470;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498B4A8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B4A8))
  {
    qword_25498B490 = 0;
    *(_QWORD *)algn_25498B498 = 0;
    qword_25498B4A0 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B490, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B4A8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B4C8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B4C8))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    qword_25498B4B0 = 0;
    *(_QWORD *)algn_25498B4B8 = 0;
    qword_25498B4C0 = 0;
    sub_20BFE538C(&qword_25498B4B0, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B4B0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B4C8);
  }
  if (v1)
    return &qword_25498B4B0;
  else
    return &qword_25498B490;
}

void sub_20C60A364(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B4C8);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C60A37C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5647E8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C60A450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C60A49C(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C60A52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C60A550()
{
  void *__p[2];
  char v1;

  sub_20C60B910();
  sub_20BDDC0E4(__p, "RenderPass");
  sub_20C60BA30((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C60A59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::~UsdRenderPass(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53EA88;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdRender/pass.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdRenderPass pxrInternal__aapl__pxrReserved__::UsdRenderPass::Get(const UsdStagePtr "
                            "&, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53EA88;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C60A740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498B4D8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498B4D8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498B4D0, "RenderPass");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498B4D0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B4D8);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498B4D0, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53EA88;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdRender/pass.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdRenderPass pxrInternal__aapl__pxrReserved__::UsdRenderPass::Define(const UsdStageP"
                            "tr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53EA88;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C60A930(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B4D8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderPass::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderPass::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B4E8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B4E8))
  {
    __cxa_guard_release(&qword_25498B4E8);
  }
  return &qword_25498B4E0;
}

void sub_20C60A9D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B4E8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderPass::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdRenderPass *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B4F8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderPass *)__cxa_guard_acquire(&qword_25498B4F8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdRenderPass::_GetStaticTfType(v3);
      byte_25498B4F0 = sub_20C35BD7C((char *)&qword_25498B4E0, v4, v5);
      __cxa_guard_release(&qword_25498B4F8);
    }
  }
  return byte_25498B4F0;
}

void sub_20C60AA50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B4F8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderPass::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderPass::_GetStaticTfType(this);
  return &qword_25498B4E0;
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetPassTypeAttr(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 200), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60AB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::CreatePassTypeAttr(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 200), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetCommandAttr(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 56), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60AC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::CreateCommandAttr(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 536), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetFileNameAttr(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 128), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60ADD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::CreateFileNameAttr(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 128), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetDenoiseEnableAttr(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 88), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60AF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::CreateDenoiseEnableAttr(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 88), v9, 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetRenderSourceRel(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 288), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60B088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::CreateRenderSourceRel(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 288), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60B148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetInputPassesRel(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 152), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60B204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::CreateInputPassesRel(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 152), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60B2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetDenoisePassRel(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 96), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60B380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::CreateDenoisePassRel(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 96), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60B440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t *SchemaAttributeNames;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = (int)this;
  v31 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498B518);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B518))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v5)
      v5 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v6 = *((_QWORD *)v5 + 25);
    v27 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v9)
      v9 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v10 = *((_QWORD *)v9 + 7);
    v28 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v13)
      v13 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v14 = *((_QWORD *)v13 + 16);
    v29 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v29 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v17)
      v17 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v18 = *((_QWORD *)v17 + 11);
    v30 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498B500, &v27, 4uLL);
    v21 = &v31;
    do
    {
      v23 = *--v21;
      v22 = v23;
      if ((v23 & 7) != 0)
      {
        v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
    }
    while (v21 != &v27);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B500, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B518);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B538);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B538))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_20C60B790((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B520, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B538);
  }
  if (v1)
    return &qword_25498B520;
  else
    return &qword_25498B500;
}

void sub_20C60B700(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B518);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C60B790(uint64_t **a1)
{
  qword_25498B528 = 0;
  unk_25498B530 = 0;
  qword_25498B520 = 0;
  sub_20BFC9A6C((char **)&qword_25498B520, ((unk_25498B508 - qword_25498B500) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498B520, (_QWORD *)qword_25498B528, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498B520, (_QWORD *)qword_25498B528, (uint64_t *)qword_25498B500, unk_25498B508, (unk_25498B508 - qword_25498B500) >> 3);
}

void sub_20C60B824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetRenderVisibilityCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  sub_20C37A850(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (uint64_t *)v3 + 37);
  *(_QWORD *)a2 = off_24C537740;
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60B8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C60B910()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5647E8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C60B9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C60BA30(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C60BAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *sub_20C60BAE4(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *result;
  void *v4;

  result = sub_20C60BB2C();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C60BB6C((uint64_t)result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *sub_20C60BB2C()
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)operator new(0x190uLL);
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType::UsdRenderTokensType(v0);
  return v0;
}

void sub_20C60BB58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C60BB6C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  void **v143;

  v143 = (void **)(a1 + 376);
  sub_20BEEB2B8(&v143);
  v2 = *(_QWORD *)(a1 + 368);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 360);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 352);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 344);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 336);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 328);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *(_QWORD *)(a1 + 320);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *(_QWORD *)(a1 + 312);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *(_QWORD *)(a1 + 304);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *(_QWORD *)(a1 + 296);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *(_QWORD *)(a1 + 288);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *(_QWORD *)(a1 + 280);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(a1 + 272);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *(_QWORD *)(a1 + 264);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *(_QWORD *)(a1 + 256);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *(_QWORD *)(a1 + 248);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *(_QWORD *)(a1 + 240);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *(_QWORD *)(a1 + 232);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *(_QWORD *)(a1 + 224);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *(_QWORD *)(a1 + 216);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *(_QWORD *)(a1 + 208);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *(_QWORD *)(a1 + 200);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *(_QWORD *)(a1 + 192);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *(_QWORD *)(a1 + 184);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *(_QWORD *)(a1 + 176);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *(_QWORD *)(a1 + 168);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *(_QWORD *)(a1 + 160);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *(_QWORD *)(a1 + 152);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *(_QWORD *)(a1 + 144);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *(_QWORD *)(a1 + 136);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *(_QWORD *)(a1 + 128);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = *(_QWORD *)(a1 + 120);
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = *(_QWORD *)(a1 + 112);
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  v101 = *(_QWORD *)(a1 + 104);
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  v104 = *(_QWORD *)(a1 + 96);
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  v107 = *(_QWORD *)(a1 + 88);
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  v110 = *(_QWORD *)(a1 + 80);
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  v113 = *(_QWORD *)(a1 + 72);
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stlxr(v115 - 2, v114));
  }
  v116 = *(_QWORD *)(a1 + 64);
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stlxr(v118 - 2, v117));
  }
  v119 = *(_QWORD *)(a1 + 56);
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stlxr(v121 - 2, v120));
  }
  v122 = *(_QWORD *)(a1 + 48);
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stlxr(v124 - 2, v123));
  }
  v125 = *(_QWORD *)(a1 + 40);
  if ((v125 & 7) != 0)
  {
    v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stlxr(v127 - 2, v126));
  }
  v128 = *(_QWORD *)(a1 + 32);
  if ((v128 & 7) != 0)
  {
    v129 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stlxr(v130 - 2, v129));
  }
  v131 = *(_QWORD *)(a1 + 24);
  if ((v131 & 7) != 0)
  {
    v132 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
    do
      v133 = __ldxr(v132);
    while (__stlxr(v133 - 2, v132));
  }
  v134 = *(_QWORD *)(a1 + 16);
  if ((v134 & 7) != 0)
  {
    v135 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
    do
      v136 = __ldxr(v135);
    while (__stlxr(v136 - 2, v135));
  }
  v137 = *(_QWORD *)(a1 + 8);
  if ((v137 & 7) != 0)
  {
    v138 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stlxr(v139 - 2, v138));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v140 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v141 = __ldxr(v140);
    while (__stlxr(v141 - 2, v140));
  }
  return a1;
}

void sub_20C60C184()
{
  void *__p[2];
  char v1;

  sub_20C60CDFC();
  sub_20BDDC0E4(__p, "RenderProduct");
  sub_20C60CF1C((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C60C1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::~UsdRenderProduct(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::~UsdRenderSettingsBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53EAE0;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdRender/product.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdRenderProduct pxrInternal__aapl__pxrReserved__::UsdRenderProduct::Get(const UsdSta"
                            "gePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53EAE0;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C60C374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498B548);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498B548))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498B540, "RenderProduct");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498B540, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B548);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498B540, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53EAE0;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdRender/product.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdRenderProduct pxrInternal__aapl__pxrReserved__::UsdRenderProduct::Define(const Usd"
                            "StagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53EAE0;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C60C564(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B548);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderProduct::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderProduct::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B558);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B558))
  {
    __cxa_guard_release(&qword_25498B558);
  }
  return &qword_25498B550;
}

void sub_20C60C608(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B558);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderProduct::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdRenderProduct *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B568);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderProduct *)__cxa_guard_acquire(&qword_25498B568);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdRenderProduct::_GetStaticTfType(v3);
      byte_25498B560 = sub_20C35BD7C((char *)&qword_25498B550, v4, v5);
      __cxa_guard_release(&qword_25498B568);
    }
  }
  return byte_25498B560;
}

void sub_20C60C684(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B568);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderProduct::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderProduct::_GetStaticTfType(this);
  return &qword_25498B550;
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::GetProductTypeAttr(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 248), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60C75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::CreateProductTypeAttr(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 248), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::GetProductNameAttr(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 232), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60C8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::CreateProductNameAttr(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 232), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::GetOrderedVarsRel(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 192), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60CA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::CreateOrderedVarsRel(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 192), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60CACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderProduct::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498B588);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B588))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v5)
      v5 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v6 = *((_QWORD *)v5 + 31);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v9)
      v9 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 29);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498B570, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B570, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B588);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B5A8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B5A8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *)1);
    sub_20C60CD48((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B590, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B5A8);
  }
  if (v1)
    return &qword_25498B590;
  else
    return &qword_25498B570;
}

void sub_20C60CCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498B588);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C60CD48(uint64_t **a1)
{
  qword_25498B598 = 0;
  unk_25498B5A0 = 0;
  qword_25498B590 = 0;
  sub_20BFC9A6C((char **)&qword_25498B590, ((unk_25498B578 - qword_25498B570) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498B590, (_QWORD *)qword_25498B598, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498B590, (_QWORD *)qword_25498B598, (uint64_t *)qword_25498B570, unk_25498B578, (unk_25498B578 - qword_25498B570) >> 3);
}

void sub_20C60CDDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C60CDFC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C60CFCC((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C60CED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C60CF1C(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C60CFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C60CFCC(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C60D038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C60D05C()
{
  void *__p[2];
  char v1;

  sub_20C60E3A4();
  sub_20BDDC0E4(__p, "RenderSettings");
  sub_20C60E4C4((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C60D0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::~UsdRenderSettings(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::~UsdRenderSettingsBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53EB38;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdRender/settings.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdRenderSettings pxrInternal__aapl__pxrReserved__::UsdRenderSettings::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53EB38;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C60D24C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498B5B8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498B5B8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498B5B0, "RenderSettings");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498B5B0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B5B8);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498B5B0, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53EB38;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdRender/settings.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdRenderSettings pxrInternal__aapl__pxrReserved__::UsdRenderSettings::Define(const U"
                            "sdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53EB38;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C60D43C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B5B8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderSettings::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderSettings::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B5C8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B5C8))
  {
    __cxa_guard_release(&qword_25498B5C8);
  }
  return &qword_25498B5C0;
}

void sub_20C60D4E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B5C8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderSettings::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdRenderSettings *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B5D8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderSettings *)__cxa_guard_acquire(&qword_25498B5D8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdRenderSettings::_GetStaticTfType(v3);
      byte_25498B5D0 = sub_20C35BD7C((char *)&qword_25498B5C0, v4, v5);
      __cxa_guard_release(&qword_25498B5D8);
    }
  }
  return byte_25498B5D0;
}

void sub_20C60D55C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B5D8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderSettings::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderSettings::_GetStaticTfType(this);
  return &qword_25498B5C0;
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetIncludedPurposesAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 144), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60D634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::CreateIncludedPurposesAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 144), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetMaterialBindingPurposesAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 184), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60D78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::CreateMaterialBindingPurposesAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 184), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetRenderingColorSpaceAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 272), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60D8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::CreateRenderingColorSpaceAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 272), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetProductsRel(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 240), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60DA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::CreateProductsRel(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 240), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60DAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *SchemaAttributeNames;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int)this;
  v26 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498B5F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B5F8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v5)
      v5 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v6 = *((_QWORD *)v5 + 18);
    v23 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v9)
      v9 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v10 = *((_QWORD *)v9 + 23);
    v24 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v13)
      v13 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v14 = *((_QWORD *)v13 + 34);
    v25 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498B5E0, &v23, 3uLL);
    v17 = &v26;
    do
    {
      v19 = *--v17;
      v18 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    while (v17 != &v23);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B5E0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B5F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B618);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B618))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *)1);
    sub_20C60DDF8((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B600, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B618);
  }
  if (v1)
    return &qword_25498B600;
  else
    return &qword_25498B5E0;
}

void sub_20C60DD68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B5F8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C60DDF8(uint64_t **a1)
{
  qword_25498B608 = 0;
  unk_25498B610 = 0;
  qword_25498B600 = 0;
  sub_20BFC9A6C((char **)&qword_25498B600, ((unk_25498B5E8 - qword_25498B5E0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498B600, (_QWORD *)qword_25498B608, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498B600, (_QWORD *)qword_25498B608, (uint64_t *)qword_25498B5E0, unk_25498B5E8, (unk_25498B5E8 - qword_25498B5E0) >> 3);
}

void sub_20C60DE8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetStageRenderSettings(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  uint64_t (*v4)(uint64_t *);
  char v5;
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v7;
  pxrInternal__aapl__pxrReserved__::UsdStage *v8;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v9;
  char v10;
  std::string::size_type size;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  int v20;
  std::string __p;
  char *v22;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  v4 = sub_20C369024(a1);
  if (v5 & 1 | (unint64_t)v4)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a1);
    v7 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v7)
      v7 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredMetadata(v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v7 + 280)))
    {
      memset(&__p, 0, sizeof(__p));
      v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a1);
      v9 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
      if (!v9)
        v9 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
      sub_20C60E1C4(v8, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v9 + 280), &__p);
      v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      if (size)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v19, &__p);
        v12 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, (uint64_t)&v22);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v22);
        *(_QWORD *)a2 = off_24C53EB38;
        if ((v25 & 7) != 0)
        {
          v13 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
          do
            v14 = __ldxr(v13);
          while (__stlxr(v14 - 2, v13));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
        sub_20BFD265C(&v24);
        if (v23)
          sub_20C35C614(v23);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
        sub_20BFD265C(&v19);
        v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      if (v10 < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (size)
          return;
      }
      else if (size)
      {
        return;
      }
    }
    LODWORD(v22) = 1;
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v24 + 1);
    v25 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v22);
    *(_QWORD *)a2 = off_24C53EB38;
    if ((v25 & 7) != 0)
    {
      v17 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
  }
  else
  {
    v22 = "usdRender/settings.cpp";
    v23 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetStageRenderSettings";
    v24 = 225;
    v25 = (unint64_t)"static UsdRenderSettings pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetStageRender"
                            "Settings(const UsdStageWeakPtr &)";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid UsdStage");
    LODWORD(v22) = 1;
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v24 + 1);
    v25 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v22);
    *(_QWORD *)a2 = off_24C53EB38;
    if ((v25 & 7) != 0)
    {
      v15 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
  }
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C60E168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_20C35C2E0((uint64_t)&a17);
  sub_20BFD1A18(&a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C60E1C4(pxrInternal__aapl__pxrReserved__::UsdStage *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, std::string *a3)
{
  const std::string *v5;
  uint64_t v6;
  void **v7;
  const std::type_info *v8;
  char *v9;
  unint64_t v10;
  const char *v11;
  void **v12;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[4];
  char v19;
  const std::string *v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v20) & 1) == 0)
  {
LABEL_19:
    v6 = 0;
    goto LABEL_20;
  }
  if (!sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
  {
    v18[0] = "usd/stage.h";
    v18[1] = "GetMetadata";
    v18[2] = 2410;
    v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(const TfToken &, T *) const [T = std::string]";
    v19 = 0;
    v7 = v16;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v16);
    if (v17 < 0)
      v7 = (void **)v16[0];
    v10 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0)
        v11 = *(const char **)v11;
    }
    else
    {
      v11 = "";
    }
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v20, v8, v9, (uint64_t)__p);
    if (v15 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Requested type %s for stage metadatum %s does not match retrieved type %s", (const char *)v7, v11, (const char *)v12);
    if (v15 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(v16[0]);
    goto LABEL_19;
  }
  if ((v21 & 4) != 0)
    v5 = (const std::string *)(*(uint64_t (**)(const std::string **))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
  else
    v5 = v20;
  std::string::operator=(a3, v5);
  v6 = 1;
LABEL_20:
  sub_20BF4C2D8((uint64_t)&v20);
  return v6;
}

void sub_20C60E35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  sub_20BF4C2D8(v24 - 56);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C60E3A4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C60CFCC((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C60E478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C60E4C4(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C60E554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::~UsdRenderSettingsBase(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53EB90;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdRender/settingsBase.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdRenderSettingsBase pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::Get(co"
                            "nst UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53EB90;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C60E704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B628);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B628))
  {
    __cxa_guard_release(&qword_25498B628);
  }
  return &qword_25498B620;
}

void sub_20C60E790(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B628);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B638);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *)__cxa_guard_acquire(&qword_25498B638);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::_GetStaticTfType(v3);
      byte_25498B630 = sub_20C35BD7C((char *)&qword_25498B620, v4, v5);
      __cxa_guard_release(&qword_25498B638);
    }
  }
  return byte_25498B630;
}

void sub_20C60E80C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B638);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::_GetStaticTfType(this);
  return &qword_25498B620;
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetResolutionAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 304), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60E8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::CreateResolutionAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 304), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 104), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetPixelAspectRatioAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 208), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60EA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::CreatePixelAspectRatioAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 208), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetAspectRatioConformPolicyAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 24), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60EB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::CreateAspectRatioConformPolicyAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 24), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetDataWindowNDCAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 80), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60ECEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::CreateDataWindowNDCAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 80), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 168), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetInstantaneousShutterAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 160), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60EE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::CreateInstantaneousShutterAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 160), v9, 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetDisableMotionBlurAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 112), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60EF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::CreateDisableMotionBlurAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 112), v9, 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetDisableDepthOfFieldAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 104), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60F0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::CreateDisableDepthOfFieldAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 104), v9, 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetCameraRel(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 32), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60F24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::CreateCameraRel(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 32), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C60F30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t *SchemaAttributeNames;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = (int)this;
  v46 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498B658);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B658))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v5)
      v5 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v6 = *((_QWORD *)v5 + 38);
    v39 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v39 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v9)
      v9 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v10 = *((_QWORD *)v9 + 26);
    v40 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v40 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v13)
      v13 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v14 = *((_QWORD *)v13 + 3);
    v41 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v41 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v17)
      v17 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v18 = *((_QWORD *)v17 + 10);
    v42 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v42 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v21)
      v21 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v22 = *((_QWORD *)v21 + 20);
    v43 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v43 &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v25)
      v25 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v26 = *((_QWORD *)v25 + 14);
    v44 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v44 &= 0xFFFFFFFFFFFFFFF8;
    }
    v29 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v29)
      v29 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v30 = *((_QWORD *)v29 + 13);
    v45 = v30;
    if ((v30 & 7) != 0)
    {
      v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v45 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498B640, &v39, 7uLL);
    v33 = &v46;
    do
    {
      v35 = *--v33;
      v34 = v35;
      if ((v35 & 7) != 0)
      {
        v36 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
    }
    while (v33 != &v39);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B640, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B658);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B678);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B678))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_20C60F758((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B660, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B678);
  }
  if (v1)
    return &qword_25498B660;
  else
    return &qword_25498B640;
}

void sub_20C60F6C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B658);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C60F758(uint64_t **a1)
{
  qword_25498B668 = 0;
  unk_25498B670 = 0;
  qword_25498B660 = 0;
  sub_20BFC9A6C((char **)&qword_25498B660, ((unk_25498B648 - qword_25498B640) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498B660, (_QWORD *)qword_25498B668, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498B660, (_QWORD *)qword_25498B668, (uint64_t *)qword_25498B640, unk_25498B648, (unk_25498B648 - qword_25498B640) >> 3);
}

void sub_20C60F7EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C60F80C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5647E8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C60F8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderComputeSpec(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v5;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  unsigned int *v9;
  unsigned int v10;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  int *v13;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v14;
  unsigned int *v15;
  unsigned int v16;
  _BOOL4 v17;
  const char **v18;
  char *v19;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v31;
  float v32;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v33;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v34;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v35;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v36;
  const char *Text;
  const char *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v45;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v52;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v53;
  pxrInternal__aapl__pxrReserved__::UsdRenderVar *IsDefined;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v56;
  uint64_t *SchemaInfo;
  char *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  const char *v68;
  const char *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  int *v110;
  char v112[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v113;
  int v114;
  int v115;
  uint64_t v116;
  const pxrInternal__aapl__pxrReserved__::SdfPath **v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _QWORD v121[3];
  void (**v122)(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *__hidden);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v123;
  int v124;
  int v125;
  uint64_t v126;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v127;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v128;
  uint64_t v129;
  int v130;
  int v131;
  void (**v132)(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *__hidden);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  int v138;
  float v139;
  uint64_t v140;
  float v141;
  float v142[5];
  void *__p;
  uint64_t *v144;
  char *v145;
  uint64_t v146;
  void (**v147)(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *__hidden);
  uint64_t v148;
  int v149;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v150;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v151;
  uint64_t v152;
  char *v153;
  const char *v154;
  uint64_t v155;
  const char *v156;
  char v157;
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  char v164[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v165;
  int v166;
  int v167;
  uint64_t v168;

  *(_QWORD *)(a3 + 128) = 0;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (pxrInternal__aapl__pxrReserved__::UsdObject *)sub_20C35C4F8((uint64_t)v164, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v5, v6, &v162);
  v7 = sub_20C369024(&v162);
  if (v8 & 1 | (unint64_t)v7)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v153);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v153 + 1);
    v155 = 0;
    v154 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v156);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v156 + 1);
    v158 = 0;
    v159 = xmmword_20CA9EF70;
    v160 = 0u;
    v161 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v132, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v164);
    v132 = off_24C53EB90;
    sub_20C610B44((pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *)&v132, (uint64_t)&v153, 1);
    pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::~UsdRenderSettingsBase((pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *)&v132);
    v151 = 0;
    v150 = 0;
    v152 = 0;
    pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetProductsRel((pxrInternal__aapl__pxrReserved__::UsdRenderSettings *)a1, (uint64_t)&v132);
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v132, (uint64_t *)&v150);
    if ((v136 & 7) != 0)
    {
      v9 = (unsigned int *)(v136 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v135);
    sub_20BFD265C(&v134);
    if (v133)
      sub_20C35C614(v133);
    v11 = v150;
    v12 = v151;
    if (v150 != v151)
    {
      v13 = (int *)&v132 + 1;
      while (1)
      {
        v14 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v162);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v14, v11, (uint64_t)&v132);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v147, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v132);
        v147 = off_24C53EAE0;
        if ((v136 & 7) != 0)
        {
          v15 = (unsigned int *)(v136 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stlxr(v16 - 2, v15));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v135);
        sub_20BFD265C(&v134);
        if (v133)
          sub_20C35C614(v133);
        if (!v148
          || (*(_BYTE *)(v148 + 57) & 8) != 0
          || !((unsigned int (*)(pxrInternal__aapl__pxrReserved__::UsdTyped *))v147[4])((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v147))
        {
          goto LABEL_65;
        }
        sub_20C611778((uint64_t)&v132, (uint64_t)&v153);
        sub_20C01A074((int *)&v132, v11);
        sub_20C01A0C8(v13, (_DWORD *)v11 + 1);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v117, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v147);
        v117 = (const pxrInternal__aapl__pxrReserved__::SdfPath **)off_24C53EB90;
        sub_20C610B44((pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *)&v117, (uint64_t)&v132, 0);
        pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::~UsdRenderSettingsBase((pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *)&v117);
        v17 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v136);
        if (v17)
          v18 = (const char **)&v136;
        else
          v18 = &v156;
        if (v17)
          v19 = (char *)&v136 + 4;
        else
          v19 = (char *)&v156 + 4;
        sub_20BFD6E54(&v130, v18);
        sub_20BFD6EA4(&v131, v19);
        v20 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v162);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v130, (uint64_t)&v117);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v122, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v117);
        v122 = off_24C53C460;
        if ((v119 & 7) != 0)
        {
          v21 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
          do
            v22 = __ldxr(v21);
          while (__stlxr(v22 - 2, v21));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v118 + 3);
        sub_20BFD265C((_DWORD *)&v118 + 2);
        if ((_QWORD)v118)
          sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v118);
        if (v123
          && (*((_BYTE *)v123 + 57) & 8) == 0
          && ((unsigned int (*)(pxrInternal__aapl__pxrReserved__::UsdTyped *))v122[4])((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v122))
        {
          break;
        }
        v117 = (const pxrInternal__aapl__pxrReserved__::SdfPath **)"usdRender/spec.cpp";
        *(_QWORD *)&v118 = "UsdRenderComputeSpec";
        *((_QWORD *)&v118 + 1) = 219;
        *(_QWORD *)&v119 = "UsdRenderSpec pxrInternal__aapl__pxrReserved__::UsdRenderComputeSpec(const UsdRenderSettings "
                           "&, const TfTokenVector &)";
        BYTE8(v119) = 0;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v130);
        v38 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v11);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v117, 3, (pxrInternal__aapl__pxrReserved__ *)"UsdRenderSettings: Could not find camera <%s> for the render product <%s>.\n", Text, v38);
        pxrInternal__aapl__pxrReserved__::UsdGeomCamera::~UsdGeomCamera((pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)&v122);
LABEL_64:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v131);
        sub_20BFD265C(&v130);
        sub_20C611944((uint64_t)&v132);
LABEL_65:
        pxrInternal__aapl__pxrReserved__::UsdRenderProduct::~UsdRenderProduct((pxrInternal__aapl__pxrReserved__::UsdRenderProduct *)&v147);
        v11 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v11 + 8);
        if (v11 == v12)
          goto LABEL_170;
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomCamera::GetHorizontalApertureAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)&v122, (uint64_t)&v117);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>((uint64_t)&v117, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v141);
      if ((v119 & 7) != 0)
      {
        v23 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v118 + 3);
      sub_20BFD265C((_DWORD *)&v118 + 2);
      if ((_QWORD)v118)
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v118);
      pxrInternal__aapl__pxrReserved__::UsdGeomCamera::GetVerticalApertureAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)&v122, (uint64_t)&v117);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>((uint64_t)&v117, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v142);
      if ((v119 & 7) != 0)
      {
        v25 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v118 + 3);
      sub_20BFD265C((_DWORD *)&v118 + 2);
      if ((_QWORD)v118)
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v118);
      if (v137 >= 1 && v138 >= 1)
      {
        v27 = v141;
        if (v141 > 0.0)
        {
          v28 = v142[0];
          if (v142[0] > 0.0)
          {
            v29 = (float)v137 / (float)v138;
            v30 = v29 * v139;
            if ((float)(v29 * v139) > 0.0)
            {
              v31 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
              if (!v31)
                v31 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
              v32 = v27 / v28;
              if ((v140 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v31 + 2) & 0xFFFFFFFFFFFFFFF8))
              {
                v139 = v32 / v29;
                goto LABEL_70;
              }
              v33 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
              if (!v33)
                v33 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
              if ((v140 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v33 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_69;
              v34 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
              if (!v34)
                v34 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
              if ((v140 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v34 + 1) & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_62;
              v35 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
              if (!v35)
                v35 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
              if ((v140 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v35 + 15) & 0xFFFFFFFFFFFFFFF8))
              {
                if (v32 <= v30)
                  goto LABEL_62;
LABEL_69:
                v142[0] = v27 / v30;
                goto LABEL_70;
              }
              v36 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
              if (!v36)
                v36 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
              if ((v140 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v36 + 8) & 0xFFFFFFFFFFFFFFF8))
              {
                if (v32 > v30)
                {
LABEL_62:
                  v141 = v28 * v30;
                  goto LABEL_70;
                }
                goto LABEL_69;
              }
            }
          }
        }
      }
LABEL_70:
      pxrInternal__aapl__pxrReserved__::UsdGeomCamera::~UsdGeomCamera((pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)&v122);
      pxrInternal__aapl__pxrReserved__::UsdRenderProduct::GetProductTypeAttr((pxrInternal__aapl__pxrReserved__::UsdRenderProduct *)&v147, (uint64_t)&v117);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v117, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v133);
      if ((v119 & 7) != 0)
      {
        v39 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v118 + 3);
      sub_20BFD265C((_DWORD *)&v118 + 2);
      if ((_QWORD)v118)
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v118);
      pxrInternal__aapl__pxrReserved__::UsdRenderProduct::GetProductNameAttr((pxrInternal__aapl__pxrReserved__::UsdRenderProduct *)&v147, (uint64_t)&v117);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v117, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v134);
      if ((v119 & 7) != 0)
      {
        v41 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v118 + 3);
      sub_20BFD265C((_DWORD *)&v118 + 2);
      if ((_QWORD)v118)
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v118);
      v127 = 0;
      v128 = 0;
      v129 = 0;
      pxrInternal__aapl__pxrReserved__::UsdRenderProduct::GetOrderedVarsRel((pxrInternal__aapl__pxrReserved__::UsdRenderProduct *)&v147, (uint64_t)&v117);
      pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v117, (uint64_t *)&v127);
      if ((v119 & 7) != 0)
      {
        v43 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v118 + 3);
      v110 = v13;
      sub_20BFD265C((_DWORD *)&v118 + 2);
      if ((_QWORD)v118)
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v118);
      v46 = v127;
      v45 = v128;
      while (v46 != v45)
      {
        v47 = *(uint64_t **)(a3 + 24);
        v48 = *(_QWORD *)(a3 + 32) - (_QWORD)v47;
        if (v48)
        {
          v49 = 0;
          v50 = v48 / 56;
          if ((unint64_t)(v48 / 56) <= 1)
            v50 = 1;
          while (1)
          {
            v51 = *v47;
            v47 += 7;
            if (v51 == *(_QWORD *)v46)
              break;
            if (v50 == ++v49)
              goto LABEL_92;
          }
          v70 = v144;
          if (v144 >= (uint64_t *)v145)
          {
            v72 = (uint64_t *)__p;
            v73 = ((char *)v144 - (_BYTE *)__p) >> 3;
            v74 = v73 + 1;
            if ((unint64_t)(v73 + 1) >> 61)
              sub_20BDDF694();
            v75 = v145 - (_BYTE *)__p;
            if ((v145 - (_BYTE *)__p) >> 2 > v74)
              v74 = v75 >> 2;
            if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
              v76 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v76 = v74;
            if (v76)
            {
              v77 = (char *)sub_20BDDF6A8((uint64_t)&v145, v76);
              v70 = v144;
              v72 = (uint64_t *)__p;
            }
            else
            {
              v77 = 0;
            }
            v84 = &v77[8 * v73];
            *(_QWORD *)v84 = v49;
            v71 = (uint64_t *)(v84 + 8);
            while (v70 != v72)
            {
              v85 = *--v70;
              *((_QWORD *)v84 - 1) = v85;
              v84 -= 8;
            }
            __p = v84;
            v144 = v71;
            v145 = &v77[8 * v76];
            if (v72)
              operator delete(v72);
          }
          else
          {
            *v144 = v49;
            v71 = v70 + 1;
          }
          v144 = v71;
        }
        else
        {
LABEL_92:
          v52 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v162);
          pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v52, v46, (uint64_t)&v122);
          IsDefined = (pxrInternal__aapl__pxrReserved__::UsdRenderVar *)pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v122, v53);
          if ((_DWORD)IsDefined
            && (StaticTfType = pxrInternal__aapl__pxrReserved__::UsdRenderVar::_GetStaticTfType(IsDefined),
                SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v56), pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v122, SchemaInfo, v58)))
          {
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v121, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v122);
            v121[0] = off_24C53EBE8;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v117);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v117 + 1);
            v119 = 0u;
            v120 = 0u;
            v118 = 0u;
            sub_20C01A074((int *)&v117, v46);
            sub_20C01A0C8((int *)&v117 + 1, (_DWORD *)v46 + 1);
            pxrInternal__aapl__pxrReserved__::UsdRenderVar::GetDataTypeAttr((pxrInternal__aapl__pxrReserved__::UsdRenderVar *)v121, (uint64_t)v112);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v112, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v118);
            if ((v116 & 7) != 0)
            {
              v59 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
              do
                v60 = __ldxr(v59);
              while (__stlxr(v60 - 2, v59));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v115);
            sub_20BFD265C(&v114);
            if (v113)
              sub_20C35C614(v113);
            pxrInternal__aapl__pxrReserved__::UsdRenderVar::GetSourceNameAttr((pxrInternal__aapl__pxrReserved__::UsdRenderVar *)v121, (uint64_t)v112);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>((uint64_t)v112, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)&v118 + 8));
            if ((v116 & 7) != 0)
            {
              v61 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
              do
                v62 = __ldxr(v61);
              while (__stlxr(v62 - 2, v61));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v115);
            sub_20BFD265C(&v114);
            if (v113)
              sub_20C35C614(v113);
            pxrInternal__aapl__pxrReserved__::UsdRenderVar::GetSourceTypeAttr((pxrInternal__aapl__pxrReserved__::UsdRenderVar *)v121, (uint64_t)v112);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v112, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v120);
            if ((v116 & 7) != 0)
            {
              v63 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
              do
                v64 = __ldxr(v63);
              while (__stlxr(v64 - 2, v63));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v115);
            sub_20BFD265C(&v114);
            if (v113)
              sub_20C35C614(v113);
            sub_20C610FE0((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v122, a2, (pxrInternal__aapl__pxrReserved__::VtDictionary *)((char *)&v120 + 8));
            v65 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3);
            v66 = v144;
            if (v144 >= (uint64_t *)v145)
            {
              v78 = (uint64_t *)__p;
              v79 = ((char *)v144 - (_BYTE *)__p) >> 3;
              v80 = v79 + 1;
              if ((unint64_t)(v79 + 1) >> 61)
                sub_20BDDF694();
              v81 = v145 - (_BYTE *)__p;
              if ((v145 - (_BYTE *)__p) >> 2 > v80)
                v80 = v81 >> 2;
              if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
                v82 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v82 = v80;
              if (v82)
              {
                v83 = (char *)sub_20BDDF6A8((uint64_t)&v145, v82);
                v66 = v144;
                v78 = (uint64_t *)__p;
              }
              else
              {
                v83 = 0;
              }
              v86 = (uint64_t *)&v83[8 * v79];
              *v86 = v65;
              v67 = v86 + 1;
              while (v66 != v78)
              {
                v87 = *--v66;
                *--v86 = v87;
              }
              __p = v86;
              v144 = v67;
              v145 = &v83[8 * v82];
              if (v78)
                operator delete(v78);
            }
            else
            {
              *v144 = v65;
              v67 = v66 + 1;
            }
            v144 = v67;
            v88 = *(_QWORD *)(a3 + 32);
            if (v88 >= *(_QWORD *)(a3 + 40))
            {
              v89 = sub_20C611A00((uint64_t *)(a3 + 24), (uint64_t)&v117);
            }
            else
            {
              sub_20C611B1C(*(_QWORD *)(a3 + 32), (uint64_t)&v117);
              v89 = v88 + 56;
              *(_QWORD *)(a3 + 32) = v88 + 56;
            }
            *(_QWORD *)(a3 + 32) = v89;
            sub_20BF49F14((_QWORD ***)&v120 + 1, 0);
            if ((v120 & 7) != 0)
            {
              v90 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
              do
                v91 = __ldxr(v90);
              while (__stlxr(v91 - 2, v90));
            }
            if (SHIBYTE(v119) < 0)
              operator delete(*((void **)&v118 + 1));
            if ((v118 & 7) != 0)
            {
              v92 = (unsigned int *)(v118 & 0xFFFFFFFFFFFFFFF8);
              do
                v93 = __ldxr(v92);
              while (__stlxr(v93 - 2, v92));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v117 + 1);
            sub_20BFD265C(&v117);
            pxrInternal__aapl__pxrReserved__::UsdRenderVar::~UsdRenderVar((pxrInternal__aapl__pxrReserved__::UsdRenderVar *)v121);
          }
          else
          {
            v117 = (const pxrInternal__aapl__pxrReserved__::SdfPath **)"usdRender/spec.cpp";
            *(_QWORD *)&v118 = "UsdRenderComputeSpec";
            *((_QWORD *)&v118 + 1) = 265;
            *(_QWORD *)&v119 = "UsdRenderSpec pxrInternal__aapl__pxrReserved__::UsdRenderComputeSpec(const UsdRenderSetti"
                               "ngs &, const TfTokenVector &)";
            BYTE8(v119) = 0;
            v68 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v11);
            v69 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v46);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v117, 3, (pxrInternal__aapl__pxrReserved__ *)"Render product <%s> includes render var at path <%s>, but no suitable UsdRenderVar prim was found.  Skipping.", v68, v69);
          }
          if ((v126 & 7) != 0)
          {
            v94 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFFFF8);
            do
              v95 = __ldxr(v94);
            while (__stlxr(v95 - 2, v94));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v125);
          sub_20BFD265C(&v124);
          if (v123)
            sub_20C35C614(v123);
        }
        v46 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v46 + 8);
      }
      sub_20C35C4F8((uint64_t)&v117, &v148, &v149);
      sub_20C610FE0((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v117, a2, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v146);
      v13 = v110;
      if ((v119 & 7) != 0)
      {
        v96 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v118 + 3);
      sub_20BFD265C((_DWORD *)&v118 + 2);
      if ((_QWORD)v118)
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v118);
      v98 = *(_QWORD *)(a3 + 8);
      if (v98 >= *(_QWORD *)(a3 + 16))
      {
        v99 = sub_20C611EF8((uint64_t *)a3, (uint64_t)&v132);
      }
      else
      {
        sub_20C611778(*(_QWORD *)(a3 + 8), (uint64_t)&v132);
        v99 = v98 + 112;
        *(_QWORD *)(a3 + 8) = v98 + 112;
      }
      *(_QWORD *)(a3 + 8) = v99;
      v117 = &v127;
      sub_20BFD6F90((void ***)&v117);
      goto LABEL_64;
    }
LABEL_170:
    pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetMaterialBindingPurposesAttr((pxrInternal__aapl__pxrReserved__::UsdRenderSettings *)a1, (uint64_t)&v132);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v132, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(a3 + 88));
    if ((v136 & 7) != 0)
    {
      v100 = (unsigned int *)(v136 & 0xFFFFFFFFFFFFFFF8);
      do
        v101 = __ldxr(v100);
      while (__stlxr(v101 - 2, v100));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v135);
    sub_20BFD265C(&v134);
    if (v133)
      sub_20C35C614(v133);
    pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetIncludedPurposesAttr((pxrInternal__aapl__pxrReserved__::UsdRenderSettings *)a1, (uint64_t)&v132);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v132, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(a3 + 48));
    if ((v136 & 7) != 0)
    {
      v102 = (unsigned int *)(v136 & 0xFFFFFFFFFFFFFFF8);
      do
        v103 = __ldxr(v102);
      while (__stlxr(v103 - 2, v102));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v135);
    sub_20BFD265C(&v134);
    if (v133)
      sub_20C35C614(v133);
    sub_20C610FE0((pxrInternal__aapl__pxrReserved__::UsdPrim *)v164, a2, (pxrInternal__aapl__pxrReserved__::VtDictionary *)(a3 + 128));
    v132 = (void (**)(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *__hidden))&v150;
    sub_20BFD6F90((void ***)&v132);
    sub_20C611944((uint64_t)&v153);
  }
  else
  {
    v153 = "usdRender/spec.cpp";
    v154 = "UsdRenderComputeSpec";
    v155 = 182;
    v156 = "UsdRenderSpec pxrInternal__aapl__pxrReserved__::UsdRenderComputeSpec(const UsdRenderSettings &, const TfTokenVector &)";
    v157 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v153, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage\n");
  }
  v104 = v163;
  if (v163)
  {
    v105 = (unsigned int *)(v163 + 8);
    do
    {
      v106 = __ldxr(v105);
      v107 = v106 - 1;
    }
    while (__stlxr(v107, v105));
    if (!v107)
      (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  }
  if ((v168 & 7) != 0)
  {
    v108 = (unsigned int *)(v168 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v167);
  sub_20BFD265C(&v166);
  if (v165)
    sub_20C35C614(v165);
}

void sub_20C6108C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void **a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,int a63)
{
  void **a64;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;

  *(_QWORD *)(v64 + 8) = v65;
  a46 = (void **)&a60;
  sub_20BFD6F90(&a46);
  sub_20BFD1A18(&a63);
  sub_20C611944((uint64_t)&a64);
  pxrInternal__aapl__pxrReserved__::UsdRenderProduct::~UsdRenderProduct((pxrInternal__aapl__pxrReserved__::UsdRenderProduct *)&STACK[0x228]);
  a64 = (void **)&STACK[0x240];
  sub_20BFD6F90(&a64);
  sub_20C611944((uint64_t)&STACK[0x258]);
  v68 = *(unsigned int **)(v66 - 176);
  if (v68)
  {
    v69 = v68 + 2;
    do
    {
      v70 = __ldxr(v69);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v69));
    if (!v71)
      (*(void (**)(unsigned int *))(*(_QWORD *)v68 + 8))(v68);
  }
  sub_20C35C2E0(v66 - 168);
  sub_20C611554(v64);
  _Unwind_Resume(a1);
}

void sub_20C610B44(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *a1, uint64_t a2, char a3)
{
  unsigned int *v6;
  unsigned int v7;
  _DWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  __int128 v25;
  void **v26;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v27;
  int v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;

  v31 = 0;
  v32 = 0;
  v33 = 0;
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetCameraRel(a1, (uint64_t)&v26);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v26, (uint64_t *)&v31);
  if ((v30 & 7) != 0)
  {
    v6 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  sub_20BFD265C(&v28);
  if (v27)
    sub_20C35C614(v27);
  v8 = v31;
  if (v31 != v32)
  {
    sub_20C01A074((int *)(a2 + 24), v31);
    sub_20C01A0C8((int *)(a2 + 28), v8 + 1);
  }
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetResolutionAttr(a1, (uint64_t)&v26);
  if ((a3 & 1) != 0
    || pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v26))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2i>((uint64_t)&v26, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(a2 + 36));
  }
  if ((v30 & 7) != 0)
  {
    v9 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  sub_20BFD265C(&v28);
  if (v27)
    sub_20C35C614(v27);
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetPixelAspectRatioAttr(a1, (uint64_t)&v26);
  if ((a3 & 1) != 0
    || pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v26))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>((uint64_t)&v26, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(a2 + 44));
  }
  if ((v30 & 7) != 0)
  {
    v11 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  sub_20BFD265C(&v28);
  if (v27)
    sub_20C35C614(v27);
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetAspectRatioConformPolicyAttr(a1, (uint64_t)&v26);
  if ((a3 & 1) != 0
    || pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v26))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v26, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(a2 + 48));
  }
  if ((v30 & 7) != 0)
  {
    v13 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  sub_20BFD265C(&v28);
  if (v27)
    sub_20C35C614(v27);
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetDataWindowNDCAttr(a1, (uint64_t)&v26);
  if ((a3 & 1) != 0
    || pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v26))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec4f>((uint64_t)&v26, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v25);
    v16 = v15;
  }
  else
  {
    v16 = 0;
  }
  if ((v30 & 7) != 0)
  {
    v17 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  sub_20BFD265C(&v28);
  if (v27)
    sub_20C35C614(v27);
  if (v16)
    *(_OWORD *)(a2 + 64) = v25;
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetDisableMotionBlurAttr(a1, (uint64_t)&v26);
  if ((a3 & 1) != 0
    || pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v26))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<BOOL>((uint64_t)&v26, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(a2 + 32));
  }
  if ((v30 & 7) != 0)
  {
    v19 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  sub_20BFD265C(&v28);
  if (v27)
    sub_20C35C614(v27);
  LOBYTE(v25) = 0;
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetDisableMotionBlurAttr(a1, (uint64_t)&v26);
  if ((a3 & 1) != 0
    || pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v26))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<BOOL>((uint64_t)&v26, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v25);
  }
  if ((v30 & 7) != 0)
  {
    v21 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  sub_20BFD265C(&v28);
  if (v27)
    sub_20C35C614(v27);
  if ((_BYTE)v25)
    *(_BYTE *)(a2 + 32) = 1;
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetDisableDepthOfFieldAttr(a1, (uint64_t)&v26);
  if ((a3 & 1) != 0
    || pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v26))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<BOOL>((uint64_t)&v26, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(a2 + 33));
  }
  if ((v30 & 7) != 0)
  {
    v23 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  sub_20BFD265C(&v28);
  if (v27)
    sub_20C35C614(v27);
  v26 = (void **)&v31;
  sub_20BFD6F90(&v26);
}

void sub_20C610F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a12 = (void **)&a16;
  sub_20BFD6F90(&a12);
  _Unwind_Resume(a1);
}

void sub_20C610FE0(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtDictionary *a3)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  unint64_t *v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v17;
  uint64_t *v18;
  int v19;
  size_t v20;
  size_t v21;
  const char *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned int *v26;
  unsigned int v27;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v28;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v29;
  uint64_t *v30;
  unsigned int *v31;
  unsigned int v32;
  void ***v33;
  uint64_t v34;
  uint64_t *v35;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v37;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  unsigned int *v42;
  unsigned int v43;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **v58[2];
  void **v59[4];
  unsigned int v60;
  unsigned int v61;
  _QWORD v62[4];

  v62[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredAttributes(a1, &v56);
  v45 = sub_20C39CA24((uint64_t)a1, v5);
  v6 = v56;
  v46 = v57;
  while (v6 != v46)
  {
    v51 = *(_DWORD *)v6;
    v7 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v6 + 8);
    v52 = v7;
    if (v7)
    {
      v8 = (unint64_t *)((char *)v7 + 48);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    sub_20BFD6E54(&v53, (_DWORD *)(v6 + 16));
    v10 = (size_t)sub_20BFD6EA4(&v54, (_DWORD *)(v6 + 20));
    v11 = *(_QWORD *)(v6 + 24);
    v55 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v55 &= 0xFFFFFFFFFFFFFFF8;
    }
    v15 = *(_QWORD **)a2;
    v14 = *(_QWORD **)(a2 + 8);
    if (*(_QWORD **)a2 == v14)
    {
      v23 = *(_QWORD **)(v45 + 80);
      v24 = *(_QWORD **)(v45 + 88);
      pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v51, (pxrInternal__aapl__pxrReserved__::TfToken *)v59);
      if (v23 != v24)
      {
        while ((*v23 & 0xFFFFFFFFFFFFFFF8) != ((unint64_t)v59[0] & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v23 == v24)
          {
            v23 = v24;
            break;
          }
        }
      }
      v25 = *(_QWORD **)(v45 + 88);
      if (((uint64_t)v59[0] & 7) != 0)
      {
        v26 = (unsigned int *)((unint64_t)v59[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      if (v23 != v25)
        goto LABEL_62;
    }
    else
    {
      while (1)
      {
        if ((*v15 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (uint64_t *)((*v15 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v10);
        v17 = sub_20C398E78(&v51);
        if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) != 0)
          v18 = (uint64_t *)((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
        if (*((char *)EmptyString + 23) < 0)
          EmptyString = (uint64_t *)*EmptyString;
        v19 = *((char *)v18 + 23);
        v20 = v19 >= 0 ? *((unsigned __int8 *)v18 + 23) : v18[1];
        v10 = strlen((const char *)EmptyString);
        if (v20 >= v10)
        {
          v21 = v10;
          v22 = v19 >= 0 ? (const char *)v18 : (const char *)*v18;
          v10 = strncmp(v22, (const char *)EmptyString, v21);
          if (!(_DWORD)v10)
            break;
        }
        if (++v15 == v14)
          goto LABEL_62;
      }
    }
    v62[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get((uint64_t)&v51, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v62, NAN))
    {
      v29 = sub_20C398E78(&v51);
      if ((*(_QWORD *)v29 & 0xFFFFFFFFFFFFFFF8) != 0)
        v30 = (uint64_t *)((*(_QWORD *)v29 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v30 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v29);
      v40 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a3, (__int128 *)v30);
      sub_20BF4A9BC(v40, v62);
    }
    else if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v51, v28))
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v47, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v51);
      pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes((pxrInternal__aapl__pxrReserved__::UsdShadeUtils *)&v47, 0, (uint64_t)v59);
      if ((v50 & 7) != 0)
      {
        v31 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
      sub_20BFD265C(&v49);
      if (v48)
        sub_20C35C614(v48);
      v47 = 0;
      v48 = 0;
      v49 = 0;
      if (v61 >= 2)
        v33 = (void ***)v59[0];
      else
        v33 = v59;
      if (v60)
      {
        v34 = 32 * v60;
        do
        {
          v35 = sub_20C3734F4((uint64_t)v33);
          v36 = v48;
          if ((unint64_t)v48 >= v49)
          {
            v37 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_20BFD7890((uint64_t *)&v47, v35);
          }
          else
          {
            sub_20BFD6E54(v48, v35);
            sub_20BFD6EA4((_DWORD *)v36 + 1, (_DWORD *)v35 + 1);
            v37 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v36 + 8);
          }
          v48 = v37;
          v33 += 4;
          v34 -= 32;
        }
        while (v34);
      }
      v58[1] = (void **)&off_24C526910;
      sub_20C030C78(v58, &v47);
      v38 = sub_20C398E78(&v51);
      if ((*(_QWORD *)v38 & 0xFFFFFFFFFFFFFFF8) != 0)
        v39 = (uint64_t *)((*(_QWORD *)v38 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v39 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v38);
      v41 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a3, (__int128 *)v39);
      sub_20BF4B5D8(v41, v58);
      sub_20BF4C2D8((uint64_t)v58);
      v58[0] = (void **)&v47;
      sub_20BFD6F90(v58);
      sub_20C5C9ACC((uint64_t)v59);
    }
    sub_20BF4C2D8((uint64_t)v62);
LABEL_62:
    if ((v55 & 7) != 0)
    {
      v42 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
      do
        v43 = __ldxr(v42);
      while (__stlxr(v43 - 2, v42));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
    sub_20BFD265C(&v53);
    if (v52)
      sub_20C35C614(v52);
    v6 += 32;
  }
  v59[0] = (void **)&v56;
  sub_20C3AEE3C(v59);
}

void sub_20C611428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
  a28 = (void **)&a23;
  sub_20C3AEE3C(&a28);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C6114CC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  sub_20BF49F14((_QWORD ***)(a1 + 48), 0);
  v2 = *(_QWORD *)(a1 + 40);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t sub_20C611554(uint64_t a1)
{
  void **v3;

  sub_20BF49F14((_QWORD ***)(a1 + 128), 0);
  sub_20C00918C((_QWORD *)(a1 + 88));
  sub_20C00918C((_QWORD *)(a1 + 48));
  v3 = (void **)(a1 + 24);
  sub_20C6115FC(&v3);
  v3 = (void **)a1;
  sub_20C611708(&v3);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdRenderComputeNamespacedSettings(pxrInternal__aapl__pxrReserved__::UsdPrim *a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::VtDictionary *a3@<X8>)
{
  *(_QWORD *)a3 = 0;
  sub_20C610FE0(a1, a2, a3);
}

void sub_20C6115E4(_Unwind_Exception *a1)
{
  _QWORD ***v1;

  sub_20BF49F14(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C6115FC(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_20C611680((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_20C611680(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  sub_20BF49F14((_QWORD ***)(a2 + 48), 0);
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
  v6 = *(_QWORD *)(a2 + 8);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));
  return sub_20BFD265C((_DWORD *)a2);
}

void sub_20C611708(void ***a1)
{
  void **v1;
  _DWORD *v2;
  _DWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_20C611944((uint64_t)(v4 - 28));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C611778(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;

  v4 = sub_20BFD6E54((_DWORD *)a1, (_DWORD *)a2);
  sub_20BFD6EA4(v4 + 1, (_DWORD *)(a2 + 4));
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      *(_QWORD *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20BFD6E54((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 24));
  sub_20BFD6EA4((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 28));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      *(_QWORD *)(a1 + 48) &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *(_OWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = v15;
  *(_OWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BEC5FD4((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 104), (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(a2 + 104));
  return a1;
}

void sub_20C6118B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _DWORD *v2;
  void **v3;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 88) = v5;
    operator delete(v5);
  }
  v6 = *(_QWORD *)(v1 + 48);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20BFD1A18(v2);
  v9 = *(_QWORD *)(v1 + 16);
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  v12 = *(_QWORD *)(v1 + 8);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  sub_20BFD1A18((_DWORD *)v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C611944(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  sub_20BF49F14((_QWORD ***)(a1 + 104), 0);
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 48);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 16);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = *(_QWORD *)(a1 + 8);
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t sub_20C611A00(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE16B34(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[56 * v4];
  v16 = &v10[56 * v9];
  sub_20C611B1C((uint64_t)v14, a2);
  v15 = v14 + 56;
  sub_20C611C68(a1, &v13);
  v11 = a1[1];
  sub_20C611E84(&v13);
  return v11;
}

void sub_20C611B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C611E84((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C611B1C(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  __int128 v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v4 = sub_20BFD6E54((_DWORD *)a1, (_DWORD *)a2);
  sub_20BFD6EA4(v4 + 1, (_DWORD *)(a2 + 4));
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  if (*(char *)(a2 + 39) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v8;
  }
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *(_QWORD *)(a1 + 40) &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 48), (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(a2 + 48));
  return a1;
}

void sub_20C611BFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *(_QWORD *)(v1 + 8);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20BFD1A18((_DWORD *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C611C68(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C611CDC((uint64_t)(a1 + 2), a1[1], (__n128 *)a1[1], *a1, (__n128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C611CDC(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, __n128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __n128 *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 = (__n128 *)((char *)v9 - 56);
      sub_20C611D90(a1, (__n128 *)(v7 - 56), v9);
      v7 = *((_QWORD *)&v16 + 1) - 56;
      *((_QWORD *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C611E00((uint64_t)v13);
  return v11;
}

__n128 sub_20C611D90(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;
  unint64_t v6;

  sub_20BFD38A4(a2, a3);
  sub_20BFD38DC(&a2->n128_u32[1], &a3->n128_u32[1]);
  a2->n128_u64[1] = a3->n128_u64[1];
  a3->n128_u64[1] = 0;
  result = a3[1];
  a2[2].n128_u64[0] = a3[2].n128_u64[0];
  a2[1] = result;
  a3[1].n128_u64[0] = 0;
  a3[1].n128_u64[1] = 0;
  a3[2].n128_u64[0] = 0;
  a2[2].n128_u64[1] = a3[2].n128_u64[1];
  v6 = a3[3].n128_u64[0];
  a3[2].n128_u64[1] = 0;
  a3[3].n128_u64[0] = 0;
  a2[3].n128_u64[0] = v6;
  return result;
}

uint64_t sub_20C611E00(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C611E34((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C611E34(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C611680(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C611E84(void **a1)
{
  sub_20C611EB4(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_DWORD *sub_20C611EB4(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 2) = v1 - 56;
      result = sub_20C611680(v4, v1 - 56);
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20C611EF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x124924924924924)
    v9 = 0x249249249249249;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20C240CE4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[112 * v4];
  v16 = &v10[112 * v9];
  sub_20C611778((uint64_t)v14, a2);
  v15 = v14 + 112;
  sub_20C612014(a1, &v13);
  v11 = a1[1];
  sub_20C612160((uint64_t)&v13);
  return v11;
}

void sub_20C612000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C612160((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C612014(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  if (v4 != *a1)
  {
    do
    {
      v6 -= 112;
      v4 -= 112;
      sub_20C6120B0((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

double sub_20C6120B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double result;
  uint64_t v7;

  sub_20BFD38A4((_DWORD *)a2, (_DWORD *)a3);
  sub_20BFD38DC((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  sub_20BFD38A4((_DWORD *)(a2 + 24), (_DWORD *)(a3 + 24));
  sub_20BFD38DC((_DWORD *)(a2 + 28), (_DWORD *)(a3 + 28));
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  v5 = *(_QWORD *)(a3 + 72);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(_QWORD *)(a2 + 72) = v5;
  *(_QWORD *)(a2 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
  v7 = *(_QWORD *)(a3 + 104);
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_QWORD *)(a2 + 104) = v7;
  return result;
}

uint64_t sub_20C612160(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;
    sub_20C611944(i - 112);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *pxrInternal__aapl__pxrReserved__::UsdRenderTokensType::UsdRenderTokensType(pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int *v151;
  unsigned int v152;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;

  v202 = *MEMORY[0x24BDAC8D0];
  v154 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "adjustApertureHeight", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v154, "adjustApertureWidth", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "adjustPixelAspectRatio", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "aspectRatioConformPolicy", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "camera", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "collection:renderVisibility:includeRoot", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "color3f", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "command", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "cropAperture", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "dataType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "dataWindowNDC", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "denoise:enable", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "denoise:pass", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "disableDepthOfField", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "disableMotionBlur", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "expandAperture", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "fileName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "full", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "includedPurposes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "inputPasses", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "instantaneousShutter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "intrinsic", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "lpe", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "materialBindingPurposes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "orderedVars", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "passType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "pixelAspectRatio", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "preview", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "primvar", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "productName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 240, "products", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 248, "productType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 256, "raster", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 264, "raw", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 272, "renderingColorSpace", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 280, "renderSettingsPrimPath", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 288, "renderSource", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 296, "renderVisibility", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 304, "resolution", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 312, "sourceName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 320, "sourceType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 328, "RenderDenoisePass", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 336, "RenderPass", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 344, "RenderProduct", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 352, "RenderSettings", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 360, "RenderSettingsBase", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 368, "RenderVar", 0);
  v2 = *(_QWORD *)this;
  v155 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v155 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v154;
  v156 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v156 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v157 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v157 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v158 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v158 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v159 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v159 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v160 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v160 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v161 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v161 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v162 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v162 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v163 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v163 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v164 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v164 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v165 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v165 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v166 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v166 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v167 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v167 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v168 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v168 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v169 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v169 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v170 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v170 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v171 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v171 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v172 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v172 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v173 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v173 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v174 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v174 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v175 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v175 &= 0xFFFFFFFFFFFFFFF8;
  }
  v65 = *((_QWORD *)this + 21);
  v176 = v65;
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 2, v66));
    if ((v67 & 1) == 0)
      v176 &= 0xFFFFFFFFFFFFFFF8;
  }
  v68 = *((_QWORD *)this + 22);
  v177 = v68;
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 2, v69));
    if ((v70 & 1) == 0)
      v177 &= 0xFFFFFFFFFFFFFFF8;
  }
  v71 = *((_QWORD *)this + 23);
  v178 = v71;
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 2, v72));
    if ((v73 & 1) == 0)
      v178 &= 0xFFFFFFFFFFFFFFF8;
  }
  v74 = *((_QWORD *)this + 24);
  v179 = v74;
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 2, v75));
    if ((v76 & 1) == 0)
      v179 &= 0xFFFFFFFFFFFFFFF8;
  }
  v77 = *((_QWORD *)this + 25);
  v180 = v77;
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 2, v78));
    if ((v79 & 1) == 0)
      v180 &= 0xFFFFFFFFFFFFFFF8;
  }
  v80 = *((_QWORD *)this + 26);
  v181 = v80;
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 2, v81));
    if ((v82 & 1) == 0)
      v181 &= 0xFFFFFFFFFFFFFFF8;
  }
  v83 = *((_QWORD *)this + 27);
  v182 = v83;
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 2, v84));
    if ((v85 & 1) == 0)
      v182 &= 0xFFFFFFFFFFFFFFF8;
  }
  v86 = *((_QWORD *)this + 28);
  v183 = v86;
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 2, v87));
    if ((v88 & 1) == 0)
      v183 &= 0xFFFFFFFFFFFFFFF8;
  }
  v89 = *((_QWORD *)this + 29);
  v184 = v89;
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 2, v90));
    if ((v91 & 1) == 0)
      v184 &= 0xFFFFFFFFFFFFFFF8;
  }
  v92 = *((_QWORD *)this + 30);
  v185 = v92;
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 2, v93));
    if ((v94 & 1) == 0)
      v185 &= 0xFFFFFFFFFFFFFFF8;
  }
  v95 = *((_QWORD *)this + 31);
  v186 = v95;
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 2, v96));
    if ((v97 & 1) == 0)
      v186 &= 0xFFFFFFFFFFFFFFF8;
  }
  v98 = *((_QWORD *)this + 32);
  v187 = v98;
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 2, v99));
    if ((v100 & 1) == 0)
      v187 &= 0xFFFFFFFFFFFFFFF8;
  }
  v101 = *((_QWORD *)this + 33);
  v188 = v101;
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 2, v102));
    if ((v103 & 1) == 0)
      v188 &= 0xFFFFFFFFFFFFFFF8;
  }
  v104 = *((_QWORD *)this + 34);
  v189 = v104;
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 2, v105));
    if ((v106 & 1) == 0)
      v189 &= 0xFFFFFFFFFFFFFFF8;
  }
  v107 = *((_QWORD *)this + 35);
  v190 = v107;
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 2, v108));
    if ((v109 & 1) == 0)
      v190 &= 0xFFFFFFFFFFFFFFF8;
  }
  v110 = *((_QWORD *)this + 36);
  v191 = v110;
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 2, v111));
    if ((v112 & 1) == 0)
      v191 &= 0xFFFFFFFFFFFFFFF8;
  }
  v113 = *((_QWORD *)this + 37);
  v192 = v113;
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 2, v114));
    if ((v115 & 1) == 0)
      v192 &= 0xFFFFFFFFFFFFFFF8;
  }
  v116 = *((_QWORD *)this + 38);
  v193 = v116;
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 2, v117));
    if ((v118 & 1) == 0)
      v193 &= 0xFFFFFFFFFFFFFFF8;
  }
  v119 = *((_QWORD *)this + 39);
  v194 = v119;
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 2, v120));
    if ((v121 & 1) == 0)
      v194 &= 0xFFFFFFFFFFFFFFF8;
  }
  v122 = *((_QWORD *)this + 40);
  v195 = v122;
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 2, v123));
    if ((v124 & 1) == 0)
      v195 &= 0xFFFFFFFFFFFFFFF8;
  }
  v125 = *((_QWORD *)this + 41);
  v196 = v125;
  if ((v125 & 7) != 0)
  {
    v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stxr(v127 + 2, v126));
    if ((v127 & 1) == 0)
      v196 &= 0xFFFFFFFFFFFFFFF8;
  }
  v128 = *((_QWORD *)this + 42);
  v197 = v128;
  if ((v128 & 7) != 0)
  {
    v129 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stxr(v130 + 2, v129));
    if ((v130 & 1) == 0)
      v197 &= 0xFFFFFFFFFFFFFFF8;
  }
  v131 = *((_QWORD *)this + 43);
  v198 = v131;
  if ((v131 & 7) != 0)
  {
    v132 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 2, v132));
    if ((v133 & 1) == 0)
      v198 &= 0xFFFFFFFFFFFFFFF8;
  }
  v134 = *((_QWORD *)this + 44);
  v199 = v134;
  if ((v134 & 7) != 0)
  {
    v135 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 2, v135));
    if ((v136 & 1) == 0)
      v199 &= 0xFFFFFFFFFFFFFFF8;
  }
  v137 = *((_QWORD *)this + 45);
  v200 = v137;
  if ((v137 & 7) != 0)
  {
    v138 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stxr(v139 + 2, v138));
    if ((v139 & 1) == 0)
      v200 &= 0xFFFFFFFFFFFFFFF8;
  }
  v140 = *((_QWORD *)this + 46);
  v201 = v140;
  if ((v140 & 7) != 0)
  {
    v141 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 2, v141));
    if ((v142 & 1) == 0)
      v201 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  v143 = operator new(0x178uLL);
  v144 = 0;
  *((_QWORD *)this + 47) = v143;
  *((_QWORD *)this + 48) = v143;
  *((_QWORD *)this + 49) = v143 + 47;
  do
  {
    v145 = *(&v155 + v144);
    *v143 = v145;
    if ((v145 & 7) != 0)
    {
      v146 = (unsigned int *)(v145 & 0xFFFFFFFFFFFFFFF8);
      do
        v147 = __ldxr(v146);
      while (__stxr(v147 + 2, v146));
      if ((v147 & 1) == 0)
        *v143 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v144;
    ++v143;
  }
  while (v144 != 47);
  v148 = &v202;
  *((_QWORD *)this + 48) = v143;
  do
  {
    v150 = *--v148;
    v149 = v150;
    if ((v150 & 7) != 0)
    {
      v151 = (unsigned int *)(v149 & 0xFFFFFFFFFFFFFFF8);
      do
        v152 = __ldxr(v151);
      while (__stlxr(v152 - 2, v151));
    }
  }
  while (v148 != &v155);
  return this;
}

void sub_20C613148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,_QWORD *a33,_QWORD *a34,_QWORD *a35,_QWORD *a36,_QWORD *a37,_QWORD *a38,_QWORD *a39,_QWORD *a40,_QWORD *a41,_QWORD *a42,_QWORD *a43,_QWORD *a44,_QWORD *a45,_QWORD *a46,_QWORD *a47,void **a48,uint64_t a49,char a50)
{
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int *v153;
  unsigned int v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int *v157;
  unsigned int v158;

  sub_20BEEB2B8(&a48);
  v60 = (char *)&STACK[0x2C0];
  while (1)
  {
    v62 = *((_QWORD *)v60 - 1);
    v60 -= 8;
    v61 = v62;
    if ((v62 & 7) != 0)
    {
      v63 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
      do
        v64 = __ldxr(v63);
      while (__stlxr(v64 - 2, v63));
    }
    if (v60 == &a50)
    {
      if ((*v51 & 7) != 0)
      {
        v65 = (unsigned int *)(*v51 & 0xFFFFFFFFFFFFFFF8);
        do
          v66 = __ldxr(v65);
        while (__stlxr(v66 - 2, v65));
      }
      if ((*v59 & 7) != 0)
      {
        v67 = (unsigned int *)(*v59 & 0xFFFFFFFFFFFFFFF8);
        do
          v68 = __ldxr(v67);
        while (__stlxr(v68 - 2, v67));
      }
      if ((*v58 & 7) != 0)
      {
        v69 = (unsigned int *)(*v58 & 0xFFFFFFFFFFFFFFF8);
        do
          v70 = __ldxr(v69);
        while (__stlxr(v70 - 2, v69));
      }
      if ((*v57 & 7) != 0)
      {
        v71 = (unsigned int *)(*v57 & 0xFFFFFFFFFFFFFFF8);
        do
          v72 = __ldxr(v71);
        while (__stlxr(v72 - 2, v71));
      }
      if ((*v56 & 7) != 0)
      {
        v73 = (unsigned int *)(*v56 & 0xFFFFFFFFFFFFFFF8);
        do
          v74 = __ldxr(v73);
        while (__stlxr(v74 - 2, v73));
      }
      if ((*v55 & 7) != 0)
      {
        v75 = (unsigned int *)(*v55 & 0xFFFFFFFFFFFFFFF8);
        do
          v76 = __ldxr(v75);
        while (__stlxr(v76 - 2, v75));
      }
      if ((*v54 & 7) != 0)
      {
        v77 = (unsigned int *)(*v54 & 0xFFFFFFFFFFFFFFF8);
        do
          v78 = __ldxr(v77);
        while (__stlxr(v78 - 2, v77));
      }
      if ((*v53 & 7) != 0)
      {
        v79 = (unsigned int *)(*v53 & 0xFFFFFFFFFFFFFFF8);
        do
          v80 = __ldxr(v79);
        while (__stlxr(v80 - 2, v79));
      }
      if ((*v52 & 7) != 0)
      {
        v81 = (unsigned int *)(*v52 & 0xFFFFFFFFFFFFFFF8);
        do
          v82 = __ldxr(v81);
        while (__stlxr(v82 - 2, v81));
      }
      if ((*a11 & 7) != 0)
      {
        v83 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v84 = __ldxr(v83);
        while (__stlxr(v84 - 2, v83));
      }
      if ((*a12 & 7) != 0)
      {
        v85 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v86 = __ldxr(v85);
        while (__stlxr(v86 - 2, v85));
      }
      if ((*a13 & 7) != 0)
      {
        v87 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v88 = __ldxr(v87);
        while (__stlxr(v88 - 2, v87));
      }
      if ((*a14 & 7) != 0)
      {
        v89 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v90 = __ldxr(v89);
        while (__stlxr(v90 - 2, v89));
      }
      if ((*a15 & 7) != 0)
      {
        v91 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v92 = __ldxr(v91);
        while (__stlxr(v92 - 2, v91));
      }
      if ((*a16 & 7) != 0)
      {
        v93 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v94 = __ldxr(v93);
        while (__stlxr(v94 - 2, v93));
      }
      if ((*a17 & 7) != 0)
      {
        v95 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v96 = __ldxr(v95);
        while (__stlxr(v96 - 2, v95));
      }
      if ((*a18 & 7) != 0)
      {
        v97 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v98 = __ldxr(v97);
        while (__stlxr(v98 - 2, v97));
      }
      if ((*a19 & 7) != 0)
      {
        v99 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v100 = __ldxr(v99);
        while (__stlxr(v100 - 2, v99));
      }
      if ((*a20 & 7) != 0)
      {
        v101 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v102 = __ldxr(v101);
        while (__stlxr(v102 - 2, v101));
      }
      if ((*a21 & 7) != 0)
      {
        v103 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v104 = __ldxr(v103);
        while (__stlxr(v104 - 2, v103));
      }
      if ((*a22 & 7) != 0)
      {
        v105 = (unsigned int *)(*a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v106 = __ldxr(v105);
        while (__stlxr(v106 - 2, v105));
      }
      if ((*a23 & 7) != 0)
      {
        v107 = (unsigned int *)(*a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v108 = __ldxr(v107);
        while (__stlxr(v108 - 2, v107));
      }
      if ((*a24 & 7) != 0)
      {
        v109 = (unsigned int *)(*a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v110 = __ldxr(v109);
        while (__stlxr(v110 - 2, v109));
      }
      if ((*a25 & 7) != 0)
      {
        v111 = (unsigned int *)(*a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v112 = __ldxr(v111);
        while (__stlxr(v112 - 2, v111));
      }
      if ((*a26 & 7) != 0)
      {
        v113 = (unsigned int *)(*a26 & 0xFFFFFFFFFFFFFFF8);
        do
          v114 = __ldxr(v113);
        while (__stlxr(v114 - 2, v113));
      }
      if ((*a27 & 7) != 0)
      {
        v115 = (unsigned int *)(*a27 & 0xFFFFFFFFFFFFFFF8);
        do
          v116 = __ldxr(v115);
        while (__stlxr(v116 - 2, v115));
      }
      if ((*a28 & 7) != 0)
      {
        v117 = (unsigned int *)(*a28 & 0xFFFFFFFFFFFFFFF8);
        do
          v118 = __ldxr(v117);
        while (__stlxr(v118 - 2, v117));
      }
      if ((*a29 & 7) != 0)
      {
        v119 = (unsigned int *)(*a29 & 0xFFFFFFFFFFFFFFF8);
        do
          v120 = __ldxr(v119);
        while (__stlxr(v120 - 2, v119));
      }
      if ((*a30 & 7) != 0)
      {
        v121 = (unsigned int *)(*a30 & 0xFFFFFFFFFFFFFFF8);
        do
          v122 = __ldxr(v121);
        while (__stlxr(v122 - 2, v121));
      }
      if ((*a31 & 7) != 0)
      {
        v123 = (unsigned int *)(*a31 & 0xFFFFFFFFFFFFFFF8);
        do
          v124 = __ldxr(v123);
        while (__stlxr(v124 - 2, v123));
      }
      if ((*a32 & 7) != 0)
      {
        v125 = (unsigned int *)(*a32 & 0xFFFFFFFFFFFFFFF8);
        do
          v126 = __ldxr(v125);
        while (__stlxr(v126 - 2, v125));
      }
      if ((*a33 & 7) != 0)
      {
        v127 = (unsigned int *)(*a33 & 0xFFFFFFFFFFFFFFF8);
        do
          v128 = __ldxr(v127);
        while (__stlxr(v128 - 2, v127));
      }
      if ((*a34 & 7) != 0)
      {
        v129 = (unsigned int *)(*a34 & 0xFFFFFFFFFFFFFFF8);
        do
          v130 = __ldxr(v129);
        while (__stlxr(v130 - 2, v129));
      }
      if ((*a35 & 7) != 0)
      {
        v131 = (unsigned int *)(*a35 & 0xFFFFFFFFFFFFFFF8);
        do
          v132 = __ldxr(v131);
        while (__stlxr(v132 - 2, v131));
      }
      if ((*a36 & 7) != 0)
      {
        v133 = (unsigned int *)(*a36 & 0xFFFFFFFFFFFFFFF8);
        do
          v134 = __ldxr(v133);
        while (__stlxr(v134 - 2, v133));
      }
      if ((*a37 & 7) != 0)
      {
        v135 = (unsigned int *)(*a37 & 0xFFFFFFFFFFFFFFF8);
        do
          v136 = __ldxr(v135);
        while (__stlxr(v136 - 2, v135));
      }
      if ((*a38 & 7) != 0)
      {
        v137 = (unsigned int *)(*a38 & 0xFFFFFFFFFFFFFFF8);
        do
          v138 = __ldxr(v137);
        while (__stlxr(v138 - 2, v137));
      }
      if ((*a39 & 7) != 0)
      {
        v139 = (unsigned int *)(*a39 & 0xFFFFFFFFFFFFFFF8);
        do
          v140 = __ldxr(v139);
        while (__stlxr(v140 - 2, v139));
      }
      if ((*a40 & 7) != 0)
      {
        v141 = (unsigned int *)(*a40 & 0xFFFFFFFFFFFFFFF8);
        do
          v142 = __ldxr(v141);
        while (__stlxr(v142 - 2, v141));
      }
      if ((*a41 & 7) != 0)
      {
        v143 = (unsigned int *)(*a41 & 0xFFFFFFFFFFFFFFF8);
        do
          v144 = __ldxr(v143);
        while (__stlxr(v144 - 2, v143));
      }
      if ((*a42 & 7) != 0)
      {
        v145 = (unsigned int *)(*a42 & 0xFFFFFFFFFFFFFFF8);
        do
          v146 = __ldxr(v145);
        while (__stlxr(v146 - 2, v145));
      }
      if ((*a43 & 7) != 0)
      {
        v147 = (unsigned int *)(*a43 & 0xFFFFFFFFFFFFFFF8);
        do
          v148 = __ldxr(v147);
        while (__stlxr(v148 - 2, v147));
      }
      if ((*a44 & 7) != 0)
      {
        v149 = (unsigned int *)(*a44 & 0xFFFFFFFFFFFFFFF8);
        do
          v150 = __ldxr(v149);
        while (__stlxr(v150 - 2, v149));
      }
      if ((*a45 & 7) != 0)
      {
        v151 = (unsigned int *)(*a45 & 0xFFFFFFFFFFFFFFF8);
        do
          v152 = __ldxr(v151);
        while (__stlxr(v152 - 2, v151));
      }
      if ((*a46 & 7) != 0)
      {
        v153 = (unsigned int *)(*a46 & 0xFFFFFFFFFFFFFFF8);
        do
          v154 = __ldxr(v153);
        while (__stlxr(v154 - 2, v153));
      }
      if ((*a47 & 7) != 0)
      {
        v155 = (unsigned int *)(*a47 & 0xFFFFFFFFFFFFFFF8);
        do
          v156 = __ldxr(v155);
        while (__stlxr(v156 - 2, v155));
      }
      if ((*v50 & 7) != 0)
      {
        v157 = (unsigned int *)(*v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v158 = __ldxr(v157);
        while (__stlxr(v158 - 2, v157));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C613840()
{
  JUMPOUT(0x20C6132E4);
}

void sub_20C613848()
{
  JUMPOUT(0x20C613308);
}

void sub_20C613850()
{
  JUMPOUT(0x20C61332CLL);
}

void sub_20C613858()
{
  JUMPOUT(0x20C613350);
}

void sub_20C613860()
{
  JUMPOUT(0x20C613374);
}

void sub_20C613868()
{
  JUMPOUT(0x20C613398);
}

void sub_20C613870()
{
  JUMPOUT(0x20C6133BCLL);
}

void sub_20C613878()
{
  JUMPOUT(0x20C6133E0);
}

void sub_20C613880()
{
  JUMPOUT(0x20C613404);
}

void sub_20C613888()
{
  JUMPOUT(0x20C613428);
}

void sub_20C613890()
{
  JUMPOUT(0x20C61344CLL);
}

void sub_20C613898()
{
  JUMPOUT(0x20C613470);
}

void sub_20C6138A0()
{
  JUMPOUT(0x20C613494);
}

void sub_20C6138A8()
{
  JUMPOUT(0x20C6134B8);
}

void sub_20C6138B0()
{
  JUMPOUT(0x20C6134DCLL);
}

void sub_20C6138B8()
{
  JUMPOUT(0x20C613500);
}

void sub_20C6138C0()
{
  JUMPOUT(0x20C613524);
}

void sub_20C6138C8()
{
  JUMPOUT(0x20C613548);
}

void sub_20C6138D0()
{
  JUMPOUT(0x20C61356CLL);
}

void sub_20C6138D8()
{
  JUMPOUT(0x20C613590);
}

void sub_20C6138E0()
{
  JUMPOUT(0x20C6135B4);
}

void sub_20C6138E8()
{
  JUMPOUT(0x20C6135D8);
}

void sub_20C6138F0()
{
  JUMPOUT(0x20C6135FCLL);
}

void sub_20C6138F8()
{
  JUMPOUT(0x20C613620);
}

void sub_20C613900()
{
  JUMPOUT(0x20C613644);
}

void sub_20C613908()
{
  JUMPOUT(0x20C613668);
}

void sub_20C613910()
{
  JUMPOUT(0x20C61368CLL);
}

void sub_20C613918()
{
  JUMPOUT(0x20C6136B0);
}

void sub_20C613920()
{
  JUMPOUT(0x20C6136D4);
}

void sub_20C613928()
{
  JUMPOUT(0x20C6136F8);
}

void sub_20C613930()
{
  JUMPOUT(0x20C61371CLL);
}

void sub_20C613938()
{
  JUMPOUT(0x20C613740);
}

void sub_20C613940()
{
  JUMPOUT(0x20C613764);
}

void sub_20C613948()
{
  JUMPOUT(0x20C613788);
}

void sub_20C613950()
{
  JUMPOUT(0x20C6137ACLL);
}

void sub_20C613958()
{
  JUMPOUT(0x20C6137D0);
}

void sub_20C613960()
{
  JUMPOUT(0x20C6137F4);
}

void sub_20C613968()
{
  JUMPOUT(0x20C613818);
}

void sub_20C613974()
{
  void *__p[2];
  char v1;

  sub_20C614648();
  sub_20BDDC0E4(__p, "RenderVar");
  sub_20C614768((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C6139C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::~UsdRenderVar(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53EBE8;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdRender/var.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdRenderVar pxrInternal__aapl__pxrReserved__::UsdRenderVar::Get(const UsdStagePtr &,"
                            " const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53EBE8;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C613B64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498B688);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498B688))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498B680, "RenderVar");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498B680, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B688);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498B680, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53EBE8;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdRender/var.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdRenderVar pxrInternal__aapl__pxrReserved__::UsdRenderVar::Define(const UsdStagePtr"
                            " &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53EBE8;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C613D54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B688);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderVar::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderVar::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B698);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B698))
  {
    __cxa_guard_release(&qword_25498B698);
  }
  return &qword_25498B690;
}

void sub_20C613DF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B698);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderVar::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdRenderVar *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B6A8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderVar *)__cxa_guard_acquire(&qword_25498B6A8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdRenderVar::_GetStaticTfType(v3);
      byte_25498B6A0 = sub_20C35BD7C((char *)&qword_25498B690, v4, v5);
      __cxa_guard_release(&qword_25498B6A8);
    }
  }
  return byte_25498B6A0;
}

void sub_20C613E74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B6A8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderVar::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderVar::_GetStaticTfType(this);
  return &qword_25498B690;
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::GetDataTypeAttr(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 72), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C613F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::CreateDataTypeAttr(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 72), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::GetSourceNameAttr(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 312), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6140A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::CreateSourceNameAttr(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 312), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 80), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::GetSourceTypeAttr(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3)
    v3 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 320), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6141FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::CreateSourceTypeAttr(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8)
    v8 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 320), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderVar::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *SchemaAttributeNames;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int)this;
  v26 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498B6C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B6C8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v5)
      v5 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v6 = *((_QWORD *)v5 + 9);
    v23 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v9)
      v9 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v10 = *((_QWORD *)v9 + 39);
    v24 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v13)
      v13 = sub_20C60BAE4(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    v14 = *((_QWORD *)v13 + 40);
    v25 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498B6B0, &v23, 3uLL);
    v17 = &v26;
    do
    {
      v19 = *--v17;
      v18 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    while (v17 != &v23);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B6B0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B6C8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B6E8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B6E8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_20C614594((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B6D0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B6E8);
  }
  if (v1)
    return &qword_25498B6D0;
  else
    return &qword_25498B6B0;
}

void sub_20C614504(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B6C8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C614594(uint64_t **a1)
{
  qword_25498B6D8 = 0;
  unk_25498B6E0 = 0;
  qword_25498B6D0 = 0;
  sub_20BFC9A6C((char **)&qword_25498B6D0, ((unk_25498B6B8 - qword_25498B6B0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498B6D0, (_QWORD *)qword_25498B6D8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498B6D0, (_QWORD *)qword_25498B6D8, (uint64_t *)qword_25498B6B0, unk_25498B6B8, (unk_25498B6B8 - qword_25498B6B0) >> 3);
}

void sub_20C614628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C614648()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5647E8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C61471C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C614768(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C6147F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *pxrInternal__aapl__pxrReserved__::UsdHydraTokensType::UsdHydraTokensType(pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  v103 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "black", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v103, "clamp", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "displayLook:bxdf", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "faceIndex", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "faceOffset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "frame", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "HwPrimvar_1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "HwPtexTexture_1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "HwUvTexture_1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "hydraGenerativeProcedural", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "inputs:file", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "inputs:varname", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "linear", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "linearMipmapLinear", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "linearMipmapNearest", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "magFilter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "minFilter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "mirror", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "nearest", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "nearestMipmapLinear", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "nearestMipmapNearest", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "primvars:hdGp:proceduralType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "proceduralSystem", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "repeat", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "textureMemory", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "useMetadata", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "uv", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "wrapS", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "wrapT", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "HydraGenerativeProceduralAPI", 0);
  v2 = *(_QWORD *)this;
  v104 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v104 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v103;
  v105 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v105 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v106 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v106 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v107 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v107 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v108 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v108 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v109 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v109 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v110 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v110 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v111 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v111 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v112 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v112 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v113 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v113 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v114 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v114 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v115 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v115 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v116 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v116 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v117 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v117 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v118 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v118 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v119 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v119 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v120 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v120 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v121 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v121 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v122 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v122 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v123 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v123 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v124 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v124 &= 0xFFFFFFFFFFFFFFF8;
  }
  v65 = *((_QWORD *)this + 21);
  v125 = v65;
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 2, v66));
    if ((v67 & 1) == 0)
      v125 &= 0xFFFFFFFFFFFFFFF8;
  }
  v68 = *((_QWORD *)this + 22);
  v126 = v68;
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 2, v69));
    if ((v70 & 1) == 0)
      v126 &= 0xFFFFFFFFFFFFFFF8;
  }
  v71 = *((_QWORD *)this + 23);
  v127 = v71;
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 2, v72));
    if ((v73 & 1) == 0)
      v127 &= 0xFFFFFFFFFFFFFFF8;
  }
  v74 = *((_QWORD *)this + 24);
  v128 = v74;
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 2, v75));
    if ((v76 & 1) == 0)
      v128 &= 0xFFFFFFFFFFFFFFF8;
  }
  v77 = *((_QWORD *)this + 25);
  v129 = v77;
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 2, v78));
    if ((v79 & 1) == 0)
      v129 &= 0xFFFFFFFFFFFFFFF8;
  }
  v80 = *((_QWORD *)this + 26);
  v130 = v80;
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 2, v81));
    if ((v82 & 1) == 0)
      v130 &= 0xFFFFFFFFFFFFFFF8;
  }
  v83 = *((_QWORD *)this + 27);
  v131 = v83;
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 2, v84));
    if ((v85 & 1) == 0)
      v131 &= 0xFFFFFFFFFFFFFFF8;
  }
  v86 = *((_QWORD *)this + 28);
  v132 = v86;
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 2, v87));
    if ((v88 & 1) == 0)
      v132 &= 0xFFFFFFFFFFFFFFF8;
  }
  v89 = *((_QWORD *)this + 29);
  v133 = v89;
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 2, v90));
    if ((v91 & 1) == 0)
      v133 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  v92 = operator new(0xF0uLL);
  v93 = 0;
  *((_QWORD *)this + 30) = v92;
  *((_QWORD *)this + 31) = v92;
  *((_QWORD *)this + 32) = v92 + 30;
  do
  {
    v94 = *(&v104 + v93);
    *v92 = v94;
    if ((v94 & 7) != 0)
    {
      v95 = (unsigned int *)(v94 & 0xFFFFFFFFFFFFFFF8);
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 2, v95));
      if ((v96 & 1) == 0)
        *v92 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v93;
    ++v92;
  }
  while (v93 != 30);
  v97 = &v134;
  *((_QWORD *)this + 31) = v92;
  do
  {
    v99 = *--v97;
    v98 = v99;
    if ((v99 & 7) != 0)
    {
      v100 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
      do
        v101 = __ldxr(v100);
      while (__stlxr(v101 - 2, v100));
    }
  }
  while (v97 != &v104);
  return this;
}

void sub_20C615268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,void **a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;

  sub_20BEEB2B8(&a31);
  v73 = (char *)&a63;
  while (1)
  {
    v75 = *((_QWORD *)v73 - 1);
    v73 -= 8;
    v74 = v75;
    if ((v75 & 7) != 0)
    {
      v76 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
      do
        v77 = __ldxr(v76);
      while (__stlxr(v77 - 2, v76));
    }
    if (v73 == &a33)
    {
      if ((*v65 & 7) != 0)
      {
        v78 = (unsigned int *)(*v65 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*v64 & 7) != 0)
      {
        v80 = (unsigned int *)(*v64 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*v72 & 7) != 0)
      {
        v82 = (unsigned int *)(*v72 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*v71 & 7) != 0)
      {
        v84 = (unsigned int *)(*v71 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*v70 & 7) != 0)
      {
        v86 = (unsigned int *)(*v70 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*v69 & 7) != 0)
      {
        v88 = (unsigned int *)(*v69 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*v68 & 7) != 0)
      {
        v90 = (unsigned int *)(*v68 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*v67 & 7) != 0)
      {
        v92 = (unsigned int *)(*v67 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      if ((*v66 & 7) != 0)
      {
        v94 = (unsigned int *)(*v66 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if ((*a11 & 7) != 0)
      {
        v96 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      if ((*a12 & 7) != 0)
      {
        v98 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      if ((*a13 & 7) != 0)
      {
        v100 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      if ((*a14 & 7) != 0)
      {
        v102 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v103 = __ldxr(v102);
        while (__stlxr(v103 - 2, v102));
      }
      if ((*a15 & 7) != 0)
      {
        v104 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v105 = __ldxr(v104);
        while (__stlxr(v105 - 2, v104));
      }
      if ((*a16 & 7) != 0)
      {
        v106 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v107 = __ldxr(v106);
        while (__stlxr(v107 - 2, v106));
      }
      if ((*a17 & 7) != 0)
      {
        v108 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v109 = __ldxr(v108);
        while (__stlxr(v109 - 2, v108));
      }
      if ((*a18 & 7) != 0)
      {
        v110 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v111 = __ldxr(v110);
        while (__stlxr(v111 - 2, v110));
      }
      if ((*a19 & 7) != 0)
      {
        v112 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v113 = __ldxr(v112);
        while (__stlxr(v113 - 2, v112));
      }
      if ((*a20 & 7) != 0)
      {
        v114 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v115 = __ldxr(v114);
        while (__stlxr(v115 - 2, v114));
      }
      if ((*a21 & 7) != 0)
      {
        v116 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v117 = __ldxr(v116);
        while (__stlxr(v117 - 2, v116));
      }
      if ((*a22 & 7) != 0)
      {
        v118 = (unsigned int *)(*a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v119 = __ldxr(v118);
        while (__stlxr(v119 - 2, v118));
      }
      if ((*a23 & 7) != 0)
      {
        v120 = (unsigned int *)(*a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v121 = __ldxr(v120);
        while (__stlxr(v121 - 2, v120));
      }
      if ((*a24 & 7) != 0)
      {
        v122 = (unsigned int *)(*a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v123 = __ldxr(v122);
        while (__stlxr(v123 - 2, v122));
      }
      if ((*a25 & 7) != 0)
      {
        v124 = (unsigned int *)(*a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v125 = __ldxr(v124);
        while (__stlxr(v125 - 2, v124));
      }
      if ((*a26 & 7) != 0)
      {
        v126 = (unsigned int *)(*a26 & 0xFFFFFFFFFFFFFFF8);
        do
          v127 = __ldxr(v126);
        while (__stlxr(v127 - 2, v126));
      }
      if ((*a27 & 7) != 0)
      {
        v128 = (unsigned int *)(*a27 & 0xFFFFFFFFFFFFFFF8);
        do
          v129 = __ldxr(v128);
        while (__stlxr(v129 - 2, v128));
      }
      if ((*a28 & 7) != 0)
      {
        v130 = (unsigned int *)(*a28 & 0xFFFFFFFFFFFFFFF8);
        do
          v131 = __ldxr(v130);
        while (__stlxr(v131 - 2, v130));
      }
      if ((*a29 & 7) != 0)
      {
        v132 = (unsigned int *)(*a29 & 0xFFFFFFFFFFFFFFF8);
        do
          v133 = __ldxr(v132);
        while (__stlxr(v133 - 2, v132));
      }
      if ((*a30 & 7) != 0)
      {
        v134 = (unsigned int *)(*a30 & 0xFFFFFFFFFFFFFFF8);
        do
          v135 = __ldxr(v134);
        while (__stlxr(v135 - 2, v134));
      }
      if ((*v63 & 7) != 0)
      {
        v136 = (unsigned int *)(*v63 & 0xFFFFFFFFFFFFFFF8);
        do
          v137 = __ldxr(v136);
        while (__stlxr(v137 - 2, v136));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C6156FC()
{
  JUMPOUT(0x20C615404);
}

void sub_20C615704()
{
  JUMPOUT(0x20C615428);
}

void sub_20C61570C()
{
  JUMPOUT(0x20C61544CLL);
}

void sub_20C615714()
{
  JUMPOUT(0x20C615470);
}

void sub_20C61571C()
{
  JUMPOUT(0x20C615494);
}

void sub_20C615724()
{
  JUMPOUT(0x20C6154B8);
}

void sub_20C61572C()
{
  JUMPOUT(0x20C6154DCLL);
}

void sub_20C615734()
{
  JUMPOUT(0x20C615500);
}

void sub_20C61573C()
{
  JUMPOUT(0x20C615524);
}

void sub_20C615744()
{
  JUMPOUT(0x20C615548);
}

void sub_20C61574C()
{
  JUMPOUT(0x20C61556CLL);
}

void sub_20C615754()
{
  JUMPOUT(0x20C615590);
}

void sub_20C61575C()
{
  JUMPOUT(0x20C6155B4);
}

void sub_20C615764()
{
  JUMPOUT(0x20C6155D8);
}

void sub_20C61576C()
{
  JUMPOUT(0x20C6155FCLL);
}

void sub_20C615774()
{
  JUMPOUT(0x20C615620);
}

void sub_20C61577C()
{
  JUMPOUT(0x20C615644);
}

void sub_20C615784()
{
  JUMPOUT(0x20C615668);
}

void sub_20C61578C()
{
  JUMPOUT(0x20C61568CLL);
}

void sub_20C615794()
{
  JUMPOUT(0x20C6156B0);
}

void sub_20C61579C()
{
  JUMPOUT(0x20C6156D4);
}

void *pxrInternal__aapl__pxrReserved__::UsdHydraDiscoveryPlugin::GetSearchURIs(pxrInternal__aapl__pxrReserved__::UsdHydraDiscoveryPlugin *this)
{
  unsigned __int8 v1;
  void *__p[2];
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unsigned __int8 *)&qword_25498B708);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B708))
  {
    sub_20C6158AC("", (uint64_t)__p);
    sub_20C088980((uint64_t)&unk_25498B6F0, (__int128 *)__p, 1uLL);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))sub_20BFBB378, &unk_25498B6F0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B708);
  }
  return &unk_25498B6F0;
}

void sub_20C61587C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25498B708);
  _Unwind_Resume(a1);
}

void sub_20C6158AC(char *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  const char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  pxrInternal__aapl__pxrReserved__::PlugRegistry *v9;
  void *__p;
  char v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  const void *v15[2];
  char v16;

  v4 = atomic_load((unsigned __int8 *)&qword_25498B740);
  if ((v4 & 1) == 0)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)__cxa_guard_acquire(&qword_25498B740);
    if ((_DWORD)v9)
    {
      pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v9);
      sub_20BDDC0E4(&__p, "usdHydra");
      pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginWithName((unsigned __int8 *)&__p, &unk_25498B730);
      if (v11 < 0)
        operator delete(__p);
      __cxa_atexit((void (*)(void *))sub_20C5EA414, &unk_25498B730, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498B740);
    }
  }
  sub_20BDDC0E4(v15, "shaders");
  sub_20BDDC0E4(v13, a1);
  pxrInternal__aapl__pxrReserved__::TfStringCatPaths(v15, (uint64_t)v13, &__p);
  pxrInternal__aapl__pxrReserved__::PlugFindPluginResource((uint64_t *)&unk_25498B730, (uint64_t)&__p, 1, (_QWORD *)a2);
  if (v11 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete((void *)v15[0]);
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (!v7)
  {
    LOBYTE(v12) = 0;
    v8 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Could not find shader resource: %s\n", v5, v6, a1, "usdHydra/discoveryPlugin.cpp", "_GetShaderResourcePath", 54, "std::string pxrInternal__aapl__pxrReserved__::_GetShaderResourcePath(const char *)", v12);
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "!path.empty()", v8);
  }
}

void sub_20C615A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25498B740);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdHydraDiscoveryPlugin::DiscoverNodes(pxrInternal__aapl__pxrReserved__ *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t *Resolver;
  pxrInternal__aapl__pxrReserved__ *v6;
  uint64_t *v7;
  pxrInternal__aapl__pxrReserved__::UsdStage *v8;
  pxrInternal__aapl__pxrReserved__ *v9;
  uint64_t *UsdPrimDefaultPredicate;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  const char *Text;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  const char *v21;
  int v22;
  int v23;
  void **v24[4];
  char v25;
  uint64_t *v26;
  uint64_t *v27;
  void (**v28)(pxrInternal__aapl__pxrReserved__::UsdShadeShader *__hidden);
  uint64_t v29;
  char v30[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  int v32;
  int v33;
  uint64_t v34;
  void *v35;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v40;
  __int128 v41;
  uint64_t v42;
  void *__p;
  const char *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  pxrInternal__aapl__pxrReserved__ *v53;
  _BYTE v54[24];
  _BYTE v55[48];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = atomic_load((unsigned __int8 *)&qword_25498B728);
  if ((v3 & 1) == 0)
  {
    a1 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_25498B728);
    if ((_DWORD)a1)
    {
      sub_20C6158AC("shaderDefs.usda", (uint64_t)&qword_25498B710);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25498B710, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498B728);
    }
  }
  v4 = qword_25498B718;
  if (byte_25498B727 >= 0)
    v4 = byte_25498B727;
  if (v4)
  {
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
    pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset((uint64_t)Resolver);
    pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t)&qword_25498B710, (pxrInternal__aapl__pxrReserved__::ArResolverContext *)v54, 0, &v53);
    if (v53)
    {
      v6 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v55, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)v54);
      v7 = pxrInternal__aapl__pxrReserved__::ArGetResolver(v6);
      pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)v7);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v52);
      if (SBYTE7(v45) < 0)
        operator delete(__p);
      v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8((uint64_t *)&v53);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v8, (uint64_t)&v39);
      UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v9);
      v12 = *UsdPrimDefaultPredicate;
      v11 = UsdPrimDefaultPredicate[1];
      v13 = UsdPrimDefaultPredicate[2];
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v41)
        && ((v12 & 0x2000) != 0 || (v11 & 0x2000) == 0))
      {
        v12 |= 0x2000uLL;
        v11 &= ~0x2000uLL;
      }
      v35 = (void *)v12;
      v36 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v11;
      *(_QWORD *)&v37 = v13;
      sub_20C3ADEFC((uint64_t)&v39, (uint64_t *)&v35, (uint64_t)&__p);
      if ((BYTE8(v41) & 7) != 0)
      {
        v14 = (unsigned int *)(*((_QWORD *)&v41 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
      sub_20BFD265C(&v41);
      if (v40)
        sub_20C35C614(v40);
      v39 = __p;
      sub_20BFD6E54(&v40, &v44);
      sub_20BFD6EA4((_DWORD *)&v40 + 1, (_DWORD *)&v44 + 1);
      v41 = v45;
      v42 = v46;
      v35 = (void *)v47;
      sub_20BFD6E54(&v36, &v48);
      sub_20BFD6EA4((_DWORD *)&v36 + 1, &v49);
      v37 = v50;
      v38 = v51;
      while (v39 != v35 || v40 != v36 || !sub_20C39FA44((uint64_t)&v41, (uint64_t)&v37))
      {
        sub_20C3ADDEC((uint64_t)&v39, (uint64_t)v30);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v28, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v30);
        v28 = off_24C53DB40;
        if (v29
          && (*(_BYTE *)(v29 + 57) & 8) == 0
          && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v28) & 1) != 0)
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils::GetNodeDiscoveryResults((uint64_t)&v28, (__int128 *)&qword_25498B710, (uint64_t *)&v26);
          sub_20C6163C0(a2, a2[1], v26, (uint64_t)v27, 0x84BDA12F684BDA13 * (v27 - v26));
          if (v26 == v27)
          {
            v24[0] = (void **)"usdHydra/discoveryPlugin.cpp";
            v24[1] = (void **)"DiscoverNodes";
            v24[2] = (void **)109;
            v24[3] = (void **)"virtual NdrNodeDiscoveryResultVec pxrInternal__aapl__pxrReserved__::UsdHydraDiscoveryPlugi"
                              "n::DiscoverNodes(const Context &)";
            v25 = 0;
            sub_20C348EEC((uint64_t)v30, &v22);
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v22);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Found shader definition <%s> with no valid discovery results. This is likely because there are no resolvable info:sourceAsset values.", Text);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
            sub_20BFD265C(&v22);
          }
          v24[0] = (void **)&v26;
          sub_20C1E7E2C(v24);
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v28);
        if ((v34 & 7) != 0)
        {
          v17 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
        sub_20BFD265C(&v32);
        if (v31)
          sub_20C35C614(v31);
        sub_20C3ADE64((uint64_t)&v39);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
      sub_20BFD265C(&v36);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v40 + 1);
      sub_20BFD265C(&v40);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
      sub_20BFD265C(&v48);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
      sub_20BFD265C(&v44);
      if ((v52 & 7) != 0)
      {
        v19 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v55);
    }
    else
    {
      __p = "usdHydra/discoveryPlugin.cpp";
      v44 = "DiscoverNodes";
      *(_QWORD *)&v45 = 84;
      *((_QWORD *)&v45 + 1) = "virtual NdrNodeDiscoveryResultVec pxrInternal__aapl__pxrReserved__::UsdHydraDiscoveryPlugi"
                              "n::DiscoverNodes(const Context &)";
      LOBYTE(v46) = 0;
      if (byte_25498B727 >= 0)
        v21 = (const char *)&qword_25498B710;
      else
        v21 = (const char *)qword_25498B710;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Could not open file '%s' on a USD stage.", v21);
    }
    sub_20C455C74(&v53);
    __p = v54;
    sub_20BDE9EB0((void ***)&__p);
  }
}

void sub_20C615FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  __cxa_guard_abort(&qword_25498B728);
  sub_20C1E7E2C((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C616140()
{
  uint64_t *v0;

  v0 = sub_20C61616C();
  return sub_20C61628C(v0);
}

void sub_20C616158(unsigned int **a1, const void *a2)
{
  void *v2;

  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin(a1, a2);
  operator delete(v2);
}

uint64_t *sub_20C61616C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C1E7A44((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C616240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C61628C(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C53EC88;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20C6162F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C61631C(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);
  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C616330@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;

  v2 = operator new(0x18uLL);
  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::NdrDiscoveryPlugin((uint64_t)v2);
  *v2 = &off_24C53EC40;
  *a1 = v2;
  v4 = 0;
  return sub_20C616394(&v4);
}

void sub_20C616380(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C616394(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

uint64_t sub_20C6163C0(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0x84BDA12F684BDA13 * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - a2;
      if ((uint64_t)(0x84BDA12F684BDA13 * ((uint64_t)(v12 - a2) >> 3)) >= a5)
      {
        v21 = (uint64_t)&a3[27 * a5];
      }
      else
      {
        v21 = (uint64_t)&a3[(uint64_t)(v12 - a2) >> 3];
        a1[1] = sub_20C616744(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_20C6165C4((uint64_t)a1, v5, v12, v5 + 216 * a5);
      sub_20C616820((uint64_t)v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x7B425ED097B425EDLL * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x12F684BDA12F684)
        sub_20BDDF694();
      v15 = 0x84BDA12F684BDA13 * ((a2 - v13) >> 3);
      v16 = 0x84BDA12F684BDA13 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x97B425ED097B42)
        v18 = 0x12F684BDA12F684;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
        v19 = (char *)sub_20C1E9B8C(v9, v18);
      else
        v19 = 0;
      v22 = (uint64_t)&v19[216 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      v28 = &v19[216 * v18];
      v23 = 216 * a5;
      v24 = v22 + 216 * a5;
      do
      {
        sub_20C1EEAA0(v22, v7);
        v22 += 216;
        v7 += 27;
        v23 -= 216;
      }
      while (v23);
      v27 = v24;
      v5 = sub_20C616654(a1, v26, v5);
      sub_20C1E9CC4((uint64_t)v26);
    }
  }
  return v5;
}

void sub_20C616598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6165C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      sub_20C1E9BD4(a1 + 16, v8, v10);
      v10 += 216;
      v8 += 216;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20C6167C4(a2, v7, v6);
}

uint64_t sub_20C616654(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a3;
  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  v8 = *a1;
  v9 = v6;
  if (*a1 != a3)
  {
    v10 = a3;
    v9 = a2[1];
    do
    {
      v9 -= 216;
      v10 -= 216;
      sub_20C1E9BD4(v7, v9, v10);
    }
    while (v10 != v8);
  }
  a2[1] = v9;
  v11 = a1[1];
  v12 = a2[2];
  if (v11 != v3)
  {
    do
    {
      sub_20C1E9BD4(v7, v12, v3);
      v3 += 216;
      v12 += 216;
    }
    while (v3 != v11);
    v9 = a2[1];
  }
  a2[2] = v12;
  v13 = *a1;
  *a1 = v9;
  a2[1] = v13;
  v14 = a1[1];
  a1[1] = a2[2];
  a2[2] = v14;
  v15 = a1[2];
  a1[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_20C616744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      sub_20C1EEAA0(a4 + v7, (uint64_t *)(a2 + v7));
      v7 += 216;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20C6167A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 216;
    do
    {
      sub_20C1E7E9C(v4 + v2);
      v2 -= 216;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6167C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 216;
      a3 -= 216;
      sub_20C1E75E4(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t sub_20C616820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_20C61687C(a3, v4);
      v4 += 216;
      a3 += 216;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_20C61687C(uint64_t a1, uint64_t a2)
{
  char v4;

  sub_20BF32220((_QWORD *)a1, (_QWORD *)a2);
  v4 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v4;
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  sub_20BF32220((_QWORD *)(a1 + 48), (_QWORD *)(a2 + 48));
  sub_20BF32220((_QWORD *)(a1 + 56), (_QWORD *)(a2 + 56));
  sub_20BF32220((_QWORD *)(a1 + 64), (_QWORD *)(a2 + 64));
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
    sub_20C616940((_QWORD *)(a1 + 144), *(const std::string **)(a2 + 160), 0);
  }
  std::string::operator=((std::string *)(a1 + 184), (const std::string *)(a2 + 184));
  sub_20BF32220((_QWORD *)(a1 + 208), (_QWORD *)(a2 + 208));
  return a1;
}

void sub_20C616940(_QWORD *a1, const std::string *a2, const std::string *a3)
{
  const std::string *v4;
  uint64_t v6;
  uint64_t i;
  std::string *v8;
  BOOL v9;
  std::string *v10;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (std::string *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        sub_20BF32220(&v8->__r_.__value_.__r.__words[2], &v4->__r_.__value_.__r.__words[2]);
        std::string::operator=(v8 + 1, v4 + 1);
        v10 = (std::string *)v8->__r_.__value_.__r.__words[0];
        sub_20BF321C0(a1, v8);
        v4 = (const std::string *)v4->__r_.__value_.__r.__words[0];
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    sub_20C1E7C64((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    sub_20C616A48(a1, (uint64_t *)&v4->__r_.__value_.__r.__words[2]);
    v4 = (const std::string *)v4->__r_.__value_.__r.__words[0];
  }
}

void sub_20C616A18(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_20C1E7C64(v1, v2);
  __cxa_rethrow();
}

void sub_20C616A34(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20C616A48(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v5[3];

  sub_20C616AB0((uint64_t)a1, a2, (uint64_t)v5);
  v3 = sub_20BF321C0(a1, v5[0]);
  v5[0] = 0;
  sub_20C1E9AAC((uint64_t)v5, 0);
  return v3;
}

void sub_20C616A98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1E9AAC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C616AB0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 16;
  v6 = operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *v6 = 0;
  v6[1] = 0;
  result = sub_20C1E9A04(v6 + 2, a2);
  *(_BYTE *)(a3 + 16) = 1;
  v6[1] = bswap64(0x9E3779B97F4A7C55 * (v6[2] & 0xFFFFFFFFFFFFFFF8));
  return result;
}

void sub_20C616B2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C1E9AAC(v1, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::~UsdHydraGenerativeProceduralAPI(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53ECC8;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdHydra/generativeProceduralAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdHydraGenerativeProceduralAPI pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeP"
                            "roceduralAPI::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53ECC8;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C616CD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this)
{
  return 5;
}

uint64_t sub_20C616D00(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498B748, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdHydraGenerativeProceduralAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C616EB8(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53ECC8;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53ECC8;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C616EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C616EB8(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498B748, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdHydraGenerativeProceduralAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B750);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B750))
  {
    __cxa_guard_release(&qword_25498B750);
  }
  return &qword_25498B748;
}

void sub_20C616FD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B750);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B760);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *)__cxa_guard_acquire(&qword_25498B760);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::_GetStaticTfType(v3);
      byte_25498B758 = sub_20C35BD7C((char *)&qword_25498B748, v4, v5);
      __cxa_guard_release(&qword_25498B760);
    }
  }
  return byte_25498B758;
}

void sub_20C617050(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B760);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::_GetStaticTfType(this);
  return &qword_25498B748;
}

void pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::GetProceduralTypeAttr(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
  if (!v3)
    v3 = sub_20C617770(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)((char *)v3 + 168), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C617128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::CreateProceduralTypeAttr(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
  if (!v8)
    v8 = sub_20C617770(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)((char *)v8 + 168), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::GetProceduralSystemAttr(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
  if (!v3)
    v3 = sub_20C617770(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)((char *)v3 + 176), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C617280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::CreateProceduralSystemAttr(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
  if (!v8)
    v8 = sub_20C617770(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)((char *)v8 + 176), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498B780);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B780))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
    if (!v5)
      v5 = sub_20C617770(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
    v6 = *((_QWORD *)v5 + 21);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
    if (!v9)
      v9 = sub_20C617770(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 22);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498B768, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B768, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B780);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B7A0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B7A0))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C617598((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B788, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B7A0);
  }
  if (v1)
    return &qword_25498B788;
  else
    return &qword_25498B768;
}

void sub_20C617514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498B780);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C617598(uint64_t **a1)
{
  qword_25498B790 = 0;
  unk_25498B798 = 0;
  qword_25498B788 = 0;
  sub_20BFC9A6C((char **)&qword_25498B788, ((*(_QWORD *)algn_25498B770 - qword_25498B768) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498B788, (_QWORD *)qword_25498B790, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498B788, (_QWORD *)qword_25498B790, (uint64_t *)qword_25498B768, *(uint64_t **)algn_25498B770, (*(_QWORD *)algn_25498B770 - qword_25498B768) >> 3);
}

void sub_20C61762C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C61764C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C617720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *sub_20C617770(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *result;
  void *v4;

  result = sub_20C6177B8();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C6177F8((uint64_t)result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *sub_20C6177B8()
{
  pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)operator new(0x108uLL);
  pxrInternal__aapl__pxrReserved__::UsdHydraTokensType::UsdHydraTokensType(v0);
  return v0;
}

void sub_20C6177E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6177F8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  void **v92;

  v92 = (void **)(a1 + 240);
  sub_20BEEB2B8(&v92);
  v2 = *(_QWORD *)(a1 + 232);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 216);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 208);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 200);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 192);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *(_QWORD *)(a1 + 184);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *(_QWORD *)(a1 + 176);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *(_QWORD *)(a1 + 168);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *(_QWORD *)(a1 + 160);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *(_QWORD *)(a1 + 152);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *(_QWORD *)(a1 + 144);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(a1 + 136);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *(_QWORD *)(a1 + 128);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *(_QWORD *)(a1 + 120);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *(_QWORD *)(a1 + 112);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *(_QWORD *)(a1 + 104);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *(_QWORD *)(a1 + 96);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *(_QWORD *)(a1 + 88);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *(_QWORD *)(a1 + 80);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *(_QWORD *)(a1 + 72);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *(_QWORD *)(a1 + 64);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *(_QWORD *)(a1 + 56);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *(_QWORD *)(a1 + 48);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *(_QWORD *)(a1 + 40);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *(_QWORD *)(a1 + 32);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *(_QWORD *)(a1 + 24);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *(_QWORD *)(a1 + 16);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *(_QWORD *)(a1 + 8);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v89 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v90 = __ldxr(v89);
    while (__stlxr(v90 - 2, v89));
  }
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdRi_GetRiType@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "");
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRi_GetUsdType(void **a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  int v4;
  char *v5;
  int64_t v6;
  char *v7;
  const char *v8;
  int64_t v9;
  int64_t v10;
  int v11;
  int64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;
  tbb::spin_rw_mutex_v3 ***Instance;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v21;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v23;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v24;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v25;
  uint64_t v26;

  v2 = atomic_load((unsigned __int8 *)&qword_25498B7F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B7F8))
  {
    qword_25498B7A8[0] = (uint64_t)"color";
    v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v21)
      v21 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    qword_25498B7B0 = *((_QWORD *)v21 + 35);
    *(_QWORD *)algn_25498B7B8 = "vector";
    v22 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v22)
      v22 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    qword_25498B7C0 = *((_QWORD *)v22 + 30);
    *(_QWORD *)algn_25498B7C8 = "normal";
    v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v23)
      v23 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    qword_25498B7D0 = *((_QWORD *)v23 + 33);
    *(_QWORD *)algn_25498B7D8 = "point";
    v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v24)
      v24 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    qword_25498B7E0 = *((_QWORD *)v24 + 27);
    *(_QWORD *)algn_25498B7E8 = "matrix";
    v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v25)
      v25 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    qword_25498B7F0 = *((_QWORD *)v25 + 45);
    __cxa_guard_release(&qword_25498B7F8);
  }
  v3 = 0;
  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = (char *)a1;
  else
    v5 = (char *)*a1;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (int64_t)a1[1];
  v7 = &v5[v6];
  do
  {
    v8 = (const char *)qword_25498B7A8[2 * v3];
    v9 = strlen(v8);
    if (!v9)
      return qword_25498B7A8[2 * v3 + 1];
    v10 = v9;
    if (v6 >= v9)
    {
      v11 = *v8;
      v12 = v6;
      v13 = v5;
      do
      {
        v14 = v12 - v10;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v13, v11, v14 + 1);
        if (!v15)
          break;
        v16 = v15;
        if (!memcmp(v15, v8, v10))
        {
          if (v16 == v7 || v16 - v5 == -1)
            break;
          return qword_25498B7A8[2 * v3 + 1];
        }
        v13 = v16 + 1;
        v12 = v7 - (v16 + 1);
      }
      while (v12 >= v10);
    }
    ++v3;
  }
  while (v3 != 5);
  Instance = (tbb::spin_rw_mutex_v3 ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (tbb::spin_rw_mutex_v3 ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v26);
  result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindOrCreateType(Instance, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v26);
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  return result;
}

void sub_20C617E8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B7F8);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::~UsdRiMaterialAPI(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53ED20;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdRi/materialAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdRiMaterialAPI pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::Get(const UsdSta"
                            "gePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53ED20;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C618060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this)
{
  return 5;
}

uint64_t sub_20C618088(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498B800, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdRiMaterialAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C618240(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53ED20;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53ED20;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C61822C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C618240(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498B800, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdRiMaterialAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B808);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B808))
  {
    __cxa_guard_release(&qword_25498B808);
  }
  return &qword_25498B800;
}

void sub_20C61835C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B808);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B818);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *)__cxa_guard_acquire(&qword_25498B818);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetStaticTfType(v3);
      byte_25498B810 = sub_20C35BD7C((char *)&qword_25498B800, v4, v5);
      __cxa_guard_release(&qword_25498B818);
    }
  }
  return byte_25498B810;
}

void sub_20C6183D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B818);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetStaticTfType(this);
  return &qword_25498B800;
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetSurfaceAttr(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v3)
    v3 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v3 + 72), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6184B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::CreateSurfaceAttr(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v8)
    v8 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v8 + 72), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetDisplacementAttr(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v3)
    v3 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v3 + 64), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C618608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::CreateDisplacementAttr(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v8)
    v8 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v8 + 64), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetVolumeAttr(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v3)
    v3 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v3 + 80), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C618760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::CreateVolumeAttr(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v8)
    v8 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v8 + 80), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *SchemaAttributeNames;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int)this;
  v26 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498B838);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B838))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
    if (!v5)
      v5 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
    v6 = *((_QWORD *)v5 + 9);
    v23 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
    if (!v9)
      v9 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
    v10 = *((_QWORD *)v9 + 8);
    v24 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
    if (!v13)
      v13 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
    v14 = *((_QWORD *)v13 + 10);
    v25 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498B820, &v23, 3uLL);
    v17 = &v26;
    do
    {
      v19 = *--v17;
      v18 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    while (v17 != &v23);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B820, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B838);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B858);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B858))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C618AF8((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B840, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B858);
  }
  if (v1)
    return &qword_25498B840;
  else
    return &qword_25498B820;
}

void sub_20C618A68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B838);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C618AF8(uint64_t **a1)
{
  qword_25498B848 = 0;
  unk_25498B850 = 0;
  qword_25498B840 = 0;
  sub_20BFC9A6C((char **)&qword_25498B840, ((unk_25498B828 - qword_25498B820) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498B840, (_QWORD *)qword_25498B848, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498B840, (_QWORD *)qword_25498B848, (uint64_t *)qword_25498B820, unk_25498B828, (unk_25498B828 - qword_25498B820) >> 3);
}

void sub_20C618B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetSourceShaderObject(const pxrInternal__aapl__pxrReserved__::UsdShadeOutput *a1@<X1>, int a2@<W2>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  int v22;
  int v23;
  uint64_t v24;
  void (**v25)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  int v27;
  int v28;
  uint64_t v29;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a1) & 1) == 0)
  {
    LODWORD(v25) = 1;
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v27);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v28);
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25);
    *(_QWORD *)a3 = off_24C53DB40;
    if ((v29 & 7) != 0)
    {
      v10 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    goto LABEL_11;
  }
  if (a2
    && pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsSourceConnectionFromBaseMaterial(a1, v7))
  {
    LODWORD(v25) = 1;
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v27);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v28);
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25);
    *(_QWORD *)a3 = off_24C53DB40;
    if ((v29 & 7) != 0)
    {
      v8 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
LABEL_11:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_20BFD265C(&v27);
    if (v26)
      sub_20C35C614(v26);
    return;
  }
  v20 = 1;
  v21 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v22);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v23);
  v24 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v25, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v20);
  v29 = 0;
  v25 = off_24C53D618;
  if ((v24 & 7) != 0)
  {
    v12 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_20BFD265C(&v22);
  if (v21)
    sub_20C35C614(v21);
  v19 = 0;
  v18 = 0;
  if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource(a1, (uint64_t)&v25, &v19, &v18))
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::UsdShadeShader(a3, (const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v25);
  }
  else
  {
    v20 = 1;
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v22);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v23);
    v24 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v20);
    *(_QWORD *)a3 = off_24C53DB40;
    if ((v24 & 7) != 0)
    {
      v14 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    sub_20BFD265C(&v22);
    if (v21)
      sub_20C35C614(v21);
  }
  if ((v19 & 7) != 0)
  {
    v16 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v25);
}

void sub_20C618E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetBxdfOutput(const pxrInternal__aapl__pxrReserved__::UsdPrim *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v5;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int IsDefined;
  char v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  int v13;
  int v14;
  uint64_t v15;

  v5 = sub_20C618FD4();
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v5 + 24), (uint64_t)&v11);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v11, v6);
  v8 = IsDefined;
  if (IsDefined)
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)a2, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v11);
  if ((v15 & 7) != 0)
  {
    v9 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  if (v12)
    sub_20C35C614(v12);
  if ((v8 & 1) == 0)
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
    *(_QWORD *)(a2 + 24) = 0;
  }
}

void sub_20C618FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C372B54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_20C618FD4()
{
  char *v0;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  void ***v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  void **v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_25498B860);
  if (!v0)
  {
    v0 = (char *)operator new(0x40uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "outputs:out", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "ri", 0);
    v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "ri:bxdf", 0);
    v4 = v0 + 24;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 24, "outputs:ri:bxdf", 0);
    v5 = v0 + 32;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 32, "riLook:bxdf", 0);
    v6 = *(void ***)v0;
    v42 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v42 = (void **)v7;
    }
    v9 = (unsigned int *)*v2;
    v43 = v9;
    if ((v9 & 7) != 0)
    {
      v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 2, v10));
      if ((v11 & 1) == 0)
        v43 = v10;
    }
    v12 = (unsigned int *)*v3;
    v44 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        v44 = v13;
    }
    v15 = (unsigned int *)*v4;
    v45 = v15;
    if ((v15 & 7) != 0)
    {
      v16 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 2, v16));
      if ((v17 & 1) == 0)
        v45 = v16;
    }
    v18 = (unsigned int *)*v5;
    v46 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v46 = v19;
    }
    *((_QWORD *)v0 + 5) = 0;
    *((_QWORD *)v0 + 6) = 0;
    *((_QWORD *)v0 + 7) = 0;
    v21 = operator new(0x28uLL);
    v22 = 0;
    *((_QWORD *)v0 + 5) = v21;
    *((_QWORD *)v0 + 6) = v21;
    *((_QWORD *)v0 + 7) = v21 + 5;
    do
    {
      v23 = (unint64_t)(&v42)[v22];
      *v21 = v23;
      if ((v23 & 7) != 0)
      {
        v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 2, v24));
        if ((v25 & 1) == 0)
          *v21 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v22;
      ++v21;
    }
    while (v22 != 5);
    v26 = (void ***)&v47;
    *((_QWORD *)v0 + 6) = v21;
    do
    {
      v28 = (uint64_t)*--v26;
      v27 = v28;
      if ((v28 & 7) != 0)
      {
        v29 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
    }
    while (v26 != &v42);
    while (!__ldaxr(&qword_25498B860))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498B860))
        return (unint64_t)v0;
    }
    __clrex();
    v42 = (void **)(v0 + 40);
    sub_20BEEB2B8(&v42);
    if ((*v5 & 7) != 0)
    {
      v32 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    if ((*v4 & 7) != 0)
    {
      v34 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    if ((*v3 & 7) != 0)
    {
      v36 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v37 = __ldxr(v36);
      while (__stlxr(v37 - 2, v36));
    }
    if ((*v2 & 7) != 0)
    {
      v38 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stlxr(v39 - 2, v38));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v40 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v41 = __ldxr(v40);
      while (__stlxr(v41 - 2, v40));
    }
    operator delete(v0);
    return atomic_load(&qword_25498B860);
  }
  return (unint64_t)v0;
}

void sub_20C619320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;

  sub_20BEEB2B8(&a9);
  v22 = &a16;
  while (1)
  {
    v24 = *--v22;
    v23 = v24;
    if ((v24 & 7) != 0)
    {
      v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    if (v22 == (uint64_t *)&a11)
    {
      if ((*v20 & 7) != 0)
      {
        v27 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      if ((*v19 & 7) != 0)
      {
        v29 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
      if ((*v18 & 7) != 0)
      {
        v31 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      if ((*v17 & 7) != 0)
      {
        v33 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      if ((*v16 & 7) != 0)
      {
        v35 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      operator delete(v16);
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetSurface(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, int a2@<W1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v11;
  int IsOutput;
  char v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  int v25;
  int v26;
  uint64_t v27;

  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetSurfaceOutput(this, (uint64_t)&v23);
  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetSourceShaderObject((const pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v23, a2, a3);
  if ((v27 & 7) != 0)
  {
    v6 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_20BFD265C(&v25);
  if (v24)
    sub_20C35C614(v24);
  v8 = *((_QWORD *)a3 + 1);
  if (!v8
    || (*(_BYTE *)(v8 + 57) & 8) != 0
    || ((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))(*(_QWORD *)a3 + 32))(a3) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader(a3);
    sub_20C35C4F8((uint64_t)&v18, (uint64_t *)this + 1, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetBxdfOutput((const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v18, (uint64_t)&v23);
    if ((v22 & 7) != 0)
    {
      v9 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
    sub_20BFD265C(&v20);
    if (v19)
      sub_20C35C614(v19);
    IsOutput = pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v23, v11);
    v13 = IsOutput;
    if (IsOutput)
      pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetSourceShaderObject((const pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v23, a2, a3);
    if ((v27 & 7) != 0)
    {
      v14 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
    sub_20BFD265C(&v25);
    if (v24)
      sub_20C35C614(v24);
    if ((v13 & 1) == 0)
    {
      v23 = 1;
      v24 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v25);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v26);
      v27 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v23);
      *(_QWORD *)a3 = off_24C53DB40;
      if ((v27 & 7) != 0)
      {
        v16 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
      sub_20BFD265C(&v25);
      if (v24)
        sub_20C35C614(v24);
    }
  }
}

void sub_20C619638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v13;

  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader(v13);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetSurfaceOutput(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v6[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD v11[3];

  sub_20C35C4F8((uint64_t)v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v11, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v6);
  v11[0] = off_24C53D820;
  v3 = sub_20C618FD4();
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutput((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v11, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 8), a2);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v11);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C61973C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetDisplacement(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, int a2@<W1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetDisplacementOutput(this, (uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetSourceShaderObject((const pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v7, a2, a3);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C6197E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C5BCAB8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetDisplacementOutput(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v6[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD v11[3];

  sub_20C35C4F8((uint64_t)v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v11, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v6);
  v11[0] = off_24C53D820;
  v3 = sub_20C618FD4();
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetDisplacementOutput((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v11, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 8), a2);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v11);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C6198A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetVolume(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, int a2@<W1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetVolumeOutput(this, (uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetSourceShaderObject((const pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v7, a2, a3);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C619950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C5BCAB8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetVolumeOutput(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v6[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD v11[3];

  sub_20C35C4F8((uint64_t)v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v11, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v6);
  v11[0] = off_24C53D820;
  v3 = sub_20C618FD4();
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetVolumeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v11, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 8), a2);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v11);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C619A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::SetSurfaceSource(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v12;
  int v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD v18[3];
  _BYTE v19[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int v21;
  int v22;
  uint64_t v23;

  sub_20C35C4F8((uint64_t)&v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v18, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12);
  v18[0] = off_24C53D820;
  v3 = sub_20C618FD4();
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateSurfaceOutput((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 8), (uint64_t)v19);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v18);
  if ((v17 & 7) != 0)
  {
    v4 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a2))
  {
    sub_20BFD6E54(&v12, a2);
    sub_20BFD6EA4(&v13, (_DWORD *)a2 + 1);
  }
  else
  {
    v7 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C618FD4();
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, v7, &v12);
  }
  v8 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v19, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v12, v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if ((v23 & 7) != 0)
  {
    v9 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  if (v20)
    sub_20C35C614(v20);
  return v8;
}

void sub_20C619B94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18(va);
  sub_20C5BCAB8(v2 - 48);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::SetDisplacementSource(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v12;
  int v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD v18[3];
  _BYTE v19[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int v21;
  int v22;
  uint64_t v23;

  sub_20C35C4F8((uint64_t)&v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v18, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12);
  v18[0] = off_24C53D820;
  v3 = sub_20C618FD4();
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateDisplacementOutput((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 8), (uint64_t)v19);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v18);
  if ((v17 & 7) != 0)
  {
    v4 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a2))
  {
    sub_20BFD6E54(&v12, a2);
    sub_20BFD6EA4(&v13, (_DWORD *)a2 + 1);
  }
  else
  {
    v7 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C618FD4();
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, v7, &v12);
  }
  v8 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v19, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v12, v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if ((v23 & 7) != 0)
  {
    v9 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  if (v20)
    sub_20C35C614(v20);
  return v8;
}

void sub_20C619D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18(va);
  sub_20C5BCAB8(v2 - 48);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::SetVolumeSource(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v12;
  int v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD v18[3];
  _BYTE v19[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int v21;
  int v22;
  uint64_t v23;

  sub_20C35C4F8((uint64_t)&v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v18, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12);
  v18[0] = off_24C53D820;
  v3 = sub_20C618FD4();
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateVolumeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 8), (uint64_t)v19);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v18);
  if ((v17 & 7) != 0)
  {
    v4 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a2))
  {
    sub_20BFD6E54(&v12, a2);
    sub_20BFD6EA4(&v13, (_DWORD *)a2 + 1);
  }
  else
  {
    v7 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C618FD4();
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, v7, &v12);
  }
  v8 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v19, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v12, v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if ((v23 & 7) != 0)
  {
    v9 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  if (v20)
    sub_20C35C614(v20);
  return v8;
}

void sub_20C619EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18(va);
  sub_20C5BCAB8(v2 - 48);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::ComputeInterfaceInputConsumersMap(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  _BYTE v7[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[3];

  sub_20C35C4F8((uint64_t)v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v7);
  v12[0] = off_24C53DD78;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ComputeInterfaceInputConsumersMap((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C619FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)va1);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C619FF8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C61A0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdRiTokensType *sub_20C61A11C(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *result;
  void *v4;

  result = sub_20C61A164();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C61A1A4((uint64_t)result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdRiTokensType *sub_20C61A164()
{
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)operator new(0xB0uLL);
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType::UsdRiTokensType(v0);
  return v0;
}

void sub_20C61A190(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C61A1A4(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  void **v59;

  v59 = (void **)(a1 + 152);
  sub_20BEEB2B8(&v59);
  v2 = *(_QWORD *)(a1 + 144);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 136);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 128);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 120);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 112);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 104);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *(_QWORD *)(a1 + 96);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *(_QWORD *)(a1 + 88);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *(_QWORD *)(a1 + 80);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *(_QWORD *)(a1 + 72);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *(_QWORD *)(a1 + 64);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *(_QWORD *)(a1 + 56);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(a1 + 48);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *(_QWORD *)(a1 + 40);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *(_QWORD *)(a1 + 32);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *(_QWORD *)(a1 + 24);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *(_QWORD *)(a1 + 16);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *(_QWORD *)(a1 + 8);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v56 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v57 = __ldxr(v56);
    while (__stlxr(v57 - 2, v56));
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::~UsdRiRenderPassAPI(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53ED78;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdRi/renderPassAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdRiRenderPassAPI pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53ED78;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C61A5D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this)
{
  return 5;
}

uint64_t sub_20C61A5F8(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498B868, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdRiRenderPassAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C61A7B0(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53ED78;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53ED78;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C61A79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C61A7B0(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498B868, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdRiRenderPassAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B870);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B870))
  {
    __cxa_guard_release(&qword_25498B870);
  }
  return &qword_25498B868;
}

void sub_20C61A8CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B870);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B880);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *)__cxa_guard_acquire(&qword_25498B880);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::_GetStaticTfType(v3);
      byte_25498B878 = sub_20C35BD7C((char *)&qword_25498B868, v4, v5);
      __cxa_guard_release(&qword_25498B880);
    }
  }
  return byte_25498B878;
}

void sub_20C61A948(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B880);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::_GetStaticTfType(this);
  return &qword_25498B868;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498B8A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B8A0))
  {
    qword_25498B888 = 0;
    qword_25498B890 = 0;
    qword_25498B898 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B888, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B8A0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B8C0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B8C0))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C61AA70((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B8A8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B8C0);
  }
  if (v1)
    return &qword_25498B8A8;
  else
    return &qword_25498B888;
}

void sub_20C61AA58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B8C0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C61AA70(uint64_t **a1)
{
  qword_25498B8B0 = 0;
  unk_25498B8B8 = 0;
  qword_25498B8A8 = 0;
  sub_20BFC9A6C((char **)&qword_25498B8A8, (((uint64_t)qword_25498B890 - qword_25498B888) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498B8A8, (_QWORD *)qword_25498B8B0, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498B8A8, (_QWORD *)qword_25498B8B0, (uint64_t *)qword_25498B888, qword_25498B890, ((uint64_t)qword_25498B890 - qword_25498B888) >> 3);
}

void sub_20C61AB04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::GetCameraVisibilityCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v3)
    v3 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  sub_20C37A850(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (uint64_t *)v3 + 1);
  *(_QWORD *)a2 = off_24C537740;
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C61ABD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::GetMatteCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v3)
    v3 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  sub_20C37A850(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (uint64_t *)v3 + 7);
  *(_QWORD *)a2 = off_24C537740;
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C61ACA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C61ACBC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C61AD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiConvertToRManInterpolateBoundary(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v4;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v5;
  unint64_t v6;
  const char *v7;
  _QWORD v9[4];
  char v10;
  int v11;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v3 + 85) & 0xFFFFFFFFFFFFFFF8))
  {
    v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v4)
      v4 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v4 + 32) & 0xFFFFFFFFFFFFFFF8))
      return 1;
    v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5)
      v5 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v6 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFF8;
    if (v6 == (*((_QWORD *)v5 + 33) & 0xFFFFFFFFFFFFFFF8))
      return 2;
    v9[0] = "usdRi/rmanUtilities.cpp";
    v9[1] = "UsdRiConvertToRManInterpolateBoundary";
    v9[2] = 42;
    v9[3] = "int pxrInternal__aapl__pxrReserved__::UsdRiConvertToRManInterpolateBoundary(const TfToken &)";
    v10 = 0;
    v11 = 1;
    if (v6)
    {
      v7 = (const char *)(v6 + 16);
      if (*(char *)(v6 + 39) < 0)
        v7 = *(const char **)v7;
    }
    else
    {
      v7 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v9, (pxrInternal__aapl__pxrReserved__ *)"Invalid InterpolateBoundary Token: %s", v7);
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiConvertFromRManInterpolateBoundary(pxrInternal__aapl__pxrReserved__ *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v1;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v4;
  _QWORD v5[4];
  char v6;
  int v7;

  if ((_DWORD)this == 2)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3)
      v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    return (uint64_t)v3 + 264;
  }
  else if ((_DWORD)this == 1)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v4)
      v4 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    return (uint64_t)v4 + 256;
  }
  else
  {
    if ((_DWORD)this)
    {
      v5[0] = "usdRi/rmanUtilities.cpp";
      v5[1] = "UsdRiConvertFromRManInterpolateBoundary";
      v5[2] = 59;
      v5[3] = "const TfToken &pxrInternal__aapl__pxrReserved__::UsdRiConvertFromRManInterpolateBoundary(int)";
      v6 = 0;
      v7 = 1;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"Invalid InterpolateBoundary int: %d", (_DWORD)this);
    }
    v1 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v1)
      v1 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    return (uint64_t)v1 + 680;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiConvertToRManFaceVaryingLinearInterpolation(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v4;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v5;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  unint64_t v9;
  const char *v10;
  _QWORD v12[4];
  char v13;
  int v14;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v3 + 1) & 0xFFFFFFFFFFFFFFF8))
    return 0;
  v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v4)
    v4 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v4 + 20) & 0xFFFFFFFFFFFFFFF8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5)
      v5 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v5 + 21) & 0xFFFFFFFFFFFFFFF8))
    {
      v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v6)
        v6 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v6 + 22) & 0xFFFFFFFFFFFFFFF8))
      {
        v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v7)
          v7 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 85) & 0xFFFFFFFFFFFFFFF8))
          return 2;
        v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v8)
          v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        v9 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFF8;
        if (v9 == (*((_QWORD *)v8 + 7) & 0xFFFFFFFFFFFFFFF8))
          return 3;
        v12[0] = "usdRi/rmanUtilities.cpp";
        v12[1] = "UsdRiConvertToRManFaceVaryingLinearInterpolation";
        v12[2] = 83;
        v12[3] = "int pxrInternal__aapl__pxrReserved__::UsdRiConvertToRManFaceVaryingLinearInterpolation(const TfToken &)";
        v13 = 0;
        v14 = 1;
        if (v9)
        {
          v10 = (const char *)(v9 + 16);
          if (*(char *)(v9 + 39) < 0)
            v10 = *(const char **)v10;
        }
        else
        {
          v10 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v12, (pxrInternal__aapl__pxrReserved__ *)"Invalid FaceVaryingLinearInterpolation Token: %s", v10);
      }
    }
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiConvertFromRManFaceVaryingLinearInterpolation(pxrInternal__aapl__pxrReserved__ *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v1;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v4;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v5;
  _QWORD v6[4];
  char v7;
  int v8;

  switch((int)this)
  {
    case 0:
      v1 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v1)
        v1 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      result = (uint64_t)v1 + 8;
      break;
    case 1:
      v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v4)
        v4 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      result = (uint64_t)v4 + 168;
      break;
    case 2:
      goto LABEL_6;
    case 3:
      v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v5)
        v5 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      result = (uint64_t)v5 + 56;
      break;
    default:
      v6[0] = "usdRi/rmanUtilities.cpp";
      v6[1] = "UsdRiConvertFromRManFaceVaryingLinearInterpolation";
      v6[2] = 102;
      v6[3] = "const TfToken &pxrInternal__aapl__pxrReserved__::UsdRiConvertFromRManFaceVaryingLinearInterpolation(int)";
      v7 = 0;
      v8 = 1;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"Invalid FaceVaryingLinearInterpolation int: %d", (_DWORD)this);
LABEL_6:
      v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v3)
        v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      result = (uint64_t)v3 + 680;
      break;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiConvertToRManTriangleSubdivisionRule(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v4;
  unint64_t v5;
  const char *v6;
  _QWORD v8[4];
  char v9;
  int v10;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v3 + 12) & 0xFFFFFFFFFFFFFFF8))
  {
    v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v4)
      v4 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v5 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFF8;
    if (v5 == (*((_QWORD *)v4 + 127) & 0xFFFFFFFFFFFFFFF8))
      return 2;
    v8[0] = "usdRi/rmanUtilities.cpp";
    v8[1] = "UsdRiConvertToRManTriangleSubdivisionRule";
    v8[2] = 117;
    v8[3] = "int pxrInternal__aapl__pxrReserved__::UsdRiConvertToRManTriangleSubdivisionRule(const TfToken &)";
    v9 = 0;
    v10 = 1;
    if (v5)
    {
      v6 = (const char *)(v5 + 16);
      if (*(char *)(v5 + 39) < 0)
        v6 = *(const char **)v6;
    }
    else
    {
      v6 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v8, (pxrInternal__aapl__pxrReserved__ *)"Invalid TriangleSubdivisionRule Token: %s", v6);
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiConvertFromRManTriangleSubdivisionRule(pxrInternal__aapl__pxrReserved__ *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v1;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  _QWORD v4[4];
  char v5;
  int v6;

  if ((_DWORD)this == 2)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3)
      v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    return (uint64_t)v3 + 1016;
  }
  else
  {
    if ((_DWORD)this)
    {
      v4[0] = "usdRi/rmanUtilities.cpp";
      v4[1] = "UsdRiConvertFromRManTriangleSubdivisionRule";
      v4[2] = 133;
      v4[3] = "const TfToken &pxrInternal__aapl__pxrReserved__::UsdRiConvertFromRManTriangleSubdivisionRule(int)";
      v5 = 0;
      v6 = 1;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"Invalid TriangleSubdivisionRule int: %d", (_DWORD)this);
    }
    v1 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v1)
      v1 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    return (uint64_t)v1 + 96;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::~UsdRiSplineAPI(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)this = off_24C53EDD0;
  v1 = *((_QWORD *)this + 4);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
}

{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)this = off_24C53EDD0;
  v1 = *((_QWORD *)this + 4);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
}

{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  void *v4;

  *(_QWORD *)this = off_24C53EDD0;
  v1 = *((_QWORD *)this + 4);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v4);
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    sub_20C61CF54(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdRi/splineAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdRiSplineAPI pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::Get(const UsdStagePt"
                            "r &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    sub_20C61CF54(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C61B688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this)
{
  return 5;
}

uint64_t sub_20C61B6B0(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498B8C8, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdRiSplineAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C61B854(this))
  {
    sub_20C61CF54(a2, this);
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    sub_20C61CF54(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C61B840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C61B854(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498B8C8, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdRiSplineAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B8D0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B8D0))
  {
    __cxa_guard_release(&qword_25498B8D0);
  }
  return &qword_25498B8C8;
}

void sub_20C61B970(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B8D0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B8E0);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *)__cxa_guard_acquire(&qword_25498B8E0);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetStaticTfType(v3);
      byte_25498B8D8 = sub_20C35BD7C((char *)&qword_25498B8C8, v4, v5);
      __cxa_guard_release(&qword_25498B8E0);
    }
  }
  return byte_25498B8D8;
}

void sub_20C61B9EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B8E0);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetStaticTfType(this);
  return &qword_25498B8C8;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498B900);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B900))
  {
    qword_25498B8E8 = 0;
    unk_25498B8F0 = 0;
    qword_25498B8F8 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B8E8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B900);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B920);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B920))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_25498B908 = 0;
    unk_25498B910 = 0;
    qword_25498B918 = 0;
    sub_20BFE538C(&qword_25498B908, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B908, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B920);
  }
  if (v1)
    return &qword_25498B908;
  else
    return &qword_25498B8E8;
}

void sub_20C61BB1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B920);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetScopedPropertyName(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v6;
  uint64_t *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  uint64_t *v9;
  void *v10[2];
  char v11;
  void *__p;
  char v13;

  if ((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v6)
    v6 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if ((*((_QWORD *)v6 + 13) & 0xFFFFFFFFFFFFFFF8) != 0)
    v7 = (uint64_t *)((*((_QWORD *)v6 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v7 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((char *)EmptyString, (uint64_t)v7, (uint64_t)v10);
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    v9 = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((char *)v10, (uint64_t)v9, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  if (v13 < 0)
    operator delete(__p);
  if (v11 < 0)
    operator delete(v10[0]);
}

void sub_20C61BC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::GetInterpolationAttr(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  _BYTE v9[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v4)
    v4 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetScopedPropertyName(this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v4 + 40), (uint64_t)&v14);
  sub_20C35C4F8((uint64_t)v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14, a2);
  if ((v13 & 7) != 0)
  {
    v5 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
}

void sub_20C61BD2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  v4 = *(_QWORD *)(v2 - 24);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::CreateInterpolationAttr(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v8)
    v8 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetScopedPropertyName(this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v8 + 40), (uint64_t)&v12);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
  if ((v12 & 7) != 0)
  {
    v10 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::GetPositionsAttr(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  _BYTE v9[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v4)
    v4 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetScopedPropertyName(this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v4 + 88), (uint64_t)&v14);
  sub_20C35C4F8((uint64_t)v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14, a2);
  if ((v13 & 7) != 0)
  {
    v5 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
}

void sub_20C61BF34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  v4 = *(_QWORD *)(v2 - 24);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::CreatePositionsAttr(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v8)
    v8 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetScopedPropertyName(this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v8 + 88), (uint64_t)&v12);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 1, a2, a3, a4);
  if ((v12 & 7) != 0)
  {
    v10 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::GetValuesAttr(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  _BYTE v9[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v4)
    v4 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetScopedPropertyName(this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v4 + 112), (uint64_t)&v14);
  sub_20C35C4F8((uint64_t)v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14, a2);
  if ((v13 & 7) != 0)
  {
    v5 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
}

void sub_20C61C13C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  v4 = *(_QWORD *)(v2 - 24);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::CreateValuesAttr(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v8)
    v8 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetScopedPropertyName(this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v8 + 112), (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, (pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *)((char *)this + 40), 0, 1, a2, a3, a4);
  if ((v11 & 7) != 0)
  {
    v9 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::Validate(_QWORD *a1, std::string *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v4;
  _QWORD **v5;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v9;
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v10;
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType *v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  uint64_t v13;
  const std::string::value_type *v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v15;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v16;
  uint64_t v17;
  char *v18;
  float *v19;
  uint64_t v20;
  char *v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  std::string::size_type v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v40;
  void *v41;
  std::string *v42;
  __int128 v43;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v44;
  pxrInternal__aapl__pxrReserved__::TfToken *v45;
  uint64_t *EmptyString;
  int v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  void **v54;
  std::string::size_type v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  pxrInternal__aapl__pxrReserved__::TfToken *v60;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v61;
  std::string *v62;
  __int128 v63;
  void **v64;
  std::string::size_type v65;
  std::string *v66;
  __int128 v67;
  pxrInternal__aapl__pxrReserved__::TfToken *v68;
  uint64_t *v69;
  int v70;
  const std::string::value_type *v71;
  std::string::size_type v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  void **v77;
  std::string::size_type v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  void *v85[2];
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  std::string v89;
  void *__p[2];
  __int128 v91;
  float *v92;
  unint64_t v93;
  unint64_t TypeName;
  std::string v95;
  std::string v96;
  uint64_t v97;
  char v98[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v99;
  int v100;
  int v101;
  uint64_t v102;
  char v103[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v104;
  int v105;
  int v106;
  uint64_t v107;
  char v108[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v109;
  int v110;
  int v111;
  uint64_t v112;

  if (!a1[4])
  {
    std::string::append(this, "SplineAPI is not correctly initialized");
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::GetInterpolationAttr((pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *)a1, (uint64_t)v108);
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::GetPositionsAttr((pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *)a1, (uint64_t)v103);
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::GetValuesAttr((pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *)a1, (uint64_t)v98);
  v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v4)
    v4 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  v5 = (_QWORD **)(a1 + 5);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(v5, (_QWORD **)v4 + 64))
    goto LABEL_172;
  v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v7)
    v7 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(v5, (_QWORD **)v7 + 92))
  {
LABEL_172:
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v108, v6))
    {
      if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v103, v8) & 1) != 0)
      {
        v97 = 0;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v108, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v97);
        v9 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
        if (!v9)
          v9 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
        if ((v97 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v9 + 4) & 0xFFFFFFFFFFFFFFF8))
        {
          v10 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
          if (!v10)
            v10 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
          if ((v97 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v10 + 6) & 0xFFFFFFFFFFFFFFF8))
          {
            v11 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
            if (!v11)
              v11 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
            if ((v97 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v11 + 2) & 0xFFFFFFFFFFFFFFF8))
            {
              v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
              if (!v12)
                v12 = sub_20C61A11C(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
              if ((v97 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8))
              {
                if ((v97 & 0xFFFFFFFFFFFFFFF8) == 0)
                  pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
                std::operator+<char>();
                v62 = std::string::append((std::string *)v85, "'");
                v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
                *(_QWORD *)&v91 = *((_QWORD *)&v62->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v63;
                v62->__r_.__value_.__l.__size_ = 0;
                v62->__r_.__value_.__r.__words[2] = 0;
                v62->__r_.__value_.__r.__words[0] = 0;
                if ((SBYTE7(v91) & 0x80u) == 0)
                  v64 = __p;
                else
                  v64 = (void **)__p[0];
                if ((SBYTE7(v91) & 0x80u) == 0)
                  v65 = BYTE7(v91);
                else
                  v65 = (std::string::size_type)__p[1];
                std::string::append(this, (const std::string::value_type *)v64, v65);
                if (SBYTE7(v91) < 0)
                  operator delete(__p[0]);
                if (SBYTE7(v86) < 0)
                  operator delete(v85[0]);
LABEL_128:
                v13 = 0;
                goto LABEL_166;
              }
            }
          }
        }
        __p[0] = (void *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v103);
        v16 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v16)
          v16 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)__p, (_QWORD **)v16 + 64))
        {
          TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v98);
          AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&TypeName, (unsigned int **)&v89);
          if ((v89.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
          std::operator+<char>();
          v42 = std::string::append(&v95, "' but expected '");
          v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
          v96.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v43;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          v44 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v44)
            v44 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          v45 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)v44 + 512, (unsigned int **)&v93);
          if ((v93 & 0xFFFFFFFFFFFFFFF8) != 0)
            EmptyString = (uint64_t *)((v93 & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v45);
          v47 = *((char *)EmptyString + 23);
          if (v47 >= 0)
            v48 = (const std::string::value_type *)EmptyString;
          else
            v48 = (const std::string::value_type *)*EmptyString;
          if (v47 >= 0)
            v49 = *((unsigned __int8 *)EmptyString + 23);
          else
            v49 = EmptyString[1];
          v50 = std::string::append(&v96, v48, v49);
          v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          *(_QWORD *)&v86 = *((_QWORD *)&v50->__r_.__value_.__l + 2);
          *(_OWORD *)v85 = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          v52 = std::string::append((std::string *)v85, "'");
          v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
          *(_QWORD *)&v91 = *((_QWORD *)&v52->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v53;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          if ((SBYTE7(v91) & 0x80u) == 0)
            v54 = __p;
          else
            v54 = (void **)__p[0];
          if ((SBYTE7(v91) & 0x80u) == 0)
            v55 = BYTE7(v91);
          else
            v55 = (std::string::size_type)__p[1];
          std::string::append(this, (const std::string::value_type *)v54, v55);
          if (SBYTE7(v91) < 0)
            operator delete(__p[0]);
          if (SBYTE7(v86) < 0)
            operator delete(v85[0]);
          if ((v93 & 7) != 0)
          {
            v56 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFFFF8);
            do
              v57 = __ldxr(v56);
            while (__stlxr(v57 - 2, v56));
          }
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v95.__r_.__value_.__l.__data_);
          if ((v89.__r_.__value_.__s.__data_[0] & 7) != 0)
          {
            v58 = (unsigned int *)(v89.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v59 = __ldxr(v58);
            while (__stlxr(v59 - 2, v58));
          }
          goto LABEL_128;
        }
        v92 = 0;
        *(_OWORD *)__p = 0u;
        v91 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>((uint64_t)v103, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p);
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v17, v18);
        v19 = v92;
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v20, v21);
        v22 = &v92[(uint64_t)__p[0]];
        if (v19 == v22)
        {
LABEL_38:
          if (v19 != v22)
          {
            std::string::append(this, "Positions attribute must be sorted in increasing order");
            goto LABEL_164;
          }
        }
        else
        {
          v23 = v19 + 1;
          while (v23 != v22)
          {
            v25 = *(v23 - 1);
            v24 = *v23++;
            if (v24 < v25)
            {
              v19 = v23 - 1;
              goto LABEL_38;
            }
          }
        }
        v85[0] = (void *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v98);
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)v85, v5))
        {
          v40 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v40)
            v40 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(v5, (_QWORD **)v40 + 64))
          {
            v87 = 0;
            *(_OWORD *)v85 = 0u;
            v86 = 0u;
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>((uint64_t)v98, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v85);
            v41 = v85[0];
            sub_20BF5618C((uint64_t)v85);
          }
          else
          {
            v61 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!v61)
              v61 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(v5, (_QWORD **)v61 + 92))
            {
              v87 = 0;
              *(_OWORD *)v85 = 0u;
              v86 = 0u;
              pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((uint64_t)v98, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v85);
              v41 = v85[0];
              sub_20BF5618C((uint64_t)v85);
            }
            else
            {
              v41 = 0;
            }
          }
          if (__p[0] == v41)
          {
            v13 = 1;
LABEL_165:
            sub_20BF5618C((uint64_t)__p);
LABEL_166:
            if ((v97 & 7) != 0)
            {
              v83 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
              do
                v84 = __ldxr(v83);
              while (__stlxr(v84 - 2, v83));
            }
            goto LABEL_55;
          }
          std::string::append(this, "Values attribute and positions attribute must have the same number of entries");
        }
        else
        {
          v93 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v98);
          v60 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&v93, (unsigned int **)&TypeName);
          if ((TypeName & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v60);
          std::operator+<char>();
          v66 = std::string::append(&v89, "' but expected '");
          v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
          v95.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v67;
          v66->__r_.__value_.__l.__size_ = 0;
          v66->__r_.__value_.__r.__words[2] = 0;
          v66->__r_.__value_.__r.__words[0] = 0;
          v68 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)v5, (unsigned int **)&v88);
          if ((v88 & 0xFFFFFFFFFFFFFFF8) != 0)
            v69 = (uint64_t *)((v88 & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            v69 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v68);
          v70 = *((char *)v69 + 23);
          if (v70 >= 0)
            v71 = (const std::string::value_type *)v69;
          else
            v71 = (const std::string::value_type *)*v69;
          if (v70 >= 0)
            v72 = *((unsigned __int8 *)v69 + 23);
          else
            v72 = v69[1];
          v73 = std::string::append(&v95, v71, v72);
          v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
          v96.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v74;
          v73->__r_.__value_.__l.__size_ = 0;
          v73->__r_.__value_.__r.__words[2] = 0;
          v73->__r_.__value_.__r.__words[0] = 0;
          v75 = std::string::append(&v96, "'");
          v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
          *(_QWORD *)&v86 = *((_QWORD *)&v75->__r_.__value_.__l + 2);
          *(_OWORD *)v85 = v76;
          v75->__r_.__value_.__l.__size_ = 0;
          v75->__r_.__value_.__r.__words[2] = 0;
          v75->__r_.__value_.__r.__words[0] = 0;
          if ((SBYTE7(v86) & 0x80u) == 0)
            v77 = v85;
          else
            v77 = (void **)v85[0];
          if ((SBYTE7(v86) & 0x80u) == 0)
            v78 = BYTE7(v86);
          else
            v78 = (std::string::size_type)v85[1];
          std::string::append(this, (const std::string::value_type *)v77, v78);
          if (SBYTE7(v86) < 0)
            operator delete(v85[0]);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if ((v88 & 7) != 0)
          {
            v79 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
            do
              v80 = __ldxr(v79);
            while (__stlxr(v80 - 2, v79));
          }
          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v95.__r_.__value_.__l.__data_);
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v89.__r_.__value_.__l.__data_);
          if ((TypeName & 7) != 0)
          {
            v81 = (unsigned int *)(TypeName & 0xFFFFFFFFFFFFFFF8);
            do
              v82 = __ldxr(v81);
            while (__stlxr(v82 - 2, v81));
          }
        }
LABEL_164:
        v13 = 0;
        goto LABEL_165;
      }
      v14 = "Could not get the position attribute.";
    }
    else
    {
      v14 = "Could not get the interpolation attribute.";
    }
    std::string::append(this, v14);
  }
  else
  {
    v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)v5, (unsigned int **)&v96);
    if ((v96.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
    std::operator+<char>();
    v26 = std::string::append((std::string *)v85, "'");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    *(_QWORD *)&v91 = *((_QWORD *)&v26->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v91) & 0x80u) == 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if ((SBYTE7(v91) & 0x80u) == 0)
      v29 = BYTE7(v91);
    else
      v29 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v28, v29);
    if (SBYTE7(v91) < 0)
      operator delete(__p[0]);
    if (SBYTE7(v86) < 0)
      operator delete(v85[0]);
    if ((v96.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v30 = (unsigned int *)(v96.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
  }
  v13 = 0;
LABEL_55:
  if ((v102 & 7) != 0)
  {
    v32 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v101);
  sub_20BFD265C(&v100);
  if (v99)
    sub_20C35C614(v99);
  if ((v107 & 7) != 0)
  {
    v34 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v106);
  sub_20BFD265C(&v105);
  if (v104)
    sub_20C35C614(v104);
  if ((v112 & 7) != 0)
  {
    v36 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v111);
  sub_20BFD265C(&v110);
  if (v109)
    sub_20C35C614(v109);
  return v13;
}

void sub_20C61CB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  sub_20BF5618C((uint64_t)&__p);
  sub_20BF5618C((uint64_t)&a25);
  v50 = *(_QWORD *)(v48 - 152);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  sub_20C372B54(v48 - 144);
  sub_20C372B54(v48 - 112);
  sub_20C372B54(v48 - 80);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C61CE30()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C61CF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_20C61CF54(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v3;

  v3 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a1, a2);
  *(_QWORD *)v3 = off_24C53EDD0;
  *((_QWORD *)v3 + 3) = 0;
  *((_QWORD *)v3 + 4) = 0;
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v3 + 40));
  return a1;
}

void sub_20C61CF90(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *v1;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *((_QWORD *)v1 + 4);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::~UsdRiStatementsAPI(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53EE28;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdRi/statementsAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdRiStatementsAPI pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53EE28;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C61D158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this)
{
  return 5;
}

uint64_t sub_20C61D180(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498B928, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdRiStatementsAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C61D338(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53EE28;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53EE28;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C61D324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C61D338(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498B928, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdRiStatementsAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B930);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B930))
  {
    __cxa_guard_release(&qword_25498B930);
  }
  return &qword_25498B928;
}

void sub_20C61D454(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B930);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B940);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *)__cxa_guard_acquire(&qword_25498B940);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::_GetStaticTfType(v3);
      byte_25498B938 = sub_20C35BD7C((char *)&qword_25498B928, v4, v5);
      __cxa_guard_release(&qword_25498B940);
    }
  }
  return byte_25498B938;
}

void sub_20C61D4D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B940);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::_GetStaticTfType(this);
  return &qword_25498B928;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498B960);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B960))
  {
    qword_25498B948 = 0;
    unk_25498B950 = 0;
    qword_25498B958 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B948, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B960);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B980);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B980))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_25498B968 = 0;
    unk_25498B970 = 0;
    qword_25498B978 = 0;
    sub_20BFE538C(&qword_25498B968, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B968, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B980);
  }
  if (v1)
    return &qword_25498B968;
  else
    return &qword_25498B948;
}

void sub_20C61D600(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B980);
  _Unwind_Resume(a1);
}

void sub_20C61D618()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::CreateRiAttribute(uint64_t a1@<X0>, _QWORD *a2@<X1>, void **a3@<X2>, const void **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _BYTE v27[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v28;
  int v29;
  int v30;
  uint64_t v31;
  _QWORD v32[4];
  int v33;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t UsdType;
  uint64_t v40;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  sub_20C61D8F4(a4, (uint64_t)EmptyString, (uint64_t)&v40);
  UsdType = pxrInternal__aapl__pxrReserved__::UsdRi_GetUsdType(a3);
  sub_20C35C4F8((uint64_t)v27, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v32, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v27);
  v32[3] = 0;
  v32[0] = off_24C53CE78;
  v26 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v32, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&UsdType, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v26, -1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v33);
  *(_DWORD *)a5 = v33;
  v10 = v34;
  *(_QWORD *)(a5 + 8) = v34;
  if (v10)
  {
    v11 = (unint64_t *)((char *)v10 + 48);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_20BFD6E54((_DWORD *)(a5 + 16), &v35);
  sub_20BFD6EA4((_DWORD *)(a5 + 20), &v36);
  v13 = v37;
  *(_QWORD *)(a5 + 24) = v37;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *(_QWORD *)(a5 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v38 & 7) != 0)
  {
    v16 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  if ((v37 & 7) != 0)
  {
    v18 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
  sub_20BFD265C(&v35);
  if (v34)
    sub_20C35C614(v34);
  if ((v26 & 7) != 0)
  {
    v20 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v32);
  if ((v31 & 7) != 0)
  {
    v22 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
  sub_20BFD265C(&v29);
  if (v28)
    sub_20C35C614(v28);
  if ((v40 & 7) != 0)
  {
    v24 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
}

void sub_20C61D884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  if ((a3 & 7) != 0)
  {
    v5 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)va1);
  sub_20C35C2E0((uint64_t)va);
  v7 = *(_QWORD *)(v3 - 40);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  _Unwind_Resume(a1);
}

void sub_20C61D8F4(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  uint64_t *EmptyString;
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string v15;
  std::string v16;
  void *__p[2];
  std::string::size_type v18;

  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C61E6C0();
  if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)EmptyString, a1, (uint64_t)&v15);
  v8 = std::string::append(&v15, ":");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a2;
  else
    v11 = *(const std::string::value_type **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = std::string::append(&v16, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v18 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_20C61D9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::CreateRiAttribute(uint64_t a1@<X0>, _QWORD *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfType *a3@<X2>, const void **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *EmptyString;
  unint64_t ***Instance;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  _BYTE v30[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  int v32;
  int v33;
  uint64_t v34;
  _QWORD v35[4];
  unint64_t v36;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t Type;
  uint64_t v43;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  sub_20C61D8F4(a4, (uint64_t)EmptyString, (uint64_t)&v43);
  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v36 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, a3, (unsigned int **)&v36);
  if ((v36 & 7) != 0)
  {
    v11 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  sub_20C35C4F8((uint64_t)v30, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v35, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v30);
  v35[3] = 0;
  v35[0] = off_24C53CE78;
  v29 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v35, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v43, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29, -1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v36);
  *(_DWORD *)a5 = v36;
  v13 = v37;
  *(_QWORD *)(a5 + 8) = v37;
  if (v13)
  {
    v14 = (unint64_t *)((char *)v13 + 48);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  sub_20BFD6E54((_DWORD *)(a5 + 16), &v38);
  sub_20BFD6EA4((_DWORD *)(a5 + 20), &v39);
  v16 = v40;
  *(_QWORD *)(a5 + 24) = v40;
  if ((v16 & 7) != 0)
  {
    v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 2, v17));
    if ((v18 & 1) == 0)
      *(_QWORD *)(a5 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v41 & 7) != 0)
  {
    v19 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  if ((v40 & 7) != 0)
  {
    v21 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
  sub_20BFD265C(&v38);
  if (v37)
    sub_20C35C614(v37);
  if ((v29 & 7) != 0)
  {
    v23 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v35);
  if ((v34 & 7) != 0)
  {
    v25 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
  sub_20BFD265C(&v32);
  if (v31)
    sub_20C35C614(v31);
  if ((v43 & 7) != 0)
  {
    v27 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
}

void sub_20C61DC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;

  v20 = *(_QWORD *)(v19 - 40);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::GetRiAttribute(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, _QWORD *a2@<X1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *EmptyString;
  uint64_t *v8;
  _DWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  _BYTE *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  _BYTE v32[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  int v34;
  int v35;
  uint64_t v36;
  _QWORD v37[4];
  int v38;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  sub_20C61D8F4(a3, (uint64_t)EmptyString, (uint64_t)&v44);
  v8 = (uint64_t *)((char *)a1 + 8);
  v9 = (_DWORD *)((char *)a1 + 16);
  sub_20C35C4F8((uint64_t)v32, v8, v9);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v37, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v32);
  v37[3] = 0;
  v37[0] = off_24C53CE78;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v37, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v38);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v37);
  if ((v36 & 7) != 0)
  {
    v10 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v38, v12))
  {
    *(_DWORD *)a4 = v38;
    v13 = v39;
    *(_QWORD *)(a4 + 8) = v39;
    if (v13)
    {
      v14 = (unint64_t *)((char *)v13 + 48);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    sub_20BFD6E54((_DWORD *)(a4 + 16), &v40);
    sub_20BFD6EA4((_DWORD *)(a4 + 20), &v41);
    v16 = v42;
    *(_QWORD *)(a4 + 24) = v42;
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 2, v17));
      if ((v18 & 1) == 0)
        *(_QWORD *)(a4 + 24) &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v43 & 7) != 0)
    {
      v19 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
    if ((v42 & 7) != 0)
    {
      v21 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
  }
  else
  {
    if ((v43 & 7) != 0)
    {
      v23 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    if ((v42 & 7) != 0)
    {
      v25 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
    sub_20BFD265C(&v40);
    if (v39)
      sub_20C35C614(v39);
    v27 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
    if (!v27)
    {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
      v27 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
    }
    if (!*v27)
    {
      *(_DWORD *)a4 = 3;
      *(_QWORD *)(a4 + 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 20));
      *(_QWORD *)(a4 + 24) = 0;
      goto LABEL_42;
    }
    sub_20C35C4F8((uint64_t)&v38, v8, v9);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44, a4);
    if ((v42 & 7) != 0)
    {
      v28 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
  sub_20BFD265C(&v40);
  if (v39)
    sub_20C35C614(v39);
LABEL_42:
  if ((v44 & 7) != 0)
  {
    v30 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
}

void sub_20C61E040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;

  v19 = *(_QWORD *)(v18 - 40);
  if ((v19 & 7) != 0)
  {
    v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::GetRiAttributes(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  uint64_t *EmptyString;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *i;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  uint64_t *v13;
  const char *v14;
  int v15;
  size_t v16;
  size_t v17;
  _BOOL4 v18;
  size_t v19;
  const char *v20;
  unsigned int *v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  pxrInternal__aapl__pxrReserved__::TfToken *v26;
  uint64_t *v27;
  unsigned int *v28;
  unsigned int v29;
  int v30;
  pxrInternal__aapl__pxrReserved__::UsdProperty *v31;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  const void **v38;
  unsigned __int8 *v39;
  uint64_t v40;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v41;
  uint64_t *v42;
  int64_t v43;
  uint64_t v44;
  _BYTE *v45;
  void *v46;
  _BYTE *v47;
  _BYTE *v48;
  unint64_t v49;
  const char *v50;
  unint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v57;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v58;
  int v59;
  int v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  void **v67;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C61E6C0();
  if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  v53 = (_DWORD *)(a1 + 16);
  v54 = (uint64_t *)(a1 + 8);
  sub_20C35C4F8((uint64_t)&v57, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v62, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v57);
  v64 = 0;
  *(_QWORD *)&v62 = off_24C53CE78;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvars((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v62, (uint64_t *)&v65);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v62);
  if ((v61 & 7) != 0)
  {
    v8 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v60);
  sub_20BFD265C(&v59);
  if (v58)
    sub_20C35C614(v58);
  v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)*((_QWORD *)&v65 + 1);
  for (i = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v65;
        i != v11;
        i = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)i + 48))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetPrimvarName(i, &v62);
    if ((v62 & 0xFFFFFFFFFFFFFFF8) != 0)
      v13 = (uint64_t *)((v62 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    if (*((char *)EmptyString + 23) >= 0)
      v14 = (const char *)EmptyString;
    else
      v14 = (const char *)*EmptyString;
    v15 = *((char *)v13 + 23);
    if (v15 >= 0)
      v16 = *((unsigned __int8 *)v13 + 23);
    else
      v16 = v13[1];
    v17 = strlen(v14);
    if (v16 >= v17)
    {
      v19 = v17;
      if (v15 >= 0)
        v20 = (const char *)v13;
      else
        v20 = (const char *)*v13;
      v18 = strncmp(v20, v14, v19) == 0;
    }
    else
    {
      v18 = 0;
    }
    if ((v62 & 7) != 0)
    {
      v21 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v18)
    {
      v23 = a3[1];
      if (v23 >= a3[2])
      {
        v24 = sub_20C5D5588(a3, (uint64_t)i);
      }
      else
      {
        sub_20C37F2BC((uint64_t)(a3 + 2), a3[1], (uint64_t)i);
        v24 = v23 + 32;
        a3[1] = v23 + 32;
      }
      a3[1] = v24;
    }
  }
  *(_QWORD *)&v62 = &v65;
  sub_20C591354((void ***)&v62);
  v25 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
  if (!v25)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
    v25 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
  }
  if (!*v25)
    return;
  v55 = *a3;
  v56 = a3[1];
  sub_20C35C4F8((uint64_t)&v62, v54, v53);
  v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C61E6C0();
  if ((*(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8) != 0)
    v27 = (uint64_t *)((*(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v27 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v26);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace((uint64_t)&v62, v27, (uint64_t *)&v57);
  if ((v64 & 7) != 0)
  {
    v28 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v63 + 1);
  sub_20BFD265C(&v63);
  if (*((_QWORD *)&v62 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v62 + 1));
  v62 = 0uLL;
  v63 = 0;
  if ((char)a2[23] < 0)
  {
    if (*((_QWORD *)a2 + 1))
      goto LABEL_47;
LABEL_49:
    v30 = 0;
    goto LABEL_50;
  }
  if (!a2[23])
    goto LABEL_49;
LABEL_47:
  v30 = 1;
LABEL_50:
  v31 = v57;
  v32 = v58;
  if (v57 != v58)
  {
    if ((unint64_t)((v56 - v55) >> 5) <= 1)
      v33 = 1;
    else
      v33 = (v56 - v55) >> 5;
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdProperty::SplitName(v31, (uint64_t *)&v65);
      sub_20BE7598C((uint64_t *)&v62);
      v62 = v65;
      v63 = v66;
      v66 = 0;
      v65 = 0uLL;
      v67 = (void **)&v65;
      sub_20BDE5038(&v67);
      if (!v30)
        goto LABEL_70;
      v34 = *(unsigned __int8 *)(v62 + 71);
      if ((v34 & 0x80u) == 0)
        v35 = *(unsigned __int8 *)(v62 + 71);
      else
        v35 = *(_QWORD *)(v62 + 56);
      v36 = a2[23];
      v37 = (char)v36;
      if ((v36 & 0x80u) != 0)
        v36 = *((_QWORD *)a2 + 1);
      if (v35 == v36)
      {
        v38 = (const void **)(v62 + 48);
        if (v37 >= 0)
          v39 = a2;
        else
          v39 = *(unsigned __int8 **)a2;
        if ((v34 & 0x80) == 0)
        {
          if (*(_BYTE *)(v62 + 71))
          {
            while (*(unsigned __int8 *)v38 == *v39)
            {
              v38 = (const void **)((char *)v38 + 1);
              ++v39;
              if (!--v34)
                goto LABEL_70;
            }
            goto LABEL_96;
          }
LABEL_70:
          if (v56 != v55)
          {
            v40 = 0;
            do
            {
              v41 = sub_20C398E78((_DWORD *)(*a3 + 32 * v40));
              if ((*(_QWORD *)v41 & 0xFFFFFFFFFFFFFFF8) != 0)
                v42 = (uint64_t *)((*(_QWORD *)v41 & 0xFFFFFFFFFFFFFFF8) + 16);
              else
                v42 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v41);
              if (*((char *)v42 + 23) < 0)
              {
                v44 = *v42;
                v43 = v42[1];
              }
              else
              {
                v43 = *((unsigned __int8 *)v42 + 23);
                v44 = (uint64_t)v42;
              }
              if (v43 >= 1)
              {
                v45 = (_BYTE *)(v44 + v43);
                v46 = (void *)v44;
                do
                {
                  v47 = memchr(v46, 58, v43);
                  if (!v47)
                    break;
                  if (*v47 == 58)
                  {
                    if (v47 != v45)
                    {
                      v48 = &v47[-v44];
                      if (v48 != (_BYTE *)-1)
                      {
                        v49 = *(_QWORD *)sub_20C398E78(v31) & 0xFFFFFFFFFFFFFFF8;
                        if (v49)
                        {
                          v50 = (const char *)(v49 + 16);
                          if (*(char *)(v49 + 39) < 0)
                            v50 = *(const char **)v50;
                        }
                        else
                        {
                          v50 = "";
                        }
                        if (!std::string::compare((const std::string *)v42, (std::string::size_type)(v48 + 1), 0xFFFFFFFFFFFFFFFFLL, v50))goto LABEL_96;
                      }
                    }
                    break;
                  }
                  v46 = v47 + 1;
                  v43 = v45 - (_BYTE *)v46;
                }
                while (v45 - (_BYTE *)v46 >= 1);
              }
              ++v40;
            }
            while (v40 != v33);
          }
          v51 = a3[1];
          if (v51 >= a3[2])
          {
            v52 = sub_20C5D5588(a3, (uint64_t)v31);
          }
          else
          {
            sub_20C37F2BC((uint64_t)(a3 + 2), a3[1], (uint64_t)v31);
            v52 = v51 + 32;
            a3[1] = v51 + 32;
          }
          a3[1] = v52;
          goto LABEL_96;
        }
        if (!memcmp(*v38, v39, *(_QWORD *)(v62 + 56)))
          goto LABEL_70;
      }
LABEL_96:
      v31 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)((char *)v31 + 32);
    }
    while (v31 != v32);
  }
  *(_QWORD *)&v65 = &v62;
  sub_20BDE5038((void ***)&v65);
  *(_QWORD *)&v62 = &v57;
  sub_20C37FA04((void ***)&v62);
}

void sub_20C61E5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20C37FA04((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t sub_20C61E6C0()
{
  unint64_t *v0;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  void ***v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v0 = (unint64_t *)atomic_load(&qword_25498B988);
  if (!v0)
  {
    v0 = (unint64_t *)operator new(0x58uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "ri:attributes:", 0);
    v2 = (uint64_t *)(v0 + 1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 1, "primvars:ri:attributes:", 0);
    v3 = (uint64_t *)(v0 + 2);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 2, "ri", 0);
    v4 = (uint64_t *)(v0 + 3);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 3, "attributes", 0);
    v5 = (uint64_t *)(v0 + 4);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 4, "ri:coordinateSystem", 0);
    v6 = (uint64_t *)(v0 + 5);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 5, "ri:scopedCoordinateSystem", 0);
    v7 = (uint64_t *)(v0 + 6);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 6, "ri:modelCoordinateSystems", 0);
    v8 = (uint64_t *)(v0 + 7);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 7, "ri:modelScopedCoordinateSystems", 0);
    v9 = *v0;
    v60 = v9;
    if ((v9 & 7) != 0)
    {
      v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 2, v10));
      if ((v11 & 1) == 0)
        v60 &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 = *v2;
    v61 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        v61 &= 0xFFFFFFFFFFFFFFF8;
    }
    v15 = *v3;
    v62 = v15;
    if ((v15 & 7) != 0)
    {
      v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 2, v16));
      if ((v17 & 1) == 0)
        v62 &= 0xFFFFFFFFFFFFFFF8;
    }
    v18 = *v4;
    v63 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v63 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = *v5;
    v64 = v21;
    if ((v21 & 7) != 0)
    {
      v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 2, v22));
      if ((v23 & 1) == 0)
        v64 &= 0xFFFFFFFFFFFFFFF8;
    }
    v24 = *v6;
    v65 = v24;
    if ((v24 & 7) != 0)
    {
      v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 2, v25));
      if ((v26 & 1) == 0)
        v65 &= 0xFFFFFFFFFFFFFFF8;
    }
    v27 = *v7;
    v66 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v66 &= 0xFFFFFFFFFFFFFFF8;
    }
    v30 = *v8;
    v67 = v30;
    if ((v30 & 7) != 0)
    {
      v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v67 &= 0xFFFFFFFFFFFFFFF8;
    }
    v0[8] = 0;
    v0[9] = 0;
    v0[10] = 0;
    v33 = operator new(0x40uLL);
    v34 = 0;
    v0[8] = (unint64_t)v33;
    v0[9] = (unint64_t)v33;
    v0[10] = (unint64_t)(v33 + 8);
    do
    {
      v35 = *(&v60 + v34);
      *v33 = v35;
      if ((v35 & 7) != 0)
      {
        v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 2, v36));
        if ((v37 & 1) == 0)
          *v33 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v34;
      ++v33;
    }
    while (v34 != 8);
    v38 = (void ***)&v68;
    v0[9] = (unint64_t)v33;
    do
    {
      v40 = (uint64_t)*--v38;
      v39 = v40;
      if ((v40 & 7) != 0)
      {
        v41 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
    }
    while (v38 != (void ***)&v60);
    while (!__ldaxr(&qword_25498B988))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498B988))
        return (unint64_t)v0;
    }
    __clrex();
    v60 = (unint64_t)(v0 + 8);
    sub_20BEEB2B8((void ***)&v60);
    if ((*v8 & 7) != 0)
    {
      v44 = (unsigned int *)(*v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v45 = __ldxr(v44);
      while (__stlxr(v45 - 2, v44));
    }
    if ((*v7 & 7) != 0)
    {
      v46 = (unsigned int *)(*v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v47 = __ldxr(v46);
      while (__stlxr(v47 - 2, v46));
    }
    if ((*v6 & 7) != 0)
    {
      v48 = (unsigned int *)(*v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v49 = __ldxr(v48);
      while (__stlxr(v49 - 2, v48));
    }
    if ((*v5 & 7) != 0)
    {
      v50 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
    if ((*v4 & 7) != 0)
    {
      v52 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v53 = __ldxr(v52);
      while (__stlxr(v53 - 2, v52));
    }
    if ((*v3 & 7) != 0)
    {
      v54 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v55 = __ldxr(v54);
      while (__stlxr(v55 - 2, v54));
    }
    if ((*v2 & 7) != 0)
    {
      v56 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v57 = __ldxr(v56);
      while (__stlxr(v57 - 2, v56));
    }
    if ((*v0 & 7) != 0)
    {
      v58 = (unsigned int *)(*v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v59 = __ldxr(v58);
      while (__stlxr(v59 - 2, v58));
    }
    operator delete(v0);
    return atomic_load(&qword_25498B988);
  }
  return (unint64_t)v0;
}

void sub_20C61EB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;

  sub_20BEEB2B8(&a10);
  v29 = &a20;
  while (1)
  {
    v31 = *--v29;
    v30 = v31;
    if ((v31 & 7) != 0)
    {
      v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    if (v29 == (uint64_t *)&a12)
    {
      if ((*v27 & 7) != 0)
      {
        v34 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      if ((*v26 & 7) != 0)
      {
        v36 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      if ((*v25 & 7) != 0)
      {
        v38 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      if ((*v24 & 7) != 0)
      {
        v40 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      if ((*v23 & 7) != 0)
      {
        v42 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v43 = __ldxr(v42);
        while (__stlxr(v43 - 2, v42));
      }
      if ((*v22 & 7) != 0)
      {
        v44 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v45 = __ldxr(v44);
        while (__stlxr(v45 - 2, v44));
      }
      if ((*v21 & 7) != 0)
      {
        v46 = (unsigned int *)(*v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v47 = __ldxr(v46);
        while (__stlxr(v47 - 2, v46));
      }
      if ((*v20 & 7) != 0)
      {
        v48 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::GetRiAttributeNameSpace(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v5;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  uint64_t *v8;
  const char *v9;
  int v10;
  size_t v11;
  size_t v12;
  size_t v13;
  const char *v14;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v15;
  uint64_t *v16;
  pxrInternal__aapl__pxrReserved__::TfToken *v17;
  uint64_t *v18;
  const char *v19;
  int v20;
  size_t v21;
  size_t v22;
  size_t v23;
  const char *v24;
  _BYTE *v25;
  std::string __p;
  std::string *v27;
  uint64_t v28;

  pxrInternal__aapl__pxrReserved__::UsdProperty::SplitName(this, (uint64_t *)&v27);
  v5 = sub_20C398E78(this);
  if ((*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C61E6C0();
  if ((*((_QWORD *)v7 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    v8 = (uint64_t *)((*((_QWORD *)v7 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v8 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  if (*((char *)v8 + 23) >= 0)
    v9 = (const char *)v8;
  else
    v9 = (const char *)*v8;
  v10 = *((char *)EmptyString + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)EmptyString + 23);
  else
    v11 = EmptyString[1];
  v12 = strlen(v9);
  if (v11 < v12
    || ((v13 = v12, v10 >= 0) ? (v14 = (const char *)EmptyString) : (v14 = (const char *)*EmptyString),
        strncmp(v14, v9, v13)))
  {
    v15 = sub_20C398E78(this);
    if ((*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8) != 0)
      v16 = (uint64_t *)((*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
    v17 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C61E6C0();
    if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) != 0)
      v18 = (uint64_t *)((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
    if (*((char *)v18 + 23) >= 0)
      v19 = (const char *)v18;
    else
      v19 = (const char *)*v18;
    v20 = *((char *)v16 + 23);
    if (v20 >= 0)
      v21 = *((unsigned __int8 *)v16 + 23);
    else
      v21 = v16[1];
    v22 = strlen(v19);
    if (v21 >= v22)
    {
      v23 = v22;
      v24 = v20 >= 0 ? (const char *)v16 : (const char *)*v16;
      if (!strncmp(v24, v19, v23))
      {
        v25 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
        if (!v25)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
          v25 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
        }
        if (*v25 && 0xAAAAAAAAAAAAAAABLL * ((v28 - (uint64_t)v27) >> 3) >= 4)
        {
          sub_20BEE380C(":", v27 + 2, (std::string *)(v28 - 24), &__p);
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
          goto LABEL_42;
        }
      }
    }
LABEL_44:
    *a2 = 0;
    goto LABEL_45;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v28 - (uint64_t)v27) >> 3) < 5)
    goto LABEL_44;
  sub_20BEE380C(":", v27 + 3, (std::string *)(v28 - 24), &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
LABEL_42:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_45:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  sub_20BDE5038((void ***)&__p);
}

void sub_20C61EF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  __p = &a15;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::IsRiAttribute(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this, const pxrInternal__aapl__pxrReserved__::UsdProperty *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v3;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t *v6;
  const char *v7;
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  const char *v12;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v13;
  uint64_t *v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v15;
  uint64_t *v16;
  const char *v17;
  int v18;
  size_t v19;
  size_t v20;
  size_t v21;
  const char *v22;
  _BYTE *v24;

  v3 = sub_20C398E78(this);
  if ((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C61E6C0();
  if ((*((_QWORD *)v5 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    v6 = (uint64_t *)((*((_QWORD *)v5 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v6 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  if (*((char *)v6 + 23) >= 0)
    v7 = (const char *)v6;
  else
    v7 = (const char *)*v6;
  v8 = *((char *)EmptyString + 23);
  if (v8 >= 0)
    v9 = *((unsigned __int8 *)EmptyString + 23);
  else
    v9 = EmptyString[1];
  v10 = strlen(v7);
  if (v9 >= v10)
  {
    v11 = v10;
    v12 = v8 >= 0 ? (const char *)EmptyString : (const char *)*EmptyString;
    if (!strncmp(v12, v7, v11))
      return 1;
  }
  v13 = sub_20C398E78(this);
  v14 = (*(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8) != 0
      ? (uint64_t *)((*(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8) + 16)
      : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
  v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C61E6C0();
  v16 = (*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8) != 0
      ? (uint64_t *)((*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8) + 16)
      : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
  v17 = *((char *)v16 + 23) >= 0 ? (const char *)v16 : (const char *)*v16;
  v18 = *((char *)v14 + 23);
  v19 = v18 >= 0 ? *((unsigned __int8 *)v14 + 23) : v14[1];
  v20 = strlen(v17);
  if (v19 < v20)
    return 0;
  v21 = v20;
  v22 = v18 >= 0 ? (const char *)v14 : (const char *)*v14;
  if (strncmp(v22, v17, v21))
    return 0;
  v24 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
  if (!v24)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
    v24 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
  }
  return *v24 != 0;
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::MakeRiAttributePropertyName(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t *v5;
  const char *v6;
  int v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  void *v12;
  const char *v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  const char *v16;
  size_t v17;
  size_t v18;
  size_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::TfToken *v23;
  uint64_t *EmptyString;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string *v28;
  std::string::size_type size;
  std::string *v30;
  __int128 v31;
  std::string v32;
  std::string v33;
  std::string v34;
  void *__p[2];
  std::string::size_type v36;
  __int128 v37;
  std::string::size_type v38;

  pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)a1, ":", &v37);
  if (*((_QWORD *)&v37 + 1) - (_QWORD)v37 == 120)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C61E6C0();
    v5 = (*((_QWORD *)v4 + 1) & 0xFFFFFFFFFFFFFFF8) != 0
       ? (uint64_t *)((*((_QWORD *)v4 + 1) & 0xFFFFFFFFFFFFFFF8) + 16)
       : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    v6 = *((char *)v5 + 23) >= 0 ? (const char *)v5 : (const char *)*v5;
    v7 = *(char *)(a1 + 23);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = v7 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(_QWORD *)(a1 + 8);
    v10 = strlen(v6);
    if (v9 >= v10)
    {
      v11 = v10;
      v12 = *(void **)a1;
      v13 = v7 >= 0 ? (const char *)a1 : *(const char **)a1;
      if (!strncmp(v13, v6, v11))
        goto LABEL_45;
    }
  }
  if (*((_QWORD *)&v37 + 1) - (_QWORD)v37 != 96)
    goto LABEL_31;
  v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C61E6C0();
  v15 = (*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8) != 0
      ? (uint64_t *)((*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8) + 16)
      : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
  v16 = *((char *)v15 + 23) >= 0 ? (const char *)v15 : (const char *)*v15;
  v7 = *(char *)(a1 + 23);
  v8 = *(_QWORD *)(a1 + 8);
  v17 = v7 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(_QWORD *)(a1 + 8);
  v18 = strlen(v16);
  if (v17 >= v18
    && ((v19 = v18, v12 = *(void **)a1, v7 >= 0) ? (v20 = (const char *)a1) : (v20 = *(const char **)a1),
        !strncmp(v20, v16, v19)))
  {
LABEL_45:
    if (v7 < 0)
    {
      sub_20BDDBFAC((_BYTE *)a2, v12, v8);
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
LABEL_31:
    v21 = *((_QWORD *)&v37 + 1);
    v22 = v37;
    if (*((_QWORD *)&v37 + 1) - (_QWORD)v37 == 24)
    {
      pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)a1, ".", __p);
      sub_20BE7598C((uint64_t *)&v37);
      v37 = *(_OWORD *)__p;
      v38 = v36;
      __p[1] = 0;
      v36 = 0;
      __p[0] = 0;
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      sub_20BDE5038((void ***)&v34);
      v21 = *((_QWORD *)&v37 + 1);
      v22 = v37;
    }
    if (v21 - v22 == 24)
    {
      pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)a1, "_", __p);
      sub_20BE7598C((uint64_t *)&v37);
      v37 = *(_OWORD *)__p;
      v38 = v36;
      __p[1] = 0;
      v36 = 0;
      __p[0] = 0;
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      sub_20BDE5038((void ***)&v34);
      v21 = *((_QWORD *)&v37 + 1);
      v22 = v37;
    }
    if (v21 - v22 == 24)
    {
      sub_20BDDC0E4(__p, "user");
      sub_20C61F574((uint64_t *)&v37, v22, (__n128 *)__p);
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
    }
    v23 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C61E6C0();
    if ((*((_QWORD *)v23 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*((_QWORD *)v23 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v23);
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)EmptyString, (const void **)v37, (uint64_t)&v33);
    v25 = std::string::append(&v33, ":");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = (std::string *)(v37 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3) < 3)
    {
      if (*(char *)(v37 + 47) < 0)
      {
        sub_20BDDBFAC(&v32, *(void **)(v37 + 24), *(_QWORD *)(v37 + 32));
      }
      else
      {
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = *(_QWORD *)(v37 + 40);
      }
    }
    else
    {
      sub_20BEE380C("_", v27, *((std::string **)&v37 + 1), &v32);
    }
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v32;
    else
      v28 = (std::string *)v32.__r_.__value_.__r.__words[0];
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    else
      size = v32.__r_.__value_.__l.__size_;
    v30 = std::string::append(&v34, (const std::string::value_type *)v28, size);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v36 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier((size_t *)__p))
    {
      if (SHIBYTE(v36) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a2, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)a2 = *(_OWORD *)__p;
        *(_QWORD *)(a2 + 16) = v36;
      }
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    if (SHIBYTE(v36) < 0)
      operator delete(__p[0]);
  }
  __p[0] = &v37;
  sub_20BDE5038((void ***)__p);
}

void sub_20C61F4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a33 < 0)
    operator delete(__p);
  __p = (void *)(v33 - 80);
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C61F574(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  __n128 v18;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v4 = a2;
  v6 = a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if (v6 >= v9)
  {
    v11 = *a1;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v11) >> 3);
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v11) >> 3);
    v15 = 2 * v14;
    if (2 * v14 <= v12)
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v14 >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v15;
    v24 = v7;
    if (v16)
      v17 = (char *)sub_20BDE4FF4(v7, v16);
    else
      v17 = 0;
    v20 = v17;
    v21 = &v17[24 * v13];
    v22 = v21;
    v23 = &v17[24 * v16];
    sub_20C620A78(&v20, a3);
    v4 = sub_20BE753F0((uint64_t)a1, &v20, (__int128 *)v4);
    sub_20BDF3648((uint64_t)&v20);
  }
  else if (a2 == v6)
  {
    v18 = *a3;
    *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
    *(__n128 *)a2 = v18;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    a1[1] = a2 + 24;
  }
  else
  {
    sub_20BE752D4((uint64_t)a1, a2, v6, a2 + 24);
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    v10 = *a3;
    *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
    *(__n128 *)v4 = v10;
    a3[1].n128_u8[7] = 0;
    a3->n128_u8[0] = 0;
  }
  return v4;
}

void sub_20C61F6E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDF3648((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::SetCoordinateSystem(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t *v3;
  _DWORD *v4;
  unint64_t v5;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v6;
  unsigned int *v7;
  unsigned int v8;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  char **v12;
  char *v13;
  char *v14;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  pxrInternal__aapl__pxrReserved__ *v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__ *v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::SdfPath *v20;
  char **v21;
  char *v22;
  char *v23;
  pxrInternal__aapl__pxrReserved__ *v24;
  pxrInternal__aapl__pxrReserved__ *v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t v28;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  int v38;
  int v39;
  char v40[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  pxrInternal__aapl__pxrReserved__ *v46;
  int v47;
  int v48;
  unint64_t v49;
  char *v50;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  pxrInternal__aapl__pxrReserved__ *v55;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v56;
  int v57;
  int v58;
  uint64_t v59;

  v3 = (uint64_t *)(a1 + 8);
  v4 = (_DWORD *)(a1 + 16);
  sub_20C35C4F8((uint64_t)&v50, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v5 = sub_20C61E6C0();
  v6 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v6)
    v6 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)&v50, (uint64_t *)(v5 + 32), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v6 + 80), 0, 0, (uint64_t)&v55);
  if ((v53 & 7) != 0)
  {
    v7 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
  sub_20BFD265C(&v52);
  if (v51)
    sub_20C35C614(v51);
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v55, v9) & 1) != 0|| (v50 = "usdRi/statementsAPI.cpp", v51 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetCoordinateSystem", v52 = 335, v53 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::SetCoordinateSystem(const std::string &)", v54 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v50, "attr", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<std::string>(&v55, a2, NAN);
    sub_20C35C4F8((uint64_t)&v45, v3, v4);
    while (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v45, v10))
    {
      sub_20C348EEC((uint64_t)&v45, (int *)&v50);
      v12 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v11);
      v13 = v50;
      v14 = *v12;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
      sub_20BFD265C(&v50);
      if (v13 == v14)
        break;
      v16 = v46;
      if (!v46 || (v17 = *((_QWORD *)v46 + 7), (v17 & 0x800) != 0))
      {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v46, v15);
        v17 = *((_QWORD *)v16 + 7);
      }
      if ((v17 & 4) != 0)
      {
        v18 = v46;
        if (!v46 || (v19 = *((_QWORD *)v46 + 7), (v19 & 0x800) != 0))
        {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v46, v15);
          v19 = *((_QWORD *)v18 + 7);
        }
        if ((v19 & 8) == 0)
        {
          sub_20C348EEC((uint64_t)&v45, (int *)&v50);
          v21 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v20);
          v22 = v50;
          v23 = *v21;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
          sub_20BFD265C(&v50);
          if (v22 != v23)
          {
            v28 = sub_20C61E6C0();
            pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v28 + 48), 0, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v40);
            if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v40, v29) & 1) != 0|| (v50 = "usdRi/statementsAPI.cpp", v51 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetCoordinateSystem", v52 = 345, v53 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::SetCoordinateSystem(const std::string &)", v54 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v50, "rel", 0) & 1) != 0))
            {
              sub_20C35C4F8((uint64_t)&v50, v3, v4);
              sub_20C348EEC((uint64_t)&v50, &v38);
              pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v40, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v38, 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
              sub_20BFD265C(&v38);
              if ((v53 & 7) != 0)
              {
                v30 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
                do
                  v31 = __ldxr(v30);
                while (__stlxr(v31 - 2, v30));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
              sub_20BFD265C(&v52);
              if (v51)
                sub_20C35C614(v51);
            }
            if ((v44 & 7) != 0)
            {
              v32 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
              do
                v33 = __ldxr(v32);
              while (__stlxr(v33 - 2, v32));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
            sub_20BFD265C(&v42);
            if (v41)
              sub_20C35C614(v41);
            break;
          }
        }
      }
      sub_20C3AD22C((uint64_t)&v45, (uint64_t)&v50);
      v45 = (int)v50;
      v24 = v51;
      v51 = 0;
      v25 = v46;
      v46 = v24;
      if (v25)
        sub_20C35C614(v25);
      sub_20BFD3EBC(&v47, (int *)&v52);
      sub_20BFD3F10(&v48, (int *)&v52 + 1);
      if ((v49 & 7) != 0)
      {
        v26 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      v49 = v53;
      v53 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
      sub_20BFD265C(&v52);
      if (v51)
        sub_20C35C614(v51);
    }
    if ((v49 & 7) != 0)
    {
      v34 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v48);
    sub_20BFD265C(&v47);
    if (v46)
      sub_20C35C614(v46);
  }
  if ((v59 & 7) != 0)
  {
    v36 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v58);
  sub_20BFD265C(&v57);
  if (v56)
    sub_20C35C614(v56);
}

void sub_20C61FB48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  sub_20C377F1C((uint64_t)va);
  sub_20C35C2E0((uint64_t)va1);
  sub_20C372B54((uint64_t)va2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::GetCoordinateSystem(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X8>)
{
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _BYTE v14[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  int v16;
  int v17;
  uint64_t v18;

  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = sub_20C61E6C0();
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 32), (uint64_t)v14);
  if ((v13 & 7) != 0)
  {
    v4 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v14, v6))pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>((uint64_t)v14, a2);
  if ((v18 & 7) != 0)
  {
    v7 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C61FCFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::HasCoordinateSystem(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this)
{
  unint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _BYTE v10[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;
  _BYTE v15[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;
  void *v20[2];
  uint64_t v21;

  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  sub_20C35C4F8((uint64_t)v10, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v1 = sub_20C61E6C0();
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v1 + 32), (uint64_t)v15);
  if ((v14 & 7) != 0)
  {
    v2 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v15, v4))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>((uint64_t)v15, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v20);
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  if ((v19 & 7) != 0)
  {
    v7 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  return v6;
}

void sub_20C61FE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::SetScopedCoordinateSystem(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t *v3;
  _DWORD *v4;
  unint64_t v5;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v6;
  unsigned int *v7;
  unsigned int v8;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  pxrInternal__aapl__pxrReserved__ *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__ *v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  char **v17;
  char *v18;
  char *v19;
  pxrInternal__aapl__pxrReserved__ *v20;
  pxrInternal__aapl__pxrReserved__ *v21;
  unsigned int *v22;
  unsigned int v23;
  unint64_t v24;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  int v35;
  char v36[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  pxrInternal__aapl__pxrReserved__ *v42;
  int v43;
  int v44;
  unint64_t v45;
  char *v46;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  pxrInternal__aapl__pxrReserved__ *v51;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v52;
  int v53;
  int v54;
  uint64_t v55;

  v3 = (uint64_t *)(a1 + 8);
  v4 = (_DWORD *)(a1 + 16);
  sub_20C35C4F8((uint64_t)&v46, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v5 = sub_20C61E6C0();
  v6 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v6)
    v6 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)&v46, (uint64_t *)(v5 + 40), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v6 + 80), 0, 0, (uint64_t)&v51);
  if ((v49 & 7) != 0)
  {
    v7 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v48 + 1);
  sub_20BFD265C(&v48);
  if (v47)
    sub_20C35C614(v47);
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v51, v9) & 1) != 0|| (v46 = "usdRi/statementsAPI.cpp", v47 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetScopedCoordinateSystem", v48 = 386, v49 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::SetScopedCoordinateSystem(const std::string &)", v50 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v46, "attr", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<std::string>(&v51, a2, NAN);
    sub_20C35C4F8((uint64_t)&v41, v3, v4);
    while (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v41, v10))
    {
      v12 = v42;
      if (!v42 || (v13 = *((_QWORD *)v42 + 7), (v13 & 0x800) != 0))
      {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v42, v11);
        v13 = *((_QWORD *)v12 + 7);
      }
      if ((v13 & 4) != 0)
      {
        v14 = v42;
        if (!v42 || (v15 = *((_QWORD *)v42 + 7), (v15 & 0x800) != 0))
        {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v42, v11);
          v15 = *((_QWORD *)v14 + 7);
        }
        if ((v15 & 8) == 0)
        {
          sub_20C348EEC((uint64_t)&v41, (int *)&v46);
          v17 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v16);
          v18 = v46;
          v19 = *v17;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
          sub_20BFD265C(&v46);
          if (v18 != v19)
          {
            v24 = sub_20C61E6C0();
            pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v41, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v24 + 56), 0, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v36);
            if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v36, v25) & 1) != 0|| (v46 = "usdRi/statementsAPI.cpp", v47 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetScopedCoordinateSystem", v48 = 396, v49 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::SetScopedCoordinateSystem(const std::string &)", v50 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v46, "rel", 0) & 1) != 0))
            {
              sub_20C35C4F8((uint64_t)&v46, v3, v4);
              sub_20C348EEC((uint64_t)&v46, &v34);
              pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v36, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
              sub_20BFD265C(&v34);
              if ((v49 & 7) != 0)
              {
                v26 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
                do
                  v27 = __ldxr(v26);
                while (__stlxr(v27 - 2, v26));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v48 + 1);
              sub_20BFD265C(&v48);
              if (v47)
                sub_20C35C614(v47);
            }
            if ((v40 & 7) != 0)
            {
              v28 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
              do
                v29 = __ldxr(v28);
              while (__stlxr(v29 - 2, v28));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
            sub_20BFD265C(&v38);
            if (v37)
              sub_20C35C614(v37);
            break;
          }
        }
      }
      sub_20C3AD22C((uint64_t)&v41, (uint64_t)&v46);
      v41 = (int)v46;
      v20 = v47;
      v47 = 0;
      v21 = v42;
      v42 = v20;
      if (v21)
        sub_20C35C614(v21);
      sub_20BFD3EBC(&v43, (int *)&v48);
      sub_20BFD3F10(&v44, (int *)&v48 + 1);
      if ((v45 & 7) != 0)
      {
        v22 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      v45 = v49;
      v49 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v48 + 1);
      sub_20BFD265C(&v48);
      if (v47)
        sub_20C35C614(v47);
    }
    if ((v45 & 7) != 0)
    {
      v30 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
    sub_20BFD265C(&v43);
    if (v42)
      sub_20C35C614(v42);
  }
  if ((v55 & 7) != 0)
  {
    v32 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
  sub_20BFD265C(&v53);
  if (v52)
    sub_20C35C614(v52);
}

void sub_20C6202A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  sub_20C377F1C((uint64_t)va);
  sub_20C35C2E0((uint64_t)va1);
  sub_20C372B54((uint64_t)va2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::GetScopedCoordinateSystem(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X8>)
{
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _BYTE v14[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  int v16;
  int v17;
  uint64_t v18;

  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = sub_20C61E6C0();
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 40), (uint64_t)v14);
  if ((v13 & 7) != 0)
  {
    v4 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v14, v6))pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>((uint64_t)v14, a2);
  if ((v18 & 7) != 0)
  {
    v7 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C620450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::HasScopedCoordinateSystem(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this)
{
  unint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _BYTE v10[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;
  _BYTE v15[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;
  void *v20[2];
  uint64_t v21;

  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  sub_20C35C4F8((uint64_t)v10, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v1 = sub_20C61E6C0();
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v1 + 40), (uint64_t)v15);
  if ((v14 & 7) != 0)
  {
    v2 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v15, v4))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>((uint64_t)v15, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v20);
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  if ((v19 & 7) != 0)
  {
    v7 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  return v6;
}

void sub_20C6205A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::GetModelCoordinateSystems(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  _DWORD *v4;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t ForwardedTargets;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  int v20;
  int v21;
  uint64_t v22;
  _BYTE v23[8];
  pxrInternal__aapl__pxrReserved__ *v24;
  int v25;
  int v26;
  uint64_t v27;

  v3 = (uint64_t *)(a1 + 8);
  v4 = (_DWORD *)(a1 + 16);
  sub_20C35C4F8((uint64_t)v23, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v6 = v24;
  if (!v24 || (v7 = *((_QWORD *)v24 + 7), (v7 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v24, v5);
    v7 = *((_QWORD *)v6 + 7);
  }
  if ((v27 & 7) != 0)
  {
    v8 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_20BFD265C(&v25);
  if (v24)
    sub_20C35C614(v24);
  if ((v7 & 4) == 0)
    return 1;
  sub_20C35C4F8((uint64_t)&v18, v3, v4);
  v11 = sub_20C61E6C0();
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 48), (uint64_t)v23);
  if ((v22 & 7) != 0)
  {
    v12 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_20BFD265C(&v20);
  if (v19)
    sub_20C35C614(v19);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v23, v14))ForwardedTargets = pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)v23, a2);
  else
    ForwardedTargets = 0;
  if ((v27 & 7) != 0)
  {
    v15 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_20BFD265C(&v25);
  if (v24)
    sub_20C35C614(v24);
  return ForwardedTargets;
}

void sub_20C620764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::GetModelScopedCoordinateSystems(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  _DWORD *v4;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t ForwardedTargets;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  int v20;
  int v21;
  uint64_t v22;
  _BYTE v23[8];
  pxrInternal__aapl__pxrReserved__ *v24;
  int v25;
  int v26;
  uint64_t v27;

  v3 = (uint64_t *)(a1 + 8);
  v4 = (_DWORD *)(a1 + 16);
  sub_20C35C4F8((uint64_t)v23, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v6 = v24;
  if (!v24 || (v7 = *((_QWORD *)v24 + 7), (v7 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v24, v5);
    v7 = *((_QWORD *)v6 + 7);
  }
  if ((v27 & 7) != 0)
  {
    v8 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_20BFD265C(&v25);
  if (v24)
    sub_20C35C614(v24);
  if ((v7 & 4) == 0)
    return 1;
  sub_20C35C4F8((uint64_t)&v18, v3, v4);
  v11 = sub_20C61E6C0();
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 56), (uint64_t)v23);
  if ((v22 & 7) != 0)
  {
    v12 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_20BFD265C(&v20);
  if (v19)
    sub_20C35C614(v19);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v23, v14))ForwardedTargets = pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)v23, a2);
  else
    ForwardedTargets = 0;
  if ((v27 & 7) != 0)
  {
    v15 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_20BFD265C(&v25);
  if (v24)
    sub_20C35C614(v24);
  return ForwardedTargets;
}

void sub_20C620920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C620954()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C620A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

__n128 sub_20C620A78(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  __int128 *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  uint64_t v24;
  __n128 result;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v5 = (__int128 *)a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == *a1)
        v10 = 1;
      else
        v10 = 0x5555555555555556 * ((v4 - *a1) >> 3);
      v11 = v10 >> 2;
      v12 = a1[4];
      v29 = a1[4];
      v13 = (char *)sub_20BDE4FF4(v12, v10);
      v15 = &v13[24 * v11];
      v16 = a1[1];
      v17 = a1[2] - v16;
      if (v17)
      {
        v18 = v17 / 24;
        v19 = &v15[24 * v18];
        v20 = 24 * v18;
        v21 = &v13[24 * v11];
        do
        {
          v22 = *(_OWORD *)v16;
          *((_QWORD *)v21 + 2) = *(_QWORD *)(v16 + 16);
          *(_OWORD *)v21 = v22;
          v21 += 24;
          *(_QWORD *)(v16 + 8) = 0;
          *(_QWORD *)(v16 + 16) = 0;
          *(_QWORD *)v16 = 0;
          v16 += 24;
          v20 -= 24;
        }
        while (v20);
        v23 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v23 = vdupq_n_s64(v16);
        v19 = &v13[24 * v11];
      }
      v26 = *a1;
      *a1 = v13;
      a1[1] = v15;
      v27 = v23;
      v24 = a1[3];
      a1[2] = v19;
      a1[3] = &v13[24 * v14];
      v28 = v24;
      sub_20BDF3648((uint64_t)&v26);
      v4 = a1[2];
    }
    else
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -3 * (v7 >> 1);
      sub_20C07F91C((uint64_t)&v26, v5, (__int128 *)v4, (uint64_t)v5 - 24 * (v7 >> 1));
      v4 = v9;
      a1[1] += 8 * v8;
      a1[2] = v9;
    }
  }
  result = *a2;
  *(_QWORD *)(v4 + 16) = a2[1].n128_u64[0];
  *(__n128 *)v4 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[2] += 24;
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdRiTokensType *pxrInternal__aapl__pxrReserved__::UsdRiTokensType::UsdRiTokensType(pxrInternal__aapl__pxrReserved__::UsdRiTokensType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v70 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "bspline", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v70, "cameraVisibility", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "catmull-rom", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "collection:cameraVisibility:includeRoot", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "constant", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "interpolation", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "linear", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "matte", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "outputs:ri:displacement", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "outputs:ri:surface", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "outputs:ri:volume", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "positions", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "ri", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "spline", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "values", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "RiMaterialAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "RiRenderPassAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "RiSplineAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "StatementsAPI", 0);
  v2 = *(_QWORD *)this;
  v71 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v70;
  v72 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v73 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v74 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v75 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v75 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v76 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v76 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v77 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v78 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v78 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v79 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v79 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v80 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v81 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v82 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v82 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v83 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v83 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v84 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v84 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v85 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v85 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v86 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v86 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v87 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v87 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v88 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v88 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v89 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v89 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  v59 = operator new(0x98uLL);
  v60 = 0;
  *((_QWORD *)this + 19) = v59;
  *((_QWORD *)this + 20) = v59;
  *((_QWORD *)this + 21) = v59 + 19;
  do
  {
    v61 = *(&v71 + v60);
    *v59 = v61;
    if ((v61 & 7) != 0)
    {
      v62 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 2, v62));
      if ((v63 & 1) == 0)
        *v59 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v60;
    ++v59;
  }
  while (v60 != 19);
  v64 = &v90;
  *((_QWORD *)this + 20) = v59;
  do
  {
    v66 = *--v64;
    v65 = v66;
    if ((v66 & 7) != 0)
    {
      v67 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
      do
        v68 = __ldxr(v67);
      while (__stlxr(v68 - 2, v67));
    }
  }
  while (v64 != &v71);
  return this;
}

void sub_20C6212C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, void **a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;

  sub_20BEEB2B8(&a20);
  v51 = (char *)&a41;
  while (1)
  {
    v53 = *((_QWORD *)v51 - 1);
    v51 -= 8;
    v52 = v53;
    if ((v53 & 7) != 0)
    {
      v54 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
      do
        v55 = __ldxr(v54);
      while (__stlxr(v55 - 2, v54));
    }
    if (v51 == &a22)
    {
      if ((*v50 & 7) != 0)
      {
        v56 = (unsigned int *)(*v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v57 = __ldxr(v56);
        while (__stlxr(v57 - 2, v56));
      }
      if ((*v49 & 7) != 0)
      {
        v58 = (unsigned int *)(*v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v59 = __ldxr(v58);
        while (__stlxr(v59 - 2, v58));
      }
      if ((*v48 & 7) != 0)
      {
        v60 = (unsigned int *)(*v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((*v47 & 7) != 0)
      {
        v62 = (unsigned int *)(*v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*v46 & 7) != 0)
      {
        v64 = (unsigned int *)(*v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*v45 & 7) != 0)
      {
        v66 = (unsigned int *)(*v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*v44 & 7) != 0)
      {
        v68 = (unsigned int *)(*v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*v43 & 7) != 0)
      {
        v70 = (unsigned int *)(*v43 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*v42 & 7) != 0)
      {
        v72 = (unsigned int *)(*v42 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if ((*a11 & 7) != 0)
      {
        v74 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      if ((*a12 & 7) != 0)
      {
        v76 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if ((*a13 & 7) != 0)
      {
        v78 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*a14 & 7) != 0)
      {
        v80 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*a15 & 7) != 0)
      {
        v82 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*a16 & 7) != 0)
      {
        v84 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*a17 & 7) != 0)
      {
        v86 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*a18 & 7) != 0)
      {
        v88 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*a19 & 7) != 0)
      {
        v90 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*v41 & 7) != 0)
      {
        v92 = (unsigned int *)(*v41 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C6215D0()
{
  JUMPOUT(0x20C621464);
}

void sub_20C6215D8()
{
  JUMPOUT(0x20C621488);
}

void sub_20C6215E0()
{
  JUMPOUT(0x20C6214ACLL);
}

void sub_20C6215E8()
{
  JUMPOUT(0x20C6214D0);
}

void sub_20C6215F0()
{
  JUMPOUT(0x20C6214F4);
}

void sub_20C6215F8()
{
  JUMPOUT(0x20C621518);
}

void sub_20C621600()
{
  JUMPOUT(0x20C62153CLL);
}

void sub_20C621608()
{
  JUMPOUT(0x20C621560);
}

void sub_20C621610()
{
  JUMPOUT(0x20C621584);
}

void sub_20C621618()
{
  JUMPOUT(0x20C6215A8);
}

pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::UsdSkel_SkelAnimationQueryImpl(pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *this, const pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  char *v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;

  *((_DWORD *)this + 2) = 1;
  *((_OWORD *)this + 1) = 0u;
  v4 = (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 16);
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_QWORD *)this = off_24C53EE80;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 96), a2);
  *((_QWORD *)this + 12) = off_24C53F008;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetTranslationsAttr(a2, (uint64_t)&v19);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 120), (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v19);
  if ((v22 & 7) != 0)
  {
    v5 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
  sub_20BFD265C(&v21);
  if (v20)
    sub_20C35C614(v20);
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetRotationsAttr(a2, (uint64_t)&v19);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 240), (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v19);
  if ((v22 & 7) != 0)
  {
    v7 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
  sub_20BFD265C(&v21);
  if (v20)
    sub_20C35C614(v20);
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetScalesAttr(a2, (uint64_t)&v19);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 360), (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v19);
  if ((v22 & 7) != 0)
  {
    v9 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
  sub_20BFD265C(&v21);
  if (v20)
    sub_20C35C614(v20);
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetBlendShapeWeightsAttr(a2, (uint64_t)&v19);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 480), (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v19);
  if ((v22 & 7) != 0)
  {
    v11 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
  sub_20BFD265C(&v21);
  if (v20)
    sub_20C35C614(v20);
  v13 = *((_QWORD *)a2 + 1);
  if (v13
    && (*(_BYTE *)(v13 + 57) & 8) == 0
    && ((*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *))(*(_QWORD *)a2 + 32))(a2) & 1) != 0
    || (v19 = "usdSkel/animQueryImpl.cpp",
        v20 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"UsdSkel_SkelAnimationQueryImpl",
        v21 = 111,
        v22 = (unint64_t)"pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::UsdSkel_SkelAnimationQ"
                                "ueryImpl(const UsdSkelAnimation &)",
        v23 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v19, "anim", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetJointsAttr(a2, (uint64_t)&v19);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v19, v4);
    if ((v22 & 7) != 0)
    {
      v14 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
    sub_20BFD265C(&v21);
    if (v20)
      sub_20C35C614(v20);
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetBlendShapesAttr(a2, (uint64_t)&v19);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v19, (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 56));
    if ((v22 & 7) != 0)
    {
      v16 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
    sub_20BFD265C(&v21);
    if (v20)
      sub_20C35C614(v20);
  }
  return this;
}

void sub_20C62194C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TfRefBase *v1;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_20C373B34(v6);
  sub_20C373B34(v5);
  sub_20C373B34(v4);
  sub_20C373B34(v3);
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::~UsdSkelAnimation(v2);
  sub_20C621A28(v1);
  _Unwind_Resume(a1);
}

void sub_20C6219B4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  sub_20C372B54((uint64_t)va);
  JUMPOUT(0x20C621980);
}

void sub_20C6219C4()
{
  JUMPOUT(0x20C621980);
}

void sub_20C6219D0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  sub_20C372B54((uint64_t)va);
  JUMPOUT(0x20C621988);
}

void sub_20C6219E0()
{
  JUMPOUT(0x20C621988);
}

void sub_20C6219EC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  sub_20C372B54((uint64_t)va);
  JUMPOUT(0x20C621990);
}

void sub_20C6219FC()
{
  JUMPOUT(0x20C621990);
}

void sub_20C621A08(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  sub_20C372B54((uint64_t)va);
  JUMPOUT(0x20C621998);
}

void sub_20C621A18()
{
  JUMPOUT(0x20C621998);
}

void sub_20C621A20()
{
  JUMPOUT(0x20C6219A0);
}

void sub_20C621A28(pxrInternal__aapl__pxrReserved__::TfRefBase *a1)
{
  *(_QWORD *)a1 = &unk_24C53EF28;
  sub_20C00918C((_QWORD *)a1 + 7);
  sub_20C00918C((_QWORD *)a1 + 2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::ComputeJointLocalTransformComponents(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a4, double a5)
{
  if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(a1 + 120, a2, a5)&& pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(a1 + 240, a3, a5))
  {
    return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(a1 + 360, a4, a5);
  }
  else
  {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::GetJointTransformTimeSamples(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  uint64_t Attribute;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t UnionedTimeSamplesInInterval;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v32;
  pxrInternal__aapl__pxrReserved__::UsdObject *v34;
  pxrInternal__aapl__pxrReserved__::UsdObject *v35;
  char *v36;
  pxrInternal__aapl__pxrReserved__::UsdObject **v37;
  char v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  Attribute = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 120));
  v39 = *(_DWORD *)Attribute;
  v7 = *(_QWORD *)(Attribute + 8);
  v40 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 48);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20BFD6E54(&v41, (_DWORD *)(Attribute + 16));
  sub_20BFD6EA4(&v42, (_DWORD *)(Attribute + 20));
  v10 = *(_QWORD *)(Attribute + 24);
  v43 = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  v13 = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 240));
  v44 = *(_DWORD *)v13;
  v14 = *(_QWORD *)(v13 + 8);
  v45 = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 48);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20BFD6E54(&v46, (_DWORD *)(v13 + 16));
  sub_20BFD6EA4(&v47, (_DWORD *)(v13 + 20));
  v17 = *(_QWORD *)(v13 + 24);
  v48 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 360));
  v49 = *(_DWORD *)v20;
  v21 = *(_QWORD *)(v20 + 8);
  v50 = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 48);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  sub_20BFD6E54(&v51, (_DWORD *)(v20 + 16));
  sub_20BFD6EA4(&v52, (_DWORD *)(v20 + 20));
  v24 = *(_QWORD *)(v20 + 24);
  v53 = v24;
  if ((v24 & 7) != 0)
  {
    v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 2, v25));
    if ((v26 & 1) == 0)
      v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = &v34;
  v38 = 0;
  v34 = (pxrInternal__aapl__pxrReserved__::UsdObject *)operator new(0x60uLL);
  v35 = v34;
  v36 = (char *)v34 + 96;
  v27 = &v54;
  v35 = (pxrInternal__aapl__pxrReserved__::UsdObject *)sub_20C58D80C((uint64_t)&v36, (uint64_t)&v39, (uint64_t)&v54, (uint64_t)v34);
  UnionedTimeSamplesInInterval = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetUnionedTimeSamplesInInterval(&v34, a2, a3);
  v37 = &v34;
  sub_20C3AEE3C((void ***)&v37);
  do
  {
    v29 = *(v27 - 1);
    if ((v29 & 7) != 0)
    {
      v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v27 - 3);
    sub_20BFD265C((_DWORD *)v27 - 4);
    v32 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*(v27 - 3);
    if (v32)
      sub_20C35C614(v32);
    v27 -= 4;
  }
  while (v27 != (uint64_t *)&v39);
  return UnionedTimeSamplesInInterval;
}

void sub_20C621DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t i;

  sub_20C3AEE3C(&a12);
  for (i = 64; i != -32; i -= 32)
    sub_20C372B54((uint64_t)(&a14 + i));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::GetJointTransformAttributes(uint64_t a1, uint64_t *a2)
{
  uint64_t Attribute;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  Attribute = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 120));
  v5 = a2[1];
  if (v5 >= a2[2])
  {
    v6 = sub_20C3AF144(a2, Attribute);
  }
  else
  {
    sub_20C37F2BC((uint64_t)(a2 + 2), a2[1], Attribute);
    v6 = v5 + 32;
    a2[1] = v5 + 32;
  }
  a2[1] = v6;
  v7 = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 240));
  v8 = a2[1];
  if (v8 >= a2[2])
  {
    v9 = sub_20C3AF144(a2, v7);
  }
  else
  {
    sub_20C37F2BC((uint64_t)(a2 + 2), a2[1], v7);
    v9 = v8 + 32;
    a2[1] = v8 + 32;
  }
  a2[1] = v9;
  v10 = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 360));
  v11 = a2[1];
  if (v11 >= a2[2])
  {
    v12 = sub_20C3AF144(a2, v10);
  }
  else
  {
    sub_20C37F2BC((uint64_t)(a2 + 2), a2[1], v10);
    v12 = v11 + 32;
    a2[1] = v11 + 32;
  }
  a2[1] = v12;
  return 1;
}

void sub_20C621F14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::JointTransformsMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;

  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 120), a2)|| pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 240), v3)|| pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 360), v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::ComputeBlendShapeWeights(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, char *a3, double a4)
{
  uint64_t v7;
  uint64_t result;
  char *v9;
  char v10;
  _QWORD v11[4];
  char v12;

  v7 = *(_QWORD *)(a1 + 104);
  if (v7 && (*(_BYTE *)(v7 + 57) & 8) == 0 && ((*(uint64_t (**)(void))(*(_QWORD *)(a1 + 96) + 32))() & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>(a1 + 480, a2, a4);
  v11[0] = "usdSkel/animQueryImpl.cpp";
  v11[1] = "ComputeBlendShapeWeights";
  v11[2] = 219;
  v11[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::ComputeBlendShapeWeights(VtFlo"
           "atArray *, UsdTimeCode) const";
  v12 = 0;
  v9 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"PackedJointAnimation schema object is invalid.", (const char *)a2, a3);
  v10 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "_anim", v9);
  result = 0;
  if ((v10 & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>(a1 + 480, a2, a4);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::GetBlendShapeWeightTimeSamples(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamplesInInterval(a1 + 480, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::GetBlendShapeWeightAttributes(uint64_t a1, uint64_t *a2)
{
  uint64_t Attribute;
  unint64_t v4;
  uint64_t v5;

  Attribute = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 480));
  v4 = a2[1];
  if (v4 >= a2[2])
  {
    v5 = sub_20C3AF144(a2, Attribute);
  }
  else
  {
    sub_20C37F2BC((uint64_t)(a2 + 2), a2[1], Attribute);
    v5 = v4 + 32;
    a2[1] = v4 + 32;
  }
  a2[1] = v5;
  return 1;
}

void sub_20C622098(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::BlendShapeWeightsMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 480), a2);
}

void pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl::New(pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl **a2@<X8>)
{
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v6;
  uint64_t *SchemaInfo;
  char *v8;
  pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *v9;
  _QWORD v10[3];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;

  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(this);
  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v6);
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)this, SchemaInfo, v8))
  {
    v9 = (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)operator new(0x258uLL);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, this);
    v10[0] = off_24C53F008;
    pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::UsdSkel_SkelAnimationQueryImpl(v9, (const pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)v10);
    *a2 = v9;
    v11 = 0;
    sub_20C6228A0(&v11);
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::~UsdSkelAnimation((pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)v10);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_20C622144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::~UsdSkelAnimation((pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_20C62216C(pxrInternal__aapl__pxrReserved__::TfRefBase *a1)
{
  void *v1;

  sub_20C622198(a1);
  operator delete(v1);
}

uint64_t sub_20C622180@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20C35C4F8(a2, (uint64_t *)(a1 + 104), (_DWORD *)(a1 + 112));
}

void sub_20C622198(pxrInternal__aapl__pxrReserved__::TfRefBase *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *v2;

  *(_QWORD *)a1 = off_24C53EE80;
  v2 = (pxrInternal__aapl__pxrReserved__::TfRefBase *)((char *)a1 + 96);
  sub_20C373B34((uint64_t)a1 + 480);
  sub_20C373B34((uint64_t)a1 + 360);
  sub_20C373B34((uint64_t)a1 + 240);
  sub_20C373B34((uint64_t)a1 + 120);
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::~UsdSkelAnimation(v2);
  sub_20C621A28(a1);
}

uint64_t sub_20C6221F0(uint64_t a1, unint64_t *a2)
{
  float32x2_t *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::GfQuatf *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  const char *Text;
  char *v14;
  unsigned int *v15;
  unsigned int v16;
  const char *v17;
  char *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 *v22;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  _OWORD v29[2];
  unsigned __int16 *v30;
  _OWORD v31[2];
  pxrInternal__aapl__pxrReserved__::GfQuatf *v32;
  unint64_t v33[4];
  float32x2_t *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  if (a2)
  {
    v34 = 0;
    memset(v33, 0, sizeof(v33));
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    v30 = 0;
    memset(v29, 0, sizeof(v29));
    if ((*(unsigned int (**)(uint64_t, unint64_t *, _OWORD *, _OWORD *))(*(_QWORD *)a1 + 40))(a1, v33, v31, v29))
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v22 = &v35;
      sub_20BF5F980(a2, v33[0], &v22);
      v4 = v34;
      v5 = v33[0];
      v6 = v32;
      v7 = *(_QWORD *)&v31[0];
      v8 = v30;
      v9 = *(_QWORD *)&v29[0];
      sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v10, v11);
      if (!pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms(v4, v5, v6, v7, v8, v9, a2[4], *a2))
      {
        *(_QWORD *)&v35 = "usdSkel/animQueryImpl.cpp";
        *((_QWORD *)&v35 + 1) = "_ComputeJointLocalTransforms";
        *(_QWORD *)&v36 = 161;
        *((_QWORD *)&v36 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::_ComputeJointLoca"
                                "lTransforms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrRese"
                                "rved__::GfMatrix4d]";
        LOBYTE(v37) = 0;
        sub_20C35C4F8((uint64_t)&v22, (uint64_t *)(a1 + 104), (_DWORD *)(a1 + 112));
        sub_20C348EEC((uint64_t)&v22, &v27);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"%s -- failed composing transforms from components.", v14, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
        sub_20BFD265C(&v27);
        if ((v26 & 7) != 0)
        {
          v15 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stlxr(v16 - 2, v15));
        }
        goto LABEL_15;
      }
      if (*a2 == *(_QWORD *)(a1 + 16))
      {
        v12 = 1;
LABEL_18:
        sub_20BF5618C((uint64_t)v29);
        sub_20BF5618C((uint64_t)v31);
        sub_20BF5618C((uint64_t)v33);
        return v12;
      }
      if (*a2)
      {
        *(_QWORD *)&v35 = "usdSkel/animQueryImpl.cpp";
        *((_QWORD *)&v35 + 1) = "_ComputeJointLocalTransforms";
        *(_QWORD *)&v36 = 158;
        *((_QWORD *)&v36 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::_ComputeJointLoca"
                                "lTransforms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrRese"
                                "rved__::GfMatrix4d]";
        LOBYTE(v37) = 0;
        sub_20C35C4F8((uint64_t)&v22, (uint64_t *)(a1 + 104), (_DWORD *)(a1 + 112));
        sub_20C348EEC((uint64_t)&v22, &v27);
        v17 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"%s -- size of transform component arrays [%zu] != joint order size [%zu].", v18, v17, *a2, *(_QWORD *)(a1 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
        sub_20BFD265C(&v27);
        if ((v26 & 7) != 0)
        {
          v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
          do
            v20 = __ldxr(v19);
          while (__stlxr(v20 - 2, v19));
        }
LABEL_15:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
        sub_20BFD265C(&v24);
        if (v23)
          sub_20C35C614(v23);
      }
    }
    v12 = 0;
    goto LABEL_18;
  }
  *(_QWORD *)&v35 = "usdSkel/animQueryImpl.cpp";
  *((_QWORD *)&v35 + 1) = "_ComputeJointLocalTransforms";
  *(_QWORD *)&v36 = 127;
  *((_QWORD *)&v36 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::_ComputeJointLocalTrans"
                          "forms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  LOBYTE(v37) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v35, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' is null");
  return 0;
}

void sub_20C6224D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20C35C2E0((uint64_t)&a12);
  sub_20BF5618C((uint64_t)&a17);
  sub_20BF5618C((uint64_t)&a23);
  sub_20BF5618C((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_20C62254C(uint64_t a1, unint64_t *a2)
{
  float32x2_t *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::GfQuatf *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  const char *Text;
  char *v14;
  unsigned int *v15;
  unsigned int v16;
  const char *v17;
  char *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 *v22;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  _OWORD v29[2];
  unsigned __int16 *v30;
  _OWORD v31[2];
  pxrInternal__aapl__pxrReserved__::GfQuatf *v32;
  unint64_t v33[4];
  float32x2_t *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  if (a2)
  {
    v34 = 0;
    memset(v33, 0, sizeof(v33));
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    v30 = 0;
    memset(v29, 0, sizeof(v29));
    if ((*(unsigned int (**)(uint64_t, unint64_t *, _OWORD *, _OWORD *))(*(_QWORD *)a1 + 40))(a1, v33, v31, v29))
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v22 = &v35;
      sub_20BF60580(a2, v33[0], &v22);
      v4 = v34;
      v5 = v33[0];
      v6 = v32;
      v7 = *(_QWORD *)&v31[0];
      v8 = v30;
      v9 = *(_QWORD *)&v29[0];
      sub_20BF6080C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v10, v11);
      if (!pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms(v4, v5, v6, v7, v8, v9, (float32x2_t *)a2[4], *a2))
      {
        *(_QWORD *)&v35 = "usdSkel/animQueryImpl.cpp";
        *((_QWORD *)&v35 + 1) = "_ComputeJointLocalTransforms";
        *(_QWORD *)&v36 = 161;
        *((_QWORD *)&v36 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::_ComputeJointLoca"
                                "lTransforms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrRese"
                                "rved__::GfMatrix4f]";
        LOBYTE(v37) = 0;
        sub_20C35C4F8((uint64_t)&v22, (uint64_t *)(a1 + 104), (_DWORD *)(a1 + 112));
        sub_20C348EEC((uint64_t)&v22, &v27);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"%s -- failed composing transforms from components.", v14, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
        sub_20BFD265C(&v27);
        if ((v26 & 7) != 0)
        {
          v15 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stlxr(v16 - 2, v15));
        }
        goto LABEL_15;
      }
      if (*a2 == *(_QWORD *)(a1 + 16))
      {
        v12 = 1;
LABEL_18:
        sub_20BF5618C((uint64_t)v29);
        sub_20BF5618C((uint64_t)v31);
        sub_20BF5618C((uint64_t)v33);
        return v12;
      }
      if (*a2)
      {
        *(_QWORD *)&v35 = "usdSkel/animQueryImpl.cpp";
        *((_QWORD *)&v35 + 1) = "_ComputeJointLocalTransforms";
        *(_QWORD *)&v36 = 158;
        *((_QWORD *)&v36 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::_ComputeJointLoca"
                                "lTransforms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrRese"
                                "rved__::GfMatrix4f]";
        LOBYTE(v37) = 0;
        sub_20C35C4F8((uint64_t)&v22, (uint64_t *)(a1 + 104), (_DWORD *)(a1 + 112));
        sub_20C348EEC((uint64_t)&v22, &v27);
        v17 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"%s -- size of transform component arrays [%zu] != joint order size [%zu].", v18, v17, *a2, *(_QWORD *)(a1 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
        sub_20BFD265C(&v27);
        if ((v26 & 7) != 0)
        {
          v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
          do
            v20 = __ldxr(v19);
          while (__stlxr(v20 - 2, v19));
        }
LABEL_15:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
        sub_20BFD265C(&v24);
        if (v23)
          sub_20C35C614(v23);
      }
    }
    v12 = 0;
    goto LABEL_18;
  }
  *(_QWORD *)&v35 = "usdSkel/animQueryImpl.cpp";
  *((_QWORD *)&v35 + 1) = "_ComputeJointLocalTransforms";
  *(_QWORD *)&v36 = 127;
  *((_QWORD *)&v36 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::_ComputeJointLocalTrans"
                          "forms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
  LOBYTE(v37) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v35, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' is null");
  return 0;
}

void sub_20C62282C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20C35C2E0((uint64_t)&a12);
  sub_20BF5618C((uint64_t)&a17);
  sub_20BF5618C((uint64_t)&a23);
  sub_20BF5618C((uint64_t)&a29);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C6228A0(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::WriteScope::WriteScope(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 33) = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire(a1 + 8, (unint64_t *)(a2 + 2336), 1);
  return a1;
}

{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 33) = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire(a1 + 8, (unint64_t *)(a2 + 2336), 1);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::WriteScope::Clear(unint64_t **this)
{
  sub_20C622980(*this);
  sub_20C622A4C(*this + 73);
  sub_20C622B18(*this + 146);
  return sub_20C622BE4(*this + 219);
}

uint64_t sub_20C622980(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t result;

  v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  v3 = sub_20BEB4B94(v2);
  do
  {
    v4 = 0;
    v5 = v3;
    v6 = a1[v3 + 1];
    if (v3-- > 1)
      v8 = v5;
    else
      v8 = 1;
    do
    {
      v9 = v6 + 24 * v4;
      v12 = *(_QWORD *)(v9 + 16);
      v11 = (_QWORD *)(v9 + 16);
      v10 = (_QWORD *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *v11 = *v10;
          sub_20C6261B8((uint64_t)a1, (uint64_t)v10);
          v10 = (_QWORD *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    result = sub_20C6261E8((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_20C622A4C(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t result;

  v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  v3 = sub_20BEB4B94(v2);
  do
  {
    v4 = 0;
    v5 = v3;
    v6 = a1[v3 + 1];
    if (v3-- > 1)
      v8 = v5;
    else
      v8 = 1;
    do
    {
      v9 = v6 + 24 * v4;
      v12 = *(_QWORD *)(v9 + 16);
      v11 = (_QWORD *)(v9 + 16);
      v10 = (_QWORD *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *v11 = *v10;
          sub_20C6262A0((uint64_t)a1, (uint64_t)v10);
          v10 = (_QWORD *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    result = sub_20C6262D0((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_20C622B18(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t result;

  v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  v3 = sub_20BEB4B94(v2);
  do
  {
    v4 = 0;
    v5 = v3;
    v6 = a1[v3 + 1];
    if (v3-- > 1)
      v8 = v5;
    else
      v8 = 1;
    do
    {
      v9 = v6 + 24 * v4;
      v12 = *(_QWORD *)(v9 + 16);
      v11 = (_QWORD *)(v9 + 16);
      v10 = (_QWORD *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *v11 = *v10;
          sub_20C626388((uint64_t)a1, (uint64_t)v10);
          v10 = (_QWORD *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    result = sub_20C6263B8((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_20C622BE4(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t result;

  v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  v3 = sub_20BEB4B94(v2);
  do
  {
    v4 = 0;
    v5 = v3;
    v6 = a1[v3 + 1];
    if (v3-- > 1)
      v8 = v5;
    else
      v8 = 1;
    do
    {
      v9 = v6 + 24 * v4;
      v12 = *(_QWORD *)(v9 + 16);
      v11 = (_QWORD *)(v9 + 16);
      v10 = (_QWORD *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *v11 = *v10;
          sub_20C626488((uint64_t)a1, (uint64_t)v10);
          v10 = (_QWORD *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    result = sub_20C6264B8((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::ReadScope(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 33) = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire(a1 + 8, (unint64_t *)(a2 + 2336), 0);
  return a1;
}

{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 33) = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire(a1 + 8, (unint64_t *)(a2 + 2336), 0);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateAnimQuery(uint64_t **this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  unsigned int *v7;
  unsigned int v8;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v9;
  int v10;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  uint64_t v16;

  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a2, a2)
    || (sub_20C436BD0((uint64_t)a2, v6) & 1) == 0)
  {
    goto LABEL_16;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2 + 4))
  {
    v13 = 0;
    LOBYTE(v14) = 0;
    v15 = 0;
    if (sub_20C622EE4(*this, (uint64_t)&v13, (uint64_t)a2))
    {
      *a3 = *(_QWORD *)(v15 + 48);
      sub_20BF1DD04(a3);
LABEL_15:
      v15 = 0;
      sub_20BEBF29C(&v13);
      return;
    }
    v15 = 0;
    sub_20BEBF29C(&v13);
    if (pxrInternal__aapl__pxrReserved__::UsdSkelIsSkelAnimationPrim(a2, v9))
    {
      v13 = 0;
      LOBYTE(v14) = 0;
      v15 = 0;
      if (sub_20C622F48(*this, (uint64_t)&v13, (uint64_t)a2))
      {
        pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl::New(a2, &v12);
        v10 = v15 + 48;
        v11 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v15 + 48);
        *(_QWORD *)(v15 + 48) = v12;
        v12 = 0;
        sub_20BF1D8F4(v10, v11);
        sub_20C626160(&v12);
      }
      *a3 = *(_QWORD *)(v15 + 48);
      sub_20BF1DD04(a3);
      goto LABEL_15;
    }
LABEL_16:
    *a3 = 0;
    return;
  }
  sub_20C5CC5EC((uint64_t)a2, (uint64_t)&v13);
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateAnimQuery((pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *)this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
  if ((v16 & 7) != 0)
  {
    v7 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C622E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_20C626160(&a10);
  a13 = 0;
  sub_20BEBF29C(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20C622EE4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C626570(a1, 0, a3, 0, a2, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20C6268A0, 0);
}

uint64_t sub_20C622F48(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C626570(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20C626D30, 0);
}

void pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateSkelDefinition(pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v9;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v11;
  uint64_t *SchemaInfo;
  char *v13;
  const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v14;
  int v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v16;
  _QWORD v17[3];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  uint64_t v21;
  uint64_t v22;

  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a2, a2)
    || (sub_20C436BD0((uint64_t)a2, v6) & 1) == 0)
  {
    goto LABEL_16;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2 + 4))
  {
    v19 = 0;
    LOBYTE(v20) = 0;
    v21 = 0;
    if (sub_20C6231B8((uint64_t *)(*(_QWORD *)this + 584), (uint64_t)&v19, (uint64_t)a2))
    {
      *a3 = *(_QWORD *)(v21 + 48);
      sub_20BF1DD04(a3);
LABEL_15:
      v21 = 0;
      sub_20BEBF29C(&v19);
      return;
    }
    v21 = 0;
    v9 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)sub_20BEBF29C(&v19);
    StaticTfType = pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(v9);
    SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v11);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a2, SchemaInfo, v13))
    {
      v19 = 0;
      LOBYTE(v20) = 0;
      v21 = 0;
      if (sub_20C62321C((uint64_t *)(*(_QWORD *)this + 584), (uint64_t)&v19, (uint64_t)a2))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v17, a2);
        v17[0] = off_24C53F7D0;
        pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::New((uint64_t)v17, v14, (uint64_t *)&v18);
        v15 = v21 + 48;
        v16 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v21 + 48);
        *(_QWORD *)(v21 + 48) = v18;
        v18 = 0;
        sub_20BF1D8F4(v15, v16);
        sub_20C62618C(&v18);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v17);
      }
      *a3 = *(_QWORD *)(v21 + 48);
      sub_20BF1DD04(a3);
      goto LABEL_15;
    }
LABEL_16:
    *a3 = 0;
    return;
  }
  sub_20C5CC5EC((uint64_t)a2, (uint64_t)&v19);
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateSkelDefinition(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v19);
  if ((v22 & 7) != 0)
  {
    v7 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
  sub_20BFD265C(&v21);
  if (v20)
    sub_20C35C614(v20);
}

void sub_20C623160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_20C62618C(&a12);
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&a9);
  a15 = 0;
  sub_20BEBF29C(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6231B8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C626EAC(a1, 0, a3, 0, a2, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20C6271DC, 0);
}

uint64_t sub_20C62321C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C626EAC(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20C62760C, 0);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateSkelQuery@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v16;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v24;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  _QWORD v31[4];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v36;

  v24 = 0;
  LOBYTE(v25) = 0;
  *(_QWORD *)&v26 = 0;
  if (sub_20C6235FC((uint64_t *)(*(_QWORD *)this + 1168), (uint64_t)&v24, (uint64_t)a2))
  {
    v6 = v26;
    *(_QWORD *)a3 = *(_QWORD *)(v26 + 48);
    sub_20BF1DD04((uint64_t *)a3);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(v6 + 56);
    sub_20BF1DD04((uint64_t *)(a3 + 8));
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(v6 + 64);
    v7 = *(_OWORD *)(v6 + 96);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a3 + 48) = v7;
    v8 = *(_QWORD *)(v6 + 112);
    *(_QWORD *)(a3 + 64) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 - 16);
      if (*(_QWORD *)(a3 + 56))
        v9 = *(unint64_t **)(a3 + 56);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    *(_DWORD *)(a3 + 72) = *(_DWORD *)(v6 + 120);
    *(_QWORD *)&v26 = 0;
    return (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_20BEBF29C(&v24);
  }
  else
  {
    *(_QWORD *)&v26 = 0;
    sub_20BEBF29C(&v24);
    pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateSkelDefinition(this, a2, (uint64_t *)&v36);
    if (v36)
    {
      v33 = 0;
      v34 = 0;
      v35 = 0;
      if (sub_20C623660((uint64_t *)(*(_QWORD *)this + 1168), (uint64_t)&v33, (uint64_t)a2))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v31, a2);
        v31[3] = 0;
        v31[0] = off_24C53F490;
        pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedAnimationSource((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v31, (uint64_t)&v24);
        pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateAnimQuery((uint64_t **)this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v24, (uint64_t *)&v32);
        if ((BYTE8(v26) & 7) != 0)
        {
          v12 = (unsigned int *)(*((_QWORD *)&v26 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v13 = __ldxr(v12);
          while (__stlxr(v13 - 2, v12));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
        sub_20BFD265C(&v26);
        if (v25)
          sub_20C35C614(v25);
        pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::~UsdSkelBindingAPI((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v31);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::UsdSkelSkeletonQuery(&v24, &v36, &v32);
        v14 = v35;
        v16 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v35 + 48);
        v15 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v35 + 48);
        *(_QWORD *)(v35 + 48) = v24;
        v24 = 0;
        sub_20BF1D8F4((int)v16, v15);
        v17 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v14 + 56);
        *(_QWORD *)(v14 + 56) = v25;
        v25 = 0;
        sub_20BF1D8F4(v14 + 56, v17);
        *(_OWORD *)(v14 + 64) = v26;
        if (v16 != &v24)
        {
          sub_20BF5618C(v14 + 80);
          v18 = v28;
          *(_OWORD *)(v14 + 80) = v27;
          *(_OWORD *)(v14 + 96) = v18;
          v27 = 0u;
          v28 = 0u;
          *(_QWORD *)(v14 + 112) = v29;
          v29 = 0;
        }
        *(_DWORD *)(v14 + 120) = v30;
        sub_20BF5618C((uint64_t)&v27);
        sub_20C626160(&v25);
        sub_20C62618C(&v24);
        sub_20C626160(&v32);
      }
      v19 = v35;
      *(_QWORD *)a3 = *(_QWORD *)(v35 + 48);
      sub_20BF1DD04((uint64_t *)a3);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(v19 + 56);
      sub_20BF1DD04((uint64_t *)(a3 + 8));
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(v19 + 64);
      v20 = *(_OWORD *)(v19 + 96);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v19 + 80);
      *(_OWORD *)(a3 + 48) = v20;
      v21 = *(_QWORD *)(v19 + 112);
      *(_QWORD *)(a3 + 64) = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 - 16);
        if (*(_QWORD *)(a3 + 56))
          v22 = *(unint64_t **)(a3 + 56);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      *(_DWORD *)(a3 + 72) = *(_DWORD *)(v19 + 120);
      v35 = 0;
      sub_20BEBF29C(&v33);
      return sub_20C62618C(&v36);
    }
    else
    {
      sub_20C62618C(&v36);
      return (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_20C6253E8((_QWORD *)a3);
    }
  }
}

void sub_20C623560(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C626160((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v1 - 80));
  *(_QWORD *)(v1 - 56) = 0;
  sub_20BEBF29C((_QWORD *)(v1 - 72));
  sub_20C62618C((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_20C6235FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C6276EC(a1, 0, a3, 0, a2, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20C627A1C, 0);
}

uint64_t sub_20C623660(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C6276EC(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20C627E4C, 0);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C6236C4(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF5618C((uint64_t)(a1 + 4));
  sub_20C626160(a1 + 1);
  return sub_20C62618C(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::GetSkinningQuery@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *a3@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v7;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  if (sub_20C623780((uint64_t *)(*(_QWORD *)this + 1752), (uint64_t)&v5, (uint64_t)a2))
    sub_20C625430((uint64_t)a3, v7 + 48);
  else
    pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(a3);
  v7 = 0;
  return sub_20BEBF29C(&v5);
}

void sub_20C623768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  sub_20BEBF29C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C623780(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C628038(a1, 0, a3, 0, a2, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20C628368, 0);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::_FindOrCreateSkinningQuery@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const char *v7;
  char *v8;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *AnimQuery;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v16;
  uint64_t v17;

  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateSkelQuery(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)(a3 + 224), (uint64_t)&v15);
  AnimQuery = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)&v15);
  if (v15)
  {
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointOrder((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)&v15, v7, v8, (uint64_t)v13);
  }
  else
  {
    v14 = 0;
    memset(v13, 0, sizeof(v13));
  }
  if (*(_QWORD *)AnimQuery)
  {
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeOrder(AnimQuery, v7, v8, (uint64_t)v11);
  }
  else
  {
    v12 = 0;
    memset(v11, 0, sizeof(v11));
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(a4, a2, (uint64_t)v13, (uint64_t)v11, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)a3, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)(a3 + 32), a3 + 64, a3 + 96, (pxrInternal__aapl__pxrReserved__::UsdProperty *)(a3 + 128), a3 + 160, a3 + 192);
  sub_20C00918C(v11);
  sub_20C00918C(v13);
  sub_20BF5618C((uint64_t)&v17);
  sub_20C626160(&v16);
  return sub_20C62618C(&v15);
}

void sub_20C6238E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_20C00918C((uint64_t *)va);
  sub_20C6236C4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::Populate(pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *a1, uint64_t a2, _QWORD *a3)
{
  const char *Text;
  const char *v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  BOOL v14;
  unint64_t v15;
  _BOOL4 v16;
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable *v17;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v19;
  uint64_t *SchemaInfo;
  char *v21;
  char IsA;
  unsigned int *v23;
  unsigned int v24;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v34;
  unsigned int *v35;
  unsigned int v36;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v37;
  unsigned int *v38;
  unsigned int v39;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v40;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v41;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v47;
  unsigned int *v48;
  unsigned int v49;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v50;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v51;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v57;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v58;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v64;
  unsigned int *v65;
  unsigned int v66;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v67;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v68;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v74;
  unsigned int *v75;
  unsigned int v76;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v77;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v78;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v84;
  unsigned int *v85;
  unsigned int v86;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v87;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v88;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v94;
  _BOOL4 v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v113;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v114;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  uint64_t v120;
  int v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  void *p_p;
  const char *v127;
  const char *v128;
  char *v129;
  unsigned int *v130;
  unsigned int v131;
  unint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  void **v136;
  const char *v137;
  const char *v138;
  char *v139;
  void **v141;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  int v146;
  int v147;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v148;
  int v149;
  int v150;
  uint64_t v151;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v153;
  int v154;
  int v155;
  uint64_t v156;
  void (**v157)(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *__hidden);
  uint64_t v158;
  int v159;
  _QWORD v160[4];
  void *__b;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v162;
  int v163;
  int v164;
  unint64_t v165;
  int v166;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v167;
  int v168;
  int v169;
  unint64_t v170;
  int v171;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v172;
  int v173;
  int v174;
  unint64_t v175;
  int v176;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v177;
  int v178;
  int v179;
  unint64_t v180;
  int v181;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v182;
  int v183;
  int v184;
  unint64_t v185;
  int v186;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v187;
  int v188;
  int v189;
  unint64_t v190;
  int v191;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v192;
  int v193;
  int v194;
  uint64_t v195;
  int v196;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v197;
  int v198;
  int v199;
  unint64_t v200;
  _QWORD v201[2];
  uint64_t v202;
  int v203;
  char v204;
  char v205;
  uint64_t v206[2];
  int v207;
  _DWORD v208[8];
  char v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v214;
  uint64_t v215;
  uint64_t v216;

  if (sub_20C624E4C(0))
  {
    sub_20C35C4F8((uint64_t)&v141, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
    sub_20C348EEC((uint64_t)&v141, (int *)&__b);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__b);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache] Populate map from <%s>\n", v7, v8, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__b + 1);
    sub_20BFD265C(&__b);
    if ((v144 & 7) != 0)
    {
      v9 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
    sub_20BFD265C(&v143);
    if (v142)
      sub_20C35C614(v142);
  }
  v11 = *(_QWORD *)(a2 + 8);
  if (v11
    && (*(_BYTE *)(v11 + 57) & 8) == 0
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) & 1) != 0)
  {
    sub_20C628810(&v210, 1uLL);
    sub_20C35C4F8((uint64_t)&v141, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
    sub_20C37F5FC((uint64_t)v206, (uint64_t)&v141, a3);
    v209 = 1;
    if ((v144 & 7) != 0)
    {
      v12 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
    sub_20BFD265C(&v143);
    if (v142)
      sub_20C35C614(v142);
    sub_20C37ECB8(v206, (uint64_t)v201);
    while (1)
    {
      v141 = (void **)v206[1];
      v142 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v206;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v143);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v143 + 1);
      LODWORD(v144) = 0;
      WORD2(v144) = 0;
      if ((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v201[1] == v142 && (void **)v201[0] == v141)
      {
        v14 = 1;
        if (v202 == v143 && !v203 && !v204)
          v14 = v205 != 0;
      }
      else
      {
        v14 = 1;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
      sub_20BFD265C(&v143);
      if (!v14)
        break;
      if (v205)
      {
        v15 = v211;
        if (v211 != v210)
        {
          sub_20C37ED84((uint64_t)v201, (uint64_t)&v141);
          v16 = *(_DWORD *)(v15 - 32) == (_DWORD)v141
             && *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v15 - 24) == v142
             && *(_QWORD *)(v15 - 16) == v143
             && (*(_QWORD *)(v15 - 8) & 0xFFFFFFFFFFFFFFF8) == (v144 & 0xFFFFFFFFFFFFFFF8);
          if ((v144 & 7) != 0)
          {
            v104 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
            do
              v105 = __ldxr(v104);
            while (__stlxr(v105 - 2, v104));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
          sub_20BFD265C(&v143);
          if (v142)
            sub_20C35C614(v142);
          if (v16)
          {
            v106 = v211 - 288;
            sub_20C628B84((uint64_t)&v212, v211 - 288);
            v211 = v106;
          }
        }
      }
      else
      {
        sub_20C37EEF4((uint64_t)v201, (uint64_t)&v141);
        StaticTfType = pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(v17);
        SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v19);
        IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v141, SchemaInfo, v21);
        if ((v144 & 7) != 0)
        {
          v23 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
          do
            v24 = __ldxr(v23);
          while (__stlxr(v24 - 2, v23));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
        sub_20BFD265C(&v143);
        if (v142)
          sub_20C35C614(v142);
        if ((IsA & 1) != 0)
        {
          sub_20C625850((uint64_t)&__b, v211 - 288);
          sub_20C37ED84((uint64_t)v201, (uint64_t)&v141);
          v26 = pxrInternal__aapl__pxrReserved__::UsdSkelIsSkinnablePrim((pxrInternal__aapl__pxrReserved__ *)&v141, v25);
          if ((v144 & 7) != 0)
          {
            v27 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
            do
              v28 = __ldxr(v27);
            while (__stlxr(v28 - 2, v27));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
          sub_20BFD265C(&v143);
          if (v142)
            sub_20C35C614(v142);
          sub_20C37ED84((uint64_t)v201, (uint64_t)&v141);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v160, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v141);
          v160[3] = 0;
          v160[0] = off_24C53F490;
          if ((v144 & 7) != 0)
          {
            v29 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
            do
              v30 = __ldxr(v29);
            while (__stlxr(v30 - 2, v29));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
          sub_20BFD265C(&v143);
          if (v142)
            sub_20C35C614(v142);
          LODWORD(v141) = 1;
          v142 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v143);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v143 + 1);
          v144 = 0;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v157, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v141);
          v157 = off_24C53F7D0;
          if ((v144 & 7) != 0)
          {
            v31 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
            do
              v32 = __ldxr(v31);
            while (__stlxr(v32 - 2, v31));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
          sub_20BFD265C(&v143);
          if (v142)
            sub_20C35C614(v142);
          if (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v160, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v157))
          {
            sub_20C35C4F8((uint64_t)&v141, &v158, &v159);
            v196 = (int)v141;
            v33 = v142;
            v142 = 0;
            v34 = v197;
            v197 = v33;
            if (v34)
              sub_20C35C614(v34);
            sub_20BFD3EBC(&v198, (int *)&v143);
            sub_20BFD3F10(&v199, (int *)&v143 + 1);
            if ((v200 & 7) != 0)
            {
              v35 = (unsigned int *)(v200 & 0xFFFFFFFFFFFFFFF8);
              do
                v36 = __ldxr(v35);
              while (__stlxr(v36 - 2, v35));
            }
            v200 = v144;
            v144 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
            sub_20BFD265C(&v143);
            if (v142)
              sub_20C35C614(v142);
          }
          pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v160, (uint64_t)&v213);
          sub_20C624EAC((uint64_t)&v213, v37, (uint64_t)&v141);
          if ((v216 & 7) != 0)
          {
            v38 = (unsigned int *)(v216 & 0xFFFFFFFFFFFFFFF8);
            do
              v39 = __ldxr(v38);
            while (__stlxr(v39 - 2, v38));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v215 + 1);
          sub_20BFD265C(&v215);
          if (v214)
            sub_20C35C614(v214);
          if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v141, v40)&& pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v141))
          {
            LODWORD(__b) = (_DWORD)v141;
            v41 = v142;
            v142 = 0;
            v42 = v162;
            v162 = v41;
            if (v42)
              sub_20C35C614(v42);
            sub_20BFD3EBC(&v163, (int *)&v143);
            sub_20BFD3F10(&v164, (int *)&v143 + 1);
            if ((v165 & 7) != 0)
            {
              v43 = (unsigned int *)(v165 & 0xFFFFFFFFFFFFFFF8);
              do
                v44 = __ldxr(v43);
              while (__stlxr(v44 - 2, v43));
            }
            v165 = v144;
            v144 = 0;
          }
          if ((v144 & 7) != 0)
          {
            v45 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
            do
              v46 = __ldxr(v45);
            while (__stlxr(v46 - 2, v45));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
          sub_20BFD265C(&v143);
          if (v142)
            sub_20C35C614(v142);
          pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointWeightsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v160, (uint64_t)&v213);
          sub_20C624EAC((uint64_t)&v213, v47, (uint64_t)&v141);
          if ((v216 & 7) != 0)
          {
            v48 = (unsigned int *)(v216 & 0xFFFFFFFFFFFFFFF8);
            do
              v49 = __ldxr(v48);
            while (__stlxr(v49 - 2, v48));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v215 + 1);
          sub_20BFD265C(&v215);
          if (v214)
            sub_20C35C614(v214);
          if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v141, v50)&& pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v141))
          {
            v166 = (int)v141;
            v51 = v142;
            v142 = 0;
            v52 = v167;
            v167 = v51;
            if (v52)
              sub_20C35C614(v52);
            sub_20BFD3EBC(&v168, (int *)&v143);
            sub_20BFD3F10(&v169, (int *)&v143 + 1);
            if ((v170 & 7) != 0)
            {
              v53 = (unsigned int *)(v170 & 0xFFFFFFFFFFFFFFF8);
              do
                v54 = __ldxr(v53);
              while (__stlxr(v54 - 2, v53));
            }
            v170 = v144;
            v144 = 0;
          }
          if ((v144 & 7) != 0)
          {
            v55 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
            do
              v56 = __ldxr(v55);
            while (__stlxr(v56 - 2, v55));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
          sub_20BFD265C(&v143);
          if (v142)
            sub_20C35C614(v142);
          pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkinningMethodAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v160, (uint64_t)&v141);
          if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v141, v57)&& pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v141))
          {
            v171 = (int)v141;
            v58 = v142;
            v142 = 0;
            v59 = v172;
            v172 = v58;
            if (v59)
              sub_20C35C614(v59);
            sub_20BFD3EBC(&v173, (int *)&v143);
            sub_20BFD3F10(&v174, (int *)&v143 + 1);
            if ((v175 & 7) != 0)
            {
              v60 = (unsigned int *)(v175 & 0xFFFFFFFFFFFFFFF8);
              do
                v61 = __ldxr(v60);
              while (__stlxr(v61 - 2, v60));
            }
            v175 = v144;
            v144 = 0;
          }
          if ((v144 & 7) != 0)
          {
            v62 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
            do
              v63 = __ldxr(v62);
            while (__stlxr(v63 - 2, v62));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
          sub_20BFD265C(&v143);
          if (v142)
            sub_20C35C614(v142);
          pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetGeomBindTransformAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v160, (uint64_t)&v213);
          sub_20C624EAC((uint64_t)&v213, v64, (uint64_t)&v141);
          if ((v216 & 7) != 0)
          {
            v65 = (unsigned int *)(v216 & 0xFFFFFFFFFFFFFFF8);
            do
              v66 = __ldxr(v65);
            while (__stlxr(v66 - 2, v65));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v215 + 1);
          sub_20BFD265C(&v215);
          if (v214)
            sub_20C35C614(v214);
          if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v141, v67)&& pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v141))
          {
            v176 = (int)v141;
            v68 = v142;
            v142 = 0;
            v69 = v177;
            v177 = v68;
            if (v69)
              sub_20C35C614(v69);
            sub_20BFD3EBC(&v178, (int *)&v143);
            sub_20BFD3F10(&v179, (int *)&v143 + 1);
            if ((v180 & 7) != 0)
            {
              v70 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
              do
                v71 = __ldxr(v70);
              while (__stlxr(v71 - 2, v70));
            }
            v180 = v144;
            v144 = 0;
          }
          if ((v144 & 7) != 0)
          {
            v72 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
            do
              v73 = __ldxr(v72);
            while (__stlxr(v73 - 2, v72));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
          sub_20BFD265C(&v143);
          if (v142)
            sub_20C35C614(v142);
          pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v160, (uint64_t)&v213);
          sub_20C624EAC((uint64_t)&v213, v74, (uint64_t)&v141);
          if ((v216 & 7) != 0)
          {
            v75 = (unsigned int *)(v216 & 0xFFFFFFFFFFFFFFF8);
            do
              v76 = __ldxr(v75);
            while (__stlxr(v76 - 2, v75));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v215 + 1);
          sub_20BFD265C(&v215);
          if (v214)
            sub_20C35C614(v214);
          if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v141, v77)&& pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v141))
          {
            v181 = (int)v141;
            v78 = v142;
            v142 = 0;
            v79 = v182;
            v182 = v78;
            if (v79)
              sub_20C35C614(v79);
            sub_20BFD3EBC(&v183, (int *)&v143);
            sub_20BFD3F10(&v184, (int *)&v143 + 1);
            if ((v185 & 7) != 0)
            {
              v80 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
              do
                v81 = __ldxr(v80);
              while (__stlxr(v81 - 2, v80));
            }
            v185 = v144;
            v144 = 0;
          }
          if ((v144 & 7) != 0)
          {
            v82 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
            do
              v83 = __ldxr(v82);
            while (__stlxr(v83 - 2, v82));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
          sub_20BFD265C(&v143);
          if (v142)
            sub_20C35C614(v142);
          if (v26)
          {
            pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapesAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v160, (uint64_t)&v213);
            sub_20C624EAC((uint64_t)&v213, v84, (uint64_t)&v141);
            if ((v216 & 7) != 0)
            {
              v85 = (unsigned int *)(v216 & 0xFFFFFFFFFFFFFFF8);
              do
                v86 = __ldxr(v85);
              while (__stlxr(v86 - 2, v85));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v215 + 1);
            sub_20BFD265C(&v215);
            if (v214)
              sub_20C35C614(v214);
            if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v141, v87)&& pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v141))
            {
              v186 = (int)v141;
              v88 = v142;
              v142 = 0;
              v89 = v187;
              v187 = v88;
              if (v89)
                sub_20C35C614(v89);
              sub_20BFD3EBC(&v188, (int *)&v143);
              sub_20BFD3F10(&v189, (int *)&v143 + 1);
              if ((v190 & 7) != 0)
              {
                v90 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
                do
                  v91 = __ldxr(v90);
                while (__stlxr(v91 - 2, v90));
              }
              v190 = v144;
              v144 = 0;
            }
            if ((v144 & 7) != 0)
            {
              v92 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
              do
                v93 = __ldxr(v92);
              while (__stlxr(v93 - 2, v92));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
            sub_20BFD265C(&v143);
            if (v142)
              sub_20C35C614(v142);
            pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapeTargetsRel((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v160, (uint64_t)&v146);
            if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v146, v94))goto LABEL_188;
            sub_20C35C4F8((uint64_t)&v141, (uint64_t *)&v148, &v149);
            v95 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v143);
            if ((v144 & 7) != 0)
            {
              v96 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
              do
                v97 = __ldxr(v96);
              while (__stlxr(v97 - 2, v96));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
            sub_20BFD265C(&v143);
            if (v142)
              sub_20C35C614(v142);
            if (v95)
            {
              v98 = sub_20C35C4F8((uint64_t)&v213, (uint64_t *)&v148, &v149);
              sub_20C5CC5EC(v98, (uint64_t)&v141);
              v99 = sub_20C398E78(&v146);
              pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v141, v99, (uint64_t)&__p);
              if ((v144 & 7) != 0)
              {
                v100 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
                do
                  v101 = __ldxr(v100);
                while (__stlxr(v101 - 2, v100));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
              sub_20BFD265C(&v143);
              if (v142)
                sub_20C35C614(v142);
              if ((v216 & 7) != 0)
              {
                v102 = (unsigned int *)(v216 & 0xFFFFFFFFFFFFFFF8);
                do
                  v103 = __ldxr(v102);
                while (__stlxr(v103 - 2, v102));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v215 + 1);
              sub_20BFD265C(&v215);
              if (v214)
                sub_20C35C614(v214);
            }
            else
            {
LABEL_188:
              LODWORD(__p) = v146;
              v153 = v148;
              if (v148)
              {
                v107 = (unint64_t *)((char *)v148 + 48);
                do
                  v108 = __ldxr(v107);
                while (__stxr(v108 + 1, v107));
              }
              sub_20BFD6E54(&v154, &v149);
              sub_20BFD6EA4(&v155, &v150);
              v156 = v151;
              if ((v151 & 7) != 0)
              {
                v109 = (unsigned int *)(v151 & 0xFFFFFFFFFFFFFFF8);
                do
                  v110 = __ldxr(v109);
                while (__stxr(v110 + 2, v109));
                if ((v110 & 1) == 0)
                  v156 &= 0xFFFFFFFFFFFFFFF8;
              }
            }
            if ((v151 & 7) != 0)
            {
              v111 = (unsigned int *)(v151 & 0xFFFFFFFFFFFFFFF8);
              do
                v112 = __ldxr(v111);
              while (__stlxr(v112 - 2, v111));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v150);
            sub_20BFD265C(&v149);
            if (v148)
              sub_20C35C614(v148);
            if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&__p, v113)&& pxrInternal__aapl__pxrReserved__::UsdRelationship::HasAuthoredTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&__p))
            {
              v191 = (int)__p;
              v114 = v153;
              v153 = 0;
              v115 = v192;
              v192 = v114;
              if (v115)
                sub_20C35C614(v115);
              sub_20BFD3EBC(&v193, &v154);
              sub_20BFD3F10(&v194, &v155);
              if ((v195 & 7) != 0)
              {
                v116 = (unsigned int *)(v195 & 0xFFFFFFFFFFFFFFF8);
                do
                  v117 = __ldxr(v116);
                while (__stlxr(v117 - 2, v116));
              }
              v195 = v156;
              v156 = 0;
            }
            if ((v156 & 7) != 0)
            {
              v118 = (unsigned int *)(v156 & 0xFFFFFFFFFFFFFFF8);
              do
                v119 = __ldxr(v118);
              while (__stlxr(v119 - 2, v118));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v155);
            sub_20BFD265C(&v154);
            if (v153)
              sub_20C35C614(v153);
            v213 = 0;
            LOBYTE(v214) = 0;
            v215 = 0;
            v120 = *(_QWORD *)a1;
            sub_20C37ED84((uint64_t)v201, (uint64_t)&v141);
            v121 = sub_20C6250BC((uint64_t *)(v120 + 1752), (uint64_t)&v213, (uint64_t)&v141);
            if ((v144 & 7) != 0)
            {
              v122 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
              do
                v123 = __ldxr(v122);
              while (__stlxr(v123 - 2, v122));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
            sub_20BFD265C(&v143);
            if (v142)
              sub_20C35C614(v142);
            if (v121)
            {
              sub_20C37ED84((uint64_t)v201, (uint64_t)&__p);
              pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::_FindOrCreateSkinningQuery(a1, (uint64_t)&__p, (uint64_t)&__b, (uint64_t)&v141);
              sub_20C625120(v215 + 48, (uint64_t)&v141);
              sub_20C625CE0((uint64_t)&v141);
              if ((v156 & 7) != 0)
              {
                v124 = (unsigned int *)(v156 & 0xFFFFFFFFFFFFFFF8);
                do
                  v125 = __ldxr(v124);
                while (__stlxr(v125 - 2, v124));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v155);
              sub_20BFD265C(&v154);
              if (v153)
                sub_20C35C614(v153);
            }
            if (sub_20C624E4C(0))
            {
              sub_20BDDC468(&__p, 0x1C71C71C71C71C72 * ((uint64_t)(v211 - v210) >> 5), 32);
              if (v155 >= 0)
                p_p = &__p;
              else
                p_p = __p;
              sub_20C37EEF4((uint64_t)v201, (uint64_t)&v141);
              sub_20C348EEC((uint64_t)&v141, &v146);
              v127 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v146);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache] %sAdded skinning query for prim <%s>\n", v128, v129, p_p, v127);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v147);
              sub_20BFD265C(&v146);
              if ((v144 & 7) != 0)
              {
                v130 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
                do
                  v131 = __ldxr(v130);
                while (__stlxr(v131 - 2, v130));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
              sub_20BFD265C(&v143);
              if (v142)
                sub_20C35C614(v142);
              if (SHIBYTE(v155) < 0)
                operator delete(__p);
            }
            pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v201);
            v215 = 0;
            sub_20BEBF29C(&v213);
          }
          sub_20C37ED84((uint64_t)v201, (uint64_t)&v141);
          v132 = v211;
          if (v211 >= v212)
          {
            v133 = sub_20C628DF8(&v210, (uint64_t)&__b, (uint64_t)&v141);
          }
          else
          {
            sub_20C628F1C(v211, (uint64_t)&__b, (uint64_t)&v141);
            v133 = v132 + 288;
          }
          v211 = v133;
          if ((v144 & 7) != 0)
          {
            v134 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
            do
              v135 = __ldxr(v134);
            while (__stlxr(v135 - 2, v134));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
          sub_20BFD265C(&v143);
          if (v142)
            sub_20C35C614(v142);
          pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v157);
          pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::~UsdSkelBindingAPI((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v160);
          sub_20C625F40((uint64_t)&__b);
        }
        else
        {
          if (sub_20C624E4C(0))
          {
            sub_20BDDC468(&__b, 0x1C71C71C71C71C72 * ((uint64_t)(v211 - v210) >> 5), 32);
            v136 = v164 >= 0 ? &__b : (void **)__b;
            sub_20C37EEF4((uint64_t)v201, (uint64_t)&v141);
            sub_20C348EEC((uint64_t)&v141, (int *)&v213);
            v137 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v213);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache]  %sPruning traversal at <%s> (prim is not UsdGeomImageable)\n", v138, v139, v136, v137);
            sub_20BFD1A18(&v213);
            sub_20C37EFCC((uint64_t)&v141);
            if (SHIBYTE(v164) < 0)
              operator delete(__b);
          }
          pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v201);
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)v201);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v202 + 1);
    sub_20BFD265C(&v202);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v208);
    sub_20BFD265C(&v207);
    v141 = (void **)&v210;
    sub_20C628B00(&v141);
    return 1;
  }
  else
  {
    v141 = (void **)"usdSkel/cacheImpl.cpp";
    v142 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Populate";
    v143 = 230;
    v144 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::Populate(const UsdSkel"
                             "Root &, Usd_PrimFlagsPredicate)";
    v145 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v141, 1, (pxrInternal__aapl__pxrReserved__ *)"'root' is invalid.");
    return 0;
  }
}

void sub_20C624B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_20C37EFCC((uint64_t)&a37);
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  sub_20C37ED50(v37 - 232);
  sub_20C37EDFC(v37 - 200);
  STACK[0x2E8] = v37 - 144;
  sub_20C628B00((void ***)&STACK[0x2E8]);
  _Unwind_Resume(a1);
}

void sub_20C624E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_20C37EFCC((uint64_t)&a37);
  JUMPOUT(0x20C624E08);
}

BOOL sub_20C624E4C(int a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_20C628798();
  v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    v5 = v2;
    v6 = sub_20C628798();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), off_24C53EF90[a1]);
    v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

void sub_20C624EAC(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL4 v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int v21;
  int v22;
  uint64_t v23;
  _BYTE v24[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v25;
  int v26;
  int v27;
  uint64_t v28;

  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a1, a2))goto LABEL_18;
  sub_20C35C4F8((uint64_t)v24, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  if ((v28 & 7) != 0)
  {
    v6 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
  sub_20BFD265C(&v26);
  if (v25)
    sub_20C35C614(v25);
  if (v5)
  {
    sub_20C35C4F8((uint64_t)&v19, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    sub_20C5CC5EC((uint64_t)&v19, (uint64_t)v24);
    v8 = sub_20C398E78((_DWORD *)a1);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v24, v8, a3);
    if ((v28 & 7) != 0)
    {
      v9 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
    sub_20BFD265C(&v26);
    if (v25)
      sub_20C35C614(v25);
    if ((v23 & 7) != 0)
    {
      v11 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_20BFD265C(&v21);
    if (v20)
      sub_20C35C614(v20);
  }
  else
  {
LABEL_18:
    *(_DWORD *)a3 = *(_DWORD *)a1;
    v13 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a3 + 8) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 48);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    sub_20BFD6E54((_DWORD *)(a3 + 16), (_DWORD *)(a1 + 16));
    sub_20BFD6EA4((_DWORD *)(a3 + 20), (_DWORD *)(a1 + 20));
    v16 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a3 + 24) = v16;
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 2, v17));
      if ((v18 & 1) == 0)
        *(_QWORD *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
    }
  }
}

void sub_20C625090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6250BC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C628038(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20C628BE4, 0);
}

uint64_t sub_20C625120(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    sub_20C35C614(v5);
  sub_20BFD3EBC((int *)(a1 + 16), (int *)(a2 + 16));
  sub_20BFD3F10((int *)(a1 + 20), (int *)(a2 + 20));
  if (a2 == a1)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 24);
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    if ((v9 & 7) != 0)
    {
      v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=(a1 + 48, a2 + 48);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=(a1 + 96, a2 + 96);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  v12 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  v13 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v12;
  if (v13)
    sub_20C35C614(v13);
  sub_20BFD3EBC((int *)(a1 + 160), (int *)(a2 + 160));
  sub_20BFD3F10((int *)(a1 + 164), (int *)(a2 + 164));
  if (a2 != a1)
  {
    v14 = *(_QWORD *)(a1 + 168);
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
  }
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  v17 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  v18 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v17;
  if (v18)
    sub_20C35C614(v18);
  sub_20BFD3EBC((int *)(a1 + 192), (int *)(a2 + 192));
  sub_20BFD3F10((int *)(a1 + 196), (int *)(a2 + 196));
  if (a2 != a1)
  {
    v19 = *(_QWORD *)(a1 + 200);
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a2 + 200) = 0;
  }
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  v22 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  v23 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v22;
  if (v23)
    sub_20C35C614(v23);
  sub_20BFD3EBC((int *)(a1 + 224), (int *)(a2 + 224));
  sub_20BFD3F10((int *)(a1 + 228), (int *)(a2 + 228));
  if (a2 != a1)
  {
    v24 = *(_QWORD *)(a1 + 232);
    if ((v24 & 7) != 0)
    {
      v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a2 + 232) = 0;
  }
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  v27 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 248) = 0;
  v28 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v27;
  if (v28)
    sub_20C35C614(v28);
  sub_20BFD3EBC((int *)(a1 + 256), (int *)(a2 + 256));
  sub_20BFD3F10((int *)(a1 + 260), (int *)(a2 + 260));
  if (a2 != a1)
  {
    v29 = *(_QWORD *)(a1 + 264);
    if ((v29 & 7) != 0)
    {
      v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a2 + 264) = 0;
  }
  sub_20BDE82DC(a1 + 272, (__int128 *)(a2 + 272));
  sub_20BDE82DC(a1 + 288, (__int128 *)(a2 + 288));
  sub_20C625C14(a1 + 304, a2 + 304);
  sub_20C625C14(a1 + 352, a2 + 352);
  return a1;
}

_QWORD *sub_20C6253E8(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2));
  return a1;
}

void sub_20C625414(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v1;

  sub_20C626160(v1 + 1);
  sub_20C62618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C625430(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *(_QWORD *)(a1 + 40) &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 48), (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a2 + 48));
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 96), (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a2 + 96));
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  v13 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 152) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 48);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 160), (_DWORD *)(a2 + 160));
  sub_20BFD6EA4((_DWORD *)(a1 + 164), (_DWORD *)(a2 + 164));
  v16 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v16;
  if ((v16 & 7) != 0)
  {
    v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 2, v17));
    if ((v18 & 1) == 0)
      *(_QWORD *)(a1 + 168) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  v19 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 184) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 48);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 192), (_DWORD *)(a2 + 192));
  sub_20BFD6EA4((_DWORD *)(a1 + 196), (_DWORD *)(a2 + 196));
  v22 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 200) = v22;
  if ((v22 & 7) != 0)
  {
    v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 2, v23));
    if ((v24 & 1) == 0)
      *(_QWORD *)(a1 + 200) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  v25 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 216) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 48);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 224), (_DWORD *)(a2 + 224));
  sub_20BFD6EA4((_DWORD *)(a1 + 228), (_DWORD *)(a2 + 228));
  v28 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 232) = v28;
  if ((v28 & 7) != 0)
  {
    v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 2, v29));
    if ((v30 & 1) == 0)
      *(_QWORD *)(a1 + 232) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  v31 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 248) = v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 48);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 256), (_DWORD *)(a2 + 256));
  sub_20BFD6EA4((_DWORD *)(a1 + 260), (_DWORD *)(a2 + 260));
  v34 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 264) = v34;
  if ((v34 & 7) != 0)
  {
    v35 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 2, v35));
    if ((v36 & 1) == 0)
      *(_QWORD *)(a1 + 264) &= 0xFFFFFFFFFFFFFFF8;
  }
  v37 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v37;
  if (v37)
  {
    v38 = (unint64_t *)(v37 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v40;
  if (v40)
  {
    v41 = (unint64_t *)(v40 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  if (*(_BYTE *)(a2 + 344))
  {
    v43 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v43;
    v44 = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 336) = v44;
    if (v44)
    {
      v45 = (unint64_t *)(v44 - 16);
      if (*(_QWORD *)(a1 + 328))
        v45 = *(unint64_t **)(a1 + 328);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    *(_BYTE *)(a1 + 344) = 1;
  }
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  if (*(_BYTE *)(a2 + 392))
  {
    v47 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v47;
    v48 = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 384) = v48;
    if (v48)
    {
      v49 = (unint64_t *)(v48 - 16);
      if (*(_QWORD *)(a1 + 376))
        v49 = *(unint64_t **)(a1 + 376);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    *(_BYTE *)(a1 + 392) = 1;
  }
  return a1;
}

void sub_20C6257D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  sub_20C58DE20(v2);
  v4 = *(_QWORD *)(v1 + 40);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C62581C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
    sub_20C00918C((_QWORD *)a1);
  return a1;
}

uint64_t sub_20C625850(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 48);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 48), (_DWORD *)(a2 + 48));
  sub_20BFD6EA4((_DWORD *)(a1 + 52), (_DWORD *)(a2 + 52));
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v13;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *(_QWORD *)(a1 + 56) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 48);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 80), (_DWORD *)(a2 + 80));
  sub_20BFD6EA4((_DWORD *)(a1 + 84), (_DWORD *)(a2 + 84));
  v19 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v19;
  if ((v19 & 7) != 0)
  {
    v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 2, v20));
    if ((v21 & 1) == 0)
      *(_QWORD *)(a1 + 88) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v22 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 48);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 112), (_DWORD *)(a2 + 112));
  sub_20BFD6EA4((_DWORD *)(a1 + 116), (_DWORD *)(a2 + 116));
  v25 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v25;
  if ((v25 & 7) != 0)
  {
    v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 2, v26));
    if ((v27 & 1) == 0)
      *(_QWORD *)(a1 + 120) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  v28 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 48);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 144), (_DWORD *)(a2 + 144));
  sub_20BFD6EA4((_DWORD *)(a1 + 148), (_DWORD *)(a2 + 148));
  v31 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 152) = v31;
  if ((v31 & 7) != 0)
  {
    v32 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 2, v32));
    if ((v33 & 1) == 0)
      *(_QWORD *)(a1 + 152) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  v34 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v34;
  if (v34)
  {
    v35 = (unint64_t *)(v34 + 48);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 176), (_DWORD *)(a2 + 176));
  sub_20BFD6EA4((_DWORD *)(a1 + 180), (_DWORD *)(a2 + 180));
  v37 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 184) = v37;
  if ((v37 & 7) != 0)
  {
    v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 2, v38));
    if ((v39 & 1) == 0)
      *(_QWORD *)(a1 + 184) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  v40 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 200) = v40;
  if (v40)
  {
    v41 = (unint64_t *)(v40 + 48);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 208), (_DWORD *)(a2 + 208));
  sub_20BFD6EA4((_DWORD *)(a1 + 212), (_DWORD *)(a2 + 212));
  v43 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 216) = v43;
  if ((v43 & 7) != 0)
  {
    v44 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 2, v44));
    if ((v45 & 1) == 0)
      *(_QWORD *)(a1 + 216) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  v46 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 232) = v46;
  if (v46)
  {
    v47 = (unint64_t *)(v46 + 48);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 240), (_DWORD *)(a2 + 240));
  sub_20BFD6EA4((_DWORD *)(a1 + 244), (_DWORD *)(a2 + 244));
  v49 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 248) = v49;
  if ((v49 & 7) != 0)
  {
    v50 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 2, v50));
    if ((v51 & 1) == 0)
      *(_QWORD *)(a1 + 248) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

double sub_20C625C14(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  double result;
  __int128 v6;

  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 40))
      {
        sub_20C00918C((_QWORD *)a1);
        v4 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v4;
        result = 0.0;
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a2 + 32) = 0;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 40))
  {
    sub_20C625CB0(a1);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  return result;
}

void sub_20C625CB0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
  {
    sub_20C00918C((_QWORD *)a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
}

uint64_t sub_20C625CE0(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v38;

  sub_20C62581C(a1 + 352);
  sub_20C62581C(a1 + 304);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 288));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 272));
  v2 = *(_QWORD *)(a1 + 264);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 260));
  sub_20BFD265C((_DWORD *)(a1 + 256));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 248);
  if (v5)
    sub_20C35C614(v5);
  v6 = *(_QWORD *)(a1 + 232);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 228));
  sub_20BFD265C((_DWORD *)(a1 + 224));
  v9 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 216);
  if (v9)
    sub_20C35C614(v9);
  v10 = *(_QWORD *)(a1 + 200);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 196));
  sub_20BFD265C((_DWORD *)(a1 + 192));
  v13 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 184);
  if (v13)
    sub_20C35C614(v13);
  v14 = *(_QWORD *)(a1 + 168);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 164));
  sub_20BFD265C((_DWORD *)(a1 + 160));
  v17 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 152);
  if (v17)
    sub_20C35C614(v17);
  v18 = *(_QWORD *)(a1 + 128);
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  v21 = *(_QWORD *)(a1 + 120);
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 116));
  sub_20BFD265C((_DWORD *)(a1 + 112));
  v24 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 104);
  if (v24)
    sub_20C35C614(v24);
  v25 = *(_QWORD *)(a1 + 80);
  if ((v25 & 7) != 0)
  {
    v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  v28 = *(_QWORD *)(a1 + 72);
  if ((v28 & 7) != 0)
  {
    v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 68));
  sub_20BFD265C((_DWORD *)(a1 + 64));
  v31 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 56);
  if (v31)
    sub_20C35C614(v31);
  v32 = *(_QWORD *)(a1 + 40);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *(_QWORD *)(a1 + 24);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v38 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v38)
    sub_20C35C614(v38);
  return a1;
}

uint64_t sub_20C625F40(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;

  v2 = *(_QWORD *)(a1 + 248);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 244));
  sub_20BFD265C((_DWORD *)(a1 + 240));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 232);
  if (v5)
    sub_20C35C614(v5);
  v6 = *(_QWORD *)(a1 + 216);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 212));
  sub_20BFD265C((_DWORD *)(a1 + 208));
  v9 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 200);
  if (v9)
    sub_20C35C614(v9);
  v10 = *(_QWORD *)(a1 + 184);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 180));
  sub_20BFD265C((_DWORD *)(a1 + 176));
  v13 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 168);
  if (v13)
    sub_20C35C614(v13);
  v14 = *(_QWORD *)(a1 + 152);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 148));
  sub_20BFD265C((_DWORD *)(a1 + 144));
  v17 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 136);
  if (v17)
    sub_20C35C614(v17);
  v18 = *(_QWORD *)(a1 + 120);
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 116));
  sub_20BFD265C((_DWORD *)(a1 + 112));
  v21 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 104);
  if (v21)
    sub_20C35C614(v21);
  v22 = *(_QWORD *)(a1 + 88);
  if ((v22 & 7) != 0)
  {
    v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 84));
  sub_20BFD265C((_DWORD *)(a1 + 80));
  v25 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 72);
  if (v25)
    sub_20C35C614(v25);
  v26 = *(_QWORD *)(a1 + 56);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 52));
  sub_20BFD265C((_DWORD *)(a1 + 48));
  v29 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 40);
  if (v29)
    sub_20C35C614(v29);
  v30 = *(_QWORD *)(a1 + 24);
  if ((v30 & 7) != 0)
  {
    v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v33 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v33)
    sub_20C35C614(v33);
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C626160(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C62618C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

uint64_t sub_20C6261B8(uint64_t a1, uint64_t a2)
{
  void *v3;

  sub_20C626234(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_20C6261E8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;

  v2 = a1 + 8 * a2;
  v5 = *(_QWORD *)(v2 + 8);
  v4 = (_QWORD *)(v2 + 8);
  result = v5;
  if (a2 < 8)
  {
    if (!a2)
      return result;
    if (a2 == 1)
      result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
  }
  else
  {
    result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *v4 = 0;
  return result;
}

void sub_20C626234(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  sub_20C626160((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
}

uint64_t sub_20C6262A0(uint64_t a1, uint64_t a2)
{
  void *v3;

  sub_20C62631C(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_20C6262D0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;

  v2 = a1 + 8 * a2;
  v5 = *(_QWORD *)(v2 + 8);
  v4 = (_QWORD *)(v2 + 8);
  result = v5;
  if (a2 < 8)
  {
    if (!a2)
      return result;
    if (a2 == 1)
      result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
  }
  else
  {
    result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *v4 = 0;
  return result;
}

void sub_20C62631C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  sub_20C62618C((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
}

uint64_t sub_20C626388(uint64_t a1, uint64_t a2)
{
  void *v3;

  sub_20C626404(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_20C6263B8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;

  v2 = a1 + 8 * a2;
  v5 = *(_QWORD *)(v2 + 8);
  v4 = (_QWORD *)(v2 + 8);
  result = v5;
  if (a2 < 8)
  {
    if (!a2)
      return result;
    if (a2 == 1)
      result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
  }
  else
  {
    result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *v4 = 0;
  return result;
}

void sub_20C626404(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  sub_20BF5618C(a1 + 64);
  sub_20C626160((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 40));
  sub_20C62618C((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
}

uint64_t sub_20C626488(uint64_t a1, uint64_t a2)
{
  void *v3;

  sub_20C626504(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_20C6264B8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;

  v2 = a1 + 8 * a2;
  v5 = *(_QWORD *)(v2 + 8);
  v4 = (_QWORD *)(v2 + 8);
  result = v5;
  if (a2 < 8)
  {
    if (!a2)
      return result;
    if (a2 == 1)
      result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
  }
  else
  {
    result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *v4 = 0;
  return result;
}

void sub_20C626504(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  sub_20C625CE0(a1 + 32);
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
}

uint64_t sub_20C626570(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t), _QWORD *a8)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v33;
  unint64_t v34;
  tbb::spin_rw_mutex_v3 *v36;
  char v37;
  uint64_t v38;

  v36 = 0;
  v37 = 0;
  sub_20C3B0C60((uint64_t)&v36, (unsigned int *)a3, (_QWORD *)(a3 + 8), (unsigned int *)(a3 + 16), (_QWORD *)(a3 + 24));
  v34 = 0;
  v13 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v36);
  v14 = *a1;
  __dmb(0xBu);
  v33 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_20C626A9C((uint64_t)&v36, (uint64_t)a1, v14 & v13, 0);
    v15 = sub_20C6268A8((uint64_t)a1, a3, v38);
    v16 = v15;
    if (!a2)
    {
      if (v15)
      {
        v17 = 1;
        goto LABEL_7;
      }
      v27 = *a1;
      __dmb(0xBu);
      if (v14 == v27 || !sub_20BECF7E4((uint64_t)a1, v13, v14, v27))
      {
        sub_20BEBF29C(&v36);
        return 0;
      }
      goto LABEL_34;
    }
    if (v15)
      goto LABEL_4;
    if (!a8)
      a8 = (_QWORD *)a7(v33, a3, a4);
    if (!v37)
    {
      v37 = 1;
      if ((tbb::spin_rw_mutex_v3::internal_upgrade(v36) & 1) == 0)
      {
        v16 = sub_20C6268A8((uint64_t)a1, a3, v38);
        if (v16 >= 0x40)
          break;
      }
    }
    v27 = *a1;
    __dmb(0xBu);
    if (v14 == v27)
    {
      v27 = v14;
LABEL_38:
      v34 = sub_20BECF26C((uint64_t)a1, v38, a8, v27);
      v18 = 0;
      v17 = 1;
      v16 = (unint64_t)a8;
      if (a5)
        goto LABEL_8;
LABEL_39:
      sub_20BEBF29C(&v36);
      goto LABEL_41;
    }
    if (!sub_20BECF7E4((uint64_t)a1, v13, v14, v27))
      goto LABEL_38;
LABEL_34:
    sub_20BEBF29C(&v36);
    v14 = v27;
  }
  if (v37)
  {
    v28 = (unint64_t *)v36;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 3, v28));
    v17 = 0;
    v37 = 0;
  }
  else
  {
LABEL_4:
    v17 = 0;
  }
LABEL_7:
  v18 = (uint64_t)a8;
  if (!a5)
    goto LABEL_39;
LABEL_8:
  if ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v16 + 8), a6) & 1) == 0)
  {
    sched_yield();
    v19 = 2;
    while ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v16 + 8), a6) & 1) == 0)
    {
      sched_yield();
      v20 = v19 < 16;
      v19 *= 2;
      if (!v20)
      {
        v21 = (unint64_t *)v36;
        v36 = 0;
        if (v37)
        {
          while (1)
          {
            v22 = *v21;
            v23 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v24 = __ldaxr(v21);
                if (v24 != v22)
                  break;
                if (!__stlxr(v23, v21))
                  goto LABEL_22;
              }
              __clrex();
              do
                v25 = __ldxr(v21);
              while (__stxr(v25, v21));
            }
            while (v25 == v22);
            sched_yield();
          }
        }
        do
          v26 = __ldaxr(v21);
        while (__stlxr(v26 - 4, v21));
LABEL_22:
        sched_yield();
        v27 = *a1;
        __dmb(0xBu);
        a8 = (_QWORD *)v18;
        goto LABEL_34;
      }
    }
  }
  sub_20BEBF29C(&v36);
  *(_QWORD *)(a5 + 16) = v16;
  *(_QWORD *)(a5 + 24) = v13;
LABEL_41:
  if (v34)
    sub_20C626908(a1, v34, v33, 0);
  if (v18)
    sub_20C6261B8((uint64_t)a1, v18);
  return v17;
}

void sub_20C626880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6268A0()
{
  return 0;
}

unint64_t sub_20C6268A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;

  result = *(_QWORD *)(a3 + 16);
  if (result >= 0x40)
  {
    do
    {
      if (*(_DWORD *)a2 == *(_DWORD *)(result + 16)
        && *(_QWORD *)(a2 + 8) == *(_QWORD *)(result + 24)
        && *(_QWORD *)(a2 + 16) == *(_QWORD *)(result + 32)
        && (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(result + 40) & 0xFFFFFFFFFFFFFFF8))
      {
        break;
      }
      result = *(_QWORD *)result;
    }
    while (result > 0x3F);
  }
  return result;
}

void sub_20C626908(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int64x2_t v17;
  char *v18;
  uint64x2_t v19;
  uint64x2_t v20;
  int8x16_t v21;
  int64x2_t v22;
  uint64x2_t v23;
  int8x16_t v24;

  if (a2 < 8)
  {
    v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    v10 = v9;
    if ((a4 & 1) != 0)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      v14 = -6096;
      do
      {
        v15 = &v9[v14];
        *((_QWORD *)v15 + 763) = 0;
        *((_QWORD *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    v16 = 0;
    v17 = (int64x2_t)xmmword_20CA59F60;
    v18 = v10 - 48;
    v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    v22 = vdupq_n_s64(2uLL);
    v13 = 255;
    do
    {
      v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_20CA59F70);
      v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if ((vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0] & 1) != 0)
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1] & 1) != 0)
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      v16 += 2;
      v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    v7 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    v8 = v7;
    if ((a4 & 1) != 0)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      v11 = 1 << a2;
      v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_20C626A8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_20C626A9C(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  tbb::spin_rw_mutex_v3 *v10;
  uint64_t v11;
  tbb::spin_rw_mutex_v3 *v12;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v8 = sub_20BECF614(a2, a3);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (v10 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8),
        *(_BYTE *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(_QWORD *)a1 = v10;
    v11 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v11 + 16) == 3)
      sub_20C626B74(a2, v11, a3);
  }
  else
  {
    v12 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(a1 + 8) = a4;
    *(_QWORD *)a1 = v12;
    if (a4)
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    else
      tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)v12);
  }
  return a1;
}

void sub_20C626B60(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEBF29C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C626B74(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  char v6;
  BOOL v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  tbb::spin_rw_mutex_v3 *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  __dmb(0xBu);
  *(_QWORD *)(a2 + 16) = 0;
  if (a3)
  {
    v5 = HIDWORD(a3);
    if (!HIDWORD(a3))
      v5 = a3;
    v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    v7 = v5 >= 4;
    if (v5 >= 4)
      LODWORD(v5) = v5 >> 2;
    v8 = (v5 >> 1) & 1;
    if (v7)
      v6 += 2;
    v9 = v8 + v6;
  }
  else
  {
    v9 = -1;
  }
  v10 = ~(-1 << v9);
  sub_20C626A9C(&v15, a1, v10 & a3, 0);
  v11 = (unint64_t *)(v17 + 16);
  v12 = *(_QWORD *)(v17 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    v13 = (2 * v10) | 1;
    while (1)
    {
      v18 = 0;
      v19 = 0;
      sub_20C3B0C60((uint64_t)&v18, (unsigned int *)(v12 + 16), (_QWORD *)(v12 + 24), (unsigned int *)(v12 + 32), (_QWORD *)(v12 + 40));
      if ((bswap64(0x9E3779B97F4A7C55 * v18) & v13) != a3)
        break;
      if (v16 || (v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v15) & 1) != 0))
      {
        *v11 = *(_QWORD *)v12;
        *(_QWORD *)v12 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v12;
LABEL_24:
        v12 = *v11;
        if (*v11 <= 0x3F)
          return sub_20BEBF29C(&v15);
      }
      else
      {
        v11 = (unint64_t *)(v17 + 16);
        v12 = *(_QWORD *)(v17 + 16);
        __dmb(0xBu);
        if (v12 < 0x40)
          return sub_20BEBF29C(&v15);
      }
    }
    v11 = (unint64_t *)v12;
    goto LABEL_24;
  }
  return sub_20BEBF29C(&v15);
}

void sub_20C626D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C626D30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_20C626D60(a1, (uint64_t)&unk_20CAC184C, &v3);
}

uint64_t sub_20C626D60(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v8[2];

  v5 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x38);
  v8[0] = v5;
  v8[1] = a1;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_QWORD *)(v5 + 48) = 0;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  sub_20C626DE0(v5 + 16, *a3);
  v8[0] = 0;
  sub_20C626E7C(v8, v6);
  return v5;
}

void sub_20C626DCC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C626E7C(&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C626DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t *sub_20C626E7C(uint64_t *a1, void *a2)
{
  uint64_t v3;

  v3 = *a1;
  if (v3)
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  return a1;
}

uint64_t sub_20C626EAC(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t), _QWORD *a8)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v33;
  unint64_t v34;
  tbb::spin_rw_mutex_v3 *v36;
  char v37;
  uint64_t v38;

  v36 = 0;
  v37 = 0;
  sub_20C3B0C60((uint64_t)&v36, (unsigned int *)a3, (_QWORD *)(a3 + 8), (unsigned int *)(a3 + 16), (_QWORD *)(a3 + 24));
  v34 = 0;
  v13 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v36);
  v14 = *a1;
  __dmb(0xBu);
  v33 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_20C627378((uint64_t)&v36, (uint64_t)a1, v14 & v13, 0);
    v15 = sub_20C6268A8((uint64_t)a1, a3, v38);
    v16 = v15;
    if (!a2)
    {
      if (v15)
      {
        v17 = 1;
        goto LABEL_7;
      }
      v27 = *a1;
      __dmb(0xBu);
      if (v14 == v27 || !sub_20BECF7E4((uint64_t)a1, v13, v14, v27))
      {
        sub_20BEBF29C(&v36);
        return 0;
      }
      goto LABEL_34;
    }
    if (v15)
      goto LABEL_4;
    if (!a8)
      a8 = (_QWORD *)a7(v33, a3, a4);
    if (!v37)
    {
      v37 = 1;
      if ((tbb::spin_rw_mutex_v3::internal_upgrade(v36) & 1) == 0)
      {
        v16 = sub_20C6268A8((uint64_t)a1, a3, v38);
        if (v16 >= 0x40)
          break;
      }
    }
    v27 = *a1;
    __dmb(0xBu);
    if (v14 == v27)
    {
      v27 = v14;
LABEL_38:
      v34 = sub_20BECF26C((uint64_t)a1, v38, a8, v27);
      v18 = 0;
      v17 = 1;
      v16 = (unint64_t)a8;
      if (a5)
        goto LABEL_8;
LABEL_39:
      sub_20BEBF29C(&v36);
      goto LABEL_41;
    }
    if (!sub_20BECF7E4((uint64_t)a1, v13, v14, v27))
      goto LABEL_38;
LABEL_34:
    sub_20BEBF29C(&v36);
    v14 = v27;
  }
  if (v37)
  {
    v28 = (unint64_t *)v36;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 3, v28));
    v17 = 0;
    v37 = 0;
  }
  else
  {
LABEL_4:
    v17 = 0;
  }
LABEL_7:
  v18 = (uint64_t)a8;
  if (!a5)
    goto LABEL_39;
LABEL_8:
  if ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v16 + 8), a6) & 1) == 0)
  {
    sched_yield();
    v19 = 2;
    while ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v16 + 8), a6) & 1) == 0)
    {
      sched_yield();
      v20 = v19 < 16;
      v19 *= 2;
      if (!v20)
      {
        v21 = (unint64_t *)v36;
        v36 = 0;
        if (v37)
        {
          while (1)
          {
            v22 = *v21;
            v23 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v24 = __ldaxr(v21);
                if (v24 != v22)
                  break;
                if (!__stlxr(v23, v21))
                  goto LABEL_22;
              }
              __clrex();
              do
                v25 = __ldxr(v21);
              while (__stxr(v25, v21));
            }
            while (v25 == v22);
            sched_yield();
          }
        }
        do
          v26 = __ldaxr(v21);
        while (__stlxr(v26 - 4, v21));
LABEL_22:
        sched_yield();
        v27 = *a1;
        __dmb(0xBu);
        a8 = (_QWORD *)v18;
        goto LABEL_34;
      }
    }
  }
  sub_20BEBF29C(&v36);
  *(_QWORD *)(a5 + 16) = v16;
  *(_QWORD *)(a5 + 24) = v13;
LABEL_41:
  if (v34)
    sub_20C6271E4(a1, v34, v33, 0);
  if (v18)
    sub_20C6262A0((uint64_t)a1, v18);
  return v17;
}

void sub_20C6271BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6271DC()
{
  return 0;
}

void sub_20C6271E4(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int64x2_t v17;
  char *v18;
  uint64x2_t v19;
  uint64x2_t v20;
  int8x16_t v21;
  int64x2_t v22;
  uint64x2_t v23;
  int8x16_t v24;

  if (a2 < 8)
  {
    v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    v10 = v9;
    if ((a4 & 1) != 0)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      v14 = -6096;
      do
      {
        v15 = &v9[v14];
        *((_QWORD *)v15 + 763) = 0;
        *((_QWORD *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    v16 = 0;
    v17 = (int64x2_t)xmmword_20CA59F60;
    v18 = v10 - 48;
    v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    v22 = vdupq_n_s64(2uLL);
    v13 = 255;
    do
    {
      v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_20CA59F70);
      v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if ((vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0] & 1) != 0)
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1] & 1) != 0)
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      v16 += 2;
      v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    v7 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    v8 = v7;
    if ((a4 & 1) != 0)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      v11 = 1 << a2;
      v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_20C627368(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_20C627378(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  tbb::spin_rw_mutex_v3 *v10;
  uint64_t v11;
  tbb::spin_rw_mutex_v3 *v12;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v8 = sub_20BECF614(a2, a3);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (v10 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8),
        *(_BYTE *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(_QWORD *)a1 = v10;
    v11 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v11 + 16) == 3)
      sub_20C627450(a2, v11, a3);
  }
  else
  {
    v12 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(a1 + 8) = a4;
    *(_QWORD *)a1 = v12;
    if (a4)
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    else
      tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)v12);
  }
  return a1;
}

void sub_20C62743C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEBF29C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C627450(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  char v6;
  BOOL v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  tbb::spin_rw_mutex_v3 *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  __dmb(0xBu);
  *(_QWORD *)(a2 + 16) = 0;
  if (a3)
  {
    v5 = HIDWORD(a3);
    if (!HIDWORD(a3))
      v5 = a3;
    v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    v7 = v5 >= 4;
    if (v5 >= 4)
      LODWORD(v5) = v5 >> 2;
    v8 = (v5 >> 1) & 1;
    if (v7)
      v6 += 2;
    v9 = v8 + v6;
  }
  else
  {
    v9 = -1;
  }
  v10 = ~(-1 << v9);
  sub_20C627378(&v15, a1, v10 & a3, 0);
  v11 = (unint64_t *)(v17 + 16);
  v12 = *(_QWORD *)(v17 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    v13 = (2 * v10) | 1;
    while (1)
    {
      v18 = 0;
      v19 = 0;
      sub_20C3B0C60((uint64_t)&v18, (unsigned int *)(v12 + 16), (_QWORD *)(v12 + 24), (unsigned int *)(v12 + 32), (_QWORD *)(v12 + 40));
      if ((bswap64(0x9E3779B97F4A7C55 * v18) & v13) != a3)
        break;
      if (v16 || (v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v15) & 1) != 0))
      {
        *v11 = *(_QWORD *)v12;
        *(_QWORD *)v12 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v12;
LABEL_24:
        v12 = *v11;
        if (*v11 <= 0x3F)
          return sub_20BEBF29C(&v15);
      }
      else
      {
        v11 = (unint64_t *)(v17 + 16);
        v12 = *(_QWORD *)(v17 + 16);
        __dmb(0xBu);
        if (v12 < 0x40)
          return sub_20BEBF29C(&v15);
      }
    }
    v11 = (unint64_t *)v12;
    goto LABEL_24;
  }
  return sub_20BEBF29C(&v15);
}

void sub_20C6275F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C62760C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_20C62763C(a1, (uint64_t)&unk_20CAC184C, &v3);
}

uint64_t sub_20C62763C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v8[2];

  v5 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x38);
  v8[0] = v5;
  v8[1] = a1;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_QWORD *)(v5 + 48) = 0;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  sub_20C626DE0(v5 + 16, *a3);
  v8[0] = 0;
  sub_20C6276BC(v8, v6);
  return v5;
}

void sub_20C6276A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C6276BC(&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6276BC(uint64_t *a1, void *a2)
{
  uint64_t v3;

  v3 = *a1;
  if (v3)
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  return a1;
}

uint64_t sub_20C6276EC(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t), _QWORD *a8)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v33;
  unint64_t v34;
  tbb::spin_rw_mutex_v3 *v36;
  char v37;
  uint64_t v38;

  v36 = 0;
  v37 = 0;
  sub_20C3B0C60((uint64_t)&v36, (unsigned int *)a3, (_QWORD *)(a3 + 8), (unsigned int *)(a3 + 16), (_QWORD *)(a3 + 24));
  v34 = 0;
  v13 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v36);
  v14 = *a1;
  __dmb(0xBu);
  v33 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_20C627BB8((uint64_t)&v36, (uint64_t)a1, v14 & v13, 0);
    v15 = sub_20C6268A8((uint64_t)a1, a3, v38);
    v16 = v15;
    if (!a2)
    {
      if (v15)
      {
        v17 = 1;
        goto LABEL_7;
      }
      v27 = *a1;
      __dmb(0xBu);
      if (v14 == v27 || !sub_20BECF7E4((uint64_t)a1, v13, v14, v27))
      {
        sub_20BEBF29C(&v36);
        return 0;
      }
      goto LABEL_34;
    }
    if (v15)
      goto LABEL_4;
    if (!a8)
      a8 = (_QWORD *)a7(v33, a3, a4);
    if (!v37)
    {
      v37 = 1;
      if ((tbb::spin_rw_mutex_v3::internal_upgrade(v36) & 1) == 0)
      {
        v16 = sub_20C6268A8((uint64_t)a1, a3, v38);
        if (v16 >= 0x40)
          break;
      }
    }
    v27 = *a1;
    __dmb(0xBu);
    if (v14 == v27)
    {
      v27 = v14;
LABEL_38:
      v34 = sub_20BECF26C((uint64_t)a1, v38, a8, v27);
      v18 = 0;
      v17 = 1;
      v16 = (unint64_t)a8;
      if (a5)
        goto LABEL_8;
LABEL_39:
      sub_20BEBF29C(&v36);
      goto LABEL_41;
    }
    if (!sub_20BECF7E4((uint64_t)a1, v13, v14, v27))
      goto LABEL_38;
LABEL_34:
    sub_20BEBF29C(&v36);
    v14 = v27;
  }
  if (v37)
  {
    v28 = (unint64_t *)v36;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 3, v28));
    v17 = 0;
    v37 = 0;
  }
  else
  {
LABEL_4:
    v17 = 0;
  }
LABEL_7:
  v18 = (uint64_t)a8;
  if (!a5)
    goto LABEL_39;
LABEL_8:
  if ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v16 + 8), a6) & 1) == 0)
  {
    sched_yield();
    v19 = 2;
    while ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v16 + 8), a6) & 1) == 0)
    {
      sched_yield();
      v20 = v19 < 16;
      v19 *= 2;
      if (!v20)
      {
        v21 = (unint64_t *)v36;
        v36 = 0;
        if (v37)
        {
          while (1)
          {
            v22 = *v21;
            v23 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v24 = __ldaxr(v21);
                if (v24 != v22)
                  break;
                if (!__stlxr(v23, v21))
                  goto LABEL_22;
              }
              __clrex();
              do
                v25 = __ldxr(v21);
              while (__stxr(v25, v21));
            }
            while (v25 == v22);
            sched_yield();
          }
        }
        do
          v26 = __ldaxr(v21);
        while (__stlxr(v26 - 4, v21));
LABEL_22:
        sched_yield();
        v27 = *a1;
        __dmb(0xBu);
        a8 = (_QWORD *)v18;
        goto LABEL_34;
      }
    }
  }
  sub_20BEBF29C(&v36);
  *(_QWORD *)(a5 + 16) = v16;
  *(_QWORD *)(a5 + 24) = v13;
LABEL_41:
  if (v34)
    sub_20C627A24(a1, v34, v33, 0);
  if (v18)
    sub_20C626388((uint64_t)a1, v18);
  return v17;
}

void sub_20C6279FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C627A1C()
{
  return 0;
}

void sub_20C627A24(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int64x2_t v17;
  char *v18;
  uint64x2_t v19;
  uint64x2_t v20;
  int8x16_t v21;
  int64x2_t v22;
  uint64x2_t v23;
  int8x16_t v24;

  if (a2 < 8)
  {
    v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    v10 = v9;
    if ((a4 & 1) != 0)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      v14 = -6096;
      do
      {
        v15 = &v9[v14];
        *((_QWORD *)v15 + 763) = 0;
        *((_QWORD *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    v16 = 0;
    v17 = (int64x2_t)xmmword_20CA59F60;
    v18 = v10 - 48;
    v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    v22 = vdupq_n_s64(2uLL);
    v13 = 255;
    do
    {
      v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_20CA59F70);
      v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if ((vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0] & 1) != 0)
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1] & 1) != 0)
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      v16 += 2;
      v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    v7 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    v8 = v7;
    if ((a4 & 1) != 0)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      v11 = 1 << a2;
      v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_20C627BA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_20C627BB8(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  tbb::spin_rw_mutex_v3 *v10;
  uint64_t v11;
  tbb::spin_rw_mutex_v3 *v12;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v8 = sub_20BECF614(a2, a3);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (v10 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8),
        *(_BYTE *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(_QWORD *)a1 = v10;
    v11 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v11 + 16) == 3)
      sub_20C627C90(a2, v11, a3);
  }
  else
  {
    v12 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(a1 + 8) = a4;
    *(_QWORD *)a1 = v12;
    if (a4)
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    else
      tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)v12);
  }
  return a1;
}

void sub_20C627C7C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEBF29C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C627C90(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  char v6;
  BOOL v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  tbb::spin_rw_mutex_v3 *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  __dmb(0xBu);
  *(_QWORD *)(a2 + 16) = 0;
  if (a3)
  {
    v5 = HIDWORD(a3);
    if (!HIDWORD(a3))
      v5 = a3;
    v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    v7 = v5 >= 4;
    if (v5 >= 4)
      LODWORD(v5) = v5 >> 2;
    v8 = (v5 >> 1) & 1;
    if (v7)
      v6 += 2;
    v9 = v8 + v6;
  }
  else
  {
    v9 = -1;
  }
  v10 = ~(-1 << v9);
  sub_20C627BB8(&v15, a1, v10 & a3, 0);
  v11 = (unint64_t *)(v17 + 16);
  v12 = *(_QWORD *)(v17 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    v13 = (2 * v10) | 1;
    while (1)
    {
      v18 = 0;
      v19 = 0;
      sub_20C3B0C60((uint64_t)&v18, (unsigned int *)(v12 + 16), (_QWORD *)(v12 + 24), (unsigned int *)(v12 + 32), (_QWORD *)(v12 + 40));
      if ((bswap64(0x9E3779B97F4A7C55 * v18) & v13) != a3)
        break;
      if (v16 || (v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v15) & 1) != 0))
      {
        *v11 = *(_QWORD *)v12;
        *(_QWORD *)v12 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v12;
LABEL_24:
        v12 = *v11;
        if (*v11 <= 0x3F)
          return sub_20BEBF29C(&v15);
      }
      else
      {
        v11 = (unint64_t *)(v17 + 16);
        v12 = *(_QWORD *)(v17 + 16);
        __dmb(0xBu);
        if (v12 < 0x40)
          return sub_20BEBF29C(&v15);
      }
    }
    v11 = (unint64_t *)v12;
    goto LABEL_24;
  }
  return sub_20BEBF29C(&v15);
}

void sub_20C627E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_20C627E4C(uint64_t a1, _DWORD *a2)
{
  _DWORD *v3;

  v3 = a2;
  return sub_20C627E7C(a1, (uint64_t)&unk_20CAC184C, &v3);
}

_OWORD *sub_20C627E7C(uint64_t a1, uint64_t a2, _DWORD **a3)
{
  _OWORD *v5;
  void *v6;
  uint64_t v8[2];
  _DWORD *v9;

  v5 = (_OWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x80);
  v8[0] = (uint64_t)v5;
  v8[1] = a1;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  *v5 = 0u;
  v5[1] = 0u;
  v9 = *a3;
  sub_20C627F0C((uint64_t)(v5 + 1), &v9);
  v8[0] = 0;
  sub_20C628008(v8, v6);
  return v5;
}

void sub_20C627EF8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C628008(&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C627F0C(uint64_t a1, _DWORD **a2)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v3 = *a2;
  *(_DWORD *)a1 = **a2;
  v4 = *((_QWORD *)v3 + 1);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), v3 + 4);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), v3 + 5);
  v7 = *((_QWORD *)v3 + 3);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20C6253E8((_QWORD *)(a1 + 32));
  return a1;
}

void sub_20C627FBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;

  v5 = *(_QWORD *)(v1 + 24);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_20BFD265C(v2);
  v8 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v1 + 8);
  if (v8)
    sub_20C35C614(v8);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C628008(uint64_t *a1, void *a2)
{
  uint64_t v3;

  v3 = *a1;
  if (v3)
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  return a1;
}

uint64_t sub_20C628038(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t), _QWORD *a8)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v33;
  unint64_t v34;
  tbb::spin_rw_mutex_v3 *v36;
  char v37;
  uint64_t v38;

  v36 = 0;
  v37 = 0;
  sub_20C3B0C60((uint64_t)&v36, (unsigned int *)a3, (_QWORD *)(a3 + 8), (unsigned int *)(a3 + 16), (_QWORD *)(a3 + 24));
  v34 = 0;
  v13 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v36);
  v14 = *a1;
  __dmb(0xBu);
  v33 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_20C628504((uint64_t)&v36, (uint64_t)a1, v14 & v13, 0);
    v15 = sub_20C6268A8((uint64_t)a1, a3, v38);
    v16 = v15;
    if (!a2)
    {
      if (v15)
      {
        v17 = 1;
        goto LABEL_7;
      }
      v27 = *a1;
      __dmb(0xBu);
      if (v14 == v27 || !sub_20BECF7E4((uint64_t)a1, v13, v14, v27))
      {
        sub_20BEBF29C(&v36);
        return 0;
      }
      goto LABEL_34;
    }
    if (v15)
      goto LABEL_4;
    if (!a8)
      a8 = (_QWORD *)a7(v33, a3, a4);
    if (!v37)
    {
      v37 = 1;
      if ((tbb::spin_rw_mutex_v3::internal_upgrade(v36) & 1) == 0)
      {
        v16 = sub_20C6268A8((uint64_t)a1, a3, v38);
        if (v16 >= 0x40)
          break;
      }
    }
    v27 = *a1;
    __dmb(0xBu);
    if (v14 == v27)
    {
      v27 = v14;
LABEL_38:
      v34 = sub_20BECF26C((uint64_t)a1, v38, a8, v27);
      v18 = 0;
      v17 = 1;
      v16 = (unint64_t)a8;
      if (a5)
        goto LABEL_8;
LABEL_39:
      sub_20BEBF29C(&v36);
      goto LABEL_41;
    }
    if (!sub_20BECF7E4((uint64_t)a1, v13, v14, v27))
      goto LABEL_38;
LABEL_34:
    sub_20BEBF29C(&v36);
    v14 = v27;
  }
  if (v37)
  {
    v28 = (unint64_t *)v36;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 3, v28));
    v17 = 0;
    v37 = 0;
  }
  else
  {
LABEL_4:
    v17 = 0;
  }
LABEL_7:
  v18 = (uint64_t)a8;
  if (!a5)
    goto LABEL_39;
LABEL_8:
  if ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v16 + 8), a6) & 1) == 0)
  {
    sched_yield();
    v19 = 2;
    while ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v16 + 8), a6) & 1) == 0)
    {
      sched_yield();
      v20 = v19 < 16;
      v19 *= 2;
      if (!v20)
      {
        v21 = (unint64_t *)v36;
        v36 = 0;
        if (v37)
        {
          while (1)
          {
            v22 = *v21;
            v23 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v24 = __ldaxr(v21);
                if (v24 != v22)
                  break;
                if (!__stlxr(v23, v21))
                  goto LABEL_22;
              }
              __clrex();
              do
                v25 = __ldxr(v21);
              while (__stxr(v25, v21));
            }
            while (v25 == v22);
            sched_yield();
          }
        }
        do
          v26 = __ldaxr(v21);
        while (__stlxr(v26 - 4, v21));
LABEL_22:
        sched_yield();
        v27 = *a1;
        __dmb(0xBu);
        a8 = (_QWORD *)v18;
        goto LABEL_34;
      }
    }
  }
  sub_20BEBF29C(&v36);
  *(_QWORD *)(a5 + 16) = v16;
  *(_QWORD *)(a5 + 24) = v13;
LABEL_41:
  if (v34)
    sub_20C628370(a1, v34, v33, 0);
  if (v18)
    sub_20C626488((uint64_t)a1, v18);
  return v17;
}

void sub_20C628348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C628368()
{
  return 0;
}

void sub_20C628370(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int64x2_t v17;
  char *v18;
  uint64x2_t v19;
  uint64x2_t v20;
  int8x16_t v21;
  int64x2_t v22;
  uint64x2_t v23;
  int8x16_t v24;

  if (a2 < 8)
  {
    v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    v10 = v9;
    if ((a4 & 1) != 0)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      v14 = -6096;
      do
      {
        v15 = &v9[v14];
        *((_QWORD *)v15 + 763) = 0;
        *((_QWORD *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    v16 = 0;
    v17 = (int64x2_t)xmmword_20CA59F60;
    v18 = v10 - 48;
    v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    v22 = vdupq_n_s64(2uLL);
    v13 = 255;
    do
    {
      v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_20CA59F70);
      v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if ((vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0] & 1) != 0)
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1] & 1) != 0)
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      v16 += 2;
      v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    v7 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    v8 = v7;
    if ((a4 & 1) != 0)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      v11 = 1 << a2;
      v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_20C6284F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_20C628504(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  tbb::spin_rw_mutex_v3 *v10;
  uint64_t v11;
  tbb::spin_rw_mutex_v3 *v12;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v8 = sub_20BECF614(a2, a3);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (v10 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8),
        *(_BYTE *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(_QWORD *)a1 = v10;
    v11 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v11 + 16) == 3)
      sub_20C6285DC(a2, v11, a3);
  }
  else
  {
    v12 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(a1 + 8) = a4;
    *(_QWORD *)a1 = v12;
    if (a4)
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    else
      tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)v12);
  }
  return a1;
}

void sub_20C6285C8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEBF29C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6285DC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  char v6;
  BOOL v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  tbb::spin_rw_mutex_v3 *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  __dmb(0xBu);
  *(_QWORD *)(a2 + 16) = 0;
  if (a3)
  {
    v5 = HIDWORD(a3);
    if (!HIDWORD(a3))
      v5 = a3;
    v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    v7 = v5 >= 4;
    if (v5 >= 4)
      LODWORD(v5) = v5 >> 2;
    v8 = (v5 >> 1) & 1;
    if (v7)
      v6 += 2;
    v9 = v8 + v6;
  }
  else
  {
    v9 = -1;
  }
  v10 = ~(-1 << v9);
  sub_20C628504(&v15, a1, v10 & a3, 0);
  v11 = (unint64_t *)(v17 + 16);
  v12 = *(_QWORD *)(v17 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    v13 = (2 * v10) | 1;
    while (1)
    {
      v18 = 0;
      v19 = 0;
      sub_20C3B0C60((uint64_t)&v18, (unsigned int *)(v12 + 16), (_QWORD *)(v12 + 24), (unsigned int *)(v12 + 32), (_QWORD *)(v12 + 40));
      if ((bswap64(0x9E3779B97F4A7C55 * v18) & v13) != a3)
        break;
      if (v16 || (v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v15) & 1) != 0))
      {
        *v11 = *(_QWORD *)v12;
        *(_QWORD *)v12 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v12;
LABEL_24:
        v12 = *v11;
        if (*v11 <= 0x3F)
          return sub_20BEBF29C(&v15);
      }
      else
      {
        v11 = (unint64_t *)(v17 + 16);
        v12 = *(_QWORD *)(v17 + 16);
        __dmb(0xBu);
        if (v12 < 0x40)
          return sub_20BEBF29C(&v15);
      }
    }
    v11 = (unint64_t *)v12;
    goto LABEL_24;
  }
  return sub_20BEBF29C(&v15);
}

void sub_20C628784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C628798()
{
  unsigned __int8 v0;
  _QWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25473D140);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473D140))
  {
    v2 = operator new(8uLL);
    *v2 = 0;
    qword_25473D138 = (uint64_t)v2;
    __cxa_guard_release(&qword_25473D140);
  }
  return qword_25473D138;
}

void sub_20C6287F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473D140);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C628810(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20C6288A8(a1, a2);
    v4 = a1[1];
    v5 = 9 * a2;
    v6 = v4 + 288 * a2;
    v7 = 32 * v5;
    do
    {
      sub_20C628944(v4);
      v4 += 288;
      v7 -= 288;
    }
    while (v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_20C628888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C628B00(&a9);
  _Unwind_Resume(a1);
}

char *sub_20C6288A8(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xE38E38E38E38E4)
    sub_20BDDF694();
  result = (char *)sub_20C6288FC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[288 * v4];
  return result;
}

void *sub_20C6288FC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E4)
    sub_20BDDF5B4();
  return operator new(288 * a2);
}

uint64_t sub_20C628944(uint64_t a1)
{
  uint64_t v2;

  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v2 = sub_20C6289B4(a1);
  *(_DWORD *)(v2 + 256) = 1;
  *(_QWORD *)(v2 + 264) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v2 + 272));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 276));
  *(_QWORD *)(a1 + 280) = 0;
  return a1;
}

uint64_t sub_20C6289B4(uint64_t a1)
{
  *(_DWORD *)a1 = 3;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 3;
  *(_QWORD *)(a1 + 40) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 48));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 52));
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 3;
  *(_QWORD *)(a1 + 72) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 80));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 84));
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 3;
  *(_QWORD *)(a1 + 104) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 112));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 116));
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 3;
  *(_QWORD *)(a1 + 136) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 144));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 148));
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 3;
  *(_QWORD *)(a1 + 168) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 176));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 180));
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 4;
  *(_QWORD *)(a1 + 200) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 208));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 212));
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 1;
  *(_QWORD *)(a1 + 232) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 240));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 244));
  *(_QWORD *)(a1 + 248) = 0;
  return a1;
}

void sub_20C628B00(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 288;
        sub_20C628B84((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C628B84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;

  v3 = *(_QWORD *)(a2 + 280);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 276));
  sub_20BFD265C((_DWORD *)(a2 + 272));
  v6 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a2 + 264);
  if (v6)
    sub_20C35C614(v6);
  return sub_20C625F40(a2);
}

_OWORD *sub_20C628BE4(uint64_t a1, _DWORD *a2)
{
  _DWORD *v3;

  v3 = a2;
  return sub_20C628C14(a1, (uint64_t)&unk_20CAC184C, &v3);
}

_OWORD *sub_20C628C14(uint64_t a1, uint64_t a2, _DWORD **a3)
{
  _OWORD *v5;
  void *v6;
  uint64_t v8[2];
  _DWORD *v9;

  v5 = (_OWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x1C0);
  v8[0] = (uint64_t)v5;
  v8[1] = a1;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  v5[17] = 0u;
  v5[18] = 0u;
  v5[19] = 0u;
  v5[20] = 0u;
  v5[21] = 0u;
  v5[22] = 0u;
  v5[23] = 0u;
  v5[24] = 0u;
  v5[25] = 0u;
  v5[26] = 0u;
  v5[27] = 0u;
  *v5 = 0u;
  v5[1] = 0u;
  v9 = *a3;
  sub_20C628CCC((uint64_t)(v5 + 1), &v9);
  v8[0] = 0;
  sub_20C628DC8(v8, v6);
  return v5;
}

void sub_20C628CB8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C628DC8(&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C628CCC(uint64_t a1, _DWORD **a2)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v3 = *a2;
  *(_DWORD *)a1 = **a2;
  v4 = *((_QWORD *)v3 + 1);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), v3 + 4);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), v3 + 5);
  v7 = *((_QWORD *)v3 + 3);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)(a1 + 32));
  return a1;
}

void sub_20C628D7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;

  v5 = *(_QWORD *)(v1 + 24);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_20BFD265C(v2);
  v8 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v1 + 8);
  if (v8)
    sub_20C35C614(v8);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C628DC8(uint64_t *a1, void *a2)
{
  uint64_t v3;

  v3 = *a1;
  if (v3)
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  return a1;
}

uint64_t sub_20C628DF8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 5);
  v6 = v5 + 1;
  if (v5 + 1 > 0xE38E38E38E38E3)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0x8E38E38E38E38E39 * ((a1[2] - v4) >> 5);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x71C71C71C71C71)
    v11 = 0xE38E38E38E38E3;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20C6288FC(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[288 * v5];
  v18 = &v12[288 * v11];
  sub_20C628F1C((uint64_t)v16, a2, a3);
  v17 = v16 + 288;
  sub_20C628F7C(a1, &v15);
  v13 = a1[1];
  sub_20C62935C(&v15);
  return v13;
}

void sub_20C628F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C62935C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C628F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_20C625850(a1, a2);
  *(_DWORD *)(v5 + 256) = *(_DWORD *)a3;
  *(_QWORD *)(v5 + 264) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  sub_20BFD38A4((_DWORD *)(v5 + 272), (_DWORD *)(a3 + 16));
  sub_20BFD38DC((_DWORD *)(a1 + 276), (_DWORD *)(a3 + 20));
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  return a1;
}

uint64_t sub_20C628F7C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C628FF0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C628FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 288;
      sub_20C629094(v7 - 288, v9);
      v7 = *((_QWORD *)&v15 + 1) - 288;
      *((_QWORD *)&v15 + 1) -= 288;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C6292D8((uint64_t)v12);
  return v10;
}

uint64_t sub_20C629094(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_20C6290F4(a1, a2);
  *(_DWORD *)(v4 + 256) = *(_DWORD *)(a2 + 256);
  *(_QWORD *)(v4 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 264) = 0;
  sub_20BFD38A4((_DWORD *)(v4 + 272), (_DWORD *)(a2 + 272));
  sub_20BFD38DC((_DWORD *)(a1 + 276), (_DWORD *)(a2 + 276));
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a2 + 280) = 0;
  return a1;
}

uint64_t sub_20C6290F4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD38DC((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 48), (_DWORD *)(a2 + 48));
  sub_20BFD38DC((_DWORD *)(a1 + 52), (_DWORD *)(a2 + 52));
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 80), (_DWORD *)(a2 + 80));
  sub_20BFD38DC((_DWORD *)(a1 + 84), (_DWORD *)(a2 + 84));
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 112), (_DWORD *)(a2 + 112));
  sub_20BFD38DC((_DWORD *)(a1 + 116), (_DWORD *)(a2 + 116));
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 144), (_DWORD *)(a2 + 144));
  sub_20BFD38DC((_DWORD *)(a1 + 148), (_DWORD *)(a2 + 148));
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 176), (_DWORD *)(a2 + 176));
  sub_20BFD38DC((_DWORD *)(a1 + 180), (_DWORD *)(a2 + 180));
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 208), (_DWORD *)(a2 + 208));
  sub_20BFD38DC((_DWORD *)(a1 + 212), (_DWORD *)(a2 + 212));
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 240), (_DWORD *)(a2 + 240));
  sub_20BFD38DC((_DWORD *)(a1 + 244), (_DWORD *)(a2 + 244));
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 248) = 0;
  return a1;
}

uint64_t sub_20C6292D8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C62930C((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C62930C(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C628B84(v3, v1);
      v1 += 288;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C62935C(void **a1)
{
  sub_20C62938C((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_20C62938C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 288;
      result = sub_20C628B84(v4, v1 - 288);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::New@<X0>(uint64_t this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v5;
  pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *v6;
  pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *v7;

  v4 = *(_QWORD *)(this + 8);
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 57) & 8) == 0)
    {
      v5 = (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)this;
      this = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *))(*(_QWORD *)this + 32))(this, a2);
      if ((_DWORD)this)
      {
        v6 = (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *)operator new(0x208uLL);
        pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::UsdSkel_SkelDefinition(v6);
        *a3 = (uint64_t)v6;
        v7 = (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *)sub_20C629474(a3);
        this = pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_Init(v7, v5);
        if ((this & 1) != 0)
          return this;
        this = (uint64_t)sub_20C62618C((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a3);
      }
    }
  }
  *a3 = 0;
  return this;
}

void sub_20C62944C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C629474(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  _QWORD v3[4];
  char v4;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition>::ope"
            "rator->() const [U = pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAF0CF9 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_Init(pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *this, const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a2)
{
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  __int128 v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  const char *v14;
  char *v15;
  void **v16;
  unsigned int *v17;
  unsigned int v18;
  const char *Text;
  char *v20;
  unsigned int *v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  const char *v27;
  char *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v34;
  _BYTE v36[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  void *__p[2];
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetJointsAttr(a2, (uint64_t)&v45);
  v4 = (_QWORD *)((char *)this + 48);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v45, (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *)((char *)this + 48));
  if ((BYTE8(v46) & 7) != 0)
  {
    v5 = (unsigned int *)(*((_QWORD *)&v46 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_20BFD265C(&v46);
  if (*((_QWORD *)&v45 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v45 + 1));
  pxrInternal__aapl__pxrReserved__::UsdSkelTopology::UsdSkelTopology((uint64_t)&v45, *((_QWORD *)this + 10), *((_QWORD *)this + 6));
  if ((__int128 *)((char *)this + 88) != &v45)
  {
    sub_20BF5618C((uint64_t)this + 88);
    v7 = v46;
    *(_OWORD *)((char *)this + 88) = v45;
    *(_OWORD *)((char *)this + 104) = v7;
    v45 = 0u;
    v46 = 0u;
    *((_QWORD *)this + 15) = v47;
    v47 = 0;
  }
  sub_20BF5618C((uint64_t)&v45);
  __p[0] = 0;
  __p[1] = 0;
  v44 = 0;
  v9 = pxrInternal__aapl__pxrReserved__::UsdSkelTopology::Validate((unint64_t *)this + 11, (uint64_t)__p, v8);
  if ((v9 & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetBindTransformsAttr(a2, (uint64_t)&v45);
    v10 = (_QWORD *)((char *)this + 168);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((uint64_t)&v45, (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *)((char *)this + 168));
    if ((BYTE8(v46) & 7) != 0)
    {
      v11 = (unsigned int *)(*((_QWORD *)&v46 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
    sub_20BFD265C(&v46);
    if (*((_QWORD *)&v45 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v45 + 1));
    if (*v10 == *v4)
    {
      v13 = atomic_load((unsigned int *)this + 112);
      atomic_store(v13 | 1, (unsigned int *)this + 112);
    }
    else
    {
      *(_QWORD *)&v45 = "usdSkel/skelDefinition.cpp";
      *((_QWORD *)&v45 + 1) = "_Init";
      *(_QWORD *)&v46 = 119;
      *((_QWORD *)&v46 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_Init(const UsdSkelSkeleton &)";
      LOBYTE(v47) = 0;
      sub_20C35C4F8((uint64_t)v36, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
      sub_20C348EEC((uint64_t)v36, &v41);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v45, (pxrInternal__aapl__pxrReserved__ *)"%s -- size of 'bindTransforms' attr [%zu] does not match the number of joints in the 'joints' attr [%zu].", v20, Text, *v10, *v4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
      sub_20BFD265C(&v41);
      if ((v40 & 7) != 0)
      {
        v21 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
      sub_20BFD265C(&v38);
      if (v37)
        sub_20C35C614(v37);
    }
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetRestTransformsAttr(a2, (uint64_t)&v45);
    v23 = (_QWORD *)((char *)this + 128);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((uint64_t)&v45, (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *)((char *)this + 128));
    if ((BYTE8(v46) & 7) != 0)
    {
      v24 = (unsigned int *)(*((_QWORD *)&v46 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
    sub_20BFD265C(&v46);
    if (*((_QWORD *)&v45 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v45 + 1));
    if (*v23 == *v4)
    {
      v26 = atomic_load((unsigned int *)this + 112);
      atomic_store(v26 | 2, (unsigned int *)this + 112);
    }
    else
    {
      *(_QWORD *)&v45 = "usdSkel/skelDefinition.cpp";
      *((_QWORD *)&v45 + 1) = "_Init";
      *(_QWORD *)&v46 = 129;
      *((_QWORD *)&v46 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_Init(const UsdSkelSkeleton &)";
      LOBYTE(v47) = 0;
      sub_20C35C4F8((uint64_t)v36, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
      sub_20C348EEC((uint64_t)v36, &v41);
      v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v45, (pxrInternal__aapl__pxrReserved__ *)"%s -- size of 'restTransforms' attr [%zu] does not match the number of joints in the 'joints' attr [%zu].", v28, v27, *v23, *v4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
      sub_20BFD265C(&v41);
      if ((v40 & 7) != 0)
      {
        v29 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
      sub_20BFD265C(&v38);
      if (v37)
        sub_20C35C614(v37);
    }
    v31 = *((_QWORD *)a2 + 1);
    if (v31)
    {
      v32 = (unint64_t *)(v31 + 48);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v34 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v31;
    if (v34)
      sub_20C35C614(v34);
    sub_20C01A074((int *)this + 10, (_DWORD *)a2 + 4);
    sub_20C01A0C8((int *)this + 11, (_DWORD *)a2 + 5);
  }
  else
  {
    *(_QWORD *)&v45 = "usdSkel/skelDefinition.cpp";
    *((_QWORD *)&v45 + 1) = "_Init";
    *(_QWORD *)&v46 = 108;
    *((_QWORD *)&v46 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_Init(const UsdSkelSkeleton &)";
    LOBYTE(v47) = 0;
    sub_20C35C4F8((uint64_t)v36, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
    sub_20C348EEC((uint64_t)v36, &v41);
    v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41);
    v16 = __p;
    if (v44 < 0)
      v16 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v45, (pxrInternal__aapl__pxrReserved__ *)"%s -- invalid topology: %s", v15, v14, v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
    sub_20BFD265C(&v41);
    if ((v40 & 7) != 0)
    {
      v17 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
    sub_20BFD265C(&v38);
    if (v37)
      sub_20C35C614(v37);
  }
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  return v9;
}

void sub_20C6299BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  sub_20C35C2E0((uint64_t)&a13);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::UsdSkel_SkelDefinition(pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *this)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v2;
  unsigned int *v3;
  unsigned int v4;
  int v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_24C53EFB0;
  v2 = (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *)((char *)this + 24);
  v6 = 1;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v9);
  v10 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  *(_QWORD *)v2 = off_24C53F7D0;
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
  *((_DWORD *)this + 112) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 57) = 850045863;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_QWORD *)this + 64) = 0;
  return this;
}

void sub_20C629BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfRefBase *v9;
  unsigned int **v10;
  const void *v12;

  sub_20C35C2E0((uint64_t)&a9);
  sub_20BEBCE60(v10, v12);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_XformHolder::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1)
{
  return a1 + 40;
}

{
  return a1 + 40;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, uint64_t a2)
{
  char v2;
  _QWORD v4[4];
  char v5;

  v2 = atomic_load((unsigned int *)(a1 + 448));
  if ((v2 & 2) != 0)
  {
    if (a2)
    {
      sub_20C282748(a2, (__int128 *)(a1 + 128));
      return 1;
    }
    v4[0] = "usdSkel/skelDefinition.cpp";
    v4[1] = "GetJointLocalRestTransforms";
    v4[2] = 166;
    v4[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms(VtMatrix4dArray *)";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, unint64_t *a2)
{
  unsigned int v2;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  if (a2)
  {
    v7 = 0;
    v5 = 0u;
    v6 = 0u;
    v2 = atomic_load((unsigned int *)(a1 + 448));
    if ((v2 & 2) != 0)
    {
      sub_20C282748((uint64_t)&v5, (__int128 *)(a1 + 128));
      sub_20C629D30((unint64_t *)&v5, a2);
    }
    sub_20BF5618C((uint64_t)&v5);
    return (v2 >> 1) & 1;
  }
  else
  {
    *(_QWORD *)&v5 = "usdSkel/skelDefinition.cpp";
    *((_QWORD *)&v5 + 1) = "GetJointLocalRestTransforms";
    *(_QWORD *)&v6 = 183;
    *((_QWORD *)&v6 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms(Vt"
                           "Matrix4fArray *)";
    LOBYTE(v7) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v5, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
}

void sub_20C629D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_20C629D30(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  __n128 result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __n128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 *v17;

  v4 = *a1;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v17 = &v13;
  sub_20BF60580(a2, v4, (__int128 **)&v17);
  sub_20BF6080C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
  if (*a1)
  {
    v8 = 0;
    v9 = 0;
    v10 = a2[4];
    do
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)&v13, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)(a1[4] + v8));
      result = v13;
      v11 = v14;
      v12 = v16;
      *(_OWORD *)(v10 + 32) = v15;
      *(_OWORD *)(v10 + 48) = v12;
      *(__n128 *)v10 = result;
      *(_OWORD *)(v10 + 16) = v11;
      v10 += 64;
      ++v9;
      v8 += 128;
    }
    while (v9 < *a1);
  }
  return result;
}

uint64_t sub_20C629DD8(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t result;
  _QWORD v6[4];
  char v7;

  v2 = atomic_load((unsigned int *)(a1 + 448));
  if ((v2 & 2) == 0)
    return 0;
  if (!a2)
  {
    v6[0] = "usdSkel/skelDefinition.cpp";
    v6[1] = "_GetJointSkelRestTransforms";
    v6[2] = 205;
    v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_GetJointSkelRestTransforms(VtArray<Matrix4> "
            "*) [ComputeFlag = 4, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  if ((v2 & 4) != 0 || (result = sub_20C62A328(a1), (_DWORD)result))
  {
    sub_20C282748(a2, (__int128 *)(a1 + 208));
    return 1;
  }
  return result;
}

uint64_t sub_20C629E7C(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t result;
  _QWORD v6[4];
  char v7;

  v2 = atomic_load((unsigned int *)(a1 + 448));
  if ((v2 & 2) == 0)
    return 0;
  if (!a2)
  {
    v6[0] = "usdSkel/skelDefinition.cpp";
    v6[1] = "_GetJointSkelRestTransforms";
    v6[2] = 205;
    v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_GetJointSkelRestTransforms(VtArray<Matrix4> "
            "*) [ComputeFlag = 32, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  if ((v2 & 0x20) != 0 || (result = sub_20C62A4EC(a1), (_DWORD)result))
  {
    sub_20C62A6A0(a2, (__int128 *)(a1 + 248));
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointWorldBindTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, uint64_t a2)
{
  char v2;
  _QWORD v4[4];
  char v5;

  v2 = atomic_load((unsigned int *)(a1 + 448));
  if ((v2 & 1) != 0)
  {
    if (a2)
    {
      sub_20C282748(a2, (__int128 *)(a1 + 168));
      return 1;
    }
    v4[0] = "usdSkel/skelDefinition.cpp";
    v4[1] = "GetJointWorldBindTransforms";
    v4[2] = 277;
    v4[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointWorldBindTransforms(VtMatrix4dArray *)";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointWorldBindTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, unint64_t *a2)
{
  char v2;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  if (a2)
  {
    v7 = 0;
    v5 = 0u;
    v6 = 0u;
    v2 = atomic_load((unsigned int *)(a1 + 448));
    if ((v2 & 1) != 0)
    {
      sub_20C282748((uint64_t)&v5, (__int128 *)(a1 + 168));
      sub_20C629D30((unint64_t *)&v5, a2);
    }
    sub_20BF5618C((uint64_t)&v5);
    return v2 & 1;
  }
  else
  {
    *(_QWORD *)&v5 = "usdSkel/skelDefinition.cpp";
    *((_QWORD *)&v5 + 1) = "GetJointWorldBindTransforms";
    *(_QWORD *)&v6 = 294;
    *((_QWORD *)&v6 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointWorldBindTransforms(Vt"
                           "Matrix4fArray *)";
    LOBYTE(v7) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v5, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
}

void sub_20C62A048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C62A064(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t result;
  _QWORD v6[4];
  char v7;

  v2 = atomic_load((unsigned int *)(a1 + 448));
  if ((v2 & 1) == 0)
    return 0;
  if (!a2)
  {
    v6[0] = "usdSkel/skelDefinition.cpp";
    v6[1] = "_GetJointWorldInverseBindTransforms";
    v6[2] = 317;
    v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_GetJointWorldInverseBindTransforms(VtArray<M"
            "atrix4> *) [ComputeFlag = 8, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  if ((v2 & 8) != 0 || (result = sub_20C62A758(a1), (_DWORD)result))
  {
    sub_20C282748(a2, (__int128 *)(a1 + 288));
    return 1;
  }
  return result;
}

uint64_t sub_20C62A108(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t result;
  _QWORD v6[4];
  char v7;

  v2 = atomic_load((unsigned int *)(a1 + 448));
  if ((v2 & 1) == 0)
    return 0;
  if (!a2)
  {
    v6[0] = "usdSkel/skelDefinition.cpp";
    v6[1] = "_GetJointWorldInverseBindTransforms";
    v6[2] = 317;
    v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_GetJointWorldInverseBindTransforms(VtArray<M"
            "atrix4> *) [ComputeFlag = 64, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  if ((v2 & 0x40) != 0 || (result = sub_20C62A934(a1), (_DWORD)result))
  {
    sub_20C62A6A0(a2, (__int128 *)(a1 + 328));
    return 1;
  }
  return result;
}

uint64_t sub_20C62A1AC(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t result;
  _QWORD v6[4];
  char v7;

  v2 = atomic_load((unsigned int *)(a1 + 448));
  if ((v2 & 2) == 0)
    return 0;
  if (!a2)
  {
    v6[0] = "usdSkel/skelDefinition.cpp";
    v6[1] = "_GetJointLocalInverseRestTransforms";
    v6[2] = 392;
    v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_GetJointLocalInverseRestTransforms(VtArray<M"
            "atrix4> *) [ComputeFlag = 16, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  if ((v2 & 0x10) != 0 || (result = sub_20C62AAF0(a1), (_DWORD)result))
  {
    sub_20C282748(a2, (__int128 *)(a1 + 368));
    return 1;
  }
  return result;
}

uint64_t sub_20C62A250(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t result;
  _QWORD v6[4];
  char v7;

  v2 = atomic_load((unsigned int *)(a1 + 448));
  if ((v2 & 2) == 0)
    return 0;
  if (!a2)
  {
    v6[0] = "usdSkel/skelDefinition.cpp";
    v6[1] = "_GetJointLocalInverseRestTransforms";
    v6[2] = 392;
    v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_GetJointLocalInverseRestTransforms(VtArray<M"
            "atrix4> *) [ComputeFlag = 128, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  if (v2 < 0 || (result = sub_20C62AC04(a1), (_DWORD)result))
  {
    sub_20C62A6A0(a2, (__int128 *)(a1 + 408));
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::HasBindPose(pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *this)
{
  char v1;

  v1 = atomic_load((unsigned int *)this + 112);
  return v1 & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::HasRestPose(pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *this)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)this + 112);
  return (v1 >> 1) & 1;
}

void sub_20C62A314(uint64_t a1)
{
  void *v1;

  sub_20C62AD10(a1);
  operator delete(v1);
}

uint64_t sub_20C62A328(uint64_t a1)
{
  unsigned int *v2;
  char v3;
  char v4;
  unint64_t v5;
  __int128 *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  _OWORD v13[2];
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 *v23;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v2 = (unsigned int *)(a1 + 448);
  v3 = atomic_load((unsigned int *)(a1 + 448));
  if ((v3 & 2) != 0)
  {
    sub_20C282748((uint64_t)v13, (__int128 *)(a1 + 128));
  }
  else
  {
    *(_QWORD *)&v15 = "usdSkel/skelDefinition.cpp";
    *((_QWORD *)&v15 + 1) = "_ComputeJointSkelRestTransforms";
    *(_QWORD *)&v16 = 244;
    *((_QWORD *)&v16 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_ComputeJointSkelRestTransfor"
                            "ms() [ComputeFlag = 4, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v17) = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "GetJointLocalRestTransforms(&jointLocalRestXforms)", 0) & 1) == 0)
    {
      v11 = 0;
      goto LABEL_8;
    }
  }
  std::mutex::lock((std::mutex *)(a1 + 456));
  v4 = atomic_load(v2);
  if ((v4 & 4) == 0)
  {
    v5 = *(_QWORD *)(a1 + 88);
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v23 = &v15;
    sub_20BF5F980((unint64_t *)(a1 + 208), v5, &v23);
    v6 = v14;
    v7 = *(char **)&v13[0];
    sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 208), v8, v9);
    if ((pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms((char **)(a1 + 88), v6, v7, *(_QWORD *)(a1 + 240), *(char **)(a1 + 208), 0) & 1) == 0)
    {
      *(_QWORD *)&v15 = "usdSkel/skelDefinition.cpp";
      *((_QWORD *)&v15 + 1) = "_ComputeJointSkelRestTransforms";
      *(_QWORD *)&v16 = 258;
      *((_QWORD *)&v16 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_ComputeJointSkelRestTransf"
                              "orms() [ComputeFlag = 4, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      LOBYTE(v17) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "success", 0);
    }
    do
      v10 = __ldaxr(v2);
    while (__stlxr(v10 | 4, v2));
  }
  std::mutex::unlock((std::mutex *)(a1 + 456));
  v11 = 1;
LABEL_8:
  sub_20BF5618C((uint64_t)v13);
  return v11;
}

void sub_20C62A4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C62A4EC(uint64_t a1)
{
  unsigned int *v2;
  char v3;
  unint64_t v4;
  __int128 *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  _OWORD v12[2];
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;

  v13 = 0;
  memset(v12, 0, sizeof(v12));
  if ((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1, (unint64_t *)v12) & 1) != 0|| (*(_QWORD *)&v14 = "usdSkel/skelDefinition.cpp", *((_QWORD *)&v14 + 1) = "_ComputeJointSkelRestTransforms", *(_QWORD *)&v15 = 244, *((_QWORD *)&v15 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_ComputeJointSkelRestTransforms() [ComputeFlag = 32, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]", LOBYTE(v16) = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v14, "GetJointLocalRestTransforms(&jointLocalRestXforms)", 0) & 1) != 0))
  {
    std::mutex::lock((std::mutex *)(a1 + 456));
    v2 = (unsigned int *)(a1 + 448);
    v3 = atomic_load((unsigned int *)(a1 + 448));
    if ((v3 & 0x20) == 0)
    {
      v4 = *(_QWORD *)(a1 + 88);
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v18 = &v14;
      sub_20BF60580((unint64_t *)(a1 + 248), v4, &v18);
      v5 = v13;
      v6 = *(char **)&v12[0];
      sub_20BF6080C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 248), v7, v8);
      if ((pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms((char **)(a1 + 88), v5, v6, *(_QWORD *)(a1 + 280), *(char **)(a1 + 248), 0) & 1) == 0)
      {
        *(_QWORD *)&v14 = "usdSkel/skelDefinition.cpp";
        *((_QWORD *)&v14 + 1) = "_ComputeJointSkelRestTransforms";
        *(_QWORD *)&v15 = 258;
        *((_QWORD *)&v15 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_ComputeJointSkelRestTran"
                                "sforms() [ComputeFlag = 32, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
        LOBYTE(v16) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v14, "success", 0);
      }
      do
        v9 = __ldaxr(v2);
      while (__stlxr(v9 | 0x20, v2));
    }
    std::mutex::unlock((std::mutex *)(a1 + 456));
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  sub_20BF5618C((uint64_t)v12);
  return v10;
}

void sub_20C62A664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C62A6A0(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20C62A73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C62A758(uint64_t a1)
{
  unsigned int *v2;
  char v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD v8[4];
  char v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v2 = (unsigned int *)(a1 + 448);
  v3 = atomic_load((unsigned int *)(a1 + 448));
  if ((v3 & 1) != 0)
  {
    sub_20C282748((uint64_t)v10, (__int128 *)(a1 + 168));
  }
  else
  {
    v8[0] = "usdSkel/skelDefinition.cpp";
    v8[1] = "_ComputeJointWorldInverseBindTransforms";
    v8[2] = 361;
    v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_ComputeJointWorldInverseBindTransforms() [Co"
            "mputeFlag = 8, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v9 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "GetJointWorldBindTransforms(&jointWorldBindXforms)", 0) & 1) == 0)
    {
      v6 = 0;
      goto LABEL_7;
    }
  }
  std::mutex::lock((std::mutex *)(a1 + 456));
  v4 = atomic_load(v2);
  if ((v4 & 8) == 0)
  {
    sub_20C62A86C((unint64_t *)v10, (unint64_t *)(a1 + 288));
    do
      v5 = __ldaxr(v2);
    while (__stlxr(v5 | 8, v2));
  }
  std::mutex::unlock((std::mutex *)(a1 + 456));
  v6 = 1;
LABEL_7:
  sub_20BF5618C((uint64_t)v10);
  return v6;
}

void sub_20C62A838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C62A86C(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  __n128 result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 *v25;

  v4 = *a1;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v25 = &v17;
  sub_20BF5F980(a2, v4, &v25);
  sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
  if (*a1)
  {
    v8 = 0;
    v9 = 0;
    v10 = a2[4];
    do
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)(a1[4] + v8), 0, 0.0, (uint64_t)&v17);
      v11 = v10 + v8;
      v12 = v17;
      v13 = v18;
      v14 = v20;
      *(_OWORD *)(v11 + 32) = v19;
      *(_OWORD *)(v11 + 48) = v14;
      *(_OWORD *)v11 = v12;
      *(_OWORD *)(v11 + 16) = v13;
      result = v21;
      v15 = v22;
      v16 = v24;
      *(_OWORD *)(v11 + 96) = v23;
      *(_OWORD *)(v11 + 112) = v16;
      *(__n128 *)(v11 + 64) = result;
      *(_OWORD *)(v11 + 80) = v15;
      ++v9;
      v8 += 128;
    }
    while (v9 < *a1);
  }
  return result;
}

uint64_t sub_20C62A934(uint64_t a1)
{
  unsigned int *v2;
  char v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD v7[4];
  char v8;
  _OWORD v9[2];
  uint64_t v10;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  if ((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointWorldBindTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1, (unint64_t *)v9) & 1) != 0|| (v7[0] = "usdSkel/skelDefinition.cpp", v7[1] = "_ComputeJointWorldInverseBindTransforms", v7[2] = 361, v7[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_ComputeJointWorldInverseBindTransforms() [ComputeFlag = 64, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]", v8 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "GetJointWorldBindTransforms(&jointWorldBindXforms)", 0) & 1) != 0))
  {
    std::mutex::lock((std::mutex *)(a1 + 456));
    v2 = (unsigned int *)(a1 + 448);
    v3 = atomic_load((unsigned int *)(a1 + 448));
    if ((v3 & 0x40) == 0)
    {
      sub_20C62AA40((unint64_t *)v9, (unint64_t *)(a1 + 328));
      do
        v4 = __ldaxr(v2);
      while (__stlxr(v4 | 0x40, v2));
    }
    std::mutex::unlock((std::mutex *)(a1 + 456));
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  sub_20BF5618C((uint64_t)v9);
  return v5;
}

void sub_20C62AA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C62AA40(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  __n128 result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __n128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 *v18;

  v4 = *a1;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v18 = &v14;
  sub_20BF60580(a2, v4, (__int128 **)&v18);
  sub_20BF6080C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
  if (*a1)
  {
    v8 = 0;
    v9 = 0;
    v10 = a2[4];
    do
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::GetInverse((float *)(a1[4] + v8), 0, 0.0, (uint64_t)&v14);
      v11 = v10 + v8;
      result = v14;
      v12 = v15;
      v13 = v17;
      *(_OWORD *)(v11 + 32) = v16;
      *(_OWORD *)(v11 + 48) = v13;
      *(__n128 *)v11 = result;
      *(_OWORD *)(v11 + 16) = v12;
      ++v9;
      v8 += 64;
    }
    while (v9 < *a1);
  }
  return result;
}

uint64_t sub_20C62AAF0(uint64_t a1)
{
  unsigned int *v2;
  char v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD v8[4];
  char v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v2 = (unsigned int *)(a1 + 448);
  v3 = atomic_load((unsigned int *)(a1 + 448));
  if ((v3 & 2) != 0)
  {
    sub_20C282748((uint64_t)v10, (__int128 *)(a1 + 128));
  }
  else
  {
    v8[0] = "usdSkel/skelDefinition.cpp";
    v8[1] = "_ComputeJointLocalInverseRestTransforms";
    v8[2] = 438;
    v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_ComputeJointLocalInverseRestTransforms() [Co"
            "mputeFlag = 16, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v9 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "GetJointLocalRestTransforms(&jointLocalRestXforms)", 0) & 1) == 0)
    {
      v6 = 0;
      goto LABEL_7;
    }
  }
  std::mutex::lock((std::mutex *)(a1 + 456));
  v4 = atomic_load(v2);
  if ((v4 & 0x10) == 0)
  {
    sub_20C62A86C((unint64_t *)v10, (unint64_t *)(a1 + 368));
    do
      v5 = __ldaxr(v2);
    while (__stlxr(v5 | 0x10, v2));
  }
  std::mutex::unlock((std::mutex *)(a1 + 456));
  v6 = 1;
LABEL_7:
  sub_20BF5618C((uint64_t)v10);
  return v6;
}

void sub_20C62ABD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C62AC04(uint64_t a1)
{
  unsigned int *v2;
  char v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD v7[4];
  char v8;
  _OWORD v9[2];
  uint64_t v10;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  if ((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1, (unint64_t *)v9) & 1) != 0|| (v7[0] = "usdSkel/skelDefinition.cpp", v7[1] = "_ComputeJointLocalInverseRestTransforms", v7[2] = 438, v7[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_ComputeJointLocalInverseRestTransforms() [ComputeFlag = 128, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]", v8 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "GetJointLocalRestTransforms(&jointLocalRestXforms)", 0) & 1) != 0))
  {
    std::mutex::lock((std::mutex *)(a1 + 456));
    v2 = (unsigned int *)(a1 + 448);
    v3 = atomic_load((unsigned int *)(a1 + 448));
    if ((v3 & 0x80) == 0)
    {
      sub_20C62AA40((unint64_t *)v9, (unint64_t *)(a1 + 408));
      do
        v4 = __ldaxr(v2);
      while (__stlxr(v4 | 0x80, v2));
    }
    std::mutex::unlock((std::mutex *)(a1 + 456));
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  sub_20BF5618C((uint64_t)v9);
  return v5;
}

void sub_20C62ACDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C62AD10(uint64_t a1)
{
  const void *v2;

  *(_QWORD *)a1 = &unk_24C53EFB0;
  std::mutex::~mutex((std::mutex *)(a1 + 456));
  sub_20BF5618C(a1 + 408);
  sub_20BF5618C(a1 + 368);
  sub_20BF5618C(a1 + 328);
  sub_20BF5618C(a1 + 288);
  sub_20BF5618C(a1 + 248);
  sub_20BF5618C(a1 + 208);
  sub_20BF5618C(a1 + 168);
  sub_20BF5618C(a1 + 128);
  sub_20BF5618C(a1 + 88);
  sub_20C00918C((_QWORD *)(a1 + 48));
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)(a1 + 24));
  sub_20BEBCE60((unsigned int **)(a1 + 16), v2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

void sub_20C62ADD0()
{
  void *__p[2];
  char v1;

  sub_20C62C450();
  sub_20BDDC0E4(__p, "SkelAnimation");
  sub_20C62C570((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C62AE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::~UsdSkelAnimation(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53F008;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdSkel/animation.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdSkelAnimation pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::Get(const UsdSta"
                            "gePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53F008;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C62AFC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498B998);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498B998))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498B990, "SkelAnimation");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498B990, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B998);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498B990, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53F008;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdSkel/animation.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdSkelAnimation pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::Define(const Usd"
                            "StagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53F008;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C62B1B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B998);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B9A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498B9A8))
  {
    __cxa_guard_release(&qword_25498B9A8);
  }
  return &qword_25498B9A0;
}

void sub_20C62B254(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B9A8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498B9B8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)__cxa_guard_acquire(&qword_25498B9B8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(v3);
      byte_25498B9B0 = sub_20C35BD7C((char *)&qword_25498B9A0, v4, v5);
      __cxa_guard_release(&qword_25498B9B8);
    }
  }
  return byte_25498B9B0;
}

void sub_20C62B2D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B9B8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(this);
  return &qword_25498B9A0;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 48), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C62B3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::CreateJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 48), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetTranslationsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 176), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C62B500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::CreateTranslationsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 176), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 616), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetRotationsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 120), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C62B658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::CreateRotationsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 120), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 784), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetScalesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 128), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C62B7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::CreateScalesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 128), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 592), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetBlendShapesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 8), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C62B908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::CreateBlendShapesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 8), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetBlendShapeWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 16), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C62BA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::CreateBlendShapeWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 16), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t *SchemaAttributeNames;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = (int)this;
  v41 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498B9D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498B9D8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v5)
      v5 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v6 = *((_QWORD *)v5 + 6);
    v35 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v9)
      v9 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v10 = *((_QWORD *)v9 + 22);
    v36 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v36 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v13)
      v13 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v14 = *((_QWORD *)v13 + 15);
    v37 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v37 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v17)
      v17 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v18 = *((_QWORD *)v17 + 16);
    v38 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v38 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v21)
      v21 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v22 = *((_QWORD *)v21 + 1);
    v39 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v39 &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v25)
      v25 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v26 = *((_QWORD *)v25 + 2);
    v40 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v40 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498B9C0, &v35, 6uLL);
    v29 = &v41;
    do
    {
      v31 = *--v29;
      v30 = v31;
      if ((v31 & 7) != 0)
      {
        v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
    }
    while (v29 != &v35);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B9C0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B9D8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498B9F8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498B9F8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_20C62BEF4((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498B9E0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498B9F8);
  }
  if (v1)
    return &qword_25498B9E0;
  else
    return &qword_25498B9C0;
}

void sub_20C62BE64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498B9D8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C62BEF4(uint64_t **a1)
{
  qword_25498B9E8 = 0;
  unk_25498B9F0 = 0;
  qword_25498B9E0 = 0;
  sub_20BFC9A6C((char **)&qword_25498B9E0, ((unk_25498B9C8 - qword_25498B9C0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498B9E0, (_QWORD *)qword_25498B9E8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498B9E0, (_QWORD *)qword_25498B9E8, (uint64_t *)qword_25498B9C0, unk_25498B9C8, (unk_25498B9C8 - qword_25498B9C0) >> 3);
}

void sub_20C62BF88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetTransforms(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  char v17;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;

  v31 = 0;
  memset(v30, 0, sizeof(v30));
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetTranslationsAttr(a1, (uint64_t)&v27);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((uint64_t)&v27, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v30);
  v5 = v4;
  if ((BYTE8(v28) & 7) != 0)
  {
    v6 = (unsigned int *)(*((_QWORD *)&v28 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
  sub_20BFD265C(&v28);
  if (*((_QWORD *)&v27 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v27 + 1));
  if (!v5)
    goto LABEL_24;
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetRotationsAttr(a1, (uint64_t)&v24);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((uint64_t)&v24, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v27);
  v9 = v8;
  if ((BYTE8(v25) & 7) != 0)
  {
    v10 = (unsigned int *)(*((_QWORD *)&v25 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  v12 = (uint64_t *)&v24;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
  sub_20BFD265C(&v25);
  if (*((_QWORD *)&v24 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v24 + 1));
  if (!v9)
    goto LABEL_22;
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetScalesAttr(a1, (uint64_t)&v19);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((uint64_t)&v19, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v24);
  v14 = v13;
  if ((v23 & 7) != 0)
  {
    v15 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v12 = &v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  if (v20)
    sub_20C35C614(v20);
  if (v14)
    LOBYTE(v12) = pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms((unint64_t *)v30, (uint64_t *)&v27, (uint64_t *)&v24, a2);
  sub_20BF5618C((uint64_t)&v24);
  if ((v14 & 1) != 0)
    v17 = 0;
  else
LABEL_22:
    v17 = 1;
  sub_20BF5618C((uint64_t)&v27);
  if ((v17 & 1) != 0)
LABEL_24:
    LOBYTE(v12) = 0;
  sub_20BF5618C((uint64_t)v30);
  return v12 & 1;
}

void sub_20C62C17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  sub_20BF5618C(v5 - 96);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::SetTransforms(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *a1, unint64_t *a2, double a3)
{
  int v5;
  int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__ *v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__ *v21;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  int v23;
  int v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__ *v26;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v27;
  int v28;
  int v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;

  v36 = 0;
  memset(v35, 0, sizeof(v35));
  v34 = 0;
  memset(v33, 0, sizeof(v33));
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  if (pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(a2, (unint64_t *)v35, (unint64_t *)v33, (uint64_t)v31))
  {
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetTranslationsAttr(a1, (uint64_t)&v26);
    v5 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(&v26, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v35, a3);
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetRotationsAttr(a1, (uint64_t)&v21);
    v6 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(&v21, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v33, a3);
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetScalesAttr(a1, (uint64_t)&v16);
    v7 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(&v16, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v31, a3);
    if ((v20 & 7) != 0)
    {
      v8 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    sub_20BFD265C(&v18);
    if (v17)
      sub_20C35C614(v17);
    if ((v25 & 7) != 0)
    {
      v10 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_20BFD265C(&v23);
    if (v22)
      sub_20C35C614(v22);
    if ((v30 & 7) != 0)
    {
      v12 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
    v14 = v5 & v6 & v7;
    sub_20BFD265C(&v28);
    if (v27)
      sub_20C35C614(v27);
  }
  else
  {
    v14 = 0;
  }
  sub_20BF5618C((uint64_t)v31);
  sub_20BF5618C((uint64_t)v33);
  sub_20BF5618C((uint64_t)v35);
  return v14;
}

void sub_20C62C3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20C372B54((uint64_t)&a9);
  sub_20C372B54((uint64_t)&a13);
  sub_20C372B54((uint64_t)&a17);
  sub_20BF5618C((uint64_t)&a21);
  sub_20BF5618C((uint64_t)&a27);
  sub_20BF5618C(v27 - 112);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C62C450()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5647E8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C62C524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C62C570(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C62C600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *sub_20C62C624(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *result;
  void *v4;

  result = sub_20C62C66C();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C62C6AC((uint64_t)result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *sub_20C62C66C()
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)operator new(0x100uLL);
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType::UsdSkelTokensType(v0);
  return v0;
}

void sub_20C62C698(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C62C6AC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  void **v89;

  v89 = (void **)(a1 + 232);
  sub_20BEEB2B8(&v89);
  v2 = *(_QWORD *)(a1 + 224);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 208);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 200);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 192);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 184);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *(_QWORD *)(a1 + 176);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *(_QWORD *)(a1 + 168);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *(_QWORD *)(a1 + 160);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *(_QWORD *)(a1 + 152);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *(_QWORD *)(a1 + 144);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *(_QWORD *)(a1 + 136);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(a1 + 128);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *(_QWORD *)(a1 + 120);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *(_QWORD *)(a1 + 112);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *(_QWORD *)(a1 + 104);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *(_QWORD *)(a1 + 96);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *(_QWORD *)(a1 + 88);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *(_QWORD *)(a1 + 80);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *(_QWORD *)(a1 + 72);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *(_QWORD *)(a1 + 64);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *(_QWORD *)(a1 + 56);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *(_QWORD *)(a1 + 48);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *(_QWORD *)(a1 + 40);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *(_QWORD *)(a1 + 32);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *(_QWORD *)(a1 + 24);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *(_QWORD *)(a1 + 16);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *(_QWORD *)(a1 + 8);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v86 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v87 = __ldxr(v86);
    while (__stlxr(v87 - 2, v86));
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v8;

  if ((v8 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d> const&,pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>*,int)const::identity, 1.0);
  }
  return sub_20C62CB24(a1, a2, a3, a4, pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d> const&,pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>*,int)const::identity);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__17UsdSkelAnimMapper15RemapTransformsINS_10GfMatrix4dEEEbRKNS_7VtArrayIT_EEPS5_i(a1, a2, a3, a4);
}

void sub_20C62CB0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20C62CB24(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v29;
  const void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  if (!a3)
  {
    *(_QWORD *)&v31 = "usdSkel/animMapper.h";
    *((_QWORD *)&v31 + 1) = "Remap";
    *(_QWORD *)&v32 = 204;
    *((_QWORD *)&v32 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>]";
    LOBYTE(v33) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    *(_QWORD *)&v31 = "usdSkel/animMapper.h";
    *((_QWORD *)&v31 + 1) = "Remap";
    *(_QWORD *)&v32 = 209;
    *((_QWORD *)&v32 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>]";
    LOBYTE(v33) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v31, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C282748(a3, a2);
  }
  else
  {
    if (a5)
    {
      v13 = a5[5];
      v35 = a5[4];
      v36 = v13;
      v14 = a5[7];
      v37 = a5[6];
      v38 = v14;
      v15 = a5[1];
      v31 = *a5;
      v32 = v15;
      v16 = a5[3];
      v33 = a5[2];
      v34 = v16;
    }
    else
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
    }
    sub_20C63978C((unint64_t *)a3, v11, &v31);
    v20 = *((_DWORD *)a1 + 14);
    if ((v20 & 3) != 0)
    {
      if ((v20 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v29 = *(_QWORD *)a2;
        else
          v29 = (v9 - a1[1]) * v10;
        v30 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v18, v19);
        if (v29)
          memmove((void *)(*(_QWORD *)(a3 + 32) + ((a1[1] * v10) << 7)), v30, v29 << 7);
      }
      else
      {
        v21 = (char *)*((_QWORD *)a2 + 4);
        sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v18, v19);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v22 = *(_QWORD *)a2 / v10;
        else
          v22 = a1[2];
        if (v22)
        {
          v23 = 0;
          v24 = *(_QWORD *)(a3 + 32);
          v25 = (unsigned int *)a1[6];
          do
          {
            v27 = *v25++;
            v26 = v27;
            if ((v27 & 0x80000000) == 0 && *(_QWORD *)a3 > v26 && v5 != 0)
              memmove((void *)(v24 + ((uint64_t)(int)(v26 * v5) << 7)), v21, v10 << 7);
            v23 += v5;
            v21 += 128 * (unint64_t)v5;
            --v22;
          }
          while (v22);
        }
      }
    }
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v8;

  if ((v8 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((uint64_t)pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f> const&,pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f>*,int)const::identity, 1.0);
  }
  return sub_20C62CDF4(a1, a2, a3, a4, pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f> const&,pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f>*,int)const::identity);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__17UsdSkelAnimMapper15RemapTransformsINS_10GfMatrix4fEEEbRKNS_7VtArrayIT_EEPS5_i(a1, a2, a3, a4);
}

void sub_20C62CDDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20C62CDF4(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  char *v17;
  int v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v27;
  const void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (!a3)
  {
    *(_QWORD *)&v29 = "usdSkel/animMapper.h";
    *((_QWORD *)&v29 + 1) = "Remap";
    *(_QWORD *)&v30 = 204;
    *((_QWORD *)&v30 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f>]";
    LOBYTE(v31) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    *(_QWORD *)&v29 = "usdSkel/animMapper.h";
    *((_QWORD *)&v29 + 1) = "Remap";
    *(_QWORD *)&v30 = 209;
    *((_QWORD *)&v30 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f>]";
    LOBYTE(v31) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v29, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C62A6A0(a3, a2);
  }
  else
  {
    if (a5)
    {
      v13 = a5[1];
      v29 = *a5;
      v30 = v13;
      v14 = a5[3];
      v31 = a5[2];
      v32 = v14;
    }
    else
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
    }
    sub_20C63982C((unint64_t *)a3, v11, (uint64_t)&v29);
    v18 = *((_DWORD *)a1 + 14);
    if ((v18 & 3) != 0)
    {
      if ((v18 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v27 = *(_QWORD *)a2;
        else
          v27 = (v9 - a1[1]) * v10;
        v28 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF6080C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v16, v17);
        if (v27)
          memmove((void *)(*(_QWORD *)(a3 + 32) + ((a1[1] * v10) << 6)), v28, v27 << 6);
      }
      else
      {
        v19 = (char *)*((_QWORD *)a2 + 4);
        sub_20BF6080C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v16, v17);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v20 = *(_QWORD *)a2 / v10;
        else
          v20 = a1[2];
        if (v20)
        {
          v21 = 0;
          v22 = *(_QWORD *)(a3 + 32);
          v23 = (unsigned int *)a1[6];
          do
          {
            v25 = *v23++;
            v24 = v25;
            if ((v25 & 0x80000000) == 0 && *(_QWORD *)a3 > v24 && v5 != 0)
              memmove((void *)(v22 + ((uint64_t)(int)(v24 * v5) << 6)), v19, v10 << 6);
            v21 += v5;
            v19 += 64 * (unint64_t)v5;
            --v20;
          }
          while (v20);
        }
      }
    }
  }
  return 1;
}

double pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 44) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 44) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

double pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this, uint64_t a2)
{
  double result;

  *(_QWORD *)this = a2;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 14;
  return result;
}

{
  double result;

  *(_QWORD *)this = a2;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 14;
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *a1, uint64_t a2, uint64_t a3)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper(a1, *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a2 + 32), *(_QWORD *)a2, *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a3 + 32), *(_QWORD *)a3);
}

{
  return pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper(a1, *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a2 + 32), *(_QWORD *)a2, *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a3 + 32), *(_QWORD *)a3);
}

pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, unint64_t a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, unint64_t a5)
{
  uint64_t *v7;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t v10;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t *v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const pxrInternal__aapl__pxrReserved__::TfToken *v26;
  int v28;
  uint64_t *v30;
  unint64_t v31;
  _OWORD v32[2];
  int v33;
  int v34;

  *(_QWORD *)this = a5;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (a3 && a5)
  {
    v7 = (uint64_t *)a4;
    v9 = a2;
    v10 = 0;
    v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)a4 + 8 * a5);
    while ((*(_QWORD *)((_BYTE *)a4 + v10) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
    {
      v10 += 8;
      if (8 * a5 == v10)
        goto LABEL_9;
    }
    v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)a4 + v10);
LABEL_9:
    if (a3 + ((v11 - a4) >> 3) <= a5)
    {
      v23 = (v11 - a4) >> 3;
      v24 = 8 * v23;
      v25 = 8 * a3;
      v26 = a2;
      while ((*(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)((_BYTE *)a4 + v24) & 0xFFFFFFFFFFFFFFF8))
      {
        v26 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v26 + 8);
        v24 += 8;
        v25 -= 8;
        if (!v25)
        {
          *((_QWORD *)this + 1) = v23;
          if (v11 == a4 && a3 == a5)
            v28 = 14;
          else
            v28 = 10;
          *((_DWORD *)this + 14) = v28;
          return this;
        }
      }
    }
    v12 = 0;
    memset(v32, 0, sizeof(v32));
    v33 = 1065353216;
    do
    {
      v30 = v7;
      *((_DWORD *)sub_20BF2B728((uint64_t)v32, v7++, (uint64_t)&unk_20CAC184C, &v30) + 6) = v12++;
    }
    while (a5 != v12);
    v34 = 0;
    v30 = (uint64_t *)&v34;
    sub_20BF64D74((unint64_t *)this + 2, a3, (_DWORD **)&v30);
    sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)((char *)this + 16), v13, v14);
    v15 = *((_QWORD *)this + 6);
    sub_20C213784(&v30, a5);
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = sub_20BF2B388(v32, v9);
      if (v18)
      {
        *(_DWORD *)(v15 + 4 * v16) = *((_DWORD *)v18 + 6);
        *(uint64_t *)((char *)v30 + (((unint64_t)*((int *)v18 + 6) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *((_DWORD *)v18 + 6);
        ++v17;
      }
      else
      {
        *(_DWORD *)(v15 + 4 * v16) = -1;
      }
      ++v16;
      v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v9 + 8);
    }
    while (a3 != v16);
    if (v17 == a3)
      v19 = 2;
    else
      v19 = 1;
    *((_DWORD *)this + 14) = v19;
    v20 = v30;
    if (v31 > 0x3F || (v31 & 0x3F) != 0)
    {
      v21 = 0;
      v22 = v30;
      while ((((unint64_t)*v22 >> v21) & 1) != 0)
      {
        v22 += v21 == 63;
        if (v21 == 63)
          v21 = 0;
        else
          ++v21;
        if (v21 == (v31 & 0x3F) && v22 == &v30[v31 >> 6])
          goto LABEL_29;
      }
    }
    else
    {
LABEL_29:
      *((_DWORD *)this + 14) = v19 | 4;
    }
    if (v20)
      operator delete(v20);
    sub_20BF20BCC((uint64_t)v32);
  }
  else
  {
    *((_DWORD *)this + 14) = 0;
  }
  return this;
}

void sub_20C62D30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_20BF20BCC((uint64_t)&a13);
  sub_20BF5618C(v13);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsIdentity(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this)
{
  return (~*((_DWORD *)this + 14) & 0xE) == 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsSparse(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this)
{
  return (*((_BYTE *)this + 56) & 4) == 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this)
{
  return (*((_BYTE *)this + 56) & 3) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_IsOrdered(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this)
{
  return (*((unsigned __int8 *)this + 56) >> 3) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  uint64_t result;

  if (sub_20C07FEB8(a2))
    return sub_20C62DA9C((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF65A7C(a2))
    return sub_20C62DDD4((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF64C0C(a2))
    return sub_20C62E10C((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF6374C(a2))
    return sub_20C62E444((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20C032314(a2))
    return sub_20C62E77C((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20C033AF4(a2))
    return sub_20C62EAB4((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF560D4(a2))
    return sub_20C62EDEC((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF565F0(a2))
    return sub_20C62F124((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF57C2C(a2))
    return sub_20C62F45C((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20C1D1114(a2))
    return sub_20C62F794((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BFED418(a2))
    return sub_20C62FACC((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BFED450(a2))
    return sub_20C62FE0C((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BFED500(a2))
    return sub_20C630144((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20C1D20EC(a2))
    return sub_20C630484((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BFEFDCC(a2))
    return sub_20C6307BC((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20C1D2A38(a2))
    return sub_20C630AFC((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20C1D2EA4(a2))
    return sub_20C630E3C((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF5FDC8(a2))
    return sub_20C63117C((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF611B8(a2))
    return sub_20C6314BC((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF61604(a2))
    return sub_20C6317F4((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF62CAC(a2))
    return sub_20C631B34((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20C1D3BE8(a2))
    return sub_20C631E74((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF5865C(a2))
    return sub_20C6321AC((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF58AAC(a2))
    return sub_20C6324E4((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF5A0F8(a2))
    return sub_20C63281C((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20C1D45CC(a2))
    return sub_20C632B5C((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF5AC4C(a2))
    return sub_20C632E9C((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF5B118(a2))
    return sub_20C6331D4((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF5C88C(a2))
    return sub_20C633514((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20C1D50E8(a2))
    return sub_20C633854((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF5D2EC(a2))
    return sub_20C633B94((uint64_t *)this, a2, a3, a4, a5);
  if (sub_20BF5D738(a2))
    return sub_20C633ECC((uint64_t *)this, a2, a3, a4, a5);
  result = sub_20BF5EDE8(a2);
  if ((_DWORD)result)
    return sub_20C63420C((uint64_t *)this, a2, a3, a4, a5);
  return result;
}

uint64_t sub_20C62DA9C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = BOOL]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20C07FEB8(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = BOOL]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20C07FDF0(a3, (uint64_t)&v41);
    sub_20BF5618C((uint64_t)&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BFB1AC0(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = BOOL]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB770], v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  else
  {
    a5 = 0;
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v22 = *(_QWORD *)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C634590(a1, v22, (uint64_t)&v41, a4, a5);
  if ((_DWORD)v29)
    sub_20C07FDF0(a3, (uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v41);
  return v29;
}

void sub_20C62DD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C62DDD4(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = unsigned char]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF65A7C(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = unsigned char]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20BF65AB4(a3, (uint64_t)&v41);
    sub_20BF5618C((uint64_t)&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BFECAA0(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = unsigned char]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB790], v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  else
  {
    a5 = 0;
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v22 = *(_QWORD *)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C6347FC(a1, v22, (uint64_t)&v41, a4, (char *)a5);
  if ((_DWORD)v29)
    sub_20BF65AB4(a3, (uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v41);
  return v29;
}

void sub_20C62E0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C62E10C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = int]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF64C0C(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = int]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20BF6510C(a3, (uint64_t)&v41);
    sub_20BF5618C((uint64_t)&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BFB2CEC(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = int]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB798], v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  else
  {
    a5 = 0;
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v22 = *(__int128 **)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C634A60(a1, v22, (uint64_t)&v41, a4, (int *)a5);
  if ((_DWORD)v29)
    sub_20BF6510C(a3, (uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v41);
  return v29;
}

void sub_20C62E3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C62E444(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = unsigned int]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF6374C(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = unsigned int]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20BF645B8(a3, (uint64_t)&v41);
    sub_20BF5618C((uint64_t)&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20C1D02C8(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = unsigned int]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7A0], v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  else
  {
    a5 = 0;
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v22 = *(__int128 **)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C634CD8(a1, v22, (uint64_t)&v41, a4, (int *)a5);
  if ((_DWORD)v29)
    sub_20BF645B8(a3, (uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v41);
  return v29;
}

void sub_20C62E714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C62E77C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = long long]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20C032314(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = long long]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20C080298(a3, (uint64_t)&v41);
    sub_20BF5618C((uint64_t)&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20C0495EC(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = long long]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7D0], v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  else
  {
    a5 = 0;
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v22 = *(__int128 **)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C634F50(a1, v22, (uint64_t)&v41, a4, (char **)a5);
  if ((_DWORD)v29)
    sub_20C080298(a3, (uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v41);
  return v29;
}

void sub_20C62EA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C62EAB4(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = unsigned long long]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20C033AF4(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = unsigned long long]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20C1D08C4(a3, (uint64_t)&v41);
    sub_20BF5618C((uint64_t)&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20C1D0800(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = unsigned long long]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7D8], v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  else
  {
    a5 = 0;
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v22 = *(__int128 **)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C6351C0(a1, v22, (uint64_t)&v41, a4, (char **)a5);
  if ((_DWORD)v29)
    sub_20C1D08C4(a3, (uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v41);
  return v29;
}

void sub_20C62ED84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C62EDEC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF560D4(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20BF57178(a3, (uint64_t)&v41);
    sub_20BF5618C((uint64_t)&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20C1D0B64(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF30, v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  else
  {
    a5 = 0;
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v22 = *(__int128 **)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C635430(a1, v22, (uint64_t)&v41, a4, (__int16 *)a5);
  if ((_DWORD)v29)
    sub_20BF57178(a3, (uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v41);
  return v29;
}

void sub_20C62F0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C62F124(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = float]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF565F0(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = float]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20BF56628(a3, (uint64_t)&v41);
    sub_20BF5618C((uint64_t)&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BF7B9F8(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = float]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB788], v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  else
  {
    a5 = 0;
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v22 = *(__int128 **)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C6356A8(a1, v22, (uint64_t)&v41, a4, (int *)a5);
  if ((_DWORD)v29)
    sub_20BF56628(a3, (uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v41);
  return v29;
}

void sub_20C62F3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C62F45C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = double]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF57C2C(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = double]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20BF57C64(a3, (uint64_t)&v41);
    sub_20BF5618C((uint64_t)&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BF78EEC(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = double]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB780], v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  else
  {
    a5 = 0;
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v22 = *(__int128 **)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C635920(a1, v22, (uint64_t)&v41, a4, (char **)a5);
  if ((_DWORD)v29)
    sub_20BF57C64(a3, (uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v41);
  return v29;
}

void sub_20C62F72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C62F794(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfTimeCode]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20C1D1114(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfTimeCode]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20C1D118C(a3, (uint64_t)&v41);
    sub_20BF5618C((uint64_t)&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20C1D0F74(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfTimeCode]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C525368, v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  else
  {
    a5 = 0;
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v22 = *(__int128 **)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C635B90(a1, v22, (uint64_t)&v41, a4, (char **)a5);
  if ((_DWORD)v29)
    sub_20C1D118C(a3, (uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v41);
  return v29;
}

void sub_20C62FA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C62FACC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  const std::type_info *v32;
  char *v33;
  pxrInternal__aapl__pxrReserved__::TfType *v34;
  uint64_t TypeName;
  const char *v36;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (!a3)
  {
    *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v42 + 1) = "_UntypedRemap";
    *(_QWORD *)&v43 = 179;
    *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = std::string]";
    LOBYTE(v44) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BFED418(a3) & 1) == 0)
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 188;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = std::string]";
      LOBYTE(v44) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v40);
      v12 = v41;
      v13 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v40;
      else
        v16 = v13;
      if (v39 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v39 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v41 < 0)
        operator delete(v40[0]);
      return 0;
    }
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    sub_20C080704(a3, (uint64_t)&v42);
    sub_20C008280(&v42);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BFB4608(a5))
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 199;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = std::string]";
      LOBYTE(v44) = 0;
      v31 = v40;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v40);
      if (v41 < 0)
        v31 = (void **)v40[0];
      v34 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C516910, v32, v33);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v34);
      if (*(char *)(TypeName + 23) >= 0)
        v36 = (const char *)TypeName;
      else
        v36 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v31, v36);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      v21 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    else
      v21 = *(_QWORD *)a5;
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)a2 + 1);
  if ((v22 & 4) != 0)
    v23 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v23 = *(__int128 **)a2;
  v24 = *((_QWORD *)a3 + 1);
  if ((v24 & 4) != 0)
    v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v25 = *(_QWORD *)a3;
  v26 = *(_OWORD *)(v25 + 16);
  v42 = *(_OWORD *)v25;
  v43 = v26;
  v27 = *(_QWORD *)(v25 + 32);
  v44 = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 - 16);
    if (*((_QWORD *)&v43 + 1))
      v28 = (unint64_t *)*((_QWORD *)&v43 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = sub_20C635E00(a1, v23, (uint64_t)&v42, a4, v21);
  if ((_DWORD)v30)
    sub_20C080704(a3, (uint64_t)&v42);
  sub_20C008280(&v42);
  return v30;
}

void sub_20C62FDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C62FE0C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BFED450(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20C1D1830(a3, (uint64_t)&v41);
    sub_20C00918C(&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BFB5E50(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BCE0, v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  else
  {
    a5 = 0;
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v22 = *(__int128 **)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C6360B8(a1, v22, (uint64_t)&v41, a4, (char **)a5);
  if ((_DWORD)v29)
    sub_20C1D1830(a3, (uint64_t)&v41);
  sub_20C00918C(&v41);
  return v29;
}

void sub_20C6300DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C630144(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  const std::type_info *v32;
  char *v33;
  pxrInternal__aapl__pxrReserved__::TfType *v34;
  uint64_t TypeName;
  const char *v36;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (!a3)
  {
    *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v42 + 1) = "_UntypedRemap";
    *(_QWORD *)&v43 = 179;
    *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfAssetPath]";
    LOBYTE(v44) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BFED500(a3) & 1) == 0)
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 188;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfAssetPath]";
      LOBYTE(v44) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v40);
      v12 = v41;
      v13 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v40;
      else
        v16 = v13;
      if (v39 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v39 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v41 < 0)
        operator delete(v40[0]);
      return 0;
    }
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    sub_20C1D1D28(a3, (uint64_t)&v42);
    sub_20C00A724(&v42);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BFED488(a5))
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 199;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfAssetPath]";
      LOBYTE(v44) = 0;
      v31 = v40;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v40);
      if (v41 < 0)
        v31 = (void **)v40[0];
      v34 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524DB0, v32, v33);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v34);
      if (*(char *)(TypeName + 23) >= 0)
        v36 = (const char *)TypeName;
      else
        v36 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v31, v36);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      v21 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    else
      v21 = *(_QWORD *)a5;
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)a2 + 1);
  if ((v22 & 4) != 0)
    v23 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v23 = *(__int128 **)a2;
  v24 = *((_QWORD *)a3 + 1);
  if ((v24 & 4) != 0)
    v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v25 = *(_QWORD *)a3;
  v26 = *(_OWORD *)(v25 + 16);
  v42 = *(_OWORD *)v25;
  v43 = v26;
  v27 = *(_QWORD *)(v25 + 32);
  v44 = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 - 16);
    if (*((_QWORD *)&v43 + 1))
      v28 = (unint64_t *)*((_QWORD *)&v43 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = sub_20C6363C8(a1, v23, (uint64_t)&v42, a4, v21);
  if ((_DWORD)v30)
    sub_20C1D1D28(a3, (uint64_t)&v42);
  sub_20C00A724(&v42);
  return v30;
}

void sub_20C63041C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C630484(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfOpaqueValue]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20C1D20EC(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfOpaqueValue]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_35:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20C1D2164(a3, (uint64_t)&v41);
    sub_20BF5618C((uint64_t)&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BFEA778(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfOpaqueValue]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D80, v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_35;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v22 = *(__int128 **)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C6366F4(a1, v22, (uint64_t)&v41, a4);
  if ((_DWORD)v29)
    sub_20C1D2164(a3, (uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v41);
  return v29;
}

void sub_20C630754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6307BC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  const std::type_info *v32;
  char *v33;
  pxrInternal__aapl__pxrReserved__::TfType *v34;
  uint64_t TypeName;
  const char *v36;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (!a3)
  {
    *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v42 + 1) = "_UntypedRemap";
    *(_QWORD *)&v43 = 179;
    *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfPathExpression]";
    LOBYTE(v44) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BFEFDCC(a3) & 1) == 0)
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 188;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfPathExpression]";
      LOBYTE(v44) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v40);
      v12 = v41;
      v13 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v40;
      else
        v16 = v13;
      if (v39 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v39 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v41 < 0)
        operator delete(v40[0]);
      return 0;
    }
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    sub_20C1D26FC(a3, (uint64_t)&v42);
    sub_20C00E910(&v42);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BFEFCF0(a5))
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 199;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfPathExpression]";
      LOBYTE(v44) = 0;
      v31 = v40;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v40);
      if (v41 < 0)
        v31 = (void **)v40[0];
      v34 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524DD8, v32, v33);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v34);
      if (*(char *)(TypeName + 23) >= 0)
        v36 = (const char *)TypeName;
      else
        v36 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v31, v36);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      v21 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    else
      v21 = *(_QWORD *)a5;
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)a2 + 1);
  if ((v22 & 4) != 0)
    v23 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v23 = *(__int128 **)a2;
  v24 = *((_QWORD *)a3 + 1);
  if ((v24 & 4) != 0)
    v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v25 = *(_QWORD *)a3;
  v26 = *(_OWORD *)(v25 + 16);
  v42 = *(_OWORD *)v25;
  v43 = v26;
  v27 = *(_QWORD *)(v25 + 32);
  v44 = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 - 16);
    if (*((_QWORD *)&v43 + 1))
      v28 = (unint64_t *)*((_QWORD *)&v43 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = sub_20C6368EC(a1, v23, (uint64_t)&v42, a4, v21);
  if ((_DWORD)v30)
    sub_20C1D26FC(a3, (uint64_t)&v42);
  sub_20C00E910(&v42);
  return v30;
}

void sub_20C630A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C630AFC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  const std::type_info *v32;
  char *v33;
  pxrInternal__aapl__pxrReserved__::TfType *v34;
  uint64_t TypeName;
  const char *v36;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (!a3)
  {
    *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v42 + 1) = "_UntypedRemap";
    *(_QWORD *)&v43 = 179;
    *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
    LOBYTE(v44) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20C1D2A38(a3) & 1) == 0)
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 188;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
      LOBYTE(v44) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v40);
      v12 = v41;
      v13 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v40;
      else
        v16 = v13;
      if (v39 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v39 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v41 < 0)
        operator delete(v40[0]);
      return 0;
    }
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    sub_20C1D2A70(a3, (uint64_t)&v42);
    sub_20BF5618C((uint64_t)&v42);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BFA8B44(a5))
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 199;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
      LOBYTE(v44) = 0;
      v31 = v40;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v40);
      if (v41 < 0)
        v31 = (void **)v40[0];
      v34 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF90, v32, v33);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v34);
      if (*(char *)(TypeName + 23) >= 0)
        v36 = (const char *)TypeName;
      else
        v36 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v31, v36);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      v21 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                               + 168))(a5);
    else
      v21 = *(__int128 **)a5;
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)a2 + 1);
  if ((v22 & 4) != 0)
    v23 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v23 = *(__int128 **)a2;
  v24 = *((_QWORD *)a3 + 1);
  if ((v24 & 4) != 0)
    v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v25 = *(_QWORD *)a3;
  v26 = *(_OWORD *)(v25 + 16);
  v42 = *(_OWORD *)v25;
  v43 = v26;
  v27 = *(_QWORD *)(v25 + 32);
  v44 = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 - 16);
    if (*((_QWORD *)&v43 + 1))
      v28 = (unint64_t *)*((_QWORD *)&v43 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = sub_20C636CB4(a1, v23, (uint64_t)&v42, a4, v21);
  if ((_DWORD)v30)
    sub_20C1D2A70(a3, (uint64_t)&v42);
  sub_20BF5618C((uint64_t)&v42);
  return v30;
}

void sub_20C630DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C630E3C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  const std::type_info *v32;
  char *v33;
  pxrInternal__aapl__pxrReserved__::TfType *v34;
  uint64_t TypeName;
  const char *v36;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (!a3)
  {
    *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v42 + 1) = "_UntypedRemap";
    *(_QWORD *)&v43 = 179;
    *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    LOBYTE(v44) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20C1D2EA4(a3) & 1) == 0)
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 188;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
      LOBYTE(v44) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v40);
      v12 = v41;
      v13 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v40;
      else
        v16 = v13;
      if (v39 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v39 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v41 < 0)
        operator delete(v40[0]);
      return 0;
    }
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    sub_20C1D2EDC(a3, (uint64_t)&v42);
    sub_20BF5618C((uint64_t)&v42);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BFAB53C(a5))
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 199;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
      LOBYTE(v44) = 0;
      v31 = v40;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v40);
      if (v41 < 0)
        v31 = (void **)v40[0];
      v34 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFC0, v32, v33);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v34);
      if (*(char *)(TypeName + 23) >= 0)
        v36 = (const char *)TypeName;
      else
        v36 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v31, v36);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      v21 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                               + 168))(a5);
    else
      v21 = *(__int128 **)a5;
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)a2 + 1);
  if ((v22 & 4) != 0)
    v23 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v23 = *(__int128 **)a2;
  v24 = *((_QWORD *)a3 + 1);
  if ((v24 & 4) != 0)
    v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v25 = *(_QWORD *)a3;
  v26 = *(_OWORD *)(v25 + 16);
  v42 = *(_OWORD *)v25;
  v43 = v26;
  v27 = *(_QWORD *)(v25 + 32);
  v44 = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 - 16);
    if (*((_QWORD *)&v43 + 1))
      v28 = (unint64_t *)*((_QWORD *)&v43 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = sub_20C636F38(a1, v23, (uint64_t)&v42, a4, v21);
  if ((_DWORD)v30)
    sub_20C1D2EDC(a3, (uint64_t)&v42);
  sub_20BF5618C((uint64_t)&v42);
  return v30;
}

void sub_20C631114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C63117C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  const std::type_info *v32;
  char *v33;
  pxrInternal__aapl__pxrReserved__::TfType *v34;
  uint64_t TypeName;
  const char *v36;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (!a3)
  {
    *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v42 + 1) = "_UntypedRemap";
    *(_QWORD *)&v43 = 179;
    *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v44) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF5FDC8(a3) & 1) == 0)
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 188;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      LOBYTE(v44) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v40);
      v12 = v41;
      v13 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v40;
      else
        v16 = v13;
      if (v39 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v39 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v41 < 0)
        operator delete(v40[0]);
      return 0;
    }
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    sub_20BF5FE00(a3, (uint64_t)&v42);
    sub_20BF5618C((uint64_t)&v42);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BFADE60(a5))
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 199;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      LOBYTE(v44) = 0;
      v31 = v40;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v40);
      if (v41 < 0)
        v31 = (void **)v40[0];
      v34 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFE0, v32, v33);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v34);
      if (*(char *)(TypeName + 23) >= 0)
        v36 = (const char *)TypeName;
      else
        v36 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v31, v36);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      v21 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                               + 168))(a5);
    else
      v21 = *(__int128 **)a5;
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)a2 + 1);
  if ((v22 & 4) != 0)
    v23 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v23 = *(__int128 **)a2;
  v24 = *((_QWORD *)a3 + 1);
  if ((v24 & 4) != 0)
    v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v25 = *(_QWORD *)a3;
  v26 = *(_OWORD *)(v25 + 16);
  v42 = *(_OWORD *)v25;
  v43 = v26;
  v27 = *(_QWORD *)(v25 + 32);
  v44 = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 - 16);
    if (*((_QWORD *)&v43 + 1))
      v28 = (unint64_t *)*((_QWORD *)&v43 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = sub_20C62CB24(a1, v23, (uint64_t)&v42, a4, v21);
  if ((_DWORD)v30)
    sub_20BF5FE00(a3, (uint64_t)&v42);
  sub_20BF5618C((uint64_t)&v42);
  return v30;
}

void sub_20C631454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6314BC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuath]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF611B8(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuath]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20BF62138(a3, (uint64_t)&v41);
    sub_20BF5618C((uint64_t)&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20C1D33A8(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuath]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C030, v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  else
  {
    a5 = 0;
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v22 = *(__int128 **)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C637208(a1, v22, (uint64_t)&v41, a4, (char **)a5);
  if ((_DWORD)v29)
    sub_20BF62138(a3, (uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v41);
  return v29;
}

void sub_20C63178C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6317F4(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  __n128 *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  const std::type_info *v32;
  char *v33;
  pxrInternal__aapl__pxrReserved__::TfType *v34;
  uint64_t TypeName;
  const char *v36;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (!a3)
  {
    *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v42 + 1) = "_UntypedRemap";
    *(_QWORD *)&v43 = 179;
    *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
    LOBYTE(v44) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF61604(a3) & 1) == 0)
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 188;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
      LOBYTE(v44) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v40);
      v12 = v41;
      v13 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v40;
      else
        v16 = v13;
      if (v39 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v39 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v41 < 0)
        operator delete(v40[0]);
      return 0;
    }
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    sub_20BF6163C(a3, (uint64_t)&v42);
    sub_20BF5618C((uint64_t)&v42);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BFB08AC(a5))
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 199;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
      LOBYTE(v44) = 0;
      v31 = v40;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v40);
      if (v41 < 0)
        v31 = (void **)v40[0];
      v34 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C020, v32, v33);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v34);
      if (*(char *)(TypeName + 23) >= 0)
        v36 = (const char *)TypeName;
      else
        v36 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v31, v36);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      v21 = (__n128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a5);
    else
      v21 = *(__n128 **)a5;
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)a2 + 1);
  if ((v22 & 4) != 0)
    v23 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v23 = *(__int128 **)a2;
  v24 = *((_QWORD *)a3 + 1);
  if ((v24 & 4) != 0)
    v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v25 = *(_QWORD *)a3;
  v26 = *(_OWORD *)(v25 + 16);
  v42 = *(_OWORD *)v25;
  v43 = v26;
  v27 = *(_QWORD *)(v25 + 32);
  v44 = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 - 16);
    if (*((_QWORD *)&v43 + 1))
      v28 = (unint64_t *)*((_QWORD *)&v43 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = sub_20C637470(a1, v23, (uint64_t)&v42, a4, v21);
  if ((_DWORD)v30)
    sub_20BF6163C(a3, (uint64_t)&v42);
  sub_20BF5618C((uint64_t)&v42);
  return v30;
}

void sub_20C631ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C631B34(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  const std::type_info *v32;
  char *v33;
  pxrInternal__aapl__pxrReserved__::TfType *v34;
  uint64_t TypeName;
  const char *v36;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (!a3)
  {
    *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v42 + 1) = "_UntypedRemap";
    *(_QWORD *)&v43 = 179;
    *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
    LOBYTE(v44) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF62CAC(a3) & 1) == 0)
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 188;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
      LOBYTE(v44) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v40);
      v12 = v41;
      v13 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v40;
      else
        v16 = v13;
      if (v39 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v39 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v41 < 0)
        operator delete(v40[0]);
      return 0;
    }
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    sub_20BF62CE4(a3, (uint64_t)&v42);
    sub_20BF5618C((uint64_t)&v42);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BFAF48C(a5))
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 199;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
      LOBYTE(v44) = 0;
      v31 = v40;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v40);
      if (v41 < 0)
        v31 = (void **)v40[0];
      v34 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C010, v32, v33);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v34);
      if (*(char *)(TypeName + 23) >= 0)
        v36 = (const char *)TypeName;
      else
        v36 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v31, v36);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      v21 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                               + 168))(a5);
    else
      v21 = *(__int128 **)a5;
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)a2 + 1);
  if ((v22 & 4) != 0)
    v23 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v23 = *(__int128 **)a2;
  v24 = *((_QWORD *)a3 + 1);
  if ((v24 & 4) != 0)
    v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v25 = *(_QWORD *)a3;
  v26 = *(_OWORD *)(v25 + 16);
  v42 = *(_OWORD *)v25;
  v43 = v26;
  v27 = *(_QWORD *)(v25 + 32);
  v44 = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 - 16);
    if (*((_QWORD *)&v43 + 1))
      v28 = (unint64_t *)*((_QWORD *)&v43 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = sub_20C6376DC(a1, v23, (uint64_t)&v42, a4, v21);
  if ((_DWORD)v30)
    sub_20BF62CE4(a3, (uint64_t)&v42);
  sub_20BF5618C((uint64_t)&v42);
  return v30;
}

void sub_20C631E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C631E74(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2i]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20C1D3BE8(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2i]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20C1D3C20(a3, (uint64_t)&v41);
    sub_20BF5618C((uint64_t)&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20C1D3B24(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2i]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C140, v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  else
  {
    a5 = 0;
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v22 = *(__int128 **)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C63794C(a1, v22, (uint64_t)&v41, a4, (char **)a5);
  if ((_DWORD)v29)
    sub_20C1D3C20(a3, (uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v41);
  return v29;
}

void sub_20C632144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6321AC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2h]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF5865C(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2h]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20BF59594(a3, (uint64_t)&v41);
    sub_20BF5618C((uint64_t)&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20C1D3EC0(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2h]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C130, v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  else
  {
    a5 = 0;
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v22 = *(__int128 **)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C637BBC(a1, v22, (uint64_t)&v41, a4, (int *)a5);
  if ((_DWORD)v29)
    sub_20BF59594(a3, (uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v41);
  return v29;
}

void sub_20C63247C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6324E4(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF58AAC(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20BF58AE4(a3, (uint64_t)&v41);
    sub_20BF5618C((uint64_t)&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BF9F188(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C120, v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  else
  {
    a5 = 0;
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v22 = *(__int128 **)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C637E34(a1, v22, (uint64_t)&v41, a4, (char **)a5);
  if ((_DWORD)v29)
    sub_20BF58AE4(a3, (uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v41);
  return v29;
}

void sub_20C6327B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C63281C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  __n128 *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  const std::type_info *v32;
  char *v33;
  pxrInternal__aapl__pxrReserved__::TfType *v34;
  uint64_t TypeName;
  const char *v36;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (!a3)
  {
    *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v42 + 1) = "_UntypedRemap";
    *(_QWORD *)&v43 = 179;
    *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
    LOBYTE(v44) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF5A0F8(a3) & 1) == 0)
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 188;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
      LOBYTE(v44) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v40);
      v12 = v41;
      v13 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v40;
      else
        v16 = v13;
      if (v39 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v39 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v41 < 0)
        operator delete(v40[0]);
      return 0;
    }
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    sub_20BF5A130(a3, (uint64_t)&v42);
    sub_20BF5618C((uint64_t)&v42);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BF9D818(a5))
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 199;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
      LOBYTE(v44) = 0;
      v31 = v40;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v40);
      if (v41 < 0)
        v31 = (void **)v40[0];
      v34 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C110, v32, v33);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v34);
      if (*(char *)(TypeName + 23) >= 0)
        v36 = (const char *)TypeName;
      else
        v36 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v31, v36);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      v21 = (__n128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a5);
    else
      v21 = *(__n128 **)a5;
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)a2 + 1);
  if ((v22 & 4) != 0)
    v23 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v23 = *(__int128 **)a2;
  v24 = *((_QWORD *)a3 + 1);
  if ((v24 & 4) != 0)
    v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v25 = *(_QWORD *)a3;
  v26 = *(_OWORD *)(v25 + 16);
  v42 = *(_OWORD *)v25;
  v43 = v26;
  v27 = *(_QWORD *)(v25 + 32);
  v44 = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 - 16);
    if (*((_QWORD *)&v43 + 1))
      v28 = (unint64_t *)*((_QWORD *)&v43 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = sub_20C6380A4(a1, v23, (uint64_t)&v42, a4, v21);
  if ((_DWORD)v30)
    sub_20BF5A130(a3, (uint64_t)&v42);
  sub_20BF5618C((uint64_t)&v42);
  return v30;
}

void sub_20C632AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C632B5C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  const std::type_info *v32;
  char *v33;
  pxrInternal__aapl__pxrReserved__::TfType *v34;
  uint64_t TypeName;
  const char *v36;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (!a3)
  {
    *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v42 + 1) = "_UntypedRemap";
    *(_QWORD *)&v43 = 179;
    *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3i]";
    LOBYTE(v44) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20C1D45CC(a3) & 1) == 0)
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 188;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3i]";
      LOBYTE(v44) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v40);
      v12 = v41;
      v13 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v40;
      else
        v16 = v13;
      if (v39 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v39 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v41 < 0)
        operator delete(v40[0]);
      return 0;
    }
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    sub_20C1D4604(a3, (uint64_t)&v42);
    sub_20BF5618C((uint64_t)&v42);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20C1D440C(a5))
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 199;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3i]";
      LOBYTE(v44) = 0;
      v31 = v40;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v40);
      if (v41 < 0)
        v31 = (void **)v40[0];
      v34 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C180, v32, v33);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v34);
      if (*(char *)(TypeName + 23) >= 0)
        v36 = (const char *)TypeName;
      else
        v36 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v31, v36);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      v21 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    else
      v21 = *(_QWORD *)a5;
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)a2 + 1);
  if ((v22 & 4) != 0)
    v23 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v23 = *(__int128 **)a2;
  v24 = *((_QWORD *)a3 + 1);
  if ((v24 & 4) != 0)
    v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v25 = *(_QWORD *)a3;
  v26 = *(_OWORD *)(v25 + 16);
  v42 = *(_OWORD *)v25;
  v43 = v26;
  v27 = *(_QWORD *)(v25 + 32);
  v44 = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 - 16);
    if (*((_QWORD *)&v43 + 1))
      v28 = (unint64_t *)*((_QWORD *)&v43 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = sub_20C63831C(a1, v23, (uint64_t)&v42, a4, v21);
  if ((_DWORD)v30)
    sub_20C1D4604(a3, (uint64_t)&v42);
  sub_20BF5618C((uint64_t)&v42);
  return v30;
}

void sub_20C632E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C632E9C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3h]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF5AC4C(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3h]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20BF5BC34(a3, (uint64_t)&v41);
    sub_20BF5618C((uint64_t)&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20C1D48C0(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3h]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C170, v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  else
  {
    a5 = 0;
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v22 = *(__int128 **)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C6385C0(a1, v22, (uint64_t)&v41, a4, (uint64_t)a5);
  if ((_DWORD)v29)
    sub_20BF5BC34(a3, (uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v41);
  return v29;
}

void sub_20C63316C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6331D4(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  const std::type_info *v32;
  char *v33;
  pxrInternal__aapl__pxrReserved__::TfType *v34;
  uint64_t TypeName;
  const char *v36;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (!a3)
  {
    *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v42 + 1) = "_UntypedRemap";
    *(_QWORD *)&v43 = 179;
    *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
    LOBYTE(v44) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF5B118(a3) & 1) == 0)
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 188;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
      LOBYTE(v44) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v40);
      v12 = v41;
      v13 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v40;
      else
        v16 = v13;
      if (v39 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v39 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v41 < 0)
        operator delete(v40[0]);
      return 0;
    }
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    sub_20BF5B150(a3, (uint64_t)&v42);
    sub_20BF5618C((uint64_t)&v42);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BFA2E0C(a5))
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 199;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
      LOBYTE(v44) = 0;
      v31 = v40;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v40);
      if (v41 < 0)
        v31 = (void **)v40[0];
      v34 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C160, v32, v33);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v34);
      if (*(char *)(TypeName + 23) >= 0)
        v36 = (const char *)TypeName;
      else
        v36 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v31, v36);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      v21 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    else
      v21 = *(_QWORD *)a5;
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)a2 + 1);
  if ((v22 & 4) != 0)
    v23 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v23 = *(__int128 **)a2;
  v24 = *((_QWORD *)a3 + 1);
  if ((v24 & 4) != 0)
    v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v25 = *(_QWORD *)a3;
  v26 = *(_OWORD *)(v25 + 16);
  v42 = *(_OWORD *)v25;
  v43 = v26;
  v27 = *(_QWORD *)(v25 + 32);
  v44 = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 - 16);
    if (*((_QWORD *)&v43 + 1))
      v28 = (unint64_t *)*((_QWORD *)&v43 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = sub_20C638864(a1, v23, (uint64_t)&v42, a4, v21);
  if ((_DWORD)v30)
    sub_20BF5B150(a3, (uint64_t)&v42);
  sub_20BF5618C((uint64_t)&v42);
  return v30;
}

void sub_20C6334AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C633514(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  __n128 *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  const std::type_info *v32;
  char *v33;
  pxrInternal__aapl__pxrReserved__::TfType *v34;
  uint64_t TypeName;
  const char *v36;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (!a3)
  {
    *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v42 + 1) = "_UntypedRemap";
    *(_QWORD *)&v43 = 179;
    *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
    LOBYTE(v44) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF5C88C(a3) & 1) == 0)
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 188;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
      LOBYTE(v44) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v40);
      v12 = v41;
      v13 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v40;
      else
        v16 = v13;
      if (v39 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v39 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v41 < 0)
        operator delete(v40[0]);
      return 0;
    }
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    sub_20BF5C8C4(a3, (uint64_t)&v42);
    sub_20BF5618C((uint64_t)&v42);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BFA0FB4(a5))
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 199;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
      LOBYTE(v44) = 0;
      v31 = v40;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v40);
      if (v41 < 0)
        v31 = (void **)v40[0];
      v34 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C150, v32, v33);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v34);
      if (*(char *)(TypeName + 23) >= 0)
        v36 = (const char *)TypeName;
      else
        v36 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v31, v36);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      v21 = (__n128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a5);
    else
      v21 = *(__n128 **)a5;
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)a2 + 1);
  if ((v22 & 4) != 0)
    v23 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v23 = *(__int128 **)a2;
  v24 = *((_QWORD *)a3 + 1);
  if ((v24 & 4) != 0)
    v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v25 = *(_QWORD *)a3;
  v26 = *(_OWORD *)(v25 + 16);
  v42 = *(_OWORD *)v25;
  v43 = v26;
  v27 = *(_QWORD *)(v25 + 32);
  v44 = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 - 16);
    if (*((_QWORD *)&v43 + 1))
      v28 = (unint64_t *)*((_QWORD *)&v43 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = sub_20C638B08(a1, v23, (uint64_t)&v42, a4, v21);
  if ((_DWORD)v30)
    sub_20BF5C8C4(a3, (uint64_t)&v42);
  sub_20BF5618C((uint64_t)&v42);
  return v30;
}

void sub_20C6337EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C633854(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  __n128 *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  const std::type_info *v32;
  char *v33;
  pxrInternal__aapl__pxrReserved__::TfType *v34;
  uint64_t TypeName;
  const char *v36;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (!a3)
  {
    *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v42 + 1) = "_UntypedRemap";
    *(_QWORD *)&v43 = 179;
    *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4i]";
    LOBYTE(v44) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20C1D50E8(a3) & 1) == 0)
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 188;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4i]";
      LOBYTE(v44) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v40);
      v12 = v41;
      v13 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v40;
      else
        v16 = v13;
      if (v39 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v39 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v41 < 0)
        operator delete(v40[0]);
      return 0;
    }
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    sub_20C1D5120(a3, (uint64_t)&v42);
    sub_20BF5618C((uint64_t)&v42);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20C1D4F30(a5))
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 199;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4i]";
      LOBYTE(v44) = 0;
      v31 = v40;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v40);
      if (v41 < 0)
        v31 = (void **)v40[0];
      v34 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C51C1C0, v32, v33);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v34);
      if (*(char *)(TypeName + 23) >= 0)
        v36 = (const char *)TypeName;
      else
        v36 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v31, v36);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      v21 = (__n128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a5);
    else
      v21 = *(__n128 **)a5;
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)a2 + 1);
  if ((v22 & 4) != 0)
    v23 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v23 = *(__int128 **)a2;
  v24 = *((_QWORD *)a3 + 1);
  if ((v24 & 4) != 0)
    v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v25 = *(_QWORD *)a3;
  v26 = *(_OWORD *)(v25 + 16);
  v42 = *(_OWORD *)v25;
  v43 = v26;
  v27 = *(_QWORD *)(v25 + 32);
  v44 = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 - 16);
    if (*((_QWORD *)&v43 + 1))
      v28 = (unint64_t *)*((_QWORD *)&v43 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = sub_20C638DA8(a1, v23, (uint64_t)&v42, a4, v21);
  if ((_DWORD)v30)
    sub_20C1D5120(a3, (uint64_t)&v42);
  sub_20BF5618C((uint64_t)&v42);
  return v30;
}

void sub_20C633B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C633B94(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  const std::type_info *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::TfType *v33;
  uint64_t TypeName;
  const char *v35;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if (!a3)
  {
    *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v41 + 1) = "_UntypedRemap";
    *(_QWORD *)&v42 = 179;
    *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4h]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF5D2EC(a3) & 1) == 0)
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 188;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4h]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      v12 = v40;
      v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v39;
      else
        v16 = v13;
      if (v38 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v40 < 0)
        operator delete(v39[0]);
      return 0;
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_20BF5E264(a3, (uint64_t)&v41);
    sub_20BF5618C((uint64_t)&v41);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20C1D53BC(a5))
    {
      *(_QWORD *)&v41 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v41 + 1) = "_UntypedRemap";
      *(_QWORD *)&v42 = 199;
      *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4h]";
      LOBYTE(v43) = 0;
      v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0)
        v30 = (void **)v39[0];
      v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C1B0, v31, v32);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0)
        v35 = (const char *)TypeName;
      else
        v35 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
  }
  else
  {
    a5 = 0;
  }
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 4) != 0)
    v22 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v22 = *(__int128 **)a2;
  v23 = *((_QWORD *)a3 + 1);
  if ((v23 & 4) != 0)
    v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v24 = *(_QWORD *)a3;
  v25 = *(_OWORD *)(v24 + 16);
  v41 = *(_OWORD *)v24;
  v42 = v25;
  v26 = *(_QWORD *)(v24 + 32);
  v43 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 - 16);
    if (*((_QWORD *)&v42 + 1))
      v27 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_20C639020(a1, v22, (uint64_t)&v41, a4, (char **)a5);
  if ((_DWORD)v29)
    sub_20BF5E264(a3, (uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v41);
  return v29;
}

void sub_20C633E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C633ECC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  __n128 *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  const std::type_info *v32;
  char *v33;
  pxrInternal__aapl__pxrReserved__::TfType *v34;
  uint64_t TypeName;
  const char *v36;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (!a3)
  {
    *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v42 + 1) = "_UntypedRemap";
    *(_QWORD *)&v43 = 179;
    *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
    LOBYTE(v44) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF5D738(a3) & 1) == 0)
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 188;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
      LOBYTE(v44) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v40);
      v12 = v41;
      v13 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v40;
      else
        v16 = v13;
      if (v39 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v39 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v41 < 0)
        operator delete(v40[0]);
      return 0;
    }
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    sub_20BF5D770(a3, (uint64_t)&v42);
    sub_20BF5618C((uint64_t)&v42);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BFA6978(a5))
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 199;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
      LOBYTE(v44) = 0;
      v31 = v40;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v40);
      if (v41 < 0)
        v31 = (void **)v40[0];
      v34 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C1A0, v32, v33);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v34);
      if (*(char *)(TypeName + 23) >= 0)
        v36 = (const char *)TypeName;
      else
        v36 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v31, v36);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      v21 = (__n128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a5);
    else
      v21 = *(__n128 **)a5;
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)a2 + 1);
  if ((v22 & 4) != 0)
    v23 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v23 = *(__int128 **)a2;
  v24 = *((_QWORD *)a3 + 1);
  if ((v24 & 4) != 0)
    v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v25 = *(_QWORD *)a3;
  v26 = *(_OWORD *)(v25 + 16);
  v42 = *(_OWORD *)v25;
  v43 = v26;
  v27 = *(_QWORD *)(v25 + 32);
  v44 = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 - 16);
    if (*((_QWORD *)&v43 + 1))
      v28 = (unint64_t *)*((_QWORD *)&v43 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = sub_20C639290(a1, v23, (uint64_t)&v42, a4, v21);
  if ((_DWORD)v30)
    sub_20BF5D770(a3, (uint64_t)&v42);
  sub_20BF5618C((uint64_t)&v42);
  return v30;
}

void sub_20C6341A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C63420C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const std::type_info *v10;
  char *v11;
  int v12;
  void **v13;
  const std::type_info *v14;
  char *v15;
  void **v16;
  void **v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  const std::type_info *v32;
  char *v33;
  pxrInternal__aapl__pxrReserved__::TfType *v34;
  uint64_t TypeName;
  const char *v36;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (!a3)
  {
    *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
    *((_QWORD *)&v42 + 1) = "_UntypedRemap";
    *(_QWORD *)&v43 = 179;
    *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
    LOBYTE(v44) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((_QWORD *)a3 + 1))
  {
    if ((sub_20BF5EDE8(a3) & 1) == 0)
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 188;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
      LOBYTE(v44) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v40);
      v12 = v41;
      v13 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0)
        v16 = v40;
      else
        v16 = v13;
      if (v39 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v39 < 0)
        operator delete(__p[0]);
LABEL_36:
      if (v41 < 0)
        operator delete(v40[0]);
      return 0;
    }
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    sub_20BF5EE20(a3, (uint64_t)&v42);
    sub_20BF5618C((uint64_t)&v42);
  }
  if (*((_QWORD *)a5 + 1))
  {
    if (!sub_20BFA4BCC(a5))
    {
      *(_QWORD *)&v42 = "usdSkel/animMapper.cpp";
      *((_QWORD *)&v42 + 1) = "_UntypedRemap";
      *(_QWORD *)&v43 = 199;
      *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
      LOBYTE(v44) = 0;
      v31 = v40;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v40);
      if (v41 < 0)
        v31 = (void **)v40[0];
      v34 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C190, v32, v33);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v34);
      if (*(char *)(TypeName + 23) >= 0)
        v36 = (const char *)TypeName;
      else
        v36 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v31, v36);
      goto LABEL_36;
    }
    v20 = *((_QWORD *)a5 + 1);
    if ((v20 & 4) != 0)
      v21 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                               + 168))(a5);
    else
      v21 = *(__int128 **)a5;
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)a2 + 1);
  if ((v22 & 4) != 0)
    v23 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
  else
    v23 = *(__int128 **)a2;
  v24 = *((_QWORD *)a3 + 1);
  if ((v24 & 4) != 0)
    v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  else
    v25 = *(_QWORD *)a3;
  v26 = *(_OWORD *)(v25 + 16);
  v42 = *(_OWORD *)v25;
  v43 = v26;
  v27 = *(_QWORD *)(v25 + 32);
  v44 = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 - 16);
    if (*((_QWORD *)&v43 + 1))
      v28 = (unint64_t *)*((_QWORD *)&v43 + 1);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = sub_20C639508(a1, v23, (uint64_t)&v42, a4, v21);
  if ((_DWORD)v30)
    sub_20BF5EE20(a3, (uint64_t)&v42);
  sub_20BF5618C((uint64_t)&v42);
  return v30;
}

void sub_20C6344E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56))
  {
    return pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==(a1 + 16, a2 + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_20C634590(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v13;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  size_t v26;
  const void *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if (!a3)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 204;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 209;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C27ED6C(a3, (__int128 *)a2);
  }
  else
  {
    if (a5)
      v13 = *a5 != 0;
    else
      v13 = 0;
    LOBYTE(v28) = v13;
    sub_20C634788((unint64_t *)a3, v11, &v28);
    v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v9 - a1[1]) * v10;
        v27 = *(const void **)(a2 + 32);
        sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + a1[1] * v10), v27, v26);
      }
      else
      {
        v18 = *(_QWORD *)(a2 + 32);
        sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v19 = *(_QWORD *)a2 / v10;
        else
          v19 = a1[2];
        if (v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(a3 + 32);
          v22 = (unsigned int *)a1[6];
          do
          {
            v24 = *v22++;
            v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(_QWORD *)a3 > v23 && v5 != 0)
              memmove((void *)(v21 + (int)(v23 * v5)), (const void *)(v18 + v20), v5);
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_20C634788(unint64_t *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _BYTE *v10;
  char v11;
  char *v12;

  v6 = *a1;
  v11 = 0;
  v12 = &v11;
  sub_20C001780(a1, a2, &v12);
  sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = (_BYTE *)(a1[4] + v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_20C6347FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v13;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  size_t v26;
  const void *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if (!a3)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 204;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 209;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C27F154(a3, (__int128 *)a2);
  }
  else
  {
    if (a5)
      v13 = *a5;
    else
      v13 = 0;
    LOBYTE(v28) = v13;
    sub_20C6349EC((unint64_t *)a3, v11, &v28);
    v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v9 - a1[1]) * v10;
        v27 = *(const void **)(a2 + 32);
        sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + a1[1] * v10), v27, v26);
      }
      else
      {
        v18 = *(_QWORD *)(a2 + 32);
        sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v19 = *(_QWORD *)a2 / v10;
        else
          v19 = a1[2];
        if (v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(a3 + 32);
          v22 = (unsigned int *)a1[6];
          do
          {
            v24 = *v22++;
            v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(_QWORD *)a3 > v23 && v5 != 0)
              memmove((void *)(v21 + (int)(v23 * v5)), (const void *)(v18 + v20), v5);
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_20C6349EC(unint64_t *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _BYTE *v10;
  char v11;
  char *v12;

  v6 = *a1;
  v11 = 0;
  v12 = &v11;
  sub_20BF65720(a1, a2, &v12);
  sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = (_BYTE *)(a1[4] + v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_20C634A60(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, int *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v13;
  uint64_t v15;
  char *v16;
  int v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v26;
  const void *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if (!a3)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 204;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<int>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 209;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<int>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C03150C(a3, a2);
  }
  else
  {
    if (a5)
      v13 = *a5;
    else
      v13 = 0;
    LODWORD(v28) = v13;
    sub_20C634C64((unint64_t *)a3, v11, &v28);
    v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v9 - a1[1]) * v10;
        v27 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 4 * a1[1] * v10), v27, 4 * v26);
      }
      else
      {
        v18 = (char *)*((_QWORD *)a2 + 4);
        sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v19 = *(_QWORD *)a2 / v10;
        else
          v19 = a1[2];
        if (v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(a3 + 32);
          v22 = (unsigned int *)a1[6];
          do
          {
            v24 = *v22++;
            v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(_QWORD *)a3 > v23 && v5 != 0)
              memmove((void *)(v21 + 4 * (int)(v23 * v5)), v18, 4 * v10);
            v20 += v5;
            v18 += 4 * v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_20C634C64(unint64_t *a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _DWORD *v10;
  int v11;
  int *v12;

  v6 = *a1;
  v11 = 0;
  v12 = &v11;
  sub_20BF64D74(a1, a2, &v12);
  sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = (_DWORD *)(a1[4] + 4 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_20C634CD8(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, int *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v13;
  uint64_t v15;
  char *v16;
  int v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v26;
  const void *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if (!a3)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 204;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 209;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C032F5C(a3, a2);
  }
  else
  {
    if (a5)
      v13 = *a5;
    else
      v13 = 0;
    LODWORD(v28) = v13;
    sub_20C634EDC((unint64_t *)a3, v11, &v28);
    v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v9 - a1[1]) * v10;
        v27 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 4 * a1[1] * v10), v27, 4 * v26);
      }
      else
      {
        v18 = (char *)*((_QWORD *)a2 + 4);
        sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v19 = *(_QWORD *)a2 / v10;
        else
          v19 = a1[2];
        if (v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(a3 + 32);
          v22 = (unsigned int *)a1[6];
          do
          {
            v24 = *v22++;
            v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(_QWORD *)a3 > v23 && v5 != 0)
              memmove((void *)(v21 + 4 * (int)(v23 * v5)), v18, 4 * v10);
            v20 += v5;
            v18 += 4 * v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_20C634EDC(unint64_t *a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _DWORD *v10;
  int v11;
  int *v12;

  v6 = *a1;
  v11 = 0;
  v12 = &v11;
  sub_20BF64220(a1, a2, &v12);
  sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = (_DWORD *)(a1[4] + 4 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_20C634F50(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, char **a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v26;
  const void *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if (!a3)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 204;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<long long>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 209;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<long long>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C03234C(a3, a2);
  }
  else
  {
    if (a5)
      v13 = *a5;
    else
      v13 = 0;
    v28 = v13;
    sub_20C635150((unint64_t *)a3, v11, &v28);
    v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v9 - a1[1]) * v10;
        v27 = (const void *)*((_QWORD *)a2 + 4);
        sub_20C0046D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 8 * a1[1] * v10), v27, 8 * v26);
      }
      else
      {
        v18 = *((_QWORD *)a2 + 4);
        sub_20C0046D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v19 = *(_QWORD *)a2 / v10;
        else
          v19 = a1[2];
        if (v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(a3 + 32);
          v22 = (unsigned int *)a1[6];
          do
          {
            v24 = *v22++;
            v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(_QWORD *)a3 > v23 && v5 != 0)
              memmove((void *)(v21 + 8 * (int)(v23 * v5)), (const void *)(v18 + 8 * v20), 8 * v5);
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_20C635150(unint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;

  v6 = *a1;
  v11 = 0;
  v12 = &v11;
  sub_20C004484(a1, a2, &v12);
  sub_20C0046D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = (_QWORD *)(a1[4] + 8 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_20C6351C0(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, char **a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v26;
  const void *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if (!a3)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 204;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 209;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C033B2C(a3, a2);
  }
  else
  {
    if (a5)
      v13 = *a5;
    else
      v13 = 0;
    v28 = v13;
    sub_20C6353C0((unint64_t *)a3, v11, &v28);
    v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v9 - a1[1]) * v10;
        v27 = (const void *)*((_QWORD *)a2 + 4);
        sub_20C00562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 8 * a1[1] * v10), v27, 8 * v26);
      }
      else
      {
        v18 = *((_QWORD *)a2 + 4);
        sub_20C00562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v19 = *(_QWORD *)a2 / v10;
        else
          v19 = a1[2];
        if (v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(a3 + 32);
          v22 = (unsigned int *)a1[6];
          do
          {
            v24 = *v22++;
            v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(_QWORD *)a3 > v23 && v5 != 0)
              memmove((void *)(v21 + 8 * (int)(v23 * v5)), (const void *)(v18 + 8 * v20), 8 * v5);
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_20C6353C0(unint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;

  v6 = *a1;
  v11 = 0;
  v12 = &v11;
  sub_20C0053DC(a1, a2, &v12);
  sub_20C00562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = (_QWORD *)(a1[4] + 8 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_20C635430(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, __int16 *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int16 v13;
  uint64_t v15;
  char *v16;
  int v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v26;
  const void *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if (!a3)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 204;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::pxr_half::half>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 209;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::pxr_half::half>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C2801F8(a3, a2);
  }
  else
  {
    if (a5)
      v13 = *a5;
    else
      v13 = 0;
    LOWORD(v28) = v13;
    sub_20C635634((unint64_t *)a3, v11, &v28);
    v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v9 - a1[1]) * v10;
        v27 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 2 * a1[1] * v10), v27, 2 * v26);
      }
      else
      {
        v18 = (char *)*((_QWORD *)a2 + 4);
        sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v19 = *(_QWORD *)a2 / v10;
        else
          v19 = a1[2];
        if (v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(a3 + 32);
          v22 = (unsigned int *)a1[6];
          do
          {
            v24 = *v22++;
            v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(_QWORD *)a3 > v23 && v5 != 0)
              memmove((void *)(v21 + 2 * (int)(v23 * v5)), v18, 2 * v10);
            v20 += v5;
            v18 += 2 * v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_20C635634(unint64_t *a1, unint64_t a2, _WORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _WORD *v10;
  __int16 v11;
  __int16 *v12;

  v6 = *a1;
  v11 = 0;
  v12 = &v11;
  sub_20BF56DE0(a1, a2, &v12);
  sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = (_WORD *)(a1[4] + 2 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_20C6356A8(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, int *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v13;
  uint64_t v15;
  char *v16;
  int v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v26;
  const void *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if (!a3)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 204;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 209;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20BF9B1F8(a3, a2);
  }
  else
  {
    if (a5)
      v13 = *a5;
    else
      v13 = 0;
    LODWORD(v28) = v13;
    sub_20C6358AC((unint64_t *)a3, v11, (float *)&v28);
    v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v9 - a1[1]) * v10;
        v27 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 4 * a1[1] * v10), v27, 4 * v26);
      }
      else
      {
        v18 = (char *)*((_QWORD *)a2 + 4);
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v19 = *(_QWORD *)a2 / v10;
        else
          v19 = a1[2];
        if (v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(a3 + 32);
          v22 = (unsigned int *)a1[6];
          do
          {
            v24 = *v22++;
            v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(_QWORD *)a3 > v23 && v5 != 0)
              memmove((void *)(v21 + 4 * (int)(v23 * v5)), v18, 4 * v10);
            v20 += v5;
            v18 += 4 * v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

float sub_20C6358AC(unint64_t *a1, unint64_t a2, float *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  float result;
  unint64_t v10;
  _DWORD *v11;
  int v12;
  int *v13;

  v6 = *a1;
  v12 = 0;
  v13 = &v12;
  sub_20BF56258(a1, a2, &v13);
  sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v10 = a2 - v6;
  if (a2 > v6)
  {
    v11 = (_DWORD *)(a1[4] + 4 * v6);
    do
    {
      result = *a3;
      *v11++ = *(_DWORD *)a3;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_20C635920(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, char **a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v26;
  const void *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if (!a3)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 204;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 209;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20BF985B0(a3, a2);
  }
  else
  {
    if (a5)
      v13 = *a5;
    else
      v13 = 0;
    v28 = v13;
    sub_20C635B20((unint64_t *)a3, v11, (double *)&v28);
    v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v9 - a1[1]) * v10;
        v27 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 8 * a1[1] * v10), v27, 8 * v26);
      }
      else
      {
        v18 = *((_QWORD *)a2 + 4);
        sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v19 = *(_QWORD *)a2 / v10;
        else
          v19 = a1[2];
        if (v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(a3 + 32);
          v22 = (unsigned int *)a1[6];
          do
          {
            v24 = *v22++;
            v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(_QWORD *)a3 > v23 && v5 != 0)
              memmove((void *)(v21 + 8 * (int)(v23 * v5)), (const void *)(v18 + 8 * v20), 8 * v5);
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

double sub_20C635B20(unint64_t *a1, unint64_t a2, double *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  double result;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;

  v6 = *a1;
  v12 = 0;
  v13 = &v12;
  sub_20BF57894(a1, a2, &v13);
  sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v10 = a2 - v6;
  if (a2 > v6)
  {
    v11 = (_QWORD *)(a1[4] + 8 * v6);
    do
    {
      result = *a3;
      *v11++ = *(_QWORD *)a3;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_20C635B90(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, char **a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v26;
  const void *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if (!a3)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 204;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::SdfTimeCode>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 209;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::SdfTimeCode>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C280A40(a3, a2);
  }
  else
  {
    if (a5)
      v13 = *a5;
    else
      v13 = 0;
    v28 = v13;
    sub_20C635D90((unint64_t *)a3, v11, &v28);
    v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v9 - a1[1]) * v10;
        v27 = (const void *)*((_QWORD *)a2 + 4);
        sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 8 * a1[1] * v10), v27, 8 * v26);
      }
      else
      {
        v18 = *((_QWORD *)a2 + 4);
        sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v19 = *(_QWORD *)a2 / v10;
        else
          v19 = a1[2];
        if (v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(a3 + 32);
          v22 = (unsigned int *)a1[6];
          do
          {
            v24 = *v22++;
            v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(_QWORD *)a3 > v23 && v5 != 0)
              memmove((void *)(v21 + 8 * (int)(v23 * v5)), (const void *)(v18 + 8 * v20), 8 * v5);
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_20C635D90(unint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;

  v6 = *a1;
  v11 = 0;
  v12 = &v11;
  sub_20C0075EC(a1, a2, &v12);
  sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = (_QWORD *)(a1[4] + 8 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_20C635E00(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;
  char *v15;
  int v16;
  std::string *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  std::string *v25;
  std::string *v26;
  std::string __p;
  const char *v28;
  char v29;

  if (!a3)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdSkel/animMapper.h";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"Remap";
    __p.__r_.__value_.__r.__words[2] = 204;
    v28 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<std::string>]";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdSkel/animMapper.h";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"Remap";
    __p.__r_.__value_.__r.__words[2] = 209;
    v28 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<std::string>]";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C0346C4(a3, a2);
  }
  else
  {
    if (a5)
    {
      if (*(char *)(a5 + 23) < 0)
        sub_20BDDBFAC(&__p, *(void **)a5, *(_QWORD *)(a5 + 8));
      else
        __p = *(std::string *)a5;
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
    }
    sub_20C636050((unint64_t *)a3, v11, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        v24 = *(_QWORD *)a2;
        if ((v9 - a1[1]) * (unint64_t)v5 < *(_QWORD *)a2)
          v24 = (v9 - a1[1]) * v10;
        v25 = (std::string *)*((_QWORD *)a2 + 4);
        v26 = &v25[v24];
        sub_20C008768((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        sub_20BE75A80(v25, v26, (std::string *)(*(_QWORD *)(a3 + 32) + 24 * a1[1] * v10));
      }
      else
      {
        v17 = (std::string *)*((_QWORD *)a2 + 4);
        sub_20C008768((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v18 = *(_QWORD *)a2 / v10;
        else
          v18 = a1[2];
        if (v18)
        {
          v19 = *(_QWORD *)(a3 + 32);
          v20 = (unsigned int *)a1[6];
          v21 = v5;
          do
          {
            v23 = *v20++;
            v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(_QWORD *)a3 > v22)
              sub_20BE75A80(v17, &v17[v21], (std::string *)(v19 + 24 * (int)(v22 * v5)));
            v17 = (std::string *)((char *)v17 + v21 * 24);
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

void sub_20C636034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C636050(unint64_t *a1, unint64_t a2, const std::string *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  BOOL v9;
  unint64_t v10;
  std::string *v11;

  v6 = *a1;
  sub_20C2E6350(a1, a2);
  sub_20C008768((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 > v6;
  v10 = a2 - v6;
  if (v9)
  {
    v11 = (std::string *)(a1[4] + 24 * v6);
    do
    {
      std::string::operator=(v11++, a3);
      --v10;
    }
    while (v10);
  }
}

uint64_t sub_20C6360B8(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, char **a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v17;
  char *v18;
  unsigned int *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  char v41;

  if (!a3)
  {
    v37 = "usdSkel/animMapper.h";
    v38 = "Remap";
    v39 = 204;
    v40 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::TfToken>]";
    v41 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v37, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v37 = "usdSkel/animMapper.h";
    v38 = "Remap";
    v39 = 209;
    v40 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::TfToken>]";
    v41 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v37, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C034C28(a3, a2);
  }
  else
  {
    if (a5)
    {
      v13 = *a5;
      v37 = v13;
      if ((v13 & 7) != 0)
      {
        v14 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 2, v14));
        if ((v15 & 1) == 0)
          v37 = (char *)v14;
      }
    }
    else
    {
      v37 = 0;
    }
    sub_20C636364((uint64_t *)a3, v11, &v37);
    if ((v37 & 7) != 0)
    {
      v19 = (unsigned int *)((unint64_t)v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
    v21 = *((_DWORD *)a1 + 14);
    if ((v21 & 3) != 0)
    {
      if ((v21 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v31 = *(_QWORD *)a2;
        else
          v31 = (v9 - a1[1]) * v10;
        v32 = (_QWORD *)*((_QWORD *)a2 + 4);
        sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v17, v18);
        if (v31)
        {
          v33 = (_QWORD *)(*(_QWORD *)(a3 + 32) + 8 * a1[1] * v10);
          v34 = 8 * v31;
          do
          {
            sub_20BF32220(v33++, v32++);
            v34 -= 8;
          }
          while (v34);
        }
      }
      else
      {
        v36 = *((_QWORD *)a2 + 4);
        sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v17, v18);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v22 = *(_QWORD *)a2 / v10;
        else
          v22 = a1[2];
        if (v22)
        {
          v23 = 0;
          v35 = *(_QWORD *)(a3 + 32);
          v24 = a1[6];
          do
          {
            v25 = *(unsigned int *)(v24 + 4 * v23);
            if ((v25 & 0x80000000) == 0)
            {
              v26 = v23 * v5;
              if (*(_QWORD *)a3 > v25 && v26 != v5 + v23 * v5)
              {
                v28 = (_QWORD *)(v35 + 8 * (int)(v25 * v5));
                v29 = (_QWORD *)(v36 + 8 * v26);
                v30 = 8 * v5;
                do
                {
                  sub_20BF32220(v28++, v29++);
                  v30 -= 8;
                }
                while (v30);
              }
            }
            ++v23;
          }
          while (v23 != v22);
        }
      }
    }
  }
  return 1;
}

void sub_20C636364(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  BOOL v9;
  unint64_t v10;
  _QWORD *v11;

  v6 = *a1;
  sub_20C2E88F4(a1, a2);
  sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 > v6;
  v10 = a2 - v6;
  if (v9)
  {
    v11 = (_QWORD *)(a1[4] + 8 * v6);
    do
    {
      sub_20BF32220(v11++, a3);
      --v10;
    }
    while (v10);
  }
}

uint64_t sub_20C6363C8(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v15;
  char *v16;
  int v17;
  std::string *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  std::string *v26;
  std::string *v27;
  std::string __dst;
  __int128 __p;
  uint64_t v30;

  if (!a3)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdSkel/animMapper.h";
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"Remap";
    __dst.__r_.__value_.__r.__words[2] = 204;
    *(_QWORD *)&__p = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, in"
                      "t, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::Vt"
                      "Array<pxrInternal__aapl__pxrReserved__::SdfAssetPath>]";
    BYTE8(__p) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdSkel/animMapper.h";
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"Remap";
    __dst.__r_.__value_.__r.__words[2] = 209;
    *(_QWORD *)&__p = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, in"
                      "t, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::Vt"
                      "Array<pxrInternal__aapl__pxrReserved__::SdfAssetPath>]";
    BYTE8(__p) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__dst, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C28130C(a3, a2);
  }
  else
  {
    if (a5)
    {
      if (*(char *)(a5 + 23) < 0)
        sub_20BDDBFAC(&__dst, *(void **)a5, *(_QWORD *)(a5 + 8));
      else
        __dst = *(std::string *)a5;
      if (*(char *)(a5 + 47) < 0)
      {
        sub_20BDDBFAC(&__p, *(void **)(a5 + 24), *(_QWORD *)(a5 + 32));
      }
      else
      {
        __p = *(_OWORD *)(a5 + 24);
        v30 = *(_QWORD *)(a5 + 40);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&__dst);
    }
    sub_20C636674((unint64_t *)a3, v11, &__dst);
    if (SHIBYTE(v30) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        v25 = *(_QWORD *)a2;
        if ((v9 - a1[1]) * (unint64_t)v5 < *(_QWORD *)a2)
          v25 = (v9 - a1[1]) * v10;
        v26 = (std::string *)*((_QWORD *)a2 + 4);
        v27 = &v26[2 * v25];
        sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        sub_20C33DC6C((int)&__dst, v26, v27, (std::string *)(*(_QWORD *)(a3 + 32) + 48 * a1[1] * v10));
      }
      else
      {
        v18 = (std::string *)*((_QWORD *)a2 + 4);
        sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v19 = *(_QWORD *)a2 / v10;
        else
          v19 = a1[2];
        if (v19)
        {
          v20 = *(_QWORD *)(a3 + 32);
          v21 = (unsigned int *)a1[6];
          v22 = 2 * v5;
          do
          {
            v24 = *v21++;
            v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(_QWORD *)a3 > v23)
              sub_20C33DC6C((int)&__dst, v18, &v18[v22], (std::string *)(v20 + 48 * (int)(v23 * v5)));
            v18 = (std::string *)((char *)v18 + v22 * 24);
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_20C636648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C636674(unint64_t *a1, unint64_t a2, const std::string *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  std::string *v10;

  v6 = *a1;
  sub_20C2EAA54(a1, a2);
  sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = (std::string *)(a1[4] + 48 * v6);
    do
    {
      std::string::operator=(v10, a3);
      std::string::operator=(v10 + 1, a3 + 1);
      v10 += 2;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_20C6366F4(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v26;
  const void *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;
  char v33;

  if (!a3)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 204;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::SdfOpaqueValue>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v4 = a4;
  if ((int)a4 <= 0)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 209;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::SdfOpaqueValue>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v8 = *a1;
  v9 = a4;
  v10 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v10)
  {
    sub_20C2816D0(a3, a2);
  }
  else
  {
    v28 = &v33;
    sub_20C00B4C8((unint64_t *)a3, v10);
    sub_20C00B604((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v12, v13);
    v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v8 - a1[1]) * (unint64_t)v4 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v8 - a1[1]) * v9;
        v27 = (const void *)*((_QWORD *)a2 + 4);
        sub_20C00B604((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + a1[1] * v9), v27, v26 - 1);
      }
      else
      {
        v17 = *((_QWORD *)a2 + 4);
        sub_20C00B604((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v4)
          v18 = *(_QWORD *)a2 / v9;
        else
          v18 = a1[2];
        if (v18)
        {
          v19 = 0;
          v20 = *(_QWORD *)(a3 + 32);
          v21 = (unsigned int *)a1[6];
          do
          {
            v23 = *v21++;
            v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(_QWORD *)a3 > v22 && v4 != 0)
              memmove((void *)(v20 + (int)(v22 * v4)), (const void *)(v17 + v19), v4 - 1);
            v19 += v4;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

uint64_t sub_20C6368EC(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;
  char *v15;
  int v16;
  const std::string *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  const std::string *v25;
  const std::string *v26;
  void *v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void *__p[2];
  __int128 v32;
  void **v33;

  if (!a3)
  {
    v27[0] = "usdSkel/animMapper.h";
    v27[1] = "Remap";
    *(_QWORD *)&v28 = 204;
    *((_QWORD *)&v28 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>]";
    LOBYTE(v29) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v27[0] = "usdSkel/animMapper.h";
    v27[1] = "Remap";
    *(_QWORD *)&v28 = 209;
    *((_QWORD *)&v28 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>]";
    LOBYTE(v29) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C281C04(a3, a2);
  }
  else
  {
    if (a5)
    {
      sub_20C00D1F0(v27, a5);
    }
    else
    {
      *(_OWORD *)__p = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      *(_OWORD *)v27 = 0u;
      v28 = 0u;
    }
    sub_20C636B5C((unint64_t *)a3, v11, (const std::string *)v27);
    if (SHIBYTE(v32) < 0)
      operator delete(__p[1]);
    v33 = (void **)&v30;
    sub_20C00E25C(&v33);
    v33 = (void **)&v28 + 1;
    sub_20C00D5A8(&v33);
    if (v27[0])
    {
      v27[1] = v27[0];
      operator delete(v27[0]);
    }
    v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        v24 = *(_QWORD *)a2;
        if ((v9 - a1[1]) * (unint64_t)v5 < *(_QWORD *)a2)
          v24 = (v9 - a1[1]) * v10;
        v25 = (const std::string *)*((_QWORD *)a2 + 4);
        v26 = &v25[4 * v24];
        sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        sub_20C636C14((int)v27, v25, v26, (std::string *)(*(_QWORD *)(a3 + 32) + 96 * a1[1] * v10));
      }
      else
      {
        v17 = (const std::string *)*((_QWORD *)a2 + 4);
        sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v18 = *(_QWORD *)a2 / v10;
        else
          v18 = a1[2];
        if (v18)
        {
          v19 = *(_QWORD *)(a3 + 32);
          v20 = (unsigned int *)a1[6];
          v21 = 4 * v5;
          do
          {
            v23 = *v20++;
            v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(_QWORD *)a3 > v22)
              sub_20C636C14((int)v27, v17, &v17[v21], (std::string *)(v19 + 96 * (int)(v22 * v5)));
            v17 = (const std::string *)((char *)v17 + v21 * 24);
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

void sub_20C636B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C00BBB0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C636B5C(unint64_t *a1, unint64_t a2, const std::string *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  std::string *v10;

  v6 = *a1;
  sub_20C338B4C(a1, a2);
  sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = (std::string *)(a1[4] + 96 * v6);
    do
    {
      if (v10 != a3)
      {
        sub_20BE8B37C((char *)v10, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_, (uint64_t)(a3->__r_.__value_.__l.__size_ - a3->__r_.__value_.__r.__words[0]) >> 2);
        sub_20C147074((uint64_t)&v10[1], (uint64_t)a3[1].__r_.__value_.__l.__data_, a3[1].__r_.__value_.__l.__size_, (uint64_t)(a3[1].__r_.__value_.__l.__size_ - a3[1].__r_.__value_.__r.__words[0]) >> 5);
        sub_20C14723C((uint64_t)&v10[2], (uint64_t)a3[2].__r_.__value_.__l.__data_, a3[2].__r_.__value_.__l.__size_, (uint64_t)(a3[2].__r_.__value_.__l.__size_ - a3[2].__r_.__value_.__r.__words[0]) >> 6);
      }
      std::string::operator=(v10 + 3, a3 + 3);
      v10 += 4;
      --v9;
    }
    while (v9);
  }
}

const std::string *sub_20C636C14(int a1, const std::string *a2, const std::string *a3, std::string *a4)
{
  const std::string *v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4)
      {
        sub_20BE8B37C((char *)a4, v5->__r_.__value_.__l.__data_, v5->__r_.__value_.__l.__size_, (uint64_t)(v5->__r_.__value_.__l.__size_ - v5->__r_.__value_.__r.__words[0]) >> 2);
        sub_20C147074((uint64_t)&a4[1], (uint64_t)v5[1].__r_.__value_.__l.__data_, v5[1].__r_.__value_.__l.__size_, (uint64_t)(v5[1].__r_.__value_.__l.__size_ - v5[1].__r_.__value_.__r.__words[0]) >> 5);
        sub_20C14723C((uint64_t)&a4[2], (uint64_t)v5[2].__r_.__value_.__l.__data_, v5[2].__r_.__value_.__l.__size_, (uint64_t)(v5[2].__r_.__value_.__l.__size_ - v5[2].__r_.__value_.__r.__words[0]) >> 6);
      }
      std::string::operator=(a4 + 3, v5 + 3);
      v5 += 4;
      a4 += 4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_20C636CB4(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  uint64_t v15;
  char *v16;
  int v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v26;
  const void *v27;
  __int128 v28;
  __int128 v29;
  char v30;

  if (!a3)
  {
    *(_QWORD *)&v28 = "usdSkel/animMapper.h";
    *((_QWORD *)&v28 + 1) = "Remap";
    *(_QWORD *)&v29 = 204;
    *((_QWORD *)&v29 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    *(_QWORD *)&v28 = "usdSkel/animMapper.h";
    *((_QWORD *)&v28 + 1) = "Remap";
    *(_QWORD *)&v29 = 209;
    *((_QWORD *)&v29 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C281F9C(a3, a2);
  }
  else
  {
    if (a5)
    {
      v13 = a5[1];
      v28 = *a5;
      v29 = v13;
    }
    else
    {
      v28 = 0u;
      v29 = 0u;
    }
    sub_20C636EC0((unint64_t *)a3, v11, (uint64_t)&v28);
    v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v9 - a1[1]) * v10;
        v27 = (const void *)*((_QWORD *)a2 + 4);
        sub_20C0167DC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 32 * a1[1] * v10), v27, 32 * v26);
      }
      else
      {
        v18 = (char *)*((_QWORD *)a2 + 4);
        sub_20C0167DC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v19 = *(_QWORD *)a2 / v10;
        else
          v19 = a1[2];
        if (v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(a3 + 32);
          v22 = (unsigned int *)a1[6];
          do
          {
            v24 = *v22++;
            v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(_QWORD *)a3 > v23 && v5 != 0)
              memmove((void *)(v21 + 32 * (int)(v23 * v5)), v18, 32 * v10);
            v20 += v5;
            v18 += 32 * v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

__n128 sub_20C636EC0(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 result;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  _OWORD v13[2];
  _OWORD *v14;

  v6 = *a1;
  memset(v13, 0, sizeof(v13));
  v14 = v13;
  sub_20C01657C(a1, a2, &v14);
  sub_20C0167DC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v10 = a2 - v6;
  if (a2 > v6)
  {
    v11 = (_OWORD *)(a1[4] + 32 * v6);
    do
    {
      result = *(__n128 *)a3;
      v12 = *(_OWORD *)(a3 + 16);
      *v11 = *(_OWORD *)a3;
      v11[1] = v12;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_20C636F38(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  char *v17;
  int v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v27;
  const void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  if (!a3)
  {
    *(_QWORD *)&v29 = "usdSkel/animMapper.h";
    *((_QWORD *)&v29 + 1) = "Remap";
    *(_QWORD *)&v30 = 204;
    *((_QWORD *)&v30 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>]";
    LOBYTE(v31) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    *(_QWORD *)&v29 = "usdSkel/animMapper.h";
    *((_QWORD *)&v29 + 1) = "Remap";
    *(_QWORD *)&v30 = 209;
    *((_QWORD *)&v30 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>]";
    LOBYTE(v31) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v29, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C282374(a3, a2);
  }
  else
  {
    if (a5)
    {
      v13 = a5[3];
      v31 = a5[2];
      v32 = v13;
      v33 = *((_QWORD *)a5 + 8);
      v14 = a5[1];
      v29 = *a5;
      v30 = v14;
    }
    else
    {
      v33 = 0;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
    }
    sub_20C637168((unint64_t *)a3, v11, (uint64_t)&v29);
    v18 = *((_DWORD *)a1 + 14);
    if ((v18 & 3) != 0)
    {
      if ((v18 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v27 = *(_QWORD *)a2;
        else
          v27 = (v9 - a1[1]) * v10;
        v28 = (const void *)*((_QWORD *)a2 + 4);
        sub_20C01764C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v16, v17);
        if (v27)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 72 * a1[1] * v10), v28, 72 * v27);
      }
      else
      {
        v19 = (char *)*((_QWORD *)a2 + 4);
        sub_20C01764C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v16, v17);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v20 = *(_QWORD *)a2 / v10;
        else
          v20 = a1[2];
        if (v20)
        {
          v21 = 0;
          v22 = *(_QWORD *)(a3 + 32);
          v23 = (unsigned int *)a1[6];
          do
          {
            v25 = *v23++;
            v24 = v25;
            if ((v25 & 0x80000000) == 0 && *(_QWORD *)a3 > v24 && v5 != 0)
              memmove((void *)(v22 + 72 * (int)(v24 * v5)), v19, 72 * v10);
            v21 += v5;
            v19 += 72 * v5;
            --v20;
          }
          while (v20);
        }
      }
    }
  }
  return 1;
}

__n128 sub_20C637168(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 result;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  uint64_t v15;
  _OWORD *v16;

  v6 = *a1;
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v16 = v14;
  sub_20C017334(a1, a2, (uint64_t *)&v16);
  sub_20C01764C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v10 = a2 - v6;
  if (a2 > v6)
  {
    v11 = a1[4] + 72 * v6;
    do
    {
      *(_OWORD *)v11 = *(_OWORD *)a3;
      result = *(__n128 *)(a3 + 16);
      v12 = *(_OWORD *)(a3 + 32);
      v13 = *(_OWORD *)(a3 + 48);
      *(_QWORD *)(v11 + 64) = *(_QWORD *)(a3 + 64);
      *(_OWORD *)(v11 + 32) = v12;
      *(_OWORD *)(v11 + 48) = v13;
      *(__n128 *)(v11 + 16) = result;
      v11 += 72;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_20C637208(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, char **a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v25;
  const void *v26;
  char *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  char v31;

  if (!a3)
  {
    v27 = "usdSkel/animMapper.h";
    v28 = "Remap";
    v29 = 204;
    v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfQuath>]";
    v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v27 = "usdSkel/animMapper.h";
    v28 = "Remap";
    v29 = 209;
    v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfQuath>]";
    v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C282B2C(a3, a2);
  }
  else
  {
    if (a5)
      v27 = *a5;
    sub_20C637400((unint64_t *)a3, v11, &v27);
    v15 = *((_DWORD *)a1 + 14);
    if ((v15 & 3) != 0)
    {
      if ((v15 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v25 = *(_QWORD *)a2;
        else
          v25 = (v9 - a1[1]) * v10;
        v26 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF61FF0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v13, v14);
        if (v25)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 8 * a1[1] * v10), v26, 8 * v25);
      }
      else
      {
        v16 = *((_QWORD *)a2 + 4);
        sub_20BF61FF0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v13, v14);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v17 = *(_QWORD *)a2 / v10;
        else
          v17 = a1[2];
        if (v17)
        {
          v18 = 0;
          v19 = *(_QWORD *)(a3 + 32);
          v20 = (unsigned int *)a1[6];
          do
          {
            v22 = *v20++;
            v21 = v22;
            if ((v22 & 0x80000000) == 0 && *(_QWORD *)a3 > v21 && v5 != 0)
              memmove((void *)(v19 + 8 * (int)(v21 * v5)), (const void *)(v16 + 8 * v18), 8 * v5);
            v18 += v5;
            --v17;
          }
          while (v17);
        }
      }
    }
  }
  return 1;
}

void sub_20C637400(unint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;

  v6 = *a1;
  v12 = &v11;
  sub_20BF61DA0(a1, a2, &v12);
  sub_20BF61FF0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = (_QWORD *)(a1[4] + 8 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_20C637470(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v25;
  const void *v26;
  __n128 v27;
  uint64_t v28;
  const char *v29;
  char v30;

  if (!a3)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    v28 = 204;
    v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfQuatf>]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    v28 = 209;
    v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfQuatf>]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C282F34(a3, a2);
  }
  else
  {
    if (a5)
      v27 = *a5;
    sub_20C63766C((unint64_t *)a3, v11, &v27);
    v15 = *((_DWORD *)a1 + 14);
    if ((v15 & 3) != 0)
    {
      if ((v15 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v25 = *(_QWORD *)a2;
        else
          v25 = (v9 - a1[1]) * v10;
        v26 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF614BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v13, v14);
        if (v25)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 16 * a1[1] * v10), v26, 16 * v25);
      }
      else
      {
        v16 = (char *)*((_QWORD *)a2 + 4);
        sub_20BF614BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v13, v14);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v17 = *(_QWORD *)a2 / v10;
        else
          v17 = a1[2];
        if (v17)
        {
          v18 = 0;
          v19 = *(_QWORD *)(a3 + 32);
          v20 = (unsigned int *)a1[6];
          do
          {
            v22 = *v20++;
            v21 = v22;
            if ((v22 & 0x80000000) == 0 && *(_QWORD *)a3 > v21 && v5 != 0)
              memmove((void *)(v19 + 16 * (int)(v21 * v5)), v16, 16 * v10);
            v18 += v5;
            v16 += 16 * v5;
            --v17;
          }
          while (v17);
        }
      }
    }
  }
  return 1;
}

__n128 sub_20C63766C(unint64_t *a1, unint64_t a2, __n128 *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 result;
  unint64_t v10;
  __n128 *v11;
  char v12;
  char *v13;

  v6 = *a1;
  v13 = &v12;
  sub_20BF61270(a1, a2, (_OWORD **)&v13);
  sub_20BF614BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v10 = a2 - v6;
  if (a2 > v6)
  {
    v11 = (__n128 *)(a1[4] + 16 * v6);
    do
    {
      result = *a3;
      *v11++ = *a3;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_20C6376DC(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v26;
  const void *v27;
  __int128 v28;
  __int128 v29;
  char v30;

  if (!a3)
  {
    *(_QWORD *)&v28 = "usdSkel/animMapper.h";
    *((_QWORD *)&v28 + 1) = "Remap";
    *(_QWORD *)&v29 = 204;
    *((_QWORD *)&v29 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    *(_QWORD *)&v28 = "usdSkel/animMapper.h";
    *((_QWORD *)&v28 + 1) = "Remap";
    *(_QWORD *)&v29 = 209;
    *((_QWORD *)&v29 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C28333C(a3, a2);
  }
  else
  {
    if (a5)
    {
      v13 = a5[1];
      v28 = *a5;
      v29 = v13;
    }
    sub_20C6378DC((unint64_t *)a3, v11, (uint64_t)&v28);
    v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v9 - a1[1]) * v10;
        v27 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF62B64((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 32 * a1[1] * v10), v27, 32 * v26);
      }
      else
      {
        v17 = (char *)*((_QWORD *)a2 + 4);
        sub_20BF62B64((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v18 = *(_QWORD *)a2 / v10;
        else
          v18 = a1[2];
        if (v18)
        {
          v19 = 0;
          v20 = *(_QWORD *)(a3 + 32);
          v21 = (unsigned int *)a1[6];
          do
          {
            v23 = *v21++;
            v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(_QWORD *)a3 > v22 && v5 != 0)
              memmove((void *)(v20 + 32 * (int)(v22 * v5)), v17, 32 * v10);
            v19 += v5;
            v17 += 32 * v5;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

__n128 sub_20C6378DC(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 result;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  char v13;
  char *v14;

  v6 = *a1;
  v14 = &v13;
  sub_20BF62904(a1, a2, (_OWORD **)&v14);
  sub_20BF62B64((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v10 = a2 - v6;
  if (a2 > v6)
  {
    v11 = (_OWORD *)(a1[4] + 32 * v6);
    do
    {
      result = *(__n128 *)a3;
      v12 = *(_OWORD *)(a3 + 16);
      *v11 = *(_OWORD *)a3;
      v11[1] = v12;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_20C63794C(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, char **a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v26;
  const void *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if (!a3)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 204;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec2i>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 209;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec2i>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C283720(a3, a2);
  }
  else
  {
    if (a5)
      v13 = *a5;
    else
      v13 = 0;
    v28 = v13;
    sub_20C637B4C((unint64_t *)a3, v11, &v28);
    v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v9 - a1[1]) * v10;
        v27 = (const void *)*((_QWORD *)a2 + 4);
        sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 8 * a1[1] * v10), v27, 8 * v26);
      }
      else
      {
        v18 = *((_QWORD *)a2 + 4);
        sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v19 = *(_QWORD *)a2 / v10;
        else
          v19 = a1[2];
        if (v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(a3 + 32);
          v22 = (unsigned int *)a1[6];
          do
          {
            v24 = *v22++;
            v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(_QWORD *)a3 > v23 && v5 != 0)
              memmove((void *)(v21 + 8 * (int)(v23 * v5)), (const void *)(v18 + 8 * v20), 8 * v5);
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_20C637B4C(unint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;

  v6 = *a1;
  v11 = 0;
  v12 = &v11;
  sub_20C00F9CC(a1, a2, &v12);
  sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = (_QWORD *)(a1[4] + 8 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_20C637BBC(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, int *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v13;
  uint64_t v15;
  char *v16;
  int v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v26;
  const void *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if (!a3)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 204;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec2h>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 209;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec2h>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C283B04(a3, a2);
  }
  else
  {
    if (a5)
      v13 = *a5;
    else
      v13 = 0;
    LODWORD(v28) = v13;
    sub_20C637DC0((unint64_t *)a3, v11, &v28);
    v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v9 - a1[1]) * v10;
        v27 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF5944C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 4 * a1[1] * v10), v27, 4 * v26);
      }
      else
      {
        v18 = (char *)*((_QWORD *)a2 + 4);
        sub_20BF5944C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v19 = *(_QWORD *)a2 / v10;
        else
          v19 = a1[2];
        if (v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(a3 + 32);
          v22 = (unsigned int *)a1[6];
          do
          {
            v24 = *v22++;
            v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(_QWORD *)a3 > v23 && v5 != 0)
              memmove((void *)(v21 + 4 * (int)(v23 * v5)), v18, 4 * v10);
            v20 += v5;
            v18 += 4 * v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_20C637DC0(unint64_t *a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _DWORD *v10;
  int v11;
  int *v12;

  v6 = *a1;
  v11 = 0;
  v12 = &v11;
  sub_20BF591FC(a1, a2, &v12);
  sub_20BF5944C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = (_DWORD *)(a1[4] + 4 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_20C637E34(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, char **a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v26;
  const void *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if (!a3)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 204;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec2f>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 209;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec2f>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C283E98(a3, a2);
  }
  else
  {
    if (a5)
      v13 = *a5;
    else
      v13 = 0;
    v28 = v13;
    sub_20C638034((unint64_t *)a3, v11, &v28);
    v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v9 - a1[1]) * v10;
        v27 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF58964((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 8 * a1[1] * v10), v27, 8 * v26);
      }
      else
      {
        v18 = *((_QWORD *)a2 + 4);
        sub_20BF58964((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v19 = *(_QWORD *)a2 / v10;
        else
          v19 = a1[2];
        if (v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(a3 + 32);
          v22 = (unsigned int *)a1[6];
          do
          {
            v24 = *v22++;
            v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(_QWORD *)a3 > v23 && v5 != 0)
              memmove((void *)(v21 + 8 * (int)(v23 * v5)), (const void *)(v18 + 8 * v20), 8 * v5);
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_20C638034(unint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;

  v6 = *a1;
  v11 = 0;
  v12 = &v11;
  sub_20BF58714(a1, a2, &v12);
  sub_20BF58964((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = (_QWORD *)(a1[4] + 8 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_20C6380A4(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v25;
  const void *v26;
  __n128 v27;
  uint64_t v28;
  const char *v29;
  char v30;

  if (!a3)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    v28 = 204;
    v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec2d>]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    v28 = 209;
    v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec2d>]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C28422C(a3, a2);
  }
  else
  {
    if (a5)
      v27 = *a5;
    else
      v27 = 0uLL;
    sub_20C6382A8((unint64_t *)a3, v11, &v27);
    v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v25 = *(_QWORD *)a2;
        else
          v25 = (v9 - a1[1]) * v10;
        v26 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v25)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 16 * a1[1] * v10), v26, 16 * v25);
      }
      else
      {
        v17 = (char *)*((_QWORD *)a2 + 4);
        sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v18 = *(_QWORD *)a2 / v10;
        else
          v18 = a1[2];
        if (v18)
        {
          v19 = 0;
          v20 = *(_QWORD *)(a3 + 32);
          v21 = (unsigned int *)a1[6];
          do
          {
            v23 = *v21++;
            v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(_QWORD *)a3 > v22 && v5 != 0)
              memmove((void *)(v20 + 16 * (int)(v22 * v5)), v17, 16 * v10);
            v19 += v5;
            v17 += 16 * v5;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

__n128 sub_20C6382A8(unint64_t *a1, unint64_t a2, __n128 *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 result;
  unint64_t v10;
  __n128 *v11;
  _QWORD v12[2];
  _OWORD *v13;

  v6 = *a1;
  v12[0] = 0;
  v12[1] = 0;
  v13 = v12;
  sub_20BF59D64(a1, a2, &v13);
  sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v10 = a2 - v6;
  if (a2 > v6)
  {
    v11 = (__n128 *)(a1[4] + 16 * v6);
    do
    {
      result = *a3;
      *v11++ = *a3;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_20C63831C(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v25;
  const void *v26;
  char *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  char v31;

  if (!a3)
  {
    v27 = "usdSkel/animMapper.h";
    v28 = "Remap";
    v29 = 204;
    v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec3i>]";
    v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v27 = "usdSkel/animMapper.h";
    v28 = "Remap";
    v29 = 209;
    v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec3i>]";
    v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C28462C(a3, a2);
  }
  else
  {
    if (a5)
    {
      v27 = *(char **)a5;
      LODWORD(v28) = *(_DWORD *)(a5 + 8);
    }
    else
    {
      LODWORD(v28) = 0;
      v27 = 0;
    }
    sub_20C63853C((unint64_t *)a3, v11, (uint64_t *)&v27);
    v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v25 = *(_QWORD *)a2;
        else
          v25 = (v9 - a1[1]) * v10;
        v26 = (const void *)*((_QWORD *)a2 + 4);
        sub_20C011B6C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v25)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 12 * a1[1] * v10), v26, 12 * v25);
      }
      else
      {
        v17 = (char *)*((_QWORD *)a2 + 4);
        sub_20C011B6C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v18 = *(_QWORD *)a2 / v10;
        else
          v18 = a1[2];
        if (v18)
        {
          v19 = 0;
          v20 = *(_QWORD *)(a3 + 32);
          v21 = (unsigned int *)a1[6];
          do
          {
            v23 = *v21++;
            v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(_QWORD *)a3 > v22 && v5 != 0)
              memmove((void *)(v20 + 12 * (int)(v22 * v5)), v17, 12 * v10);
            v19 += v5;
            v17 += 12 * v5;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

void sub_20C63853C(unint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;

  v6 = *a1;
  v13 = 0;
  v12 = 0;
  v14 = &v12;
  sub_20C0118B0(a1, a2, &v14);
  sub_20C011B6C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = a1[4] + 12 * v6;
    do
    {
      v11 = *a3;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)v10 = v11;
      v10 += 12;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_20C6385C0(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v25;
  const void *v26;
  char *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  char v31;

  if (!a3)
  {
    v27 = "usdSkel/animMapper.h";
    v28 = "Remap";
    v29 = 204;
    v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec3h>]";
    v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v27 = "usdSkel/animMapper.h";
    v28 = "Remap";
    v29 = 209;
    v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec3h>]";
    v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C284A28(a3, a2);
  }
  else
  {
    if (a5)
    {
      LODWORD(v27) = *(_DWORD *)a5;
      WORD2(v27) = *(_WORD *)(a5 + 4);
    }
    else
    {
      WORD2(v27) = 0;
      LODWORD(v27) = 0;
    }
    sub_20C6387E0((unint64_t *)a3, v11, (int *)&v27);
    v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v25 = *(_QWORD *)a2;
        else
          v25 = (v9 - a1[1]) * v10;
        v26 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF5BADC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v25)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 6 * a1[1] * v10), v26, 6 * v25);
      }
      else
      {
        v17 = (char *)*((_QWORD *)a2 + 4);
        sub_20BF5BADC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v18 = *(_QWORD *)a2 / v10;
        else
          v18 = a1[2];
        if (v18)
        {
          v19 = 0;
          v20 = *(_QWORD *)(a3 + 32);
          v21 = (unsigned int *)a1[6];
          do
          {
            v23 = *v21++;
            v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(_QWORD *)a3 > v22 && v5 != 0)
              memmove((void *)(v20 + 6 * (int)(v22 * v5)), v17, 6 * v10);
            v19 += v5;
            v17 += 6 * v5;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

void sub_20C6387E0(unint64_t *a1, unint64_t a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int16 v13;
  int *v14;

  v6 = *a1;
  v13 = 0;
  v12 = 0;
  v14 = &v12;
  sub_20BF5B820(a1, a2, &v14);
  sub_20BF5BADC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = a1[4] + 6 * v6;
    do
    {
      v11 = *a3;
      *(_WORD *)(v10 + 4) = *((_WORD *)a3 + 2);
      *(_DWORD *)v10 = v11;
      v10 += 6;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_20C638864(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v25;
  const void *v26;
  char *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  char v31;

  if (!a3)
  {
    v27 = "usdSkel/animMapper.h";
    v28 = "Remap";
    v29 = 204;
    v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec3f>]";
    v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v27 = "usdSkel/animMapper.h";
    v28 = "Remap";
    v29 = 209;
    v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec3f>]";
    v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C284DC8(a3, a2);
  }
  else
  {
    if (a5)
    {
      v27 = *(char **)a5;
      LODWORD(v28) = *(_DWORD *)(a5 + 8);
    }
    else
    {
      LODWORD(v28) = 0;
      v27 = 0;
    }
    sub_20C638A84((unint64_t *)a3, v11, (uint64_t *)&v27);
    v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v25 = *(_QWORD *)a2;
        else
          v25 = (v9 - a1[1]) * v10;
        v26 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v25)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 12 * a1[1] * v10), v26, 12 * v25);
      }
      else
      {
        v17 = (char *)*((_QWORD *)a2 + 4);
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v18 = *(_QWORD *)a2 / v10;
        else
          v18 = a1[2];
        if (v18)
        {
          v19 = 0;
          v20 = *(_QWORD *)(a3 + 32);
          v21 = (unsigned int *)a1[6];
          do
          {
            v23 = *v21++;
            v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(_QWORD *)a3 > v22 && v5 != 0)
              memmove((void *)(v20 + 12 * (int)(v22 * v5)), v17, 12 * v10);
            v19 += v5;
            v17 += 12 * v5;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

void sub_20C638A84(unint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;

  v6 = *a1;
  v13 = 0;
  v12 = 0;
  v14 = &v12;
  sub_20BF5AD04(a1, a2, &v14);
  sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = a1[4] + 12 * v6;
    do
    {
      v11 = *a3;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)v10 = v11;
      v10 += 12;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_20C638B08(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v25;
  const void *v26;
  __n128 v27;
  uint64_t v28;
  const char *v29;
  char v30;

  if (!a3)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    v28 = 204;
    v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec3d>]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    v28 = 209;
    v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec3d>]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C285168(a3, a2);
  }
  else
  {
    if (a5)
    {
      v27 = *a5;
      v28 = a5[1].n128_i64[0];
    }
    else
    {
      v27 = 0uLL;
      v28 = 0;
    }
    sub_20C638D28((unint64_t *)a3, v11, &v27);
    v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v25 = *(_QWORD *)a2;
        else
          v25 = (v9 - a1[1]) * v10;
        v26 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v25)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 24 * a1[1] * v10), v26, 24 * v25);
      }
      else
      {
        v17 = (char *)*((_QWORD *)a2 + 4);
        sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v18 = *(_QWORD *)a2 / v10;
        else
          v18 = a1[2];
        if (v18)
        {
          v19 = 0;
          v20 = *(_QWORD *)(a3 + 32);
          v21 = (unsigned int *)a1[6];
          do
          {
            v23 = *v21++;
            v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(_QWORD *)a3 > v22 && v5 != 0)
              memmove((void *)(v20 + 24 * (int)(v22 * v5)), v17, 24 * v10);
            v19 += v5;
            v17 += 24 * v5;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

__n128 sub_20C638D28(unint64_t *a1, unint64_t a2, __n128 *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 result;
  unint64_t v10;
  __n128 *v11;
  _QWORD v12[3];
  __int128 *v13;

  v6 = *a1;
  memset(v12, 0, sizeof(v12));
  v13 = (__int128 *)v12;
  sub_20BF5C478(a1, a2, &v13);
  sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v10 = a2 - v6;
  if (a2 > v6)
  {
    v11 = (__n128 *)(a1[4] + 24 * v6);
    do
    {
      result = *a3;
      v11[1].n128_u64[0] = a3[1].n128_u64[0];
      *v11 = result;
      v11 = (__n128 *)((char *)v11 + 24);
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_20C638DA8(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v25;
  const void *v26;
  __n128 v27;
  uint64_t v28;
  const char *v29;
  char v30;

  if (!a3)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    v28 = 204;
    v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec4i>]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    v28 = 209;
    v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec4i>]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C285558(a3, a2);
  }
  else
  {
    if (a5)
      v27 = *a5;
    else
      v27 = 0uLL;
    sub_20C638FAC((unint64_t *)a3, v11, &v27);
    v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v25 = *(_QWORD *)a2;
        else
          v25 = (v9 - a1[1]) * v10;
        v26 = (const void *)*((_QWORD *)a2 + 4);
        sub_20C013B80((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v25)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 16 * a1[1] * v10), v26, 16 * v25);
      }
      else
      {
        v17 = (char *)*((_QWORD *)a2 + 4);
        sub_20C013B80((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v18 = *(_QWORD *)a2 / v10;
        else
          v18 = a1[2];
        if (v18)
        {
          v19 = 0;
          v20 = *(_QWORD *)(a3 + 32);
          v21 = (unsigned int *)a1[6];
          do
          {
            v23 = *v21++;
            v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(_QWORD *)a3 > v22 && v5 != 0)
              memmove((void *)(v20 + 16 * (int)(v22 * v5)), v17, 16 * v10);
            v19 += v5;
            v17 += 16 * v5;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

__n128 sub_20C638FAC(unint64_t *a1, unint64_t a2, __n128 *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 result;
  unint64_t v10;
  __n128 *v11;
  _QWORD v12[2];
  _OWORD *v13;

  v6 = *a1;
  v12[0] = 0;
  v12[1] = 0;
  v13 = v12;
  sub_20C013934(a1, a2, &v13);
  sub_20C013B80((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v10 = a2 - v6;
  if (a2 > v6)
  {
    v11 = (__n128 *)(a1[4] + 16 * v6);
    do
    {
      result = *a3;
      *v11++ = *a3;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_20C639020(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, char **a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v26;
  const void *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if (!a3)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 204;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec4h>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v28 = "usdSkel/animMapper.h";
    v29 = "Remap";
    v30 = 209;
    v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec4h>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C28593C(a3, a2);
  }
  else
  {
    if (a5)
      v13 = *a5;
    else
      v13 = 0;
    v28 = v13;
    sub_20C639220((unint64_t *)a3, v11, &v28);
    v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v9 - a1[1]) * v10;
        v27 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF5E11C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 8 * a1[1] * v10), v27, 8 * v26);
      }
      else
      {
        v18 = *((_QWORD *)a2 + 4);
        sub_20BF5E11C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v19 = *(_QWORD *)a2 / v10;
        else
          v19 = a1[2];
        if (v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(a3 + 32);
          v22 = (unsigned int *)a1[6];
          do
          {
            v24 = *v22++;
            v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(_QWORD *)a3 > v23 && v5 != 0)
              memmove((void *)(v21 + 8 * (int)(v23 * v5)), (const void *)(v18 + 8 * v20), 8 * v5);
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_20C639220(unint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;

  v6 = *a1;
  v11 = 0;
  v12 = &v11;
  sub_20BF5DECC(a1, a2, &v12);
  sub_20BF5E11C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = (_QWORD *)(a1[4] + 8 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_20C639290(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v25;
  const void *v26;
  __n128 v27;
  uint64_t v28;
  const char *v29;
  char v30;

  if (!a3)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    v28 = 204;
    v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec4f>]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    v28 = 209;
    v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec4f>]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C285CD4(a3, a2);
  }
  else
  {
    if (a5)
      v27 = *a5;
    else
      v27 = 0uLL;
    sub_20C639494((unint64_t *)a3, v11, &v27);
    v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v25 = *(_QWORD *)a2;
        else
          v25 = (v9 - a1[1]) * v10;
        v26 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF5D5F0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v25)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 16 * a1[1] * v10), v26, 16 * v25);
      }
      else
      {
        v17 = (char *)*((_QWORD *)a2 + 4);
        sub_20BF5D5F0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v18 = *(_QWORD *)a2 / v10;
        else
          v18 = a1[2];
        if (v18)
        {
          v19 = 0;
          v20 = *(_QWORD *)(a3 + 32);
          v21 = (unsigned int *)a1[6];
          do
          {
            v23 = *v21++;
            v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(_QWORD *)a3 > v22 && v5 != 0)
              memmove((void *)(v20 + 16 * (int)(v22 * v5)), v17, 16 * v10);
            v19 += v5;
            v17 += 16 * v5;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

__n128 sub_20C639494(unint64_t *a1, unint64_t a2, __n128 *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 result;
  unint64_t v10;
  __n128 *v11;
  _QWORD v12[2];
  _OWORD *v13;

  v6 = *a1;
  v12[0] = 0;
  v12[1] = 0;
  v13 = v12;
  sub_20BF5D3A4(a1, a2, &v13);
  sub_20BF5D5F0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v10 = a2 - v6;
  if (a2 > v6)
  {
    v11 = (__n128 *)(a1[4] + 16 * v6);
    do
    {
      result = *a3;
      *v11++ = *a3;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_20C639508(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  uint64_t v15;
  char *v16;
  int v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v26;
  const void *v27;
  __int128 v28;
  __int128 v29;
  char v30;

  if (!a3)
  {
    *(_QWORD *)&v28 = "usdSkel/animMapper.h";
    *((_QWORD *)&v28 + 1) = "Remap";
    *(_QWORD *)&v29 = 204;
    *((_QWORD *)&v29 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  v5 = a4;
  if ((int)a4 <= 0)
  {
    *(_QWORD *)&v28 = "usdSkel/animMapper.h";
    *((_QWORD *)&v28 + 1) = "Remap";
    *(_QWORD *)&v29 = 209;
    *((_QWORD *)&v29 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  v9 = *a1;
  v10 = a4;
  v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(_QWORD *)a2 == v11)
  {
    sub_20C28606C(a3, a2);
  }
  else
  {
    if (a5)
    {
      v13 = a5[1];
      v28 = *a5;
      v29 = v13;
    }
    else
    {
      v28 = 0u;
      v29 = 0u;
    }
    sub_20C639714((unint64_t *)a3, v11, (uint64_t)&v28);
    v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(_QWORD *)a2)
          v26 = *(_QWORD *)a2;
        else
          v26 = (v9 - a1[1]) * v10;
        v27 = (const void *)*((_QWORD *)a2 + 4);
        sub_20BF5ECA0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26)
          memmove((void *)(*(_QWORD *)(a3 + 32) + 32 * a1[1] * v10), v27, 32 * v26);
      }
      else
      {
        v18 = (char *)*((_QWORD *)a2 + 4);
        sub_20BF5ECA0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(_QWORD *)a2 / (unint64_t)v5)
          v19 = *(_QWORD *)a2 / v10;
        else
          v19 = a1[2];
        if (v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(a3 + 32);
          v22 = (unsigned int *)a1[6];
          do
          {
            v24 = *v22++;
            v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(_QWORD *)a3 > v23 && v5 != 0)
              memmove((void *)(v21 + 32 * (int)(v23 * v5)), v18, 32 * v10);
            v20 += v5;
            v18 += 32 * v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

__n128 sub_20C639714(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 result;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  _OWORD v13[2];
  _OWORD *v14;

  v6 = *a1;
  memset(v13, 0, sizeof(v13));
  v14 = v13;
  sub_20BF5EA40(a1, a2, &v14);
  sub_20BF5ECA0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v10 = a2 - v6;
  if (a2 > v6)
  {
    v11 = (_OWORD *)(a1[4] + 32 * v6);
    do
    {
      result = *(__n128 *)a3;
      v12 = *(_OWORD *)(a3 + 16);
      *v11 = *(_OWORD *)a3;
      v11[1] = v12;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  return result;
}

__n128 sub_20C63978C(unint64_t *a1, unint64_t a2, __int128 *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 result;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[8];
  __int128 *v18;

  v6 = *a1;
  memset(v17, 0, sizeof(v17));
  v18 = v17;
  sub_20BF5F980(a1, a2, &v18);
  sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v10 = a2 - v6;
  if (a2 > v6)
  {
    v11 = a1[4] + (v6 << 7);
    do
    {
      v12 = *a3;
      v13 = a3[1];
      v14 = a3[3];
      *(_OWORD *)(v11 + 32) = a3[2];
      *(_OWORD *)(v11 + 48) = v14;
      *(_OWORD *)v11 = v12;
      *(_OWORD *)(v11 + 16) = v13;
      result = (__n128)a3[4];
      v15 = a3[5];
      v16 = a3[7];
      *(_OWORD *)(v11 + 96) = a3[6];
      *(_OWORD *)(v11 + 112) = v16;
      *(__n128 *)(v11 + 64) = result;
      *(_OWORD *)(v11 + 80) = v15;
      v11 += 128;
      --v10;
    }
    while (v10);
  }
  return result;
}

__n128 sub_20C63982C(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 result;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  __int128 *v15;

  v6 = *a1;
  memset(v14, 0, sizeof(v14));
  v15 = v14;
  sub_20BF60580(a1, a2, &v15);
  sub_20BF6080C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  v10 = a2 - v6;
  if (a2 > v6)
  {
    v11 = a1[4] + (v6 << 6);
    do
    {
      result = *(__n128 *)a3;
      v12 = *(_OWORD *)(a3 + 16);
      v13 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v11 + 32) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v11 + 48) = v13;
      *(__n128 *)v11 = result;
      *(_OWORD *)(v11 + 16) = v12;
      v11 += 64;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t *a1, const char *a2, char *a3, double a4)
{
  uint64_t v7;
  uint64_t result;
  char *v9;
  char v10;
  _QWORD v11[4];
  char v12;

  if (*a1)
    goto LABEL_2;
  v11[0] = "usdSkel/animQuery.cpp";
  v11[1] = "ComputeJointLocalTransforms";
  v11[2] = 52;
  v11[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransforms(VtArray<Matrix4> *, UsdT"
           "imeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  v12 = 0;
  v9 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  v10 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "IsValid()", v9);
  result = 0;
  if ((v10 & 1) != 0)
  {
LABEL_2:
    v7 = sub_20C639960(a1);
    return (*(uint64_t (**)(uint64_t, const char *, double))(*(_QWORD *)v7 + 24))(v7, a2, a4);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__16UsdSkelAnimQuery27ComputeJointLocalTransformsINS_10GfMatrix4dEEEbPNS_7VtArrayIT_EENS_11UsdTimeCodeE(a1, a2, a3, a4);
}

uint64_t sub_20C639960(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  _QWORD v3[4];
  char v4;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::oper"
            "ator->() const [U = pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAF0D7CLL & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t *a1, const char *a2, char *a3, double a4)
{
  uint64_t v7;
  uint64_t result;
  char *v9;
  char v10;
  _QWORD v11[4];
  char v12;

  if (*a1)
    goto LABEL_2;
  v11[0] = "usdSkel/animQuery.cpp";
  v11[1] = "ComputeJointLocalTransforms";
  v11[2] = 52;
  v11[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransforms(VtArray<Matrix4> *, UsdT"
           "imeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
  v12 = 0;
  v9 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  v10 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "IsValid()", v9);
  result = 0;
  if ((v10 & 1) != 0)
  {
LABEL_2:
    v7 = sub_20C639960(a1);
    return (*(uint64_t (**)(uint64_t, const char *, double))(*(_QWORD *)v7 + 32))(v7, a2, a4);
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__16UsdSkelAnimQuery27ComputeJointLocalTransformsINS_10GfMatrix4fEEEbPNS_7VtArrayIT_EENS_11UsdTimeCodeE(a1, a2, a3, a4);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetPrim@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _DWORD *result;

  if (*(_QWORD *)this)
  {
    v3 = sub_20C639960((uint64_t *)this);
    return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  }
  else
  {
    *(_DWORD *)a2 = 1;
    *(_QWORD *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransformComponents(uint64_t *a1, const char *a2, char *a3, uint64_t a4, double a5)
{
  uint64_t v10;
  uint64_t result;
  char *v12;
  char v13;
  _QWORD v14[4];
  char v15;

  if (*a1)
    goto LABEL_2;
  v14[0] = "usdSkel/animQuery.cpp";
  v14[1] = "ComputeJointLocalTransformComponents";
  v14[2] = 75;
  v14[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransformComponents(VtVec3fArray *,"
           " VtQuatfArray *, VtVec3hArray *, UsdTimeCode) const";
  v15 = 0;
  v12 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  v13 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v14, "IsValid()", v12);
  result = 0;
  if ((v13 & 1) != 0)
  {
LABEL_2:
    v10 = sub_20C639960(a1);
    return (*(uint64_t (**)(uint64_t, const char *, char *, uint64_t, double))(*(_QWORD *)v10 + 40))(v10, a2, a3, a4, a5);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeBlendShapeWeights(uint64_t *a1, const char *a2, char *a3, double a4)
{
  uint64_t v7;
  uint64_t result;
  char *v9;
  char v10;
  _QWORD v11[4];
  char v12;

  if (*a1)
    goto LABEL_2;
  v11[0] = "usdSkel/animQuery.cpp";
  v11[1] = "ComputeBlendShapeWeights";
  v11[2] = 87;
  v11[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeBlendShapeWeights(VtFloatArray *, UsdTimeCode) const";
  v12 = 0;
  v9 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  v10 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "IsValid()", v9);
  result = 0;
  if ((v10 & 1) != 0)
  {
LABEL_2:
    v7 = sub_20C639960(a1);
    return (*(uint64_t (**)(uint64_t, const char *, double))(*(_QWORD *)v7 + 72))(v7, a2, a4);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformTimeSamples(uint64_t *a1, char *a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = 0xFFF0000000000000;
  v4 = 0;
  v5 = 0x7FF0000000000000;
  v6 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformTimeSamplesInInterval(a1, (const char *)&v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformTimeSamplesInInterval(uint64_t *a1, const char *a2, char *a3)
{
  uint64_t v6;
  uint64_t result;
  char *v8;
  char v9;
  _QWORD v10[4];
  char v11;

  if (*a1)
    goto LABEL_2;
  v10[0] = "usdSkel/animQuery.cpp";
  v10[1] = "GetJointTransformTimeSamplesInInterval";
  v10[2] = 107;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformTimeSamplesInInterval(const GfInter"
           "val &, std::vector<double> *) const";
  v11 = 0;
  v8 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  v9 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v10, "IsValid()", v8);
  result = 0;
  if ((v9 & 1) != 0)
  {
LABEL_2:
    v6 = sub_20C639960(a1);
    return (*(uint64_t (**)(uint64_t, const char *, char *))(*(_QWORD *)v6 + 48))(v6, a2, a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformAttributes(uint64_t *a1, const char *a2, char *a3)
{
  uint64_t v5;
  uint64_t result;
  char *v7;
  char v8;
  _QWORD v9[4];
  char v10;

  if (*a1)
    goto LABEL_2;
  v9[0] = "usdSkel/animQuery.cpp";
  v9[1] = "GetJointTransformAttributes";
  v9[2] = 117;
  v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformAttributes(std::vector<UsdAttribute> *) const";
  v10 = 0;
  v7 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  v8 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "IsValid()", v7);
  result = 0;
  if ((v8 & 1) != 0)
  {
LABEL_2:
    v5 = sub_20C639960(a1);
    return (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v5 + 56))(v5, a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::JointTransformsMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this, const char *a2, char *a3)
{
  uint64_t v4;
  uint64_t result;
  char *v6;
  char v7;
  _QWORD v8[4];
  char v9;

  if (*(_QWORD *)this)
    goto LABEL_2;
  v8[0] = "usdSkel/animQuery.cpp";
  v8[1] = "JointTransformsMightBeTimeVarying";
  v8[2] = 127;
  v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::JointTransformsMightBeTimeVarying() const";
  v9 = 0;
  v6 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  v7 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "IsValid()", v6);
  result = 0;
  if ((v7 & 1) != 0)
  {
LABEL_2:
    v4 = sub_20C639960((uint64_t *)this);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
  }
  return result;
}

double pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointOrder@<D0>(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this@<X0>, const char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  _QWORD v14[4];
  char v15;

  if (*(_QWORD *)this
    || (v14[0] = "usdSkel/animQuery.cpp",
        v14[1] = "GetJointOrder",
        v14[2] = 137,
        v14[3] = "VtTokenArray pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointOrder() const",
        v15 = 0,
        v12 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v14, "IsValid()", v12) & 1) != 0))
  {
    v6 = sub_20C639960((uint64_t *)this);
    v7 = *(_OWORD *)(v6 + 16);
    v8 = *(_OWORD *)(v6 + 32);
    *(_OWORD *)a4 = v7;
    *(_OWORD *)(a4 + 16) = v8;
    v9 = *(_QWORD *)(v6 + 48);
    *(_QWORD *)(a4 + 32) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 - 16);
      if (*(_QWORD *)(a4 + 24))
        v10 = *(unint64_t **)(a4 + 24);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)&v7 = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return *(double *)&v7;
}

double pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeOrder@<D0>(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this@<X0>, const char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  _QWORD v14[4];
  char v15;

  if (*(_QWORD *)this
    || (v14[0] = "usdSkel/animQuery.cpp",
        v14[1] = "GetBlendShapeOrder",
        v14[2] = 147,
        v14[3] = "VtTokenArray pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeOrder() const",
        v15 = 0,
        v12 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v14, "IsValid()", v12) & 1) != 0))
  {
    v6 = sub_20C639960((uint64_t *)this);
    v7 = *(_OWORD *)(v6 + 56);
    v8 = *(_OWORD *)(v6 + 72);
    *(_OWORD *)a4 = v7;
    *(_OWORD *)(a4 + 16) = v8;
    v9 = *(_QWORD *)(v6 + 88);
    *(_QWORD *)(a4 + 32) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 - 16);
      if (*(_QWORD *)(a4 + 24))
        v10 = *(unint64_t **)(a4 + 24);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)&v7 = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return *(double *)&v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightTimeSamples(uint64_t *a1, char *a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = 0xFFF0000000000000;
  v4 = 0;
  v5 = 0x7FF0000000000000;
  v6 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightTimeSamplesInInterval(a1, (const char *)&v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightTimeSamplesInInterval(uint64_t *a1, const char *a2, char *a3)
{
  uint64_t v6;
  uint64_t result;
  char *v8;
  char v9;
  _QWORD v10[4];
  char v11;

  if (*a1)
    goto LABEL_2;
  v10[0] = "usdSkel/animQuery.cpp";
  v10[1] = "GetBlendShapeWeightTimeSamplesInInterval";
  v10[2] = 179;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightTimeSamplesInInterval(const GfInt"
           "erval &, std::vector<double> *) const";
  v11 = 0;
  v8 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  v9 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v10, "IsValid()", v8);
  result = 0;
  if ((v9 & 1) != 0)
  {
LABEL_2:
    v6 = sub_20C639960(a1);
    return (*(uint64_t (**)(uint64_t, const char *, char *))(*(_QWORD *)v6 + 80))(v6, a2, a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightAttributes(uint64_t *a1, const char *a2, char *a3)
{
  uint64_t v5;
  uint64_t result;
  char *v7;
  char v8;
  _QWORD v9[4];
  char v10;

  if (*a1)
    goto LABEL_2;
  v9[0] = "usdSkel/animQuery.cpp";
  v9[1] = "GetBlendShapeWeightAttributes";
  v9[2] = 167;
  v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightAttributes(std::vector<UsdAttribute> *) const";
  v10 = 0;
  v7 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  v8 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "IsValid()", v7);
  result = 0;
  if ((v8 & 1) != 0)
  {
LABEL_2:
    v5 = sub_20C639960(a1);
    return (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v5 + 88))(v5, a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::BlendShapeWeightsMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this, const char *a2, char *a3)
{
  uint64_t v4;
  uint64_t result;
  char *v6;
  char v7;
  _QWORD v8[4];
  char v9;

  if (*(_QWORD *)this)
    goto LABEL_2;
  v8[0] = "usdSkel/animQuery.cpp";
  v8[1] = "BlendShapeWeightsMightBeTimeVarying";
  v8[2] = 189;
  v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::BlendShapeWeightsMightBeTimeVarying() const";
  v9 = 0;
  v6 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  v7 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "IsValid()", v6);
  result = 0;
  if ((v7 & 1) != 0)
  {
LABEL_2:
    v4 = sub_20C639960((uint64_t *)this);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetDescription(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  const char *Text;
  const char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;

  if (*(_QWORD *)this)
  {
    v2 = sub_20C639960((uint64_t *)this);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 16))(&v8);
    sub_20C348EEC((uint64_t)&v8, &v13);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"UsdSkelAnimQuery <%s>", v4, v5, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    sub_20BFD265C(&v13);
    if ((v12 & 7) != 0)
    {
      v6 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_20BFD265C(&v10);
    if (v9)
      sub_20C35C614(v9);
  }
  else
  {
    sub_20BDDC0E4(a2, "invalid UsdSkelAnimQuery");
  }
}

void sub_20C63A334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBakeSkinning(pxrInternal__aapl__pxrReserved__::UsdSkelCache *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  const char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t *);
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  const char *Text;
  char *v35;
  uint64_t (*v36)(uint64_t *);
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t (*v51)(uint64_t *);
  char v52;
  uint64_t v53;
  void *v54;
  char *v55;
  unsigned __int8 *v56;
  __int128 v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  const char *v62;
  char *v63;
  const char *v64;
  const char *v65;
  char *v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t *Skeleton;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *Mapper;
  const char *v74;
  char *v75;
  _BOOL4 HasAuthoredValue;
  unsigned int *v77;
  unsigned int v78;
  char v79;
  char v80;
  int v81;
  char v82;
  char v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t *v86;
  char *v87;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *v88;
  const char *v89;
  char *v90;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v91;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v92;
  _BOOL4 v93;
  int v94;
  char v95;
  const char *v96;
  char *v97;
  const char *v98;
  const char *v99;
  char *v100;
  const char *v101;
  char *v102;
  void *v103;
  const char *v104;
  char *v105;
  void *v106;
  int v107;
  void **v108;
  const char *v109;
  char *v110;
  const char *v111;
  char *v112;
  void **v113;
  void *v114;
  unsigned int *v115;
  unsigned int v116;
  int v117;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v118;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v119;
  std::__shared_weak_count *v120;
  unint64_t *p_shared_owners;
  unint64_t v122;
  _QWORD *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  unsigned __int8 **v134;
  unint64_t *v135;
  unint64_t v136;
  char *v137;
  __int128 v138;
  int64x2_t v139;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v140;
  unint64_t *v141;
  unint64_t v142;
  _BOOL8 v143;
  void *v144;
  const char *v145;
  char *v146;
  uint64_t *v147;
  uint64_t *v148;
  void **v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  unint64_t v154;
  unint64_t initial_auto_partitioner_divisor;
  uint64_t *v156;
  uint64_t *i;
  uint64_t v158;
  _QWORD *v159;
  pxrInternal__aapl__pxrReserved__::UsdProperty *Attribute;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v161;
  uint64_t j;
  void **v163;
  uint64_t v164;
  unsigned int *v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v170;
  unsigned int *v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  double **v181;
  double *v182;
  pxrInternal__aapl__pxrReserved__::UsdStage *v183;
  pxrInternal__aapl__pxrReserved__::PcpCache **v184;
  double TimeCodesPerSecond;
  pxrInternal__aapl__pxrReserved__::UsdStage *v186;
  double FramesPerSecond;
  pxrInternal__aapl__pxrReserved__::UsdStage *v188;
  double StartTimeCode;
  pxrInternal__aapl__pxrReserved__::UsdStage *v190;
  double EndTimeCode;
  double v192;
  unint64_t v193;
  uint64_t v194;
  double v195;
  BOOL v196;
  double v197;
  BOOL v198;
  double *v199;
  double *v200;
  double *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  double *v207;
  uint64_t v208;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *k;
  char *v210;
  char *v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  double v226;
  unint64_t v227;
  unint64_t v228;
  const char *v229;
  char *v230;
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock *v231;
  _QWORD *v232;
  unint64_t v233;
  uint64_t v234;
  char *v235;
  const char *v236;
  char *v237;
  void **v238;
  const char *v239;
  char *v240;
  void **v241;
  uint64_t *v242;
  uint64_t *v243;
  unint64_t m;
  uint64_t v245;
  const char *v246;
  char *v247;
  const char *v248;
  const char *v249;
  char *v250;
  pxrInternal__aapl__pxrReserved__::UsdAttribute **v251;
  unsigned int *v252;
  unsigned int v253;
  const char *v254;
  char *v255;
  const char *v256;
  const char *v257;
  char *v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  unsigned int *v263;
  unsigned int v264;
  const char *v265;
  const char *v266;
  char *v267;
  const char *v269;
  const char *v270;
  char *v271;
  unsigned int *v272;
  unsigned int v273;
  const char *v274;
  char *v275;
  void **v276;
  uint64_t *v277;
  uint64_t *n;
  uint64_t v279;
  const char *v280;
  const char *v281;
  char *v282;
  void **v283;
  const char *v284;
  const char *v285;
  char *v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  const char *v291;
  const char *v292;
  char *v293;
  const char *v295;
  const char *v296;
  char *v297;
  const char *v298;
  const char *v299;
  char *v300;
  const char *v301;
  const char *v302;
  char *v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  const char *v308;
  const char *v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  const char *v314;
  char *v315;
  void **v316;
  __int128 v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  void *v322;
  const char *v323;
  char *v324;
  void **v325;
  unint64_t v326;
  uint64_t *v327;
  unint64_t v328;
  unint64_t v329;
  _BOOL8 v330;
  const char *v331;
  char *v332;
  void **v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  void *v339;
  unint64_t v340;
  unint64_t v341;
  double *v342;
  int v343;
  int v344;
  unint64_t v345;
  unint64_t v346;
  BOOL v347;
  const char *v349;
  char *v350;
  const char *v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t *v361;
  pxrInternal__aapl__pxrReserved__::UsdSkelRoot *v362;
  uint64_t v363;
  unsigned int *v364;
  unsigned int v365;
  void *v366;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v367;
  pxrInternal__aapl__pxrReserved__::TfToken *v368;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v370;
  unint64_t v371;
  const char *v372;
  char *v373;
  uint64_t v374;
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock *v375;
  const char *v376;
  char *v377;
  uint64_t *v378;
  const char *v379;
  char *v380;
  pxrInternal__aapl__pxrReserved__ *v381;
  uint64_t v382;
  uint64_t v383;
  void *v384;
  int64_t v385;
  unint64_t v386;
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock *v387;
  const pxrInternal__aapl__pxrReserved__::UsdPrim **v388;
  double *v389;
  double v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  unint64_t v394;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v395;
  unint64_t v396;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v397;
  char *v398;
  double *v399;
  unint64_t v400;
  unint64_t v401;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v402;
  unsigned int *v403;
  unsigned int v404;
  const char *v405;
  char *v406;
  uint64_t *v407;
  _DWORD *v408;
  pxrInternal__aapl__pxrReserved__ *v409;
  unint64_t *v410;
  unint64_t v411;
  uint64_t v412;
  unsigned int *v413;
  unsigned int v414;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v415;
  pxrInternal__aapl__pxrReserved__ *v416;
  uint64_t v417;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v418;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v419;
  unint64_t v420;
  unint64_t v421;
  uint8x8_t v422;
  _QWORD *v423;
  _QWORD *v424;
  unint64_t v425;
  _QWORD *v426;
  _QWORD *v427;
  pxrInternal__aapl__pxrReserved__ *v428;
  unint64_t *v429;
  unint64_t v430;
  uint64_t v431;
  unsigned int *v432;
  unsigned int v433;
  float v434;
  _BOOL4 v435;
  unint64_t v436;
  unint64_t v437;
  int8x8_t prime;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v439;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v440;
  uint64_t v441;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v442;
  unint64_t v443;
  uint8x8_t v444;
  unint64_t v445;
  uint8x8_t v446;
  uint64_t v447;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v448;
  unint64_t v449;
  _QWORD *v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t *v455;
  uint64_t v456;
  __int128 v457;
  unint64_t *v458;
  unint64_t v459;
  unsigned int *v460;
  unsigned int v461;
  pxrInternal__aapl__pxrReserved__ *v462;
  pxrInternal__aapl__pxrReserved__ *v463;
  unsigned int *v464;
  unsigned int v465;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v466;
  uint64_t v467;
  unint64_t v468;
  size_t v469;
  _QWORD *v470;
  _QWORD *v472;
  unint64_t v473;
  _QWORD *v474;
  uint64_t v475;
  unint64_t *v476;
  unint64_t v477;
  __int128 v478;
  unint64_t *v479;
  unint64_t v480;
  int v481;
  unsigned int *v482;
  unsigned int v483;
  const char *v484;
  char *v485;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v486;
  char *v487;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v488;
  uint64_t v489;
  char *v490;
  uint64_t v491;
  unint64_t *v492;
  unint64_t v493;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v494;
  _QWORD *v495;
  char *v496;
  __int128 v497;
  uint64_t v498;
  unint64_t *v499;
  unint64_t v500;
  pxrInternal__aapl__pxrReserved__ *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  void *v505;
  unint64_t v506;
  unint64_t v507;
  char *v508;
  unint64_t v509;
  char *v510;
  char *v511;
  uint64_t v512;
  unint64_t v513;
  unint64_t v514;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v515;
  uint64_t v516;
  unsigned int *v517;
  unsigned int v518;
  unsigned int v519;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *AnimQuery;
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock *v522;
  uint64_t v523;
  _QWORD *v524;
  uint64_t *v525;
  uint64_t v526;
  uint64_t *v527;
  uint64_t v528;
  _QWORD *v529;
  void *v531;
  char *v532;
  unint64_t v533;
  uint64_t *v534;
  uint64_t *v535;
  uint64_t v536;
  __int128 v537;
  _QWORD v538[2];
  __int128 v539;
  void *__p[2];
  char v541;
  void *v542;
  void *v543;
  pxrInternal__aapl__pxrReserved__ *v544;
  __int128 *v545;
  _QWORD v546[2];
  void *v547;
  void *v548;
  uint64_t v549;
  void *v550;
  std::__shared_weak_count *v551;
  uint64_t v552;
  void **v553;
  void *v554;
  void *v555;
  uint64_t v556;
  void *v557;
  char *v558;
  char *v559;
  uint64_t v560;
  void *v561;
  double *v562;
  _QWORD v563[2];
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v564[4];
  void **v565;
  void *v566[2];
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  uint64_t v574;
  int v575;
  uint64_t v576;

  v576 = *MEMORY[0x24BDAC8D0];
  if (sub_20C624E4C(1))
  {
    sub_20C63E388(a3);
    v6 = *(_QWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a2 + 32);
    v8 = *(_QWORD *)(a2 + 48);
    v7 = *(_QWORD *)(a2 + 56);
    sub_20C63E450(*(_DWORD *)a2, v9, v10);
    v13 = v566;
    if (SBYTE7(v567) < 0)
      v13 = (void **)v566[0];
    if (v541 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Baking skinning over range %s for %zu bindings in %zu layers.\nDeformation flags:\n%s", v11, v12, v13, (v5 - v6) >> 6, (v7 - v8) >> 4, v14);
    if (v541 < 0)
      operator delete(__p[0]);
    if (SBYTE7(v567) < 0)
      operator delete(v566[0]);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::UsdGeomXformCache((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)__p);
  v539 = 0uLL;
  v16 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  if (v16 != v15)
  {
    while (1)
    {
      v17 = sub_20C369024(&v539);
      if (!(v18 & 1 | (unint64_t)v17))
      {
        v22 = *(_QWORD *)(v16 + 8);
        if (v22)
        {
          if ((*(_BYTE *)(v22 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16))
          {
            sub_20C35C4F8((uint64_t)v566, (uint64_t *)(v16 + 8), (_DWORD *)(v16 + 16));
            pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v566, v23, v564);
            v24 = (unsigned int *)*((_QWORD *)&v539 + 1);
            v539 = *(_OWORD *)v564;
            v564[1] = 0;
            if (v24)
            {
              v25 = v24 + 2;
              do
              {
                v26 = __ldxr(v25);
                v27 = v26 - 1;
              }
              while (__stlxr(v27, v25));
              if (!v27)
                (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
              v28 = v564[1];
              v564[0] = 0;
              if (v564[1])
              {
                v29 = (unsigned int *)((char *)v564[1] + 8);
                do
                {
                  v30 = __ldxr(v29);
                  v31 = v30 - 1;
                }
                while (__stlxr(v31, v29));
                if (!v31)
                  (*(void (**)(pxrInternal__aapl__pxrReserved__::UsdAttribute *))(*(_QWORD *)v28 + 8))(v28);
              }
            }
            else
            {
              v564[0] = 0;
            }
            if ((BYTE8(v567) & 7) != 0)
            {
              v32 = (unsigned int *)(*((_QWORD *)&v567 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v33 = __ldxr(v32);
              while (__stlxr(v33 - 2, v32));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v567 + 1);
            sub_20BFD265C(&v567);
            if (v566[1])
              sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v566[1]);
          }
        }
      }
      v19 = *(_QWORD *)(v16 + 24);
      if (v19)
        break;
LABEL_18:
      v16 += 64;
      if (v16 == v15)
        goto LABEL_40;
    }
    v20 = *(_QWORD *)(v16 + 56);
    v21 = 400 * v19;
    while ((sub_20C452420(v20, v18) & 1) == 0
         && !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v20 + 16)))
    {
      v20 += 400;
      v21 -= 400;
      if (!v21)
        goto LABEL_18;
    }
    v566[0] = "usdSkel/bakeSkinning.cpp";
    v566[1] = "UsdSkelBakeSkinning";
    *(_QWORD *)&v567 = 2359;
    *((_QWORD *)&v567 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBakeSkinning(const UsdSkelCache &, const UsdS"
                             "kelBakeSkinningParms &, const GfInterval &)";
    LOBYTE(v568) = 0;
    sub_20C348EEC(v20, (int *)v564);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v564);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v566, (pxrInternal__aapl__pxrReserved__ *)"[UsdSkelBakeSkinning] Cannot bake skinning for instanced SkinningQuery <%s>\n", v35, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v564 + 1);
    sub_20BFD265C(v564);
LABEL_173:
    v143 = 0;
    goto LABEL_698;
  }
LABEL_40:
  v36 = sub_20C369024(&v539);
  if (!(v37 & 1 | (unint64_t)v36))
    goto LABEL_173;
  v537 = 0uLL;
  v538[0] = 0;
  v534 = 0;
  v535 = 0;
  v536 = 0;
  v39 = *(_QWORD *)(a2 + 24);
  v38 = *(_QWORD *)(a2 + 32);
  v40 = v38 - v39;
  v41 = (v38 - v39) >> 6;
  v42 = *(_QWORD *)(a2 + 72);
  if (v41 != v42)
  {
    v566[0] = "usdSkel/bakeSkinning.cpp";
    v566[1] = "_CreateAdapters";
    *(_QWORD *)&v567 = 1838;
    *((_QWORD *)&v567 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CreateAdapters(const UsdSkel"
                             "BakeSkinningParms &, const UsdSkelCache &, std::vector<_SkelAdapterRefPtr> *, std::vector<_"
                             "SkinningAdapterRefPtr> *, UsdGeomXformCache *)";
    LOBYTE(v568) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v566, 1, (pxrInternal__aapl__pxrReserved__ *)"size of parms.bindings [%zu] != size of parms.bindingLayerIndices [%zu]", v41, v42);
    v143 = 0;
    goto LABEL_697;
  }
  if (v38 != v39)
  {
    if ((v40 & 0x8000000000000000) != 0)
      sub_20BDDF694();
    *(_QWORD *)&v568 = v538;
    *(_QWORD *)&v537 = operator new(v40 >> 2);
    *((_QWORD *)&v537 + 1) = v537;
    v538[0] = v537 + 16 * v41;
    *(_OWORD *)v566 = 0u;
    v567 = 0u;
    sub_20BDEA324((uint64_t)v566);
    v41 = (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 6;
  }
  sub_20C63F4F4((unint64_t *)&v534, v41);
  v528 = a2;
  if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(a2 + 24))
  {
    v44 = a2;
    v45 = 0;
    while (1)
    {
      v46 = *(unsigned int *)(*(_QWORD *)(v44 + 104) + 4 * v45);
      v48 = v44 + 48;
      v47 = *(_QWORD *)(v44 + 48);
      v49 = (*(_QWORD *)(v48 + 8) - v47) >> 4;
      if (v49 > v46)
        break;
      v566[0] = "usdSkel/bakeSkinning.cpp";
      v566[1] = "_CreateAdapters";
      *(_QWORD *)&v567 = 1850;
      *((_QWORD *)&v567 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CreateAdapters(const UsdSk"
                               "elBakeSkinningParms &, const UsdSkelCache &, std::vector<_SkelAdapterRefPtr> *, std::vect"
                               "or<_SkinningAdapterRefPtr> *, UsdGeomXformCache *)";
      LOBYTE(v568) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v566, (pxrInternal__aapl__pxrReserved__ *)"Layer index %d for the %zu'th binding >= number of layers [%zu]", v43, v46, v45, v49);
LABEL_167:
      ++v45;
      v44 = v528;
      if (v45 >= (uint64_t)(*(_QWORD *)(v528 + 32) - *(_QWORD *)(v528 + 24)) >> 6)
        goto LABEL_175;
    }
    v50 = (uint64_t *)(v47 + 16 * v46);
    v51 = sub_20BFD2F78(v50);
    if (!(v52 & 1 | (unint64_t)v51))
      goto LABEL_167;
    v53 = *(_QWORD *)(v528 + 24);
    v529 = (_QWORD *)(v53 + (v45 << 6) + 24);
    if (!*v529)
      goto LABEL_167;
    pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery(a1, (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)(v53 + (v45 << 6)), (uint64_t)v566);
    v54 = v566[0];
    if (v566[0])
    {
      v55 = (char *)operator new(0x198uLL);
      v526 = v53;
      *((_QWORD *)v55 + 1) = 0;
      *((_QWORD *)v55 + 2) = 0;
      *(_QWORD *)v55 = off_24C53F060;
      *((_QWORD *)v55 + 3) = v54;
      v56 = (unsigned __int8 *)(v55 + 24);
      sub_20BF1DD04((uint64_t *)v55 + 3);
      *((void **)v55 + 4) = v566[1];
      sub_20BF1DD04((uint64_t *)v55 + 4);
      *(_OWORD *)(v55 + 40) = v567;
      v57 = v569;
      *(_OWORD *)(v55 + 56) = v568;
      *(_OWORD *)(v55 + 72) = v57;
      v58 = v570;
      *((_QWORD *)v55 + 11) = v570;
      if (v58)
      {
        v59 = (unint64_t *)(v58 - 16);
        if (*((_QWORD *)v55 + 10))
          v59 = (unint64_t *)*((_QWORD *)v55 + 10);
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      v61 = DWORD2(v570);
      *((_OWORD *)v55 + 13) = 0u;
      *((_DWORD *)v55 + 24) = v61;
      v55[104] = v55[104] & 0xE0 | 8;
      *((_OWORD *)v55 + 7) = 0u;
      *((_OWORD *)v55 + 8) = 0u;
      *((_QWORD *)v55 + 18) = 0;
      v55[152] = v55[152] & 0xE0 | 8;
      *((_OWORD *)v55 + 10) = 0u;
      *((_OWORD *)v55 + 11) = 0u;
      *((_QWORD *)v55 + 24) = 0;
      v55[200] = v55[200] & 0xE0 | 8;
      *((_OWORD *)v55 + 14) = 0u;
      *((_QWORD *)v55 + 30) = 0;
      v55[248] = v55[248] & 0xE0 | 8;
      *((_QWORD *)v55 + 48) = 0;
      *((_QWORD *)v55 + 49) = 0;
      *((_QWORD *)v55 + 50) = 0;
      if (*((_QWORD *)v55 + 3)
        || (v564[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)"usdSkel/bakeSkinning.cpp",
            v564[1] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)"_SkelAdapter",
            v564[2] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)594,
            v564[3] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)"pxrInternal__aapl__pxrReserved__::(anonymous nam"
                                                                        "espace)::_SkelAdapter::_SkelAdapter(const UsdSke"
                                                                        "lBakeSkinningParms &, const UsdSkelSkeletonQuery"
                                                                        " &, UsdGeomXformCache *)",
            LOBYTE(v565) = 0,
            (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v564, "_skelQuery", 0) & 1) != 0))
      {
        if (sub_20C624E4C(1))
        {
          pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v566, v62, v63, (uint64_t)v564);
          sub_20C348EEC((uint64_t)v564, (int *)&v543);
          v64 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v543);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Creating adapter for skel at <%s>\n", v65, v66, v64);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v543 + 1);
          sub_20BFD265C(&v543);
          if (((uint64_t)v564[3] & 7) != 0)
          {
            v67 = (unsigned int *)((unint64_t)v564[3] & 0xFFFFFFFFFFFFFFF8);
            do
              v68 = __ldxr(v67);
            while (__stlxr(v68 - 2, v67));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v564[2] + 1);
          sub_20BFD265C(&v564[2]);
          if (v564[1])
            sub_20C35C614(v564[1]);
        }
        if ((*(_BYTE *)v528 & 7) != 0)
        {
          Skeleton = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v566, v62, v63);
          v70 = Skeleton;
          v72 = Skeleton + 1;
          v71 = Skeleton[1];
          if (v71)
          {
            if ((*(_BYTE *)(v71 + 57) & 8) == 0
              && (*(unsigned int (**)(uint64_t *))(*Skeleton + 32))(Skeleton))
            {
              AnimQuery = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v566);
              if (*(_QWORD *)AnimQuery)
              {
                Mapper = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetMapper((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v566);
                if (!pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull(Mapper))
                  goto LABEL_74;
              }
              pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetRestTransformsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v70, (uint64_t)v564);
              HasAuthoredValue = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v564);
              if (((uint64_t)v564[3] & 7) != 0)
              {
                v77 = (unsigned int *)((unint64_t)v564[3] & 0xFFFFFFFFFFFFFFF8);
                do
                  v78 = __ldxr(v77);
                while (__stlxr(v78 - 2, v77));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v564[2] + 1);
              sub_20BFD265C(&v564[2]);
              if (v564[1])
                sub_20C35C614(v564[1]);
              if (HasAuthoredValue)
              {
LABEL_74:
                v79 = v55[104] & 0xFC | 1;
                v55[104] = v79;
                v80 = v55[152] & 0xFC | 1;
                v55[152] = v80;
                if (*(_QWORD *)AnimQuery
                  && (v81 = pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::JointTransformsMightBeTimeVarying(AnimQuery, v74, v75), v79 = v55[104], v80 = v55[152], v81))
                {
                  v55[104] = v79 | 4;
                  v82 = v80 | 4;
                }
                else
                {
                  v55[104] = v79 & 0xFB;
                  v82 = v80 & 0xFB;
                }
                v55[152] = v82;
                v55[248] = v55[248] & 0xFC | 1;
                sub_20C35C4F8((uint64_t)v564, v72, (_DWORD *)v70 + 4);
                if (sub_20C63F654((int *)v564, (pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)__p))v83 = 4;
                else
                  v83 = 0;
                v55[248] = v55[248] & 0xFB | v83;
                if (((uint64_t)v564[3] & 7) != 0)
                {
                  v84 = (unsigned int *)((unint64_t)v564[3] & 0xFFFFFFFFFFFFFFF8);
                  do
                    v85 = __ldxr(v84);
                  while (__stlxr(v85 - 2, v84));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v564[2] + 1);
                sub_20BFD265C(&v564[2]);
                if (v564[1])
                  sub_20C35C614(v564[1]);
              }
            }
          }
        }
        if ((*(_BYTE *)v528 & 0x18) != 0)
        {
          v86 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v566);
          v88 = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)v86;
          if (*v86)
          {
            memset(v564, 0, 24);
            if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightAttributes(v86, (const char *)v564, v87))
            {
              v91 = v564[0];
              v92 = v564[1];
              if (v564[0] == v564[1])
              {
                LOBYTE(v93) = 0;
              }
              else
              {
                do
                {
                  v93 = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue(v91);
                  v91 = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)((char *)v91 + 32);
                  v94 = v91 == v92 || v93;
                }
                while (v94 != 1);
              }
              v55[200] = v55[200] & 0xFC | v93;
              if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::BlendShapeWeightsMightBeTimeVarying(v88, v89, v90))v95 = 4;
              else
                v95 = 0;
              v55[200] = v55[200] & 0xFB | v95;
            }
            v543 = v564;
            sub_20C3AEE3C((void ***)&v543);
          }
        }
        if (sub_20C624E4C(1))
        {
          pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v56, v96, v97, (uint64_t)v564);
          sub_20C348EEC((uint64_t)v564, (int *)&v547);
          v98 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v547);
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v99, v100, v55[104] & 1, (v55[104] >> 1) & 1, (v55[104] >> 2) & 1);
          if (SHIBYTE(v545) >= 0)
            v103 = &v543;
          else
            v103 = v543;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v101, v102, v55[152] & 1, (v55[152] >> 1) & 1, (v55[152] >> 2) & 1);
          if (v563[0] >= 0)
            v106 = &v561;
          else
            v106 = v561;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v104, v105, v55[200] & 1, (v55[200] >> 1) & 1, (v55[200] >> 2) & 1);
          v107 = SHIBYTE(v559);
          v108 = (void **)v557;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v109, v110, v55[248] & 1, (v55[248] >> 1) & 1, (v55[248] >> 2) & 1);
          v113 = &v557;
          if (v107 < 0)
            v113 = v108;
          v114 = &v554;
          if (v556 < 0)
            v114 = v554;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]\n  Initial state for skel <%s>:\n    _skinningXformsTask: %s\n    _skinningInvTransposeXformsTask: %s\n    _blendShapeWeightsTask: %s\n    _skelLocalToWorldXformTask: %s\n", v111, v112, v98, v103, v106, v113, v114);
          v56 = (unsigned __int8 *)(v55 + 24);
          if (SHIBYTE(v556) < 0)
            operator delete(v554);
          if (SHIBYTE(v559) < 0)
            operator delete(v557);
          if (SHIBYTE(v563[0]) < 0)
            operator delete(v561);
          if (SHIBYTE(v545) < 0)
            operator delete(v543);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v547 + 1);
          sub_20BFD265C(&v547);
          if (((uint64_t)v564[3] & 7) != 0)
          {
            v115 = (unsigned int *)((unint64_t)v564[3] & 0xFFFFFFFFFFFFFFF8);
            do
              v116 = __ldxr(v115);
            while (__stlxr(v116 - 2, v115));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v564[2] + 1);
          sub_20BFD265C(&v564[2]);
          if (v564[1])
            sub_20C35C614(v564[1]);
        }
      }
      v550 = v56;
      v551 = (std::__shared_weak_count *)v55;
      if (*v529)
      {
        v117 = *(_DWORD *)(*(_QWORD *)(v528 + 104) + 4 * v45);
        v118 = *(const pxrInternal__aapl__pxrReserved__::UsdPrim **)(v526 + (v45 << 6) + 56);
        v119 = (const pxrInternal__aapl__pxrReserved__::UsdPrim *)((char *)v118 + 400 * *v529);
        do
        {
          v120 = (std::__shared_weak_count *)operator new(0x8C8uLL);
          v120->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v120->__shared_owners_;
          v120->__shared_weak_owners_ = 0;
          v120->__vftable = (std::__shared_weak_count_vtbl *)off_24C53F0B0;
          v564[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)sub_20C63FA8C((uint64_t)&v120[1], (_BYTE *)v528, v118, &v550, v50, v117, (pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)__p);
          v564[1] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v120;
          if (LODWORD(v120[18].__shared_owners_))
            sub_20BFC3ABC((unint64_t *)&v534, (__int128 *)v564);
          do
            v122 = __ldaxr(p_shared_owners);
          while (__stlxr(v122 - 1, p_shared_owners));
          if (!v122)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v120);
          }
          v118 = (const pxrInternal__aapl__pxrReserved__::UsdPrim *)((char *)v118 + 400);
        }
        while (v118 != v119);
        v56 = (unsigned __int8 *)v550;
      }
      if ((~v56[80] & 3) == 0 || (~v56[128] & 3) == 0 || (~v56[176] & 3) == 0 || (~v56[224] & 3) == 0)
      {
        v123 = (_QWORD *)*((_QWORD *)&v537 + 1);
        if (*((_QWORD *)&v537 + 1) >= v538[0])
        {
          v128 = v537;
          v129 = (uint64_t)(*((_QWORD *)&v537 + 1) - v537) >> 4;
          v130 = v129 + 1;
          if ((unint64_t)(v129 + 1) >> 60)
            sub_20BDDF694();
          v131 = v538[0] - v537;
          if ((uint64_t)(v538[0] - v537) >> 3 > v130)
            v130 = v131 >> 3;
          if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF0)
            v132 = 0xFFFFFFFFFFFFFFFLL;
          else
            v132 = v130;
          v565 = (void **)v538;
          if (v132 >> 60)
            sub_20BDDF5B4();
          v133 = (char *)operator new(16 * v132);
          v124 = v551;
          v134 = (unsigned __int8 **)&v133[16 * v129];
          *v134 = v56;
          v134[1] = (unsigned __int8 *)v124;
          if (v124)
          {
            v135 = (unint64_t *)&v124->__shared_owners_;
            do
              v136 = __ldxr(v135);
            while (__stxr(v136 + 1, v135));
            v123 = (_QWORD *)*((_QWORD *)&v537 + 1);
          }
          if (v123 == (_QWORD *)v128)
          {
            v139 = vdupq_n_s64(v128);
            v137 = &v133[16 * v129];
          }
          else
          {
            v137 = &v133[16 * v129];
            do
            {
              v138 = *((_OWORD *)v123 - 1);
              v123 -= 2;
              *((_OWORD *)v137 - 1) = v138;
              v137 -= 16;
              *v123 = 0;
              v123[1] = 0;
            }
            while (v123 != (_QWORD *)v128);
            v139 = (int64x2_t)v537;
          }
          v127 = v134 + 2;
          *(_QWORD *)&v537 = v137;
          *((_QWORD *)&v537 + 1) = v134 + 2;
          *(int64x2_t *)&v564[1] = v139;
          v140 = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v538[0];
          v538[0] = &v133[16 * v132];
          v564[3] = v140;
          v564[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v139.i64[0];
          sub_20BDEA324((uint64_t)v564);
        }
        else
        {
          **((_QWORD **)&v537 + 1) = v56;
          v124 = v551;
          v123[1] = v551;
          if (v124)
          {
            v125 = (unint64_t *)&v124->__shared_owners_;
            do
              v126 = __ldxr(v125);
            while (__stxr(v126 + 1, v125));
          }
          v127 = v123 + 2;
        }
        *((_QWORD *)&v537 + 1) = v127;
        if (!v124)
          goto LABEL_166;
        goto LABEL_162;
      }
      v124 = v551;
      if (v551)
      {
LABEL_162:
        v141 = (unint64_t *)&v124->__shared_owners_;
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
        }
      }
    }
LABEL_166:
    sub_20BF5618C((uint64_t)&v568);
    sub_20C626160((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v566[1]);
    sub_20C62618C((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v566);
    goto LABEL_167;
  }
LABEL_175:
  v144 = (void *)sub_20C624E4C(1);
  if ((_DWORD)v144)
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Computing time samples for skinning\n", v145, v146);
  v531 = 0;
  v532 = 0;
  v533 = 0;
  memset(v564, 0, sizeof(v564));
  LODWORD(v565) = 1065353216;
  v147 = (uint64_t *)*((_QWORD *)&v537 + 1);
  v148 = (uint64_t *)v537;
  if ((_QWORD)v537 != *((_QWORD *)&v537 + 1))
  {
    do
    {
      v149 = (void **)sub_20C642604((uint64_t)v564, v148);
      v144 = *v149;
      if (*v149)
      {
        v149[1] = v144;
        operator delete(v144);
        *v149 = 0;
        v149[1] = 0;
        v149[2] = 0;
      }
      v148 += 2;
      *v149 = 0;
      v149[1] = 0;
      v149[2] = 0;
    }
    while (v148 != v147);
    v543 = &v537;
    v544 = (pxrInternal__aapl__pxrReserved__ *)a3;
    v545 = (__int128 *)v564;
    v150 = *((_QWORD *)&v537 + 1) - v537;
    if (*((_QWORD *)&v537 + 1) != (_QWORD)v537)
    {
      if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency((pxrInternal__aapl__pxrReserved__ *)v144))
      {
        LODWORD(v566[0]) = 0;
        v574 = 65539;
        v575 = 55;
        tbb::task_group_context::init((uint64_t)v566, v151, v152, v153);
        v561 = v566;
        v154 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v561, 0x38uLL);
        *(_BYTE *)(v154 - 11) = 1;
        *(_QWORD *)v154 = &off_24C53F178;
        *(_QWORD *)(v154 + 8) = v150 >> 4;
        *(_OWORD *)(v154 + 16) = xmmword_20CA59F70;
        *(_QWORD *)(v154 + 32) = &v543;
        initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v154);
        *(_DWORD *)(v154 + 48) = 0;
        *(_BYTE *)(v154 + 52) = 5;
        *(_QWORD *)(v154 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
        (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v154 - 40) + 16))(*(_QWORD *)(v154 - 40), v154, v154 - 8);
        tbb::task_group_context::~task_group_context((tbb::task_group_context *)v566);
      }
      else
      {
        sub_20C642FC0((uint64_t)&v543, 0, v150 >> 4);
      }
    }
  }
  v156 = v534;
  for (i = v535; v156 != i; v156 += 2)
  {
    v158 = *v156;
    v159 = sub_20C642604((uint64_t)v564, (uint64_t *)(*v156 + 400));
    v543 = 0;
    v544 = 0;
    v545 = 0;
    if ((~*(unsigned __int8 *)(v158 + 512) & 3) == 0
      && pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamplesInInterval(v158 + 560, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a3, (uint64_t)&v543))
    {
      sub_20C643478((uint64_t)v159, v159[1], (char *)v543, (char *)v544, (v544 - (pxrInternal__aapl__pxrReserved__ *)v543) >> 3);
    }
    if ((~*(unsigned __int8 *)(v158 + 680) & 3) == 0
      && pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamplesInInterval(v158 + 728, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a3, (uint64_t)&v543))
    {
      sub_20C643478((uint64_t)v159, v159[1], (char *)v543, (char *)v544, (v544 - (pxrInternal__aapl__pxrReserved__ *)v543) >> 3);
    }
    if ((~*(unsigned __int8 *)(v158 + 848) & 3) == 0
      && pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamplesInInterval(v158 + 896, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a3, (uint64_t)&v543))
    {
      sub_20C643478((uint64_t)v159, v159[1], (char *)v543, (char *)v544, (v544 - (pxrInternal__aapl__pxrReserved__ *)v543) >> 3);
    }
    if ((~*(unsigned __int8 *)(v158 + 1152) & 3) == 0)
    {
      Attribute = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(v158 + 1288));
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(Attribute, v161))
      {
        if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamplesInInterval(v158 + 1288, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a3, (uint64_t)&v543))sub_20C643478((uint64_t)v159, v159[1], (char *)v543, (char *)v544, (v544 - (pxrInternal__aapl__pxrReserved__ *)v543) >> 3);
      }
    }
    if ((~*(unsigned __int8 *)(v158 + 1488) & 3) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v566, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(v158 + 48));
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v569, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(v158 + 96));
      for (j = 0; j != 12; j += 6)
      {
        if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetTimeSamplesInInterval((uint64_t)&v566[j], (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a3, (uint64_t)&v543))sub_20C643478((uint64_t)v159, v159[1], (char *)v543, (char *)v544, (v544 - (pxrInternal__aapl__pxrReserved__ *)v543) >> 3);
      }
      v163 = (void **)&v572;
      do
      {
        v164 = (uint64_t)*(v163 - 2);
        if ((v164 & 7) != 0)
        {
          v165 = (unsigned int *)(v164 & 0xFFFFFFFFFFFFFFF8);
          do
            v166 = __ldxr(v165);
          while (__stlxr(v166 - 2, v165));
        }
        v167 = (uint64_t)*(v163 - 3);
        if ((v167 & 7) != 0)
        {
          v168 = (unsigned int *)(v167 & 0xFFFFFFFFFFFFFFF8);
          do
            v169 = __ldxr(v168);
          while (__stlxr(v169 - 2, v168));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v163 - 7);
        sub_20BFD265C((_DWORD *)v163 - 8);
        v170 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*(v163 - 5);
        if (v170)
          sub_20C35C614(v170);
        v163 -= 6;
      }
      while (v163 != v566);
    }
    if ((~*(unsigned __int8 *)(v158 + 1576) & 3) == 0)
      sub_20C6431C8((int *)v158, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a3, (uint64_t)v159);
    if ((~*(unsigned __int8 *)(v158 + 1712) & 3) == 0)
    {
      sub_20C3AD22C(v158, (uint64_t)v566);
      sub_20C6431C8((int *)v566, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a3, (uint64_t)v159);
      if ((BYTE8(v567) & 7) != 0)
      {
        v171 = (unsigned int *)(*((_QWORD *)&v567 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v172 = __ldxr(v171);
        while (__stlxr(v172 - 2, v171));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v567 + 1);
      sub_20BFD265C(&v567);
      if (v566[1])
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v566[1]);
    }
    v144 = v543;
    if (v543)
    {
      v544 = (pxrInternal__aapl__pxrReserved__ *)v543;
      operator delete(v543);
    }
  }
  v543 = v564;
  v544 = (pxrInternal__aapl__pxrReserved__ *)&v537;
  v173 = v528;
  if (*((_QWORD *)&v537 + 1) != (_QWORD)v537)
  {
    v177 = (uint64_t)(*((_QWORD *)&v537 + 1) - v537) >> 4;
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency((pxrInternal__aapl__pxrReserved__ *)v144))
    {
      LODWORD(v566[0]) = 0;
      v574 = 65539;
      v575 = 55;
      tbb::task_group_context::init((uint64_t)v566, v174, v175, v176);
      v561 = v566;
      v178 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v561, 0x38uLL);
      *(_BYTE *)(v178 - 11) = 1;
      *(_QWORD *)v178 = &off_24C53F1C0;
      *(_QWORD *)(v178 + 8) = v177;
      *(_OWORD *)(v178 + 16) = xmmword_20CA59F70;
      *(_QWORD *)(v178 + 32) = &v543;
      v179 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v178);
      *(_DWORD *)(v178 + 48) = 0;
      *(_BYTE *)(v178 + 52) = 5;
      *(_QWORD *)(v178 + 40) = (v179 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v178 - 40) + 16))(*(_QWORD *)(v178 - 40), v178, v178 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v566);
    }
    else
    {
      v180 = 0;
      do
      {
        v181 = (double **)sub_20C642604((uint64_t)v543, (uint64_t *)(*(_QWORD *)v544 + v180));
        std::__sort<std::__less<double,double> &,double *>();
        v182 = sub_20C27E94C(*v181, v181[1]);
        if (v181[1] != v182)
          v181[1] = v182;
        v180 += 16;
        --v177;
      }
      while (v177);
    }
  }
  v561 = 0;
  v562 = 0;
  v563[0] = 0;
  v183 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&v539);
  if ((pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v183) & 1) != 0)
  {
    v184 = (pxrInternal__aapl__pxrReserved__::PcpCache **)sub_20C348E08((uint64_t *)&v539);
    TimeCodesPerSecond = pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v184);
    v186 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&v539);
    FramesPerSecond = pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v186);
    if (fabs(TimeCodesPerSecond) >= 0.000001 && fabs(FramesPerSecond) >= 0.000001)
    {
      v188 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&v539);
      StartTimeCode = pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v188);
      v190 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&v539);
      EndTimeCode = pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(v190);
      if (EndTimeCode >= StartTimeCode)
      {
        v192 = fabs(TimeCodesPerSecond / FramesPerSecond);
        v193 = (uint64_t)((EndTimeCode - StartTimeCode) / v192 + 1.0);
        sub_20BE69DCC(&v561, v193);
        if ((v193 & 0x8000000000000000) == 0)
        {
          v194 = 0;
          do
          {
            v195 = StartTimeCode + v192 * (double)v194;
            if (*(double *)a3 < v195 || (*(double *)a3 == v195 ? (v196 = *(_BYTE *)(a3 + 8) == 0) : (v196 = 1), !v196))
            {
              v197 = *(double *)(a3 + 16);
              if (v197 > v195 || (v197 == v195 ? (v198 = *(_BYTE *)(a3 + 24) == 0) : (v198 = 1), !v198))
              {
                v199 = v562;
                if ((unint64_t)v562 >= v563[0])
                {
                  v201 = (double *)v561;
                  v202 = ((char *)v562 - (_BYTE *)v561) >> 3;
                  v203 = v202 + 1;
                  if ((unint64_t)(v202 + 1) >> 61)
                    sub_20BDDF694();
                  v204 = v563[0] - (_QWORD)v561;
                  if ((uint64_t)(v563[0] - (_QWORD)v561) >> 2 > v203)
                    v203 = v204 >> 2;
                  if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFF8)
                    v205 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v205 = v203;
                  if (v205)
                  {
                    v206 = (char *)sub_20BDDF6A8((uint64_t)v563, v205);
                    v201 = (double *)v561;
                    v199 = v562;
                  }
                  else
                  {
                    v206 = 0;
                  }
                  v207 = (double *)&v206[8 * v202];
                  *v207 = v195;
                  v200 = v207 + 1;
                  while (v199 != v201)
                  {
                    v208 = *((_QWORD *)v199-- - 1);
                    *((_QWORD *)v207-- - 1) = v208;
                  }
                  v561 = v207;
                  v562 = v200;
                  v563[0] = &v206[8 * v205];
                  if (v201)
                    operator delete(v201);
                }
                else
                {
                  *v562 = v195;
                  v200 = v199 + 1;
                }
                v562 = v200;
              }
            }
            v196 = v194++ == v193;
          }
          while (!v196);
        }
      }
    }
  }
  v557 = 0;
  v558 = 0;
  v559 = 0;
  v554 = 0;
  v555 = 0;
  v556 = 0;
  v551 = 0;
  v552 = 0;
  v550 = 0;
  sub_20BDDF5DC(&v550, v561, (uint64_t)v562, ((char *)v562 - (_BYTE *)v561) >> 3);
  sub_20C642A7C((double **)&v550, (double **)&v557, (double **)&v554);
  if (v550)
  {
    v551 = (std::__shared_weak_count *)v550;
    operator delete(v550);
  }
  for (k = v564[2]; k; k = *(pxrInternal__aapl__pxrReserved__::UsdAttribute **)k)
  {
    v547 = 0;
    v548 = 0;
    v549 = 0;
    sub_20BDDF5DC(&v547, *((const void **)k + 4), *((_QWORD *)k + 5), (uint64_t)(*((_QWORD *)k + 5) - *((_QWORD *)k + 4)) >> 3);
    sub_20C642A7C((double **)&v547, (double **)&v557, (double **)&v554);
    if (v547)
    {
      v548 = v547;
      operator delete(v547);
    }
  }
  v532 = (char *)v531;
  sub_20BE7E950(&v531, ((v558 - (_BYTE *)v557) >> 3) + 1);
  v210 = v532;
  if ((unint64_t)v532 >= v533)
  {
    v212 = (char *)v531;
    v213 = (v532 - (_BYTE *)v531) >> 3;
    v214 = v213 + 1;
    if ((unint64_t)(v213 + 1) >> 61)
      sub_20BDDF694();
    v215 = v533 - (_QWORD)v531;
    if ((uint64_t)(v533 - (_QWORD)v531) >> 2 > v214)
      v214 = v215 >> 2;
    if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF8)
      v216 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v216 = v214;
    if (v216)
    {
      v217 = (char *)sub_20BDDF6A8((uint64_t)&v533, v216);
      v212 = (char *)v531;
      v210 = v532;
    }
    else
    {
      v217 = 0;
    }
    v218 = &v217[8 * v213];
    v219 = &v217[8 * v216];
    *(_QWORD *)v218 = 0x7FF8000000000000;
    v211 = v218 + 8;
    while (v210 != v212)
    {
      v220 = *((_QWORD *)v210 - 1);
      v210 -= 8;
      *((_QWORD *)v218 - 1) = v220;
      v218 -= 8;
    }
    v531 = v218;
    v532 = v211;
    v533 = (unint64_t)v219;
    if (v212)
      operator delete(v212);
  }
  else
  {
    *(_QWORD *)v532 = 0x7FF8000000000000;
    v211 = v210 + 8;
  }
  v532 = v211;
  v221 = sub_20C643ADC((uint64_t)&v531, v211, (uint64_t *)v557, (uint64_t *)v558, (v558 - (_BYTE *)v557) >> 3);
  v543 = &v531;
  v544 = (pxrInternal__aapl__pxrReserved__ *)v564;
  v545 = &v537;
  v546[0] = &v557;
  v546[1] = &v561;
  v222 = *((_QWORD *)&v537 + 1) - v537;
  if (*((_QWORD *)&v537 + 1) != (_QWORD)v537)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency((pxrInternal__aapl__pxrReserved__ *)v221))
    {
      LODWORD(v566[0]) = 0;
      v574 = 65539;
      v575 = 55;
      tbb::task_group_context::init((uint64_t)v566, v223, v224, v225);
      v553 = v566;
      v227 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v553, 0x38uLL);
      *(_BYTE *)(v227 - 11) = 1;
      *(_QWORD *)v227 = &off_24C53F208;
      *(_QWORD *)(v227 + 8) = v222 >> 4;
      *(_OWORD *)(v227 + 16) = xmmword_20CA59F70;
      *(_QWORD *)(v227 + 32) = &v543;
      v228 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v227);
      *(_DWORD *)(v227 + 48) = 0;
      *(_BYTE *)(v227 + 52) = 5;
      *(_QWORD *)(v227 + 40) = (v228 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v227 - 40) + 16))(*(_QWORD *)(v227 - 40), v227, v227 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v566);
    }
    else
    {
      sub_20C64409C((uint64_t)&v543, 0, v222 >> 4, v226);
    }
  }
  if (v554)
  {
    v555 = v554;
    operator delete(v554);
  }
  if (v557)
  {
    v558 = (char *)v557;
    operator delete(v557);
  }
  if (v561)
  {
    v562 = (double *)v561;
    operator delete(v561);
  }
  sub_20C642B78((uint64_t)v564);
  if (sub_20C624E4C(1))
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Baking skinning for %zu prims, deformed by %zu skels, over %zu time samples\n", v229, v230, ((char *)v535 - (char *)v534) >> 4, (uint64_t)(*((_QWORD *)&v537 + 1) - v537) >> 4, (v532 - (_BYTE *)v531) >> 3);
  v231 = (pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)operator new(8uLL);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock(v231);
  v522 = v231;
  sub_20C645B18(&v561, (uint64_t)(*(_QWORD *)(v528 + 56) - *(_QWORD *)(v528 + 48)) >> 4);
  v232 = v531;
  if (v532 == v531)
  {
LABEL_421:
    if (sub_20C624E4C(1))
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Convert SkelRoot prims to Xforms\n", v351, v352);
    sub_20C6448DC(v564, (uint64_t)(*(_QWORD *)(v173 + 32) - *(_QWORD *)(v173 + 24)) >> 6);
    v353 = *(_QWORD *)(v173 + 24);
    if (*(_QWORD *)(v173 + 32) != v353)
    {
      v354 = v173;
      v355 = 0;
      do
      {
        v356 = *(unsigned int *)(*(_QWORD *)(v354 + 104) + 4 * v355);
        v358 = v354 + 48;
        v357 = *(_QWORD *)(v354 + 48);
        if (v356 < (*(_QWORD *)(v358 + 8) - v357) >> 4)
        {
          v359 = v353 + (v355 << 6);
          v360 = *(_QWORD *)(v359 + 24);
          if (v360)
          {
            v361 = (uint64_t *)(v357 + 16 * v356);
            v362 = *(pxrInternal__aapl__pxrReserved__::UsdSkelRoot **)(v359 + 56);
            v363 = 400 * v360;
            while (1)
            {
              pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Find(v362, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v543);
              if (v544)
              {
                if ((*((_BYTE *)v544 + 57) & 8) == 0 && (*((unsigned int (**)(void **))v543 + 4))(&v543))
                  break;
              }
              pxrInternal__aapl__pxrReserved__::UsdSkelRoot::~UsdSkelRoot((pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)&v543);
              v362 = (pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)((char *)v362 + 400);
              v363 -= 400;
              if (!v363)
                goto LABEL_444;
            }
            sub_20C35C4F8((uint64_t)v566, (uint64_t *)&v544, &v545);
            sub_20C348EEC((uint64_t)v566, (int *)&v554);
            pxrInternal__aapl__pxrReserved__::SdfCreatePrimInLayer(v361, (uint64_t)&v554, &v557);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v554 + 1);
            sub_20BFD265C(&v554);
            if ((BYTE8(v567) & 7) != 0)
            {
              v364 = (unsigned int *)(*((_QWORD *)&v567 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v365 = __ldxr(v364);
              while (__stlxr(v365 - 2, v364));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v567 + 1);
            sub_20BFD265C(&v567);
            if (v566[1])
              sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v566[1]);
            if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v557) & 1) == 0)
            {
              v367 = sub_20C0B0CA4((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v557);
              v368 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C641AD8();
              if ((*((_QWORD *)v368 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
                EmptyString = (uint64_t *)((*((_QWORD *)v368 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
              else
                EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v368);
              pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetTypeName(v367, (uint64_t)EmptyString);
              v370 = sub_20C0B0CA4((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v557);
              pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetSpecifier(v370, 0);
            }
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v366, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v557);
            pxrInternal__aapl__pxrReserved__::UsdSkelRoot::~UsdSkelRoot((pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)&v543);
          }
        }
LABEL_444:
        ++v355;
        v354 = v528;
        v353 = *(_QWORD *)(v528 + 24);
      }
      while (v355 < (*(_QWORD *)(v528 + 32) - v353) >> 6);
    }
    v566[0] = v564;
    sub_20C599B38((void ***)v566);
    if (v561)
    {
      v562 = (double *)v561;
      operator delete(v561);
    }
    v371 = (unint64_t)v522;
    v374 = v528;
    if (sub_20C624E4C(1))
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Processing stage changes\n", v372, v373);
    v375 = sub_20BFD2190(v522);
    operator delete(v375);
    if (*(_BYTE *)(v528 + 16))
    {
      if (sub_20C624E4C(1))
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Post-updating prim extents\n", v376, v377);
      memset(v564, 0, 24);
      sub_20C63F4F4((unint64_t *)v564, ((char *)v535 - (char *)v534) >> 4);
      v371 = (unint64_t)v534;
      v378 = v535;
      if (v534 != v535)
      {
        do
        {
          if ((*(_BYTE *)(*(_QWORD *)v371 + 416) & 9) != 0
            && pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)v371 + 2040)))
          {
            sub_20BFC3ABC((unint64_t *)v564, (__int128 *)v371);
          }
          v371 += 16;
        }
        while ((uint64_t *)v371 != v378);
      }
      if (sub_20C624E4C(1))
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Updating extents for %zu prims\n", v379, v380, (v564[1] - v564[0]) >> 4);
      if (v564[0] != v564[1])
      {
        v381 = (pxrInternal__aapl__pxrReserved__ *)sub_20C644A84(&v543, ((v532 - (_BYTE *)v531) >> 3) * ((v564[1] - v564[0]) >> 4));
        v561 = v564;
        v562 = (double *)&v531;
        v563[0] = &v543;
        if (v564[1] != v564[0])
        {
          v385 = (v564[1] - v564[0]) >> 4;
          if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v381))
          {
            LODWORD(v566[0]) = 0;
            v574 = 65539;
            v575 = 55;
            tbb::task_group_context::init((uint64_t)v566, v382, v383, v384);
            v557 = v566;
            v371 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v557, 0x38uLL);
            *(_BYTE *)(v371 - 11) = 1;
            *(_QWORD *)v371 = &off_24C53F298;
            *(_QWORD *)(v371 + 8) = v385;
            *(_OWORD *)(v371 + 16) = xmmword_20CA59F70;
            *(_QWORD *)(v371 + 32) = &v561;
            v386 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v371);
            *(_DWORD *)(v371 + 48) = 0;
            *(_BYTE *)(v371 + 52) = 5;
            *(_QWORD *)(v371 + 40) = (v386 >> 1) & 0x7FFFFFFFFFFFFFFELL;
            (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v371 - 40) + 16))(*(_QWORD *)(v371 - 40), v371, v371 - 8);
            tbb::task_group_context::~task_group_context((tbb::task_group_context *)v566);
          }
          else
          {
            v371 = 0;
            do
            {
              v388 = (const pxrInternal__aapl__pxrReserved__::UsdPrim **)(*(_QWORD *)v561 + 16 * v371);
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v566, *v388);
              v566[0] = off_24C53C378;
              v389 = v562;
              v390 = *v562;
              v391 = *((_QWORD *)v562 + 1) - *(_QWORD *)v562;
              if (v391)
              {
                v392 = 0;
                v393 = 0;
                v394 = v391 >> 3;
                do
                {
                  if (*((_DWORD *)*v388 + 104)
                    && ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v388 + 50) + 360) + ((v393 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v393) & 1) != 0)
                  {
                    pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::ComputeExtentFromPlugins((uint64_t)v566, *(_QWORD *)&v390 + v392, *(_QWORD *)v563[0] + 40 * (v393 + v371 * v394));
                    v389 = v562;
                    v390 = *v562;
                  }
                  ++v393;
                  v394 = (uint64_t)(*((_QWORD *)v389 + 1) - *(_QWORD *)&v390) >> 3;
                  v392 += 8;
                }
                while (v393 < v394);
              }
              pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)v566);
              ++v371;
            }
            while (v371 != v385);
          }
        }
        v395 = v564[0];
        if (v564[1] != v564[0])
        {
          v396 = 0;
          v371 = (unint64_t)&v567 + 4;
          do
          {
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v561, *((const pxrInternal__aapl__pxrReserved__::UsdPrim **)v395 + 2 * v396));
            v561 = off_24C53C378;
            pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetExtentAttr((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)&v561, (uint64_t)v566);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::Clear((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v566, v397);
            v399 = (double *)v531;
            v398 = v532;
            if (v532 != v531)
            {
              v400 = 0;
              v401 = (v532 - (_BYTE *)v531) >> 3;
              do
              {
                v402 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v543
                                                                              + 40 * v400
                                                                              + 40 * v396 * v401);
                if (*(_QWORD *)v402)
                {
                  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__ **)v566, v402, v399[v400]);
                  v399 = (double *)v531;
                  v398 = v532;
                }
                ++v400;
                v401 = (v398 - (char *)v399) >> 3;
              }
              while (v400 < v401);
            }
            if ((BYTE8(v567) & 7) != 0)
            {
              v403 = (unsigned int *)(*((_QWORD *)&v567 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v404 = __ldxr(v403);
              while (__stlxr(v404 - 2, v403));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v567 + 1);
            sub_20BFD265C(&v567);
            if (v566[1])
              sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v566[1]);
            pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)&v561);
            ++v396;
            v395 = v564[0];
          }
          while (v396 < (v564[1] - v564[0]) >> 4);
        }
        v566[0] = &v543;
        sub_20C5755EC((void ***)v566);
      }
      sub_20BFBE3A0((void **)v564);
    }
    if (*(_BYTE *)(v528 + 17))
    {
      if (sub_20C624E4C(1))
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Updating extent hints\n", v405, v406);
      memset(v564, 0, sizeof(v564));
      LODWORD(v565) = 1065353216;
      v525 = v535;
      if (v534 != v535)
      {
        v407 = v534;
        do
        {
          v527 = v407;
          v408 = (_DWORD *)*v407;
          LODWORD(v543) = *(_DWORD *)*v407;
          v409 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)v408 + 1);
          v544 = v409;
          if (v409)
          {
            v410 = (unint64_t *)((char *)v409 + 48);
            do
              v411 = __ldxr(v410);
            while (__stxr(v411 + 1, v410));
          }
          sub_20BFD6E54(&v545, v408 + 4);
          sub_20BFD6EA4((_DWORD *)&v545 + 1, v408 + 5);
          v412 = *((_QWORD *)v408 + 3);
          v546[0] = v412;
          if ((v412 & 7) != 0)
          {
            v413 = (unsigned int *)(v412 & 0xFFFFFFFFFFFFFFF8);
            do
              v414 = __ldxr(v413);
            while (__stxr(v414 + 2, v413));
            if ((v414 & 1) == 0)
              v546[0] &= 0xFFFFFFFFFFFFFFF8;
          }
          while (!pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v543))
          {
            v416 = v544;
            if (!v544 || (v417 = *((_QWORD *)v544 + 7), (v417 & 0x800) != 0))
            {
              pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v544, v415);
              v417 = *((_QWORD *)v416 + 7);
            }
            if ((v417 & 4) != 0)
            {
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v561, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v543);
              v563[1] = 0;
              v561 = off_24C53C890;
              pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI::GetExtentsHintAttr((pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI *)&v561, (uint64_t)&v557);
              if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v557, v418))
              {
                v566[0] = 0;
                LOBYTE(v566[1]) = 0;
                sub_20C3B0C60((uint64_t)v566, (unsigned int *)&v543, &v544, (unsigned int *)&v545, v546);
                v420 = bswap64(0x9E3779B97F4A7C55 * (unint64_t)v566[0]);
                v421 = (unint64_t)v564[1];
                if (v564[1])
                {
                  v422 = (uint8x8_t)vcnt_s8((int8x8_t)v564[1]);
                  v422.i16[0] = vaddlv_u8(v422);
                  if (v422.u32[0] > 1uLL)
                  {
                    v371 = v420;
                    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v420 >= v564[1])
                      v371 = v420 % (unint64_t)v564[1];
                  }
                  else
                  {
                    v371 = ((unint64_t)v564[1] - 1) & v420;
                  }
                  v423 = (_QWORD *)*((_QWORD *)v564[0] + v371);
                  if (v423)
                  {
                    v424 = (_QWORD *)*v423;
                    if (*v423)
                    {
                      do
                      {
                        v425 = v424[1];
                        if (v425 == v420)
                        {
                          if (*((_DWORD *)v424 + 4) == (_DWORD)v543
                            && (pxrInternal__aapl__pxrReserved__ *)v424[3] == v544
                            && (__int128 *)v424[4] == v545
                            && (v424[5] & 0xFFFFFFFFFFFFFFF8) == (v546[0] & 0xFFFFFFFFFFFFFFF8))
                          {
                            goto LABEL_590;
                          }
                        }
                        else
                        {
                          if (v422.u32[0] > 1uLL)
                          {
                            if ((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v425 >= v564[1])
                              v425 %= (unint64_t)v564[1];
                          }
                          else
                          {
                            v425 &= (unint64_t)v564[1] - 1;
                          }
                          if (v425 != v371)
                            break;
                        }
                        v424 = (_QWORD *)*v424;
                      }
                      while (v424);
                    }
                  }
                }
                v426 = operator new(0x58uLL);
                v427 = v426;
                v566[0] = v426;
                v566[1] = &v564[2];
                LOBYTE(v567) = 0;
                *v426 = 0;
                v426[1] = v420;
                *((_DWORD *)v426 + 4) = (_DWORD)v543;
                v428 = v544;
                v426[3] = v544;
                if (v428)
                {
                  v429 = (unint64_t *)((char *)v428 + 48);
                  do
                    v430 = __ldxr(v429);
                  while (__stxr(v430 + 1, v429));
                }
                sub_20BFD6E54((_DWORD *)v426 + 8, &v545);
                sub_20BFD6EA4((_DWORD *)v427 + 9, (_DWORD *)&v545 + 1);
                v431 = v546[0];
                v427[5] = v546[0];
                if ((v431 & 7) != 0)
                {
                  v432 = (unsigned int *)(v431 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v433 = __ldxr(v432);
                  while (__stxr(v433 + 2, v432));
                  if ((v433 & 1) == 0)
                    v427[5] &= 0xFFFFFFFFFFFFFFF8;
                }
                v427[10] = 0;
                *((_OWORD *)v427 + 3) = 0u;
                *((_OWORD *)v427 + 4) = 0u;
                LOBYTE(v567) = 1;
                v434 = (float)((unint64_t)v564[3] + 1);
                if (!v421 || (float)(*(float *)&v565 * (float)v421) < v434)
                {
                  v435 = (v421 & (v421 - 1)) == 0;
                  if (v421 < 3)
                    v435 = 0;
                  v436 = (2 * v421) | !v435;
                  v437 = vcvtps_u32_f32(v434 / *(float *)&v565);
                  if (v436 <= v437)
                    prime = (int8x8_t)v437;
                  else
                    prime = (int8x8_t)v436;
                  if (*(_QWORD *)&prime == 1)
                  {
                    prime = (int8x8_t)2;
                  }
                  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                  {
                    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                  }
                  v421 = (unint64_t)v564[1];
                  if ((pxrInternal__aapl__pxrReserved__::UsdAttribute *)*(_QWORD *)&prime <= v564[1])
                  {
                    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute *)*(_QWORD *)&prime < v564[1])
                    {
                      v445 = vcvtps_u32_f32((float)(unint64_t)v564[3] / *(float *)&v565);
                      if (v564[1] < (pxrInternal__aapl__pxrReserved__::UsdAttribute *)3
                        || (v446 = (uint8x8_t)vcnt_s8((int8x8_t)v564[1]),
                            v446.i16[0] = vaddlv_u8(v446),
                            v446.u32[0] > 1uLL))
                      {
                        v445 = std::__next_prime(v445);
                      }
                      else
                      {
                        v447 = 1 << -(char)__clz(v445 - 1);
                        if (v445 >= 2)
                          v445 = v447;
                      }
                      if (*(_QWORD *)&prime <= v445)
                        prime = (int8x8_t)v445;
                      if (*(_QWORD *)&prime >= v421)
                      {
                        v421 = (unint64_t)v564[1];
                      }
                      else
                      {
                        if (prime)
                          goto LABEL_547;
                        v466 = v564[0];
                        v564[0] = 0;
                        if (v466)
                          operator delete(v466);
                        v421 = 0;
                        v564[1] = 0;
                      }
                    }
                  }
                  else
                  {
LABEL_547:
                    if (*(_QWORD *)&prime >> 61)
                      sub_20BDDF5B4();
                    v439 = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)operator new(8 * *(_QWORD *)&prime);
                    v440 = v564[0];
                    v564[0] = v439;
                    if (v440)
                      operator delete(v440);
                    v441 = 0;
                    v564[1] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)prime;
                    do
                      *((_QWORD *)v564[0] + v441++) = 0;
                    while (*(_QWORD *)&prime != v441);
                    v442 = v564[2];
                    if (v564[2])
                    {
                      v443 = *((_QWORD *)v564[2] + 1);
                      v444 = (uint8x8_t)vcnt_s8(prime);
                      v444.i16[0] = vaddlv_u8(v444);
                      if (v444.u32[0] > 1uLL)
                      {
                        if (v443 >= *(_QWORD *)&prime)
                          v443 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v443 &= *(_QWORD *)&prime - 1;
                      }
                      *((_QWORD *)v564[0] + v443) = &v564[2];
                      v448 = *(pxrInternal__aapl__pxrReserved__::UsdAttribute **)v442;
                      if (*(_QWORD *)v442)
                      {
                        do
                        {
                          v449 = *((_QWORD *)v448 + 1);
                          if (v444.u32[0] > 1uLL)
                          {
                            if (v449 >= *(_QWORD *)&prime)
                              v449 %= *(_QWORD *)&prime;
                          }
                          else
                          {
                            v449 &= *(_QWORD *)&prime - 1;
                          }
                          if (v449 != v443)
                          {
                            if (!*((_QWORD *)v564[0] + v449))
                            {
                              *((_QWORD *)v564[0] + v449) = v442;
                              goto LABEL_572;
                            }
                            *(_QWORD *)v442 = *(_QWORD *)v448;
                            *(_QWORD *)v448 = **((_QWORD **)v564[0] + v449);
                            **((_QWORD **)v564[0] + v449) = v448;
                            v448 = v442;
                          }
                          v449 = v443;
LABEL_572:
                          v442 = v448;
                          v448 = *(pxrInternal__aapl__pxrReserved__::UsdAttribute **)v448;
                          v443 = v449;
                        }
                        while (v448);
                      }
                    }
                    v421 = (unint64_t)prime;
                  }
                  if ((v421 & (v421 - 1)) != 0)
                  {
                    if (v420 >= v421)
                      v371 = v420 % v421;
                    else
                      v371 = v420;
                  }
                  else
                  {
                    v371 = (v421 - 1) & v420;
                  }
                }
                v450 = (_QWORD *)*((_QWORD *)v564[0] + v371);
                if (v450)
                {
                  *(_QWORD *)v566[0] = *v450;
                  *v450 = v566[0];
                }
                else
                {
                  *(_QWORD *)v566[0] = v564[2];
                  v564[2] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v566[0];
                  *((_QWORD *)v564[0] + v371) = &v564[2];
                  if (*(_QWORD *)v566[0])
                  {
                    v451 = *(_QWORD *)(*(_QWORD *)v566[0] + 8);
                    if ((v421 & (v421 - 1)) != 0)
                    {
                      if (v451 >= v421)
                        v451 %= v421;
                    }
                    else
                    {
                      v451 &= v421 - 1;
                    }
                    *((void **)v564[0] + v451) = v566[0];
                  }
                }
                v424 = v566[0];
                v566[0] = 0;
                ++v564[3];
                sub_20C645108((uint64_t)v566);
LABEL_590:
                if (*((_DWORD *)v424 + 14))
                {
                  v566[0] = "vt/array.h";
                  v566[1] = "emplace_back";
                  *(_QWORD *)&v567 = 433;
                  *((_QWORD *)&v567 + 1) = "void pxrInternal__aapl__pxrReserved__::VtArray<std::shared_ptr<pxrInternal__a"
                                           "apl__pxrReserved__::(anonymous namespace)::_SkinningAdapter>>::emplace_back(A"
                                           "rgs &&...) [ELEM = std::shared_ptr<pxrInternal__aapl__pxrReserved__::(anonymo"
                                           "us namespace)::_SkinningAdapter>, Args = <const std::shared_ptr<pxrInternal__"
                                           "aapl__pxrReserved__::(anonymous namespace)::_SkinningAdapter> &>]";
                  LOBYTE(v568) = 0;
                  if (*((_DWORD *)v424 + 15))
                  {
                    if (*((_DWORD *)v424 + 16))
                      v481 = 4;
                    else
                      v481 = 3;
                  }
                  else
                  {
                    v481 = 2;
                  }
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v566, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v481);
                }
                else
                {
                  v452 = v424[6];
                  if (v424[9])
                    goto LABEL_628;
                  v453 = v424[10];
                  if (!v453)
                    goto LABEL_599;
                  v454 = atomic_load((unint64_t *)(v453 - 16));
                  if (v454 != 1)
                    goto LABEL_628;
                  v453 = v424[10];
                  if (!v453)
                  {
LABEL_599:
                    v456 = 0;
                    goto LABEL_600;
                  }
                  if (v424[9])
                    v455 = v424 + 6;
                  else
                    v455 = (uint64_t *)(v453 - 8);
                  v456 = *v455;
LABEL_600:
                  if (v452 != v456)
                  {
                    v457 = *(_OWORD *)v527;
                    *(_OWORD *)(v453 + 16 * v452) = *(_OWORD *)v527;
                    if (*((_QWORD *)&v457 + 1))
                    {
                      v458 = (unint64_t *)(*((_QWORD *)&v457 + 1) + 8);
                      do
                        v459 = __ldxr(v458);
                      while (__stxr(v459 + 1, v458));
                    }
                    goto LABEL_604;
                  }
LABEL_628:
                  v371 = v424[10];
                  v467 = 1;
                  do
                  {
                    v468 = v467;
                    v467 *= 2;
                  }
                  while (v468 < v452 + 1);
                  sub_20BEB59B0((uint64_t)v566, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<std::shared_ptr<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinningAdapter>>::_AllocateNew(size_t) [ELEM = std::shared_ptr<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinningAdapter>]");
                  if (v468 > 0xFFFFFFFFFFFFFFELL)
                    v469 = -1;
                  else
                    v469 = 16 * v468 + 16;
                  v470 = operator new(v469);
                  *v470 = 1;
                  v470[1] = v468;
                  v524 = v470;
                  while (LODWORD(v566[1])--)
                    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v566[0]);
                  v472 = v524 + 2;
                  if (v452)
                  {
                    v473 = v371 + 16 * v452;
                    v474 = v524 + 2;
                    do
                    {
                      *v474 = *(_QWORD *)v371;
                      v475 = *(_QWORD *)(v371 + 8);
                      v474[1] = v475;
                      if (v475)
                      {
                        v476 = (unint64_t *)(v475 + 8);
                        do
                          v477 = __ldxr(v476);
                        while (__stxr(v477 + 1, v476));
                      }
                      v371 += 16;
                      v474 += 2;
                    }
                    while (v371 != v473);
                  }
                  v478 = *(_OWORD *)v527;
                  *(_OWORD *)&v472[2 * v452] = *(_OWORD *)v527;
                  if (*((_QWORD *)&v478 + 1))
                  {
                    v479 = (unint64_t *)(*((_QWORD *)&v478 + 1) + 8);
                    do
                      v480 = __ldxr(v479);
                    while (__stxr(v480 + 1, v479));
                  }
                  sub_20C6451BC(v424 + 6);
                  v424[10] = v472;
LABEL_604:
                  ++v424[6];
                }
                pxrInternal__aapl__pxrReserved__::UsdAttribute::Clear((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v557, v419);
              }
              if ((v560 & 7) != 0)
              {
                v460 = (unsigned int *)(v560 & 0xFFFFFFFFFFFFFFF8);
                do
                  v461 = __ldxr(v460);
                while (__stlxr(v461 - 2, v460));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v559 + 1);
              sub_20BFD265C(&v559);
              if (v558)
                sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v558);
              pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI::~UsdGeomModelAPI((pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI *)&v561);
            }
            sub_20C3AD22C((uint64_t)&v543, (uint64_t)v566);
            LODWORD(v543) = v566[0];
            v462 = (pxrInternal__aapl__pxrReserved__ *)v566[1];
            v566[1] = 0;
            v463 = v544;
            v544 = v462;
            if (v463)
              sub_20C35C614(v463);
            sub_20BFD3EBC((int *)&v545, (int *)&v567);
            sub_20BFD3F10((int *)&v545 + 1, (int *)&v567 + 1);
            if ((v546[0] & 7) != 0)
            {
              v464 = (unsigned int *)(v546[0] & 0xFFFFFFFFFFFFFFF8);
              do
                v465 = __ldxr(v464);
              while (__stlxr(v465 - 2, v464));
            }
            v546[0] = *((_QWORD *)&v567 + 1);
            *((_QWORD *)&v567 + 1) = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v567 + 1);
            sub_20BFD265C(&v567);
            if (v566[1])
              sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v566[1]);
          }
          if ((v546[0] & 7) != 0)
          {
            v482 = (unsigned int *)(v546[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v483 = __ldxr(v482);
            while (__stlxr(v483 - 2, v482));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v545 + 1);
          sub_20BFD265C(&v545);
          if (v544)
            sub_20C35C614(v544);
          v407 = v527 + 2;
        }
        while (v527 + 2 != v525);
      }
      v374 = v528;
      if (sub_20C624E4C(1))
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Updating extent hints for %zu prims\n", v484, v485, v564[3]);
      if (v564[3])
      {
        v561 = 0;
        v562 = 0;
        v563[0] = 0;
        sub_20C644FF0(&v561, (unint64_t)v564[3]);
        v557 = 0;
        v558 = 0;
        v559 = 0;
        v486 = v564[3];
        if (v564[3])
        {
          if (v564[3] >= (pxrInternal__aapl__pxrReserved__::UsdAttribute *)0x666666666666667)
            sub_20BDDF694();
          v487 = (char *)operator new(40 * (uint64_t)v564[3]);
          bzero(v487, 40 * ((40 * (uint64_t)v486 - 40) / 0x28uLL) + 40);
          v557 = v487;
          v558 = &v487[40 * ((40 * (uint64_t)v486 - 40) / 0x28uLL) + 40];
          v559 = &v487[40 * (_QWORD)v486];
        }
        v488 = v564[2];
        if (v564[2])
        {
          v489 = 0;
          do
          {
            v490 = (char *)v561 + 32 * v489;
            *(_DWORD *)v490 = *((_DWORD *)v488 + 4);
            v491 = *((_QWORD *)v488 + 3);
            if (v491)
            {
              v492 = (unint64_t *)(v491 + 48);
              do
                v493 = __ldxr(v492);
              while (__stxr(v493 + 1, v492));
            }
            v494 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)v490 + 1);
            *((_QWORD *)v490 + 1) = v491;
            if (v494)
              sub_20C35C614(v494);
            sub_20C01A074((int *)v490 + 4, (_DWORD *)v488 + 8);
            sub_20C01A0C8((int *)v490 + 5, (_DWORD *)v488 + 9);
            sub_20BF32220((_QWORD *)v490 + 3, (_QWORD *)v488 + 5);
            v495 = v557;
            v496 = (char *)v557 + 40 * v489;
            if (v496 != (char *)v488 + 48)
            {
              v497 = *((_OWORD *)v488 + 4);
              *(_OWORD *)v566 = *((_OWORD *)v488 + 3);
              v567 = v497;
              v498 = *((_QWORD *)v488 + 10);
              *(_QWORD *)&v568 = v498;
              if (v498)
              {
                v499 = (unint64_t *)*((_QWORD *)&v567 + 1);
                if (!*((_QWORD *)&v567 + 1))
                  v499 = (unint64_t *)(v498 - 16);
                do
                  v500 = __ldxr(v499);
                while (__stxr(v500 + 1, v499));
              }
              sub_20C6451BC(v496);
              *(_OWORD *)v496 = *(_OWORD *)v566;
              *((_OWORD *)v496 + 1) = v567;
              *(_OWORD *)v566 = 0u;
              v567 = 0u;
              v495[5 * v489 + 4] = v498;
              *(_QWORD *)&v568 = 0;
              sub_20C6451BC(v566);
            }
            ++v489;
            v488 = *(pxrInternal__aapl__pxrReserved__::UsdAttribute **)v488;
          }
          while (v488);
        }
        v501 = (pxrInternal__aapl__pxrReserved__ *)sub_20C644A84(&v554, (((char *)v535 - (char *)v534) >> 4)* ((v532 - (_BYTE *)v531) >> 3));
        v543 = &v531;
        v544 = (pxrInternal__aapl__pxrReserved__ *)&v557;
        v545 = (__int128 *)&v561;
        v546[0] = &v554;
        v502 = v532 - (_BYTE *)v531;
        if (v532 != v531)
        {
          if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v501))
          {
            LODWORD(v566[0]) = 0;
            v574 = 65539;
            v575 = 55;
            tbb::task_group_context::init((uint64_t)v566, v503, v504, v505);
            v550 = v566;
            v506 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v550, 0x38uLL);
            *(_BYTE *)(v506 - 11) = 1;
            *(_QWORD *)v506 = &off_24C53F2E0;
            *(_QWORD *)(v506 + 8) = v502 >> 3;
            *(_OWORD *)(v506 + 16) = xmmword_20CA59F70;
            *(_QWORD *)(v506 + 32) = &v543;
            v507 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v506);
            *(_DWORD *)(v506 + 48) = 0;
            *(_BYTE *)(v506 + 52) = 5;
            *(_QWORD *)(v506 + 40) = (v507 >> 1) & 0x7FFFFFFFFFFFFFFELL;
            (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v506 - 40) + 16))(*(_QWORD *)(v506 - 40), v506, v506 - 8);
            tbb::task_group_context::~task_group_context((tbb::task_group_context *)v566);
          }
          else
          {
            sub_20C645848((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)&v543, 0, v502 >> 3);
          }
        }
        v508 = (char *)v561;
        if (v562 != v561)
        {
          v509 = 0;
          do
          {
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v566, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v508[32 * v509]);
            *((_QWORD *)&v567 + 1) = 0;
            v566[0] = off_24C53C890;
            v511 = (char *)v531;
            v510 = v532;
            if (v532 != v531)
            {
              v512 = 0;
              v513 = 0;
              v514 = (v532 - (_BYTE *)v531) >> 3;
              do
              {
                v515 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v554
                                                                              + 40 * v513
                                                                              + 40 * v509 * v514);
                if (*(_QWORD *)v515)
                {
                  pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI::SetExtentsHint((uint64_t)v566, v515, (double *)&v511[v512]);
                  v511 = (char *)v531;
                  v510 = v532;
                }
                ++v513;
                v514 = (v510 - v511) >> 3;
                v512 += 8;
              }
              while (v513 < v514);
            }
            pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI::~UsdGeomModelAPI((pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI *)v566);
            ++v509;
            v508 = (char *)v561;
          }
          while (v509 < ((char *)v562 - (_BYTE *)v561) >> 5);
        }
        v566[0] = &v554;
        sub_20C5755EC((void ***)v566);
        sub_20C645074(&v557);
        v566[0] = &v561;
        sub_20C45FC78((void ***)v566);
      }
      sub_20C6450AC((uint64_t)v564);
    }
    if (*(_BYTE *)(v374 + 4))
      v143 = sub_20C63E4A4(v374);
    else
      v143 = 1;
    goto LABEL_695;
  }
  v233 = 0;
  v523 = 0;
  while (1)
  {
    v554 = (void *)v232[v233];
    if (sub_20C624E4C(1))
    {
      sub_20C53FBD0((double *)&v554);
      v238 = v566;
      if (SBYTE7(v567) < 0)
        v238 = (void **)v566[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Baking skinning at sample %zu (time=%s)\n", v236, v237, v233, v238);
      if (SBYTE7(v567) < 0)
        operator delete(v566[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::SetTime((uint64_t)__p, v234, v235, *(double *)&v554);
    if (sub_20C624E4C(1))
    {
      sub_20C53FBD0((double *)&v554);
      v241 = v566;
      if (SBYTE7(v567) < 0)
        v241 = (void **)v566[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Reading skel transforms at time %s\n", v239, v240, v241);
      if (SBYTE7(v567) < 0)
        operator delete(v566[0]);
    }
    v243 = (uint64_t *)*((_QWORD *)&v537 + 1);
    v242 = (uint64_t *)v537;
    for (m = v233 >> 6; v242 != v243; v242 += 2)
    {
      v245 = *v242;
      if ((*(_QWORD *)(*(_QWORD *)(*v242 + 360) + 8 * m) & (1 << v233)) != 0)
      {
        if (sub_20C624E4C(1))
        {
          pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v245, v246, v247, (uint64_t)v566);
          sub_20C348EEC((uint64_t)v566, (int *)&v543);
          v248 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v543);
          v557 = v542;
          sub_20C53FBD0((double *)&v557);
          v251 = v564;
          if (SHIBYTE(v564[2]) < 0)
            v251 = (pxrInternal__aapl__pxrReserved__::UsdAttribute **)v564[0];
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Updating transform for <%s> @ time %s\n", v249, v250, v248, v251);
          if (SHIBYTE(v564[2]) < 0)
            operator delete(v564[0]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v543 + 1);
          sub_20BFD265C(&v543);
          if ((BYTE8(v567) & 7) != 0)
          {
            v252 = (unsigned int *)(*((_QWORD *)&v567 + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v253 = __ldxr(v252);
            while (__stlxr(v253 - 2, v252));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v567 + 1);
          sub_20BFD265C(&v567);
          if (v566[1])
            sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v566[1]);
        }
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v245, v246, v247, (uint64_t)&v543);
        if ((~*(unsigned __int8 *)(v245 + 224) & 3) == 0)
        {
          if (sub_20C624E4C(1))
          {
            sub_20C348EEC((uint64_t)&v543, (int *)v566);
            v256 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v566);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v257, v258, "compute skel local to world xform", v256);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v566 + 1);
            sub_20BFD265C(v566);
          }
          if ((*(_BYTE *)(v245 + 224) & 0xC) != 0)
          {
            pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v245, v254, v255, (uint64_t)v564);
            pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalToWorldTransform((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)__p, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v564, (uint64_t)v566);
            v259 = v567;
            *(_OWORD *)(v245 + 232) = *(_OWORD *)v566;
            *(_OWORD *)(v245 + 248) = v259;
            v260 = v571;
            *(_OWORD *)(v245 + 296) = v570;
            *(_OWORD *)(v245 + 312) = v260;
            v261 = v573;
            *(_OWORD *)(v245 + 328) = v572;
            *(_OWORD *)(v245 + 344) = v261;
            v262 = v569;
            *(_OWORD *)(v245 + 264) = v568;
            *(_OWORD *)(v245 + 280) = v262;
            if (((uint64_t)v564[3] & 7) != 0)
            {
              v263 = (unsigned int *)((unint64_t)v564[3] & 0xFFFFFFFFFFFFFFF8);
              do
                v264 = __ldxr(v263);
              while (__stlxr(v264 - 2, v263));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v564[2] + 1);
            sub_20BFD265C(&v564[2]);
            if (v564[1])
              sub_20C35C614(v564[1]);
            *(_BYTE *)(v245 + 224) |= 0x10u;
            if (sub_20C624E4C(1))
            {
              sub_20C348EEC((uint64_t)&v543, (int *)v566);
              v265 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v566);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v266, v267, "compute skel local to world xform", v265, (*(unsigned __int8 *)(v245 + 224) >> 4) & 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v566 + 1);
              sub_20BFD265C(v566);
            }
            *(_BYTE *)(v245 + 224) &= ~8u;
          }
          else if (sub_20C624E4C(1))
          {
            sub_20C348EEC((uint64_t)&v543, (int *)v566);
            v269 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v566);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v270, v271, "compute skel local to world xform", v269);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v566 + 1);
            sub_20BFD265C(v566);
          }
        }
        if ((v546[0] & 7) != 0)
        {
          v272 = (unsigned int *)(v546[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v273 = __ldxr(v272);
          while (__stlxr(v273 - 2, v272));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v545 + 1);
        sub_20BFD265C(&v545);
        if (v544)
          sub_20C35C614(v544);
      }
    }
    if (sub_20C624E4C(1))
    {
      sub_20C53FBD0((double *)&v554);
      v276 = v566;
      if (SBYTE7(v567) < 0)
        v276 = (void **)v566[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Reading skinned prim transforms at time %s\n", v274, v275, v276);
      if (SBYTE7(v567) < 0)
        operator delete(v566[0]);
    }
    v277 = v534;
    for (n = v535; v277 != n; v277 += 2)
    {
      v279 = *v277;
      if (*(_DWORD *)(*v277 + 416)
        && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v279 + 400) + 360) + 8 * m) & (1 << v233)) != 0)
      {
        if (sub_20C624E4C(1))
        {
          sub_20C348EEC(v279, (int *)v564);
          v280 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v564);
          v543 = v542;
          sub_20C53FBD0((double *)&v543);
          v283 = v566;
          if (SBYTE7(v567) < 0)
            v283 = (void **)v566[0];
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Updating transforms for <%s> @ time %s\n", v281, v282, v280, v283);
          if (SBYTE7(v567) < 0)
            operator delete(v566[0]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v564 + 1);
          sub_20BFD265C(v564);
        }
        if ((~*(unsigned __int8 *)(v279 + 1576) & 3) == 0)
        {
          if (sub_20C624E4C(1))
          {
            sub_20C348EEC(v279, (int *)v566);
            v284 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v566);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v285, v286, "compute prim local to world xform", v284);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v566 + 1);
            sub_20BFD265C(v566);
          }
          if ((*(_BYTE *)(v279 + 1576) & 0xC) != 0)
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalToWorldTransform((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)__p, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v279, (uint64_t)v566);
            v287 = v571;
            *(_OWORD *)(v279 + 1648) = v570;
            *(_OWORD *)(v279 + 1664) = v287;
            v288 = v573;
            *(_OWORD *)(v279 + 1680) = v572;
            *(_OWORD *)(v279 + 1696) = v288;
            v289 = v567;
            *(_OWORD *)(v279 + 1584) = *(_OWORD *)v566;
            *(_OWORD *)(v279 + 1600) = v289;
            v290 = v569;
            *(_OWORD *)(v279 + 1616) = v568;
            *(_OWORD *)(v279 + 1632) = v290;
            *(_BYTE *)(v279 + 1576) |= 0x10u;
            if (sub_20C624E4C(1))
            {
              sub_20C348EEC(v279, (int *)v566);
              v291 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v566);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v292, v293, "compute prim local to world xform", v291, (*(unsigned __int8 *)(v279 + 1576) >> 4) & 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v566 + 1);
              sub_20BFD265C(v566);
            }
            *(_BYTE *)(v279 + 1576) &= ~8u;
          }
          else if (sub_20C624E4C(1))
          {
            sub_20C348EEC(v279, (int *)v566);
            v295 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v566);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v296, v297, "compute prim local to world xform", v295);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v566 + 1);
            sub_20BFD265C(v566);
          }
        }
        if ((~*(unsigned __int8 *)(v279 + 1712) & 3) == 0)
        {
          if (sub_20C624E4C(1))
          {
            sub_20C348EEC(v279, (int *)v566);
            v298 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v566);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v299, v300, "compute prim parent to world xform", v298);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v566 + 1);
            sub_20BFD265C(v566);
          }
          if ((*(_BYTE *)(v279 + 1712) & 0xC) != 0)
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetParentToWorldTransform((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)__p, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v279, v566);
            v304 = v571;
            *(_OWORD *)(v279 + 1784) = v570;
            *(_OWORD *)(v279 + 1800) = v304;
            v305 = v573;
            *(_OWORD *)(v279 + 1816) = v572;
            *(_OWORD *)(v279 + 1832) = v305;
            v306 = v567;
            *(_OWORD *)(v279 + 1720) = *(_OWORD *)v566;
            *(_OWORD *)(v279 + 1736) = v306;
            v307 = v569;
            *(_OWORD *)(v279 + 1752) = v568;
            *(_OWORD *)(v279 + 1768) = v307;
            *(_BYTE *)(v279 + 1712) |= 0x10u;
            if (sub_20C624E4C(1))
            {
              sub_20C348EEC(v279, (int *)v566);
              v308 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v566);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v309, v310, "compute prim parent to world xform", v308, (*(unsigned __int8 *)(v279 + 1712) >> 4) & 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v566 + 1);
              sub_20BFD265C(v566);
            }
            *(_BYTE *)(v279 + 1712) &= ~8u;
          }
          else if (sub_20C624E4C(1))
          {
            sub_20C348EEC(v279, (int *)v566);
            v301 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v566);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v302, v303, "compute prim parent to world xform", v301);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v566 + 1);
            sub_20BFD265C(v566);
          }
        }
      }
    }
    v173 = v528;
    if (sub_20C624E4C(1))
    {
      sub_20C53FBD0((double *)&v554);
      v316 = v566;
      if (SBYTE7(v567) < 0)
        v316 = (void **)v566[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Reading skel animation at time %s\n", v314, v315, v316);
      if (SBYTE7(v567) < 0)
        operator delete(v566[0]);
    }
    v317 = v537;
    v564[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v554;
    v564[1] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v233;
    LODWORD(v566[0]) = 0;
    v574 = 65539;
    v575 = 55;
    tbb::task_group_context::init((uint64_t)v566, v311, v312, v313);
    if ((unint64_t)v317 < *((_QWORD *)&v317 + 1))
    {
      v543 = v566;
      v318 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v543, 0x38uLL);
      *(_BYTE *)(v318 - 11) = 1;
      *(_QWORD *)v318 = &off_24C53F328;
      *(_QWORD *)(v318 + 8) = *((_QWORD *)&v317 + 1);
      *(_QWORD *)(v318 + 16) = v317;
      *(_QWORD *)(v318 + 24) = 1;
      *(_QWORD *)(v318 + 32) = v564;
      v319 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v318);
      *(_DWORD *)(v318 + 48) = 0;
      *(_BYTE *)(v318 + 52) = 5;
      *(_QWORD *)(v318 + 40) = (v319 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v318 - 40) + 16))(*(_QWORD *)(v318 - 40), v318, v318 - 8);
    }
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v566);
    if (sub_20C624E4C(1))
    {
      sub_20C53FBD0((double *)&v554);
      v325 = v566;
      if (SBYTE7(v567) < 0)
        v325 = (void **)v566[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Updating skinning adapters at time %s\n", v323, v324, v325);
      if (SBYTE7(v567) < 0)
        operator delete(v566[0]);
    }
    v326 = (unint64_t)v534;
    v327 = v535;
    v564[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v554;
    v564[1] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v233;
    LODWORD(v566[0]) = 0;
    v574 = 65539;
    v575 = 55;
    tbb::task_group_context::init((uint64_t)v566, v320, v321, v322);
    if (v326 < (unint64_t)v327)
    {
      v543 = v566;
      v328 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v543, 0x38uLL);
      *(_BYTE *)(v328 - 11) = 1;
      *(_QWORD *)v328 = &off_24C53F370;
      *(_QWORD *)(v328 + 8) = v327;
      *(_QWORD *)(v328 + 16) = v326;
      *(_QWORD *)(v328 + 24) = 1;
      *(_QWORD *)(v328 + 32) = v564;
      v329 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v328);
      *(_DWORD *)(v328 + 48) = 0;
      *(_BYTE *)(v328 + 52) = 5;
      *(_QWORD *)(v328 + 40) = (v329 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v328 - 40) + 16))(*(_QWORD *)(v328 - 40), v328, v328 - 8);
    }
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v566);
    v330 = sub_20C624E4C(1);
    if (v330)
    {
      sub_20C53FBD0((double *)&v554);
      v333 = v566;
      if (SBYTE7(v567) < 0)
        v333 = (void **)v566[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Writing data to layers at time %s\n", v331, v332, v333);
      if (SBYTE7(v567) < 0)
        operator delete(v566[0]);
    }
    v335 = *(_QWORD *)(v528 + 48);
    v334 = *(_QWORD *)(v528 + 56);
    v564[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v554;
    v564[1] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v233;
    v564[2] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v528;
    v564[3] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v534;
    v565 = &v561;
    v336 = v334 - v335;
    if (v334 != v335)
    {
      if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency((pxrInternal__aapl__pxrReserved__ *)v330))
      {
        LODWORD(v566[0]) = 0;
        v574 = 65539;
        v575 = 55;
        tbb::task_group_context::init((uint64_t)v566, v337, v338, v339);
        v543 = v566;
        v340 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v543, 0x38uLL);
        *(_BYTE *)(v340 - 11) = 1;
        *(_QWORD *)v340 = &off_24C53F448;
        *(_QWORD *)(v340 + 8) = v336 >> 4;
        *(_OWORD *)(v340 + 16) = xmmword_20CA59F70;
        *(_QWORD *)(v340 + 32) = v564;
        v341 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v340);
        *(_DWORD *)(v340 + 48) = 0;
        *(_BYTE *)(v340 + 52) = 5;
        *(_QWORD *)(v340 + 40) = (v341 >> 1) & 0x7FFFFFFFFFFFFFFELL;
        (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v340 - 40) + 16))(*(_QWORD *)(v340 - 40), v340, v340 - 8);
        tbb::task_group_context::~task_group_context((tbb::task_group_context *)v566);
      }
      else
      {
        sub_20C649334((uint64_t)v564, 0, v336 >> 4);
      }
    }
    v342 = (double *)v561;
    if (v561 == v562)
    {
      v343 = 0;
    }
    else
    {
      v343 = 0;
      do
      {
        v344 = *(_DWORD *)v342++;
        v343 += v344;
      }
      while (v342 != v562);
    }
    v345 = v523 + v343;
    v346 = *(_QWORD *)(v528 + 8);
    if (v346)
      v347 = *(_BYTE *)(v528 + 4) == 0;
    else
      v347 = 1;
    v523 += v343;
    if (v347 || v345 <= v346)
      goto LABEL_420;
    if (sub_20C624E4C(1))
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Memory limit exceeded (%zu bytes of pending data). Flushing data to disk.\n", v349, v350, v523);
    if (!sub_20C63E4A4(v528))
      break;
    v523 = 0;
LABEL_420:
    ++v233;
    v232 = v531;
    if (v233 >= (v532 - (_BYTE *)v531) >> 3)
      goto LABEL_421;
  }
  if (v561)
  {
    v562 = (double *)v561;
    operator delete(v561);
  }
  v387 = sub_20BFD2190(v522);
  operator delete(v387);
  v143 = 0;
LABEL_695:
  if (v531)
  {
    v532 = (char *)v531;
    operator delete(v531);
  }
LABEL_697:
  sub_20BFBE3A0((void **)&v534);
  sub_20BFBE3A0((void **)&v537);
LABEL_698:
  v516 = *((_QWORD *)&v539 + 1);
  if (*((_QWORD *)&v539 + 1))
  {
    v517 = (unsigned int *)(*((_QWORD *)&v539 + 1) + 8);
    do
    {
      v518 = __ldxr(v517);
      v519 = v518 - 1;
    }
    while (__stlxr(v519, v517));
    if (!v519)
      (*(void (**)(uint64_t))(*(_QWORD *)v516 + 8))(v516);
  }
  sub_20C543484((uint64_t)__p);
  return v143;
}

void sub_20C63D9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  void *v50;
  void *v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;

  v50 = *(void **)(v48 + 176);
  if (v50)
    operator delete(v50);
  sub_20BF5618C(v48);
  sub_20BF5618C(a20);
  sub_20BF5618C(a19);
  sub_20BF5618C((uint64_t)&v47[2].__shared_owners_);
  sub_20C626160(a18);
  sub_20C62618C(v46);
  std::__shared_weak_count::~__shared_weak_count(v47);
  operator delete(v51);
  sub_20C6236C4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&STACK[0x240]);
  sub_20BFBE3A0(&a36);
  sub_20BFBE3A0(&a39);
  v52 = a44;
  if (a44)
  {
    v53 = (unsigned int *)(a44 + 8);
    do
    {
      v54 = __ldxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  }
  sub_20C543484((uint64_t)&a46);
  _Unwind_Resume(a1);
}

uint64_t sub_20C63E388(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C63E43C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C63E450(unsigned int a1, const char *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%sdeformPointsWithSkinning: %d\n%sdeformNormalsWithSkinning: %d\n%sdeformXformWithSkinning: %d\n%sdeformPointsWithBlendShapes: %d\n%sdeformNormalsWithBlendShapes: %d\n", a2, a3, "    ", a1 & 1, "    ", (a1 >> 1) & 1, "    ", (a1 >> 2) & 1, "    ", (a1 >> 3) & 1, "    ", (a1 >> 4) & 1);
}

BOOL sub_20C63E4A4(uint64_t a1)
{
  const char *v2;
  char *v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t initial_auto_partitioner_divisor;
  unsigned __int8 v9;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  tbb::task_group_context *v13;
  _DWORD v14[32];
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (sub_20C624E4C(1))
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Saving %zu layers\n", v2, v3, (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4);
  v12 = 0;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v11 = &v12;
  v14[0] = 0;
  v15 = 65539;
  v16 = 55;
  tbb::task_group_context::init((uint64_t)v14, (uint64_t)v2, (uint64_t)v3, v4);
  if (v5 < v6)
  {
    v13 = (tbb::task_group_context *)v14;
    v7 = tbb::internal::allocate_root_with_context_proxy::allocate(&v13, 0x38uLL);
    *(_BYTE *)(v7 - 11) = 1;
    *(_QWORD *)v7 = &off_24C53F250;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)(v7 + 24) = 1;
    *(_QWORD *)(v7 + 32) = &v11;
    initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v7);
    *(_DWORD *)(v7 + 48) = 0;
    *(_BYTE *)(v7 + 52) = 5;
    *(_QWORD *)(v7 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v7 - 40) + 16))(*(_QWORD *)(v7 - 40), v7, v7 - 8);
  }
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)v14);
  v9 = atomic_load(&v12);
  return (v9 & 1) == 0;
}

void sub_20C63E5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  tbb::task *v17;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a13, v17);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a15);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBakeSkinning(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  pxrInternal__aapl__pxrReserved__::UsdSkelRoot *v5;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t *SchemaInfo;
  char *v9;
  int IsA;
  unsigned int *v11;
  unsigned int v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  pxrInternal__aapl__pxrReserved__ *v14;
  uint64_t v15;
  _BOOL4 v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  const char *v21;
  const char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  pxrInternal__aapl__pxrReserved__ *v28;
  uint64_t UsdPrimDefaultPredicate;
  __int128 v30;
  pxrInternal__aapl__pxrReserved__ *v31;
  uint64_t v32;
  __int128 v33;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v34;
  pxrInternal__aapl__pxrReserved__::UsdStage *v35;
  _QWORD *EditTarget;
  pxrInternal__aapl__pxrReserved__ *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  __int128 v43;
  _BOOL8 v44;
  const char *Text;
  char *v46;
  unsigned int *v47;
  unsigned int v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  int v59;
  void ***v60;
  pxrInternal__aapl__pxrReserved__ *v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  void (**v65)(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *__hidden);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v66;
  int v67;
  int v68;
  uint64_t v69;
  void ***v70;
  pxrInternal__aapl__pxrReserved__ *v71;
  uint64_t v72;
  int v73;
  char v74;
  char v75;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v76;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  int v81;
  char v82;
  uint64_t v83;
  __int16 v84;
  _OWORD v85[3];
  unint64_t v86[7];

  v81 = 31;
  v83 = 0;
  v84 = 257;
  memset(v85, 0, sizeof(v85));
  memset(v86, 0, 40);
  v82 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSkelCache::UsdSkelCache((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v79);
  v53 = a2;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  sub_20C37ECB8(a1, (uint64_t)&v70);
  while (1)
  {
    v60 = (void ***)a1[1];
    v61 = (pxrInternal__aapl__pxrReserved__ *)a1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v62);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v62 + 1);
    LODWORD(v63) = 0;
    WORD2(v63) = 0;
    if (v71 == v61 && v70 == v60)
    {
      v4 = 1;
      if (v72 == v62 && !v73 && !v74)
        v4 = v75 != 0;
    }
    else
    {
      v4 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v62 + 1);
    sub_20BFD265C(&v62);
    if (!v4)
      break;
    sub_20C37EEF4((uint64_t)&v70, (uint64_t)&v60);
    StaticTfType = pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType(v5);
    SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v7);
    IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v60, SchemaInfo, v9);
    if ((v63 & 7) != 0)
    {
      v11 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v62 + 1);
    sub_20BFD265C(&v62);
    if (v61)
      sub_20C35C614(v61);
    if (IsA)
    {
      sub_20C37EEF4((uint64_t)&v70, (uint64_t)&v60);
      v14 = v61;
      if (!v61 || (v15 = *((_QWORD *)v61 + 7), (v15 & 0x800) != 0))
      {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v61, v13);
        v15 = *((_QWORD *)v14 + 7);
      }
      if ((v15 & 0x100) != 0)
      {
        v16 = 1;
      }
      else
      {
        sub_20C37EEF4((uint64_t)&v70, (uint64_t)&v65);
        v16 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
        if ((v69 & 7) != 0)
        {
          v17 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v68);
        sub_20BFD265C(&v67);
        if (v66)
          sub_20C35C614(v66);
      }
      if ((v63 & 7) != 0)
      {
        v19 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v62 + 1);
      sub_20BFD265C(&v62);
      if (v61)
        sub_20C35C614(v61);
      if (v16)
      {
        v60 = (void ***)"usdSkel/bakeSkinning.cpp";
        v61 = (pxrInternal__aapl__pxrReserved__ *)"UsdSkelBakeSkinning";
        v62 = 2528;
        v63 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBakeSkinning(const UsdPrimRange &, const GfInterval &)";
        v64 = 0;
        sub_20C37EEF4((uint64_t)&v70, (uint64_t)&v65);
        sub_20C348EEC((uint64_t)&v65, &v58);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v60, (pxrInternal__aapl__pxrReserved__ *)"[UsdSkelBakeSkinning] Cannot bake skinning for instanced SkelRoot <%s>\n", v46, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
        sub_20BFD265C(&v58);
        if ((v69 & 7) != 0)
        {
          v47 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
          do
            v48 = __ldxr(v47);
          while (__stlxr(v48 - 2, v47));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v68);
        sub_20BFD265C(&v67);
        if (v66)
          sub_20C35C614(v66);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v72 + 1);
        sub_20BFD265C(&v72);
        v44 = 0;
        goto LABEL_66;
      }
      if (sub_20C624E4C(1))
      {
        sub_20C37EEF4((uint64_t)&v70, (uint64_t)&v60);
        sub_20C348EEC((uint64_t)&v60, (int *)&v65);
        v21 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v65);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Populating cache for <%s>\n", v22, v23, v21);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v65 + 1);
        sub_20BFD265C(&v65);
        if ((v63 & 7) != 0)
        {
          v24 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
          do
            v25 = __ldxr(v24);
          while (__stlxr(v25 - 2, v24));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v62 + 1);
        sub_20BFD265C(&v62);
        if (v61)
          sub_20C35C614(v61);
      }
      sub_20C37ED84((uint64_t)&v70, (uint64_t)&v60);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v65, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v60);
      v65 = off_24C53F778;
      if ((v63 & 7) != 0)
      {
        v26 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v62 + 1);
      sub_20BFD265C(&v62);
      v28 = v61;
      if (v61)
        sub_20C35C614(v61);
      UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v28);
      v30 = *(_OWORD *)UsdPrimDefaultPredicate;
      v57 = *(_QWORD *)(UsdPrimDefaultPredicate + 16);
      v56 = v30;
      v31 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdSkelCache::Populate(&v79, (uint64_t)&v65, &v56);
      v32 = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v31);
      v33 = *(_OWORD *)v32;
      v55 = *(_QWORD *)(v32 + 16);
      v54 = v33;
      if (pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v79, (uint64_t)&v65, (uint64_t)&v76, &v54))sub_20C649AC8((uint64_t *)v85, *((pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)&v85[0] + 1), v76, v77, (v77 - v76) >> 6);
      pxrInternal__aapl__pxrReserved__::UsdSkelRoot::~UsdSkelRoot((pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)&v65);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v70);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v72 + 1);
  sub_20BFD265C(&v72);
  if (*(_QWORD *)&v85[0] == *((_QWORD *)&v85[0] + 1))
  {
    v44 = 1;
  }
  else
  {
    sub_20C35C4F8((uint64_t)&v60, (uint64_t *)(*(_QWORD *)&v85[0] + 8), (_DWORD *)(*(_QWORD *)&v85[0] + 16));
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v60, v34, &v70);
    v35 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&v70);
    EditTarget = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v35);
    sub_20C63EDBC((_QWORD *)&v85[1] + 1, 1uLL, EditTarget);
    v37 = v71;
    if (v71)
    {
      v38 = (unsigned int *)((char *)v71 + 8);
      do
      {
        v39 = __ldxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
        (*(void (**)(pxrInternal__aapl__pxrReserved__ *))(*(_QWORD *)v37 + 8))(v37);
    }
    if ((v63 & 7) != 0)
    {
      v41 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
      do
        v42 = __ldxr(v41);
      while (__stlxr(v42 - 2, v41));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v62 + 1);
    sub_20BFD265C(&v62);
    if (v61)
      sub_20C35C614(v61);
    v43 = v85[0];
    LODWORD(v60) = 0;
    sub_20BF56210(v86);
    v70 = (void ***)&v60;
    sub_20BF64220(v86, (uint64_t)(*((_QWORD *)&v43 + 1) - v43) >> 6, (_DWORD **)&v70);
    v44 = pxrInternal__aapl__pxrReserved__::UsdSkelBakeSkinning((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v79, (uint64_t)&v81, v53);
  }
LABEL_66:
  v60 = (void ***)&v76;
  sub_20C649964((void ***)&v60);
  v49 = v80;
  if (v80)
  {
    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  sub_20BF5618C((uint64_t)v86);
  v60 = (void ***)&v85[1] + 1;
  sub_20BEB4844((void ***)&v60);
  v60 = (void ***)v85;
  sub_20C649964((void ***)&v60);
  return v44;
}

void sub_20C63EC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_20C37EFCC((uint64_t)&a26);
  sub_20C37ED50((uint64_t)&a30);
  a21 = (void **)&a34;
  sub_20C649964(&a21);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a37);
  sub_20C63EF40(v37 - 208);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C63EDBC(_QWORD *result, unint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  v5 = result;
  v6 = *result;
  if (a2 > (uint64_t)(result[2] - *result) >> 4)
  {
    sub_20BF49804((uint64_t)result);
    if (a2 >> 60)
      sub_20BDDF694();
    v7 = v5[2] - *v5;
    v8 = v7 >> 3;
    if (v7 >> 3 <= a2)
      v8 = a2;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
      v9 = 0xFFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = sub_20BE90F0C(v5, v9);
    v10 = (_QWORD *)v5[1];
    v11 = &v10[2 * a2];
    do
    {
      v12 = a3[1];
      *v10 = *a3;
      v10[1] = v12;
      if (v12)
      {
        v13 = (unsigned int *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v10 += 2;
    }
    while (v10 != v11);
LABEL_25:
    v5[1] = v11;
    return result;
  }
  v15 = result[1] - v6;
  v16 = v15 >> 4;
  if (v15 >> 4 >= a2)
    v17 = a2;
  else
    v17 = v15 >> 4;
  for (; v17; --v17)
  {
    result = (_QWORD *)sub_20BF2D298(v6, (uint64_t)a3);
    v6 += 16;
  }
  if (a2 > v16)
  {
    v18 = (_QWORD *)v5[1];
    v11 = &v18[2 * (a2 - v16)];
    do
    {
      v19 = a3[1];
      *v18 = *a3;
      v18[1] = v19;
      if (v19)
      {
        v20 = (unsigned int *)(v19 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v18 += 2;
    }
    while (v18 != v11);
    goto LABEL_25;
  }
  v22 = v5[1];
  v23 = *v5 + 16 * a2;
  while (v22 != v23)
  {
    result = *(_QWORD **)(v22 - 8);
    if (result)
    {
      v24 = (unsigned int *)(result + 1);
      do
      {
        v25 = __ldxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
    v22 -= 16;
  }
  v5[1] = v23;
  return result;
}

uint64_t sub_20C63EF40(uint64_t a1)
{
  void **v3;

  sub_20BF5618C(a1 + 72);
  v3 = (void **)(a1 + 48);
  sub_20BEB4844(&v3);
  v3 = (void **)(a1 + 24);
  sub_20C649964(&v3);
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBakeSkinning(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _DWORD *v5;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  pxrInternal__aapl__pxrReserved__ *v7;
  uint64_t v8;
  _BOOL4 v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  const char *Text;
  char *v16;
  unsigned int *v17;
  unsigned int v18;
  _BOOL8 v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__ *v26;
  uint64_t UsdPrimDefaultPredicate;
  __int128 v28;
  pxrInternal__aapl__pxrReserved__ *v29;
  uint64_t v30;
  __int128 v31;
  pxrInternal__aapl__pxrReserved__::UsdObject *v32;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  pxrInternal__aapl__pxrReserved__::UsdStage *v34;
  _QWORD *EditTarget;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  char *v55;
  pxrInternal__aapl__pxrReserved__ *v56;
  uint64_t v57;
  _OWORD v58[3];
  unint64_t v59[5];
  uint64_t *v60;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v61;
  int v62;
  int v63;
  uint64_t v64;

  v4 = (uint64_t *)(a1 + 8);
  v5 = (_DWORD *)(a1 + 16);
  sub_20C35C4F8((uint64_t)&v55, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v7 = v56;
  if (!v56 || (v8 = *((_QWORD *)v56 + 7), (v8 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v56, v6);
    v8 = *((_QWORD *)v7 + 7);
  }
  if ((v8 & 0x100) != 0)
  {
    v9 = 1;
  }
  else
  {
    sub_20C35C4F8((uint64_t)&v60, v4, v5);
    v9 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
    if ((v64 & 7) != 0)
    {
      v10 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
    sub_20BFD265C(&v62);
    if (v61)
      sub_20C35C614(v61);
  }
  if ((v58[0] & 7) != 0)
  {
    v12 = (unsigned int *)(*(_QWORD *)&v58[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v57 + 1);
  sub_20BFD265C(&v57);
  if (v56)
    sub_20C35C614(v56);
  if (v9)
  {
    v55 = "usdSkel/bakeSkinning.cpp";
    v56 = (pxrInternal__aapl__pxrReserved__ *)"UsdSkelBakeSkinning";
    v57 = 2568;
    *(_QWORD *)&v58[0] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBakeSkinning(const UsdSkelRoot &, const GfInterval &)";
    BYTE8(v58[0]) = 0;
    v14 = sub_20C35C4F8((uint64_t)&v60, v4, v5);
    sub_20C348EEC(v14, (int *)&v53);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v53);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v55, (pxrInternal__aapl__pxrReserved__ *)"[UsdSkelBakeSkinning] Cannot bake skinning for instanced SkelRoot <%s>\n", v16, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
    sub_20BFD265C(&v53);
    if ((v64 & 7) != 0)
    {
      v17 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
    sub_20BFD265C(&v62);
    if (v61)
      sub_20C35C614(v61);
    return 0;
  }
  else
  {
    LODWORD(v55) = 31;
    v56 = 0;
    LOWORD(v57) = 257;
    memset(v58, 0, sizeof(v58));
    memset(v59, 0, sizeof(v59));
    BYTE4(v55) = 0;
    if (sub_20C624E4C(1))
    {
      v20 = sub_20C35C4F8((uint64_t)&v60, v4, v5);
      sub_20C348EEC(v20, (int *)&v53);
      v21 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v53);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Populating cache for <%s>\n", v22, v23, v21);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
      sub_20BFD265C(&v53);
      if ((v64 & 7) != 0)
      {
        v24 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
      sub_20BFD265C(&v62);
      if (v61)
        sub_20C35C614(v61);
    }
    v26 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdSkelCache::UsdSkelCache((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v53);
    UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v26);
    v28 = *(_OWORD *)UsdPrimDefaultPredicate;
    v52 = *(_QWORD *)(UsdPrimDefaultPredicate + 16);
    v51 = v28;
    v29 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdSkelCache::Populate(&v53, a1, &v51);
    v30 = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v29);
    v31 = *(_OWORD *)v30;
    v50 = *(_QWORD *)(v30 + 16);
    v49 = v31;
    if (pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v53, a1, (uint64_t)v58, &v49))
    {
      if (*(_QWORD *)&v58[0] == *((_QWORD *)&v58[0] + 1))
      {
        v19 = 1;
      }
      else
      {
        v32 = (pxrInternal__aapl__pxrReserved__::UsdObject *)sub_20C35C4F8((uint64_t)&v60, v4, v5);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v32, v33, &v47);
        v34 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(&v47);
        EditTarget = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v34);
        sub_20C63EDBC((_QWORD *)&v58[1] + 1, 1uLL, EditTarget);
        v36 = v48;
        if (v48)
        {
          v37 = (unsigned int *)(v48 + 8);
          do
          {
            v38 = __ldxr(v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, v37));
          if (!v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        }
        if ((v64 & 7) != 0)
        {
          v40 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stlxr(v41 - 2, v40));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
        sub_20BFD265C(&v62);
        if (v61)
          sub_20C35C614(v61);
        v42 = v58[0];
        LODWORD(v47) = 0;
        sub_20BF56210(v59);
        v60 = &v47;
        sub_20BF64220(v59, (uint64_t)(*((_QWORD *)&v42 + 1) - v42) >> 6, (_DWORD **)&v60);
        v19 = pxrInternal__aapl__pxrReserved__::UsdSkelBakeSkinning((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v53, (uint64_t)&v55, a2);
      }
    }
    else
    {
      v19 = 0;
    }
    v43 = v54;
    if (v54)
    {
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v45 = __ldaxr(p_shared_owners);
      while (__stlxr(v45 - 1, p_shared_owners));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    sub_20BF5618C((uint64_t)v59);
    v60 = (uint64_t *)&v58[1] + 1;
    sub_20BEB4844((void ***)&v60);
    v60 = (uint64_t *)v58;
    sub_20C649964((void ***)&v60);
  }
  return v19;
}

void sub_20C63F40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_20C35C2E0(v13 - 96);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  sub_20C63EF40((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t *sub_20C63F4F4(unint64_t *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int64x2_t *v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  int64x2_t v11;
  uint64_t v12;
  int64x2_t v13;
  unint64_t v14;
  unint64_t *v15;

  v2 = result[2];
  v3 = *result;
  if (a2 > (uint64_t)(v2 - *result) >> 4)
  {
    if (a2 >> 60)
      sub_20BDDF694();
    v5 = (int64x2_t *)result;
    v6 = (_QWORD *)result[1];
    v15 = result + 2;
    v7 = (char *)operator new(16 * a2);
    v8 = (char *)v6 + (_QWORD)v7 - v3;
    if (v6 == (_QWORD *)v3)
    {
      v11 = vdupq_n_s64(v3);
      v9 = (char *)v6 + (_QWORD)v7 - v3;
    }
    else
    {
      v9 = (char *)v6 + (_QWORD)v7 - v3;
      do
      {
        v10 = *((_OWORD *)v6 - 1);
        v6 -= 2;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *v6 = 0;
        v6[1] = 0;
      }
      while (v6 != (_QWORD *)v3);
      v11 = *v5;
      v2 = v5[1].u64[0];
    }
    v5->i64[0] = (uint64_t)v9;
    v5->i64[1] = (uint64_t)v8;
    v13 = v11;
    v5[1].i64[0] = (uint64_t)&v7[16 * a2];
    v14 = v2;
    v12 = v11.i64[0];
    return (unint64_t *)sub_20BDEA324((uint64_t)&v12);
  }
  return result;
}

void sub_20C63F5B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C53F060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20C63F5C8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C53F060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C63F5E8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 384);
  if (v2)
    operator delete(v2);
  sub_20BF5618C(a1 + 208);
  sub_20BF5618C(a1 + 160);
  sub_20BF5618C(a1 + 112);
  sub_20BF5618C(a1 + 56);
  sub_20C626160((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 32));
  return sub_20C62618C((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 24));
}

uint64_t sub_20C63F654(int *a1, pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  int v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  int v25;
  int v26;
  uint64_t v27;

  v23 = *a1;
  v4 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)a1 + 1);
  v24 = v4;
  if (v4)
  {
    v5 = (unint64_t *)((char *)v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54(&v25, a1 + 4);
  sub_20BFD6EA4(&v26, a1 + 5);
  v7 = *((_QWORD *)a1 + 3);
  v27 = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v23))
    {
LABEL_19:
      v14 = 0;
      goto LABEL_21;
    }
    if ((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::TransformMightBeTimeVarying(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v23) & 1) != 0)break;
    if (pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetResetXformStack(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v23))
    {
      goto LABEL_19;
    }
    sub_20C3AD22C((uint64_t)&v23, (uint64_t)&v18);
    v23 = v18;
    v10 = v19;
    v19 = 0;
    v11 = v24;
    v24 = v10;
    if (v11)
      sub_20C35C614(v11);
    sub_20BFD3EBC(&v25, &v20);
    sub_20BFD3F10(&v26, &v21);
    if ((v27 & 7) != 0)
    {
      v12 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v27 = v22;
    v22 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
    sub_20BFD265C(&v20);
    if (v19)
      sub_20C35C614(v19);
  }
  v14 = 1;
LABEL_21:
  if ((v27 & 7) != 0)
  {
    v15 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_20BFD265C(&v25);
  if (v24)
    sub_20C35C614(v24);
  return v14;
}

void sub_20C63F828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C63F840(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C53F0B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20C63F850(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C53F0B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C63F870(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  void **v22;

  v2 = *(_QWORD *)(a1 + 2240);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 2236));
  sub_20BFD265C((_DWORD *)(a1 + 2232));
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v5, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 2224));
  v6 = *(_QWORD *)(a1 + 2080);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 2076));
  sub_20BFD265C((_DWORD *)(a1 + 2072));
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v9, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 2064));
  sub_20BF5618C(a1 + 2016);
  v10 = *(_QWORD *)(a1 + 2008);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 2004));
  sub_20BFD265C((_DWORD *)(a1 + 2000));
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v13, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 1992));
  sub_20BF5618C(a1 + 1944);
  v14 = *(_QWORD *)(a1 + 1936);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 1932));
  sub_20BFD265C((_DWORD *)(a1 + 1928));
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v17, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 1920));
  sub_20BF5618C(a1 + 1872);
  sub_20BF5618C(a1 + 1560);
  sub_20BF5618C(a1 + 1520);
  sub_20C373B34(a1 + 1312);
  sub_20C373B34(a1 + 1056);
  v18 = *(_QWORD *)(a1 + 1048);
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  sub_20C373B34(a1 + 920);
  sub_20BF5618C(a1 + 880);
  sub_20C373B34(a1 + 752);
  sub_20BF5618C(a1 + 712);
  sub_20C373B34(a1 + 584);
  sub_20BF5618C(a1 + 544);
  v22 = (void **)(a1 + 512);
  sub_20C5755EC(&v22);
  v22 = (void **)(a1 + 488);
  sub_20C5755EC(&v22);
  v22 = (void **)(a1 + 464);
  sub_20C642144(&v22);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 448));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 424));
  return sub_20C625CE0(a1 + 24);
}

uint64_t sub_20C63FA8C(uint64_t a1, _BYTE *a2, const pxrInternal__aapl__pxrReserved__::UsdPrim *a3, _QWORD *a4, uint64_t *a5, int a6, pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *a7)
{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *v19;
  const char *Text;
  const char *v21;
  char *v22;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v24;
  uint64_t *SchemaInfo;
  char *v26;
  uint64_t IsA;
  int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v33;
  uint64_t *v34;
  const pxrInternal__aapl__pxrReserved__::TfType *v35;
  uint64_t *v36;
  char *v37;
  unsigned int *v38;
  unsigned int v39;
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *v40;
  uint64_t *v41;
  const pxrInternal__aapl__pxrReserved__::TfType *v42;
  uint64_t *v43;
  char *v44;
  int v45;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v46;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v47;
  unsigned int *v48;
  unsigned int v49;
  int v50;
  pxrInternal__aapl__pxrReserved__::UsdProperty *Attribute;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v52;
  pxrInternal__aapl__pxrReserved__::UsdProperty *v53;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v54;
  pxrInternal__aapl__pxrReserved__::UsdProperty *v55;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v56;
  pxrInternal__aapl__pxrReserved__::UsdProperty *v57;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v58;
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *v59;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v60;
  pxrInternal__aapl__pxrReserved__::UsdProperty *v61;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v62;
  _QWORD *i;
  pxrInternal__aapl__pxrReserved__::UsdProperty *v64;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v65;
  pxrInternal__aapl__pxrReserved__::UsdProperty *v66;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v67;
  _QWORD *j;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v69;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v70;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v71;
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v72;
  uint64_t *v73;
  const pxrInternal__aapl__pxrReserved__::TfType *v74;
  uint64_t *v75;
  char *v76;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v77;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v78;
  const char *v79;
  const char *v80;
  char *v81;
  int v82;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v83;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v84;
  char v85;
  _QWORD *v86;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v87;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v88;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v89;
  unsigned __int8 v90;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v91;
  unsigned int *v92;
  unsigned int v93;
  void *v94;
  char v95;
  char v96;
  pxrInternal__aapl__pxrReserved__::UsdProperty *v97;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v98;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v99;
  char v100;
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *v101;
  pxrInternal__aapl__pxrReserved__::UsdProperty *v102;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v103;
  int IsDefined;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v105;
  char v106;
  int v107;
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *v108;
  pxrInternal__aapl__pxrReserved__::UsdProperty *v109;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v110;
  int v111;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v112;
  char v113;
  char v114;
  _BOOL4 v115;
  char v116;
  char v117;
  char v118;
  unsigned int *v119;
  unsigned int v120;
  int v121;
  void *v122;
  const char *v123;
  const char *v124;
  char *v125;
  const char *v126;
  char *v127;
  __int128 *v128;
  const char *v129;
  char *v130;
  void *v131;
  const char *v132;
  char *v133;
  void **v134;
  const char *v135;
  char *v136;
  void **v137;
  const char *v138;
  char *v139;
  void **v140;
  const char *v141;
  char *v142;
  void *v143;
  const char *v144;
  char *v145;
  void *v146;
  void *v147;
  const char *v148;
  char *v149;
  const char *v150;
  int v151;
  void **v152;
  const char *v153;
  char *v154;
  const char *v155;
  char *v156;
  void **v157;
  void *p_p;
  unsigned int *v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int v163;
  void *v164;
  uint64_t *v165;
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery **v166;
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *v167;
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *v168;
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *v169;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *v171;
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *v172;
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *v173;
  void *__p;
  char v175;
  void *v176;
  char v177;
  void *v178;
  char v179;
  void *v180;
  char v181;
  void *v182;
  char v183;
  void *v184[2];
  char v185;
  int v186;
  int v187;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v188;
  void *v189[2];
  char v190;
  void *v191[2];
  char v192;
  void *v193;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v194;
  uint64_t v195;
  unint64_t v196;
  char v197;
  __int128 v198;
  uint64_t v199;
  const char *v200;
  char v201;
  uint64_t v202;

  v202 = *MEMORY[0x24BDAC8D0];
  v13 = (uint64_t *)(a1 + 440);
  v14 = sub_20C625430(a1, (uint64_t)a3);
  *(_QWORD *)(v14 + 400) = *a4;
  v15 = a4[1];
  *(_QWORD *)(v14 + 408) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_DWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 420) = a6;
  v165 = v13 + 6;
  *(_QWORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  v166 = (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery **)(a1 + 424);
  *(_OWORD *)(a1 + 488) = 0u;
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a1 + 512) & 0xE0 | 8;
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  v173 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 560);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 560));
  *(_BYTE *)(a1 + 680) = *(_BYTE *)(a1 + 680) & 0xE0 | 8;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_QWORD *)(a1 + 720) = 0;
  v172 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 728);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 728));
  *(_BYTE *)(a1 + 848) = *(_BYTE *)(a1 + 848) & 0xE0 | 8;
  *(_QWORD *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  v169 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 896);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 896));
  *(_BYTE *)(a1 + 1016) = *(_BYTE *)(a1 + 1016) & 0xE0 | 8;
  *(_QWORD *)(a1 + 1024) = 0;
  v168 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 1032);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 1032));
  *(_BYTE *)(a1 + 1152) = *(_BYTE *)(a1 + 1152) & 0xE0 | 8;
  v167 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 1288);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 1288));
  *(_BYTE *)(a1 + 1408) = *(_BYTE *)(a1 + 1408) & 0xE0 | 8;
  *(_BYTE *)(a1 + 1488) = *(_BYTE *)(a1 + 1488) & 0xE0 | 8;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_BYTE *)(a1 + 1576) = *(_BYTE *)(a1 + 1576) & 0xE0 | 8;
  *(_BYTE *)(a1 + 1712) = *(_BYTE *)(a1 + 1712) & 0xE0 | 8;
  *(_QWORD *)(a1 + 1880) = 0;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_QWORD *)(a1 + 1896) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 1904));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 1908));
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_QWORD *)(a1 + 1968) = 0;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 1976));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 1980));
  *(_QWORD *)(a1 + 2040) = 0;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 2048));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 2052));
  *(_QWORD *)(a1 + 2056) = 0;
  *(_QWORD *)(a1 + 2200) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 2208));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 2212));
  *(_QWORD *)(a1 + 2216) = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a3, v18) & 1) != 0
    || (*(_QWORD *)&v198 = "usdSkel/bakeSkinning.cpp",
        *((_QWORD *)&v198 + 1) = "_SkinningAdapter",
        v199 = 992,
        v200 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinningAdapter::_SkinningAdapter(const UsdSkel"
               "BakeSkinningParms &, const UsdSkelSkinningQuery &, const _SkelAdapterRefPtr &, const SdfLayerHandle &, co"
               "nst unsigned int, UsdGeomXformCache *)",
        v201 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v198, "skinningQuery", 0)))
  {
    if (*a4
      || (v193 = "usdSkel/bakeSkinning.cpp",
          v194 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_SkinningAdapter",
          v195 = 992,
          v196 = (unint64_t)"pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinningAdapter::_SkinningA"
                                   "dapter(const UsdSkelBakeSkinningParms &, const UsdSkelSkinningQuery &, const _SkelAda"
                                   "pterRefPtr &, const SdfLayerHandle &, const unsigned int, UsdGeomXformCache *)",
          v197 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v193, "skelAdapter", 0) & 1) != 0))
    {
      v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)sub_20C624E4C(1);
      if ((_DWORD)v19)
      {
        sub_20C348EEC((uint64_t)a3, (int *)&v198);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v198);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Creating adapter for skinning prim at <%s>\n", v21, v22, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v198 + 1);
        v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)sub_20BFD265C(&v198);
      }
      StaticTfType = pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::_GetStaticTfType(v19);
      SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v24);
      IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a3, SchemaInfo, v26);
      v28 = IsA;
      if ((IsA & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v191, a3);
        v191[0] = off_24C53CA48;
        if ((*a2 & 9) != 0)
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v191, (uint64_t)&v193);
          pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v198, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v193);
          sub_20C547D2C((uint64_t)v173, (uint64_t)&v198);
          sub_20C373B34((uint64_t)&v198);
          if ((v196 & 7) != 0)
          {
            v29 = (unsigned int *)(v196 & 0xFFFFFFFFFFFFFFF8);
            do
              v30 = __ldxr(v29);
            while (__stlxr(v30 - 2, v29));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v195 + 1);
          sub_20BFD265C(&v195);
          if (v194)
            sub_20C35C614(v194);
          if (!pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::HasAuthoredValue(v173))
          {
            pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v198);
            sub_20C547D2C((uint64_t)v173, (uint64_t)&v198);
            sub_20C373B34((uint64_t)&v198);
          }
        }
        if ((*a2 & 0x12) != 0)
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v191, (uint64_t)&v193);
          pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v198, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v193);
          sub_20C547D2C((uint64_t)v172, (uint64_t)&v198);
          sub_20C373B34((uint64_t)&v198);
          if ((v196 & 7) != 0)
          {
            v31 = (unsigned int *)(v196 & 0xFFFFFFFFFFFFFFF8);
            do
              v32 = __ldxr(v31);
            while (__stlxr(v32 - 2, v31));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v195 + 1);
          sub_20BFD265C(&v195);
          if (v194)
            sub_20C35C614(v194);
          pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v191, (unsigned int **)v184);
          v33 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v33)
            v33 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (((unint64_t)v184[0] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v33 + 40) & 0xFFFFFFFFFFFFFFF8)
            && (v34 = pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v33),
                v36 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v34, v35), pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a3, v36, v37)))
          {
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v189, a3);
            v189[0] = off_24C53C838;
            pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v189, (uint64_t)&v193);
            pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v198, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v193);
            sub_20C547D2C((uint64_t)v169, (uint64_t)&v198);
            sub_20C373B34((uint64_t)&v198);
            if ((v196 & 7) != 0)
            {
              v38 = (unsigned int *)(v196 & 0xFFFFFFFFFFFFFFF8);
              do
                v39 = __ldxr(v38);
              while (__stlxr(v39 - 2, v38));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v195 + 1);
            sub_20BFD265C(&v195);
            if (v194)
              sub_20C35C614(v194);
            if (!pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::HasAuthoredValue(v172)
              || !pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::HasAuthoredValue(v169))
            {
              pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v198);
              sub_20C547D2C((uint64_t)v169, (uint64_t)&v198);
              v40 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)sub_20C373B34((uint64_t)&v198);
              pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(v40);
              sub_20C547D2C((uint64_t)v172, (uint64_t)&v198);
              sub_20C373B34((uint64_t)&v198);
            }
            pxrInternal__aapl__pxrReserved__::UsdGeomMesh::~UsdGeomMesh((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v189);
          }
          else
          {
            if (!pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::HasAuthoredValue(v172))
              goto LABEL_44;
            v46 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            if (!v46)
              v46 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            if (((unint64_t)v184[0] & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v46 + 153) & 0xFFFFFFFFFFFFFFF8))
            {
              v47 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
              if (!v47)
                v47 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
              if (((unint64_t)v184[0] & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v47 + 151) & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_44:
                pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v198);
                sub_20C547D2C((uint64_t)v172, (uint64_t)&v198);
                sub_20C373B34((uint64_t)&v198);
              }
            }
          }
          if (((uint64_t)v184[0] & 7) != 0)
          {
            v48 = (unsigned int *)((unint64_t)v184[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v49 = __ldxr(v48);
            while (__stlxr(v49 - 2, v48));
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::~UsdGeomPointBased((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v191);
        v45 = 1;
      }
      else
      {
        v41 = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)IsA);
        v43 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v41, v42);
        v45 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a3, v43, v44);
      }
      if ((*a2 & 7) != 0
        && pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::HasJointInfluences(a3))
      {
        if ((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::IsRigidlyDeformed(a3) & v45) == 1)
        {
          if ((*a2 & 4) != 0 && (*(_BYTE *)(*a4 + 80) & 1) != 0)
          {
            v50 = 4;
LABEL_55:
            *(_DWORD *)(a1 + 416) |= v50;
          }
        }
        else if (v28)
        {
          if ((*a2 & 1) != 0)
          {
            Attribute = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v173);
            if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(Attribute, v52))
            {
              if ((*(_BYTE *)(*a4 + 80) & 1) != 0)
                *(_DWORD *)(a1 + 416) |= 1u;
            }
          }
          if ((*a2 & 2) != 0)
          {
            v53 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v172);
            if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v53, v54))
            {
              if ((*(_BYTE *)(*a4 + 128) & 1) != 0)
              {
                v50 = 2;
                goto LABEL_55;
              }
            }
          }
        }
      }
      if ((*a2 & 0x18) != 0 && (*(_BYTE *)(*a4 + 176) & v28) == 1)
      {
        if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::HasBlendShapes(a3))
        {
          v55 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v173);
          if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v55, v56) & 1) != 0
            || (v57 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v172),
                pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v57, v58)))
          {
            v59 = (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *)operator new(0x68uLL);
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v198, a3);
            v200 = 0;
            *(_QWORD *)&v198 = off_24C53F490;
            pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::UsdSkelBlendShapeQuery(v59, (const pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v198);
            sub_20C64169C(v166, (uint64_t)v59);
            pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::~UsdSkelBindingAPI((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v198);
            if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(*v166, v60))
            {
              if ((*a2 & 8) != 0)
              {
                v61 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v173);
                if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v61, v62))
                {
                  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapePointOffsets(*v166, &v198);
                  sub_20C575BE8((uint64_t *)(a1 + 464));
                  *(_OWORD *)(a1 + 464) = v198;
                  *(_QWORD *)(a1 + 480) = v199;
                  v199 = 0;
                  v198 = 0uLL;
                  v193 = &v198;
                  sub_20C5755EC((void ***)&v193);
                  for (i = *(_QWORD **)(a1 + 464); i != *(_QWORD **)(a1 + 472); i += 5)
                  {
                    if (*i)
                    {
                      *(_DWORD *)(a1 + 416) |= 8u;
                      break;
                    }
                  }
                }
              }
              if ((*a2 & 0x10) != 0)
              {
                v64 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v172);
                if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v64, v65))
                {
                  v66 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v169);
                  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v66, v67) & 1) == 0)
                  {
                    pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeNormalOffsets(*v166, &v198);
                    sub_20C575BE8(v165);
                    *(_OWORD *)v165 = v198;
                    *(_QWORD *)(a1 + 504) = v199;
                    v199 = 0;
                    v198 = 0uLL;
                    v193 = &v198;
                    sub_20C5755EC((void ***)&v193);
                    for (j = *(_QWORD **)(a1 + 488); j != *(_QWORD **)(a1 + 496); j += 5)
                    {
                      if (*j)
                      {
                        *(_DWORD *)(a1 + 416) |= 0x10u;
                        break;
                      }
                    }
                  }
                }
              }
              if ((*(_BYTE *)(a1 + 416) & 0x18) != 0)
              {
                pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeBlendShapePointIndices(*v166, &v198);
                sub_20C6420C0(v13);
                *(_OWORD *)v13 = v198;
                *(_QWORD *)(a1 + 456) = v199;
                v199 = 0;
                v198 = 0uLL;
                v193 = &v198;
                sub_20C642144((void ***)&v193);
              }
            }
            if ((*(_BYTE *)(a1 + 416) & 0x18) != 0)
              goto LABEL_91;
            sub_20BDEBF08(v166);
          }
        }
      }
      if (!*(_DWORD *)(a1 + 416))
      {
        if (sub_20C624E4C(1))
        {
          sub_20C348EEC((uint64_t)a3, (int *)&v198);
          v79 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v198);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   No computations active for <%s>: skipping\n", v80, v81, v79);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v198 + 1);
          sub_20BFD265C(&v198);
        }
        return a1;
      }
LABEL_91:
      sub_20C348EEC((uint64_t)a3, (int *)&v198);
      pxrInternal__aapl__pxrReserved__::SdfCreatePrimInLayer(a5, (uint64_t)&v198, &v188);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v198 + 1);
      sub_20BFD265C(&v198);
      if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v188))
      {
        *(_QWORD *)&v198 = "usdSkel/bakeSkinning.cpp";
        *((_QWORD *)&v198 + 1) = "_SkinningAdapter";
        v199 = 1141;
        v200 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinningAdapter::_SkinningAdapter(const UsdSkel"
               "BakeSkinningParms &, const UsdSkelSkinningQuery &, const _SkelAdapterRefPtr &, const SdfLayerHandle &, co"
               "nst unsigned int, UsdGeomXformCache *)";
        v201 = 0;
        if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v198, "primSpec", 0) & 1) == 0)
        {
          *(_DWORD *)(a1 + 416) = 0;
LABEL_242:
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v122, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v188);
          return a1;
        }
      }
      if ((*(_BYTE *)(a1 + 416) & 9) != 0)
      {
        v70 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v70)
          v70 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        v71 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v71)
          v71 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        v72 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)sub_20C64170C(a1 + 1896, &v188, (_QWORD *)v70 + 102, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v71 + 664), 0);
        if ((_DWORD)v72)
        {
          if (a2[16])
          {
            v73 = pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v72);
            v75 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v73, v74);
            if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA(a1, v75, v76))
            {
              v77 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
              if (!v77)
                v77 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
              v78 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
              if (!v78)
                v78 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
              sub_20C64170C(a1 + 2040, &v188, (_QWORD *)v77 + 37, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v78 + 616), 0);
            }
          }
        }
        else
        {
          *(_DWORD *)(a1 + 416) &= 0xFFFFFFF6;
        }
      }
      v82 = *(_DWORD *)(a1 + 416);
      if ((v82 & 0x12) != 0)
      {
        v83 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v83)
          v83 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        v84 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v84)
          v84 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        v85 = sub_20C64170C(a1 + 1968, &v188, (_QWORD *)v83 + 88, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v84 + 712), 0);
        v82 = *(_DWORD *)(a1 + 416);
        if ((v85 & 1) == 0)
        {
          v82 &= 0xFFFFFFED;
          *(_DWORD *)(a1 + 416) = v82;
        }
      }
      if ((v82 & 4) != 0)
      {
        v193 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v194);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v194 + 1);
        v195 = 0;
        v86 = (_QWORD *)sub_20C641AD8();
        v87 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v87)
          v87 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!sub_20C64170C(a1 + 2200, &v188, v86, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v87 + 360), 0))goto LABEL_128;
        v88 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v88)
          v88 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        v89 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v89)
          v89 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (sub_20C64170C((uint64_t)&v193, &v188, (_QWORD *)v88 + 167, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v89 + 544), 1))
        {
          v90 = atomic_load((unsigned __int8 *)&qword_25498BA30);
          if ((v90 & 1) == 0 && __cxa_guard_acquire(&qword_25498BA30))
          {
            *(_QWORD *)&v198 = *(_QWORD *)sub_20C641AD8();
            if ((v198 & 7) != 0)
            {
              v160 = (unsigned int *)(v198 & 0xFFFFFFFFFFFFFFF8);
              do
                v161 = __ldxr(v160);
              while (__stxr(v161 + 2, v160));
              if ((v161 & 1) == 0)
                *(_QWORD *)&v198 = v198 & 0xFFFFFFFFFFFFFFF8;
            }
            sub_20C641D84((uint64_t)&unk_25498BA08, (uint64_t)&v198, 1);
            if ((v198 & 7) != 0)
            {
              v162 = (unsigned int *)(v198 & 0xFFFFFFFFFFFFFFF8);
              do
                v163 = __ldxr(v162);
              while (__stlxr(v163 - 2, v162));
            }
            __cxa_atexit((void (*)(void *))sub_20C641DD0, &unk_25498BA08, &dword_20BDBC000);
            __cxa_guard_release(&qword_25498BA30);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v193))
          {
            *(_QWORD *)&v198 = "usdSkel/bakeSkinning.cpp";
            *((_QWORD *)&v198 + 1) = "Set";
            v199 = 374;
            v200 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_AttrWriter::Set(const T &, UsdTimeCo"
                   "de) [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>]";
            v201 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v198, "_spec", 0);
          }
          v91 = sub_20C0AEAB8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v193);
          *((_QWORD *)&v198 + 1) = off_24C525500;
          sub_20BF56B40(&v198, (uint64_t)&unk_25498BA08);
          pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetDefaultValue(v91, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v198);
          sub_20BF4C2D8((uint64_t)&v198);
        }
        else
        {
LABEL_128:
          *(_DWORD *)(a1 + 416) &= ~4u;
        }
        if ((v195 & 7) != 0)
        {
          v92 = (unsigned int *)(v195 & 0xFFFFFFFFFFFFFFF8);
          do
            v93 = __ldxr(v92);
          while (__stlxr(v93 - 2, v92));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v194 + 1);
        sub_20BFD265C(&v194);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v94, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v193);
        v82 = *(_DWORD *)(a1 + 416);
      }
      if ((v82 & 9) != 0)
      {
        *(_BYTE *)(a1 + 512) |= 3u;
        if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying(v173, v69))
          v95 = 4;
        else
          v95 = 0;
        *(_BYTE *)(a1 + 512) = *(_BYTE *)(a1 + 512) & 0xFB | v95;
        v82 = *(_DWORD *)(a1 + 416);
      }
      if ((v82 & 0x12) != 0)
      {
        *(_BYTE *)(a1 + 680) |= 3u;
        v96 = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying(v172, v69) ? 4 : 0;
        *(_BYTE *)(a1 + 680) = *(_BYTE *)(a1 + 680) & 0xFB | v96;
        v97 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v169);
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v97, v98))
        {
          *(_BYTE *)(a1 + 848) |= 3u;
          if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying(v169, v99))
            v100 = 4;
          else
            v100 = 0;
          *(_BYTE *)(a1 + 848) = *(_BYTE *)(a1 + 848) & 0xFB | v100;
        }
      }
      if ((*(_BYTE *)(a1 + 416) & 7) != 0)
      {
        *(_BYTE *)(a1 + 1016) |= 3u;
        pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v198, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)(a1 + 144));
        v101 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)sub_20C547D2C((uint64_t)v168, (uint64_t)&v198);
        v102 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v101);
        IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v102, v103);
        sub_20C373B34((uint64_t)&v198);
        if (IsDefined)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying(v168, v105))
            v106 = 4;
          else
            v106 = 0;
          *(_BYTE *)(a1 + 1016) = *(_BYTE *)(a1 + 1016) & 0xFB | v106;
        }
      }
      v107 = *(_DWORD *)(a1 + 416);
      if ((v107 & 7) != 0)
      {
        *(_BYTE *)(a1 + 1152) |= 3u;
        pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v198, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)(a1 + 176));
        v108 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)sub_20C547D2C((uint64_t)v167, (uint64_t)&v198);
        v109 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v108);
        v111 = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v109, v110);
        sub_20C373B34((uint64_t)&v198);
        if (v111)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying(v167, v112))
            v113 = 4;
          else
            v113 = 0;
          *(_BYTE *)(a1 + 1152) = *(_BYTE *)(a1 + 1152) & 0xFB | v113;
        }
        v107 = *(_DWORD *)(a1 + 416);
        if ((v107 & 2) != 0)
          *(_BYTE *)(a1 + 1408) = *(_BYTE *)(a1 + 1408) & 0xF8 | *(_BYTE *)(a1 + 1152) & 4 | 3;
      }
      if ((v107 & 7) == 0)
      {
LABEL_168:
        if ((v107 & 3) != 0)
        {
          *(_BYTE *)(a1 + 1576) |= 3u;
          if (sub_20C63F654((int *)a3, a7))
            v117 = 4;
          else
            v117 = 0;
          *(_BYTE *)(a1 + 1576) = *(_BYTE *)(a1 + 1576) & 0xFB | v117;
          v107 = *(_DWORD *)(a1 + 416);
        }
        if ((v107 & 4) != 0)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetResetXformStack(a7, a3))
          {
            pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(a1 + 1720, 1.0);
          }
          else
          {
            *(_BYTE *)(a1 + 1712) |= 3u;
            sub_20C3AD22C((uint64_t)a3, (uint64_t)&v198);
            if (sub_20C63F654((int *)&v198, a7))
              v118 = 4;
            else
              v118 = 0;
            *(_BYTE *)(a1 + 1712) = *(_BYTE *)(a1 + 1712) & 0xFB | v118;
            if ((v200 & 7) != 0)
            {
              v119 = (unsigned int *)((unint64_t)v200 & 0xFFFFFFFFFFFFFFF8);
              do
                v120 = __ldxr(v119);
              while (__stlxr(v120 - 2, v119));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v199 + 1);
            sub_20BFD265C(&v199);
            if (*((_QWORD *)&v198 + 1))
              sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v198 + 1));
          }
        }
        v121 = *(_DWORD *)(a1 + 416);
        if ((v121 & 0x18) != 0)
        {
          *(_BYTE *)(*a4 + 176) |= 2u;
          v121 = *(_DWORD *)(a1 + 416);
        }
        if ((v121 & 7) != 0)
        {
          *(_BYTE *)(*a4 + 80) |= 2u;
          v121 = *(_DWORD *)(a1 + 416);
        }
        if ((v121 & 2) != 0)
        {
          *(_BYTE *)(*a4 + 128) |= 2u;
          v121 = *(_DWORD *)(a1 + 416);
        }
        if ((v121 & 7) != 0)
          *(_BYTE *)(*a4 + 224) |= 2u;
        if (sub_20C624E4C(1))
        {
          sub_20C348EEC(a1, &v186);
          v123 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v186);
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v124, v125, *(_BYTE *)(a1 + 512) & 1, (*(unsigned __int8 *)(a1 + 512) >> 1) & 1, (*(unsigned __int8 *)(a1 + 512) >> 2) & 1);
          if (v199 >= 0)
            v128 = &v198;
          else
            v128 = (__int128 *)v198;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v126, v127, *(_BYTE *)(a1 + 680) & 1, (*(unsigned __int8 *)(a1 + 680) >> 1) & 1, (*(unsigned __int8 *)(a1 + 680) >> 2) & 1);
          if (v195 >= 0)
            v131 = &v193;
          else
            v131 = v193;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v129, v130, *(_BYTE *)(a1 + 848) & 1, (*(unsigned __int8 *)(a1 + 848) >> 1) & 1, (*(unsigned __int8 *)(a1 + 848) >> 2) & 1);
          if (v192 >= 0)
            v134 = v191;
          else
            v134 = (void **)v191[0];
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v132, v133, *(_BYTE *)(a1 + 1016) & 1, (*(unsigned __int8 *)(a1 + 1016) >> 1) & 1, (*(unsigned __int8 *)(a1 + 1016) >> 2) & 1);
          if (v190 >= 0)
            v137 = v189;
          else
            v137 = (void **)v189[0];
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v135, v136, *(_BYTE *)(a1 + 1152) & 1, (*(unsigned __int8 *)(a1 + 1152) >> 1) & 1, (*(unsigned __int8 *)(a1 + 1152) >> 2) & 1);
          if (v185 >= 0)
            v140 = v184;
          else
            v140 = (void **)v184[0];
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v138, v139, *(_BYTE *)(a1 + 1408) & 1, (*(unsigned __int8 *)(a1 + 1408) >> 1) & 1, (*(unsigned __int8 *)(a1 + 1408) >> 2) & 1);
          if (v183 >= 0)
            v143 = &v182;
          else
            v143 = v182;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v141, v142, *(_BYTE *)(a1 + 1488) & 1, (*(unsigned __int8 *)(a1 + 1488) >> 1) & 1, (*(unsigned __int8 *)(a1 + 1488) >> 2) & 1);
          v164 = v143;
          v171 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)v134;
          if (v181 >= 0)
            v146 = &v180;
          else
            v146 = v180;
          v147 = &v178;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v144, v145, *(_BYTE *)(a1 + 1576) & 1, (*(unsigned __int8 *)(a1 + 1576) >> 1) & 1, (*(unsigned __int8 *)(a1 + 1576) >> 2) & 1);
          v150 = v123;
          if (v179 < 0)
            v147 = v178;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v148, v149, *(_BYTE *)(a1 + 1712) & 1, (*(unsigned __int8 *)(a1 + 1712) >> 1) & 1, (*(unsigned __int8 *)(a1 + 1712) >> 2) & 1);
          v151 = v177;
          v152 = (void **)v176;
          sub_20C63E450(*(_DWORD *)(a1 + 416), v153, v154);
          v157 = &v176;
          if (v151 < 0)
            v157 = v152;
          if (v175 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]\n  Computation state for skinnable prim <%s>:\n    _restPointsTask: %s\n    _restNormalsTask: %s\n    _faceVertexIndicesTask: %s\n    _skinningMethodTask: %s\n    _geomBindXformTask: %s\n    _geomBindInvTransposeXformTask: %s\n    _jointInfluencesTask: %s\n    _localToWorldXformTask: %s\n    _parentToWorldXformTask: %s\n  Deformation flags:\n%s", v155, v156, v150, v128, v131, v171,
            v137,
            v140,
            v164,
            v146,
            v147,
            v157,
            p_p);
          if (v175 < 0)
            operator delete(__p);
          if (v177 < 0)
            operator delete(v176);
          if (v179 < 0)
            operator delete(v178);
          if (v181 < 0)
            operator delete(v180);
          if (v183 < 0)
            operator delete(v182);
          if (v185 < 0)
            operator delete(v184[0]);
          if (v190 < 0)
            operator delete(v189[0]);
          if (v192 < 0)
            operator delete(v191[0]);
          if (SHIBYTE(v195) < 0)
            operator delete(v193);
          if (SHIBYTE(v199) < 0)
            operator delete((void *)v198);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v187);
          sub_20BFD265C(&v186);
        }
        goto LABEL_242;
      }
      *(_BYTE *)(a1 + 1488) |= 3u;
      if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 48)))
      {
        v114 = *(_BYTE *)(a1 + 1488);
      }
      else
      {
        v115 = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 96));
        v114 = *(_BYTE *)(a1 + 1488);
        if (!v115)
        {
          v116 = 0;
          goto LABEL_167;
        }
      }
      v116 = 4;
LABEL_167:
      *(_BYTE *)(a1 + 1488) = v114 & 0xFB | v116;
      v107 = *(_DWORD *)(a1 + 416);
      goto LABEL_168;
    }
  }
  return a1;
}

void sub_20C640FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_DWORD *a25,uint64_t a26,_QWORD *a27,_DWORD *a28,_DWORD *a29,_DWORD *a30,uint64_t a31,_DWORD *a32,uint64_t a33,_DWORD *a34,_DWORD *a35,_DWORD *a36,uint64_t a37,uint64_t a38,pxrInternal__aapl__pxrReserved__::SdfSpec *a39,pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a40,pxrInternal__aapl__pxrReserved__::SdfSpec *a41,pxrInternal__aapl__pxrReserved__::SdfSpec *a42,pxrInternal__aapl__pxrReserved__::SdfSpec *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  __int16 a69;
  _QWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  void *v82;
  void *v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  void *v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  void *v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  void *v95;
  unsigned int *v96;
  unsigned int v97;
  void *v98;

  v74 = *(_QWORD *)(v72 - 224);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  __cxa_guard_abort(&qword_25498BA30);
  if ((STACK[0x228] & 7) != 0)
  {
    v80 = (unsigned int *)(STACK[0x228] & 0xFFFFFFFFFFFFFFF8);
    do
      v81 = __ldxr(v80);
    while (__stlxr(v81 - 2, v80));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v71);
  sub_20BFD265C(v70);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v82, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&STACK[0x218]);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v83, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a69);
  v84 = v69[277];
  if ((v84 & 7) != 0)
  {
    v85 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFFFF8);
    do
      v86 = __ldxr(v85);
    while (__stlxr(v86 - 2, v85));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a36);
  sub_20BFD265C(a34);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v87, a41);
  v88 = v69[257];
  if ((v88 & 7) != 0)
  {
    v89 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
    do
      v90 = __ldxr(v89);
    while (__stlxr(v90 - 2, v89));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a35);
  sub_20BFD265C(a32);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v91, a39);
  sub_20BF5618C((uint64_t)(v69 + 249));
  v92 = v69[248];
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a30);
  sub_20BFD265C(a29);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v95, a43);
  sub_20BF5618C((uint64_t)(v69 + 240));
  if ((*a27 & 7) != 0)
  {
    v96 = (unsigned int *)(*a27 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a28);
  sub_20BFD265C(a25);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v98, a42);
  sub_20BF5618C(a26);
  sub_20BF5618C((uint64_t)(v69 + 192));
  sub_20BF5618C(a24);
  sub_20C373B34(a44);
  sub_20C373B34(a45);
  v77 = v69[128];
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  sub_20C373B34(a46);
  sub_20BF5618C(a31);
  sub_20C373B34(a48);
  sub_20BF5618C((uint64_t)(v69 + 86));
  sub_20C373B34(a49);
  sub_20BF5618C(a33);
  STACK[0x200] = a37;
  sub_20C5755EC((void ***)&STACK[0x200]);
  STACK[0x200] = a38;
  sub_20C5755EC((void ***)&STACK[0x200]);
  STACK[0x200] = a21;
  sub_20C642144((void ***)&STACK[0x200]);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(a40);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v69 + 50));
  sub_20C625CE0((uint64_t)v69);
  _Unwind_Resume(a1);
}

void sub_20C64169C(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20C641DF8(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_20C64170C(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a4, int a5)
{
  uint64_t **v10;
  pxrInternal__aapl__pxrReserved__::TfToken *Attributes;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v17;
  const char *Text;
  unint64_t v19;
  const char *v20;
  uint64_t **v21;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v22;
  uint64_t Identifier;
  const char *v24;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v25;
  const char *p_p;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  void *v31;
  int IsDormant;
  void *v33;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v34;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v35;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v36;
  unsigned int *v38;
  uint64_t TypeName;
  void *__p;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned int *v46;
  _QWORD *v47[2];
  uint64_t v48;
  const char *v49;
  char v50;
  _BYTE v51[8];
  uint64_t *v52;
  uint64_t v53;
  int v54;
  int v55[19];

  v10 = (uint64_t **)sub_20C0B0CA4(a2);
  Attributes = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetAttributes(v10, (uint64_t)&v54);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Attributes);
  sub_20C642184((uint64_t)&v54, (uint64_t)v51);
  v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C642208((uint64_t)&v54, (uint64_t *)v47);
  if (v53 == v48)
  {
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::New(a2, (uint64_t)EmptyString, a4, a5, 0, &v38);
  }
  else
  {
    sub_20C4531D0(v52, v53, &v46);
    v14 = sub_20C0AEAB8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v46);
    v47[0] = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(v14);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(v47, (_QWORD **)a4))
    {
      v15 = v46;
      v38 = v46;
      if (v46)
      {
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v15, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v46);
    }
    else
    {
      v47[0] = "usdSkel/bakeSkinning.cpp";
      v47[1] = "_CreateAttribute";
      v48 = 329;
      v49 = "const SdfAttributeSpecHandle pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CreateAttribute(const"
            " SdfPrimSpecHandle &, const TfToken &, const SdfValueTypeName &, SdfVariability)";
      v50 = 0;
      v17 = sub_20C0B0CA4(a2);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v17, &v44);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v44);
      v19 = *a3 & 0xFFFFFFFFFFFFFFF8;
      if (v19)
      {
        v20 = (const char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0)
          v20 = *(const char **)v20;
      }
      else
      {
        v20 = "";
      }
      v21 = (uint64_t **)sub_20C0B0CA4(a2);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v21, &v42);
      v22 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v42);
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v22);
      if (*(char *)(Identifier + 23) >= 0)
        v24 = (const char *)Identifier;
      else
        v24 = *(const char **)Identifier;
      v25 = sub_20C0AEAB8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v46);
      TypeName = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(v25);
      sub_20C642250((uint64_t)&TypeName);
      if (v41 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v47, 3, (pxrInternal__aapl__pxrReserved__ *)"Spec type mismatch. Failed to create attribute for <%s.%s> in @%s@. Spec with type %s already at that location.", Text, v20, v24, p_p);
      if (v41 < 0)
        operator delete(__p);
      v27 = v43;
      if (v43)
      {
        v28 = (unsigned int *)(v43 + 8);
        do
        {
          v29 = __ldxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v45);
      sub_20BFD265C(&v44);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v31, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v46);
      v38 = 0;
    }
  }
  sub_20C453220((uint64_t)&v54);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)a1, &v38);
  IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v33, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v38);
  if ((IsDormant & 1) == 0)
  {
    v34 = sub_20C0AEAB8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1);
    v35 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v35)
      v35 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    pxrInternal__aapl__pxrReserved__::SdfSpec::ClearInfo(v34, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v35 + 432));
    v36 = sub_20C0B0CA4(a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v36, &v54);
    sub_20BFD3EBC((int *)(a1 + 8), &v54);
    sub_20BFD3F10((int *)(a1 + 12), v55);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v55);
    sub_20BFD265C(&v54);
    sub_20BF32220((_QWORD *)(a1 + 16), a3);
  }
  return IsDormant ^ 1u;
}

void sub_20C641A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,unsigned int *a23,int a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;

  if (a21 < 0)
    operator delete(__p);
  if (a23)
  {
    v30 = a23 + 2;
    do
    {
      v31 = __ldxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
      (*(void (**)(unsigned int *))(*(_QWORD *)a23 + 8))(a23);
  }
  sub_20BFD1A18(&a24);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v33, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a26);
  sub_20C453220(v28 - 144);
  _Unwind_Resume(a1);
}

unint64_t sub_20C641AD8()
{
  char *v0;
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  void **v24;
  char v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_25498BA00);
  if (!v0)
  {
    v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "xformOp:transform", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "Xform", 0);
    v3 = *(unsigned int **)v0;
    v26 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        v26 = v4;
    }
    v6 = (unsigned int *)*v2;
    v27 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v27 = v7;
    }
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    *((_QWORD *)v0 + 4) = 0;
    v24 = (void **)(v0 + 16);
    v25 = 0;
    v9 = operator new(0x10uLL);
    v10 = 0;
    *((_QWORD *)v0 + 2) = v9;
    *((_QWORD *)v0 + 3) = v9;
    *((_QWORD *)v0 + 4) = v9 + 2;
    do
    {
      v11 = (&v26)[v10];
      *v9 = v11;
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v10;
      ++v9;
    }
    while (v10 != 2);
    v14 = (unsigned int **)&v28;
    *((_QWORD *)v0 + 3) = v9;
    do
    {
      v16 = (uint64_t)*--v14;
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    while (v14 != &v26);
    while (!__ldaxr(&qword_25498BA00))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498BA00))
        return (unint64_t)v0;
    }
    __clrex();
    v24 = (void **)(v0 + 16);
    sub_20BEEB2B8(&v24);
    if ((*v2 & 7) != 0)
    {
      v20 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v22 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    operator delete(v0);
    return atomic_load(&qword_25498BA00);
  }
  return (unint64_t)v0;
}

void sub_20C641CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  sub_20BEEB2B8(&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20C641D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_20C6423F0((uint64_t *)a1, a2, a2 + 8 * a3);
  return a1;
}

void sub_20C641DB8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20C00918C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C641DD0(_QWORD *a1)
{
  sub_20C00918C(a1);
  return a1;
}

_QWORD *sub_20C641DF8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C53F100;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C641E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    sub_20C641EC8((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void sub_20C641E6C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C641E80(uint64_t a1)
{
  sub_20C641EC8(a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t sub_20C641E88(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C53F150))
    return a1 + 24;
  else
    return 0;
}

void sub_20C641EC8(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  void **v8;

  if (a2)
  {
    v8 = (void **)(a2 + 80);
    sub_20C641F68(&v8);
    v8 = (void **)(a2 + 56);
    sub_20C642050(&v8);
    v3 = *(void **)(a2 + 32);
    if (v3)
    {
      *(_QWORD *)(a2 + 40) = v3;
      operator delete(v3);
    }
    v4 = *(_QWORD *)(a2 + 24);
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
    sub_20BFD265C((_DWORD *)(a2 + 16));
    v7 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a2 + 8);
    if (v7)
      sub_20C35C614(v7);
    operator delete((void *)a2);
  }
}

void sub_20C641F68(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_20C641FEC((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C641FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_20BFD265C((_DWORD *)(a2 + 16));
  v6 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a2 + 8);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C642050(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::~UsdSkelBlendShape((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)(v4 - 40));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C6420C0(uint64_t *a1)
{
  if (*a1)
  {
    sub_20C6420F8((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_20C6420F8(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; sub_20BF5618C(i))
    i -= 40;
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_20C642144(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C6420F8((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

_QWORD *sub_20C642184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t Size;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::Find(a1);
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = a1;
  *(_QWORD *)&v8 = v4;
  *((_QWORD *)&v8 + 1) = a1;
  Size = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::GetSize(a1);
  result = sub_20C642318(&v7);
  if ((_QWORD)v8 != v4)
    return sub_20C642208(a1, (uint64_t *)a2);
  v6 = v8;
  *(_OWORD *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 32) = Size;
  return result;
}

_QWORD *sub_20C642208@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t Size;
  uint64_t v5;

  Size = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::GetSize(a1);
  v5 = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::GetSize(a1);
  *a2 = a1;
  a2[1] = a1;
  a2[2] = Size;
  a2[3] = a1;
  a2[4] = v5;
  return sub_20C642318(a2);
}

uint64_t sub_20C642250(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<((pxrInternal__aapl__pxrReserved__::TfToken *)v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C642304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C642318(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  BOOL v3;
  void *v4;
  unsigned int *v5;

  v1 = result[2];
  if (v1 != result[4])
  {
    v2 = result;
    do
    {
      sub_20C4531D0((uint64_t *)v2[1], v1, &v5);
      v3 = sub_20C6423A4((_DWORD *)(*v2 + 72), (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v5);
      result = pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v4, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
      if (v3)
        break;
      v1 = v2[2] + 1;
      v2[2] = v1;
    }
    while (v1 != v2[4]);
  }
  return result;
}

void sub_20C642390(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6423A4(_DWORD *a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v5;

  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(this) & 1) != 0)
    return 0;
  v5 = sub_20C0AEAB8(this);
  return pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v5) == *a1;
}

void sub_20C6423F0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v6[2];
  uint64_t v7;
  uint64_t v8;

  v7 = a3;
  v8 = a2;
  sub_20C00924C(a1);
  v6[0] = (uint64_t **)&v8;
  v6[1] = (uint64_t **)&v7;
  sub_20C64244C(a1, (a3 - a2) >> 3, v6);
}

void sub_20C64244C(uint64_t *a1, unint64_t a2, uint64_t ***a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int *v13;
  unsigned int v14;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_11;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load((unint64_t *)v7 - 2);
      if (v8 == 1)
      {
        if (v3 >= a2)
        {
          v12 = &v7[a2];
          do
          {
            if ((*v12 & 7) != 0)
            {
              v13 = (unsigned int *)(*v12 & 0xFFFFFFFFFFFFFFF8);
              do
                v14 = __ldxr(v13);
              while (__stlxr(v14 - 2, v13));
            }
            ++v12;
          }
          while (v12 != &v7[v3]);
          goto LABEL_24;
        }
        v9 = (uint64_t *)a1[4];
        if (*(v9 - 1) < a2)
          v7 = sub_20C0095A0((uint64_t)a1, v9, a2, *a1);
LABEL_17:
        v10 = &v7[v3];
        goto LABEL_18;
      }
      v7 = (uint64_t *)a1[4];
    }
    if (v3 >= a2)
      v11 = a2;
    else
      v11 = *a1;
    v7 = sub_20C0095A0((uint64_t)a1, v7, a2, v11);
    if (v3 >= a2)
      goto LABEL_24;
    goto LABEL_17;
  }
  if (8 * a2 / a2 != 8)
  {
LABEL_11:
    sub_20C00924C(a1);
    return;
  }
  v7 = sub_20C009504((uint64_t)a1, a2);
  v10 = v7;
LABEL_18:
  sub_20C6425AC(a3, v10);
LABEL_24:
  if (v7 != (uint64_t *)a1[4])
  {
    sub_20C00918C(a1);
    a1[4] = (uint64_t)v7;
  }
  *a1 = a2;
}

uint64_t ***sub_20C6425AC(uint64_t ***result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = **result;
  v3 = *result[1];
  while (v2 != v3)
  {
    v4 = *v2;
    *a2 = *v2;
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 2, v5));
      if ((v6 & 1) == 0)
        *a2 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v2;
    ++a2;
  }
  return result;
}

_QWORD *sub_20C642604(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL4 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  void *v39;
  uint64_t v40[2];
  char v41;

  v5 = *a2;
  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v2 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v2 = v8 % v9;
    }
    else
    {
      v2 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v5)
              return v12 + 4;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v2)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x38uLL);
  v40[0] = (uint64_t)v15;
  v40[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  v16 = a2[1];
  v15[2] = v5;
  v15[3] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v15[4] = 0;
  v15[5] = 0;
  v15[6] = 0;
  v41 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = (v9 & (v9 - 1)) == 0;
    if (v9 < 3)
      v21 = 0;
    v22 = (2 * v9) | !v21;
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            sub_20BDDF5B4();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = *(void **)a1;
          *(_QWORD *)a1 = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v14;
          if (*v14)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v14;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v35);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v39 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v39)
          operator delete(v39);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v2 = v8 % v9;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
  }
  v36 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v36)
  {
    *(_QWORD *)v40[0] = *v36;
    *v36 = v40[0];
  }
  else
  {
    *(_QWORD *)v40[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v40[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v14;
    if (*(_QWORD *)v40[0])
    {
      v37 = *(_QWORD *)(*(_QWORD *)v40[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v37 >= v9)
          v37 %= v9;
      }
      else
      {
        v37 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v40[0];
    }
  }
  v12 = (_QWORD *)v40[0];
  v40[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C642BD4(v40);
  return v12 + 4;
}

void sub_20C642A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C642BD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20C642A7C(double **a1, double **a2, double **a3)
{
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double v11;
  _BOOL4 v12;
  size_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;

  sub_20BDDEC88((uint64_t)a3, a1[1] - *a1 + a2[1] - *a2);
  v6 = *a2;
  v7 = a2[1];
  v8 = *a1;
  v9 = a1[1];
  v10 = *a3;
  while (v6 != v7)
  {
    if (v8 == v9)
    {
      v13 = (char *)v7 - (char *)v6;
      v14 = v10;
      v8 = v6;
      goto LABEL_10;
    }
    v11 = *v8;
    v12 = *v8 >= *v6;
    if (*v8 >= *v6)
      v11 = *v6;
    v8 += *v8 <= *v6;
    v6 += v12;
    *v10++ = v11;
  }
  v13 = (char *)v9 - (char *)v8;
  if (v9 == v8)
    goto LABEL_11;
  v14 = v10;
LABEL_10:
  memmove(v14, v8, v13);
LABEL_11:
  sub_20BDDEC88((uint64_t)a3, ((char *)v10 + v13 - (char *)*a3) >> 3);
  v15 = *a2;
  *a2 = *a3;
  *a3 = v15;
  v16 = a2[1];
  a2[1] = a3[1];
  a3[1] = v16;
  v17 = a2[2];
  a2[2] = a3[2];
  a3[2] = v17;
}

uint64_t sub_20C642B78(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BE7DA98((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *sub_20C642BD4(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      sub_20BE7DA98((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_20C642C20(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53F178;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53F178;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C642FC0(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C642FC0(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

void sub_20C642FC0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  const char *v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  const char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t *AnimQuery;
  uint64_t *v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;
  void *__p;
  char *v22;
  uint64_t v23;

  if (a2 < a3)
  {
    v4 = a2;
    do
    {
      v6 = *(const char **)(a1 + 8);
      v7 = (uint64_t *)(**(_QWORD **)a1 + 16 * v4);
      v8 = (unsigned __int8 *)*v7;
      v11 = sub_20C642604(*(_QWORD *)(a1 + 16), v7);
      __p = 0;
      v22 = 0;
      v23 = 0;
      if ((~v8[80] & 3) == 0)
      {
        AnimQuery = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v8);
        if (*AnimQuery)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformTimeSamplesInInterval(AnimQuery, v6, (char *)&__p))sub_20C643478((uint64_t)v11, v11[1], (char *)__p, v22, (v22 - (_BYTE *)__p) >> 3);
        }
      }
      if ((~v8[176] & 3) == 0)
      {
        v13 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v8);
        if (*v13)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightTimeSamplesInInterval(v13, v6, (char *)&__p))sub_20C643478((uint64_t)v11, v11[1], (char *)__p, v22, (v22 - (_BYTE *)__p) >> 3);
        }
      }
      if ((~v8[224] & 3) == 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v8, v9, v10, (uint64_t)&v16);
        sub_20C6431C8(&v16, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v6, (uint64_t)v11);
        if ((v20 & 7) != 0)
        {
          v14 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
          do
            v15 = __ldxr(v14);
          while (__stlxr(v15 - 2, v14));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
        sub_20BFD265C(&v18);
        if (v17)
          sub_20C35C614(v17);
      }
      if (__p)
      {
        v22 = (char *)__p;
        operator delete(__p);
      }
      ++v4;
    }
    while (v4 != a3);
  }
}

void sub_20C643150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C6431C8(int *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _BOOL8 IsPseudoRoot;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v14;
  uint64_t *SchemaInfo;
  char *v16;
  int v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD v29[3];
  int v30;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  int v32;
  int v33;
  uint64_t v34;
  void *__p;
  char *v36;
  uint64_t v37;
  void **v38;

  __p = 0;
  v36 = 0;
  v37 = 0;
  v30 = *a1;
  v6 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)a1 + 1);
  v31 = v6;
  if (v6)
  {
    v7 = (unint64_t *)((char *)v6 + 48);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_20BFD6E54(&v32, a1 + 4);
  sub_20BFD6EA4(&v33, a1 + 5);
  v9 = *((_QWORD *)a1 + 3);
  v34 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    IsPseudoRoot = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v30);
    if (IsPseudoRoot)
      break;
    StaticTfType = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)IsPseudoRoot);
    SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v14);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v30, SchemaInfo, v16))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v29, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)a1);
      v29[0] = off_24C53D0E0;
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::XformQuery((pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery *)&v24, (const pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v29);
      if (pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetTimeSamplesInInterval(&v24, a2, (uint64_t)&__p))sub_20C643478(a3, *(_QWORD *)(a3 + 8), (char *)__p, v36, (v36 - (_BYTE *)__p) >> 3);
      v17 = v28;
      v38 = (void **)&v24;
      sub_20C54356C(&v38);
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v29);
      if (v17)
        break;
    }
    sub_20C3AD22C((uint64_t)&v30, (uint64_t)&v24);
    v30 = v24;
    v18 = v25;
    v25 = 0;
    v19 = v31;
    v31 = v18;
    if (v19)
      sub_20C35C614(v19);
    sub_20BFD3EBC(&v32, &v26);
    sub_20BFD3F10(&v33, &v27);
    if ((v34 & 7) != 0)
    {
      v20 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    v34 = v28;
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
    sub_20BFD265C(&v26);
    if (v25)
      sub_20C35C614(v25);
  }
  if ((v34 & 7) != 0)
  {
    v22 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
  sub_20BFD265C(&v32);
  if (v31)
    sub_20C35C614(v31);
  if (__p)
  {
    v36 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20C64341C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  *(_QWORD *)(v22 - 88) = &a10;
  sub_20C54356C((void ***)(v22 - 88));
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&a14);
  sub_20C35C2E0((uint64_t)&a17);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *sub_20C643478(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      sub_20BDDF694();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_20BDDF6A8(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = sub_20C28C144((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_20C64364C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C64368C(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v25[16];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v4 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 > 1)
      goto LABEL_12;
    if (v7 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v8 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(_QWORD *)v8 = &unk_24C520F68;
        __dmb(0xBu);
        v8[8] = 0;
        *((_QWORD *)this - 4) = v8;
        *((_QWORD *)v8 - 3) = 2;
        v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &off_24C53F1C0;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v10;
        *(_QWORD *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        v11 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v11;
        *(_QWORD *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(_BYTE *)(v9 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v9 - 40))(*(_QWORD *)(v9 - 40), v9, v9 - 8);
        v5 = *((_QWORD *)this + 3);
        v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
        if (v5 >= v6)
          break;
        v12 = *((_QWORD *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v25 = 0x10000;
    v26 = *v4;
    v27 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v25, *((unsigned __int8 *)this + 52));
      v13 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0)
        break;
      v16 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v16;
      v15 = v25[2];
      if (v25[2] < 2u)
      {
        v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((_QWORD *)&v26 + 3 * v25[0] + 2) < *((_QWORD *)&v26 + 3 * v25[0]) - *((_QWORD *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v17 = v25[1];
      v18 = v25[v25[1] + 3];
      v19 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(_QWORD *)v19 = &unk_24C520F68;
      __dmb(0xBu);
      v19[8] = 0;
      *((_QWORD *)this - 4) = v19;
      *((_QWORD *)v19 - 3) = 2;
      v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      v21 = (char *)&v26 + 24 * v17;
      *(_BYTE *)(v20 - 11) = 1;
      *(_QWORD *)v20 = &off_24C53F1C0;
      v22 = *(_OWORD *)v21;
      *(_QWORD *)(v20 + 24) = *((_QWORD *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(_QWORD *)(v20 + 32) = *((_QWORD *)this + 4);
      v23 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v23;
      *(_QWORD *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(_BYTE *)(v20 + 52) = *((_BYTE *)this + 52) - v18;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v20 - 40))(*(_QWORD *)(v20 - 40), v20, v20 - 8);
      v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v14 = v25[0];
LABEL_22:
    sub_20C643A2C((double *)this, (_QWORD *)&v26 + 3 * v14);
    v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C643A2C((double *)this, (_QWORD *)this + 1);
  return 0;
}

double *sub_20C643A2C(double *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double **v6;

  v2 = a2[1];
  v3 = *a2 - v2;
  if (*a2 > v2)
  {
    v4 = *((_QWORD *)result + 4);
    v5 = 16 * v2;
    do
    {
      v6 = (double **)sub_20C642604(*(_QWORD *)v4, (uint64_t *)(**(_QWORD **)(v4 + 8) + v5));
      std::__sort<std::__less<double,double> &,double *>();
      result = sub_20C27E94C(*v6, v6[1]);
      if (v6[1] != result)
        v6[1] = result;
      v5 += 16;
      --v3;
    }
    while (v3);
  }
  return result;
}

char *sub_20C643ADC(uint64_t a1, char *__src, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  char *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void *__p;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v5 = __src;
  if (a5 < 1)
    return v5;
  v7 = a3;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(_BYTE **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      sub_20BDDF694();
    v15 = (__src - v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v40 = v9;
    if (v17)
      v18 = (char *)sub_20BDDF6A8(v9, v17);
    else
      v18 = 0;
    v31 = &v18[8 * v15];
    __p = v18;
    v37 = v31;
    v39 = &v18[8 * v17];
    v32 = 8 * a5;
    v33 = &v31[8 * a5];
    do
    {
      v34 = *v7++;
      *(_QWORD *)v31 = v34;
      v31 += 8;
      v32 -= 8;
    }
    while (v32);
    v38 = v33;
    v5 = sub_20BEF2F0C((void **)a1, (uint64_t)&__p, v5);
    if (v38 != v37)
      v38 += (v37 - v38 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = (uint64_t)(v12 - (_QWORD)__src) >> 3;
  if (v19 >= a5)
  {
    v20 = &a3[a5];
    v21 = *(char **)(v9 - 8);
LABEL_18:
    v25 = &__src[8 * a5];
    v26 = &v21[-8 * a5];
    v27 = v21;
    if ((unint64_t)v26 < v12)
    {
      v27 = v21;
      do
      {
        v28 = *(_QWORD *)v26;
        v26 += 8;
        *(_QWORD *)v27 = v28;
        v27 += 8;
      }
      while ((unint64_t)v26 < v12);
    }
    *(_QWORD *)(a1 + 8) = v27;
    if (v21 != v25)
      memmove(&v21[-8 * ((v21 - v25) >> 3)], __src, v21 - v25);
    if (v20 != v7)
    {
      v29 = v5;
      do
      {
        v30 = *v7++;
        *(_QWORD *)v29 = v30;
        v29 += 8;
      }
      while (v7 != v20);
    }
    return v5;
  }
  v20 = &a3[v19];
  v21 = *(char **)(v9 - 8);
  if (v20 != a4)
  {
    v22 = v20;
    v23 = *(_QWORD **)(v9 - 8);
    do
    {
      v24 = *v22++;
      *v23++ = v24;
      v21 += 8;
    }
    while (v22 != a4);
  }
  *(_QWORD *)(a1 + 8) = v21;
  if ((uint64_t)(v12 - (_QWORD)__src) >= 1)
    goto LABEL_18;
  return v5;
}

void sub_20C643CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C643CFC(tbb::internal::allocate_continuation_proxy *this, double a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  __int128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  char v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned int v21;
  unsigned __int8 v22;
  _BYTE *v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  unsigned __int8 v29[16];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v3 = *((_QWORD *)this - 4);
      if (*(int *)(v3 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v3 + 8) = 1;
        v4 = *((unsigned __int8 *)this + 52);
        if (v4 <= 1)
          LOBYTE(v4) = 1;
        *((_BYTE *)this + 52) = v4 + 1;
      }
    }
  }
  v6 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  v8 = *((_QWORD *)this + 3);
  v9 = v5 - v7;
  if (v8 < v5 - v7)
  {
    v10 = *((_QWORD *)this + 5);
    if (v10 > 1)
      goto LABEL_12;
    if (v10 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v11 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v11 - 11) = 1;
        *(_QWORD *)v11 = &unk_24C520F68;
        __dmb(0xBu);
        v11[8] = 0;
        *((_QWORD *)this - 4) = v11;
        *((_QWORD *)v11 - 3) = 2;
        v12 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v11, 0x38uLL);
        *(_BYTE *)(v12 - 11) = 1;
        *(_QWORD *)v12 = &off_24C53F208;
        *(_QWORD *)(v12 + 8) = *((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v13;
        *(_QWORD *)(v12 + 16) = v13;
        *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)this + 24);
        v14 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v14;
        *(_QWORD *)(v12 + 40) = v14;
        *(_DWORD *)(v12 + 48) = 2;
        *(_BYTE *)(v12 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v12 - 40))(*(_QWORD *)(v12 - 40), v12, v12 - 8);
        v7 = *((_QWORD *)this + 2);
        v8 = *((_QWORD *)this + 3);
        v5 = *((_QWORD *)this + 1);
        v9 = v5 - v7;
        if (v8 >= v5 - v7)
          break;
        v15 = *((_QWORD *)this + 5);
        if (v15 <= 1)
        {
          if (!v15 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v8 < v9 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v29 = 0x10000;
    v30 = *v6;
    v31 = *((_QWORD *)this + 3);
    while (1)
    {
      *(_QWORD *)&v16 = sub_20C15C670(v29, *((unsigned __int8 *)this + 52)).n128_u64[0];
      v17 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v17 & 1) == 0)
        break;
      v20 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v20;
      v19 = v29[2];
      if (v29[2] < 2u)
      {
        v18 = v29[0];
        if (v29[v29[0] + 3] < v20
          && *((_QWORD *)&v30 + 3 * v29[0] + 2) < *((_QWORD *)&v30 + 3 * v29[0]) - *((_QWORD *)&v30 + 3 * v29[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v21 = v29[1];
      v22 = v29[v29[1] + 3];
      v23 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v23 - 11) = 1;
      *(_QWORD *)v23 = &unk_24C520F68;
      __dmb(0xBu);
      v23[8] = 0;
      *((_QWORD *)this - 4) = v23;
      *((_QWORD *)v23 - 3) = 2;
      v24 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v23, 0x38uLL);
      v25 = (char *)&v30 + 24 * v21;
      *(_BYTE *)(v24 - 11) = 1;
      *(_QWORD *)v24 = &off_24C53F208;
      v26 = *(_OWORD *)v25;
      *(_QWORD *)(v24 + 24) = *((_QWORD *)v25 + 2);
      *(_OWORD *)(v24 + 8) = v26;
      *(_QWORD *)(v24 + 32) = *((_QWORD *)this + 4);
      v27 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v27;
      *(_QWORD *)(v24 + 40) = v27;
      *(_DWORD *)(v24 + 48) = 2;
      *(_BYTE *)(v24 + 52) = *((_BYTE *)this + 52) - v22;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v24 - 40))(*(_QWORD *)(v24 - 40), v24, v24 - 8);
      v19 = --v29[2];
      v29[1] = (v29[1] + 1) & 7;
LABEL_27:
      if (!v19 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v18 = v29[0];
LABEL_22:
    sub_20C64409C(*((_QWORD *)this + 4), *((_QWORD *)&v30 + 3 * v18 + 1), *((_QWORD *)&v30 + 3 * v18), v16);
    v19 = --v29[2];
    v29[0] = (v29[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C64409C(*((_QWORD *)this + 4), v7, v5, a2);
  return 0;
}

double sub_20C64409C(uint64_t a1, unint64_t a2, unint64_t a3, double result)
{
  unint64_t v5;
  unint64_t v7;
  double **v8;
  double *v9;
  double *v10;
  double **v11;
  double *v12;
  double *v13;
  uint64_t v14;
  _QWORD *v15;
  double *v16;
  uint64_t v17;
  double *v18;
  unint64_t v19;
  unint64_t v20;
  double *v21;
  double *v22;
  double v23;
  double **v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  double *v29;
  unint64_t v30;
  unint64_t v31;
  double *v32;
  double *v33;
  double v34;
  double v35;
  unint64_t v36;
  double *v37;
  double *v38;
  double v39;
  uint64_t v40;
  double *v41;
  unint64_t v42;
  unint64_t v43;
  double *v44;
  double *v45;
  double v46;
  _QWORD *v47;
  void *v48;
  unsigned __int8 v49;
  _QWORD *v50;
  __int128 v51;

  if (a2 < a3)
  {
    v5 = a2;
    do
    {
      v7 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 3;
      v49 = 0;
      sub_20C644308(&v50, v7, &v49);
      v8 = (double **)sub_20C642604(*(_QWORD *)(a1 + 8), (uint64_t *)(**(_QWORD **)(a1 + 16) + 16 * v5));
      v10 = *v8;
      v9 = v8[1];
      if (*v8 == v9)
      {
        v15 = v50;
        *v50 |= 1uLL;
      }
      else
      {
        v11 = *(double ***)(a1 + 24);
        v12 = *v11;
        v13 = v11[1];
        v14 = v13 - *v11;
        v15 = v50;
        v16 = *v8;
        do
        {
          v17 = v14;
          if (v13 != v12)
          {
            v18 = v12;
            v19 = v14;
            do
            {
              v20 = v19 >> 1;
              v21 = &v18[v19 >> 1];
              v23 = *v21;
              v22 = v21 + 1;
              v19 += ~(v19 >> 1);
              if (v23 < *v16)
                v18 = v22;
              else
                v19 = v20;
            }
            while (v19);
            v17 = v18 - v12;
          }
          *(_QWORD *)((char *)v15 + (((unint64_t)(v17 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v17 + 1);
          ++v16;
        }
        while (v16 != v9);
        if ((unint64_t)((char *)v9 - (char *)v10) > 8)
        {
          v24 = *(double ***)(a1 + 32);
          v25 = *v24;
          v26 = (char *)v24[1] - (char *)*v24;
          if (v26)
          {
            v27 = v26 >> 3;
            v28 = *v10;
            v29 = v25;
            v30 = v27;
            do
            {
              v31 = v30 >> 1;
              v32 = &v29[v30 >> 1];
              v34 = *v32;
              v33 = v32 + 1;
              v30 += ~(v30 >> 1);
              if (v34 < v28)
                v29 = v33;
              else
                v30 = v31;
            }
            while (v30);
            v35 = *(v9 - 1);
            do
            {
              v36 = v27 >> 1;
              v37 = &v25[v27 >> 1];
              v39 = *v37;
              v38 = v37 + 1;
              v27 += ~(v27 >> 1);
              if (v35 < v39)
                v27 = v36;
              else
                v25 = v38;
            }
            while (v27);
            while (v29 != v25)
            {
              v40 = v14;
              if (v13 != v12)
              {
                v41 = v12;
                v42 = v14;
                do
                {
                  v43 = v42 >> 1;
                  v44 = &v41[v42 >> 1];
                  v46 = *v44;
                  v45 = v44 + 1;
                  v42 += ~(v42 >> 1);
                  if (v46 < *v29)
                    v41 = v45;
                  else
                    v42 = v43;
                }
                while (v42);
                v40 = v41 - v12;
              }
              *(_QWORD *)((char *)v15 + (((unint64_t)(v40 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v40 + 1);
              ++v29;
            }
          }
        }
      }
      v47 = *(_QWORD **)(**(_QWORD **)(a1 + 16) + 16 * v5);
      v48 = (void *)v47[45];
      if (v48)
      {
        operator delete(v48);
        v47[45] = 0;
        v47[46] = 0;
        v47[47] = 0;
        v15 = v50;
      }
      v47[45] = v15;
      result = *(double *)&v51;
      *((_OWORD *)v47 + 23) = v51;
      ++v5;
    }
    while (v5 != a3);
  }
  return result;
}

void sub_20C6442F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C644308(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BE6B698(a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          sub_20BE6BA08(&v13, a2);
        else
          sub_20BE6BAB8((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

uint64_t sub_20C6443E0(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v25[16];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v4 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 3);
  v6 = (uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 4;
  if (v5 < v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 > 1)
      goto LABEL_12;
    if (v7 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v8 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(_QWORD *)v8 = &unk_24C520F68;
        __dmb(0xBu);
        v8[8] = 0;
        *((_QWORD *)this - 4) = v8;
        *((_QWORD *)v8 - 3) = 2;
        v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &off_24C53F250;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2)
            + 16
            * ((((uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 4)
              + (unint64_t)((uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 4 < 0)) >> 1);
        *((_QWORD *)this + 1) = v10;
        *(_QWORD *)(v9 + 16) = v10;
        *(_QWORD *)(v9 + 24) = *((_QWORD *)this + 3);
        *(_QWORD *)(v9 + 32) = *((_QWORD *)this + 4);
        v11 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v11;
        *(_QWORD *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(_BYTE *)(v9 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v9 - 40))(*(_QWORD *)(v9 - 40), v9, v9 - 8);
        v5 = *((_QWORD *)this + 3);
        v6 = (uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 4;
        if (v5 >= v6)
          break;
        v12 = *((_QWORD *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v25 = 0x10000;
    v26 = *v4;
    v27 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C644808(v25, *((unsigned __int8 *)this + 52));
      v13 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0)
        break;
      v16 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v16;
      v15 = v25[2];
      if (v25[2] < 2u)
      {
        v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((_QWORD *)&v26 + 3 * v25[0] + 2) < (unint64_t)((uint64_t)(*((_QWORD *)&v26 + 3 * v25[0])
                                                                             - *((_QWORD *)&v26 + 3 * v25[0] + 1)) >> 4))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v17 = v25[1];
      v18 = v25[v25[1] + 3];
      v19 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(_QWORD *)v19 = &unk_24C520F68;
      __dmb(0xBu);
      v19[8] = 0;
      *((_QWORD *)this - 4) = v19;
      *((_QWORD *)v19 - 3) = 2;
      v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      v21 = (char *)&v26 + 24 * v17;
      *(_BYTE *)(v20 - 11) = 1;
      *(_QWORD *)v20 = &off_24C53F250;
      v22 = *(_OWORD *)v21;
      *(_QWORD *)(v20 + 24) = *((_QWORD *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(_QWORD *)(v20 + 32) = *((_QWORD *)this + 4);
      v23 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v23;
      *(_QWORD *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(_BYTE *)(v20 + 52) = *((_BYTE *)this + 52) - v18;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v20 - 40))(*(_QWORD *)(v20 - 40), v20, v20 - 8);
      v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v14 = v25[0];
LABEL_22:
    sub_20C6447A0((uint64_t)this, (uint64_t **)&v26 + 3 * v14);
    v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C6447A0((uint64_t)this, (uint64_t **)this + 1);
  return 0;
}

uint64_t sub_20C6447A0(uint64_t result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned __int8 **v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;

  v3 = *a2;
  v2 = a2[1];
  if (v2 != *a2)
  {
    v4 = result;
    do
    {
      v5 = *(unsigned __int8 ***)(v4 + 32);
      v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v2);
      result = pxrInternal__aapl__pxrReserved__::SdfLayer::Save(v6, 0);
      if ((result & 1) == 0)
        atomic_store(1u, *v5);
      v2 += 2;
    }
    while (v2 != v3);
  }
  return result;
}

unsigned __int8 *sub_20C644808(unsigned __int8 *result, unsigned int a2)
{
  unsigned int v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 v5;
  char v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = result[2];
  if (v2 <= 7)
  {
    v3 = result + 16;
    v4 = *result;
    v5 = result[v4 + 3];
    do
    {
      if (a2 <= v5)
        break;
      v6 = v4;
      v7 = &v3[24 * v4];
      v8 = v7 + 16;
      v9 = v7 + 8;
      if (*((_QWORD *)v7 + 2) >= (unint64_t)((uint64_t)(*(_QWORD *)v7 - *((_QWORD *)v7 + 1)) >> 4))
        break;
      v4 = (unint64_t)&result[v4];
      v10 = (v6 + 1) & 7;
      v11 = &v3[24 * v10];
      v12 = *((_QWORD *)v7 + 2);
      *(_OWORD *)v11 = *(_OWORD *)v7;
      *((_QWORD *)v11 + 2) = v12;
      v13 = *((_QWORD *)v11 + 1);
      *(_QWORD *)v7 = *(_QWORD *)v11;
      *result = v10;
      v14 = v13 + 16 * ((((*(_QWORD *)v11 - v13) >> 4) + (unint64_t)((*(_QWORD *)v11 - v13) >> 4 < 0)) >> 1);
      *(_QWORD *)v11 = v14;
      *v9 = v14;
      *v8 = v12;
      v5 = *(_BYTE *)(v4 + 3) + 1;
      *(_BYTE *)(v4 + 3) = v5;
      result[v10 + 3] = v5;
      result[2] = v2 + 1;
      LOBYTE(v4) = v10;
    }
    while (v2++ < 7);
  }
  return result;
}

_QWORD *sub_20C6448DC(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDE4FA4(a1, a2);
    sub_20C644944((uint64_t)a1, a2);
  }
  return a1;
}

void sub_20C644930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C599B38(&a9);
  _Unwind_Resume(a1);
}

void sub_20C644944(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v3;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v4;
  uint64_t v5;

  v3 = *(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(a1 + 8);
  if (a2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v3 + 24 * a2);
    v5 = 24 * a2;
    do
    {
      sub_20C6449B4(a1 + 16, v3);
      v3 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v3 + 24);
      v5 -= 24;
    }
    while (v5);
    v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3;
}

void sub_20C6449AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C6449B4(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2)
{
  unsigned int *v3;
  unsigned int v4;
  int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  v5 = 1;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
  v9 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  *(_QWORD *)a2 = off_24C53F778;
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C644A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C644A84(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BED4B34(a1, a2);
    v4 = (char *)a1[1];
    v5 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20C644B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C5755EC(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C644B2C(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53F298;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53F298;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C644ECC(*((_QWORD ***)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C644ECC(*((_QWORD ***)this + 4), v6, v4);
  return 0;
}

void sub_20C644ECC(_QWORD **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  const pxrInternal__aapl__pxrReserved__::UsdPrim **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[3];

  if (a2 < a3)
  {
    v4 = a2;
    do
    {
      v6 = (const pxrInternal__aapl__pxrReserved__::UsdPrim **)(**a1 + 16 * v4);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v13, *v6);
      v13[0] = off_24C53C378;
      v7 = a1[1];
      v8 = *v7;
      v9 = v7[1] - *v7;
      if (v9)
      {
        v10 = 0;
        v11 = 0;
        v12 = v9 >> 3;
        do
        {
          if (*((_DWORD *)*v6 + 104))
          {
            if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v6 + 50) + 360) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
            {
              pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::ComputeExtentFromPlugins((uint64_t)v13, v8 + v10, *a1[2] + 40 * (v11 + v4 * v12));
              v7 = a1[1];
              v8 = *v7;
            }
          }
          ++v11;
          v12 = (v7[1] - v8) >> 3;
          v10 += 8;
        }
        while (v11 < v12);
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)v13);
      ++v4;
    }
    while (v4 != a3);
  }
}

void sub_20C644FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)va);
  _Unwind_Resume(a1);
}

void sub_20C644FF0(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      while (v3 != v5)
      {
        v3 -= 32;
        sub_20C45FCFC((uint64_t)(a1 + 2), v3);
      }
      a1[1] = v5;
    }
  }
  else
  {
    sub_20C64526C((uint64_t)a1, a2 - v4);
  }
}

void **sub_20C645074(void **a1)
{
  if (*a1)
  {
    sub_20C645454((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_20C6450AC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C64514C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_20C645108(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C64514C((uint64_t)v2 + 16);
    operator delete(v2);
  }
  return a1;
}

void sub_20C64514C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  sub_20C6451BC((_QWORD *)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
}

void sub_20C6451BC(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v11 = __ldxr(v3);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v3));
      if (!v12)
      {
        __dmb(9u);
        v13 = *(void (**)(void))(*v4 + 8);
        if (v13)
          v13();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)a1[4];
        if (*a1)
        {
          v9 = 16 * *a1;
          do
          {
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v8);
            v8 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v10 + 16);
            v9 -= 16;
          }
          while (v9);
          v8 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)a1[4];
        }
        operator delete((char *)v8 - 16);
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void **sub_20C64526C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 16;
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
    return (void **)sub_20C645364((_DWORD *)a1, a2);
  v8 = v7 - *(_QWORD *)a1;
  v9 = a2 + (v8 >> 5);
  if (v9 >> 59)
    sub_20BDDF694();
  v10 = v8 >> 5;
  v11 = v5 - *(_QWORD *)a1;
  if (v11 >> 4 > v9)
    v9 = v11 >> 4;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
    v12 = 0x7FFFFFFFFFFFFFFLL;
  else
    v12 = v9;
  v19 = v4;
  if (v12)
    v13 = (char *)sub_20BED2F10(v4, v12);
  else
    v13 = 0;
  v15 = v13;
  v16 = &v13[32 * v10];
  v17 = v16;
  v18 = &v13[32 * v12];
  sub_20C6453DC(&v15, a2);
  sub_20C45FE4C((uint64_t *)a1, &v15);
  return sub_20C45FFF8(&v15);
}

void sub_20C645350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C45FFF8((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C645364(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  v3 = *((_QWORD *)result + 1);
  if (a2)
  {
    v4 = v3 + 32 * a2;
    v5 = v3 + 16;
    do
    {
      *(_DWORD *)(v5 - 16) = 1;
      *(_QWORD *)(v5 - 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v5);
      result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v5 + 4));
      *(_QWORD *)(v5 + 8) = 0;
      v6 = v5 + 16;
      v5 += 32;
    }
    while (v6 != v4);
  }
  else
  {
    v4 = *((_QWORD *)result + 1);
  }
  *((_QWORD *)v2 + 1) = v4;
  return result;
}

_DWORD *sub_20C6453DC(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  v3 = *((_QWORD *)result + 2);
  if (a2)
  {
    v4 = v3 + 32 * a2;
    v5 = v3 + 16;
    do
    {
      *(_DWORD *)(v5 - 16) = 1;
      *(_QWORD *)(v5 - 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v5);
      result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v5 + 4));
      *(_QWORD *)(v5 + 8) = 0;
      v6 = v5 + 16;
      v5 += 32;
    }
    while (v6 != v4);
  }
  else
  {
    v4 = *((_QWORD *)result + 2);
  }
  *((_QWORD *)v2 + 2) = v4;
  return result;
}

void sub_20C645454(uint64_t a1, _QWORD *a2)
{
  _QWORD *i;

  for (i = *(_QWORD **)(a1 + 8); i != a2; sub_20C6451BC(i))
    i -= 5;
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t sub_20C6454A8(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53F2E0;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53F2E0;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C645848(*((pxrInternal__aapl__pxrReserved__::UsdGeomImageable **)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C645848(*((pxrInternal__aapl__pxrReserved__::UsdGeomImageable **)this + 4), v6, v4);
  return 0;
}

void sub_20C645848(pxrInternal__aapl__pxrReserved__::UsdGeomImageable *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  double v5;
  uint64_t **OrderedPurposeTokens;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[4];
  _QWORD v26[3];
  _BYTE v27[360];
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[8];

  v3 = a2;
  v30[6] = *MEMORY[0x24BDAC8D0];
  v5 = *(double *)(**(_QWORD **)a1 + 8 * a2);
  OrderedPurposeTokens = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomImageable::GetOrderedPurposeTokens(a1);
  memset(v26, 0, sizeof(v26));
  sub_20BFE538C(v26, *OrderedPurposeTokens, OrderedPurposeTokens[1], OrderedPurposeTokens[1] - *OrderedPurposeTokens);
  pxrInternal__aapl__pxrReserved__::UsdGeomBBoxCache::UsdGeomBBoxCache(v27, v26, 0, 0, v5);
  *(_QWORD *)&v22 = v26;
  sub_20BEEB2B8((void ***)&v22);
  if (v3 < a3)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomBBoxCache::SetTime((uint64_t)v27, *(double *)(**(_QWORD **)a1 + 8 * v3));
      v7 = (uint64_t *)*((_QWORD *)a1 + 1);
      v8 = *v7;
      if (v7[1] != *v7)
      {
        v9 = 0;
        do
        {
          v10 = (uint64_t *)(v8 + 40 * v9);
          v11 = *v10;
          if (*v10)
          {
            v12 = v10[4];
            v13 = 16 * v11;
            while (!*(_DWORD *)(*(_QWORD *)v12 + 416)
                 || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 400) + 360) + 8 * (v3 >> 6)) & (1 << v3)) == 0)
            {
              v12 += 16;
              v13 -= 16;
              if (!v13)
                goto LABEL_13;
            }
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v25, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)(**((_QWORD **)a1 + 2) + 32 * v9));
            v25[3] = 0;
            v25[0] = off_24C53C890;
            v15 = **(_QWORD **)a1;
            v14 = *(_QWORD *)(*(_QWORD *)a1 + 8);
            pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI::ComputeExtentsHint((pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI *)v25, (pxrInternal__aapl__pxrReserved__::UsdGeomBBoxCache *)v27, v16, (uint64_t)&v22);
            v17 = v3 + ((v14 - v15) >> 3) * v9;
            v18 = **((_QWORD **)a1 + 3);
            v19 = (__int128 *)(v18 + 40 * v17);
            if (v19 != &v22)
            {
              sub_20BF5618C(v18 + 40 * v17);
              v20 = v23;
              *v19 = v22;
              v19[1] = v20;
              v22 = 0u;
              v23 = 0u;
              *(_QWORD *)(v18 + 40 * v17 + 32) = v24;
              v24 = 0;
            }
            sub_20BF5618C((uint64_t)&v22);
            pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI::~UsdGeomModelAPI((pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI *)v25);
            v7 = (uint64_t *)*((_QWORD *)a1 + 1);
            v8 = *v7;
          }
LABEL_13:
          ++v9;
        }
        while (v9 < 0xCCCCCCCCCCCCCCCDLL * ((v7[1] - v8) >> 3));
      }
      ++v3;
    }
    while (v3 != a3);
  }
  sub_20C548CF4((uint64_t)v30);
  sub_20C543484((uint64_t)&v29);
  *(_QWORD *)&v22 = &v28;
  sub_20BEEB2B8((void ***)&v22);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v27);
}

void sub_20C645AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C645B18(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20C645B70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C645B94(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned int v15;
  unsigned int i;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned int v24;
  char v25;
  unsigned int v26;
  unsigned __int8 v27;
  char *v28;
  unsigned __int8 v29;
  _BYTE *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 v34[16];
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v4 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 3);
  v6 = (uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 4;
  if (v5 < v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 > 1)
      goto LABEL_12;
    if (v7 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v8 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(_QWORD *)v8 = &unk_24C520F68;
        __dmb(0xBu);
        v8[8] = 0;
        *((_QWORD *)this - 4) = v8;
        *((_QWORD *)v8 - 3) = 2;
        v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &off_24C53F328;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2)
            + 16
            * ((((uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 4)
              + (unint64_t)((uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 4 < 0)) >> 1);
        *((_QWORD *)this + 1) = v10;
        *(_QWORD *)(v9 + 16) = v10;
        *(_QWORD *)(v9 + 24) = *((_QWORD *)this + 3);
        *(_QWORD *)(v9 + 32) = *((_QWORD *)this + 4);
        v11 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v11;
        *(_QWORD *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(_BYTE *)(v9 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v9 - 40))(*(_QWORD *)(v9 - 40), v9, v9 - 8);
        v5 = *((_QWORD *)this + 3);
        v6 = (uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 4;
        if (v5 >= v6)
          break;
        v12 = *((_QWORD *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6)
  {
    v13 = *((_BYTE *)this + 52);
    if (v13)
    {
      *(_DWORD *)v34 = 0x10000;
      v35 = *v4;
      v36 = *((_QWORD *)this + 3);
      v14 = 1;
      while (1)
      {
        if (v14 <= 7u)
        {
          LOBYTE(v15) = v34[0];
          for (i = v34[v34[0] + 3]; i < v13; i = v23)
          {
            v17 = v15;
            v18 = (_QWORD *)&v35 + 3 * v15;
            if (v18[2] >= (unint64_t)((uint64_t)(*v18 - v18[1]) >> 4))
              break;
            v15 = ((_BYTE)v15 + 1) & 7;
            v19 = (char *)&v35 + 24 * v15;
            v20 = v18[2];
            *(_OWORD *)v19 = *(_OWORD *)v18;
            *((_QWORD *)v19 + 2) = v20;
            v21 = *((_QWORD *)v19 + 1);
            *v18 = *(_QWORD *)v19;
            v22 = v21
                + 16 * ((((*(_QWORD *)v19 - v21) >> 4) + (unint64_t)((*(_QWORD *)v19 - v21) >> 4 < 0)) >> 1);
            *(_QWORD *)v19 = v22;
            v18[1] = v22;
            v18[2] = v20;
            v23 = v34[v17 + 3] + 1;
            v34[v17 + 3] = v23;
            v34[v15 + 3] = v23;
            v24 = v14++;
            if (v24 > 6)
              break;
          }
          v34[0] = v15;
          v34[2] = v14;
        }
        v25 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
        __dmb(0xBu);
        if ((v25 & 1) == 0)
          break;
        v27 = *((_BYTE *)this + 52) + 1;
        *((_BYTE *)this + 52) = v27;
        v14 = v34[2];
        if (v34[2] < 2u)
        {
          v26 = v34[0];
          if (v34[v34[0] + 3] >= v27
            || *((_QWORD *)&v35 + 3 * v34[0] + 2) >= (unint64_t)((uint64_t)(*((_QWORD *)&v35 + 3 * v34[0])
                                                                                - *((_QWORD *)&v35 + 3 * v34[0] + 1)) >> 4))
          {
            goto LABEL_33;
          }
        }
        else
        {
          v28 = (char *)&v35 + 24 * v34[1];
          v29 = v34[v34[1] + 3];
          v30 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
          *(v30 - 11) = 1;
          *(_QWORD *)v30 = &unk_24C520F68;
          __dmb(0xBu);
          v30[8] = 0;
          *((_QWORD *)this - 4) = v30;
          *((_QWORD *)v30 - 3) = 2;
          v31 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v30, 0x38uLL);
          *(_BYTE *)(v31 - 11) = 1;
          *(_QWORD *)v31 = &off_24C53F328;
          *(_OWORD *)(v31 + 8) = *(_OWORD *)v28;
          *(_QWORD *)(v31 + 24) = *((_QWORD *)v28 + 2);
          *(_QWORD *)(v31 + 32) = *((_QWORD *)this + 4);
          v32 = *((_QWORD *)this + 5) >> 1;
          *((_QWORD *)this + 5) = v32;
          *(_QWORD *)(v31 + 40) = v32;
          *(_DWORD *)(v31 + 48) = 2;
          *(_BYTE *)(v31 + 52) = *((_BYTE *)this + 52) - v29;
          (***(void (****)(_QWORD, unint64_t, uint64_t))(v31 - 40))(*(_QWORD *)(v31 - 40), v31, v31 - 8);
          v14 = --v34[2];
          v34[1] = (v34[1] + 1) & 7;
        }
LABEL_34:
        if (!v14 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
          return 0;
        v13 = *((_BYTE *)this + 52);
      }
      v26 = v34[0];
      v14 = v34[2];
LABEL_33:
      sub_20C646010((uint64_t)this, (uint64_t **)&v35 + 3 * v26);
      v34[2] = --v14;
      v34[0] = (v26 - 1) & 7;
      goto LABEL_34;
    }
  }
  sub_20C646010((uint64_t)this, (uint64_t **)this + 1);
  return 0;
}

void sub_20C646010(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  _DWORD *v4;
  double *v5;
  uint64_t v6;
  double v7;
  unint64_t v8;
  const char *v9;
  char *v10;
  const char *Text;
  const char *v12;
  char *v13;
  void **v14;
  unsigned int *v15;
  unsigned int v16;
  char *v17;
  const char *v18;
  const char *v19;
  char *v20;
  char v21;
  const char *v22;
  const char *v23;
  char *v24;
  const char *v26;
  const char *v27;
  char *v28;
  unsigned int *v29;
  unsigned int v30;
  const char *v31;
  char *v32;
  double v33;
  uint64_t v34;
  _DWORD *v35;
  const char *v36;
  const char *v37;
  char *v38;
  const char *v39;
  const char *v40;
  char *v41;
  unint64_t v42;
  __n128 *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  const char *v51;
  const char *v52;
  char *v53;
  unsigned int *v54;
  unsigned int v55;
  const char *v56;
  const char *v57;
  char *v58;
  const char *v59;
  const char *v60;
  char *v61;
  uint64_t *AnimQuery;
  char *v63;
  char v64;
  const char *v65;
  const char *v66;
  char *v67;
  unsigned int *v68;
  unsigned int v69;
  uint64_t *v70;
  double v71;
  _BYTE v72[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v73;
  int v74;
  int v75;
  uint64_t v76;
  double v77[9];
  void *__p[2];
  char v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;

  v2 = a2[1];
  v70 = *a2;
  if (v2 != *a2)
  {
    v4 = (_DWORD *)__p + 1;
    do
    {
      v5 = *(double **)(a1 + 32);
      v6 = *v2;
      v7 = *v5;
      v8 = *((_QWORD *)v5 + 1);
      v71 = v7;
      if (((*(_QWORD *)(*(_QWORD *)(v6 + 360) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
      {
        if (sub_20C624E4C(1))
        {
          pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v6, v9, v10, (uint64_t)&v80);
          sub_20C348EEC((uint64_t)&v80, (int *)v77);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v77);
          sub_20C53FBD0(&v71);
          v14 = __p;
          if (v79 < 0)
            v14 = (void **)__p[0];
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Updating animation for <%s> @ time %s\n", v12, v13, Text, v14);
          if (v79 < 0)
            operator delete(__p[0]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v77 + 1);
          sub_20BFD265C(v77);
          if ((BYTE8(v81) & 7) != 0)
          {
            v15 = (unsigned int *)(*((_QWORD *)&v81 + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v16 = __ldxr(v15);
            while (__stlxr(v16 - 2, v15));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v81 + 1);
          sub_20BFD265C(&v81);
          if (*((_QWORD *)&v80 + 1))
            sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v80 + 1));
          v7 = v71;
        }
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v6, v9, v10, (uint64_t)&v80);
        if ((~*(unsigned __int8 *)(v6 + 80) & 3) == 0)
        {
          if (sub_20C624E4C(1))
          {
            sub_20C348EEC((uint64_t)&v80, (int *)__p);
            v18 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v19, v20, "compute skinning xforms", v18);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
            sub_20BFD265C(__p);
          }
          if ((*(_BYTE *)(v6 + 80) & 0xC) != 0)
          {
            if (pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeSkinningTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((uint64_t *)v6, (char *)(v6 + 88), v17, v7))v21 = 16;
            else
              v21 = 0;
            *(_BYTE *)(v6 + 80) = *(_BYTE *)(v6 + 80) & 0xEF | v21;
            if (sub_20C624E4C(1))
            {
              sub_20C348EEC((uint64_t)&v80, (int *)__p);
              v22 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v23, v24, "compute skinning xforms", v22, (*(unsigned __int8 *)(v6 + 80) >> 4) & 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
              sub_20BFD265C(__p);
            }
            *(_BYTE *)(v6 + 80) &= ~8u;
          }
          else if (sub_20C624E4C(1))
          {
            sub_20C348EEC((uint64_t)&v80, (int *)__p);
            v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v27, v28, "compute skinning xforms", v26);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
            sub_20BFD265C(__p);
          }
        }
        if ((BYTE8(v81) & 7) != 0)
        {
          v29 = (unsigned int *)(*((_QWORD *)&v81 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v30 = __ldxr(v29);
          while (__stlxr(v30 - 2, v29));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v81 + 1);
        sub_20BFD265C(&v81);
        if (*((_QWORD *)&v80 + 1))
          sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v80 + 1));
        v33 = v71;
        if ((*(_BYTE *)(v6 + 80) & 0x10) != 0)
        {
          pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v6, v31, v32, (uint64_t)v72);
          if ((~*(unsigned __int8 *)(v6 + 128) & 3) == 0)
          {
            v34 = a1;
            v35 = v4;
            if (sub_20C624E4C(1))
            {
              sub_20C348EEC((uint64_t)v72, (int *)&v80);
              v36 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v80);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v37, v38, "compute skinning inverse transpose xforms", v36);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v80 + 1);
              sub_20BFD265C(&v80);
            }
            if ((*(_BYTE *)(v6 + 128) & 0xC) != 0)
            {
              v42 = *(_QWORD *)(v6 + 88);
              v84 = 0;
              v82 = 0u;
              v83 = 0u;
              v80 = 0u;
              v81 = 0u;
              __p[0] = &v80;
              sub_20C017334((unint64_t *)(v6 + 136), v42, (uint64_t *)__p);
              v43 = *(__n128 **)(v6 + 120);
              sub_20C01764C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v6 + 136), v44, v45);
              v46 = *(_QWORD *)(v6 + 136);
              if (v46)
              {
                v47 = *(_QWORD *)(v6 + 168);
                do
                {
                  pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix(v43, (uint64_t)v77);
                  pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetInverse(v77, 0, 0.0, (uint64_t)__p);
                  pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)__p, (uint64_t)&v80);
                  *(_OWORD *)v47 = v80;
                  v48 = v81;
                  v49 = v82;
                  v50 = v83;
                  *(_QWORD *)(v47 + 64) = v84;
                  *(_OWORD *)(v47 + 32) = v49;
                  *(_OWORD *)(v47 + 48) = v50;
                  *(_OWORD *)(v47 + 16) = v48;
                  v47 += 72;
                  v43 += 8;
                  --v46;
                }
                while (v46);
              }
              *(_BYTE *)(v6 + 128) |= 0x10u;
              if (sub_20C624E4C(1))
              {
                sub_20C348EEC((uint64_t)v72, (int *)&v80);
                v51 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v80);
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v52, v53, "compute skinning inverse transpose xforms", v51, (*(unsigned __int8 *)(v6 + 128) >> 4) & 1);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v80 + 1);
                sub_20BFD265C(&v80);
              }
              v4 = v35;
              a1 = v34;
              *(_BYTE *)(v6 + 128) &= ~8u;
            }
            else if (sub_20C624E4C(1))
            {
              sub_20C348EEC((uint64_t)v72, (int *)&v80);
              v39 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v80);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v40, v41, "compute skinning inverse transpose xforms", v39);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v80 + 1);
              sub_20BFD265C(&v80);
            }
          }
          if ((v76 & 7) != 0)
          {
            v54 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
            do
              v55 = __ldxr(v54);
            while (__stlxr(v55 - 2, v54));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v75);
          sub_20BFD265C(&v74);
          if (v73)
            sub_20C35C614(v73);
          v33 = v71;
        }
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v6, v31, v32, (uint64_t)&v80);
        if ((~*(unsigned __int8 *)(v6 + 176) & 3) == 0)
        {
          if (sub_20C624E4C(1))
          {
            sub_20C348EEC((uint64_t)&v80, (int *)__p);
            v56 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v57, v58, "compute blend shape weights", v56);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
            sub_20BFD265C(__p);
          }
          if ((*(_BYTE *)(v6 + 176) & 0xC) != 0)
          {
            AnimQuery = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v6);
            if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeBlendShapeWeights(AnimQuery, (const char *)(v6 + 184), v63, v33))v64 = 16;
            else
              v64 = 0;
            *(_BYTE *)(v6 + 176) = *(_BYTE *)(v6 + 176) & 0xEF | v64;
            if (sub_20C624E4C(1))
            {
              sub_20C348EEC((uint64_t)&v80, (int *)__p);
              v65 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v66, v67, "compute blend shape weights", v65, (*(unsigned __int8 *)(v6 + 176) >> 4) & 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
              sub_20BFD265C(__p);
            }
            *(_BYTE *)(v6 + 176) &= ~8u;
          }
          else if (sub_20C624E4C(1))
          {
            sub_20C348EEC((uint64_t)&v80, (int *)__p);
            v59 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v60, v61, "compute blend shape weights", v59);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
            sub_20BFD265C(__p);
          }
        }
        if ((BYTE8(v81) & 7) != 0)
        {
          v68 = (unsigned int *)(*((_QWORD *)&v81 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v69 = __ldxr(v68);
          while (__stlxr(v69 - 2, v68));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v81 + 1);
        sub_20BFD265C(&v81);
        if (*((_QWORD *)&v80 + 1))
          sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v80 + 1));
      }
      v2 += 2;
    }
    while (v2 != v70);
  }
}

void sub_20C646718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13, _DWORD *a14, _DWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  unsigned int *v39;
  unsigned int v40;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a13);
  sub_20BFD265C((_DWORD *)(v37 - 192));
  if ((a22 & 7) != 0)
  {
    v39 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a15);
  sub_20BFD265C(a14);
  if (a20)
    sub_20C35C614(a20);
  _Unwind_Resume(a1);
}

uint64_t sub_20C646948(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned int v15;
  unsigned int i;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned int v24;
  char v25;
  unsigned int v26;
  unsigned __int8 v27;
  char *v28;
  unsigned __int8 v29;
  _BYTE *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 v34[16];
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v4 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 3);
  v6 = (uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 4;
  if (v5 < v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 > 1)
      goto LABEL_12;
    if (v7 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v8 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(_QWORD *)v8 = &unk_24C520F68;
        __dmb(0xBu);
        v8[8] = 0;
        *((_QWORD *)this - 4) = v8;
        *((_QWORD *)v8 - 3) = 2;
        v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &off_24C53F370;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2)
            + 16
            * ((((uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 4)
              + (unint64_t)((uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 4 < 0)) >> 1);
        *((_QWORD *)this + 1) = v10;
        *(_QWORD *)(v9 + 16) = v10;
        *(_QWORD *)(v9 + 24) = *((_QWORD *)this + 3);
        *(_QWORD *)(v9 + 32) = *((_QWORD *)this + 4);
        v11 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v11;
        *(_QWORD *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(_BYTE *)(v9 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v9 - 40))(*(_QWORD *)(v9 - 40), v9, v9 - 8);
        v5 = *((_QWORD *)this + 3);
        v6 = (uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 4;
        if (v5 >= v6)
          break;
        v12 = *((_QWORD *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6)
  {
    v13 = *((_BYTE *)this + 52);
    if (v13)
    {
      *(_DWORD *)v34 = 0x10000;
      v35 = *v4;
      v36 = *((_QWORD *)this + 3);
      v14 = 1;
      while (1)
      {
        if (v14 <= 7u)
        {
          LOBYTE(v15) = v34[0];
          for (i = v34[v34[0] + 3]; i < v13; i = v23)
          {
            v17 = v15;
            v18 = (_QWORD *)&v35 + 3 * v15;
            if (v18[2] >= (unint64_t)((uint64_t)(*v18 - v18[1]) >> 4))
              break;
            v15 = ((_BYTE)v15 + 1) & 7;
            v19 = (char *)&v35 + 24 * v15;
            v20 = v18[2];
            *(_OWORD *)v19 = *(_OWORD *)v18;
            *((_QWORD *)v19 + 2) = v20;
            v21 = *((_QWORD *)v19 + 1);
            *v18 = *(_QWORD *)v19;
            v22 = v21
                + 16 * ((((*(_QWORD *)v19 - v21) >> 4) + (unint64_t)((*(_QWORD *)v19 - v21) >> 4 < 0)) >> 1);
            *(_QWORD *)v19 = v22;
            v18[1] = v22;
            v18[2] = v20;
            v23 = v34[v17 + 3] + 1;
            v34[v17 + 3] = v23;
            v34[v15 + 3] = v23;
            v24 = v14++;
            if (v24 > 6)
              break;
          }
          v34[0] = v15;
          v34[2] = v14;
        }
        v25 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
        __dmb(0xBu);
        if ((v25 & 1) == 0)
          break;
        v27 = *((_BYTE *)this + 52) + 1;
        *((_BYTE *)this + 52) = v27;
        v14 = v34[2];
        if (v34[2] < 2u)
        {
          v26 = v34[0];
          if (v34[v34[0] + 3] >= v27
            || *((_QWORD *)&v35 + 3 * v34[0] + 2) >= (unint64_t)((uint64_t)(*((_QWORD *)&v35 + 3 * v34[0])
                                                                                - *((_QWORD *)&v35 + 3 * v34[0] + 1)) >> 4))
          {
            goto LABEL_33;
          }
        }
        else
        {
          v28 = (char *)&v35 + 24 * v34[1];
          v29 = v34[v34[1] + 3];
          v30 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
          *(v30 - 11) = 1;
          *(_QWORD *)v30 = &unk_24C520F68;
          __dmb(0xBu);
          v30[8] = 0;
          *((_QWORD *)this - 4) = v30;
          *((_QWORD *)v30 - 3) = 2;
          v31 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v30, 0x38uLL);
          *(_BYTE *)(v31 - 11) = 1;
          *(_QWORD *)v31 = &off_24C53F370;
          *(_OWORD *)(v31 + 8) = *(_OWORD *)v28;
          *(_QWORD *)(v31 + 24) = *((_QWORD *)v28 + 2);
          *(_QWORD *)(v31 + 32) = *((_QWORD *)this + 4);
          v32 = *((_QWORD *)this + 5) >> 1;
          *((_QWORD *)this + 5) = v32;
          *(_QWORD *)(v31 + 40) = v32;
          *(_DWORD *)(v31 + 48) = 2;
          *(_BYTE *)(v31 + 52) = *((_BYTE *)this + 52) - v29;
          (***(void (****)(_QWORD, unint64_t, uint64_t))(v31 - 40))(*(_QWORD *)(v31 - 40), v31, v31 - 8);
          v14 = --v34[2];
          v34[1] = (v34[1] + 1) & 7;
        }
LABEL_34:
        if (!v14 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
          return 0;
        v13 = *((_BYTE *)this + 52);
      }
      v26 = v34[0];
      v14 = v34[2];
LABEL_33:
      sub_20C646DC4((uint64_t)this, (uint64_t **)&v35 + 3 * v26);
      v34[2] = --v14;
      v34[0] = (v26 - 1) & 7;
      goto LABEL_34;
    }
  }
  sub_20C646DC4((uint64_t)this, (uint64_t **)this + 1);
  return 0;
}

void sub_20C646DC4(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;

  v2 = *a2;
  v3 = a2[1];
  if (v3 != *a2)
  {
    do
    {
      v5 = *v3;
      v3 += 2;
      sub_20C646E10(v5, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), **(double **)(a1 + 32));
    }
    while (v3 != v2);
  }
}

void sub_20C646E10(uint64_t a1, unint64_t a2, double a3)
{
  double v4;
  const char *Text;
  const char *v6;
  char *v7;
  uint64_t p_p;
  const char *v9;
  const char *v10;
  char *v11;
  const char *v12;
  const char *v13;
  char *v14;
  char v15;
  const char *v16;
  const char *v17;
  char *v18;
  double v19;
  const char *v20;
  const char *v21;
  char *v22;
  const char *v23;
  const char *v24;
  char *v25;
  char v26;
  const char *v27;
  const char *v28;
  char *v29;
  double v30;
  const char *v31;
  const char *v32;
  char *v33;
  const char *v34;
  const char *v35;
  char *v36;
  char v37;
  const char *v38;
  const char *v39;
  char *v40;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v41;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v63;
  const char *v64;
  const char *v65;
  char *v66;
  const char *v67;
  const char *v68;
  char *v69;
  _QWORD *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  const char *v75;
  const char *v76;
  char *v77;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v78;
  const char *v79;
  const char *v80;
  char *v81;
  const char *v82;
  const char *v83;
  char *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  const char *v89;
  const char *v90;
  char *v91;
  const char *v92;
  const char *v93;
  char *v94;
  const char *v95;
  const char *v96;
  char *v97;
  __int128 v98;
  __int128 v99;
  const char *v100;
  const char *v101;
  char *v102;
  const char *v103;
  const char *v104;
  char *v105;
  const char *v106;
  const char *v107;
  char *v108;
  char v109;
  const char *v110;
  const char *v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  char *v123;
  uint64_t *v124;
  __int128 *v125;
  _BOOL4 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  char *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  _BOOL4 v142;
  uint64_t v143;
  char *v144;
  unint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t initial_auto_partitioner_divisor;
  uint64_t v156;
  unsigned __int8 v157;
  uint64_t v158;
  char *v159;
  char *v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  tbb::task_group_context *v168;
  _BOOL4 v169;
  uint64_t v170;
  char *v171;
  unint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v183;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v184;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v185;
  double v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 *v195;
  __int128 v196;
  __int128 v197;
  char *v198;
  _QWORD v199[4];
  char *v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  char *v214;
  __int128 __p;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223;
  int v224;
  uint64_t v225;

  v225 = *MEMORY[0x24BDAC8D0];
  v186 = a3;
  if (!*(_DWORD *)(a1 + 416)
    || ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 400) + 360) + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
  {
    return;
  }
  v4 = a3;
  if (sub_20C624E4C(1))
  {
    sub_20C348EEC(a1, (int *)&v204);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v204);
    sub_20C53FBD0(&v186);
    if ((SBYTE7(v216) & 0x80u) == 0)
      p_p = (uint64_t)&__p;
    else
      p_p = __p;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Updating skinning for <%s> @ time %s\n", v6, v7, Text, p_p);
    if (SBYTE7(v216) < 0)
      operator delete((void *)__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v204 + 1);
    sub_20BFD265C(&v204);
    v4 = v186;
  }
  *(_BYTE *)(a1 + 1888) = 0;
  *(_BYTE *)(a1 + 1960) = 0;
  *(_BYTE *)(a1 + 2032) = 0;
  *(_BYTE *)(a1 + 2192) = 0;
  if ((~*(unsigned __int8 *)(a1 + 512) & 3) == 0)
  {
    if (sub_20C624E4C(1))
    {
      sub_20C348EEC(a1, (int *)&__p);
      v9 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v10, v11, "compute rest points", v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_20BFD265C(&__p);
    }
    if ((*(_BYTE *)(a1 + 512) & 0xC) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(a1 + 560, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(a1 + 520), v4))v15 = 16;
      else
        v15 = 0;
      *(_BYTE *)(a1 + 512) = *(_BYTE *)(a1 + 512) & 0xEF | v15;
      if (sub_20C624E4C(1))
      {
        sub_20C348EEC(a1, (int *)&__p);
        v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v17, v18, "compute rest points", v16, (*(unsigned __int8 *)(a1 + 512) >> 4) & 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
      }
      *(_BYTE *)(a1 + 512) &= ~8u;
    }
    else if (sub_20C624E4C(1))
    {
      sub_20C348EEC(a1, (int *)&__p);
      v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v13, v14, "compute rest points", v12);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_20BFD265C(&__p);
    }
  }
  if ((~*(unsigned __int8 *)(a1 + 680) & 3) == 0)
  {
    v19 = v186;
    if (sub_20C624E4C(1))
    {
      sub_20C348EEC(a1, (int *)&__p);
      v20 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v21, v22, "compute rest normals", v20);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_20BFD265C(&__p);
    }
    if ((*(_BYTE *)(a1 + 680) & 0xC) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(a1 + 728, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(a1 + 688), v19))v26 = 16;
      else
        v26 = 0;
      *(_BYTE *)(a1 + 680) = *(_BYTE *)(a1 + 680) & 0xEF | v26;
      if (sub_20C624E4C(1))
      {
        sub_20C348EEC(a1, (int *)&__p);
        v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v28, v29, "compute rest normals", v27, (*(unsigned __int8 *)(a1 + 680) >> 4) & 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
      }
      *(_BYTE *)(a1 + 680) &= ~8u;
    }
    else if (sub_20C624E4C(1))
    {
      sub_20C348EEC(a1, (int *)&__p);
      v23 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v24, v25, "compute rest normals", v23);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_20BFD265C(&__p);
    }
  }
  if ((~*(unsigned __int8 *)(a1 + 848) & 3) == 0)
  {
    v30 = v186;
    if (sub_20C624E4C(1))
    {
      sub_20C348EEC(a1, (int *)&__p);
      v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v32, v33, "compute face vertex indices", v31);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_20BFD265C(&__p);
    }
    if ((*(_BYTE *)(a1 + 848) & 0xC) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>(a1 + 896, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(a1 + 856), v30))v37 = 16;
      else
        v37 = 0;
      *(_BYTE *)(a1 + 848) = *(_BYTE *)(a1 + 848) & 0xEF | v37;
      if (sub_20C624E4C(1))
      {
        sub_20C348EEC(a1, (int *)&__p);
        v38 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v39, v40, "compute face vertex indices", v38, (*(unsigned __int8 *)(a1 + 848) >> 4) & 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
      }
      *(_BYTE *)(a1 + 848) &= ~8u;
    }
    else if (sub_20C624E4C(1))
    {
      sub_20C348EEC(a1, (int *)&__p);
      v34 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v35, v36, "compute face vertex indices", v34);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_20BFD265C(&__p);
    }
  }
  v41 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 1848);
  v42 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 1920);
  v43 = *(_DWORD *)(a1 + 416);
  if ((v43 & 0x18) != 0)
  {
    *(_QWORD *)&v217 = 0;
    __p = 0u;
    v216 = 0u;
    if (*(_QWORD *)(a1 + 424))
    {
      v44 = *(_QWORD *)(a1 + 400);
      if ((*(_BYTE *)(v44 + 176) & 0x10) != 0)
      {
        sub_20BF9B1F8((uint64_t)&__p, (__int128 *)(v44 + 184));
        *(_QWORD *)&v206 = 0;
        v204 = 0u;
        v205 = 0u;
        if (sub_20C6356A8(*(uint64_t **)(a1 + 288), &__p, (uint64_t)&v204, 1, 0))
        {
          v203 = 0;
          v201 = 0u;
          v202 = 0u;
          *(_QWORD *)&v189 = 0;
          v187 = 0u;
          v188 = 0u;
          v198 = 0;
          v196 = 0u;
          v197 = 0u;
          v45 = *(_QWORD **)(a1 + 424);
          *(_QWORD *)&v212 = v206;
          *((_QWORD *)&v212 + 1) = v204;
          if (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeWeights(v45, &v212, (char *)&v201, (unint64_t *)&v187, (unint64_t *)&v196))
          {
            v48 = *(_DWORD *)(a1 + 416);
            if ((v48 & 8) != 0)
            {
              if (!*(_BYTE *)(a1 + 1888))
                sub_20C284DC8(a1 + 1848, (__int128 *)(a1 + 520));
              v49 = *(_QWORD *)(a1 + 424);
              v50 = v203;
              v51 = (char *)v201;
              v52 = v189;
              v53 = (char *)v187;
              v54 = (uint64_t)v198;
              v55 = (char *)v196;
              sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 1848), v46, v47);
              *(_BYTE *)(a1 + 1888) = pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedPoints(v49, v50, v51, v52, v53, v54, v55, (_QWORD *)(a1 + 440), (uint64_t *)(a1 + 464), *(tbb::task_group_context **)(a1 + 1880), *(tbb::task_group_context **)(a1 + 1848));
              v48 = *(_DWORD *)(a1 + 416);
              v42 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 1920);
            }
            if ((v48 & 0x10) != 0)
            {
              if (!*(_BYTE *)(a1 + 1960))
                sub_20C284DC8((uint64_t)v42, (__int128 *)(a1 + 688));
              v56 = *(_QWORD *)(a1 + 424);
              v57 = v203;
              v58 = (char *)v201;
              v59 = v189;
              v60 = (char *)v187;
              v61 = (uint64_t)v198;
              v62 = (char *)v196;
              sub_20BF5AFC0(v42, v46, v47);
              *(_BYTE *)(a1 + 1960) = pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedNormals(v56, v57, v58, v59, v60, v61, v62, (_QWORD *)(a1 + 440), (uint64_t *)(a1 + 488), *(tbb::task_group_context **)(a1 + 1952), *(tbb::task_group_context **)(a1 + 1920));
              v41 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 1848);
            }
          }
          sub_20BF5618C((uint64_t)&v196);
          sub_20BF5618C((uint64_t)&v187);
          sub_20BF5618C((uint64_t)&v201);
        }
        sub_20BF5618C((uint64_t)&v204);
      }
    }
    sub_20BF5618C((uint64_t)&__p);
    v43 = *(_DWORD *)(a1 + 416);
  }
  if ((v43 & 7) == 0)
    goto LABEL_163;
  if ((~*(unsigned __int8 *)(a1 + 1016) & 3) == 0)
  {
    if (sub_20C624E4C(1))
    {
      sub_20C348EEC(a1, (int *)&__p);
      v64 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v65, v66, "compute skinning method", v64);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_20BFD265C(&__p);
    }
    if ((*(_BYTE *)(a1 + 1016) & 0xC) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetSkinningMethod((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)a1, v63, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&__p);
      v70 = (_QWORD *)(a1 + 1024);
      if (&__p == (__int128 *)(a1 + 1024))
      {
        if ((__p & 7) != 0)
        {
          v73 = (unsigned int *)(__p & 0xFFFFFFFFFFFFFFF8);
          do
            v74 = __ldxr(v73);
          while (__stlxr(v74 - 2, v73));
        }
      }
      else
      {
        if ((*v70 & 7) != 0)
        {
          v71 = (unsigned int *)(*v70 & 0xFFFFFFFFFFFFFFF8);
          do
            v72 = __ldxr(v71);
          while (__stlxr(v72 - 2, v71));
        }
        *v70 = __p;
      }
      *(_BYTE *)(a1 + 1016) |= 0x10u;
      if (sub_20C624E4C(1))
      {
        sub_20C348EEC(a1, (int *)&__p);
        v75 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v76, v77, "compute skinning method", v75, (*(unsigned __int8 *)(a1 + 1016) >> 4) & 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
      }
      *(_BYTE *)(a1 + 1016) &= ~8u;
    }
    else if (sub_20C624E4C(1))
    {
      sub_20C348EEC(a1, (int *)&__p);
      v67 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v68, v69, "compute skinning method", v67);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_20BFD265C(&__p);
    }
  }
  if ((~*(unsigned __int8 *)(a1 + 1152) & 3) == 0)
  {
    if (sub_20C624E4C(1))
    {
      sub_20C348EEC(a1, (int *)&__p);
      v79 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v80, v81, "compute geom bind xform", v79);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_20BFD265C(&__p);
    }
    if ((*(_BYTE *)(a1 + 1152) & 0xC) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform(a1, v78, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&__p);
      v85 = v220;
      *(_OWORD *)(a1 + 1224) = v219;
      *(_OWORD *)(a1 + 1240) = v85;
      v86 = v222;
      *(_OWORD *)(a1 + 1256) = v221;
      *(_OWORD *)(a1 + 1272) = v86;
      v87 = v216;
      *(_OWORD *)(a1 + 1160) = __p;
      *(_OWORD *)(a1 + 1176) = v87;
      v88 = v218;
      *(_OWORD *)(a1 + 1192) = v217;
      *(_OWORD *)(a1 + 1208) = v88;
      *(_BYTE *)(a1 + 1152) |= 0x10u;
      if (sub_20C624E4C(1))
      {
        sub_20C348EEC(a1, (int *)&__p);
        v89 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v90, v91, "compute geom bind xform", v89, (*(unsigned __int8 *)(a1 + 1152) >> 4) & 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
      }
      *(_BYTE *)(a1 + 1152) &= ~8u;
    }
    else if (sub_20C624E4C(1))
    {
      sub_20C348EEC(a1, (int *)&__p);
      v82 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v83, v84, "compute geom bind xform", v82);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_20BFD265C(&__p);
    }
  }
  if ((*(_BYTE *)(a1 + 1152) & 0x10) != 0 && (~*(unsigned __int8 *)(a1 + 1408) & 3) == 0)
  {
    if (sub_20C624E4C(1))
    {
      sub_20C348EEC(a1, (int *)&__p);
      v92 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v93, v94, "compute geom bind inverse transpose xform", v92);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_20BFD265C(&__p);
    }
    if ((*(_BYTE *)(a1 + 1408) & 0xC) != 0)
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix((__n128 *)(a1 + 1160), (uint64_t)&v201);
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetInverse((double *)&v201, 0, 0.0, (uint64_t)&v204);
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v204, (uint64_t)&__p);
      *(_QWORD *)(a1 + 1480) = v219;
      v98 = v218;
      *(_OWORD *)(a1 + 1448) = v217;
      *(_OWORD *)(a1 + 1464) = v98;
      v99 = v216;
      *(_OWORD *)(a1 + 1416) = __p;
      *(_OWORD *)(a1 + 1432) = v99;
      *(_BYTE *)(a1 + 1408) |= 0x10u;
      if (sub_20C624E4C(1))
      {
        sub_20C348EEC(a1, (int *)&__p);
        v100 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v101, v102, "compute geom bind inverse transpose xform", v100, (*(unsigned __int8 *)(a1 + 1408) >> 4) & 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
      }
      *(_BYTE *)(a1 + 1408) &= ~8u;
    }
    else if (sub_20C624E4C(1))
    {
      sub_20C348EEC(a1, (int *)&__p);
      v95 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v96, v97, "compute geom bind inverse transpose xform", v95);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_20BFD265C(&__p);
    }
  }
  if ((~*(unsigned __int8 *)(a1 + 1488) & 3) != 0)
    goto LABEL_163;
  if (sub_20C624E4C(1))
  {
    sub_20C348EEC(a1, (int *)&__p);
    v103 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v104, v105, "compute joint influences", v103);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
  }
  if ((*(_BYTE *)(a1 + 1488) & 0xC) != 0)
  {
    if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(a1 + 1496), (unint64_t *)(a1 + 1536)))v109 = 16;
    else
      v109 = 0;
    *(_BYTE *)(a1 + 1488) = *(_BYTE *)(a1 + 1488) & 0xEF | v109;
    if (sub_20C624E4C(1))
    {
      sub_20C348EEC(a1, (int *)&__p);
      v110 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v111, v112, "compute joint influences", v110, (*(unsigned __int8 *)(a1 + 1488) >> 4) & 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_20BFD265C(&__p);
    }
    *(_BYTE *)(a1 + 1488) &= ~8u;
  }
  else if (sub_20C624E4C(1))
  {
    sub_20C348EEC(a1, (int *)&__p);
    v106 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v107, v108, "compute joint influences", v106);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
  }
  if ((*(_BYTE *)(a1 + 1488) & 0x10) == 0)
    goto LABEL_163;
  v113 = *(_QWORD *)(a1 + 400);
  if ((*(_BYTE *)(v113 + 224) & 0x10) == 0)
    goto LABEL_163;
  v114 = *(_OWORD *)(v113 + 248);
  v187 = *(_OWORD *)(v113 + 232);
  v188 = v114;
  v115 = *(_OWORD *)(v113 + 312);
  v191 = *(_OWORD *)(v113 + 296);
  v192 = v115;
  v116 = *(_OWORD *)(v113 + 344);
  v193 = *(_OWORD *)(v113 + 328);
  v194 = v116;
  v117 = *(_OWORD *)(v113 + 280);
  v189 = *(_OWORD *)(v113 + 264);
  v190 = v117;
  v118 = *(_DWORD *)(a1 + 416);
  if ((v118 & 3) == 0)
  {
    if ((v118 & 4) == 0 || (*(_BYTE *)(a1 + 1152) & 0x10) == 0)
      goto LABEL_163;
    v198 = 0;
    v196 = 0u;
    v197 = 0u;
    if ((*(_BYTE *)(v113 + 80) & 0x10) == 0)
    {
LABEL_133:
      sub_20BF5618C((uint64_t)&v196);
      goto LABEL_163;
    }
    sub_20C282748((uint64_t)&v196, (__int128 *)(v113 + 88));
    v214 = 0;
    v212 = 0u;
    v213 = 0u;
    v124 = *(uint64_t **)(a1 + 272);
    if (v124)
    {
      if ((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v124, &v196, (uint64_t)&v212, 1) & 1) == 0)
      {
LABEL_132:
        sub_20BF5618C((uint64_t)&v212);
        goto LABEL_133;
      }
    }
    else
    {
      sub_20C282748((uint64_t)&v212, &v196);
    }
    v125 = (__int128 *)(a1 + 2064);
    v126 = pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform((_QWORD *)(a1 + 1024), (float64x2_t *)(a1 + 1160), v214, v212, *(unsigned int **)(a1 + 1528), *(_QWORD *)(a1 + 1496), *(float **)(a1 + 1568), *(_QWORD *)(a1 + 1536), a1 + 2064);
    *(_BYTE *)(a1 + 2192) = v126;
    if (v126)
    {
      v127 = *(_OWORD *)(a1 + 2144);
      v208 = *(_OWORD *)(a1 + 2128);
      v209 = v127;
      v128 = *(_OWORD *)(a1 + 2176);
      v210 = *(_OWORD *)(a1 + 2160);
      v211 = v128;
      v129 = *(_OWORD *)(a1 + 2080);
      v204 = *v125;
      v205 = v129;
      v130 = *(_OWORD *)(a1 + 2112);
      v206 = *(_OWORD *)(a1 + 2096);
      v207 = v130;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v204, (double *)&v187);
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)(a1 + 1720), 0, 0.0, (uint64_t)&v201);
      v219 = v208;
      v220 = v209;
      v221 = v210;
      v222 = v211;
      __p = v204;
      v216 = v205;
      v217 = v206;
      v218 = v207;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&__p, (double *)&v201);
      v131 = v220;
      *(_OWORD *)(a1 + 2128) = v219;
      *(_OWORD *)(a1 + 2144) = v131;
      v132 = v222;
      *(_OWORD *)(a1 + 2160) = v221;
      *(_OWORD *)(a1 + 2176) = v132;
      v133 = v216;
      *v125 = __p;
      *(_OWORD *)(a1 + 2080) = v133;
      v134 = v218;
      *(_OWORD *)(a1 + 2096) = v217;
      *(_OWORD *)(a1 + 2112) = v134;
    }
    goto LABEL_132;
  }
  if ((*(_BYTE *)(a1 + 1576) & 0x10) == 0)
  {
    *(_QWORD *)&__p = "usdSkel/bakeSkinning.cpp";
    *((_QWORD *)&__p + 1) = "_DeformWithSkinning";
    *(_QWORD *)&v216 = 1575;
    *((_QWORD *)&v216 + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinningAdapter::_DeformWith"
                             "Skinning(const UsdTimeCode, const size_t)";
    LOBYTE(v217) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "_localToWorldXformTask.HasSampleAtCurrentTime()", 0);
  }
  v210 = 0u;
  v211 = 0u;
  v208 = 0u;
  v209 = 0u;
  v206 = 0u;
  v207 = 0u;
  v204 = 0u;
  v205 = 0u;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)(a1 + 1584), 0, 0.0, (uint64_t)&__p);
  v208 = v191;
  v209 = v192;
  v210 = v193;
  v211 = v194;
  v204 = v187;
  v205 = v188;
  v206 = v189;
  v207 = v190;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v204, (double *)&__p);
  v119 = *(_DWORD *)(a1 + 416);
  if ((v119 & 1) != 0 && (*(_BYTE *)(a1 + 512) & 0x10) != 0 && (*(_BYTE *)(a1 + 1488) & 0x10) != 0)
  {
    v203 = 0;
    v201 = 0u;
    v202 = 0u;
    v120 = *(_QWORD *)(a1 + 400);
    if ((*(_BYTE *)(v120 + 80) & 0x10) == 0)
    {
LABEL_142:
      sub_20BF5618C((uint64_t)&v201);
      v119 = *(_DWORD *)(a1 + 416);
      goto LABEL_143;
    }
    sub_20C282748((uint64_t)&v201, (__int128 *)(v120 + 88));
    v184 = v41;
    v198 = 0;
    v196 = 0u;
    v197 = 0u;
    v121 = *(uint64_t **)(a1 + 272);
    if (v121)
    {
      if ((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v121, &v201, (uint64_t)&v196, 1) & 1) == 0)
      {
LABEL_141:
        sub_20BF5618C((uint64_t)&v196);
        v41 = v184;
        goto LABEL_142;
      }
    }
    else
    {
      sub_20C282748((uint64_t)&v196, &v201);
    }
    if (!*(_BYTE *)(a1 + 1888))
      sub_20C284DC8((uint64_t)v41, (__int128 *)(a1 + 520));
    v135 = v198;
    v136 = v196;
    v137 = *(_QWORD *)(a1 + 1528);
    v138 = *(_QWORD *)(a1 + 1496);
    v139 = *(_QWORD *)(a1 + 1568);
    v140 = *(_QWORD *)(a1 + 1536);
    v141 = *(_DWORD *)(a1 + 32);
    sub_20BF5AFC0(v184, v122, v123);
    v142 = pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints((_QWORD *)(a1 + 1024), a1 + 1160, v135, v136, v137, v138, v139, v140, v141, *(tbb::task_group_context **)(a1 + 1880), *(_QWORD *)(a1 + 1848), 0);
    *(_BYTE *)(a1 + 1888) = v142;
    if (v142)
    {
      sub_20BF5AFC0(v184, v143, v144);
      v145 = *(_QWORD *)(a1 + 1880);
      sub_20BF5AFC0(v184, v146, v147);
      v148 = *(_QWORD *)(a1 + 1880);
      v149 = *(_QWORD *)(a1 + 1848);
      v199[0] = &v204;
      LODWORD(__p) = 0;
      v223 = 65539;
      v224 = 55;
      tbb::task_group_context::init((uint64_t)&__p, v150, v151, v152);
      v153 = v148 + 12 * v149;
      if (v145 < v153)
      {
        *(_QWORD *)&v212 = &__p;
        v154 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v212, 0x38uLL);
        *(_BYTE *)(v154 - 11) = 1;
        *(_QWORD *)v154 = &off_24C53F3B8;
        *(_QWORD *)(v154 + 8) = v153;
        *(_QWORD *)(v154 + 16) = v145;
        *(_QWORD *)(v154 + 24) = 1;
        *(_QWORD *)(v154 + 32) = v199;
        initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v154);
        *(_DWORD *)(v154 + 48) = 0;
        *(_BYTE *)(v154 + 52) = 5;
        *(_QWORD *)(v154 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
        (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v154 - 40) + 16))(*(_QWORD *)(v154 - 40), v154, v154 - 8);
      }
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&__p);
    }
    goto LABEL_141;
  }
LABEL_143:
  if ((v119 & 2) != 0 && (*(_BYTE *)(a1 + 680) & 0x10) != 0 && (*(_BYTE *)(a1 + 1488) & 0x10) != 0)
  {
    v214 = 0;
    v212 = 0u;
    v213 = 0u;
    v156 = *(_QWORD *)(a1 + 400);
    if ((*(_BYTE *)(v156 + 128) & 0x10) == 0)
    {
LABEL_162:
      sub_20BF5618C((uint64_t)&v212);
      goto LABEL_163;
    }
    sub_20C282374((uint64_t)&v212, (__int128 *)(v156 + 136));
    v200 = 0;
    memset(v199, 0, sizeof(v199));
    v183 = v42;
    v185 = v41;
    if (*(_QWORD *)(a1 + 272))
    {
      v157 = atomic_load((unsigned __int8 *)&qword_25498BA80);
      if ((v157 & 1) == 0 && __cxa_guard_acquire(&qword_25498BA80))
      {
        pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal((uint64_t)xmmword_25498BA38, 1.0);
        __cxa_guard_release(&qword_25498BA80);
      }
      if ((sub_20C636F38(*(uint64_t **)(a1 + 272), &v212, (uint64_t)v199, 1, xmmword_25498BA38) & 1) == 0)
        goto LABEL_161;
    }
    else
    {
      sub_20C282374((uint64_t)v199, &v212);
    }
    if (!*(_BYTE *)(a1 + 1960))
      sub_20C284DC8((uint64_t)v42, (__int128 *)(a1 + 688));
    v160 = v200;
    v161 = v199[0];
    v162 = *(_QWORD *)(a1 + 1528);
    v163 = *(_QWORD *)(a1 + 1496);
    v164 = *(_QWORD *)(a1 + 1568);
    v165 = *(_QWORD *)(a1 + 1536);
    v166 = *(_DWORD *)(a1 + 32);
    if ((~*(unsigned __int8 *)(a1 + 848) & 3) != 0)
    {
      sub_20BF5AFC0(v42, v158, v159);
      v169 = pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals((_QWORD *)(a1 + 1024), a1 + 1416, v160, v161, v162, v163, v164, v165, v166, *(tbb::task_group_context **)(a1 + 1952), *(_QWORD *)(a1 + 1920), 0);
    }
    else
    {
      v167 = *(_QWORD *)(a1 + 888);
      v168 = *(tbb::task_group_context **)(a1 + 856);
      sub_20BF5AFC0(v183, v158, v159);
      v169 = pxrInternal__aapl__pxrReserved__::UsdSkelSkinFaceVaryingNormals((pxrInternal__aapl__pxrReserved__ *)(a1 + 1024), a1 + 1416, v160, v161, v162, v163, v164, v165, v166, v167, v168, *(void **)(a1 + 1952), *(tbb::task_group_context **)(a1 + 1920), 0);
    }
    *(_BYTE *)(a1 + 1960) = v169;
    if (v169)
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix((__n128 *)&v204, (uint64_t)&v196);
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetInverse((double *)&v196, 0, 0.0, (uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&__p, (uint64_t)&v201);
      sub_20BF5AFC0(v183, v170, v171);
      v172 = *(_QWORD *)(a1 + 1952);
      sub_20BF5AFC0(v183, v173, v174);
      v175 = *(_QWORD *)(a1 + 1952);
      v176 = *(_QWORD *)(a1 + 1920);
      v195 = &v201;
      LODWORD(__p) = 0;
      v223 = 65539;
      v224 = 55;
      tbb::task_group_context::init((uint64_t)&__p, v177, v178, v179);
      v180 = v175 + 12 * v176;
      if (v172 < v180)
      {
        *(_QWORD *)&v196 = &__p;
        v181 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v196, 0x38uLL);
        *(_BYTE *)(v181 - 11) = 1;
        *(_QWORD *)v181 = &off_24C53F400;
        *(_QWORD *)(v181 + 8) = v180;
        *(_QWORD *)(v181 + 16) = v172;
        *(_QWORD *)(v181 + 24) = 1;
        *(_QWORD *)(v181 + 32) = &v195;
        v182 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v181);
        *(_DWORD *)(v181 + 48) = 0;
        *(_BYTE *)(v181 + 52) = 5;
        *(_QWORD *)(v181 + 40) = (v182 >> 1) & 0x7FFFFFFFFFFFFFFELL;
        (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v181 - 40) + 16))(*(_QWORD *)(v181 - 40), v181, v181 - 8);
      }
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&__p);
    }
LABEL_161:
    sub_20BF5618C((uint64_t)v199);
    v41 = v185;
    goto LABEL_162;
  }
LABEL_163:
  if (*(_BYTE *)(a1 + 1888))
  {
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 2040)) & 1) == 0)
      *(_BYTE *)(a1 + 2032) = pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::ComputeExtent(v41, (unint64_t *)(a1 + 1992));
  }
}

void sub_20C64823C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  __cxa_guard_abort(&qword_25498BA80);
  sub_20BF5618C((uint64_t)&a47);
  sub_20BF5618C((uint64_t)&STACK[0x260]);
  _Unwind_Resume(a1);
}

uint64_t sub_20C648604(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v25[16];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v4 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 3);
  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 2);
  if (v5 < v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 > 1)
      goto LABEL_12;
    if (v7 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v8 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(_QWORD *)v8 = &unk_24C520F68;
        __dmb(0xBu);
        v8[8] = 0;
        *((_QWORD *)this - 4) = v8;
        *((_QWORD *)v8 - 3) = 2;
        v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &off_24C53F3B8;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2) + 12 * ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) / 24);
        *((_QWORD *)this + 1) = v10;
        *(_QWORD *)(v9 + 16) = v10;
        *(_QWORD *)(v9 + 24) = *((_QWORD *)this + 3);
        *(_QWORD *)(v9 + 32) = *((_QWORD *)this + 4);
        v11 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v11;
        *(_QWORD *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(_BYTE *)(v9 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v9 - 40))(*(_QWORD *)(v9 - 40), v9, v9 - 8);
        v5 = *((_QWORD *)this + 3);
        v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 2);
        if (v5 >= v6)
          break;
        v12 = *((_QWORD *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v25 = 0x10000;
    v26 = *v4;
    v27 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C648A4C(v25, *((unsigned __int8 *)this + 52));
      v13 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0)
        break;
      v16 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v16;
      v15 = v25[2];
      if (v25[2] < 2u)
      {
        v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((_QWORD *)&v26 + 3 * v25[0] + 2) < 0xAAAAAAAAAAAAAAABLL
                                                * ((uint64_t)(*((_QWORD *)&v26 + 3 * v25[0])
                                                           - *((_QWORD *)&v26 + 3 * v25[0] + 1)) >> 2))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v17 = v25[1];
      v18 = v25[v25[1] + 3];
      v19 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(_QWORD *)v19 = &unk_24C520F68;
      __dmb(0xBu);
      v19[8] = 0;
      *((_QWORD *)this - 4) = v19;
      *((_QWORD *)v19 - 3) = 2;
      v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      v21 = (char *)&v26 + 24 * v17;
      *(_BYTE *)(v20 - 11) = 1;
      *(_QWORD *)v20 = &off_24C53F3B8;
      v22 = *(_OWORD *)v21;
      *(_QWORD *)(v20 + 24) = *((_QWORD *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(_QWORD *)(v20 + 32) = *((_QWORD *)this + 4);
      v23 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v23;
      *(_QWORD *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(_BYTE *)(v20 + 52) = *((_BYTE *)this + 52) - v18;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v20 - 40))(*(_QWORD *)(v20 - 40), v20, v20 - 8);
      v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v14 = v25[0];
LABEL_22:
    sub_20C6489F8((uint64_t)this, (uint64_t *)&v26 + 3 * v14);
    v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C6489F8((uint64_t)this, (uint64_t *)this + 1);
  return 0;
}

void sub_20C6489F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  int v6;

  v3 = *a2;
  v2 = a2[1];
  if (v2 != *a2)
  {
    do
    {
      *(_DWORD *)v2 = sub_20C575548(**(float64x2_t ***)(a1 + 32), (float *)v2).u32[0];
      *(_DWORD *)(v2 + 4) = v5;
      *(_DWORD *)(v2 + 8) = v6;
      v2 += 12;
    }
    while (v2 != v3);
  }
}

__n128 sub_20C648A4C(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 v5;
  char v6;
  __n128 *v7;
  __n128 *v8;
  unint64_t *v9;
  uint64_t v10;
  __n128 *v11;
  unint64_t v12;
  __n128 result;
  uint64_t v14;
  unint64_t v15;

  v2 = a1[2];
  if (v2 <= 7)
  {
    v3 = a1 + 16;
    v4 = *a1;
    v5 = a1[v4 + 3];
    do
    {
      if (a2 <= v5)
        break;
      v6 = v4;
      v7 = (__n128 *)&v3[24 * v4];
      v8 = v7 + 1;
      v9 = &v7->n128_u64[1];
      if (v7[1].n128_u64[0] >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7->n128_u64[0] - v7->n128_u64[1]) >> 2))
        break;
      v4 = (unint64_t)&a1[v4];
      v10 = (v6 + 1) & 7;
      *a1 = v10;
      v11 = (__n128 *)&v3[24 * v10];
      v12 = v7[1].n128_u64[0];
      result = *v7;
      *v11 = *v7;
      v11[1].n128_u64[0] = v12;
      v14 = v11->n128_i64[1];
      v7->n128_u64[0] = v11->n128_u64[0];
      v15 = v14 + 12 * ((int64_t)(v11->n128_u64[0] - v14) / 24);
      v11->n128_u64[0] = v15;
      *v9 = v15;
      v8->n128_u64[0] = v12;
      v5 = *(_BYTE *)(v4 + 3) + 1;
      *(_BYTE *)(v4 + 3) = v5;
      a1[v10 + 3] = v5;
      a1[2] = v2 + 1;
      LOBYTE(v4) = v10;
    }
    while (v2++ < 7);
  }
  return result;
}

uint64_t sub_20C648B44(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v25[16];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v4 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 3);
  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 2);
  if (v5 < v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 > 1)
      goto LABEL_12;
    if (v7 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v8 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(_QWORD *)v8 = &unk_24C520F68;
        __dmb(0xBu);
        v8[8] = 0;
        *((_QWORD *)this - 4) = v8;
        *((_QWORD *)v8 - 3) = 2;
        v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &off_24C53F400;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2) + 12 * ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) / 24);
        *((_QWORD *)this + 1) = v10;
        *(_QWORD *)(v9 + 16) = v10;
        *(_QWORD *)(v9 + 24) = *((_QWORD *)this + 3);
        *(_QWORD *)(v9 + 32) = *((_QWORD *)this + 4);
        v11 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v11;
        *(_QWORD *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(_BYTE *)(v9 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v9 - 40))(*(_QWORD *)(v9 - 40), v9, v9 - 8);
        v5 = *((_QWORD *)this + 3);
        v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 2);
        if (v5 >= v6)
          break;
        v12 = *((_QWORD *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v25 = 0x10000;
    v26 = *v4;
    v27 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C648A4C(v25, *((unsigned __int8 *)this + 52));
      v13 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0)
        break;
      v16 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v16;
      v15 = v25[2];
      if (v25[2] < 2u)
      {
        v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((_QWORD *)&v26 + 3 * v25[0] + 2) < 0xAAAAAAAAAAAAAAABLL
                                                * ((uint64_t)(*((_QWORD *)&v26 + 3 * v25[0])
                                                           - *((_QWORD *)&v26 + 3 * v25[0] + 1)) >> 2))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v17 = v25[1];
      v18 = v25[v25[1] + 3];
      v19 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(_QWORD *)v19 = &unk_24C520F68;
      __dmb(0xBu);
      v19[8] = 0;
      *((_QWORD *)this - 4) = v19;
      *((_QWORD *)v19 - 3) = 2;
      v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      v21 = (char *)&v26 + 24 * v17;
      *(_BYTE *)(v20 - 11) = 1;
      *(_QWORD *)v20 = &off_24C53F400;
      v22 = *(_OWORD *)v21;
      *(_QWORD *)(v20 + 24) = *((_QWORD *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(_QWORD *)(v20 + 32) = *((_QWORD *)this + 4);
      v23 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v23;
      *(_QWORD *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(_BYTE *)(v20 + 52) = *((_BYTE *)this + 52) - v18;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v20 - 40))(*(_QWORD *)(v20 - 40), v20, v20 - 8);
      v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v14 = v25[0];
LABEL_22:
    sub_20C648F38((uint64_t)this, (uint64_t *)&v26 + 3 * v14);
    v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C648F38((uint64_t)this, (uint64_t *)this + 1);
  return 0;
}

void sub_20C648F38(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  int v6;

  v3 = *a2;
  v2 = a2[1];
  if (v2 != *a2)
  {
    do
    {
      *(_DWORD *)v2 = pxrInternal__aapl__pxrReserved__::operator*((float *)v2, **(_QWORD **)(a1 + 32)).u32[0];
      *(_DWORD *)(v2 + 4) = v5;
      *(_DWORD *)(v2 + 8) = v6;
      v2 += 12;
    }
    while (v2 != v3);
  }
}

uint64_t sub_20C648F94(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53F448;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53F448;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C649334(*((_QWORD *)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C649334(*((_QWORD *)this + 4), v6, v4);
  return 0;
}

uint64_t sub_20C649334(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *Text;
  const char *v12;
  char *v13;
  void *p_p;
  uint64_t v15;
  double v16;
  uint64_t **v17;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  double v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  void *__p;
  const char *v31;
  uint64_t v32;
  const char *v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (a2 < a3)
  {
    v3 = a2;
    v4 = result;
    v23 = (char *)&off_24C51E470 + 2;
    do
    {
      v5 = *(uint64_t ***)(v4 + 24);
      v6 = *v5;
      v7 = v5[1];
      if (*v5 == v7)
      {
        v8 = 0;
      }
      else
      {
        v8 = 0;
        do
        {
          v9 = *v6;
          if (v3 == *(_DWORD *)(*v6 + 420))
          {
            v10 = *(_QWORD *)(v4 + 8);
            v25 = *(double *)v4;
            if (*(_DWORD *)(v9 + 416)
              && ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 400) + 360) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
            {
              result = sub_20C624E4C(1);
              if ((_DWORD)result)
              {
                sub_20C348EEC(v9, (int *)&v26);
                Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
                sub_20C53FBD0(&v25);
                p_p = &__p;
                if (v32 < 0)
                  p_p = __p;
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Write data for <%s> @ time %s\n", v12, v13, Text, p_p, v23);
                if (SHIBYTE(v32) < 0)
                  operator delete(__p);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
                result = (uint64_t)sub_20BFD265C(&v26);
              }
              if (*(_BYTE *)(v9 + 1888))
              {
                result = sub_20C649764((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v9 + 1896), (const char *)(v9 + 1848), v25);
                v15 = result;
              }
              else
              {
                v15 = 0;
              }
              if (*(_BYTE *)(v9 + 1960))
              {
                result = sub_20C649764((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v9 + 1968), (const char *)(v9 + 1920), v25);
                v15 += result;
              }
              if (*(_BYTE *)(v9 + 2032))
              {
                result = sub_20C649764((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v9 + 2040), (const char *)(v9 + 1992), v25);
                v15 += result;
              }
              if (*(_BYTE *)(v9 + 2192))
              {
                v16 = v25;
                if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v9 + 2200)))
                {
                  __p = "usdSkel/bakeSkinning.cpp";
                  v31 = "Set";
                  v32 = 374;
                  v33 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_AttrWriter::Set(const T &, UsdT"
                        "imeCode) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
                  v34 = 0;
                  pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "_spec", 0);
                }
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 2208), (const pxrInternal__aapl__pxrReserved__::TfToken *)(v9 + 2216), &v28);
                v17 = (uint64_t **)sub_20C0AEAB8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v9 + 2200));
                pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v17, &v26);
                v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v26);
                v31 = (const char *)(v9 + 2064);
                v32 = (uint64_t)&stru_24C51BFE0;
                __p = &unk_24C53AC28;
                pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v28, (uint64_t)&__p, v16);
                v19 = v27;
                if (v27)
                {
                  v20 = (unsigned int *)(v27 + 8);
                  do
                  {
                    v21 = __ldxr(v20);
                    v22 = v21 - 1;
                  }
                  while (__stlxr(v22, v20));
                  if (!v22)
                    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
                result = (uint64_t)sub_20BFD265C(&v28);
                v15 += 128;
              }
            }
            else
            {
              v15 = 0;
            }
            v8 += v15;
          }
          v6 += 2;
        }
        while (v6 != v7);
      }
      *(_QWORD *)(**(_QWORD **)(v4 + 32) + 8 * v3++) = v8;
    }
    while (v3 != a3);
  }
  return result;
}

void sub_20C6496B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20BF4C2D8((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C649764(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const char *a2, double a3)
{
  uint64_t **v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v17 = "usdSkel/bakeSkinning.cpp";
    v18 = "Set";
    v19 = 374;
    v20 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_AttrWriter::Set(const T &, UsdTimeCode) [T = "
          "pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>]";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "_spec", 0);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 1), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 2), &v15);
  v6 = (uint64_t **)sub_20C0AEAB8(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v6, &v13);
  v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v13);
  v19 = (uint64_t)&stru_24C51DA38;
  v17 = (char *)&unk_24C53B4E8;
  v18 = a2;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, (uint64_t)&v17, a3);
  v8 = v14;
  if (v14)
  {
    v9 = (unsigned int *)(v14 + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  return 12 * *(_QWORD *)a2 + 40;
}

void sub_20C6498F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C649964(void ***a1)
{
  void **v1;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v2;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v4;
  void *v5;

  v1 = *a1;
  v2 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)**a1;
  if (v2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)((char *)v4 - 64);
        sub_20C6499E8((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C6499E8(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a2)
{
  sub_20C649A14((_QWORD *)a2 + 3);
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton(a2);
}

void sub_20C649A14(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v10 = __ldxr(v3);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v3));
      if (!v11)
      {
        __dmb(9u);
        v12 = *(void (**)(void))(*v4 + 8);
        if (v12)
          v12();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 400 * *a1;
          do
          {
            v8 = sub_20C625CE0(v8) + 400;
            v9 -= 400;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_20C649AC8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a4, uint64_t a5)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v21;
  void *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 6)
    {
      v19 = v12 - (_QWORD)a2;
      v20 = (uint64_t)(v12 - (_QWORD)a2) >> 6;
      if (v20 >= a5)
      {
        v21 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)a3 + 64 * a5);
      }
      else
      {
        v21 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)a3 + 64 * v20);
        a1[1] = (uint64_t)sub_20C649E84(v9, v21, a4, *(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(v9 - 8));
        if (v19 < 1)
          return v5;
      }
      sub_20C649C48((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)v5 + 64 * a5);
      sub_20C64A0C0((uint64_t)&v23, (uint64_t)a3, (uint64_t)v21, (uint64_t)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + ((uint64_t)(v12 - *a1) >> 6);
      if (v14 >> 58)
        sub_20BDDF694();
      v15 = ((uint64_t)a2 - v13) >> 6;
      v16 = v10 - v13;
      if (v16 >> 5 > v14)
        v14 = v16 >> 5;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFC0)
        v17 = 0x3FFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v27 = v9;
      if (v17)
        v18 = (char *)sub_20C00D6F0(v9, v17);
      else
        v18 = 0;
      v23 = v18;
      v24 = &v18[64 * v15];
      v25 = v24;
      v26 = &v18[64 * v17];
      sub_20C649D20((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v23, a3, a5);
      v5 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_20C649DD4((uint64_t)a1, (uint64_t)&v23, v5);
      sub_20C64A498(&v23);
    }
  }
  return v5;
}

void sub_20C649C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C649C48(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  __int128 v11;
  char v13;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v8, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10);
      *(_QWORD *)v8 = off_24C53F7D0;
      v11 = *(_OWORD *)(v10 + 24);
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(v10 + 40);
      *(_OWORD *)(v8 + 24) = v11;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_QWORD *)(v8 + 56) = *(_QWORD *)(v10 + 56);
      *(_QWORD *)(v10 + 56) = 0;
      v10 += 64;
      v8 += 64;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20C649FF4((uint64_t)&v13, a2, v7, v6);
}

void sub_20C649D18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_20C649D20(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *result, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (a3)
  {
    v6 = v4 + (a3 << 6);
    do
    {
      result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v4, a2);
      *(_QWORD *)v4 = off_24C53F7D0;
      v7 = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)(v4 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)(v4 + 24) = v7;
      v8 = *((_QWORD *)a2 + 7);
      *(_QWORD *)(v4 + 56) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 - 16);
        if (*(_QWORD *)(v4 + 48))
          v9 = *(unint64_t **)(v4 + 48);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v4 += 64;
      a2 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)a2 + 64);
    }
    while (v4 != v6);
    v4 = v6;
  }
  *((_QWORD *)v3 + 2) = v4;
  return result;
}

void sub_20C649DCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20C649DD4(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = a1 + 16;
  sub_20C64A218(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(_QWORD *)a1, *(_QWORD *)a1, v6, v6);
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = sub_20C64A328(v7, a3, *(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(a1 + 8), *(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(a2 + 16));
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v6;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_20C649E84(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[3];
  char v13;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v14;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v15;

  v4 = this;
  v14 = this;
  v15 = this;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v4, v6);
      *(_QWORD *)v4 = off_24C53F7D0;
      v7 = *(_OWORD *)((char *)v6 + 24);
      *(_OWORD *)((char *)v4 + 40) = *(_OWORD *)((char *)v6 + 40);
      *(_OWORD *)((char *)v4 + 24) = v7;
      v8 = *((_QWORD *)v6 + 7);
      *((_QWORD *)v4 + 7) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 - 16);
        if (*((_QWORD *)v4 + 6))
          v9 = (unint64_t *)*((_QWORD *)v4 + 6);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v6 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v6 + 64);
      v4 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v15 + 64);
      v15 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v15 + 64);
    }
    while (v6 != a3);
  }
  v13 = 1;
  sub_20C649F70((uint64_t)v12);
  return v4;
}

void sub_20C649F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C649F70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C649F70(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C649FA4((uint64_t *)a1);
  return a1;
}

void sub_20C649FA4(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton **v1;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton **v2;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v3;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v4;
  uint64_t v5;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton **)a1[1];
  v1 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton **)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)((char *)v3 - 64);
      sub_20C6499E8(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_20C649FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  __int128 v12;

  if (a3 != a2)
  {
    v7 = a3;
    do
    {
      v8 = *(_QWORD *)(v7 - 56);
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 48);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a4 - 56);
      *(_QWORD *)(a4 - 56) = v8;
      if (v11)
        sub_20C35C614(v11);
      sub_20C01A074((int *)(a4 - 48), (_DWORD *)(v7 - 48));
      sub_20C01A0C8((int *)(a4 - 44), (_DWORD *)(v7 - 44));
      if (a4 != v7)
      {
        sub_20C649A14((_QWORD *)(a4 - 40));
        v12 = *(_OWORD *)(v7 - 40);
        *(_OWORD *)(a4 - 24) = *(_OWORD *)(v7 - 24);
        *(_OWORD *)(a4 - 40) = v12;
        *(_OWORD *)(v7 - 40) = 0u;
        *(_OWORD *)(v7 - 24) = 0u;
        *(_QWORD *)(a4 - 8) = *(_QWORD *)(v7 - 8);
        *(_QWORD *)(v7 - 8) = 0;
      }
      v7 -= 64;
      a4 -= 64;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_20C64A0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v7 = *(_QWORD *)(v5 + 8);
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 48);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v7;
      if (v10)
        sub_20C35C614(v10);
      sub_20C01A074((int *)(a4 + 16), (_DWORD *)(v5 + 16));
      sub_20C01A0C8((int *)(a4 + 20), (_DWORD *)(v5 + 20));
      sub_20C64A160(a4 + 24, (__int128 *)(v5 + 24));
      v5 += 64;
      a4 += 64;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_20C64A160(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20C649A14((_QWORD *)a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20C649A14(&v9);
  }
  return a1;
}

void sub_20C64A1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C649A14(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C64A218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  char v18;
  __int128 v19;
  __int128 v20;

  v7 = a7;
  *(_QWORD *)&v20 = a6;
  *((_QWORD *)&v20 + 1) = a7;
  v19 = v20;
  v17[0] = a1;
  v17[1] = &v19;
  v17[2] = &v20;
  v18 = 0;
  if (a3 == a5)
  {
    v15 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = v9 - 64;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v7 - 64), (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v9 - 64));
      *(_QWORD *)(v7 - 64) = off_24C53F7D0;
      v11 = *(_OWORD *)(v9 - 40);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(v9 - 24);
      *(_OWORD *)(v7 - 40) = v11;
      v12 = *(_QWORD *)(v9 - 8);
      *(_QWORD *)(v7 - 8) = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 - 16);
        if (*(_QWORD *)(v7 - 16))
          v13 = *(unint64_t **)(v7 - 16);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v7 = *((_QWORD *)&v20 + 1) - 64;
      *((_QWORD *)&v20 + 1) -= 64;
      v9 -= 64;
    }
    while (v10 != a5);
    v15 = v20;
  }
  v18 = 1;
  sub_20C64A414((uint64_t)v17);
  return v15;
}

void sub_20C64A314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C64A414((uint64_t)&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_20C64A328(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[3];
  char v13;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v14;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v15;

  v4 = this;
  v14 = this;
  v15 = this;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v4, v6);
      *(_QWORD *)v4 = off_24C53F7D0;
      v7 = *(_OWORD *)((char *)v6 + 24);
      *(_OWORD *)((char *)v4 + 40) = *(_OWORD *)((char *)v6 + 40);
      *(_OWORD *)((char *)v4 + 24) = v7;
      v8 = *((_QWORD *)v6 + 7);
      *((_QWORD *)v4 + 7) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 - 16);
        if (*((_QWORD *)v4 + 6))
          v9 = (unint64_t *)*((_QWORD *)v4 + 6);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v6 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v6 + 64);
      v4 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v15 + 64);
      v15 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v15 + 64);
    }
    while (v6 != a3);
  }
  v13 = 1;
  sub_20C649F70((uint64_t)v12);
  return v4;
}

void sub_20C64A400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C649F70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C64A414(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C64A448((uint64_t *)a1);
  return a1;
}

void sub_20C64A448(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v1;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v2;
  uint64_t v3;

  v1 = *(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton **)(a1[2] + 8);
  v2 = *(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C6499E8(v3, v1);
      v1 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)((char *)v1 + 64);
    }
    while (v1 != v2);
  }
}

void **sub_20C64A498(void **a1)
{
  sub_20C64A4C8(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C64A4C8(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 64;
    sub_20C6499E8(v4, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)(i - 64));
  }
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::~UsdSkelBindingAPI(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53F490;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdSkel/bindingAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdSkelBindingAPI pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C53F490;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C64A6A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return 5;
}

uint64_t sub_20C64A6C8(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498BA88, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdSkelBindingAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C64A880(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53F490;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C53F490;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C64A86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C64A880(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498BA88, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdSkelBindingAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BA90);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498BA90))
  {
    __cxa_guard_release(&qword_25498BA90);
  }
  return &qword_25498BA88;
}

void sub_20C64A99C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BA90);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BAA0);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)__cxa_guard_acquire(&qword_25498BAA0);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetStaticTfType(v3);
      byte_25498BA98 = sub_20C35BD7C((char *)&qword_25498BA88, v4, v5);
      __cxa_guard_release(&qword_25498BAA0);
    }
  }
  return byte_25498BA98;
}

void sub_20C64AA18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BAA0);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetStaticTfType(this);
  return &qword_25498BA88;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkinningMethodAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 104), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C64AAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateSkinningMethodAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 104), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetGeomBindTransformAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 80), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C64AC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateGeomBindTransformAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 80), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 360), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 160), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C64ADA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 160), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 88), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C64AEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateJointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 88), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 464), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 96), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C64B050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateJointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 96), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 144), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C64B1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateBlendShapesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 144), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetAnimationSourceRel(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 136), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C64B300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateAnimationSourceRel(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 136), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C64B3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeletonRel(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 168), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C64B47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateSkeletonRel(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 168), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C64B53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapeTargetsRel(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 152), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C64B5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateBlendShapeTargetsRel(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 152), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C64B6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t *SchemaAttributeNames;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = (int)this;
  v41 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498BAC0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498BAC0))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v5)
      v5 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v6 = *((_QWORD *)v5 + 13);
    v35 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v9)
      v9 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v10 = *((_QWORD *)v9 + 10);
    v36 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v36 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v13)
      v13 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v14 = *((_QWORD *)v13 + 20);
    v37 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v37 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v17)
      v17 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v18 = *((_QWORD *)v17 + 11);
    v38 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v38 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v21)
      v21 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v22 = *((_QWORD *)v21 + 12);
    v39 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v39 &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v25)
      v25 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v26 = *((_QWORD *)v25 + 18);
    v40 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v40 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498BAA8, &v35, 6uLL);
    v29 = &v41;
    do
    {
      v31 = *--v29;
      v30 = v31;
      if ((v31 & 7) != 0)
      {
        v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
    }
    while (v29 != &v35);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BAA8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BAC0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498BAE0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498BAE0))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C64BAB0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BAC8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BAE0);
  }
  if (v1)
    return &qword_25498BAC8;
  else
    return &qword_25498BAA8;
}

void sub_20C64BA20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BAC0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C64BAB0(uint64_t **a1)
{
  qword_25498BAD0 = 0;
  unk_25498BAD8 = 0;
  qword_25498BAC8 = 0;
  sub_20BFC9A6C((char **)&qword_25498BAC8, ((*(_QWORD *)algn_25498BAB0 - qword_25498BAA8) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498BAC8, (_QWORD *)qword_25498BAD0, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498BAC8, (_QWORD *)qword_25498BAD0, (uint64_t *)qword_25498BAA8, *(uint64_t **)algn_25498BAB0, (*(_QWORD *)algn_25498BAB0 - qword_25498BAA8) >> 3);
}

void sub_20C64BB44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointIndicesPrimvar(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointIndicesAttr(this, (uint64_t)&v5);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(a2, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v5);
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C64BBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C372B54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateJointIndicesPrimvar(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, int a2@<W1>, int a3@<W2>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  const pxrInternal__aapl__pxrReserved__::TfToken *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD v18[4];

  sub_20C35C4F8((uint64_t)&v13, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v18, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
  v18[3] = 0;
  v18[0] = off_24C53CE78;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v7)
    v7 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v8)
    v8 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (a2)
  {
    if (!v9)
      v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v9 + 136);
  }
  else
  {
    if (!v9)
      v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v9 + 1224);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v18, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v7 + 88), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v8 + 464), v10, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v18);
  if ((v17 & 7) != 0)
  {
    v11 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C64BD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointWeightsPrimvar(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointWeightsAttr(this, (uint64_t)&v5);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(a2, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v5);
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C64BDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C372B54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateJointWeightsPrimvar(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, int a2@<W1>, int a3@<W2>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  const pxrInternal__aapl__pxrReserved__::TfToken *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD v18[4];

  sub_20C35C4F8((uint64_t)&v13, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v18, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
  v18[3] = 0;
  v18[0] = off_24C53CE78;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v7)
    v7 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v8)
    v8 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (a2)
  {
    if (!v9)
      v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v9 + 136);
  }
  else
  {
    if (!v9)
      v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v9 + 1224);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v18, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v7 + 96), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v8 + 512), v10, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v18);
  if ((v17 & 7) != 0)
  {
    v11 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C64BF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&a13);
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::SetRigidJointInfluence(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this, uint64_t a2, float a3)
{
  char *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  _BYTE v16[40];
  _QWORD v17[4];
  char v18;
  pxrInternal__aapl__pxrReserved__ *v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  pxrInternal__aapl__pxrReserved__ *v25;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  int v32;

  v32 = a2;
  v31 = a3;
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateJointIndicesPrimvar(this, 1, 1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v25);
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateJointWeightsPrimvar(this, 1, 1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v19);
  if ((a2 & 0x80000000) != 0)
  {
    v17[0] = "usdSkel/bindingAPI.cpp";
    v17[1] = "SetRigidJointInfluence";
    v17[2] = 351;
    v17[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::SetRigidJointInfluence(int, float) const";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v17, (pxrInternal__aapl__pxrReserved__ *)"Invalid jointIndex '%d'", v5, a2);
    v6 = 0;
  }
  else
  {
    sub_20C64C1B0((uint64_t)v17, 1uLL, &v32);
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<int>>(&v25, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v17, NAN))
    {
      sub_20C64C224((uint64_t)v16, 1uLL, &v31);
      v6 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<float>>(&v19, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v16, NAN);
      sub_20BF5618C((uint64_t)v16);
    }
    else
    {
      v6 = 0;
    }
    sub_20BF5618C((uint64_t)v17);
  }
  if ((v24 & 7) != 0)
  {
    v7 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if ((v23 & 7) != 0)
  {
    v9 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  if (v20)
    sub_20C35C614(v20);
  if ((v30 & 7) != 0)
  {
    v11 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  if ((v29 & 7) != 0)
  {
    v13 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_20BFD265C(&v27);
  if (v26)
    sub_20C35C614(v26);
  return v6;
}

void sub_20C64C150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  sub_20C58DE20((uint64_t)va2);
  sub_20C58DE20(v2 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_20C64C1B0(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v7;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_20BF56210((_QWORD *)a1);
  v7 = a3;
  sub_20BF64D74((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_20C64C20C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C64C224(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v7;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_20BF56210((_QWORD *)a1);
  v7 = a3;
  sub_20BF56258((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_20C64C280(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this, pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  unint64_t *v5;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  uint64_t v9;
  const char *Text;
  const char *v11;
  char *v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  unint64_t *v20;
  unint64_t v21;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _BYTE v29[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v30;
  int v31;
  int v32;
  uint64_t v33;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v34;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v35;
  uint64_t v36;
  void (**v37)(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *__hidden);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v38;
  int v39;
  int v40;
  uint64_t v41;
  void **v42;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v43;
  uint64_t v44;
  unint64_t v45;
  char v46;

  if (!a2)
  {
    v42 = (void **)"usdSkel/bindingAPI.cpp";
    v43 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetSkeleton";
    v44 = 413;
    v45 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeleton(UsdSkelSkeleton *) const";
    v46 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"'skel' pointer is null.");
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeletonRel(this, (uint64_t)&v37);
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v37, v3))goto LABEL_24;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  if (!pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v37, (uint64_t *)&v34)|| v34 == v35&& !pxrInternal__aapl__pxrReserved__::UsdRelationship::HasAuthoredTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v37))
  {
    v42 = (void **)&v34;
    sub_20BFD6F90(&v42);
LABEL_24:
    v15 = 1;
    goto LABEL_25;
  }
  sub_20C64C6A8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v37, &v34, (uint64_t)v29);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v42, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v29);
  v42 = (void **)off_24C53F7D0;
  v4 = v43;
  if (v43)
  {
    v5 = (unint64_t *)((char *)v43 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  if (v7)
    sub_20C35C614(v7);
  sub_20C01A074((int *)a2 + 4, &v44);
  sub_20C01A0C8((int *)a2 + 5, (_DWORD *)&v44 + 1);
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v42);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v29, v8))
  {
    v9 = *((_QWORD *)a2 + 1);
    if (!v9
      || (*(_BYTE *)(v9 + 57) & 8) != 0
      || ((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *))(*(_QWORD *)a2 + 32))(a2) & 1) == 0)
    {
      v42 = (void **)"usdSkel/bindingAPI.cpp";
      v43 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetSkeleton";
      v44 = 428;
      v45 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeleton(UsdSkelSkeleton *) const";
      v46 = 0;
      sub_20C348EEC((uint64_t)&v37, &v27);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      sub_20C348EEC((uint64_t)v29, &v25);
      v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v42, (pxrInternal__aapl__pxrReserved__ *)"%s -- target (<%s>) of relationship is not a Skeleton.", v12, Text, v11);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
      sub_20BFD265C(&v25);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
      sub_20BFD265C(&v27);
    }
  }
  if ((v33 & 7) != 0)
  {
    v13 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  sub_20BFD265C(&v31);
  if (v30)
    sub_20C35C614(v30);
  v42 = (void **)&v34;
  sub_20BFD6F90(&v42);
  v15 = 0;
LABEL_25:
  if ((v41 & 7) != 0)
  {
    v16 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
  sub_20BFD265C(&v39);
  if (v38)
    sub_20C35C614(v38);
  result = 1;
  if (v15)
  {
    LODWORD(v42) = 1;
    v43 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v44);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v44 + 1);
    v45 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v37, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v42);
    v37 = off_24C53F7D0;
    v19 = v38;
    if (v38)
    {
      v20 = (unint64_t *)((char *)v38 + 48);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v19;
    if (v22)
      sub_20C35C614(v22);
    sub_20C01A074((int *)a2 + 4, &v39);
    sub_20C01A0C8((int *)a2 + 5, &v40);
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v37);
    if ((v45 & 7) != 0)
    {
      v23 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
    sub_20BFD265C(&v44);
    if (v43)
      sub_20C35C614(v43);
    return 0;
  }
  return result;
}

void sub_20C64C620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  uint64_t v16;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  sub_20C35C2E0((uint64_t)va1);
  *(_QWORD *)(v4 - 72) = va2;
  sub_20BFD6F90((void ***)(v4 - 72));
  sub_20C377F1C((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t sub_20C64C6A8@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath **a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v3;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  unint64_t v6;
  const char *Text;
  char *v9;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v10;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  pxrInternal__aapl__pxrReserved__ *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  pxrInternal__aapl__pxrReserved__::SdfPath *i;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v26;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v27;
  int IsDefined;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  char v30;
  pxrInternal__aapl__pxrReserved__ *v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  const char *v39;
  const char *v40;
  char *v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  pxrInternal__aapl__pxrReserved__ *v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;

  v5 = *a2;
  v6 = a2[1] - *a2;
  if (!v6)
  {
LABEL_40:
    *(_DWORD *)a3 = 1;
    *(_QWORD *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(_QWORD *)(a3 + 24) = 0;
    return result;
  }
  if (v6 >= 9)
  {
    v45 = "usdSkel/bindingAPI.cpp";
    v46 = (pxrInternal__aapl__pxrReserved__ *)"_GetFirstTargetPrimForRel";
    v47 = 387;
    v48 = (unint64_t)"UsdPrim pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_GetFirstTargetPrimForRel(c"
                            "onst UsdRelationship &, const SdfPathVector &)";
    v49 = 0;
    sub_20C348EEC((uint64_t)a1, (int *)&v43);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v45, (pxrInternal__aapl__pxrReserved__ *)"%s -- relationship has more than one target. Only the first will be used.", v9, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    sub_20BFD265C(&v43);
    v5 = *a2;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2, &v45);
  v10 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08((uint64_t *)&v45);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v10, v5, a3);
  v12 = v46;
  if (v46)
  {
    v13 = (unsigned int *)((char *)v46 + 8);
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(pxrInternal__aapl__pxrReserved__ *))(*(_QWORD *)v12 + 8))(v12);
  }
  result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a3, v11);
  if ((result & 1) == 0)
  {
    v17 = *(_QWORD *)(a3 + 24);
    if ((v17 & 7) != 0)
    {
      v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a3 + 20));
    sub_20BFD265C((_DWORD *)(a3 + 16));
    v21 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a3 + 8);
    if (v21)
      sub_20C35C614(v21);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v20, &v43);
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v5)
      || !pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v5))
    {
      goto LABEL_32;
    }
    for (i = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v5, &v50);
          ;
          i = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD265C(&v45))
    {
      v23 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(i);
      v24 = v50;
      v25 = *v23;
      if (v50 == *v23)
        break;
      v26 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v43);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v26, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, (uint64_t)&v45);
      IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v45, v27);
      v30 = IsDefined;
      if (IsDefined)
      {
        v31 = v46;
        if (!v46 || (v32 = *((_QWORD *)v46 + 7), (v32 & 0x800) != 0))
        {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v46, v29);
          v32 = *((_QWORD *)v31 + 7);
        }
        v3 = (v32 & 1) == 0;
      }
      if ((v48 & 7) != 0)
      {
        v33 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
      sub_20BFD265C(&v47);
      if (v46)
        sub_20C35C614(v46);
      if ((v30 & 1) != 0)
        break;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, &v45);
      sub_20BFD3EBC((int *)&v50, (int *)&v45);
      sub_20BFD3F10((int *)&v50 + 1, (int *)&v45 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
    sub_20BFD265C(&v50);
    if (v24 == v25)
LABEL_32:
      v3 = 0;
    v35 = v44;
    if (v44)
    {
      v36 = (unsigned int *)(v44 + 8);
      do
      {
        v37 = __ldxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    }
    if (!v3)
    {
      v45 = "usdSkel/bindingAPI.cpp";
      v46 = (pxrInternal__aapl__pxrReserved__ *)"_GetFirstTargetPrimForRel";
      v47 = 399;
      v48 = (unint64_t)"UsdPrim pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_GetFirstTargetPrimForRel"
                              "(const UsdRelationship &, const SdfPathVector &)";
      v49 = 0;
      sub_20C348EEC((uint64_t)a1, (int *)&v43);
      v39 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
      v40 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v5);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v45, (pxrInternal__aapl__pxrReserved__ *)"%s -- Invalid target <%s>.", v41, v39, v40);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
      sub_20BFD265C(&v43);
    }
    goto LABEL_40;
  }
  return result;
}

void sub_20C64CA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  _BOOL4 IsPseudoRoot;
  char Skeleton;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  unsigned int *v11;
  unsigned int v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  void (**v16)(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *__hidden);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  int v23;
  int v24;
  uint64_t v25;

  v21 = 1;
  v22 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v23);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v24);
  v25 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v21);
  *(_QWORD *)a2 = off_24C53F7D0;
  if ((v25 & 7) != 0)
  {
    v4 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_20BFD265C(&v23);
  if (v22)
    sub_20C35C614(v22);
  sub_20C35C4F8((uint64_t)&v21, (uint64_t *)this + 1, (_DWORD *)this + 4);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v21, v6))
  {
    while (1)
    {
      IsPseudoRoot = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v21);
      if (IsPseudoRoot)
        break;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v16, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v21);
      v20 = 0;
      v16 = off_24C53F490;
      Skeleton = pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v16, a2);
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v16);
      if ((Skeleton & 1) != 0)
        break;
      sub_20C3AD22C((uint64_t)&v21, (uint64_t)&v16);
      v21 = (int)v16;
      v9 = v17;
      v17 = 0;
      v10 = v22;
      v22 = v9;
      if (v10)
        sub_20C35C614(v10);
      sub_20BFD3EBC(&v23, &v18);
      sub_20BFD3F10(&v24, &v19);
      if ((v25 & 7) != 0)
      {
        v11 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
      v25 = v20;
      v20 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_20BFD265C(&v18);
      if (v17)
        sub_20C35C614(v17);
    }
    v13 = !IsPseudoRoot;
  }
  else
  {
    v13 = 0;
    IsPseudoRoot = 1;
  }
  if ((v25 & 7) != 0)
  {
    v14 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_20BFD265C(&v23);
  if (v22)
    sub_20C35C614(v22);
  if (((v13 | IsPseudoRoot) & 1) == 0)
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton(a2);
}

void sub_20C64CCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v5;
  va_list va;

  va_start(va, a5);
  sub_20C35C2E0((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton(v5);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetAnimationSource(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this, void ***a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v14;
  const char *Text;
  const char *v16;
  char *v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v28;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v39;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v40;
  uint64_t v41;
  char v42[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v43;
  int v44;
  int v45;
  uint64_t v46;
  void **v47;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v48;
  uint64_t v49;
  unint64_t v50;
  char v51;

  if (!a2)
  {
    v47 = (void **)"usdSkel/bindingAPI.cpp";
    v48 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetAnimationSource";
    v49 = 461;
    v50 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetAnimationSource(UsdPrim *) const";
    v51 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v47, 1, (pxrInternal__aapl__pxrReserved__ *)"'prim' pointer is null.");
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetAnimationSourceRel(this, (uint64_t)v42);
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v42, v3))goto LABEL_15;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  if (!pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)v42, (uint64_t *)&v39)|| v39 == v40&& !pxrInternal__aapl__pxrReserved__::UsdRelationship::HasAuthoredTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v42))
  {
    v47 = (void **)&v39;
    sub_20BFD6F90(&v47);
LABEL_15:
    v10 = 1;
    goto LABEL_37;
  }
  sub_20C64C6A8((pxrInternal__aapl__pxrReserved__::UsdObject *)v42, &v39, (uint64_t)&v47);
  *(_DWORD *)a2 = (_DWORD)v47;
  v4 = v48;
  v48 = 0;
  v5 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2[1];
  a2[1] = (void **)v4;
  if (v5)
    sub_20C35C614(v5);
  sub_20BFD3EBC((int *)a2 + 4, (int *)&v49);
  sub_20BFD3F10((int *)a2 + 5, (int *)&v49 + 1);
  if (&v47 == a2)
  {
    v9 = v50;
  }
  else
  {
    v6 = (unint64_t)a2[3];
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    v9 = 0;
    a2[3] = (void **)v50;
    v50 = 0;
  }
  if ((v9 & 7) != 0)
  {
    v11 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
  sub_20BFD265C(&v49);
  if (v48)
    sub_20C35C614(v48);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a2, v13)&& (pxrInternal__aapl__pxrReserved__::UsdSkelIsSkelAnimationPrim((pxrInternal__aapl__pxrReserved__ *)a2, v14) & 1) == 0)
  {
    v47 = (void **)"usdSkel/bindingAPI.cpp";
    v48 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetAnimationSource";
    v49 = 476;
    v50 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetAnimationSource(UsdPrim *) const";
    v51 = 0;
    sub_20C348EEC((uint64_t)v42, &v37);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
    sub_20C348EEC((uint64_t)a2, &v35);
    v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v47, (pxrInternal__aapl__pxrReserved__ *)"%s -- target (<%s>) of relationship is not a valid skel animation source.", v17, Text, v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
    sub_20BFD265C(&v35);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
    sub_20BFD265C(&v37);
    LODWORD(v47) = 1;
    v48 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v49);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v49 + 1);
    *(_DWORD *)a2 = (_DWORD)v47;
    v18 = v48;
    v50 = 0;
    v48 = 0;
    v19 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2[1];
    a2[1] = (void **)v18;
    if (v19)
      sub_20C35C614(v19);
    sub_20BFD3EBC((int *)a2 + 4, (int *)&v49);
    sub_20BFD3F10((int *)a2 + 5, (int *)&v49 + 1);
    if (&v47 == a2)
    {
      if ((v50 & 7) != 0)
      {
        v23 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
    }
    else
    {
      v20 = (unint64_t)a2[3];
      if ((v20 & 7) != 0)
      {
        v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      a2[3] = (void **)v50;
      v50 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
    sub_20BFD265C(&v49);
    if (v48)
      sub_20C35C614(v48);
  }
  v47 = (void **)&v39;
  sub_20BFD6F90(&v47);
  v10 = 0;
LABEL_37:
  if ((v46 & 7) != 0)
  {
    v25 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v45);
  sub_20BFD265C(&v44);
  if (v43)
    sub_20C35C614(v43);
  result = 1;
  if (v10)
  {
    LODWORD(v47) = 1;
    v48 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v49);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v49 + 1);
    *(_DWORD *)a2 = (_DWORD)v47;
    v28 = v48;
    v50 = 0;
    v48 = 0;
    v29 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2[1];
    a2[1] = (void **)v28;
    if (v29)
      sub_20C35C614(v29);
    sub_20BFD3EBC((int *)a2 + 4, (int *)&v49);
    sub_20BFD3F10((int *)a2 + 5, (int *)&v49 + 1);
    if (&v47 == a2)
    {
      if ((v50 & 7) != 0)
      {
        v33 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
    }
    else
    {
      v30 = (unint64_t)a2[3];
      if ((v30 & 7) != 0)
      {
        v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      a2[3] = (void **)v50;
      v50 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
    sub_20BFD265C(&v49);
    if (v48)
      sub_20C35C614(v48);
    return 0;
  }
  return result;
}

void sub_20C64D1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  sub_20BFD1A18(&a12);
  a21 = (void **)&a14;
  sub_20BFD6F90(&a21);
  sub_20C377F1C((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedAnimationSource(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  _BOOL4 IsPseudoRoot;
  char AnimationSource;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  void (**v18)(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *__hidden);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  int v25;
  int v26;
  uint64_t v27;

  *(_DWORD *)a2 = 1;
  *(_QWORD *)(a2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
  *(_QWORD *)(a2 + 24) = 0;
  sub_20C35C4F8((uint64_t)&v23, (uint64_t *)this + 1, (_DWORD *)this + 4);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v23, v4))
  {
    while (1)
    {
      IsPseudoRoot = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v23);
      if (IsPseudoRoot)
        break;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v18, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v23);
      v22 = 0;
      v18 = off_24C53F490;
      AnimationSource = pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetAnimationSource((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v18, (void ***)a2);
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v18);
      if ((AnimationSource & 1) != 0)
        break;
      sub_20C3AD22C((uint64_t)&v23, (uint64_t)&v18);
      v23 = (int)v18;
      v7 = v19;
      v19 = 0;
      v8 = v24;
      v24 = v7;
      if (v8)
        sub_20C35C614(v8);
      sub_20BFD3EBC(&v25, &v20);
      sub_20BFD3F10(&v26, &v21);
      if ((v27 & 7) != 0)
      {
        v9 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
      v27 = v22;
      v22 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
      sub_20BFD265C(&v20);
      if (v19)
        sub_20C35C614(v19);
    }
    v11 = !IsPseudoRoot;
  }
  else
  {
    v11 = 0;
    IsPseudoRoot = 1;
  }
  if ((v27 & 7) != 0)
  {
    v12 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_20BFD265C(&v25);
  if (v24)
    sub_20C35C614(v24);
  if (((v11 | IsPseudoRoot) & 1) == 0)
  {
    v14 = *(_QWORD *)(a2 + 24);
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
    sub_20BFD265C((_DWORD *)(a2 + 16));
    v17 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a2 + 8);
    if (v17)
      sub_20C35C614(v17);
  }
}

void sub_20C64D448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20C35C2E0((uint64_t)va);
  sub_20C35C2E0(v5);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::ValidateJointIndices(unsigned int *a1, const char *a2, char *a3, uint64_t a4)
{
  const char *v5;
  _BOOL8 v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  uint64_t v11;

  if (!a2)
    return 1;
  v5 = 0;
  v6 = 0;
  v7 = *a1;
  if ((v7 & 0x80000000) == 0 && v7 < (unint64_t)a3)
  {
    v5 = 0;
    while (a2 - 1 != v5)
    {
      v8 = a1[(_QWORD)v5++ + 1];
      if ((v8 & 0x80000000) != 0 || v8 >= (unint64_t)a3)
      {
        v6 = v5 >= a2;
        v7 = v8;
        goto LABEL_9;
      }
    }
    return 1;
  }
LABEL_9:
  if (a4)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Index [%d] at element %td is not in the range [0,%zu)", a2, a3, v7, v5, a3);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(_OWORD *)a4 = v10;
    *(_QWORD *)(a4 + 16) = v11;
  }
  return v6;
}

uint64_t *sub_20C64D548()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C64D61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C64D66C()
{
  void *__p[2];
  char v1;

  sub_20C64ECCC();
  sub_20BDDC0E4(__p, "BlendShape");
  sub_20C64EDEC((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C64D6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::~UsdSkelBlendShape(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53F4E8;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdSkel/blendShape.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdSkelBlendShape pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C53F4E8;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C64D85C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498BAF0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498BAF0))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498BAE8, "BlendShape");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498BAE8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BAF0);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498BAE8, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53F4E8;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdSkel/blendShape.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdSkelBlendShape pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::Define(const U"
                            "sdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C53F4E8;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C64DA4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BAF0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BB00);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498BB00))
  {
    __cxa_guard_release(&qword_25498BB00);
  }
  return &qword_25498BAF8;
}

void sub_20C64DAF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BB00);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498BB10);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)__cxa_guard_acquire(&qword_25498BB10);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::_GetStaticTfType(v3);
      byte_25498BB08 = sub_20C35BD7C((char *)&qword_25498BAF8, v4, v5);
      __cxa_guard_release(&qword_25498BB10);
    }
  }
  return byte_25498BB08;
}

void sub_20C64DB6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BB10);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::_GetStaticTfType(this);
  return &qword_25498BAF8;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetOffsetsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 64), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C64DC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::CreateOffsetsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 64), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 688), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetNormalOffsetsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 56), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C64DD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::CreateNormalOffsetsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 688), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetPointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3)
    v3 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 72), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C64DEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::CreatePointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8)
    v8 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 72), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 464), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *SchemaAttributeNames;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int)this;
  v26 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498BB30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498BB30))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v5)
      v5 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v6 = *((_QWORD *)v5 + 8);
    v23 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v9)
      v9 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v10 = *((_QWORD *)v9 + 7);
    v24 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v13)
      v13 = sub_20C62C624(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    v14 = *((_QWORD *)v13 + 9);
    v25 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498BB18, &v23, 3uLL);
    v17 = &v26;
    do
    {
      v19 = *--v17;
      v18 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    while (v17 != &v23);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BB18, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BB30);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498BB50);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498BB50))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_20C64E28C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498BB38, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498BB50);
  }
  if (v1)
    return &qword_25498BB38;
  else
    return &qword_25498BB18;
}

void sub_20C64E1FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498BB30);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C64E28C(uint64_t **a1)
{
  qword_25498BB40 = 0;
  unk_25498BB48 = 0;
  qword_25498BB38 = 0;
  sub_20BFC9A6C((char **)&qword_25498BB38, ((unk_25498BB20 - qword_25498BB18) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498BB38, (_QWORD *)qword_25498BB40, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498BB38, (_QWORD *)qword_25498BB40, (uint64_t *)qword_25498BB18, unk_25498BB20, (unk_25498BB20 - qword_25498BB18) >> 3);
}

void sub_20C64E320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::CreateInbetween(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_Create((pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)&v7, a2, a3);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C64E3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetInbetween(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _BYTE v12[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  int v15;
  uint64_t v16;
  _BYTE v17[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  int v19;
  int v20;
  uint64_t v21;

  sub_20C35C4F8((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_MakeNamespaced(a2, 0, &v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, (uint64_t)v17);
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::UsdSkelInbetweenShape(a3, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v17);
  if ((v21 & 7) != 0)
  {
    v5 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  if (v18)
    sub_20C35C614(v18);
  if ((v11 & 7) != 0)
  {
    v7 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if ((v16 & 7) != 0)
  {
    v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_20BFD265C(&v14);
  if (v13)
    sub_20C35C614(v13);
}

void sub_20C64E4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20C372B54((uint64_t)va1);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::HasInbetween(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v3;
  uint64_t IsInbetween;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  _BYTE v12[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  int v15;
  uint64_t v16;
  _BYTE v17[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_MakeNamespaced(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)1, &v22);
  if (!v22)
    return 0;
  sub_20C35C4F8((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22, (uint64_t)v17);
  IsInbetween = pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::IsInbetween((pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)v17, v3);
  if ((v21 & 7) != 0)
  {
    v5 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  if (v18)
    sub_20C35C614(v18);
  if ((v16 & 7) != 0)
  {
    v7 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_20BFD265C(&v14);
  if (v13)
    sub_20C35C614(v13);
  if ((v22 & 7) != 0)
  {
    v9 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  return IsInbetween;
}

void sub_20C64E654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20C372B54((uint64_t)va1);
  sub_20C35C2E0((uint64_t)va);
  v4 = *(_QWORD *)(v2 - 24);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::_MakeInbetweens(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_20C64E81C(a2, (a1[1] - *a1) >> 5);
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      sub_20C3AD760(v4, (uint64_t)v16);
      if (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::IsInbetween((pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)v16, v6))
      {
        pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::UsdSkelInbetweenShape((pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)&v11, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v16);
        sub_20C64E8AC(a2, (uint64_t)&v11);
        if ((v15 & 7) != 0)
        {
          v7 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stlxr(v8 - 2, v7));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
        sub_20BFD265C(&v13);
        if (v12)
          sub_20C35C614(v12);
      }
      if ((v20 & 7) != 0)
      {
        v9 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_20BFD265C(&v18);
      if (v17)
        sub_20C35C614(v17);
      v4 += 32;
    }
    while (v4 != v5);
  }
}

void sub_20C64E7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20C641F68((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_20C64E81C(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BED2F10((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    sub_20C64EEA0(a1, v7);
    return sub_20C64F04C(v7);
  }
  return result;
}

void sub_20C64E898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C64F04C((void **)va);
  _Unwind_Resume(a1);
}

void *sub_20C64E8AC(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (v6 >= v4)
  {
    v9 = (uint64_t)(v6 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59)
      sub_20BDDF694();
    v10 = v4 - *a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v18 = a1 + 2;
    if (v12)
      v13 = (char *)sub_20BED2F10((uint64_t)(a1 + 2), v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[32 * v9];
    v17 = &v13[32 * v12];
    sub_20C3AE790(v5, (uint64_t)v15, a2);
    v16 = v15 + 32;
    sub_20C64EEA0(a1, &v14);
    v8 = a1[1];
    result = sub_20C64F04C(&v14);
  }
  else
  {
    result = sub_20C3AE790((uint64_t)(a1 + 2), v6, a2);
    v8 = v6 + 32;
    a1[1] = v6 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_20C64E9A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C64F04C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C64E9BC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetInbetweens(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, uint64_t *a2@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *IsDefined;
  pxrInternal__aapl__pxrReserved__::TfToken *NamespacePrefix;
  uint64_t *EmptyString;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9[3];
  _BYTE v10[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;
  void **v15;

  sub_20C35C4F8((uint64_t)v10, (uint64_t *)this + 1, (_DWORD *)this + 4);
  IsDefined = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v10, v3);
  if ((_DWORD)IsDefined)
  {
    NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNamespacePrefix(IsDefined);
    if ((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace((uint64_t)v10, EmptyString, v9);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::_MakeInbetweens(v9, a2);
  v15 = (void **)v9;
  sub_20C37FA04(&v15);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
}

void sub_20C64EAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  *(_QWORD *)(v5 - 24) = v4;
  sub_20C37FA04((void ***)(v5 - 24));
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetAuthoredInbetweens(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, uint64_t *a2@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *IsDefined;
  pxrInternal__aapl__pxrReserved__::TfToken *NamespacePrefix;
  uint64_t *EmptyString;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9[3];
  _BYTE v10[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;
  void **v15;

  sub_20C35C4F8((uint64_t)v10, (uint64_t *)this + 1, (_DWORD *)this + 4);
  IsDefined = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v10, v3);
  if ((_DWORD)IsDefined)
  {
    NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNamespacePrefix(IsDefined);
    if ((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)v10, EmptyString, v9);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::_MakeInbetweens(v9, a2);
  v15 = (void **)v9;
  sub_20C37FA04(&v15);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
}

void sub_20C64EBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  *(_QWORD *)(v5 - 24) = v4;
  sub_20C37FA04((void ***)(v5 - 24));
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::ValidatePointIndices(uint64_t a1, const char *a2, char *a3, uint64_t a4)
{
  BOOL v5;
  const char *v6;
  unint64_t v7;
  __int128 v9;
  uint64_t v10;

  if (a2)
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(unsigned int *)(a1 + 4 * (_QWORD)v6);
      if ((v7 & 0x80000000) != 0)
      {
        if (!a4)
          return v5;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Index [%d] at element %td < 0", a2, a3, *(unsigned int *)(a1 + 4 * (_QWORD)v6), v6);
        goto LABEL_9;
      }
      if (v7 >= (unint64_t)a3)
        break;
      v5 = ++v6 >= a2;
      if (a2 == v6)
        return 1;
    }
    if (!a4)
      return v5;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Index [%d] at element %td >= numPoints [%zu]", a2, a3, v7, v6, a3);
LABEL_9:
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(_OWORD *)a4 = v9;
    *(_QWORD *)(a4 + 16) = v10;
  }
  else
  {
    return 1;
  }
  return v5;
}

uint64_t *sub_20C64ECCC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5647E8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C64EDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C64EDEC(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C64EE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C64EEA0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C64EF14((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C64EF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 32;
      sub_20C3AE790(a1, v7 - 32, v9);
      v7 = *((_QWORD *)&v16 + 1) - 32;
      *((_QWORD *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C64EFC8((uint64_t)v13);
  return v11;
}

uint64_t sub_20C64EFC8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C64EFFC((uint64_t *)a1);
  return a1;
}

void sub_20C64EFFC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C641FEC(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **sub_20C64F04C(void **a1)
{
  sub_20C64F07C(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C64F07C(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 32;
    sub_20C641FEC(v4, i - 32);
  }
}

pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::UsdSkelBlendShapeQuery(void ***this, const pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  uint64_t v5;
  unint64_t v6;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  uint64_t v20;
  _QWORD *v21;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  pxrInternal__aapl__pxrReserved__ *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  void **v27;
  void **v28;
  char *v29;
  const char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  void **v39;
  void **v40;
  char *v41;
  uint64_t v42;
  int v43;
  void **v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  void **v52;
  void **v53;
  char *v54;
  uint64_t v55;
  int v56;
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *v57;
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *v58;
  float v59;
  const char *Text;
  char *v61;
  unint64_t v62;
  void **v63;
  float *v64;
  void **v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  float v73;
  void **v74;
  void **v75;
  void **v76;
  void *v77;
  int v78;
  void **v79;
  uint64_t v80;
  uint64_t *v81;
  void **v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  pxrInternal__aapl__pxrReserved__ *v88;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  int *v97;
  const pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *v98;
  unint64_t *v99;
  int *v100;
  uint64_t v101;
  void ***v102;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v103;
  void ***v104;
  int v105;
  int v106;
  float v107;
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *v108;
  unsigned int *v109;
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape **v110;
  pxrInternal__aapl__pxrReserved__ *v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v123;
  int v124;
  int v125;
  uint64_t v126;

  *(_DWORD *)this = 1;
  this[1] = 0;
  v100 = (int *)(this + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 5);
  *(_OWORD *)(this + 3) = 0u;
  *(_OWORD *)(this + 7) = 0u;
  v103 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(this + 7);
  v104 = this + 4;
  *(_OWORD *)(this + 9) = 0u;
  *(_OWORD *)(this + 11) = 0u;
  v99 = (unint64_t *)(this + 3);
  *(_OWORD *)(this + 5) = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapeTargetsRel(a2, (uint64_t)v122);
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v122, v4) & 1) != 0)
  {
    v98 = a2;
    v97 = (int *)this + 5;
    v119 = 0;
    v120 = 0;
    v121 = 0;
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets((uint64_t)v122, &v119);
    sub_20C64FB20(v103, (v120 - v119) >> 3);
    v5 = v119;
    if (v120 != v119)
    {
      v6 = 0;
      v102 = this + 6;
      do
      {
        sub_20C35C4F8((uint64_t)&v110, (uint64_t *)v98 + 1, (_DWORD *)v98 + 4);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v110, v7, &v108);
        pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::Get((uint64_t *)&v108, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 8 * v6), (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v115);
        v8 = v109;
        if (v109)
        {
          v9 = v109 + 2;
          do
          {
            v10 = __ldxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
            (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
        }
        if ((v113 & 7) != 0)
        {
          v12 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
          do
            v13 = __ldxr(v12);
          while (__stlxr(v13 - 2, v12));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v112 + 1);
        sub_20BFD265C(&v112);
        if (v111)
          sub_20C35C614(v111);
        if (v116
          && (*(_BYTE *)(v116 + 57) & 8) == 0
          && ((*(uint64_t (**)(uint64_t *))(v115 + 32))(&v115) & 1) != 0)
        {
          v14 = *(_QWORD *)v103;
          v15 = v116;
          if (v116)
          {
            v16 = (unint64_t *)(v116 + 48);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v18 = v14 + 40 * v6;
          v19 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v18 + 8);
          *(_QWORD *)(v18 + 8) = v15;
          if (v19)
            sub_20C35C614(v19);
          sub_20C01A074((int *)(v18 + 16), &v117);
          sub_20C01A0C8((int *)(v18 + 20), &v118);
          v20 = v14 + 40 * v6;
          *(_QWORD *)(v20 + 24) = 0xAAAAAAAAAAAAAAABLL * (((char *)this[5] - (char *)this[4]) >> 2);
          v21 = (_QWORD *)(v20 + 24);
          sub_20C35C4F8((uint64_t)&v110, &v116, &v117);
          v23 = v111;
          if (!v111 || (v24 = *((_QWORD *)v111 + 7), (v24 & 0x800) != 0))
          {
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v111, v22);
            v24 = *((_QWORD *)v23 + 7);
          }
          if ((v113 & 7) != 0)
          {
            v25 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
            do
              v26 = __ldxr(v25);
            while (__stlxr(v26 - 2, v25));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v112 + 1);
          sub_20BFD265C(&v112);
          if (v111)
            sub_20C35C614(v111);
          if ((v24 & 1) != 0)
          {
            v27 = this[5];
            v28 = this[6];
            if (v27 >= v28)
            {
              v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)*v104) >> 2);
              v33 = v32 + 1;
              if (v32 + 1 > 0x1555555555555555)
                sub_20BDDF694();
              v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)*v104) >> 2);
              if (2 * v34 > v33)
                v33 = 2 * v34;
              if (v34 >= 0xAAAAAAAAAAAAAAALL)
                v35 = 0x1555555555555555;
              else
                v35 = v33;
              v36 = (char *)sub_20C152228((uint64_t)v102, v35);
              v38 = &v36[12 * v32];
              *(_DWORD *)v38 = v6;
              *(_QWORD *)(v38 + 4) = 0x3F800000FFFFFFFFLL;
              v40 = this[4];
              v39 = this[5];
              v41 = v38;
              if (v39 != v40)
              {
                do
                {
                  v42 = *(uint64_t *)((char *)v39 - 12);
                  v39 = (void **)((char *)v39 - 12);
                  v43 = *((_DWORD *)v39 + 2);
                  *(_QWORD *)(v41 - 12) = v42;
                  v41 -= 12;
                  *((_DWORD *)v41 + 2) = v43;
                }
                while (v39 != v40);
                v39 = *v104;
              }
              v28 = (void **)&v36[12 * v37];
              v29 = v38 + 12;
              this[4] = (void **)v41;
              this[5] = (void **)(v38 + 12);
              this[6] = v28;
              if (v39)
              {
                operator delete(v39);
                v28 = *v102;
              }
            }
            else
            {
              *(_DWORD *)v27 = v6;
              *(void **)((char *)v27 + 4) = (void *)0x3F800000FFFFFFFFLL;
              v29 = (char *)v27 + 12;
            }
            this[5] = (void **)v29;
            if (v29 >= (char *)v28)
            {
              v45 = 0xAAAAAAAAAAAAAAABLL * ((v29 - (char *)*v104) >> 2);
              v46 = v45 + 1;
              if (v45 + 1 > 0x1555555555555555)
                sub_20BDDF694();
              v47 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)*v104) >> 2);
              if (2 * v47 > v46)
                v46 = 2 * v47;
              if (v47 >= 0xAAAAAAAAAAAAAAALL)
                v48 = 0x1555555555555555;
              else
                v48 = v46;
              v49 = (char *)sub_20C152228((uint64_t)v102, v48);
              v51 = &v49[12 * v45];
              *(_DWORD *)v51 = v6;
              *(_QWORD *)(v51 + 4) = 0xFFFFFFFFLL;
              v53 = this[4];
              v52 = this[5];
              v54 = v51;
              if (v52 != v53)
              {
                do
                {
                  v55 = *(uint64_t *)((char *)v52 - 12);
                  v52 = (void **)((char *)v52 - 12);
                  v56 = *((_DWORD *)v52 + 2);
                  *(_QWORD *)(v54 - 12) = v55;
                  v54 -= 12;
                  *((_DWORD *)v54 + 2) = v56;
                }
                while (v52 != v53);
                v52 = *v104;
              }
              v44 = (void **)(v51 + 12);
              this[4] = (void **)v54;
              this[5] = (void **)(v51 + 12);
              this[6] = (void **)&v49[12 * v50];
              if (v52)
                operator delete(v52);
            }
            else
            {
              *(_DWORD *)v29 = v6;
              *(_QWORD *)(v29 + 4) = 0xFFFFFFFFLL;
              v44 = (void **)(v29 + 12);
            }
            v101 = v14;
            this[5] = v44;
            pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetInbetweens((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)&v115, (uint64_t *)&v108);
            v58 = v108;
            v57 = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)v109;
            while (v58 != v57)
            {
              v107 = 0.0;
              if (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetWeight(v58, &v107))
              {
                v59 = v107;
                if (fabs(v107) >= 0.000000999999997 && fabs(v107 + -1.0) >= 0.000000999999997)
                {
                  v62 = (unint64_t)((char *)this[11] - (char *)this[10]) >> 5;
                  v64 = (float *)this[5];
                  v63 = this[6];
                  if (v64 >= (float *)v63)
                  {
                    v66 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - (char *)*v104) >> 2);
                    v67 = v66 + 1;
                    if (v66 + 1 > 0x1555555555555555)
                      sub_20BDDF694();
                    v68 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)*v104) >> 2);
                    if (2 * v68 > v67)
                      v67 = 2 * v68;
                    if (v68 >= 0xAAAAAAAAAAAAAAALL)
                      v69 = 0x1555555555555555;
                    else
                      v69 = v67;
                    v70 = (char *)sub_20C152228((uint64_t)v102, v69);
                    v72 = &v70[12 * v66];
                    v73 = v107;
                    *(_DWORD *)v72 = v6;
                    *((_DWORD *)v72 + 1) = v62;
                    *((float *)v72 + 2) = v73;
                    v75 = this[4];
                    v74 = this[5];
                    v76 = (void **)v72;
                    if (v74 != v75)
                    {
                      do
                      {
                        v77 = *(void **)((char *)v74 - 12);
                        v74 = (void **)((char *)v74 - 12);
                        v78 = *((_DWORD *)v74 + 2);
                        *(void **)((char *)v76 - 12) = v77;
                        v76 = (void **)((char *)v76 - 12);
                        *((_DWORD *)v76 + 2) = v78;
                      }
                      while (v74 != v75);
                      v74 = *v104;
                    }
                    v65 = (void **)(v72 + 12);
                    this[4] = v76;
                    this[5] = (void **)(v72 + 12);
                    this[6] = (void **)&v70[12 * v71];
                    if (v74)
                      operator delete(v74);
                  }
                  else
                  {
                    *(_DWORD *)v64 = v6;
                    *((_DWORD *)v64 + 1) = v62;
                    v65 = (void **)(v64 + 3);
                    v64[2] = v59;
                  }
                  this[5] = v65;
                  v79 = this[11];
                  if (v79 >= this[12])
                  {
                    v80 = sub_20C652110((uint64_t *)this + 10, (uint64_t)v58);
                  }
                  else
                  {
                    sub_20C37F2BC((uint64_t)(this + 12), (uint64_t)this[11], (uint64_t)v58);
                    v80 = (uint64_t)(v79 + 4);
                    this[11] = v79 + 4;
                  }
                  this[11] = (void **)v80;
                }
                else
                {
                  v110 = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape **)"usdSkel/blendShapeQuery.cpp";
                  v111 = (pxrInternal__aapl__pxrReserved__ *)"UsdSkelBlendShapeQuery";
                  v112 = 97;
                  v113 = (unint64_t)"pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::UsdSkelBlendShapeQu"
                                           "ery(const UsdSkelBindingAPI &)";
                  v114 = 0;
                  sub_20C348EEC((uint64_t)v58, &v105);
                  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v105);
                  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v110, (pxrInternal__aapl__pxrReserved__ *)"%s -- skipping inbetween with invalid weight (%f)", v61, Text, v107, v97);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v106);
                  sub_20BFD265C(&v105);
                }
              }
              v58 = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)((char *)v58 + 32);
            }
            v110 = &v108;
            sub_20C641F68((void ***)&v110);
            v82 = this[4];
            v81 = (uint64_t *)this[5];
            v83 = 0xAAAAAAAAAAAAAAABLL * (((char *)v81 - (char *)v82) >> 2);
            v84 = (uint64_t)v82 + 12 * *v21;
            v85 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v81 - v84) >> 2));
            v86 = v83 - *v21;
            *(_QWORD *)(v101 + 40 * v6 + 32) = v86;
            if (v86)
              v87 = v85;
            else
              v87 = 0;
            sub_20C6521FC(v84, v81, (uint64_t)&v108, v87, 1);
          }
        }
        else
        {
          v110 = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape **)"usdSkel/blendShapeQuery.cpp";
          v111 = (pxrInternal__aapl__pxrReserved__ *)"UsdSkelBlendShapeQuery";
          v112 = 67;
          v113 = (unint64_t)"pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::UsdSkelBlendShapeQuery(cons"
                                   "t UsdSkelBindingAPI &)";
          v114 = 0;
          v30 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 8 * v6));
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v110, (pxrInternal__aapl__pxrReserved__ *)"Target <%s> is not a valid BlendShape", v31, v30);
        }
        pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::~UsdSkelBlendShape((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)&v115);
        ++v6;
        v5 = v119;
      }
      while (v6 < (v120 - v119) >> 3);
    }
    sub_20C35C4F8((uint64_t)&v110, (uint64_t *)v98 + 1, (_DWORD *)v98 + 4);
    *(_DWORD *)this = (_DWORD)v110;
    v88 = v111;
    v111 = 0;
    v89 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)this[1];
    this[1] = (void **)v88;
    if (v89)
      sub_20C35C614(v89);
    sub_20BFD3EBC(v100, (int *)&v112);
    sub_20BFD3F10(v97, (int *)&v112 + 1);
    if (&v110 == (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape ***)this)
    {
      if ((v113 & 7) != 0)
      {
        v92 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
    }
    else
    {
      if ((*v99 & 7) != 0)
      {
        v90 = (unsigned int *)(*v99 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      *v99 = v113;
      v113 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v112 + 1);
    sub_20BFD265C(&v112);
    if (v111)
      sub_20C35C614(v111);
    v110 = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape **)&v119;
    sub_20BFD6F90((void ***)&v110);
  }
  if ((v126 & 7) != 0)
  {
    v94 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFFFF8);
    do
      v95 = __ldxr(v94);
    while (__stlxr(v95 - 2, v94));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v125);
  sub_20BFD265C(&v124);
  if (v123)
    sub_20C35C614(v123);
  return (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *)this;
}

void sub_20C64F9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,void **a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
  uint64_t v31;
  uint64_t v32;
  void *v34;

  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::~UsdSkelBlendShape((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)(v32 - 184));
  a31 = (void **)(v32 - 160);
  sub_20BFD6F90(&a31);
  sub_20C377F1C(v32 - 136);
  a31 = a20;
  sub_20C641F68(&a31);
  a31 = a22;
  sub_20C642050(&a31);
  v34 = *a23;
  if (*a23)
  {
    *(_QWORD *)(v31 + 40) = v34;
    operator delete(v34);
  }
  sub_20C35C2E0(v31);
  _Unwind_Resume(a1);
}

void sub_20C64FB20(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *((_QWORD *)a1 + 1);
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *(_QWORD *)a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_20C651D08(a1, v6);
  }
  else if (!v5)
  {
    v7 = *(_QWORD *)a1 + 40 * a2;
    while (v3 != v7)
      pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::~UsdSkelBlendShape((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)(v3 - 40));
    *((_QWORD *)a1 + 1) = v7;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::GetBlendShape(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this@<X0>, unint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  v4 = *((_QWORD *)this + 7);
  if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 8) - v4) >> 3) <= a2)
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *(_QWORD *)a3 = off_24C53F4E8;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v4 + 40 * a2));
    *(_QWORD *)a3 = off_24C53F4E8;
  }
}

void sub_20C64FC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::GetInbetween@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _DWORD *result;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  _QWORD v19[4];
  char v20;

  v4 = *((_QWORD *)this + 4);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 5) - v4) >> 2) <= a2)
    goto LABEL_14;
  v5 = v4 + 12 * a2;
  v8 = *(_DWORD *)(v5 + 4);
  v7 = (_DWORD *)(v5 + 4);
  v6 = v8;
  if ((v8 & 0x80000000) != 0)
    goto LABEL_14;
  v9 = *((_QWORD *)this + 10);
  if (v6 >= (*((_QWORD *)this + 11) - v9) >> 5)
  {
    v19[0] = "usdSkel/blendShapeQuery.cpp";
    v19[1] = "GetInbetween";
    v19[2] = 132;
    v19[3] = "UsdSkelInbetweenShape pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::GetInbetween(size_t) const";
    v20 = 0;
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v19, "static_cast<size_t>(shape.GetInbetweenIndex()) < _inbetweens.size()", 0))
    {
      LODWORD(v6) = *v7;
      v9 = *((_QWORD *)this + 10);
      goto LABEL_4;
    }
LABEL_14:
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(_QWORD *)(a3 + 24) = 0;
    return result;
  }
LABEL_4:
  v10 = v9 + 32 * (int)v6;
  *(_DWORD *)a3 = *(_DWORD *)v10;
  v11 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(a3 + 8) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 48);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  sub_20BFD6E54((_DWORD *)(a3 + 16), (_DWORD *)(v10 + 16));
  result = sub_20BFD6EA4((_DWORD *)(a3 + 20), (_DWORD *)(v10 + 20));
  v15 = *(_QWORD *)(v10 + 24);
  *(_QWORD *)(a3 + 24) = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      *(_QWORD *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::GetBlendShapeIndex(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this, unint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 5) - v2) >> 2) <= a2)
    return 0;
  else
    return *(unsigned int *)(v2 + 12 * a2);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeBlendShapePointIndices(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__ *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t initial_auto_partitioner_divisor;
  _QWORD v13[2];
  tbb::task_group_context *v14;
  _DWORD v15[32];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__ *)sub_20C653074(a2, 0xCCCCCCCCCCCCCCCDLL* ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3));
  v6 = *((_QWORD *)this + 7);
  v5 = *((_QWORD *)this + 8);
  v13[0] = this;
  v13[1] = a2;
  if (v5 != v6)
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 3);
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v4))
    {
      v15[0] = 0;
      v16 = 65539;
      v17 = 55;
      tbb::task_group_context::init((uint64_t)v15, v7, v8, v9);
      v14 = (tbb::task_group_context *)v15;
      v11 = tbb::internal::allocate_root_with_context_proxy::allocate(&v14, 0x38uLL);
      *(_BYTE *)(v11 - 11) = 1;
      *(_QWORD *)v11 = &off_24C53F5D0;
      *(_QWORD *)(v11 + 8) = v10;
      *(_OWORD *)(v11 + 16) = xmmword_20CA59F70;
      *(_QWORD *)(v11 + 32) = v13;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v11);
      *(_DWORD *)(v11 + 48) = 0;
      *(_BYTE *)(v11 + 52) = 5;
      *(_QWORD *)(v11 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v11 - 40) + 16))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v15);
    }
    else
    {
      sub_20C6534BC(v13, 0, v10);
    }
  }
}

void sub_20C64FF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  tbb::task *v15;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a11, v15);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a13);
  sub_20C642144((void ***)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapePointOffsets(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__ *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t initial_auto_partitioner_divisor;
  _QWORD *v13[2];
  tbb::task_group_context *v14;
  _DWORD v15[32];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__ *)sub_20C644A84(a2, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 2));
  v6 = *((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 5);
  v13[0] = this;
  v13[1] = a2;
  if (v5 != v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 2);
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v4))
    {
      v15[0] = 0;
      v16 = 65539;
      v17 = 55;
      tbb::task_group_context::init((uint64_t)v15, v7, v8, v9);
      v14 = (tbb::task_group_context *)v15;
      v11 = tbb::internal::allocate_root_with_context_proxy::allocate(&v14, 0x38uLL);
      *(_BYTE *)(v11 - 11) = 1;
      *(_QWORD *)v11 = &off_24C53F618;
      *(_QWORD *)(v11 + 8) = v10;
      *(_OWORD *)(v11 + 16) = xmmword_20CA59F70;
      *(_QWORD *)(v11 + 32) = v13;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v11);
      *(_DWORD *)(v11 + 48) = 0;
      *(_BYTE *)(v11 + 52) = 5;
      *(_QWORD *)(v11 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v11 - 40) + 16))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v15);
    }
    else
    {
      sub_20C653AC0(v13, 0, v10);
    }
  }
}

void sub_20C650130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  tbb::task *v15;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a11, v15);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a13);
  sub_20C5755EC((void ***)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeNormalOffsets(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__ *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t initial_auto_partitioner_divisor;
  _QWORD *v13[2];
  tbb::task_group_context *v14;
  _DWORD v15[32];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__ *)sub_20C644A84(a2, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 2));
  v6 = *((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 5);
  v13[0] = this;
  v13[1] = a2;
  if (v5 != v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 2);
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v4))
    {
      v15[0] = 0;
      v16 = 65539;
      v17 = 55;
      tbb::task_group_context::init((uint64_t)v15, v7, v8, v9);
      v14 = (tbb::task_group_context *)v15;
      v11 = tbb::internal::allocate_root_with_context_proxy::allocate(&v14, 0x38uLL);
      *(_BYTE *)(v11 - 11) = 1;
      *(_QWORD *)v11 = &off_24C53F660;
      *(_QWORD *)(v11 + 8) = v10;
      *(_OWORD *)(v11 + 16) = xmmword_20CA59F70;
      *(_QWORD *)(v11 + 32) = v13;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v11);
      *(_DWORD *)(v11 + 48) = 0;
      *(_BYTE *)(v11 + 52) = 5;
      *(_QWORD *)(v11 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v11 - 40) + 16))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v15);
    }
    else
    {
      sub_20C6540A0(v13, 0, v10);
    }
  }
}

void sub_20C6502C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  tbb::task *v15;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a11, v15);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a13);
  sub_20C5755EC((void ***)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeWeights(_QWORD *a1, _QWORD *a2, char *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v37;
  float v38;
  char *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  char v43;

  if (!a3)
  {
    v39 = "usdSkel/blendShapeQuery.cpp";
    v40 = "ComputeSubShapeWeights";
    v41 = 275;
    v42 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeWeights(const TfSpan<const float"
          "> &, VtFloatArray *, VtUIntArray *, VtUIntArray *) const";
    v43 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 1, (pxrInternal__aapl__pxrReserved__ *)"'subShapeWeights' is null");
    return 0;
  }
  if (!a4)
  {
    v39 = "usdSkel/blendShapeQuery.cpp";
    v40 = "ComputeSubShapeWeights";
    v41 = 279;
    v42 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeWeights(const TfSpan<const float"
          "> &, VtFloatArray *, VtUIntArray *, VtUIntArray *) const";
    v43 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 1, (pxrInternal__aapl__pxrReserved__ *)"'blendShapeIndices' is null");
    return 0;
  }
  if (!a5)
  {
    v39 = "usdSkel/blendShapeQuery.cpp";
    v40 = "ComputeSubShapeWeights";
    v41 = 283;
    v42 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeWeights(const TfSpan<const float"
          "> &, VtFloatArray *, VtUIntArray *, VtUIntArray *) const";
    v43 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 1, (pxrInternal__aapl__pxrReserved__ *)"'subShapeIndices' is null");
    return 0;
  }
  v9 = a2[1];
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[8] - a1[7]) >> 3);
  if (v9 != v10)
  {
    v39 = "usdSkel/blendShapeQuery.cpp";
    v40 = "ComputeSubShapeWeights";
    v41 = 289;
    v42 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeWeights(const TfSpan<const float"
          "> &, VtFloatArray *, VtUIntArray *, VtUIntArray *) const";
    v43 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v39, (pxrInternal__aapl__pxrReserved__ *)"Size of weights [%td] != number of blend shapes [%zu]", a3, v9, v10);
    return 0;
  }
  sub_20C6506B4((unint64_t *)a3, 2 * v9);
  sub_20C65074C(a4, 2 * a2[1]);
  sub_20C65074C(a5, 2 * a2[1]);
  if (a2[1])
  {
    for (i = 0; i < a2[1]; ++i)
    {
      v13 = a1[7];
      v14 = *(_QWORD *)(v13 + 40 * i + 32);
      if (v14 > 2)
      {
        v17 = *(float *)(*a2 + 4 * i);
        v18 = *(_QWORD *)(v13 + 40 * i + 24);
        v19 = a1[4];
        v20 = v19 + 12 * v18;
        v21 = v14;
        v22 = v20;
        do
        {
          v23 = v21 >> 1;
          v24 = v22 + 12 * (v21 >> 1);
          v25 = *(float *)(v24 + 8);
          v26 = v24 + 12;
          v21 += ~(v21 >> 1);
          if (v25 > v17)
            v21 = v23;
          else
            v22 = v26;
        }
        while (v21);
        v27 = v20 + 12 * v14;
        v28 = v20 + 12;
        if (v22 > v20)
        {
          v20 = v22 - 12;
          v28 = v22;
        }
        v29 = v22 == v27;
        if (v22 == v27)
          v30 = v22 - 24;
        else
          v30 = v20;
        if (v29)
          v31 = v22 - 12;
        else
          v31 = v28;
        v32 = *(float *)(v31 + 8);
        v33 = *(float *)(v30 + 8);
        if ((float)(v32 - v33) <= 0.000001)
          continue;
        v34 = (float)(v17 - v33) / (float)(v32 - v33);
        *(float *)&v39 = v34;
        if (v33 != 0.0 && fabs(v34 + -1.0) >= 0.000000999999997)
        {
          LODWORD(v37) = -1431655765 * ((v30 - v19) >> 2);
          v38 = 1.0 - v34;
          sub_20C6545A0((uint64_t)a3, &v38);
          v38 = *(float *)&i;
          sub_20C65443C((uint64_t)a4, &v38);
          v38 = v37;
          sub_20C65443C((uint64_t)a5, &v38);
          v32 = *(float *)(v31 + 8);
        }
        if (v32 == 0.0 || fabsf(*(float *)&v39) < 0.000001)
          continue;
        LODWORD(v35) = -1431655765 * ((v31 - a1[4]) >> 2);
        sub_20C6542D8((uint64_t)a3, &v39);
        v38 = *(float *)&i;
        sub_20C65443C((uint64_t)a4, &v38);
        v38 = v35;
        v16 = (char **)&v38;
      }
      else
      {
        v15 = v13 + 40 * i;
        sub_20C6542D8((uint64_t)a3, (_DWORD *)(*a2 + 4 * i));
        LODWORD(v39) = i;
        sub_20C65443C((uint64_t)a4, &v39);
        LODWORD(v39) = *(_DWORD *)(v15 + 24) + 1;
        v16 = &v39;
      }
      sub_20C65443C((uint64_t)a5, v16);
    }
  }
  return 1;
}

void sub_20C6506B4(unint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = a1[4];
  if (!v3)
  {
    if (!a2)
      return;
    v7 = sub_20BF5640C((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3])
    v4 = a1;
  else
    v4 = (unint64_t *)(v3 - 8);
  if (*v4 < a2)
  {
    v5 = *a1;
    v6 = sub_20BF5640C((uint64_t)a1, a2);
    v7 = v6;
    if (v5)
    {
      v8 = 0;
      do
      {
        *(_DWORD *)((char *)v6 + v8) = *(_DWORD *)(v3 + v8);
        v8 += 4;
      }
      while (4 * v5 != v8);
    }
LABEL_12:
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

void sub_20C65074C(unint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = a1[4];
  if (!v3)
  {
    if (!a2)
      return;
    v7 = sub_20BF643D4((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3])
    v4 = a1;
  else
    v4 = (unint64_t *)(v3 - 8);
  if (*v4 < a2)
  {
    v5 = *a1;
    v6 = sub_20BF643D4((uint64_t)a1, a2);
    v7 = v6;
    if (v5)
    {
      v8 = 0;
      do
      {
        *(_DWORD *)((char *)v6 + v8) = *(_DWORD *)(v3 + v8);
        v8 += 4;
      }
      while (4 * v5 != v8);
    }
LABEL_12:
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeFlattenedSubShapeWeights(_QWORD *a1, _QWORD *a2, unint64_t *a3)
{
  const char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  const char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int v26;
  char *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  char v31;
  _OWORD v32[2];
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  if (a3)
  {
    v38 = 0;
    v36 = 0u;
    v37 = 0u;
    v35 = 0;
    memset(v34, 0, sizeof(v34));
    v33 = 0;
    memset(v32, 0, sizeof(v32));
    if (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeWeights(a1, a2, (char *)&v36, (unint64_t *)v34, (unint64_t *)v32)&& (*(_QWORD *)&v32[0] == (_QWORD)v36|| (v27 = "usdSkel/blendShapeQuery.cpp", v28 = "ComputeFlattenedSubShapeWeights", v29 = 393, v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeFlattenedSubShapeWeights(const TfSpan<const float> &, VtFloatArray *) const", v31 = 0, v24 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"numIndices (%zu) != numWeights (%zu)", v5, v6, *(_QWORD *)&v32[0], (_QWORD)v36), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper(
              (uint64_t)&v27,
              "(sparseSubShapeIndices.size() == sparseSubShapeWeights.size())",
              v24) & 1) != 0)))
    {
      v9 = a1 + 4;
      v7 = a1[4];
      v8 = v9[1];
      v26 = 0;
      sub_20BF56210(a3);
      v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 2);
      v27 = (char *)&v26;
      sub_20BF56258(a3, v10, (_DWORD **)&v27);
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v11, v12);
      if ((_QWORD)v36)
      {
        v15 = 0;
        v16 = a3[4];
        do
        {
          sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v32, v13, v14);
          if (v10 > *(unsigned int *)(v33 + 4 * v15)
            || (v27 = "usdSkel/blendShapeQuery.cpp",
                v28 = "ComputeFlattenedSubShapeWeights",
                v29 = 403,
                v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeFlattenedSubShapeWeights(con"
                      "st TfSpan<const float> &, VtFloatArray *) const",
                v31 = 0,
                sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v32, v13, v14),
                v22 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"index (%d) out of range %zu - skipping.", v20, v21, *(unsigned int *)(v33 + 4 * v15), v10), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v27, "(sparseSubShapeIndices[i] < numSubShapes)", v22) & 1) != 0))
          {
            sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v36, v13, v14);
            v17 = *(_DWORD *)(v38 + 4 * v15);
            sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v32, v18, v19);
            *(_DWORD *)(v16 + 4 * *(unsigned int *)(v33 + 4 * v15)) = v17;
          }
          ++v15;
        }
        while (v15 < (unint64_t)v36);
      }
      v23 = 1;
    }
    else
    {
      v23 = 0;
    }
    sub_20BF5618C((uint64_t)v32);
    sub_20BF5618C((uint64_t)v34);
    sub_20BF5618C((uint64_t)&v36);
  }
  else
  {
    *(_QWORD *)&v36 = "usdSkel/blendShapeQuery.cpp";
    *((_QWORD *)&v36 + 1) = "ComputeFlattenedSubShapeWeights";
    *(_QWORD *)&v37 = 378;
    *((_QWORD *)&v37 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeFlattenedSubShapeWeigh"
                            "ts(const TfSpan<const float> &, VtFloatArray *) const";
    LOBYTE(v38) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 1, (pxrInternal__aapl__pxrReserved__ *)"'subShapeWeights' is null");
    return 0;
  }
  return v23;
}

void sub_20C650A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20BF5618C((uint64_t)&a17);
  sub_20BF5618C((uint64_t)&a23);
  sub_20BF5618C((uint64_t)&a29);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedPoints(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, char *a5, uint64_t a6, char *a7, _QWORD *a8, uint64_t *a9, tbb::task_group_context *a10, tbb::task_group_context *a11)
{
  BOOL v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;

  if (a5 != a3)
  {
    v25 = "usdSkel/blendShapeQuery.cpp";
    v26 = "ComputeDeformedPoints";
    v27 = 425;
    v28 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedPoints(const TfSpan<const float>"
          ", const TfSpan<const unsigned int>, const TfSpan<const unsigned int>, const std::vector<VtIntArray> &, const s"
          "td::vector<VtVec3fArray> &, TfSpan<GfVec3f>) const";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v25, (pxrInternal__aapl__pxrReserved__ *)"blendShapeIndices size [%td] != subShapeWeights size [%td]", a3, a5, a3);
    return 0;
  }
  if (a7 != a3)
  {
    v25 = "usdSkel/blendShapeQuery.cpp";
    v26 = "ComputeDeformedPoints";
    v27 = 430;
    v28 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedPoints(const TfSpan<const float>"
          ", const TfSpan<const unsigned int>, const TfSpan<const unsigned int>, const std::vector<VtIntArray> &, const s"
          "td::vector<VtVec3fArray> &, TfSpan<GfVec3f>) const";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v25, (pxrInternal__aapl__pxrReserved__ *)"subShapeIndices size [%td] != subShapeWeights size [%td]", a3, a7, a3);
    return 0;
  }
  if (a3)
  {
    v16 = 0;
    v17 = 0;
    while (1)
    {
      v18 = *(unsigned int *)(a4 + 4 * (_QWORD)v17);
      v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a8[1] - *a8) >> 3);
      if (v19 <= v18)
      {
        v25 = "usdSkel/blendShapeQuery.cpp";
        v26 = "ComputeDeformedPoints";
        v27 = 457;
        v28 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedPoints(const TfSpan<const fl"
              "oat>, const TfSpan<const unsigned int>, const TfSpan<const unsigned int>, const std::vector<VtIntArray> &,"
              " const std::vector<VtVec3fArray> &, TfSpan<GfVec3f>) const";
        v29 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v25, (pxrInternal__aapl__pxrReserved__ *)"%td'th blendShapeIndices entry [%d] >= blendShapePointIndices size [%zu]", a3, v17, v18, v19);
        return v16;
      }
      v20 = *(unsigned int *)(a6 + 4 * (_QWORD)v17);
      v21 = *a9;
      v22 = 0xCCCCCCCCCCCCCCCDLL * ((a9[1] - *a9) >> 3);
      if (v22 <= v20)
        break;
      v23 = *(_QWORD *)(v21 + 40 * v20);
      if (!v23
        || pxrInternal__aapl__pxrReserved__::UsdSkelApplyBlendShape(*(pxrInternal__aapl__pxrReserved__ **)(v21 + 40 * v20 + 32), v23, *(char **)(*a8 + 40 * v18 + 32), *(_QWORD *)(*a8 + 40 * v18), a10, a11, *(float *)(a2 + 4 * (_QWORD)v17)))
      {
        v16 = ++v17 >= a3;
        if (a3 != v17)
          continue;
      }
      return v16;
    }
    v25 = "usdSkel/blendShapeQuery.cpp";
    v26 = "ComputeDeformedPoints";
    v27 = 451;
    v28 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedPoints(const TfSpan<const float>"
          ", const TfSpan<const unsigned int>, const TfSpan<const unsigned int>, const std::vector<VtIntArray> &, const s"
          "td::vector<VtVec3fArray> &, TfSpan<GfVec3f>) const";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v25, (pxrInternal__aapl__pxrReserved__ *)"%td'th subShapeIndices entry [%d] >= subShapePointOffsets size [%zu].", a3, v17, v20, v22);
  }
  else
  {
    return 1;
  }
  return v16;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedNormals(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, char *a5, uint64_t a6, char *a7, _QWORD *a8, uint64_t *a9, tbb::task_group_context *a10, tbb::task_group_context *a11)
{
  tbb::task_group_context *v11;
  _BOOL8 v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t initial_auto_partitioner_divisor;
  uint64_t v19;
  _QWORD *v21;
  _QWORD v22[2];
  tbb::task_group_context *v23;
  _DWORD v24[32];
  uint64_t v25;
  int v26;
  uint64_t v27;

  v11 = a11;
  v27 = *MEMORY[0x24BDAC8D0];
  v22[0] = a10;
  v22[1] = a11;
  v12 = pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedPoints(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  v13 = v12;
  if (v12)
  {
    v21 = v22;
    if (a11)
    {
      if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency((pxrInternal__aapl__pxrReserved__ *)v12))
      {
        v24[0] = 0;
        v25 = 65539;
        v26 = 55;
        tbb::task_group_context::init((uint64_t)v24, v14, v15, v16);
        v23 = (tbb::task_group_context *)v24;
        v17 = tbb::internal::allocate_root_with_context_proxy::allocate(&v23, 0x38uLL);
        *(_BYTE *)(v17 - 11) = 1;
        *(_QWORD *)v17 = &off_24C53F6A8;
        *(_QWORD *)(v17 + 8) = a11;
        *(_OWORD *)(v17 + 16) = xmmword_20CA59F70;
        *(_QWORD *)(v17 + 32) = &v21;
        initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v17);
        *(_DWORD *)(v17 + 48) = 0;
        *(_BYTE *)(v17 + 52) = 5;
        *(_QWORD *)(v17 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
        (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v17 - 40) + 16))(*(_QWORD *)(v17 - 40), v17, v17 - 8);
        tbb::task_group_context::~task_group_context((tbb::task_group_context *)v24);
      }
      else
      {
        v19 = 0;
        do
        {
          sub_20BF10F48((float32x2_t *)(v22[0] + v19), 1.0e-10);
          v19 += 12;
          v11 = (tbb::task_group_context *)((char *)v11 - 1);
        }
        while (v11);
      }
    }
  }
  return v13;
}

void sub_20C650E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  tbb::task *v19;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a15, v19);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a17);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputePackedShapeTable(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *a1, unint64_t *a2, unint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t initial_auto_partitioner_divisor;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  int v20;
  int *i;
  int v22;
  int v23;
  unint64_t v24;
  char *v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  int v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *j;
  _BYTE *v49;
  int *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t *v57;
  int v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  float *v69;
  unint64_t v70;
  int *v71;
  char **v72;
  float v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  int *v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  int *v85;
  unsigned int *v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  void *__p[3];
  void *v91;
  _DWORD *v92;
  int *v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  int v98;
  void *v99;
  void *v100;
  char *v101;
  int v102;
  void ***v103;
  void **v104;
  const char *v105;
  uint64_t v106;
  const char *v107;
  char v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v104 = (void **)"usdSkel/blendShapeQuery.cpp";
    v105 = "ComputePackedShapeTable";
    v106 = 556;
    v107 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputePackedShapeTable(VtVec4fArray *, VtVec2iArray *) const";
    v108 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v104, 1, (pxrInternal__aapl__pxrReserved__ *)"'offsets' is null");
    return 0;
  }
  if (!a3)
  {
    v104 = (void **)"usdSkel/blendShapeQuery.cpp";
    v105 = "ComputePackedShapeTable";
    v106 = 560;
    v107 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputePackedShapeTable(VtVec4fArray *, VtVec2iArray *) const";
    v108 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v104, 1, (pxrInternal__aapl__pxrReserved__ *)"'ranges' is null");
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeBlendShapePointIndices(a1, &v95);
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapePointOffsets(a1, &v93);
  v98 = 0;
  v103 = (void ***)&v95;
  v7 = v96 - v95;
  if (v96 != v95)
  {
    v11 = 0xCCCCCCCCCCCCCCCDLL * (v7 >> 3);
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v6))
    {
      LODWORD(v104) = 0;
      v110 = 65539;
      v111 = 55;
      tbb::task_group_context::init((uint64_t)&v104, v8, v9, v10);
      v91 = &v103;
      v99 = &v98;
      v100 = &v91;
      v101 = &v97;
      v102 = 0;
      __p[0] = &v104;
      v7 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)__p, 0x40uLL);
      *(_BYTE *)(v7 - 11) = 1;
      *(_QWORD *)v7 = &off_24C53F540;
      *(_QWORD *)(v7 + 8) = &v99;
      *(_QWORD *)(v7 + 16) = v11;
      *(_OWORD *)(v7 + 24) = xmmword_20CA59F70;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v7);
      *(_DWORD *)(v7 + 48) = 0;
      *(_BYTE *)(v7 + 52) = 5;
      *(_QWORD *)(v7 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      *(_BYTE *)(v7 + 56) = 0;
      (*(void (**)(_QWORD, int64_t, int64_t))(**(_QWORD **)(v7 - 40) + 16))(*(_QWORD *)(v7 - 40), v7, v7 - 8);
      LODWORD(v7) = v102;
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v104);
    }
    else
    {
      v14 = 0;
      LODWORD(v7) = 0;
      do
      {
        v15 = (uint64_t *)(v95 + 40 * v14);
        v16 = *v15;
        if (*v15)
        {
          v17 = (int *)v15[4];
          v18 = 4 * v16;
          do
          {
            v20 = *v17++;
            v19 = v20;
            if ((int)v7 <= v20)
              LODWORD(v7) = v19;
            v18 -= 4;
          }
          while (v18);
        }
        ++v14;
      }
      while (v14 != v11);
    }
  }
  for (i = v93; i != v94; i += 10)
  {
    v23 = *i;
    v22 = v23;
    if ((int)v7 <= v23)
      LODWORD(v7) = v22;
  }
  if ((int)v7 > 0)
    LODWORD(v7) = v7 + 1;
  else
    LODWORD(v7) = 0;
  if ((_DWORD)v7)
  {
    v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a1 + 8) - *((_QWORD *)a1 + 7)) >> 3);
    LODWORD(v104) = 0;
    sub_20C654B14(&v99, v24, &v104);
    v27 = *((_QWORD *)a1 + 4);
    v28 = *((_QWORD *)a1 + 5) - v27;
    if (v28)
    {
      v29 = v28 / 12;
      v30 = v99;
      if (v29 <= 1)
        v31 = 1;
      else
        v31 = v29;
      v32 = (_DWORD *)(v27 + 8);
      do
      {
        LODWORD(v26) = *v32;
        if (*(float *)v32 != 0.0)
        {
          v33 = *(v32 - 2);
          if (v29 <= v33)
          {
            v104 = (void **)"usdSkel/blendShapeQuery.cpp";
            v105 = "ComputePackedShapeTable";
            v106 = 585;
            v107 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputePackedShapeTable(VtVec4fArray *"
                   ", VtVec2iArray *) const";
            v108 = 0;
            v109 = 4;
            pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v104, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v25, v26, "subShape.GetBlendShapeIndex() < _subShapes.size()");
          }
          ++v30[v33];
        }
        v32 += 3;
        --v31;
      }
      while (v31);
    }
    v7 = (int)v7;
    LODWORD(v104) = 0;
    sub_20C654B14(&v91, (int)v7, &v104);
    v35 = *((_QWORD *)a1 + 8) - *((_QWORD *)a1 + 7);
    if (v35)
    {
      v36 = 0;
      v37 = v35 / 40;
      v38 = v99;
      v39 = v95;
      v40 = (v96 - v95) / 40;
      v41 = v91;
      v42 = v92;
      if (v37 <= 1)
        v37 = 1;
      do
      {
        if (v36 == v40)
        {
          v104 = (void **)"usdSkel/blendShapeQuery.cpp";
          v105 = "ComputePackedShapeTable";
          v106 = 594;
          v107 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputePackedShapeTable(VtVec4fArray *, "
                 "VtVec2iArray *) const";
          v108 = 0;
          v109 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v104, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v34, "i < indicesPerBlendShape.size()");
        }
        v43 = v38[v36];
        v44 = *(_QWORD *)(v39 + 40 * v36);
        if (v44)
        {
          v45 = *(int **)(v39 + 40 * v36 + 32);
          v46 = 4 * v44;
          do
          {
            v47 = *v45++;
            v34 = (char *)(v41[v47] + v43);
            v41[v47] = (_DWORD)v34;
            v46 -= 4;
          }
          while (v46);
        }
        else
        {
          for (j = v41; j != v42; ++j)
            *j += v43;
        }
        ++v36;
      }
      while (v36 != v37);
    }
    __p[0] = 0;
    v104 = __p;
    sub_20C00F9CC(a3, (int)v7, (uint64_t **)&v104);
    v50 = (int *)v91;
    v49 = v92;
    sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v51, v52);
    v54 = (v49 - (_BYTE *)v50) >> 2;
    if (v54 != *a3)
    {
      v104 = (void **)"usdSkel/blendShapeQuery.cpp";
      v105 = "_ComputeRangesFromCounts";
      v106 = 503;
      v107 = "unsigned int pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ComputeRangesFromCounts(const TfSpan"
             "<const unsigned int> &, TfSpan<GfVec2i>)";
      v108 = 0;
      v109 = 4;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v104, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v53, "counts.size() == ranges.size()");
    }
    if ((unint64_t)(v49 - (_BYTE *)v50) >= 4)
    {
      v56 = 0;
      v57 = (unint64_t *)a3[4];
      do
      {
        v58 = *v50++;
        v55 = v58 + v56;
        *v57++ = v56 | (unint64_t)(v55 << 32);
        v56 += v58;
        --v54;
      }
      while (v54);
    }
    else
    {
      LODWORD(v55) = 0;
    }
    sub_20BDE36C4(__p, (int)v7);
    v61 = 0;
    v62 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v7 = 1;
    do
    {
      sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v59, v60);
      *((_DWORD *)__p[0] + v62++) = *(_DWORD *)(a3[4] + v61);
      v61 += 8;
    }
    while (v7 != v62);
    v104 = 0;
    v105 = 0;
    sub_20BF56210(a2);
    v103 = &v104;
    sub_20BF5D3A4(a2, v55, (_OWORD **)&v103);
    sub_20BF5D5F0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v63, v64);
    v66 = *((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 5) != v66)
    {
      v67 = 0;
      v68 = a2[4];
      do
      {
        v69 = (float *)(v66 + 12 * v67);
        if (v69[2] != 0.0)
        {
          if (v67 >= 0xCCCCCCCCCCCCCCCDLL * (((char *)v94 - (char *)v93) >> 3))
          {
            v104 = (void **)"usdSkel/blendShapeQuery.cpp";
            v105 = "ComputePackedShapeTable";
            v106 = 635;
            v107 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputePackedShapeTable(VtVec4fArray *"
                   ", VtVec2iArray *) const";
            v108 = 0;
            v109 = 4;
            pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v104, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v65, "i < offsetsPerSubShape.size()");
          }
          v70 = *(unsigned int *)v69;
          if (0xCCCCCCCCCCCCCCCDLL * ((v96 - v95) >> 3) <= v70)
          {
            v104 = (void **)"usdSkel/blendShapeQuery.cpp";
            v105 = "ComputePackedShapeTable";
            v106 = 636;
            v107 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputePackedShapeTable(VtVec4fArray *"
                   ", VtVec2iArray *) const";
            v108 = 0;
            v109 = 4;
            pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v104, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v65, "subShape.GetBlendShapeIndex() < indicesPerBlendShape.size()");
          }
          v71 = &v93[10 * v67];
          if (*(_QWORD *)v71)
          {
            v72 = (char **)(v95 + 40 * v70);
            v73 = (float)v67;
            v74 = *v72;
            if (*v72)
            {
              v75 = 0;
              v76 = 0;
              v77 = (_QWORD *)(v95 + 40 * v70 + 32);
              v78 = &v93[10 * v67 + 8];
              v79 = (unsigned int *)__p[0];
              do
              {
                v80 = *(int *)(*v77 + 4 * v76);
                v81 = *(_QWORD *)v78 + v75;
                v82 = *(_DWORD *)(v81 + 8);
                v83 = v68 + 16 * v79[v80];
                *(_QWORD *)v83 = *(_QWORD *)v81;
                *(_DWORD *)(v83 + 8) = v82;
                *(float *)(v83 + 12) = v73;
                v79 = (unsigned int *)__p[0];
                ++*((_DWORD *)__p[0] + v80);
                ++v76;
                v65 = *v72;
                v75 += 12;
              }
              while (v76 < (unint64_t)*v72);
            }
            else
            {
              v84 = 0;
              v85 = &v93[10 * v67 + 8];
              v86 = (unsigned int *)__p[0];
              do
              {
                v87 = *(_QWORD *)v85 + v84;
                v88 = *(_DWORD *)(v87 + 8);
                v89 = v68 + 16 * v86[(_QWORD)v74];
                *(_QWORD *)v89 = *(_QWORD *)v87;
                *(_DWORD *)(v89 + 8) = v88;
                *(float *)(v89 + 12) = v73;
                v86 = (unsigned int *)__p[0];
                ++*((_DWORD *)__p[0] + (_QWORD)v74++);
                v84 += 12;
              }
              while ((unint64_t)v74 < *(_QWORD *)v71);
            }
          }
        }
        ++v67;
        v66 = *((_QWORD *)a1 + 4);
      }
      while (v67 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a1 + 5) - v66) >> 2));
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v91)
    {
      v92 = v91;
      operator delete(v91);
    }
    if (v99)
    {
      v100 = v99;
      operator delete(v99);
    }
  }
  else
  {
    sub_20BF56210(a3);
    sub_20BF56210(a2);
  }
  v104 = (void **)&v93;
  sub_20C5755EC(&v104);
  v104 = (void **)&v95;
  sub_20C642144(&v104);
  return 1;
}

void sub_20C651664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char **a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  tbb::task *v28;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&__p, v28);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a28);
  a13 = &a16;
  sub_20C5755EC((void ***)&a13);
  a16 = &a19;
  sub_20C642144((void ***)&a16);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::GetDescription@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, _QWORD *a3@<X8>)
{
  const char *Text;
  const char *v6;
  char *v7;
  int v9;
  int v10;

  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2))
    return sub_20BDDC0E4(a3, "invalid UsdSkelBlendShapeQuery");
  sub_20C348EEC((uint64_t)this, &v9);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"UsdSkelBlendShapeQuery <%s>", v6, v7, Text);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  return sub_20BFD265C(&v9);
}

void sub_20C6517CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6517E8(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unsigned int v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned int v22;
  unsigned __int8 v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v33[16];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  if (*((_BYTE *)this + 56) == 2)
  {
    v4 = *((_QWORD *)this - 4);
    v5 = *(_QWORD *)(v4 + 16);
    __dmb(0xBu);
    if (!v5)
    {
      v6 = *((_QWORD *)this + 1);
      *(_QWORD *)(v4 + 24) = *(_QWORD *)v6;
      v7 = v4 + 24;
      *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
      *(_DWORD *)(v7 + 24) = **(_DWORD **)v6;
      *((_QWORD *)this + 1) = v7;
      *(_BYTE *)(v7 - 15) = 1;
    }
  }
  v8 = (__int128 *)((char *)this + 16);
  v9 = *((_QWORD *)this + 4);
  v10 = *((_QWORD *)this + 2) - *((_QWORD *)this + 3);
  if (v9 < v10)
  {
    v11 = *((_QWORD *)this + 5);
    if (v11 > 1)
      goto LABEL_15;
    if (v11 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_15:
      while (1)
      {
        v12 = tbb::internal::allocate_continuation_proxy::allocate(this, 0x38uLL);
        *((_QWORD *)this - 4) = v12;
        *(_QWORD *)(v12 - 24) = 2;
        v13 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v12, 0x40uLL);
        v14 = *((_BYTE *)this + 56);
        *(_BYTE *)(v12 - 11) = 1;
        *(_QWORD *)v12 = &unk_24C520F68;
        __dmb(0xBu);
        *(_BYTE *)(v12 + 8) = 0;
        *(_QWORD *)v12 = &off_24C53F588;
        *(_BYTE *)(v12 + 9) = 0;
        *(_BYTE *)(v12 + 10) = v14;
        *(_QWORD *)(v12 + 16) = 0;
        *(_BYTE *)(v13 - 11) = 1;
        *(_QWORD *)v13 = &off_24C53F540;
        *(_QWORD *)(v13 + 8) = *((_QWORD *)this + 1);
        *(_QWORD *)(v13 + 16) = *((_QWORD *)this + 2);
        v15 = *((_QWORD *)this + 3) + ((*((_QWORD *)this + 2) - *((_QWORD *)this + 3)) >> 1);
        *((_QWORD *)this + 2) = v15;
        *(_QWORD *)(v13 + 24) = v15;
        *(_QWORD *)(v13 + 32) = *((_QWORD *)this + 4);
        v16 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v16;
        *(_QWORD *)(v13 + 40) = v16;
        *(_DWORD *)(v13 + 48) = 2;
        *(_BYTE *)(v13 + 52) = *((_BYTE *)this + 52);
        *(_BYTE *)(v13 + 56) = 2;
        *((_BYTE *)this + 56) = 1;
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v13 - 40))(*(_QWORD *)(v13 - 40), v13, v13 - 8);
        v9 = *((_QWORD *)this + 4);
        v10 = *((_QWORD *)this + 2) - *((_QWORD *)this + 3);
        if (v9 >= v10)
          break;
        v17 = *((_QWORD *)this + 5);
        if (v17 <= 1)
        {
          if (!v17 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v9 < v10 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v33 = 0x10000;
    v34 = *v8;
    v35 = *((_QWORD *)this + 4);
    while (1)
    {
      sub_20C15C670(v33, *((unsigned __int8 *)this + 52));
      v18 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v18 & 1) != 0)
      {
        v20 = *((_BYTE *)this + 52) + 1;
        *((_BYTE *)this + 52) = v20;
        v21 = v33[2];
        if (v33[2] >= 2u)
        {
          v22 = v33[1];
          v23 = v33[v33[1] + 3];
          v24 = tbb::internal::allocate_continuation_proxy::allocate(this, 0x38uLL);
          *((_QWORD *)this - 4) = v24;
          *(_QWORD *)(v24 - 24) = 2;
          v25 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v24, 0x40uLL);
          v26 = (char *)&v34 + 24 * v22;
          v27 = *((_BYTE *)this + 56);
          *(_BYTE *)(v24 - 11) = 1;
          *(_QWORD *)v24 = &unk_24C520F68;
          __dmb(0xBu);
          *(_BYTE *)(v24 + 8) = 0;
          *(_QWORD *)v24 = &off_24C53F588;
          *(_BYTE *)(v24 + 9) = 0;
          *(_BYTE *)(v24 + 10) = v27;
          *(_QWORD *)(v24 + 16) = 0;
          *(_BYTE *)(v25 - 11) = 1;
          *(_QWORD *)v25 = &off_24C53F540;
          *(_QWORD *)(v25 + 8) = *((_QWORD *)this + 1);
          v28 = *(_OWORD *)v26;
          *(_QWORD *)(v25 + 32) = *((_QWORD *)v26 + 2);
          *(_OWORD *)(v25 + 16) = v28;
          v29 = *((_QWORD *)this + 5) >> 1;
          *((_QWORD *)this + 5) = v29;
          *(_QWORD *)(v25 + 40) = v29;
          *(_DWORD *)(v25 + 48) = 2;
          LOBYTE(v29) = *((_BYTE *)this + 52);
          *(_BYTE *)(v25 + 56) = 2;
          *(_BYTE *)(v25 + 52) = v29 - v23;
          *((_BYTE *)this + 56) = 1;
          (***(void (****)(_QWORD, unint64_t, uint64_t))(v25 - 40))(*(_QWORD *)(v25 - 40), v25, v25 - 8);
          v21 = --v33[2];
          v33[1] = (v33[1] + 1) & 7;
          goto LABEL_30;
        }
        v19 = v33[0];
        if (v33[v33[0] + 3] < v20
          && *((_QWORD *)&v34 + 3 * v33[0] + 2) < *((_QWORD *)&v34 + 3 * v33[0]) - *((_QWORD *)&v34 + 3 * v33[0] + 1))
        {
          goto LABEL_30;
        }
      }
      else
      {
        v19 = v33[0];
      }
      sub_20C651CA4((uint64_t)this, (unint64_t *)&v34 + 3 * v19);
      v21 = --v33[2];
      v33[0] = (v33[0] - 1) & 7;
LABEL_30:
      if (!v21 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        goto LABEL_34;
    }
  }
  sub_20C651CA4((uint64_t)this, (unint64_t *)this + 2);
LABEL_34:
  if (*((_BYTE *)this + 56) == 1)
  {
    v30 = *((_QWORD *)this - 4);
    v31 = *((_QWORD *)this + 1);
    __dmb(0xBu);
    *(_QWORD *)(v30 + 16) = v31;
  }
  return 0;
}

_QWORD *sub_20C651C4C(_QWORD *result)
{
  *result = &off_24C53F588;
  return result;
}

uint64_t sub_20C651C60(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 9))
  {
    v1 = *(_QWORD *)(a1 + 16);
    v2 = *(_DWORD *)(v1 + 24);
    if (v2 <= *(_DWORD *)(a1 + 48))
      v2 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(v1 + 24) = v2;
  }
  if (*(_BYTE *)(a1 + 10) == 1)
  {
    v3 = *(_QWORD *)(a1 - 32);
    v4 = *(_QWORD *)(a1 + 16);
    __dmb(0xBu);
    *(_QWORD *)(v3 + 16) = v4;
  }
  return 0;
}

uint64_t sub_20C651CA4(uint64_t result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int v9;
  int v10;

  v2 = *(_QWORD *)(result + 8);
  v3 = a2[1];
  v4 = *(_DWORD *)(v2 + 24);
  if (v3 < *a2)
  {
    do
    {
      v5 = (uint64_t *)(****(_QWORD ****)(v2 + 8) + 40 * v3);
      v6 = *v5;
      if (*v5)
      {
        v7 = (int *)v5[4];
        v8 = 4 * v6;
        do
        {
          v10 = *v7++;
          v9 = v10;
          if (v4 <= v10)
            v4 = v9;
          v8 -= 4;
        }
        while (v8);
      }
      ++v3;
    }
    while (v3 != *a2);
  }
  *(_DWORD *)(v2 + 24) = v4;
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_20C651D08(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v18[2];
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = *((_QWORD *)a1 + 2);
  v4 = (uint64_t)a1 + 16;
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
    return sub_20C651E58(a1, a2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *(_QWORD *)a1) >> 3);
  v9 = v8 + a2;
  if (v8 + a2 > 0x666666666666666)
    sub_20BDDF694();
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *(_QWORD *)a1) >> 3);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x333333333333333)
    v11 = 0x666666666666666;
  else
    v11 = v9;
  v21 = v4;
  if (v11)
    v12 = (char *)sub_20BED4724(v4, v11);
  else
    v12 = 0;
  v14 = &v12[40 * v8];
  v18[0] = v12;
  v18[1] = v14;
  v19 = v14;
  v20 = &v12[40 * v11];
  v15 = 5 * a2;
  v16 = &v14[40 * a2];
  v17 = 8 * v15;
  do
  {
    *((_QWORD *)v14 + 4) = 0;
    *(_OWORD *)v14 = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    sub_20C651F38((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14);
    v14 += 40;
    v17 -= 40;
  }
  while (v17);
  v19 = v16;
  sub_20C651EC4((uint64_t *)a1, v18);
  return (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_20C6520C4((uint64_t)v18);
}

void sub_20C651E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C6520C4((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_20C651E58(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *result, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result;
  v3 = *((_QWORD *)result + 1);
  if (a2)
  {
    v4 = v3 + 40 * a2;
    v5 = 40 * a2;
    do
    {
      *(_QWORD *)(v3 + 32) = 0;
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      result = sub_20C651F38((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
      v3 += 40;
      v5 -= 40;
    }
    while (v5);
    v3 = v4;
  }
  *((_QWORD *)v2 + 1) = v3;
  return result;
}

void sub_20C651EBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20C651EC4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C652010((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_20C651F38(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1)
{
  unsigned int *v2;
  unsigned int v3;
  int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  v5 = 1;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
  v9 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  *(_QWORD *)a1 = off_24C53F4E8;
  if ((v9 & 7) != 0)
  {
    v2 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  return a1;
}

void sub_20C651FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C652010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a7 + v11 - 40), (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a3 + v11 - 40)) = off_24C53F4E8;
      *(_OWORD *)(a7 + v11 - 16) = *(_OWORD *)(a3 + v11 - 16);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_20C6520A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 40)
    pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::~UsdSkelBlendShape((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6520C4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::~UsdSkelBlendShape((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)(i - 40));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C652110(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_20BDDF694();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_20BED2F10((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[32 * v3];
  v14 = &v8[32 * v7];
  sub_20C37F2BC((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  v13 = v12 + 32;
  sub_20C64EEA0(a1, &v11);
  v9 = a1[1];
  sub_20C64F04C(&v11);
  return v9;
}

void sub_20C6521E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C64F04C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6521FC(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float *v17;
  uint64_t *v18;
  float *v19;
  uint64_t v20;
  float *v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v9) >> 2);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*((float *)a2 - 1) < *(float *)(v9 + 8))
        {
          v35 = *(_DWORD *)(v9 + 8);
          v33 = *(_QWORD *)v9;
          v24 = *(uint64_t *)((char *)a2 - 12);
          *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 - 1);
          *(_QWORD *)v9 = v24;
          *(uint64_t *)((char *)a2 - 12) = v33;
          *((_DWORD *)a2 - 1) = v35;
        }
        return result;
      case 3uLL:
        return sub_20C652660((uint64_t *)v9, (float *)(v9 + 12), (float *)a2 - 3);
      case 4uLL:
        return sub_20C652B20(v9, (uint64_t *)(v9 + 12), (float *)(v9 + 24), (uint64_t *)((char *)a2 - 12));
      case 5uLL:
        return sub_20C652BF0(v9, v9 + 12, (uint64_t *)(v9 + 24), (uint64_t *)(v9 + 36), (uint64_t *)((char *)a2 - 12));
      default:
        if (v12 > 287)
        {
          if (v11 == 1)
          {
            if ((uint64_t *)v9 != a2)
              return (uint64_t)sub_20C652CFC(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = v9 + 12 * (v13 >> 1);
          if ((unint64_t)v12 < 0x601)
          {
            sub_20C652660((uint64_t *)(v9 + 12 * v14), (float *)v9, (float *)a2 - 3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_20C652660((uint64_t *)v9, (float *)(v9 + 12 * v14), (float *)a2 - 3);
            v16 = 3 * v14;
            v17 = (float *)(v9 + 12 * v14 - 12);
            sub_20C652660((uint64_t *)(v9 + 12), v17, (float *)a2 - 6);
            v18 = (uint64_t *)(v9 + 24);
            v19 = (float *)(v9 + 12 + 4 * v16);
            sub_20C652660(v18, v19, (float *)a2 - 9);
            sub_20C652660((uint64_t *)v17, (float *)v15, v19);
            v34 = *(_DWORD *)(v8 + 8);
            v32 = *(_QWORD *)v8;
            v20 = *(_QWORD *)v15;
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v15 + 8);
            *(_QWORD *)v8 = v20;
            *(_DWORD *)(v15 + 8) = v34;
            *(_QWORD *)v15 = v32;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(float *)(v8 - 4) >= *(float *)(v8 + 8))
          {
            result = (uint64_t)sub_20C65276C((uint64_t *)v8, (float *)a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v21 = sub_20C652870((float *)v8, (unint64_t)a2);
          if ((v22 & 1) == 0)
            goto LABEL_15;
          v23 = sub_20C652970(v8, (uint64_t)v21);
          v9 = (uint64_t)(v21 + 3);
          result = sub_20C652970((uint64_t)(v21 + 3), (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_15:
            result = sub_20C6521FC(v8, v21, a3, -v11, a5 & 1);
            v9 = (uint64_t)(v21 + 3);
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (uint64_t *)v21;
          if (v23)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
          return sub_20C6525D4(v9, a2);
        if ((uint64_t *)v9 != a2)
        {
          while ((uint64_t *)(v8 + 12) != a2)
          {
            v26 = *(float *)(v8 + 20);
            v27 = *(float *)(v8 + 8);
            v25 = (uint64_t *)(v8 + 12);
            v8 += 12;
            if (v26 < v27)
            {
              v28 = *v25;
              v29 = v8;
              do
              {
                v30 = v29;
                v31 = *(_QWORD *)(v29 - 12);
                v29 -= 12;
                *(_QWORD *)v30 = v31;
                *(_DWORD *)(v30 + 8) = *(_DWORD *)(v30 - 4);
              }
              while (v26 < *(float *)(v30 - 16));
              *(_QWORD *)v29 = v28;
              *(float *)(v29 + 8) = v26;
            }
          }
        }
        return result;
    }
  }
}

uint64_t sub_20C6525D4(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_QWORD *)result != a2)
  {
    v2 = (_QWORD *)(result + 12);
    if ((_QWORD *)(result + 12) != a2)
    {
      v3 = 0;
      v4 = (_QWORD *)result;
      do
      {
        v5 = *((float *)v4 + 5);
        v6 = *((float *)v4 + 2);
        v4 = v2;
        if (v5 < v6)
        {
          v7 = *v2;
          v8 = v3;
          while (1)
          {
            v9 = result + v8;
            *(_QWORD *)(v9 + 12) = *(_QWORD *)(result + v8);
            *(_DWORD *)(v9 + 20) = *(_DWORD *)(result + v8 + 8);
            if (!v8)
              break;
            v8 -= 12;
            if (v5 >= *(float *)(v9 - 4))
            {
              v10 = result + v8 + 12;
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *(_QWORD *)v10 = v7;
          *(float *)(v10 + 8) = v5;
        }
        v2 = (_QWORD *)((char *)v4 + 12);
        v3 += 12;
      }
      while ((_QWORD *)((char *)v4 + 12) != a2);
    }
  }
  return result;
}

uint64_t sub_20C652660(uint64_t *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;

  v3 = a2[2];
  v4 = a3[2];
  if (v3 < *((float *)a1 + 2))
  {
    if (v4 < v3)
    {
      v5 = *((_DWORD *)a1 + 2);
      v6 = *a1;
      v7 = *((_DWORD *)a3 + 2);
      *a1 = *(_QWORD *)a3;
      *((_DWORD *)a1 + 2) = v7;
      *(_QWORD *)a3 = v6;
      *((_DWORD *)a3 + 2) = v5;
      return 1;
    }
    v14 = *((_DWORD *)a1 + 2);
    v15 = *a1;
    v16 = *((_DWORD *)a2 + 2);
    *a1 = *(_QWORD *)a2;
    *((_DWORD *)a1 + 2) = v16;
    *(_QWORD *)a2 = v15;
    *((_DWORD *)a2 + 2) = v14;
    if (a3[2] >= a2[2])
      return 1;
    v17 = *((_DWORD *)a2 + 2);
    v18 = *(_QWORD *)a2;
    v19 = *((_DWORD *)a3 + 2);
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *((_DWORD *)a2 + 2) = v19;
    *(_QWORD *)a3 = v18;
    *((_DWORD *)a3 + 2) = v17;
    return 2;
  }
  if (v4 < v3)
  {
    v8 = *((_DWORD *)a2 + 2);
    v9 = *(_QWORD *)a2;
    v10 = *((_DWORD *)a3 + 2);
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *((_DWORD *)a2 + 2) = v10;
    *(_QWORD *)a3 = v9;
    *((_DWORD *)a3 + 2) = v8;
    if (a2[2] >= *((float *)a1 + 2))
      return 1;
    v11 = *((_DWORD *)a1 + 2);
    v12 = *a1;
    v13 = *((_DWORD *)a2 + 2);
    *a1 = *(_QWORD *)a2;
    *((_DWORD *)a1 + 2) = v13;
    *(_QWORD *)a2 = v12;
    *((_DWORD *)a2 + 2) = v11;
    return 2;
  }
  return 0;
}

uint64_t *sub_20C65276C(uint64_t *a1, float *a2)
{
  float v2;
  uint64_t *v3;
  uint64_t *v4;
  float v5;
  uint64_t *v6;
  float v7;
  float *v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v16;
  int v17;

  v2 = *((float *)a1 + 2);
  if (v2 >= *(a2 - 1))
  {
    v6 = (uint64_t *)((char *)a1 + 12);
    do
    {
      v4 = v6;
      if (v6 >= (uint64_t *)a2)
        break;
      v7 = *((float *)v6 + 2);
      v6 = (uint64_t *)((char *)v6 + 12);
    }
    while (v2 >= v7);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = (uint64_t *)((char *)v3 + 12);
      v5 = *((float *)v3 + 5);
      v3 = (uint64_t *)((char *)v3 + 12);
    }
    while (v2 >= v5);
  }
  if (v4 >= (uint64_t *)a2)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = a2 - 3;
      v9 = *(a2 - 1);
      a2 -= 3;
    }
    while (v2 < v9);
  }
  v10 = *a1;
  while (v4 < (uint64_t *)v8)
  {
    v17 = *((_DWORD *)v4 + 2);
    v16 = *v4;
    v11 = *(_QWORD *)v8;
    *((float *)v4 + 2) = v8[2];
    *v4 = v11;
    *((_DWORD *)v8 + 2) = v17;
    *(_QWORD *)v8 = v16;
    do
    {
      v12 = *((float *)v4 + 5);
      v4 = (uint64_t *)((char *)v4 + 12);
    }
    while (v2 >= v12);
    do
    {
      v13 = *(v8 - 1);
      v8 -= 3;
    }
    while (v2 < v13);
  }
  if ((uint64_t *)((char *)v4 - 12) != a1)
  {
    v14 = *(uint64_t *)((char *)v4 - 12);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v4 - 1);
    *a1 = v14;
  }
  *(uint64_t *)((char *)v4 - 12) = v10;
  *((float *)v4 - 1) = v2;
  return v4;
}

float *sub_20C652870(float *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  float *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  float v15;
  float v16;
  uint64_t v17;

  v2 = 0;
  v3 = *(_QWORD *)a1;
  v4 = a1[2];
  do
  {
    v5 = a1[v2 + 5];
    v2 += 3;
  }
  while (v5 < v4);
  v6 = (unint64_t)&a1[v2];
  if (v2 == 3)
  {
    while (v6 < a2)
    {
      v7 = a2 - 12;
      v9 = *(float *)(a2 - 4);
      a2 -= 12;
      if (v9 < v4)
        goto LABEL_9;
    }
    v7 = a2;
  }
  else
  {
    do
    {
      v7 = a2 - 12;
      v8 = *(float *)(a2 - 4);
      a2 -= 12;
    }
    while (v8 >= v4);
  }
LABEL_9:
  v10 = &a1[v2];
  if (v6 < v7)
  {
    v11 = v7;
    do
    {
      v12 = *(_QWORD *)v10;
      v13 = *((_DWORD *)v10 + 2);
      v14 = *(_DWORD *)(v11 + 8);
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *((_DWORD *)v10 + 2) = v14;
      *(_DWORD *)(v11 + 8) = v13;
      *(_QWORD *)v11 = v12;
      do
      {
        v15 = v10[5];
        v10 += 3;
      }
      while (v15 < v4);
      do
      {
        v16 = *(float *)(v11 - 4);
        v11 -= 12;
      }
      while (v16 >= v4);
    }
    while ((unint64_t)v10 < v11);
  }
  if (v10 - 3 != a1)
  {
    v17 = *(_QWORD *)(v10 - 3);
    a1[2] = *(v10 - 1);
    *(_QWORD *)a1 = v17;
  }
  *(_QWORD *)(v10 - 3) = v3;
  *(v10 - 1) = v4;
  return v10 - 3;
}

BOOL sub_20C652970(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 4) < *(float *)(a1 + 8))
      {
        v6 = *(_DWORD *)(a1 + 8);
        v7 = *(_QWORD *)a1;
        v8 = *(_DWORD *)(a2 - 4);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v8;
        *(_QWORD *)(a2 - 12) = v7;
        *(_DWORD *)(a2 - 4) = v6;
      }
      return result;
    case 3uLL:
      sub_20C652660((uint64_t *)a1, (float *)(a1 + 12), (float *)(a2 - 12));
      return 1;
    case 4uLL:
      sub_20C652B20(a1, (uint64_t *)(a1 + 12), (float *)(a1 + 24), (uint64_t *)(a2 - 12));
      return 1;
    case 5uLL:
      sub_20C652BF0(a1, a1 + 12, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 36), (uint64_t *)(a2 - 12));
      return 1;
    default:
      v9 = a1 + 24;
      sub_20C652660((uint64_t *)a1, (float *)(a1 + 12), (float *)(a1 + 24));
      v10 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(float *)(v10 + 8);
    if (v13 < *(float *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        *(_QWORD *)(v16 + 36) = *(_QWORD *)(a1 + v15 + 24);
        *(_DWORD *)(v16 + 44) = *(_DWORD *)(a1 + v15 + 32);
        if (v15 == -24)
          break;
        v15 -= 12;
        if (v13 >= *(float *)(v16 + 20))
        {
          v17 = a1 + v15 + 36;
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *(_QWORD *)v17 = v14;
      *(float *)(v17 + 8) = v13;
      if (++v12 == 8)
        return v10 + 12 == a2;
    }
    v9 = v10;
    v11 += 12;
    v10 += 12;
    if (v10 == a2)
      return 1;
  }
}

uint64_t sub_20C652B20(uint64_t a1, uint64_t *a2, float *a3, uint64_t *a4)
{
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;

  result = sub_20C652660((uint64_t *)a1, (float *)a2, a3);
  if (*((float *)a4 + 2) < a3[2])
  {
    v9 = *((_DWORD *)a3 + 2);
    v10 = *(_QWORD *)a3;
    v11 = *((_DWORD *)a4 + 2);
    *(_QWORD *)a3 = *a4;
    *((_DWORD *)a3 + 2) = v11;
    *a4 = v10;
    *((_DWORD *)a4 + 2) = v9;
    if (a3[2] < *((float *)a2 + 2))
    {
      v12 = *((_DWORD *)a2 + 2);
      v13 = *a2;
      v14 = *((_DWORD *)a3 + 2);
      *a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v14;
      *(_QWORD *)a3 = v13;
      *((_DWORD *)a3 + 2) = v12;
      if (*((float *)a2 + 2) < *(float *)(a1 + 8))
      {
        v15 = *(_DWORD *)(a1 + 8);
        v16 = *(_QWORD *)a1;
        v17 = *((_DWORD *)a2 + 2);
        *(_QWORD *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = v17;
        *a2 = v16;
        *((_DWORD *)a2 + 2) = v15;
      }
    }
  }
  return result;
}

uint64_t sub_20C652BF0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;

  result = sub_20C652B20(a1, (uint64_t *)a2, (float *)a3, a4);
  if (*((float *)a5 + 2) < *((float *)a4 + 2))
  {
    v11 = *((_DWORD *)a4 + 2);
    v12 = *a4;
    v13 = *((_DWORD *)a5 + 2);
    *a4 = *a5;
    *((_DWORD *)a4 + 2) = v13;
    *a5 = v12;
    *((_DWORD *)a5 + 2) = v11;
    if (*((float *)a4 + 2) < *((float *)a3 + 2))
    {
      v14 = *((_DWORD *)a3 + 2);
      v15 = *a3;
      v16 = *((_DWORD *)a4 + 2);
      *a3 = *a4;
      *((_DWORD *)a3 + 2) = v16;
      *a4 = v15;
      *((_DWORD *)a4 + 2) = v14;
      if (*((float *)a3 + 2) < *(float *)(a2 + 8))
      {
        v17 = *(_DWORD *)(a2 + 8);
        v18 = *(_QWORD *)a2;
        v19 = *((_DWORD *)a3 + 2);
        *(_QWORD *)a2 = *a3;
        *(_DWORD *)(a2 + 8) = v19;
        *a3 = v18;
        *((_DWORD *)a3 + 2) = v17;
        if (*(float *)(a2 + 8) < *(float *)(a1 + 8))
        {
          v20 = *(_DWORD *)(a1 + 8);
          v21 = *(_QWORD *)a1;
          v22 = *(_DWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_DWORD *)(a1 + 8) = v22;
          *(_QWORD *)a2 = v21;
          *(_DWORD *)(a2 + 8) = v20;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_20C652CFC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v29;
  int v30;

  if ((uint64_t *)a1 != a2)
  {
    v6 = a2;
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 12;
    if ((uint64_t)a2 - a1 >= 13)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (float *)(a1 + 12 * v10);
      do
      {
        sub_20C652F14(a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*((float *)v14 + 2) < *(float *)(a1 + 8))
        {
          v15 = *((_DWORD *)v14 + 2);
          v16 = *v14;
          v17 = *(_DWORD *)(a1 + 8);
          *v14 = *(_QWORD *)a1;
          *((_DWORD *)v14 + 2) = v17;
          *(_QWORD *)a1 = v16;
          *(_DWORD *)(a1 + 8) = v15;
          sub_20C652F14(a1, a4, v9, (float *)a1);
        }
        v14 = (uint64_t *)((char *)v14 + 12);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 13)
    {
      v18 = v8 / 0xCuLL;
      do
      {
        v19 = 0;
        v29 = *(_QWORD *)a1;
        v30 = *(_DWORD *)(a1 + 8);
        v20 = a1;
        do
        {
          v21 = v20;
          v22 = v19 + 1;
          v20 += 12 * (v19 + 1);
          v23 = 2 * v19;
          v19 = (2 * v19) | 1;
          v24 = v23 + 2;
          if (v24 < v18 && *(float *)(v21 + 12 * v22 + 8) < *(float *)(v20 + 20))
          {
            v20 += 12;
            v19 = v24;
          }
          v25 = *(_QWORD *)v20;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(v20 + 8);
          *(_QWORD *)v21 = v25;
        }
        while (v19 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        v6 = (uint64_t *)((char *)v6 - 12);
        if ((uint64_t *)v20 == v6)
        {
          *(_DWORD *)(v20 + 8) = v30;
          *(_QWORD *)v20 = v29;
        }
        else
        {
          v26 = *v6;
          *(_DWORD *)(v20 + 8) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v20 = v26;
          *v6 = v29;
          *((_DWORD *)v6 + 2) = v30;
          sub_20C653008(a1, v20 + 12, a4, 0xAAAAAAAAAAAAAAABLL * ((v20 + 12 - a1) >> 2));
        }
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_20C652F14(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t *v6;
  float v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      v6 = (uint64_t *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 < a3
        && *(float *)(result + 12 * v5 + 8) < *((float *)v6 + 5))
      {
        v6 = (uint64_t *)((char *)v6 + 12);
        v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
      }
      v7 = a4[2];
      if (*((float *)v6 + 2) >= v7)
      {
        v8 = *(_QWORD *)a4;
        do
        {
          v9 = a4;
          a4 = (float *)v6;
          v10 = *v6;
          v9[2] = a4[2];
          *(_QWORD *)v9 = v10;
          if (v4 < v5)
            break;
          v11 = (2 * v5) | 1;
          v6 = (uint64_t *)(result + 12 * v11);
          v12 = 2 * v5 + 2;
          if (v12 < a3 && *(float *)(result + 12 * v11 + 8) < *((float *)v6 + 5))
          {
            v6 = (uint64_t *)((char *)v6 + 12);
            v11 = v12;
          }
          v5 = v11;
        }
        while (*((float *)v6 + 2) >= v7);
        *(_QWORD *)a4 = v8;
        a4[2] = v7;
      }
    }
  }
  return result;
}

uint64_t sub_20C653008(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = *(float *)(a2 - 4);
    if (*(float *)(result + 12 * v4 + 8) < v5)
    {
      v8 = *(_QWORD *)(a2 - 12);
      v6 = (uint64_t *)(a2 - 12);
      v7 = v8;
      do
      {
        v9 = v6;
        v6 = (uint64_t *)(result + 12 * v4);
        v10 = *v6;
        *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
        *v9 = v10;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
      }
      while (*(float *)(result + 12 * v4 + 8) < v5);
      *v6 = v7;
      *((float *)v6 + 2) = v5;
    }
  }
  return result;
}

_QWORD *sub_20C653074(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BED4B34(a1, a2);
    v4 = (char *)a1[1];
    v5 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20C653100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C642144(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C65311C(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53F5D0;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53F5D0;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C6534BC(*((_QWORD **)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C6534BC(*((_QWORD **)this + 4), v6, v4);
  return 0;
}

_QWORD *sub_20C6534BC(_QWORD *result, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  __int128 *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _DWORD *v20;
  int *v21;
  int v22;
  int *v23;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (a2 < a3)
  {
    v4 = a2;
    v5 = result;
    v6 = *result;
    do
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)(*(_QWORD *)(v6 + 56) + 40 * v4);
      v8 = *((_QWORD *)v7 + 1);
      if (v8)
      {
        if ((*(_BYTE *)(v8 + 57) & 8) == 0)
        {
          result = (_QWORD *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 32))(*(_QWORD *)(v6 + 56) + 40 * v4);
          if ((_DWORD)result)
          {
            v30 = 0;
            pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetPointIndicesAttr(v7, (uint64_t)&v23);
            v9 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Get((uint64_t)&v23, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v29, NAN);
            if ((v27 & 7) != 0)
            {
              v10 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
              do
                v11 = __ldxr(v10);
              while (__stlxr(v11 - 2, v10));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
            sub_20BFD265C(&v25);
            if (v24)
              sub_20C35C614(v24);
            if (v9)
            {
              if (sub_20BF64C0C((pxrInternal__aapl__pxrReserved__::VtValue *)&v29))
              {
                if ((v30 & 4) != 0)
                  v12 = (__int128 *)(*(uint64_t (**)(uint64_t *))((v30 & 0xFFFFFFFFFFFFFFF8) + 168))(&v29);
                else
                  v12 = (__int128 *)v29;
                sub_20C03150C(*(_QWORD *)v5[1] + 40 * v4, v12);
              }
              else if (sub_20BF6374C((pxrInternal__aapl__pxrReserved__::VtValue *)&v29))
              {
                v13 = (unint64_t *)((v30 & 4) != 0
                                         ? (*(uint64_t (**)(uint64_t *))((v30 & 0xFFFFFFFFFFFFFFF8) + 168))(&v29)
                                         : v29);
                v14 = (unint64_t *)(*(_QWORD *)v5[1] + 40 * v4);
                v15 = *v13;
                v28 = 0;
                v23 = &v28;
                sub_20BF64D74(v14, v15, &v23);
                v16 = *(_QWORD *)v5[1];
                sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v16 + 40 * v4), v17, v18);
                v19 = *(_QWORD *)(v16 + 40 * v4);
                if (v19)
                {
                  v20 = *(_DWORD **)(v16 + 40 * v4 + 32);
                  v21 = (int *)v13[4];
                  do
                  {
                    v22 = *v21++;
                    *v20++ = v22;
                    --v19;
                  }
                  while (v19);
                }
              }
            }
            result = (_QWORD *)sub_20BF4C2D8((uint64_t)&v29);
          }
        }
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_20C6536D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C653720(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53F618;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53F618;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C653AC0(*((_QWORD ***)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C653AC0(*((_QWORD ***)this + 4), v6, v4);
  return 0;
}

void sub_20C653AC0(_QWORD **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  char *v15;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  if (a2 < a3)
  {
    v4 = a2;
    v6 = *a1;
    do
    {
      v7 = v6[4];
      v8 = (unsigned int *)(v7 + 12 * v4);
      if ((v8[1] & 0x80000000) != 0)
      {
        if (*(float *)(v7 + 12 * v4 + 8) != 0.0)
        {
          v10 = v6[7];
          if (0xCCCCCCCCCCCCCCCDLL * ((v6[8] - v10) >> 3) > *v8)
            goto LABEL_10;
          v15 = "usdSkel/blendShapeQuery.cpp";
          v16 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"operator()";
          v17 = 215;
          v18 = (unint64_t)"auto pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapePointOff"
                                  "sets()::(anonymous class)::operator()(size_t, size_t) const";
          v19 = 0;
          if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "shape.GetBlendShapeIndex() < _blendShapes.size()", 0))
          {
            v10 = v6[7];
LABEL_10:
            v11 = (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)(v10 + 40 * *v8);
            v12 = *((_QWORD *)v11 + 1);
            if (v12
              && (*(_BYTE *)(v12 + 57) & 8) == 0
              && (*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *))(*(_QWORD *)v11 + 32))(v11))
            {
              pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetOffsetsAttr(v11, (uint64_t)&v15);
              pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((uint64_t)&v15, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(*a1[1] + 40 * v4));
              if ((v18 & 7) != 0)
              {
                v13 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
                do
                  v14 = __ldxr(v13);
                while (__stlxr(v14 - 2, v13));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
              sub_20BFD265C(&v17);
              if (v16)
                sub_20C35C614(v16);
            }
          }
        }
      }
      else
      {
        v9 = v6[10];
        if (v8[1] >= (unint64_t)((v6[11] - v9) >> 5))
        {
          v15 = "usdSkel/blendShapeQuery.cpp";
          v16 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"operator()";
          v17 = 208;
          v18 = (unint64_t)"auto pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapePointOff"
                                  "sets()::(anonymous class)::operator()(size_t, size_t) const";
          v19 = 0;
          if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "static_cast<size_t>(shape.GetInbetweenIndex()) < _inbetweens.size()", 0))goto LABEL_7;
          v9 = v6[10];
        }
        pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetOffsets(v9 + 32 * (int)v8[1], (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(*a1[1] + 40 * v4));
      }
LABEL_7:
      ++v4;
    }
    while (v4 != a3);
  }
}

void sub_20C653CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C372B54((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C653D00(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C53F660;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C53F660;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C6540A0(*((_QWORD ***)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C6540A0(*((_QWORD ***)this + 4), v6, v4);
  return 0;
}

void sub_20C6540A0(_QWORD **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  char *v15;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  if (a2 < a3)
  {
    v4 = a2;
    v6 = *a1;
    do
    {
      v7 = v6[4];
      v8 = (unsigned int *)(v7 + 12 * v4);
      if ((v8[1] & 0x80000000) != 0)
      {
        if (*(float *)(v7 + 12 * v4 + 8) != 0.0)
        {
          v10 = v6[7];
          if (0xCCCCCCCCCCCCCCCDLL * ((v6[8] - v10) >> 3) > *v8)
            goto LABEL_10;
          v15 = "usdSkel/blendShapeQuery.cpp";
          v16 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"operator()";
          v17 = 250;
          v18 = (unint64_t)"auto pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeNormalOf"
                                  "fsets()::(anonymous class)::operator()(size_t, size_t) const";
          v19 = 0;
          if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "shape.GetBlendShapeIndex() < _blendShapes.size()", 0))
          {
            v10 = v6[7];
LABEL_10:
            v11 = (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)(v10 + 40 * *v8);
            v12 = *((_QWORD *)v11 + 1);
            if (v12
              && (*(_BYTE *)(v12 + 57) & 8) == 0
              && (*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *))(*(_QWORD *)v11 + 32))(v11))
            {
              pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetNormalOffsetsAttr(v11, (uint64_t)&v15);
              pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((uint64_t)&v15, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(*a1[1] + 40 * v4));
              if ((v18 & 7) != 0)
              {
                v13 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
                do
                  v14 = __ldxr(v13);
                while (__stlxr(v14 - 2, v13));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
              sub_20BFD265C(&v17);
              if (v16)
                sub_20C35C614(v16);
            }
          }
        }
      }
      else
      {
        v9 = v6[10];
        if (v8[1] >= (unint64_t)((v6[11] - v9) >> 5))
        {
          v15 = "usdSkel/blendShapeQuery.cpp";
          v16 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"operator()";
          v17 = 243;
          v18 = (unint64_t)"auto pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeNormalOf"
                                  "fsets()::(anonymous class)::operator()(size_t, size_t) const";
          v19 = 0;
          if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "static_cast<size_t>(shape.GetInbetweenIndex()) < _inbetweens.size()", 0))goto LABEL_7;
          v9 = v6[10];
        }
        pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetNormalOffsets((pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)(v9 + 32 * (int)v8[1]), (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(*a1[1] + 40 * v4));
      }
LABEL_7:
      ++v4;
    }
    while (v4 != a3);
  }
}

void sub_20C6542C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C372B54((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C6542D8(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  _QWORD v18[4];
  char v19;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(int **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_20BF5640C(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 4 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<float>::emplace_back(Args &&...) [T = float, Args = <const float &>]";
  v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v17 = 4;
    else
      v17 = 3;
  }
  else
  {
    v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

void sub_20C65443C(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  _QWORD v18[4];
  char v19;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(int **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_20BF643D4(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 4 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::emplace_back(Args &&...) [T = unsigned int, Arg"
           "s = <unsigned int>]";
  v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v17 = 4;
    else
      v17 = 3;
  }
  else
  {
    v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

void sub_20C6545A0(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  _QWORD v18[4];
  char v19;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(int **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_20BF5640C(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 4 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<float>::emplace_back(Args &&...) [T = float, Args = <float>]";
  v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v17 = 4;
    else
      v17 = 3;
  }
  else
  {
    v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

uint64_t sub_20C65470C(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v25[16];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v4 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 > 1)
      goto LABEL_12;
    if (v7 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v8 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(_QWORD *)v8 = &unk_24C520F68;
        __dmb(0xBu);
        v8[8] = 0;
        *((_QWORD *)this - 4) = v8;
        *((_QWORD *)v8 - 3) = 2;
        v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &off_24C53F6A8;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v10;
        *(_QWORD *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        v11 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v11;
        *(_QWORD *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(_BYTE *)(v9 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v9 - 40))(*(_QWORD *)(v9 - 40), v9, v9 - 8);
        v5 = *((_QWORD *)this + 3);
        v6 = *((_QWORD *)this + 1) - *((_QWORD *)this + 2);
        if (v5 >= v6)
          break;
        v12 = *((_QWORD *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v25 = 0x10000;
    v26 = *v4;
    v27 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v25, *((unsigned __int8 *)this + 52));
      v13 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0)
        break;
      v16 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v16;
      v15 = v25[2];
      if (v25[2] < 2u)
      {
        v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((_QWORD *)&v26 + 3 * v25[0] + 2) < *((_QWORD *)&v26 + 3 * v25[0]) - *((_QWORD *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v17 = v25[1];
      v18 = v25[v25[1] + 3];
      v19 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(_QWORD *)v19 = &unk_24C520F68;
      __dmb(0xBu);
      v19[8] = 0;
      *((_QWORD *)this - 4) = v19;
      *((_QWORD *)v19 - 3) = 2;
      v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      v21 = (char *)&v26 + 24 * v17;
      *(_BYTE *)(v20 - 11) = 1;
      *(_QWORD *)v20 = &off_24C53F6A8;
      v22 = *(_OWORD *)v21;
      *(_QWORD *)(v20 + 24) = *((_QWORD *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(_QWORD *)(v20 + 32) = *((_QWORD *)this + 4);
      v23 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v23;
      *(_QWORD *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(_BYTE *)(v20 + 52) = *((_BYTE *)this + 52) - v18;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v20 - 40))(*(_QWORD *)(v20 - 40), v20, v20 - 8);
      v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v14 = v25[0];
LABEL_22:
    sub_20C654AAC((uint64_t)this, (_QWORD *)&v26 + 3 * v14);
    v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C654AAC((uint64_t)this, (_QWORD *)this + 1);
  return 0;
}

void sub_20C654AAC(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD **v4;
  uint64_t v5;

  v2 = a2[1];
  v3 = *a2 - v2;
  if (*a2 > v2)
  {
    v4 = *(_QWORD ***)(a1 + 32);
    v5 = 12 * v2;
    do
    {
      sub_20BF10F48((float32x2_t *)(**v4 + v5), 1.0e-10);
      v5 += 12;
      --v3;
    }
    while (v3);
  }
}

_QWORD *sub_20C654B14(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDE3738(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20C654B78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdSkelCache::UsdSkelCache(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this)
{
  char *v2;
  _OWORD *v3;
  uint64_t i;
  _OWORD *v5;
  uint64_t j;
  _OWORD *v7;
  uint64_t k;
  _OWORD *v9;
  uint64_t m;

  v2 = (char *)operator new(0x928uLL);
  v3 = v2 + 528;
  for (i = 536; i != 584; i += 24)
    *(_QWORD *)&v2[i] = 0;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  __dmb(0xBu);
  *(_QWORD *)v2 = 0;
  __dmb(0xBu);
  *((_QWORD *)v2 + 65) = 0;
  *v3 = 0u;
  *((_OWORD *)v2 + 34) = 0u;
  *((_OWORD *)v2 + 35) = 0u;
  *((_QWORD *)v2 + 1) = v3;
  __dmb(0xBu);
  v5 = v2 + 1112;
  *(_QWORD *)v2 = 1;
  for (j = 1120; j != 1168; j += 24)
    *(_QWORD *)&v2[j] = 0;
  *((_OWORD *)v2 + 68) = 0u;
  *((_OWORD *)v2 + 67) = 0u;
  *((_OWORD *)v2 + 66) = 0u;
  *((_OWORD *)v2 + 65) = 0u;
  *((_OWORD *)v2 + 63) = 0u;
  *((_OWORD *)v2 + 64) = 0u;
  *((_OWORD *)v2 + 61) = 0u;
  *((_OWORD *)v2 + 62) = 0u;
  *((_OWORD *)v2 + 59) = 0u;
  *((_OWORD *)v2 + 60) = 0u;
  *((_OWORD *)v2 + 57) = 0u;
  *((_OWORD *)v2 + 58) = 0u;
  *((_OWORD *)v2 + 55) = 0u;
  *((_OWORD *)v2 + 56) = 0u;
  *((_OWORD *)v2 + 53) = 0u;
  *((_OWORD *)v2 + 54) = 0u;
  *((_OWORD *)v2 + 51) = 0u;
  *((_OWORD *)v2 + 52) = 0u;
  *((_OWORD *)v2 + 49) = 0u;
  *((_OWORD *)v2 + 50) = 0u;
  *((_OWORD *)v2 + 47) = 0u;
  *((_OWORD *)v2 + 48) = 0u;
  *((_OWORD *)v2 + 45) = 0u;
  *((_OWORD *)v2 + 46) = 0u;
  *((_OWORD *)v2 + 43) = 0u;
  *((_OWORD *)v2 + 44) = 0u;
  *((_OWORD *)v2 + 41) = 0u;
  *((_OWORD *)v2 + 42) = 0u;
  *((_OWORD *)v2 + 39) = 0u;
  *((_OWORD *)v2 + 40) = 0u;
  *((_OWORD *)v2 + 37) = 0u;
  *((_OWORD *)v2 + 38) = 0u;
  __dmb(0xBu);
  *((_QWORD *)v2 + 73) = 0;
  __dmb(0xBu);
  *((_QWORD *)v2 + 138) = 0;
  *v5 = 0u;
  *(_OWORD *)(v2 + 1128) = 0u;
  *(_OWORD *)(v2 + 1144) = 0u;
  *((_QWORD *)v2 + 74) = v5;
  __dmb(0xBu);
  v7 = v2 + 1696;
  *((_QWORD *)v2 + 73) = 1;
  for (k = 1704; k != 1752; k += 24)
    *(_QWORD *)&v2[k] = 0;
  *(_OWORD *)(v2 + 1416) = 0u;
  *(_OWORD *)(v2 + 1400) = 0u;
  *(_OWORD *)(v2 + 1384) = 0u;
  *(_OWORD *)(v2 + 1368) = 0u;
  *(_OWORD *)(v2 + 1352) = 0u;
  *(_OWORD *)(v2 + 1336) = 0u;
  *(_OWORD *)(v2 + 1320) = 0u;
  *(_OWORD *)(v2 + 1304) = 0u;
  *(_OWORD *)(v2 + 1288) = 0u;
  *(_OWORD *)(v2 + 1272) = 0u;
  *(_OWORD *)(v2 + 1256) = 0u;
  *(_OWORD *)(v2 + 1240) = 0u;
  *(_OWORD *)(v2 + 1224) = 0u;
  *(_OWORD *)(v2 + 1208) = 0u;
  *(_OWORD *)(v2 + 1192) = 0u;
  *(_OWORD *)(v2 + 1176) = 0u;
  *(_OWORD *)(v2 + 1656) = 0u;
  *(_OWORD *)(v2 + 1672) = 0u;
  *(_OWORD *)(v2 + 1624) = 0u;
  *(_OWORD *)(v2 + 1640) = 0u;
  *(_OWORD *)(v2 + 1592) = 0u;
  *(_OWORD *)(v2 + 1608) = 0u;
  *(_OWORD *)(v2 + 1560) = 0u;
  *(_OWORD *)(v2 + 1576) = 0u;
  *(_OWORD *)(v2 + 1528) = 0u;
  *(_OWORD *)(v2 + 1544) = 0u;
  *(_OWORD *)(v2 + 1496) = 0u;
  *(_OWORD *)(v2 + 1512) = 0u;
  *(_OWORD *)(v2 + 1464) = 0u;
  *(_OWORD *)(v2 + 1480) = 0u;
  *(_OWORD *)(v2 + 1432) = 0u;
  *(_OWORD *)(v2 + 1448) = 0u;
  __dmb(0xBu);
  *((_QWORD *)v2 + 146) = 0;
  __dmb(0xBu);
  *((_QWORD *)v2 + 211) = 0;
  *v7 = 0u;
  *((_OWORD *)v2 + 107) = 0u;
  *((_OWORD *)v2 + 108) = 0u;
  *((_QWORD *)v2 + 147) = v7;
  __dmb(0xBu);
  v9 = v2 + 2280;
  *((_QWORD *)v2 + 146) = 1;
  for (m = 2288; m != 2336; m += 24)
    *(_QWORD *)&v2[m] = 0;
  *((_OWORD *)v2 + 141) = 0u;
  *((_OWORD *)v2 + 140) = 0u;
  *((_OWORD *)v2 + 139) = 0u;
  *((_OWORD *)v2 + 138) = 0u;
  *((_OWORD *)v2 + 137) = 0u;
  *((_OWORD *)v2 + 136) = 0u;
  *((_OWORD *)v2 + 135) = 0u;
  *((_OWORD *)v2 + 134) = 0u;
  *((_OWORD *)v2 + 133) = 0u;
  *((_OWORD *)v2 + 132) = 0u;
  *((_OWORD *)v2 + 131) = 0u;
  *((_OWORD *)v2 + 130) = 0u;
  *((_OWORD *)v2 + 129) = 0u;
  *((_OWORD *)v2 + 128) = 0u;
  *((_OWORD *)v2 + 127) = 0u;
  *((_OWORD *)v2 + 126) = 0u;
  *((_OWORD *)v2 + 125) = 0u;
  *((_OWORD *)v2 + 124) = 0u;
  *((_OWORD *)v2 + 123) = 0u;
  *((_OWORD *)v2 + 122) = 0u;
  *((_OWORD *)v2 + 121) = 0u;
  *((_OWORD *)v2 + 120) = 0u;
  *((_OWORD *)v2 + 119) = 0u;
  *((_OWORD *)v2 + 118) = 0u;
  *((_OWORD *)v2 + 117) = 0u;
  *((_OWORD *)v2 + 116) = 0u;
  *((_OWORD *)v2 + 115) = 0u;
  *((_OWORD *)v2 + 114) = 0u;
  *((_OWORD *)v2 + 113) = 0u;
  *((_OWORD *)v2 + 112) = 0u;
  *((_OWORD *)v2 + 111) = 0u;
  *((_OWORD *)v2 + 110) = 0u;
  __dmb(0xBu);
  *((_QWORD *)v2 + 219) = 0;
  __dmb(0xBu);
  *((_QWORD *)v2 + 284) = 0;
  *v9 = 0u;
  *(_OWORD *)(v2 + 2296) = 0u;
  *(_OWORD *)(v2 + 2312) = 0u;
  *((_QWORD *)v2 + 220) = v9;
  __dmb(0xBu);
  *((_QWORD *)v2 + 219) = 1;
  __dmb(0xBu);
  *((_QWORD *)v2 + 292) = 0;
  return sub_20C656B54(this, (uint64_t)v2);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::UsdSkelCache::Clear(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this)
{
  unint64_t *v2;
  uint64_t v3;

  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::WriteScope::WriteScope((uint64_t)&v2, *(_QWORD *)this);
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::WriteScope::Clear(&v2);
  return sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&v3);
}

void sub_20C654EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)va);
  _Unwind_Resume(a1);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetAnimQuery@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  _BYTE v8[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::ReadScope((uint64_t)&v13, *(_QWORD *)this);
  sub_20C35C4F8((uint64_t)v8, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateAnimQuery(&v13, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v8, a3);
  if ((v12 & 7) != 0)
  {
    v5 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  if (v9)
    sub_20C35C614(v9);
  return sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&v14);
}

void sub_20C654F68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20C35C2E0((uint64_t)va);
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)va1);
  _Unwind_Resume(a1);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetAnimQuery@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;

  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::ReadScope((uint64_t)&v6, *(_QWORD *)this);
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateAnimQuery(&v6, a2, a3);
  return sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&v7);
}

void sub_20C654FE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)(v1 + 8));
  _Unwind_Resume(a1);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  _BYTE v8[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  int v10;
  int v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;

  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::ReadScope((uint64_t)v13, *(_QWORD *)this);
  sub_20C35C4F8((uint64_t)v8, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateSkelQuery((pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *)v13, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v8, a3);
  if ((v12 & 7) != 0)
  {
    v5 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  if (v9)
    sub_20C35C614(v9);
  return sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&v14);
}

void sub_20C6550A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20C35C2E0((uint64_t)va);
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelCache::Populate(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  _BYTE v9[8];
  uint64_t v10;

  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::ReadScope((uint64_t)v9, *a1);
  v7 = *a3;
  v8 = *((_QWORD *)a3 + 2);
  v5 = pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::Populate((pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *)v9, a2, &v7);
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&v10);
  return v5;
}

void sub_20C655138(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)(v1 + 8));
  _Unwind_Resume(a1);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkinningQuery@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *a3@<X8>)
{
  _BYTE v6[8];
  uint64_t v7;

  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::ReadScope((uint64_t)v6, *(_QWORD *)this);
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::GetSkinningQuery((pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *)v6, a2, a3);
  return sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&v7);
}

void sub_20C6551A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings(pxrInternal__aapl__pxrReserved__::UsdSkelCache *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t *v5;
  const char *Text;
  const char *v11;
  char *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v16;
  unsigned int *v17;
  unsigned int v18;
  _BOOL4 v19;
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable *v20;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v22;
  uint64_t *SchemaInfo;
  char *v24;
  char IsA;
  unsigned int *v26;
  unsigned int v27;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v28;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v29;
  void (**v30)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *);
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  const char *v35;
  const char *v36;
  const char *v37;
  char *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v47;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v48;
  pxrInternal__aapl__pxrReserved__ *v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v55;
  const char *v56;
  const char *v57;
  const char *v58;
  char *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t **v65;
  uint64_t **v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t *v70;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v71;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v72;
  const char *v73;
  const char *v74;
  char *v75;
  uint64_t **v77;
  unint64_t v78;
  const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v79;
  __int128 *v80;
  uint64_t *v81;
  uint64_t **v82;
  BOOL v83;
  int v84;
  int v85;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase **v92;
  pxrInternal__aapl__pxrReserved__ *v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t *v97;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v98;
  int v99;
  int v100;
  uint64_t v101;
  int v102;
  int v103;
  void (**v104)(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *__hidden);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v105;
  int v106;
  int v107;
  _QWORD v108[4];
  _QWORD v109[2];
  uint64_t v110;
  int v111;
  char v112;
  char v113;
  uint64_t v114[2];
  int v115;
  int v116[8];
  char v117;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v118;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v119;
  unint64_t v120;
  uint64_t **v121;
  uint64_t *v122;
  unint64_t v123;

  v5 = (uint64_t *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4
    && (*(_BYTE *)(v4 + 57) & 8) == 0
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) & 1) != 0)
  {
    if (a3)
    {
      if (sub_20C624E4C(0))
      {
        sub_20C35C4F8((uint64_t)&v92, v5, (_DWORD *)(a2 + 16));
        sub_20C348EEC((uint64_t)&v92, (int *)v114);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v114);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache] Compute skel bindings for <%s>\n", v11, v12, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v114 + 1);
        sub_20BFD265C(v114);
        if ((v95 & 7) != 0)
        {
          v13 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
          do
            v14 = __ldxr(v13);
          while (__stlxr(v14 - 2, v13));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v94 + 1);
        sub_20BFD265C(&v94);
        if (v93)
          sub_20C35C614(v93);
      }
      v15 = *(_QWORD *)a3;
      v16 = *(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton **)(a3 + 8);
      if (v16 != *(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton **)a3)
      {
        do
        {
          v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)((char *)v16 - 64);
          sub_20C6499E8(a3 + 16, v16);
        }
        while (v16 != (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v15);
      }
      *(_QWORD *)(a3 + 8) = v15;
      v122 = 0;
      v123 = 0;
      v121 = &v122;
      sub_20C656CF0(&v118, 1uLL);
      sub_20C35C4F8((uint64_t)&v92, v5, (_DWORD *)(a2 + 16));
      sub_20C37F5FC((uint64_t)v114, (uint64_t)&v92, a4);
      v117 = 1;
      if ((v95 & 7) != 0)
      {
        v17 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v94 + 1);
      sub_20BFD265C(&v94);
      if (v93)
        sub_20C35C614(v93);
      sub_20C37ECB8(v114, (uint64_t)v109);
      while (1)
      {
        v92 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)v114[1];
        v93 = (pxrInternal__aapl__pxrReserved__ *)v114;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v94);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v94 + 1);
        LODWORD(v95) = 0;
        WORD2(v95) = 0;
        if ((pxrInternal__aapl__pxrReserved__ *)v109[1] == v93
          && (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)v109[0] == v92)
        {
          v19 = 1;
          if (v110 == v94 && !v111 && !v112)
            v19 = v113 != 0;
        }
        else
        {
          v19 = 1;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v94 + 1);
        sub_20BFD265C(&v94);
        if (!v19)
          break;
        sub_20C37EEF4((uint64_t)v109, (uint64_t)&v92);
        StaticTfType = pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(v20);
        SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v22);
        IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v92, SchemaInfo, v24);
        if ((v95 & 7) != 0)
        {
          v26 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
          do
            v27 = __ldxr(v26);
          while (__stlxr(v27 - 2, v26));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v94 + 1);
        sub_20BFD265C(&v94);
        if (v93)
          sub_20C35C614(v93);
        if ((IsA & 1) != 0)
        {
          if (v113)
          {
            v28 = v119;
            if (v118 == v119)
            {
              v92 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)"usdSkel/cache.cpp";
              v93 = (pxrInternal__aapl__pxrReserved__ *)"ComputeSkelBindings";
              v94 = 159;
              v95 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings(const Usd"
                                      "SkelRoot &, std::vector<UsdSkelBinding> *, Usd_PrimFlagsPredicate) const";
              v96 = 0;
              if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v92, "!skelStack.empty()", 0))
              {
                sub_20C37ED50((uint64_t)v109);
                goto LABEL_131;
              }
              v28 = v119;
            }
            v30 = (void (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))*((_QWORD *)v28 - 3);
            v29 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v28 - 24);
            (*v30)(v29);
            v119 = v29;
          }
          else
          {
            sub_20C37ED84((uint64_t)v109, (uint64_t)&v92);
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v108, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v92);
            v108[3] = 0;
            v108[0] = off_24C53F490;
            if ((v95 & 7) != 0)
            {
              v31 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
              do
                v32 = __ldxr(v31);
              while (__stlxr(v32 - 2, v31));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v94 + 1);
            sub_20BFD265C(&v94);
            if (v93)
              sub_20C35C614(v93);
            LODWORD(v92) = 1;
            v93 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v94);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v94 + 1);
            v95 = 0;
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v104, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v92);
            v104 = off_24C53F7D0;
            if ((v95 & 7) != 0)
            {
              v33 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
              do
                v34 = __ldxr(v33);
              while (__stlxr(v34 - 2, v33));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v94 + 1);
            sub_20BFD265C(&v94);
            if (v93)
              sub_20C35C614(v93);
            if ((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v108, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v104) & 1) != 0)
            {
              if (sub_20C624E4C(0))
              {
                sub_20C37EEF4((uint64_t)v109, (uint64_t)&v92);
                sub_20C348EEC((uint64_t)&v92, &v84);
                v35 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v84);
                sub_20C35C4F8((uint64_t)&v97, (uint64_t *)&v105, &v106);
                sub_20C348EEC((uint64_t)&v97, &v102);
                v36 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v102);
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache]  Found skel binding at <%s> which targets skel <%s>.\n", v37, v38, v35, v36);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v103);
                sub_20BFD265C(&v102);
                if ((v101 & 7) != 0)
                {
                  v39 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v40 = __ldxr(v39);
                  while (__stlxr(v40 - 2, v39));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v100);
                sub_20BFD265C(&v99);
                if (v98)
                  sub_20C35C614(v98);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v85);
                sub_20BFD265C(&v84);
                if ((v95 & 7) != 0)
                {
                  v41 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v42 = __ldxr(v41);
                  while (__stlxr(v42 - 2, v41));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v94 + 1);
                sub_20BFD265C(&v94);
                if (v93)
                  sub_20C35C614(v93);
              }
            }
            else
            {
              v43 = v119;
              v44 = *((_QWORD *)v119 - 2);
              if (v44)
              {
                v45 = (unint64_t *)(v44 + 48);
                do
                  v46 = __ldxr(v45);
                while (__stxr(v46 + 1, v45));
              }
              v47 = v105;
              v105 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v44;
              if (v47)
                sub_20C35C614(v47);
              sub_20C01A074(&v106, (_DWORD *)v43 - 2);
              sub_20C01A0C8(&v107, (_DWORD *)v43 - 1);
            }
            if (v105
              && (*((_BYTE *)v105 + 57) & 8) == 0
              && ((unsigned int (*)(pxrInternal__aapl__pxrReserved__::UsdTyped *))v104[4])((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v104))
            {
              sub_20C35C4F8((uint64_t)&v92, (uint64_t *)&v105, &v106);
              v49 = v93;
              if (!v93 || (v50 = *((_QWORD *)v93 + 7), (v50 & 0x800) != 0))
              {
                pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v93, v48);
                v50 = *((_QWORD *)v49 + 7);
              }
              if ((v95 & 7) != 0)
              {
                v51 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
                do
                  v52 = __ldxr(v51);
                while (__stlxr(v52 - 2, v51));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v94 + 1);
              sub_20BFD265C(&v94);
              if (v93)
                sub_20C35C614(v93);
              if ((v50 & 1) != 0)
              {
                sub_20C37ED84((uint64_t)v109, (uint64_t)&v97);
                pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkinningQuery(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v97, (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)&v92);
                if ((v101 & 7) != 0)
                {
                  v53 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v54 = __ldxr(v53);
                  while (__stlxr(v54 - 2, v53));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v100);
                sub_20BFD265C(&v99);
                if (v98)
                  sub_20C35C614(v98);
                if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v92, v55))
                {
                  if (sub_20C624E4C(0))
                  {
                    sub_20C37EEF4((uint64_t)v109, (uint64_t)&v97);
                    sub_20C348EEC((uint64_t)&v97, &v102);
                    v56 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v102);
                    sub_20C35C4F8((uint64_t)&v84, (uint64_t *)&v105, &v106);
                    sub_20C348EEC((uint64_t)&v84, &v90);
                    v57 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v90);
                    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache]  Found skinnable prim <%s>, bound to skel <%s>.\n", v58, v59, v56, v57);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v91);
                    sub_20BFD265C(&v90);
                    if ((v89 & 7) != 0)
                    {
                      v60 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v61 = __ldxr(v60);
                      while (__stlxr(v61 - 2, v60));
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v88);
                    sub_20BFD265C(&v87);
                    if (v86)
                      sub_20C35C614(v86);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v103);
                    sub_20BFD265C(&v102);
                    if ((v101 & 7) != 0)
                    {
                      v62 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v63 = __ldxr(v62);
                      while (__stlxr(v63 - 2, v62));
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v100);
                    sub_20BFD265C(&v99);
                    if (v98)
                      sub_20C35C614(v98);
                  }
                  v64 = v122;
                  v65 = &v122;
                  v66 = &v122;
                  if (!v122)
                    goto LABEL_102;
                  v65 = &v122;
                  while (1)
                  {
                    while (1)
                    {
                      v66 = (uint64_t **)v64;
                      v67 = (uint64_t)(v64 + 4);
                      if (!sub_20C656E98((uint64_t)&v104, (uint64_t)(v64 + 4)))
                        break;
                      v64 = *v66;
                      v65 = v66;
                      if (!*v66)
                        goto LABEL_102;
                    }
                    if (!sub_20C656E98(v67, (uint64_t)&v104))
                      break;
                    v65 = v66 + 1;
                    v64 = v66[1];
                    if (!v64)
                      goto LABEL_102;
                  }
                  v68 = *v65;
                  if (!*v65)
                  {
LABEL_102:
                    v69 = operator new(0x60uLL);
                    v97 = v69;
                    v98 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v122;
                    LOBYTE(v99) = 0;
                    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v69 + 4), (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v104);
                    v69[4] = off_24C53F7D0;
                    v69[11] = 0;
                    *(_OWORD *)(v69 + 9) = 0u;
                    *(_OWORD *)(v69 + 7) = 0u;
                    LOBYTE(v99) = 1;
                    v70 = v97;
                    *v97 = 0;
                    v70[1] = 0;
                    v70[2] = (uint64_t)v66;
                    *v65 = v70;
                    if (*v121)
                    {
                      v121 = (uint64_t **)*v121;
                      v70 = *v65;
                    }
                    sub_20BDDE208(v122, v70);
                    ++v123;
                    v68 = v97;
                    v97 = 0;
                    sub_20C656F9C((uint64_t *)&v97, 0);
                  }
                  sub_20C656FE0((uint64_t)(v68 + 7), (uint64_t)&v92);
                  pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v109);
                }
                sub_20C625CE0((uint64_t)&v92);
              }
            }
            v71 = v119;
            if ((unint64_t)v119 >= v120)
            {
              v72 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_20C657288((uint64_t *)&v118, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v104);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v119, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v104);
              *(_QWORD *)v71 = off_24C53F7D0;
              v72 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v71 + 24);
            }
            v119 = v72;
            pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v104);
            pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::~UsdSkelBindingAPI((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v108);
          }
        }
        else if (!v113)
        {
          if (sub_20C624E4C(0))
          {
            sub_20C37EEF4((uint64_t)v109, (uint64_t)&v92);
            sub_20C348EEC((uint64_t)&v92, (int *)v108);
            v73 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v108);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache]  Pruning traversal at <%s> (prim is not UsdGeomImageable)\n", v74, v75, v73);
            sub_20BFD1A18(v108);
            sub_20C37EFCC((uint64_t)&v92);
          }
          pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v109);
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)v109);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v110 + 1);
      sub_20BFD265C(&v110);
      sub_20C655EEC((uint64_t *)a3, v123);
      v77 = v121;
      if (v121 != &v122)
      {
        v78 = *(_QWORD *)(a3 + 8);
        do
        {
          v79 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v77 + 4);
          v80 = (__int128 *)(v77 + 7);
          if (v78 >= *(_QWORD *)(a3 + 16))
          {
            v78 = sub_20C6575C4((uint64_t *)a3, v79, v80);
          }
          else
          {
            sub_20C657538(a3, v79, v80);
            v78 += 64;
          }
          *(_QWORD *)(a3 + 8) = v78;
          v81 = v77[1];
          if (v81)
          {
            do
            {
              v82 = (uint64_t **)v81;
              v81 = (uint64_t *)*v81;
            }
            while (v81);
          }
          else
          {
            do
            {
              v82 = (uint64_t **)v77[2];
              v83 = *v82 == (uint64_t *)v77;
              v77 = v82;
            }
            while (!v83);
          }
          v77 = v82;
        }
        while (v82 != &v122);
      }
LABEL_131:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v116);
      a3 = !v19;
      sub_20BFD265C(&v115);
      v92 = &v118;
      sub_20C599B38((void ***)&v92);
      sub_20C656C84(v122);
    }
    else
    {
      v92 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)"usdSkel/cache.cpp";
      v93 = (pxrInternal__aapl__pxrReserved__ *)"ComputeSkelBindings";
      v94 = 121;
      v95 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings(const UsdSkelRoot"
                              " &, std::vector<UsdSkelBinding> *, Usd_PrimFlagsPredicate) const";
      v96 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v92, 1, (pxrInternal__aapl__pxrReserved__ *)"'bindings' pointer is null.");
    }
  }
  else
  {
    v92 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)"usdSkel/cache.cpp";
    v93 = (pxrInternal__aapl__pxrReserved__ *)"ComputeSkelBindings";
    v94 = 116;
    v95 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings(const UsdSkelRoot &"
                            ", std::vector<UsdSkelBinding> *, Usd_PrimFlagsPredicate) const";
    v96 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v92, 1, (pxrInternal__aapl__pxrReserved__ *)"'skelRoot' is invalid.");
    return 0;
  }
  return a3;
}

void sub_20C655CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  uint64_t v29;

  sub_20C37EFCC((uint64_t)&a29);
  sub_20C37ED50(v29 - 224);
  sub_20C37EDFC(v29 - 192);
  a29 = (void **)(v29 - 136);
  sub_20C599B38(&a29);
  sub_20C656C84(*(_QWORD **)(v29 - 104));
  _Unwind_Resume(a1);
}

void **sub_20C655EEC(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20C00D6F0((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 64 * v6;
    sub_20C6574C4(a1, v7);
    return sub_20C64A498(v7);
  }
  return result;
}

void sub_20C655F68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C64A498((void **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBinding(pxrInternal__aapl__pxrReserved__::UsdSkelCache *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _BOOL4 v15;
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable *v16;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v18;
  uint64_t *SchemaInfo;
  char *v20;
  char IsA;
  unsigned int *v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v24;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v25;
  void (**v26)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *);
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  const char *Text;
  const char *v32;
  const char *v33;
  char *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v43;
  _BOOL4 v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v51;
  const char *v52;
  const char *v53;
  char *v54;
  unsigned int *v55;
  unsigned int v56;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v57;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v58;
  const char *v59;
  const char *v60;
  char *v61;
  unint64_t *v63;
  unint64_t v64;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v65;
  unint64_t *v66;
  unint64_t v67;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v68;
  __int128 v69;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase **v70;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  void (**v84)(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *__hidden);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v85;
  int v86;
  int v87;
  _QWORD v88[4];
  _QWORD v89[2];
  uint64_t v90;
  int v91;
  char v92;
  char v93;
  uint64_t v94[2];
  int v95;
  _DWORD v96[8];
  char v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v101;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v102;
  unint64_t v103;

  v6 = (uint64_t *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (!v5
    || (*(_BYTE *)(v5 + 57) & 8) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) & 1) == 0)
  {
    v70 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)"usdSkel/cache.cpp";
    v71 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"ComputeSkelBinding";
    v72 = 215;
    *(_QWORD *)&v73 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBinding(const UsdSkelRoot &, const"
                      " UsdSkelSkeleton &, UsdSkelBinding *, Usd_PrimFlagsPredicate) const";
    BYTE8(v73) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v70, 1, (pxrInternal__aapl__pxrReserved__ *)"'skelRoot' is invalid.");
    return 0;
  }
  v12 = *((_QWORD *)a3 + 1);
  if (!v12
    || (*(_BYTE *)(v12 + 57) & 8) != 0
    || ((*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))(*(_QWORD *)a3 + 32))(a3) & 1) == 0)
  {
    v70 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)"usdSkel/cache.cpp";
    v71 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"ComputeSkelBinding";
    v72 = 220;
    *(_QWORD *)&v73 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBinding(const UsdSkelRoot &, const"
                      " UsdSkelSkeleton &, UsdSkelBinding *, Usd_PrimFlagsPredicate) const";
    BYTE8(v73) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v70, 1, (pxrInternal__aapl__pxrReserved__ *)"'skel' is invalid.");
    return 0;
  }
  if (a4)
  {
    sub_20C656CF0(&v101, 1uLL);
    v100 = 0;
    v98 = 0u;
    v99 = 0u;
    sub_20C35C4F8((uint64_t)&v70, v6, (_DWORD *)(a2 + 16));
    sub_20C37F5FC((uint64_t)v94, (uint64_t)&v70, a5);
    v97 = 1;
    if ((v73 & 7) != 0)
    {
      v13 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v72 + 1);
    sub_20BFD265C(&v72);
    if (v71)
      sub_20C35C614(v71);
    sub_20C37ECB8(v94, (uint64_t)v89);
    while (1)
    {
      v70 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)v94[1];
      v71 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v94;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v72);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v72 + 1);
      LODWORD(v73) = 0;
      WORD2(v73) = 0;
      if ((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v89[1] == v71
        && (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)v89[0] == v70)
      {
        v15 = 1;
        if (v90 == v72 && !v91 && !v92)
          v15 = v93 != 0;
      }
      else
      {
        v15 = 1;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v72 + 1);
      sub_20BFD265C(&v72);
      if (!v15)
        break;
      sub_20C37EEF4((uint64_t)v89, (uint64_t)&v70);
      StaticTfType = pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(v16);
      SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v18);
      IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v70, SchemaInfo, v20);
      if ((v73 & 7) != 0)
      {
        v22 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v72 + 1);
      sub_20BFD265C(&v72);
      if (v71)
        sub_20C35C614(v71);
      if ((IsA & 1) != 0)
      {
        if (v93)
        {
          v24 = v102;
          if (v101 == v102)
          {
            v70 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)"usdSkel/cache.cpp";
            v71 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"ComputeSkelBinding";
            v72 = 254;
            *(_QWORD *)&v73 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBinding(const UsdSkelRoot "
                              "&, const UsdSkelSkeleton &, UsdSkelBinding *, Usd_PrimFlagsPredicate) const";
            BYTE8(v73) = 0;
            if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v70, "!skelStack.empty()", 0))
            {
              sub_20C37ED50((uint64_t)v89);
              goto LABEL_116;
            }
            v24 = v102;
          }
          v26 = (void (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))*((_QWORD *)v24 - 3);
          v25 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v24 - 24);
          (*v26)(v25);
          v102 = v25;
        }
        else
        {
          sub_20C37ED84((uint64_t)v89, (uint64_t)&v70);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v88, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v70);
          v88[3] = 0;
          v88[0] = off_24C53F490;
          if ((v73 & 7) != 0)
          {
            v27 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
            do
              v28 = __ldxr(v27);
            while (__stlxr(v28 - 2, v27));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v72 + 1);
          sub_20BFD265C(&v72);
          if (v71)
            sub_20C35C614(v71);
          LODWORD(v70) = 1;
          v71 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v72);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v72 + 1);
          *(_QWORD *)&v73 = 0;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v84, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v70);
          v84 = off_24C53F7D0;
          if ((v73 & 7) != 0)
          {
            v29 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
            do
              v30 = __ldxr(v29);
            while (__stlxr(v30 - 2, v29));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v72 + 1);
          sub_20BFD265C(&v72);
          if (v71)
            sub_20C35C614(v71);
          if ((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v88, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v84) & 1) != 0)
          {
            if (sub_20C624E4C(0))
            {
              sub_20C37EEF4((uint64_t)v89, (uint64_t)&v70);
              sub_20C348EEC((uint64_t)&v70, &v82);
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v82);
              sub_20C35C4F8((uint64_t)&v76, (uint64_t *)&v85, &v86);
              sub_20C348EEC((uint64_t)&v76, &v80);
              v32 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v80);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache]  Found skel binding at <%s> which targets skel <%s>.\n", v33, v34, Text, v32);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v81);
              sub_20BFD265C(&v80);
              if ((v79 & 7) != 0)
              {
                v35 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
                do
                  v36 = __ldxr(v35);
                while (__stlxr(v36 - 2, v35));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v78 + 1);
              sub_20BFD265C(&v78);
              if (v77)
                sub_20C35C614(v77);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v83);
              sub_20BFD265C(&v82);
              if ((v73 & 7) != 0)
              {
                v37 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
                do
                  v38 = __ldxr(v37);
                while (__stlxr(v38 - 2, v37));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v72 + 1);
              sub_20BFD265C(&v72);
              if (v71)
                sub_20C35C614(v71);
            }
          }
          else
          {
            v39 = v102;
            v40 = *((_QWORD *)v102 - 2);
            if (v40)
            {
              v41 = (unint64_t *)(v40 + 48);
              do
                v42 = __ldxr(v41);
              while (__stxr(v42 + 1, v41));
            }
            v43 = v85;
            v85 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v40;
            if (v43)
              sub_20C35C614(v43);
            sub_20C01A074(&v86, (_DWORD *)v39 - 2);
            sub_20C01A0C8(&v87, (_DWORD *)v39 - 1);
          }
          sub_20C35C4F8((uint64_t)&v70, (uint64_t *)&v85, &v86);
          sub_20C35C4F8((uint64_t)&v76, (uint64_t *)a3 + 1, (_DWORD *)a3 + 4);
          v44 = (_DWORD)v70 == v76
             && v71 == v77
             && v72 == v78
             && (v73 & 0xFFFFFFFFFFFFFFF8) == (v79 & 0xFFFFFFFFFFFFFFF8);
          if ((v79 & 7) != 0)
          {
            v45 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
            do
              v46 = __ldxr(v45);
            while (__stlxr(v46 - 2, v45));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v78 + 1);
          sub_20BFD265C(&v78);
          if (v77)
            sub_20C35C614(v77);
          if ((v73 & 7) != 0)
          {
            v47 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
            do
              v48 = __ldxr(v47);
            while (__stlxr(v48 - 2, v47));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v72 + 1);
          sub_20BFD265C(&v72);
          if (v71)
            sub_20C35C614(v71);
          if (v44)
          {
            sub_20C37ED84((uint64_t)v89, (uint64_t)&v76);
            pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkinningQuery(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v76, (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)&v70);
            if ((v79 & 7) != 0)
            {
              v49 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
              do
                v50 = __ldxr(v49);
              while (__stlxr(v50 - 2, v49));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v78 + 1);
            sub_20BFD265C(&v78);
            if (v77)
              sub_20C35C614(v77);
            if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v70, v51))
            {
              if (sub_20C624E4C(0))
              {
                sub_20C37EEF4((uint64_t)v89, (uint64_t)&v76);
                sub_20C348EEC((uint64_t)&v76, &v82);
                v52 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v82);
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache]  Found skinnable prim <%s>\n", v53, v54, v52);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v83);
                sub_20BFD265C(&v82);
                if ((v79 & 7) != 0)
                {
                  v55 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v56 = __ldxr(v55);
                  while (__stlxr(v56 - 2, v55));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v78 + 1);
                sub_20BFD265C(&v78);
                if (v77)
                  sub_20C35C614(v77);
              }
              sub_20C656FE0((uint64_t)&v98, (uint64_t)&v70);
              pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v89);
            }
            sub_20C625CE0((uint64_t)&v70);
          }
          v57 = v102;
          if ((unint64_t)v102 >= v103)
          {
            v58 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_20C657288((uint64_t *)&v101, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v84);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v102, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v84);
            *(_QWORD *)v57 = off_24C53F7D0;
            v58 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v57 + 24);
          }
          v102 = v58;
          pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v84);
          pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::~UsdSkelBindingAPI((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v88);
        }
      }
      else if (!v93)
      {
        if (sub_20C624E4C(0))
        {
          sub_20C37EEF4((uint64_t)v89, (uint64_t)&v70);
          sub_20C348EEC((uint64_t)&v70, (int *)v88);
          v59 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v88);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache]  Pruning traversal at <%s> (prim is not UsdGeomImageable)\n", v60, v61, v59);
          sub_20BFD1A18(v88);
          sub_20C37EFCC((uint64_t)&v70);
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v89);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)v89);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v90 + 1);
    sub_20BFD265C(&v90);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v70, a3);
    v70 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)off_24C53F7D0;
    v73 = v98;
    v74 = v99;
    v75 = v100;
    if (v100)
    {
      v63 = (unint64_t *)(v100 - 16);
      if (*((_QWORD *)&v74 + 1))
        v63 = (unint64_t *)*((_QWORD *)&v74 + 1);
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    v65 = v71;
    if (v71)
    {
      v66 = (unint64_t *)((char *)v71 + 48);
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    v68 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v65;
    if (v68)
      sub_20C35C614(v68);
    sub_20C01A074((int *)(a4 + 16), &v72);
    sub_20C01A0C8((int *)(a4 + 20), (_DWORD *)&v72 + 1);
    if (&v70 != (pxrInternal__aapl__pxrReserved__::UsdSchemaBase ***)a4)
    {
      sub_20C649A14((_QWORD *)(a4 + 24));
      v69 = v74;
      *(_OWORD *)(a4 + 24) = v73;
      *(_OWORD *)(a4 + 40) = v69;
      v73 = 0u;
      v74 = 0u;
      *(_QWORD *)(a4 + 56) = v75;
      v75 = 0;
    }
    sub_20C649A14(&v73);
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v70);
LABEL_116:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v96);
    sub_20BFD265C(&v95);
    sub_20C649A14(&v98);
    a4 = !v15;
    v70 = &v101;
    sub_20C599B38((void ***)&v70);
  }
  else
  {
    v70 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)"usdSkel/cache.cpp";
    v71 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"ComputeSkelBinding";
    v72 = 225;
    *(_QWORD *)&v73 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBinding(const UsdSkelRoot &, const"
                      " UsdSkelSkeleton &, UsdSkelBinding *, Usd_PrimFlagsPredicate) const";
    BYTE8(v73) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v70, 1, (pxrInternal__aapl__pxrReserved__ *)"'binding' pointer is null.");
  }
  return a4;
}

void sub_20C65695C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  uint64_t v21;

  sub_20C37EFCC((uint64_t)&a21);
  sub_20C37ED50(v21 - 248);
  sub_20C37EDFC(v21 - 216);
  sub_20C649A14((_QWORD *)(v21 - 160));
  a21 = (void **)(v21 - 112);
  sub_20C599B38(&a21);
  _Unwind_Resume(a1);
}

void sub_20C656B28(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a1)
{
  sub_20C649A14((_QWORD *)a1 + 3);
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton(a1);
}

_QWORD *sub_20C656B54(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C53F6F0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C656BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unint64_t *v10;

  a10 = 0;
  if (v10)
    sub_20C656C24((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void sub_20C656BC8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C656BDC(uint64_t a1)
{
  sub_20C656C24(a1 + 24, *(unint64_t **)(a1 + 24));
}

uint64_t sub_20C656BE4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C53F740))
    return a1 + 24;
  else
    return 0;
}

void sub_20C656C24(uint64_t a1, unint64_t *a2)
{
  if (a2)
  {
    sub_20C622BE4(a2 + 219);
    sub_20C622B18(a2 + 146);
    sub_20C622A4C(a2 + 73);
    sub_20C622980(a2);
    operator delete(a2);
  }
}

void sub_20C656C84(_QWORD *a1)
{
  if (a1)
  {
    sub_20C656C84(*a1);
    sub_20C656C84(a1[1]);
    sub_20C656CC4((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)(a1 + 4));
    operator delete(a1);
  }
}

void sub_20C656CC4(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a1)
{
  sub_20C649A14((_QWORD *)a1 + 3);
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton(a1);
}

_QWORD *sub_20C656CF0(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDE4FA4(a1, a2);
    sub_20C656D58((uint64_t)a1, a2);
  }
  return a1;
}

void sub_20C656D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C599B38(&a9);
  _Unwind_Resume(a1);
}

void sub_20C656D58(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v3;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v4;
  uint64_t v5;

  v3 = *(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(a1 + 8);
  if (a2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v3 + 24 * a2);
    v5 = 24 * a2;
    do
    {
      sub_20C656DC8(a1 + 16, v3);
      v3 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v3 + 24);
      v5 -= 24;
    }
    while (v5);
    v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3;
}

void sub_20C656DC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C656DC8(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2)
{
  unsigned int *v3;
  unsigned int v4;
  int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  v5 = 1;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
  v9 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  *(_QWORD *)a2 = off_24C53F7D0;
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C656E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C656E98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;
  _BYTE v14[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  int v16;
  int v17;
  uint64_t v18;

  sub_20C35C4F8((uint64_t)v14, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  sub_20C35C4F8((uint64_t)&v9, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  v3 = sub_20C37F21C((uint64_t)v14, (uint64_t)&v9);
  if ((v13 & 7) != 0)
  {
    v4 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  if ((v18 & 7) != 0)
  {
    v6 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
  return v3;
}

void sub_20C656F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_20C35C2E0((uint64_t)&a9);
  sub_20C35C2E0((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20C656F9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      sub_20C656CC4((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)(v2 + 32));
    operator delete((void *)v2);
  }
}

void sub_20C656FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD v15[4];
  char v16;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_15;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_15;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      sub_20C625430(v5 + 400 * v4, a2);
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_15:
    v9 = *(_QWORD *)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_20C65714C(a1, v11);
    v13 = 50 * v4;
    sub_20C6571F4(v9, v9 + v13 * 8, (uint64_t)v12);
    sub_20C625430((uint64_t)&v12[v13], a2);
    sub_20C649A14((_QWORD *)a1);
    *(_QWORD *)(a1 + 32) = v12;
    goto LABEL_13;
  }
  v15[0] = "vt/array.h";
  v15[1] = "emplace_back";
  v15[2] = 433;
  v15[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery>::empla"
           "ce_back(Args &&...) [ELEM = pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery, Args = <const pxrInternal"
           "__aapl__pxrReserved__::UsdSkelSkinningQuery &>]";
  v16 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v14 = 4;
    else
      v14 = 3;
  }
  else
  {
    v14 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v14);
}

_QWORD *sub_20C65714C(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery>::_AllocateNew(size_t) [ELEM = pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery]");
  if (a2 > 0xA3D70A3D70A3D6)
    v3 = -1;
  else
    v3 = 400 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

