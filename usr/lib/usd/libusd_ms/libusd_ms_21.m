void sub_20C6C2094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;

  sub_20BEEB2B8(&a9);
  v30 = &a20;
  while (1)
  {
    v32 = *--v30;
    v31 = v32;
    if ((v32 & 7) != 0)
    {
      v33 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
    if (v30 == (uint64_t *)&a11)
    {
      if ((*v28 & 7) != 0)
      {
        v35 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      if ((*v27 & 7) != 0)
      {
        v37 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      if ((*v26 & 7) != 0)
      {
        v39 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((*v25 & 7) != 0)
      {
        v41 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((*v24 & 7) != 0)
      {
        v43 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      if ((*v23 & 7) != 0)
      {
        v45 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
      if ((*v22 & 7) != 0)
      {
        v47 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      if ((*v21 & 7) != 0)
      {
        v49 = (unsigned int *)(*v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((*v20 & 7) != 0)
      {
        v51 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20C6C223C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _DWORD *v7;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v8;
  const std::string *EmptyString;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v22;
  uint64_t *v23;
  __int128 v24;
  char *v25;
  char *v26;
  BOOL v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  void **v34;
  int v35;
  uint64_t *v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::string::size_type size;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  void **v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  int v49;
  std::string::size_type *v50;
  std::string::size_type *v51;
  unsigned int *v52;
  unsigned int v53;
  std::string::size_type v54;
  const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v55;
  _QWORD *i;
  unsigned int *v57;
  unsigned int v58;
  std::string::size_type *v59;
  std::string::size_type *v60;
  uint64_t *v61;
  uint64_t v62;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *v64;
  __int128 v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  BOOL v70;
  std::string *p_dst;
  std::string::size_type v73;
  int v74;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  char v79;
  char *v80;
  char **v81;
  __int128 *v82;
  _QWORD *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  __int128 *v88;
  __int128 *v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  char *v95;
  std::__shared_weak_count *v96;
  std::string::size_type v97;
  int v98;
  _DWORD *v99;
  uint64_t *v100;
  uint64_t v101;
  const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v102;
  uint64_t v103;
  uint64_t v104;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v105;
  uint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  char *v114;
  int *v115;
  uint64_t v116;
  char *v117;
  int *v118;
  unint64_t v119;
  std::string::size_type v120;
  int v121;
  _DWORD *v122;
  uint64_t *v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *j;
  std::string::size_type v127;
  uint64_t v128;
  void **v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void **v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  _DWORD *v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  int v147;
  uint64_t *v149;
  std::string::size_type v150;
  _QWORD *v151;
  void *__p[2];
  uint64_t v153;
  uint64_t v154;
  void *v155[2];
  __int128 v156;
  int *v157;
  std::string v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  std::string v161;
  std::string v162;
  std::string v163;
  std::string __dst;
  std::string v165;
  void *v166[2];
  unsigned __int8 v167;
  std::string::size_type *v168;
  std::string::size_type *v169;
  uint64_t v170;
  uint64_t *v171;
  _QWORD *v172;
  unint64_t v173;
  char **v174;
  char *v175[3];

  v6 = a2 + 8;
  v7 = (_DWORD *)(a2 + 16);
  sub_20C35C4F8((uint64_t)&v158, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  v8 = sub_20C398E78(&v158);
  if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const std::string *)((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  std::string::operator=((std::string *)(a1 + 8), EmptyString);
  if ((v159 & 7) != 0)
  {
    v10 = (unsigned int *)(v159 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v158.__r_.__value_.__r.__words[2] + 1);
  sub_20BFD265C(&v158.__r_.__value_.__r.__words[2]);
  if (v158.__r_.__value_.__l.__size_)
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v158.__r_.__value_.__l.__size_);
  v175[0] = 0;
  v175[1] = 0;
  v173 = 0;
  v174 = v175;
  v171 = (uint64_t *)&v172;
  v172 = 0;
  v168 = 0;
  v169 = 0;
  v170 = 0;
  sub_20BDDC0E4(v166, ":indices");
  sub_20C35C4F8((uint64_t)&v158, (uint64_t *)v6, v7);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredAttributes((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v158, (uint64_t *)v155);
  if ((v159 & 7) != 0)
  {
    v12 = (unsigned int *)(v159 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v158.__r_.__value_.__r.__words[2] + 1);
  v151 = (_QWORD *)a1;
  sub_20BFD265C(&v158.__r_.__value_.__r.__words[2]);
  if (v158.__r_.__value_.__l.__size_)
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v158.__r_.__value_.__l.__size_);
  v14 = v155[0];
  v15 = v155[1];
  if (v155[0] != v155[1])
  {
    while (1)
    {
      LODWORD(v158.__r_.__value_.__l.__data_) = *(_DWORD *)v14;
      v16 = v14[1];
      v158.__r_.__value_.__l.__size_ = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 48);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      sub_20BFD6E54(&v158.__r_.__value_.__r.__words[2], (_DWORD *)v14 + 4);
      sub_20BFD6EA4((_DWORD *)&v158.__r_.__value_.__r.__words[2] + 1, (_DWORD *)v14 + 5);
      v19 = v14[3];
      v159 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 2, v20));
        if ((v21 & 1) == 0)
          v159 &= 0xFFFFFFFFFFFFFFF8;
      }
      v22 = sub_20C398E78(&v158);
      if ((*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8) != 0)
        v23 = (uint64_t *)((*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v23 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
      if (*((char *)v23 + 23) < 0)
      {
        sub_20BDDBFAC(__p, (void *)*v23, v23[1]);
      }
      else
      {
        v24 = *(_OWORD *)v23;
        v153 = v23[2];
        *(_OWORD *)__p = v24;
      }
      if (v153 >= 0)
        v25 = (char *)HIBYTE(v153);
      else
        v25 = (char *)__p[1];
      if ((v167 & 0x80u) == 0)
        v26 = (char *)v167;
      else
        v26 = (char *)v166[1];
      v27 = v25 >= v26;
      v28 = (char *)(v25 - v26);
      if (v27)
      {
        if (v153 < 0)
        {
          if (v26 == (char *)-1 || __p[1] < v28)
LABEL_257:
            sub_20BEB9180();
          v33 = (char *)((char *)__p[1] - (char *)v28) >= v26 ? v26 : (char *)((char *)__p[1] - (char *)v28);
          v34 = (void **)__p[0];
        }
        else
        {
          if (HIBYTE(v153) < (unint64_t)v28 || v26 == (char *)-1)
            goto LABEL_257;
          v33 = HIBYTE(v153) - (unint64_t)v28 >= (unint64_t)v26
              ? v26
              : (char *)(HIBYTE(v153) - (_QWORD)v28);
          v34 = __p;
        }
        v45 = (v167 & 0x80u) == 0 ? v166 : (void **)v166[0];
        if (!memcmp(&v28[(_QWORD)v34], v45, (size_t)v33) && v33 == v26)
          goto LABEL_79;
      }
      v29 = sub_20BDEEBA4(a3, (const void **)__p);
      if (a3 + 8 != v29)
        break;
      v35 = sub_20C6D9658((const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v158, (pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)a2);
      if (!v35)
      {
        v46 = sub_20C6DA6A4((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v158);
        v165.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        v47 = sub_20C6CC5C4((uint64_t **)&v174, (const void **)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v165);
        *((_DWORD *)v47 + 14) = v46;
        *((_WORD *)v47 + 30) = WORD2(v46);
LABEL_79:
        pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples((uint64_t)&v158, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v168);
        v50 = v168;
        v51 = v169;
        while (v50 != v51)
        {
          v165.__r_.__value_.__r.__words[0] = 0;
          v165.__r_.__value_.__r.__words[0] = *v50;
          sub_20C6CC72C(&v171, (double *)&v165, (uint64_t *)&v165);
          ++v50;
        }
        v32 = 0;
        goto LABEL_83;
      }
      v36 = sub_20C6E7B7C();
      std::operator+<char>();
      v37 = std::string::append(&v162, "(code ");
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v163.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v161, v35);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = &v161;
      else
        v39 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      else
        size = v161.__r_.__value_.__l.__size_;
      v41 = std::string::append(&v163, (const std::string::value_type *)v39, size);
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      v43 = std::string::append(&__dst, ")");
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v165.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      sub_20C6C3584((os_log_t *)v36, (uint64_t *)&v165);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v163.__r_.__value_.__l.__data_);
      if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v162.__r_.__value_.__l.__data_);
      v32 = 3;
LABEL_83:
      if (SHIBYTE(v153) < 0)
        operator delete(__p[0]);
      if ((v159 & 7) != 0)
      {
        v52 = (unsigned int *)(v159 & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v158.__r_.__value_.__r.__words[2] + 1);
      sub_20BFD265C(&v158.__r_.__value_.__r.__words[2]);
      if (v158.__r_.__value_.__l.__size_)
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v158.__r_.__value_.__l.__size_);
      if (v32 != 3 && v32)
      {
        v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v155;
        sub_20C3AEE3C((void ***)&v158);
        goto LABEL_252;
      }
      v14 += 4;
      if (v14 == v15)
        goto LABEL_93;
    }
    v30 = sub_20C6D9658((const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v158, (pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)a2);
    if ((_DWORD)v30
      || (v31 = v29 + 56, v30 = sub_20C6DA048((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v158, v31), (_DWORD)v30))
    {
      v32 = 1;
      v6 = v30;
      goto LABEL_83;
    }
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    v48 = sub_20C6CC5C4((uint64_t **)&v174, (const void **)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v165);
    v49 = *(_DWORD *)v31;
    *((_WORD *)v48 + 30) = *(_WORD *)(v31 + 4);
    *((_DWORD *)v48 + 14) = v49;
    goto LABEL_79;
  }
LABEL_93:
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v155;
  sub_20C3AEE3C((void ***)&v158);
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetAllGeomSubsets((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)a2, (uint64_t)&v165);
  v54 = v165.__r_.__value_.__l.__size_;
  v55 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v165.__r_.__value_.__r.__words[0];
  for (i = (_QWORD *)a1;
        v55 != (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v54;
        v55 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v55 + 24))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v155, v55);
    v155[0] = off_24C53CF80;
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v155, (uint64_t)&v158);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples((uint64_t)&v158, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v168);
    if ((v159 & 7) != 0)
    {
      v57 = (unsigned int *)(v159 & 0xFFFFFFFFFFFFFFF8);
      do
        v58 = __ldxr(v57);
      while (__stlxr(v58 - 2, v57));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v158.__r_.__value_.__r.__words[2] + 1);
    sub_20BFD265C(&v158.__r_.__value_.__r.__words[2]);
    if (v158.__r_.__value_.__l.__size_)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v158.__r_.__value_.__l.__size_);
    v59 = v168;
    v60 = v169;
    while (v59 != v60)
    {
      v158.__r_.__value_.__r.__words[0] = 0;
      v158.__r_.__value_.__r.__words[0] = *v59;
      sub_20C6CC72C(&v171, (double *)&v158, (uint64_t *)&v158);
      ++v59;
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::~UsdGeomSubset((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v155);
  }
  if (v173 <= 1)
  {
    *(_BYTE *)(a1 + 104) = 1;
    *(_DWORD *)(a1 + 136) = 14;
    sub_20BDDC0E4(&v158, "points");
    v62 = sub_20BDEEBA4((uint64_t)&v174, (const void **)&v158.__r_.__value_.__l.__data_);
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v158.__r_.__value_.__l.__data_);
    if (v175 != (char **)v62)
    {
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(v62 + 56);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(v62 + 61);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)a2, (uint64_t)&v158);
    __p[0] = (void *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v158);
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)__p, (unsigned int **)v155);
    if (((unint64_t)v155[0] & 0xFFFFFFFFFFFFFFF8) != 0)
      v64 = (uint64_t *)(((unint64_t)v155[0] & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v64 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)v64 + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*v64, v64[1]);
    }
    else
    {
      v65 = *(_OWORD *)v64;
      __dst.__r_.__value_.__r.__words[2] = v64[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v65;
    }
    if (((uint64_t)v155[0] & 7) != 0)
    {
      v66 = (unsigned int *)((unint64_t)v155[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v67 = __ldxr(v66);
      while (__stlxr(v67 - 2, v66));
    }
    if ((v159 & 7) != 0)
    {
      v68 = (unsigned int *)(v159 & 0xFFFFFFFFFFFFFFF8);
      do
        v69 = __ldxr(v68);
      while (__stlxr(v69 - 2, v68));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v158.__r_.__value_.__r.__words[2] + 1);
    sub_20BFD265C(&v158.__r_.__value_.__r.__words[2]);
    if (v158.__r_.__value_.__l.__size_)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v158.__r_.__value_.__l.__size_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__dst.__r_.__value_.__l.__size_ == 9)
      {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if (*(_QWORD *)__dst.__r_.__value_.__l.__data_ != 0x5B6633746E696F70
          || *(_BYTE *)(__dst.__r_.__value_.__r.__words[0] + 8) != 93)
        {
          goto LABEL_138;
        }
        goto LABEL_145;
      }
    }
    else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) == 9)
    {
      v70 = __dst.__r_.__value_.__r.__words[0] == 0x5B6633746E696F70 && __dst.__r_.__value_.__s.__data_[8] == 93;
      if (!v70)
      {
        p_dst = &__dst;
LABEL_138:
        v73 = p_dst->__r_.__value_.__r.__words[0];
        v74 = p_dst->__r_.__value_.__s.__data_[8];
        if (v73 != 0x5B6433746E696F70 || v74 != 93)
          goto LABEL_142;
        v77 = sub_20C6C3A48((_QWORD *)(a1 + 80), (void **)(a1 + 32), (void **)(a1 + 56), a1 + 104, (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)a2);
LABEL_147:
        v6 = v77;
        if (!(_DWORD)v77)
        {
          v78 = (uint64_t *)v174;
          if (v174 == v175)
          {
LABEL_161:
            v82 = *(__int128 **)(a1 + 216);
            if (v82 != (__int128 *)(a1 + 224))
            {
              do
              {
                sub_20BF1BF34(&v158, v82 + 2);
                if (*(_QWORD *)(v159 + 56) != *(_QWORD *)(v159 + 48))
                {
                  v83 = sub_20BEDE334(a1 + 264, 0, 0, (uint64_t)&v158);
                  v83[1] = a1 + 264;
                  v84 = *(_QWORD *)(a1 + 264);
                  *v83 = v84;
                  *(_QWORD *)(v84 + 8) = v83;
                  *(_QWORD *)(a1 + 264) = v83;
                  ++*(_QWORD *)(a1 + 280);
                }
                v85 = v160;
                if (v160)
                {
                  p_shared_owners = (unint64_t *)&v160->__shared_owners_;
                  do
                    v87 = __ldaxr(p_shared_owners);
                  while (__stlxr(v87 - 1, p_shared_owners));
                  if (!v87)
                  {
                    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                    std::__shared_weak_count::__release_weak(v85);
                  }
                }
                if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v158.__r_.__value_.__l.__data_);
                v88 = (__int128 *)*((_QWORD *)v82 + 1);
                if (v88)
                {
                  do
                  {
                    v89 = v88;
                    v88 = *(__int128 **)v88;
                  }
                  while (v88);
                }
                else
                {
                  do
                  {
                    v89 = (__int128 *)*((_QWORD *)v82 + 2);
                    v70 = *(_QWORD *)v89 == (_QWORD)v82;
                    v82 = v89;
                  }
                  while (!v70);
                }
                v82 = v89;
              }
              while (v89 != (__int128 *)(a1 + 224));
            }
            pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetAllGeomSubsets((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)a2, (uint64_t)&v158);
            sub_20C6CD09C((void **)&v165.__r_.__value_.__l.__data_);
            v165 = v158;
            memset(&v158, 0, sizeof(v158));
            v155[0] = &v158;
            sub_20C599B38((void ***)v155);
            if (v165.__r_.__value_.__l.__size_ != v165.__r_.__value_.__r.__words[0])
            {
              v90 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
              sub_20C6CD110(&v163, v90);
              v155[0] = (void *)0xFFEFFFFFFFFFFFFFLL;
              pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetUnassignedIndices((pxrInternal__aapl__pxrReserved__::UsdGeomSubset **)&v165, v90, (uint64_t)&v158);
              if (v158.__r_.__value_.__r.__words[0])
              {
                sub_20BDDC0E4(v155, "");
                sub_20BEE7C24((uint64_t *)(a1 + 192), (__int128 *)v155);
                if (SBYTE7(v156) < 0)
                  operator delete(v155[0]);
                sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v158, v91, v92);
                v93 = v160;
                sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v158, v94, v95);
                v96 = (std::__shared_weak_count *)((char *)v160 + 4 * v158.__r_.__value_.__r.__words[0]);
                if (v93 != v96)
                {
                  v97 = v163.__r_.__value_.__r.__words[0];
                  do
                  {
                    v98 = (int)v93->__vftable;
                    v99 = operator new(0x18uLL);
                    v100 = (uint64_t *)(v97 + 24 * v98);
                    v99[4] = 0;
                    *((_QWORD *)v99 + 1) = v100;
                    v101 = *v100;
                    *(_QWORD *)v99 = *v100;
                    *(_QWORD *)(v101 + 8) = v99;
                    *v100 = (uint64_t)v99;
                    ++v100[2];
                    v93 = (std::__shared_weak_count *)((char *)v93 + 4);
                  }
                  while (v93 != v96);
                }
              }
              v150 = v165.__r_.__value_.__l.__size_;
              v102 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v165.__r_.__value_.__r.__words[0];
              if (v165.__r_.__value_.__r.__words[0] != v165.__r_.__value_.__l.__size_)
              {
                v149 = (uint64_t *)(a1 + 192);
                do
                {
                  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v162, v102);
                  v162.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C53CF80;
                  v104 = v151[24];
                  v103 = v151[25];
                  sub_20C35C4F8((uint64_t)v155, (uint64_t *)&v162.__r_.__value_.__l.__size_, &v162.__r_.__value_.__r.__words[2]);
                  v105 = sub_20C398E78(v155);
                  if ((*(_QWORD *)v105 & 0xFFFFFFFFFFFFFFF8) != 0)
                    v106 = (uint64_t *)((*(_QWORD *)v105 & 0xFFFFFFFFFFFFFFF8) + 16);
                  else
                    v106 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v105);
                  v107 = v151[25];
                  if (v107 >= v151[26])
                  {
                    v108 = sub_20BE4EE50(v149, (__int128 *)v106);
                  }
                  else
                  {
                    sub_20BE4EDF4(v149, (__int128 *)v106);
                    v108 = v107 + 24;
                  }
                  v151[25] = v108;
                  if ((BYTE8(v156) & 7) != 0)
                  {
                    v109 = (unsigned int *)(*((_QWORD *)&v156 + 1) & 0xFFFFFFFFFFFFFFF8);
                    do
                      v110 = __ldxr(v109);
                    while (__stlxr(v110 - 2, v109));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v156 + 1);
                  sub_20BFD265C(&v156);
                  if (v155[1])
                    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v155[1]);
                  v157 = 0;
                  *(_OWORD *)v155 = 0u;
                  v156 = 0u;
                  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)&v162, (uint64_t)__p);
                  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)__p, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v155);
                  if ((v154 & 7) != 0)
                  {
                    v111 = (unsigned int *)(v154 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v112 = __ldxr(v111);
                    while (__stlxr(v112 - 2, v111));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v153 + 1);
                  sub_20BFD265C(&v153);
                  if (__p[1])
                    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p[1]);
                  sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v155, v113, v114);
                  v115 = v157;
                  sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v155, v116, v117);
                  v118 = &v157[(uint64_t)v155[0]];
                  if (v115 != v118)
                  {
                    v119 = 0xAAAAAAAAAAAAAAABLL * ((v103 - v104) >> 3);
                    v120 = v163.__r_.__value_.__r.__words[0];
                    do
                    {
                      v121 = *v115;
                      v122 = operator new(0x18uLL);
                      v123 = (uint64_t *)(v120 + 24 * v121);
                      v122[4] = v119;
                      *((_QWORD *)v122 + 1) = v123;
                      v124 = *v123;
                      *(_QWORD *)v122 = *v123;
                      *(_QWORD *)(v124 + 8) = v122;
                      *v123 = (uint64_t)v122;
                      ++v123[2];
                      ++v115;
                    }
                    while (v115 != v118);
                  }
                  sub_20BF5618C((uint64_t)v155);
                  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::~UsdGeomSubset((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)&v162);
                  v102 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v102 + 24);
                }
                while (v102 != (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v150);
              }
              i = v151;
              v125 = (_QWORD *)v151[21];
              for (j = (_QWORD *)v151[22]; j != v125; sub_20BEB422C(j))
                j -= 3;
              v151[22] = v125;
              v127 = v163.__r_.__value_.__l.__size_;
              v128 = v163.__r_.__value_.__r.__words[0];
              if (v163.__r_.__value_.__r.__words[0] != v163.__r_.__value_.__l.__size_)
              {
                v129 = (void **)(v151 + 18);
                do
                {
                  sub_20C6CD190(v155, v128);
                  v130 = i[21];
                  v131 = i[22];
                  if (v130 == v131)
                  {
                    v132 = i[21];
                  }
                  else
                  {
                    v132 = i[21];
                    do
                    {
                      if (*(_QWORD *)(v132 + 16) == (_QWORD)v156)
                      {
                        v133 = *(_QWORD *)(v132 + 8);
                        if (v133 == v132)
                          goto LABEL_222;
                        v134 = v155;
                        while (1)
                        {
                          v134 = (void **)v134[1];
                          if (*(_DWORD *)(v133 + 16) != *((_DWORD *)v134 + 4))
                            break;
                          v133 = *(_QWORD *)(v133 + 8);
                          if (v133 == v132)
                            goto LABEL_222;
                        }
                      }
                      v132 += 24;
                    }
                    while (v132 != v131);
                    v132 = i[22];
                  }
LABEL_222:
                  if (v132 == v131)
                  {
                    if (v131 >= i[23])
                    {
                      v136 = sub_20C6CD228((uint64_t)(v151 + 21), (uint64_t)v155);
                      i = v151;
                    }
                    else
                    {
                      sub_20C6CD190((_QWORD *)i[22], (uint64_t)v155);
                      v136 = v131 + 24;
                      i[22] = v131 + 24;
                    }
                    i[22] = v136;
                    v135 = -1 - 0x5555555555555555 * ((v136 - i[21]) >> 3);
                  }
                  else
                  {
                    v135 = 0xAAAAAAAAAAAAAAABLL * ((v132 - v130) >> 3);
                  }
                  v138 = (char *)i[19];
                  v137 = i[20];
                  if ((unint64_t)v138 >= v137)
                  {
                    v140 = (char *)*v129;
                    v141 = (v138 - (_BYTE *)*v129) >> 2;
                    v142 = v141 + 1;
                    if ((unint64_t)(v141 + 1) >> 62)
                      sub_20BDDF694();
                    v143 = v137 - (_QWORD)v140;
                    if (v143 >> 1 > v142)
                      v142 = v143 >> 1;
                    if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL)
                      v144 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v144 = v142;
                    if (v144)
                    {
                      v145 = (char *)sub_20BDE1330((uint64_t)(v151 + 20), v144);
                      v140 = (char *)v151[18];
                      v138 = (char *)v151[19];
                    }
                    else
                    {
                      v145 = 0;
                    }
                    v146 = &v145[4 * v141];
                    *(_DWORD *)v146 = v135;
                    v139 = v146 + 4;
                    while (v138 != v140)
                    {
                      v147 = *((_DWORD *)v138 - 1);
                      v138 -= 4;
                      *((_DWORD *)v146 - 1) = v147;
                      v146 -= 4;
                    }
                    v151[18] = v146;
                    v151[19] = v139;
                    v151[20] = &v145[4 * v144];
                    if (v140)
                      operator delete(v140);
                  }
                  else
                  {
                    *(_DWORD *)v138 = v135;
                    v139 = v138 + 4;
                  }
                  v151[19] = v139;
                  i = v151;
                  sub_20BEB422C(v155);
                  v128 += 24;
                }
                while (v128 != v127);
              }
              sub_20BF5618C((uint64_t)&v158);
              v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163;
              sub_20C6CC41C((void ***)&v158);
            }
            v6 = sub_20C6C3F0C(i);
            if (!(_DWORD)v6)
              *(_BYTE *)i = 1;
          }
          else
          {
            while (1)
            {
              if (*((char *)v78 + 55) < 0)
                sub_20BDDBFAC(&v158, (void *)v78[4], v78[5]);
              else
                v158 = *(std::string *)(v78 + 4);
              v159 = v78[7];
              v79 = sub_20C6D73E8(a2, &v158, (uint64_t)&v159, (uint64_t **)(a1 + 216));
              if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v158.__r_.__value_.__l.__data_);
              if ((v79 & 1) == 0)
                break;
              v80 = (char *)v78[1];
              if (v80)
              {
                do
                {
                  v81 = (char **)v80;
                  v80 = *(char **)v80;
                }
                while (v80);
              }
              else
              {
                do
                {
                  v81 = (char **)v78[2];
                  v70 = *v81 == (char *)v78;
                  v78 = (uint64_t *)v81;
                }
                while (!v70);
              }
              v78 = (uint64_t *)v81;
              if (v81 == v175)
                goto LABEL_161;
            }
            v6 = 213;
          }
        }
        goto LABEL_249;
      }
LABEL_145:
      v77 = sub_20C6C362C((_QWORD *)(a1 + 80), (void **)(a1 + 32), (void **)(a1 + 56), a1 + 104, (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)a2);
      goto LABEL_147;
    }
LABEL_142:
    v76 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v76, (uint64_t *)&v158);
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v158.__r_.__value_.__l.__data_);
    v6 = 201;
LABEL_249:
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_251;
  }
  v61 = sub_20C6E7B7C();
  sub_20BDDC0E4(&v158, "fromUsdMesh: Animation not supported!");
  sub_20C6C3584((os_log_t *)v61, (uint64_t *)&v158);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  v6 = 200;
LABEL_251:
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
  sub_20C599B38((void ***)&v158);
LABEL_252:
  if ((char)v167 < 0)
    operator delete(v166[0]);
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  sub_20BE6100C((uint64_t)&v171, v172);
  sub_20BDECAB8((uint64_t)&v174, v175[0]);
  return v6;
}

void sub_20C6C3284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;
  void *v61;

  sub_20BF5618C((uint64_t)&a33);
  a33 = &a54;
  sub_20C6CC41C(&a33);
  if (*(char *)(v59 - 217) < 0)
    operator delete(*(void **)(v59 - 240));
  a33 = (void **)(v59 - 208);
  sub_20C599B38(&a33);
  if (*(char *)(v59 - 161) < 0)
    operator delete(*(void **)(v59 - 184));
  v61 = *(void **)(v59 - 160);
  if (v61)
  {
    *(_QWORD *)(v59 - 152) = v61;
    operator delete(v61);
  }
  sub_20BE6100C(v59 - 136, *(_QWORD **)(v59 - 128));
  sub_20BDECAB8(v59 - 112, *(char **)(v59 - 104));
  _Unwind_Resume(a1);
}

void sub_20C6C3584(os_log_t *a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v4 = a2;
    else
      v4 = (uint64_t *)*a2;
    v5 = 136315138;
    v6 = v4;
    _os_log_impl(&dword_20BDBC000, v3, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v5, 0xCu);
  }
}

uint64_t sub_20C6C362C(_QWORD *a1, void **a2, void **a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  int v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  void *v43[2];
  char v44;
  void *__p[2];
  __int128 v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  unint64_t v50[4];
  void *__src;
  uint64_t v52[4];
  const void *v53;
  int v54;

  v53 = 0;
  memset(v52, 0, sizeof(v52));
  __src = 0;
  memset(v50, 0, sizeof(v50));
  v49 = 0;
  memset(v48, 0, sizeof(v48));
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr(this, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)__p, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v52);
  if ((BYTE8(v46) & 7) != 0)
  {
    v10 = (unsigned int *)(*((_QWORD *)&v46 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_20BFD265C(&v46);
  if (__p[1])
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p[1]);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr(this, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)__p, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v50);
  if ((BYTE8(v46) & 7) != 0)
  {
    v12 = (unsigned int *)(*((_QWORD *)&v46 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_20BFD265C(&v46);
  if (__p[1])
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p[1]);
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(this, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((uint64_t)__p, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v48);
  if ((BYTE8(v46) & 7) != 0)
  {
    v14 = (unsigned int *)(*((_QWORD *)&v46 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_20BFD265C(&v46);
  if (__p[1])
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p[1]);
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomMesh::ValidateTopology(v52, (uint64_t)v50, *(char **)&v48[0], 0) & 1) != 0)
  {
    sub_20BE81ACC((uint64_t)a2, v50[0]);
    v16 = *a2;
    sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v17, v18);
    memcpy(v16, __src, 4 * v50[0]);
    sub_20BE81ACC((uint64_t)a3, v52[0]);
    v19 = *a3;
    sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v52, v20, v21);
    memcpy(v19, v53, 4 * v52[0]);
    v47 = 0;
    *(_OWORD *)__p = 0u;
    v46 = 0u;
    v54 = 0;
    v43[0] = &v54;
    sub_20BF56258((unint64_t *)__p, 3 * *(_QWORD *)&v48[0], (_DWORD **)v43);
    if (*(_QWORD *)&v48[0])
    {
      v24 = 0;
      v25 = 0;
      do
      {
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v48, v22, v23);
        v26 = *(_DWORD *)(v49 + 4 * v24);
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v27, v28);
        *(_DWORD *)(v47 + 4 * v24) = v26;
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v48, v29, v30);
        v31 = *(_DWORD *)(v49 + 4 * v24 + 4);
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v32, v33);
        *(_DWORD *)(v47 + 4 * (v24 + 1)) = v31;
        sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v48, v34, v35);
        v36 = *(_DWORD *)(v49 + 4 * v24 + 8);
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v37, v38);
        *(_DWORD *)(v47 + 4 * (v24 + 2)) = v36;
        ++v25;
        v24 += 3;
      }
      while (*(_QWORD *)&v48[0] > v25);
    }
    if (*(_BYTE *)a4 == 1)
    {
      v39 = sub_20C6CC7E4((unsigned int *)__p, a1, a4, 3, *(_DWORD *)(a4 + 32));
    }
    else
    {
      v41 = sub_20C6E7B7C();
      sub_20BDDC0E4(v43, "Points quantization must be UNIFORM");
      sub_20C6C3E64((os_log_t *)v41, (uint64_t *)v43);
      if (v44 < 0)
        operator delete(v43[0]);
      v39 = 112;
    }
    sub_20BF5618C((uint64_t)__p);
  }
  else
  {
    v40 = sub_20C6E7B7C();
    sub_20BDDC0E4(__p, "fromUsdMesh: Invalid topology");
    sub_20C6C3E64((os_log_t *)v40, (uint64_t *)__p);
    if (SBYTE7(v46) < 0)
      operator delete(__p[0]);
    v39 = 201;
  }
  sub_20BF5618C((uint64_t)v48);
  sub_20BF5618C((uint64_t)v50);
  sub_20BF5618C((uint64_t)v52);
  return v39;
}

void sub_20C6C39B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  sub_20BF5618C((uint64_t)va2);
  sub_20BF5618C(v5 - 128);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6C3A48(_QWORD *a1, void **a2, void **a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  void *v43[2];
  char v44;
  void *__p[2];
  __int128 v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  unint64_t v50[4];
  void *__src;
  uint64_t v52[4];
  const void *v53;
  uint64_t v54;

  v53 = 0;
  memset(v52, 0, sizeof(v52));
  __src = 0;
  memset(v50, 0, sizeof(v50));
  v49 = 0;
  memset(v48, 0, sizeof(v48));
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr(this, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)__p, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v52);
  if ((BYTE8(v46) & 7) != 0)
  {
    v10 = (unsigned int *)(*((_QWORD *)&v46 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_20BFD265C(&v46);
  if (__p[1])
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p[1]);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr(this, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)__p, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v50);
  if ((BYTE8(v46) & 7) != 0)
  {
    v12 = (unsigned int *)(*((_QWORD *)&v46 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_20BFD265C(&v46);
  if (__p[1])
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p[1]);
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(this, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>((uint64_t)__p, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v48);
  if ((BYTE8(v46) & 7) != 0)
  {
    v14 = (unsigned int *)(*((_QWORD *)&v46 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_20BFD265C(&v46);
  if (__p[1])
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p[1]);
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomMesh::ValidateTopology(v52, (uint64_t)v50, *(char **)&v48[0], 0) & 1) != 0)
  {
    sub_20BE81ACC((uint64_t)a2, v50[0]);
    v16 = *a2;
    sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v17, v18);
    memcpy(v16, __src, 4 * v50[0]);
    sub_20BE81ACC((uint64_t)a3, v52[0]);
    v19 = *a3;
    sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v52, v20, v21);
    memcpy(v19, v53, 4 * v52[0]);
    v47 = 0;
    *(_OWORD *)__p = 0u;
    v46 = 0u;
    v54 = 0;
    v43[0] = &v54;
    sub_20BF57894((unint64_t *)__p, 3 * *(_QWORD *)&v48[0], (uint64_t **)v43);
    if (*(_QWORD *)&v48[0])
    {
      v24 = 0;
      v25 = 0;
      do
      {
        sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v48, v22, v23);
        v26 = *(_QWORD *)(v49 + 8 * v24);
        sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v27, v28);
        *(_QWORD *)(v47 + 8 * v24) = v26;
        sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v48, v29, v30);
        v31 = *(_QWORD *)(v49 + 8 * v24 + 8);
        sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v32, v33);
        *(_QWORD *)(v47 + 8 * (v24 + 1)) = v31;
        sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v48, v34, v35);
        v36 = *(_QWORD *)(v49 + 8 * v24 + 16);
        sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v37, v38);
        *(_QWORD *)(v47 + 8 * (v24 + 2)) = v36;
        ++v25;
        v24 += 3;
      }
      while (*(_QWORD *)&v48[0] > v25);
    }
    if (*(_BYTE *)a4 == 1)
    {
      v39 = sub_20C6CCC68((double **)__p, a1, a4, 3, *(_DWORD *)(a4 + 32));
    }
    else
    {
      v41 = sub_20C6E7B7C();
      sub_20BDDC0E4(v43, "Points quantization must be UNIFORM");
      sub_20C6C3E64((os_log_t *)v41, (uint64_t *)v43);
      if (v44 < 0)
        operator delete(v43[0]);
      v39 = 112;
    }
    sub_20BF5618C((uint64_t)__p);
  }
  else
  {
    v40 = sub_20C6E7B7C();
    sub_20BDDC0E4(__p, "fromUsdMesh: Invalid topology");
    sub_20C6C3E64((os_log_t *)v40, (uint64_t *)__p);
    if (SBYTE7(v46) < 0)
      operator delete(__p[0]);
    v39 = 201;
  }
  sub_20BF5618C((uint64_t)v48);
  sub_20BF5618C((uint64_t)v50);
  sub_20BF5618C((uint64_t)v52);
  return v39;
}

void sub_20C6C3DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  sub_20BF5618C((uint64_t)va2);
  sub_20BF5618C(v5 - 128);
  _Unwind_Resume(a1);
}

void sub_20C6C3E64(os_log_t *a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  if (os_log_type_enabled(*a1, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a2 + 23) >= 0)
      v4 = a2;
    else
      v4 = (uint64_t *)*a2;
    v5 = 136315138;
    v6 = v4;
    _os_log_impl(&dword_20BDBC000, v3, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v5, 0xCu);
  }
}

uint64_t sub_20C6C3F0C(_QWORD *a1)
{
  uint64_t v1;
  __int128 *v2;
  __int128 *v3;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  _DWORD *v19;
  int *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type size;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  std::string::size_type v39;
  uint64_t *v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  std::string::size_type v50;
  uint64_t *v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  std::string::size_type v67;
  std::string *v68;
  __int128 v69;
  int v70;
  _DWORD *v71;
  _DWORD *v72;
  int *v73;
  int *v74;
  int *v75;
  int *v76;
  uint64_t *v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  std::string::size_type v87;
  std::string *v88;
  __int128 v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  std::string::size_type v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  __int128 v97;
  std::string *v98;
  std::string::size_type v99;
  std::string *v100;
  __int128 v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  std::string::size_type v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  __int128 v111;
  std::string *v112;
  __int128 v113;
  std::string *v114;
  std::string::size_type v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  __int128 v119;
  std::string *v120;
  std::string::size_type v121;
  std::string *v122;
  __int128 v123;
  std::string *v124;
  __int128 v125;
  std::string *v126;
  __int128 v127;
  std::__shared_weak_count *v128;
  unint64_t *p_shared_owners;
  unint64_t v130;
  __int128 *v131;
  __int128 *v132;
  BOOL v133;
  std::string v135;
  std::string v136;
  std::string v137;
  std::string v138;
  std::string v139;
  std::string v140;
  std::string v141;
  std::string v142;
  std::string v143;
  std::string v144;
  std::string v145;
  std::string v146;
  __int128 v147;
  std::string::size_type v148;
  __int128 __dst;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  std::__shared_weak_count *v154;

  v2 = (__int128 *)a1[27];
  v3 = (__int128 *)(a1 + 28);
  if (v2 != (__int128 *)(a1 + 28))
  {
    do
    {
      sub_20BF1BF34(&v151, v2 + 2);
      if (SHIBYTE(v152) < 0)
      {
        sub_20BDDBFAC(&__dst, (void *)v151, *((unint64_t *)&v151 + 1));
      }
      else
      {
        __dst = v151;
        v150 = v152;
      }
      v5 = *(unsigned __int8 *)(v153 + 136);
      v6 = *(int *)(v153 + 140);
      if ((v5 - 3) <= 1)
      {
        v7 = *(_QWORD *)(v153 + 56) - *(_QWORD *)(v153 + 48);
        if (!v7)
        {
          if (((uint64_t)(*(_QWORD *)(v153 + 32) - *(_QWORD *)(v153 + 24)) >> 2) / v6 == ((uint64_t)(a1[11] - a1[10]) >> 2)
                                                                                       / 3uLL)
            goto LABEL_154;
          v23 = sub_20C6E7B7C();
          std::operator+<char>();
          v24 = std::string::append(&v141, ", data size: ");
          v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v142.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v140, (uint64_t)(*(_QWORD *)(v153 + 32) - *(_QWORD *)(v153 + 24)) >> 2);
          if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = &v140;
          else
            v26 = (std::string *)v140.__r_.__value_.__r.__words[0];
          if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v140.__r_.__value_.__r.__words[2]);
          else
            size = v140.__r_.__value_.__l.__size_;
          v28 = std::string::append(&v142, (const std::string::value_type *)v26, size);
          v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v143.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          v30 = std::string::append(&v143, ", gclCPV: ");
          v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v144.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v139, v6);
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v32 = &v139;
          else
            v32 = (std::string *)v139.__r_.__value_.__r.__words[0];
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v33 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          else
            v33 = v139.__r_.__value_.__l.__size_;
          v34 = std::string::append(&v144, (const std::string::value_type *)v32, v33);
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v145.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          v36 = std::string::append(&v145, ", points size: ");
          v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
          v146.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v37;
          v36->__r_.__value_.__l.__size_ = 0;
          v36->__r_.__value_.__r.__words[2] = 0;
          v36->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v138, (uint64_t)(a1[11] - a1[10]) >> 2);
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v38 = &v138;
          else
            v38 = (std::string *)v138.__r_.__value_.__r.__words[0];
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v39 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          else
            v39 = v138.__r_.__value_.__l.__size_;
LABEL_200:
          v126 = std::string::append(&v146, (const std::string::value_type *)v38, v39);
          v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
          v148 = v126->__r_.__value_.__r.__words[2];
          v147 = v127;
          v126->__r_.__value_.__l.__size_ = 0;
          v126->__r_.__value_.__r.__words[2] = 0;
          v126->__r_.__value_.__r.__words[0] = 0;
          sub_20C6C3E64((os_log_t *)v23, (uint64_t *)&v147);
          if (SHIBYTE(v148) < 0)
            operator delete((void *)v147);
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v138.__r_.__value_.__l.__data_);
          if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v146.__r_.__value_.__l.__data_);
          if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v145.__r_.__value_.__l.__data_);
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v139.__r_.__value_.__l.__data_);
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v144.__r_.__value_.__l.__data_);
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v143.__r_.__value_.__l.__data_);
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v140.__r_.__value_.__l.__data_);
          if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v142.__r_.__value_.__l.__data_);
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v141.__r_.__value_.__l.__data_);
          v70 = 0;
          v1 = 210;
          goto LABEL_221;
        }
        if (v7 >> 2 != ((uint64_t)(a1[11] - a1[10]) >> 2) / 3uLL)
        {
          v40 = sub_20C6E7B7C();
          std::operator+<char>();
          v41 = std::string::append(&v143, ", indices size: ");
          v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v144.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v142, (uint64_t)(*(_QWORD *)(v153 + 56) - *(_QWORD *)(v153 + 48)) >> 2);
          if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v43 = &v142;
          else
            v43 = (std::string *)v142.__r_.__value_.__r.__words[0];
          if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v44 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
          else
            v44 = v142.__r_.__value_.__l.__size_;
          v45 = std::string::append(&v144, (const std::string::value_type *)v43, v44);
          v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
          v145.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v46;
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          v47 = std::string::append(&v145, ", points size: ");
          v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v146.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v141, (uint64_t)(a1[11] - a1[10]) >> 2);
          if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v49 = &v141;
          else
            v49 = (std::string *)v141.__r_.__value_.__r.__words[0];
          if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v50 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
          else
            v50 = v141.__r_.__value_.__l.__size_;
          goto LABEL_167;
        }
        v147 = 0uLL;
        v148 = 0;
        sub_20BE8B214(&v147, *(const void **)(v153 + 24), *(_QWORD *)(v153 + 32), (uint64_t)(*(_QWORD *)(v153 + 32) - *(_QWORD *)(v153 + 24)) >> 2);
        sub_20BE81ACC(v153 + 24, ((uint64_t)(*(_QWORD *)(v153 + 56) - *(_QWORD *)(v153 + 48)) >> 2) * v6);
        v8 = v153;
        v9 = *(_DWORD **)(v153 + 48);
        v10 = *(_QWORD *)(v153 + 56) - (_QWORD)v9;
        if (v10)
        {
          v11 = v10 >> 2;
          if (v11 <= 1)
            v12 = 1;
          else
            v12 = v11;
          v13 = *v9 * v6;
          if ((v13 & 0x80000000) != 0)
          {
            v18 = 1;
          }
          else
          {
            v14 = 0;
            v15 = 0;
            v16 = v147;
            v17 = (uint64_t)(*((_QWORD *)&v147 + 1) - v147) >> 2;
            v18 = 1;
            while (v17 >= (int)(v13 + v6))
            {
              if ((int)v6 >= 1)
              {
                v19 = (_DWORD *)(*(_QWORD *)(v8 + 24) + v14);
                v20 = (int *)(v16 + 4 * v13);
                v21 = v6;
                do
                {
                  v22 = *v20++;
                  *v19++ = v22;
                  --v21;
                }
                while (v21);
              }
              if (++v15 == v12)
                goto LABEL_52;
              v18 = v11 > v15;
              v13 = v9[v15] * v6;
              v14 += 4 * v6;
              if ((v13 & 0x80000000) != 0)
                break;
            }
          }
          v51 = sub_20C6E7B7C();
          std::operator+<char>();
          v52 = std::string::append(&v140, ", idxInOriginalData: ");
          v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
          v141.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v53;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v139, v13);
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v54 = &v139;
          else
            v54 = (std::string *)v139.__r_.__value_.__r.__words[0];
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v55 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          else
            v55 = v139.__r_.__value_.__l.__size_;
          v56 = std::string::append(&v141, (const std::string::value_type *)v54, v55);
          v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          v142.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          v58 = std::string::append(&v142, ", gclCPV: ");
          v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v143.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v138, v6);
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v60 = &v138;
          else
            v60 = (std::string *)v138.__r_.__value_.__r.__words[0];
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v61 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          else
            v61 = v138.__r_.__value_.__l.__size_;
          v62 = std::string::append(&v143, (const std::string::value_type *)v60, v61);
          v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          v144.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          v64 = std::string::append(&v144, ", originalData size: ");
          v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
          v145.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v65;
          v64->__r_.__value_.__l.__size_ = 0;
          v64->__r_.__value_.__r.__words[2] = 0;
          v64->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v137, (uint64_t)(*((_QWORD *)&v147 + 1) - v147) >> 2);
          if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v66 = &v137;
          else
            v66 = (std::string *)v137.__r_.__value_.__r.__words[0];
          if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v67 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
          else
            v67 = v137.__r_.__value_.__l.__size_;
          v68 = std::string::append(&v145, (const std::string::value_type *)v66, v67);
          v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
          v146.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v69;
          v68->__r_.__value_.__l.__size_ = 0;
          v68->__r_.__value_.__r.__words[2] = 0;
          v68->__r_.__value_.__r.__words[0] = 0;
          sub_20C6C3E64((os_log_t *)v51, (uint64_t *)&v146);
          if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v146.__r_.__value_.__l.__data_);
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v137.__r_.__value_.__l.__data_);
          if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v145.__r_.__value_.__l.__data_);
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v144.__r_.__value_.__l.__data_);
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v138.__r_.__value_.__l.__data_);
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v143.__r_.__value_.__l.__data_);
          if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v142.__r_.__value_.__l.__data_);
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v139.__r_.__value_.__l.__data_);
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v141.__r_.__value_.__l.__data_);
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v140.__r_.__value_.__l.__data_);
          v1 = 212;
        }
        else
        {
LABEL_52:
          v18 = 0;
          *(_QWORD *)(v8 + 56) = v9;
        }
        if ((_QWORD)v147)
        {
          *((_QWORD *)&v147 + 1) = v147;
          operator delete((void *)v147);
        }
        if (v18)
        {
          v70 = 0;
          goto LABEL_221;
        }
      }
      if (v5 != 5)
        goto LABEL_154;
      v71 = *(_DWORD **)(v153 + 48);
      v72 = *(_DWORD **)(v153 + 56);
      if (v72 == v71)
      {
        if (((uint64_t)(*(_QWORD *)(v153 + 32) - *(_QWORD *)(v153 + 24)) >> 2) / v6 == (uint64_t)(a1[8] - a1[7]) >> 2)
          goto LABEL_154;
        v23 = sub_20C6E7B7C();
        std::operator+<char>();
        v112 = std::string::append(&v141, ", data size: ");
        v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
        v142.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v113;
        v112->__r_.__value_.__l.__size_ = 0;
        v112->__r_.__value_.__r.__words[2] = 0;
        v112->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v140, (uint64_t)(*(_QWORD *)(v153 + 32) - *(_QWORD *)(v153 + 24)) >> 2);
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v114 = &v140;
        else
          v114 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v115 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v115 = v140.__r_.__value_.__l.__size_;
        v116 = std::string::append(&v142, (const std::string::value_type *)v114, v115);
        v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
        v143.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v117;
        v116->__r_.__value_.__l.__size_ = 0;
        v116->__r_.__value_.__r.__words[2] = 0;
        v116->__r_.__value_.__r.__words[0] = 0;
        v118 = std::string::append(&v143, ", gclCPV: ");
        v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
        v144.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v119;
        v118->__r_.__value_.__l.__size_ = 0;
        v118->__r_.__value_.__r.__words[2] = 0;
        v118->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v139, v6);
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v120 = &v139;
        else
          v120 = (std::string *)v139.__r_.__value_.__r.__words[0];
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v121 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        else
          v121 = v139.__r_.__value_.__l.__size_;
        v122 = std::string::append(&v144, (const std::string::value_type *)v120, v121);
        v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
        v145.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v123;
        v122->__r_.__value_.__l.__size_ = 0;
        v122->__r_.__value_.__r.__words[2] = 0;
        v122->__r_.__value_.__r.__words[0] = 0;
        v124 = std::string::append(&v145, ", faceVertexIndices size: ");
        v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
        v146.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v125;
        v124->__r_.__value_.__l.__size_ = 0;
        v124->__r_.__value_.__r.__words[2] = 0;
        v124->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v138, (uint64_t)(a1[8] - a1[7]) >> 2);
        if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = &v138;
        else
          v38 = (std::string *)v138.__r_.__value_.__r.__words[0];
        if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
        else
          v39 = v138.__r_.__value_.__l.__size_;
        goto LABEL_200;
      }
      v146.__r_.__value_.__s.__data_[0] = 0;
      v73 = sub_20C6CC340(v71, v72);
      if (*(_QWORD *)(v153 + 56) - *(_QWORD *)(v153 + 48) != a1[8] - a1[7])
      {
        v40 = sub_20C6E7B7C();
        std::operator+<char>();
        v102 = std::string::append(&v143, ", indices size: ");
        v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
        v144.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v103;
        v102->__r_.__value_.__l.__size_ = 0;
        v102->__r_.__value_.__r.__words[2] = 0;
        v102->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v142, (uint64_t)(*(_QWORD *)(v153 + 56) - *(_QWORD *)(v153 + 48)) >> 2);
        if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v104 = &v142;
        else
          v104 = (std::string *)v142.__r_.__value_.__r.__words[0];
        if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v105 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
        else
          v105 = v142.__r_.__value_.__l.__size_;
        v106 = std::string::append(&v144, (const std::string::value_type *)v104, v105);
        v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
        v145.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v107;
        v106->__r_.__value_.__l.__size_ = 0;
        v106->__r_.__value_.__r.__words[2] = 0;
        v106->__r_.__value_.__r.__words[0] = 0;
        v108 = std::string::append(&v145, ", faceVertexIndices size: ");
        v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
        v146.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v109;
        v108->__r_.__value_.__l.__size_ = 0;
        v108->__r_.__value_.__r.__words[2] = 0;
        v108->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v141, (uint64_t)(a1[8] - a1[7]) >> 2);
        if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v49 = &v141;
        else
          v49 = (std::string *)v141.__r_.__value_.__r.__words[0];
        if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v50 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
        else
          v50 = v141.__r_.__value_.__l.__size_;
LABEL_167:
        v110 = std::string::append(&v146, (const std::string::value_type *)v49, v50);
        v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
        v148 = v110->__r_.__value_.__r.__words[2];
        v147 = v111;
        v110->__r_.__value_.__l.__size_ = 0;
        v110->__r_.__value_.__r.__words[2] = 0;
        v110->__r_.__value_.__r.__words[0] = 0;
        sub_20C6C3E64((os_log_t *)v40, (uint64_t *)&v147);
        if (SHIBYTE(v148) < 0)
          operator delete((void *)v147);
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v141.__r_.__value_.__l.__data_);
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v146.__r_.__value_.__l.__data_);
        if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v145.__r_.__value_.__l.__data_);
        if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v142.__r_.__value_.__l.__data_);
        if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v144.__r_.__value_.__l.__data_);
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v143.__r_.__value_.__l.__data_);
        v70 = 0;
        v1 = 211;
        goto LABEL_221;
      }
      v75 = v73;
      v76 = v74;
      if ((*v73 & 0x80000000) == 0
        && (int)v6 + (int)v6 * *v74 <= (unint64_t)((uint64_t)(*(_QWORD *)(v153 + 32) - *(_QWORD *)(v153 + 24)) >> 2))
      {
LABEL_154:
        v70 = 1;
        goto LABEL_221;
      }
      v77 = sub_20C6E7B7C();
      std::operator+<char>();
      v78 = std::string::append(&v139, ", min: ");
      v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v138, *v75);
      if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v138;
      else
        v80 = (std::string *)v138.__r_.__value_.__r.__words[0];
      if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
      else
        v81 = v138.__r_.__value_.__l.__size_;
      v82 = std::string::append(&v140, (const std::string::value_type *)v80, v81);
      v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      v141.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      v84 = std::string::append(&v141, ", max: ");
      v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      v142.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v137, *v76);
      if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v86 = &v137;
      else
        v86 = (std::string *)v137.__r_.__value_.__r.__words[0];
      if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v87 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
      else
        v87 = v137.__r_.__value_.__l.__size_;
      v88 = std::string::append(&v142, (const std::string::value_type *)v86, v87);
      v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
      v143.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v89;
      v88->__r_.__value_.__l.__size_ = 0;
      v88->__r_.__value_.__r.__words[2] = 0;
      v88->__r_.__value_.__r.__words[0] = 0;
      v90 = std::string::append(&v143, ", gclCPV: ");
      v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v144.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v136, v6);
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v92 = &v136;
      else
        v92 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v93 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
      else
        v93 = v136.__r_.__value_.__l.__size_;
      v94 = std::string::append(&v144, (const std::string::value_type *)v92, v93);
      v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
      v145.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v95;
      v94->__r_.__value_.__l.__size_ = 0;
      v94->__r_.__value_.__r.__words[2] = 0;
      v94->__r_.__value_.__r.__words[0] = 0;
      v96 = std::string::append(&v145, ", attr.second->data.size(): ");
      v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v97;
      v96->__r_.__value_.__l.__size_ = 0;
      v96->__r_.__value_.__r.__words[2] = 0;
      v96->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v135, (uint64_t)(*(_QWORD *)(v153 + 32) - *(_QWORD *)(v153 + 24)) >> 2);
      if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v98 = &v135;
      else
        v98 = (std::string *)v135.__r_.__value_.__r.__words[0];
      if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v99 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
      else
        v99 = v135.__r_.__value_.__l.__size_;
      v100 = std::string::append(&v146, (const std::string::value_type *)v98, v99);
      v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
      v148 = v100->__r_.__value_.__r.__words[2];
      v147 = v101;
      v100->__r_.__value_.__l.__size_ = 0;
      v100->__r_.__value_.__r.__words[2] = 0;
      v100->__r_.__value_.__r.__words[0] = 0;
      sub_20C6C3E64((os_log_t *)v77, (uint64_t *)&v147);
      if (SHIBYTE(v148) < 0)
        operator delete((void *)v147);
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v135.__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v145.__r_.__value_.__l.__data_);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v143.__r_.__value_.__l.__data_);
      if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v137.__r_.__value_.__l.__data_);
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v142.__r_.__value_.__l.__data_);
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v141.__r_.__value_.__l.__data_);
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v138.__r_.__value_.__l.__data_);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v139.__r_.__value_.__l.__data_);
      v70 = 0;
      v1 = 212;
LABEL_221:
      if (SHIBYTE(v150) < 0)
        operator delete((void *)__dst);
      v128 = v154;
      if (v154)
      {
        p_shared_owners = (unint64_t *)&v154->__shared_owners_;
        do
          v130 = __ldaxr(p_shared_owners);
        while (__stlxr(v130 - 1, p_shared_owners));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
      }
      if (SHIBYTE(v152) < 0)
        operator delete((void *)v151);
      if (!v70)
        return v1;
      v131 = (__int128 *)*((_QWORD *)v2 + 1);
      if (v131)
      {
        do
        {
          v132 = v131;
          v131 = *(__int128 **)v131;
        }
        while (v131);
      }
      else
      {
        do
        {
          v132 = (__int128 *)*((_QWORD *)v2 + 2);
          v133 = *(_QWORD *)v132 == (_QWORD)v2;
          v2 = v132;
        }
        while (!v133);
      }
      v2 = v132;
    }
    while (v132 != v3);
  }
  return 0;
}

void sub_20C6C4D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  uint64_t v64;

  if (a24 < 0)
    operator delete(__p);
  if (*(char *)(v64 - 201) < 0)
    operator delete(*(void **)(v64 - 224));
  if (*(char *)(v64 - 233) < 0)
    operator delete(*(void **)(v64 - 256));
  if (a30 < 0)
    operator delete(a25);
  if (a64 < 0)
    operator delete(a59);
  if (a57 < 0)
    operator delete(a52);
  if (a36 < 0)
    operator delete(a31);
  if (a50 < 0)
    operator delete(a45);
  if (a43 < 0)
    operator delete(a38);
  if (*(char *)(v64 - 137) < 0)
    operator delete(*(void **)(v64 - 160));
  sub_20BF181E8(v64 - 136);
  _Unwind_Resume(a1);
}

void sub_20C6C5154()
{
  JUMPOUT(0x20C6C5144);
}

uint64_t sub_20C6C515C(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v4;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  char v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void **i;
  uint64_t v39;
  uint64_t v40;
  unint64_t j;
  uint64_t v42;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[24];
  void **v55[3];
  const std::string::value_type *v56;
  std::__shared_weak_count *v57;
  pxrInternal__aapl__pxrReserved__ *v58;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v59;
  int v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  if (!*(_BYTE *)a1)
  {
    v8 = sub_20C6E7B7C();
    v9 = "toUsdMesh: Invalid mesh";
    goto LABEL_10;
  }
  v4 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)sub_20C35C4F8((uint64_t)&v72, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredAttributes(v4, (uint64_t *)&v69);
  v5 = v69;
  *(_QWORD *)&v66 = &v69;
  sub_20C3AEE3C((void ***)&v66);
  if ((BYTE8(v73) & 7) != 0)
  {
    v6 = (unsigned int *)(*((_QWORD *)&v73 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v73 + 1);
  sub_20BFD265C(&v73);
  if (*((_QWORD *)&v72 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v72 + 1));
  if (*((_QWORD *)&v5 + 1) == (_QWORD)v5)
  {
    v74 = 0;
    v72 = 0u;
    v73 = 0u;
    if (*(_BYTE *)(a1 + 104) != 1)
    {
      v50 = sub_20C6E7B7C();
      sub_20BDDC0E4(&v69, "toUsdMesh: Quantization for points should be UNIFORM");
      sub_20C6C3E64((os_log_t *)v50, (uint64_t *)&v69);
      if (SBYTE7(v70) < 0)
        operator delete((void *)v69);
      v10 = 112;
      goto LABEL_84;
    }
    v10 = sub_20C6C58CC((_QWORD *)(a1 + 80), (unint64_t *)&v72, a1 + 104, 3);
    if ((_DWORD)v10)
    {
LABEL_84:
      sub_20BF5618C((uint64_t)&v72);
      return v10;
    }
    v71 = 0;
    v69 = 0u;
    v70 = 0u;
    if ((_QWORD)v72)
    {
      v13 = 0;
      do
      {
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v72, v11, v12);
        LODWORD(v66) = *(_DWORD *)(v74 + 4 * v13);
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v72, v14, v15);
        DWORD1(v66) = *(_DWORD *)(v74 + 4 * v13 + 4);
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v72, v16, v17);
        DWORD2(v66) = *(_DWORD *)(v74 + 4 * v13 + 8);
        sub_20C6CD438((uint64_t)&v69, (uint64_t *)&v66);
        v13 += 3;
      }
      while ((unint64_t)v72 > v13);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)a2, (uint64_t)&v66);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__ **)&v66, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v69, NAN);
    if ((BYTE8(v67) & 7) != 0)
    {
      v18 = (unsigned int *)(*((_QWORD *)&v67 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v67 + 1);
    sub_20BFD265C(&v67);
    if (*((_QWORD *)&v66 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v66 + 1));
    v68 = 0;
    v66 = 0u;
    v67 = 0u;
    sub_20C6C59E4((unint64_t *)&v66, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)a2, (uint64_t)&v63);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__ **)&v63, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v66, NAN);
    if ((BYTE8(v64) & 7) != 0)
    {
      v20 = (unsigned int *)(*((_QWORD *)&v64 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v64 + 1);
    sub_20BFD265C(&v64);
    if (*((_QWORD *)&v63 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v63 + 1));
    v65 = 0;
    v63 = 0u;
    v64 = 0u;
    sub_20C6C59E4((unint64_t *)&v63, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)a2, (uint64_t)&v58);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<int>>(&v58, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v63, NAN);
    if ((v62 & 7) != 0)
    {
      v22 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v61);
    sub_20BFD265C(&v60);
    if (v59)
      sub_20C35C614(v59);
    v24 = *(_QWORD **)(a1 + 216);
    if (v24 != (_QWORD *)(a1 + 224))
    {
      while (1)
      {
        v25 = (std::__shared_weak_count *)v24[8];
        v56 = (const std::string::value_type *)v24[7];
        v57 = v25;
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(p_shared_owners);
          while (__stxr(v27 + 1, p_shared_owners));
        }
        v28 = sub_20C6D3768(&v56, a2);
        v29 = v57;
        if (v57)
        {
          v30 = (unint64_t *)&v57->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if ((v28 & 1) == 0)
          break;
        v32 = (_QWORD *)v24[1];
        if (v32)
        {
          do
          {
            v33 = v32;
            v32 = (_QWORD *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            v33 = (_QWORD *)v24[2];
            v34 = *v33 == (_QWORD)v24;
            v24 = v33;
          }
          while (!v34);
        }
        v24 = v33;
        if (v33 == (_QWORD *)(a1 + 224))
          goto LABEL_49;
      }
      v10 = 150;
      goto LABEL_83;
    }
LABEL_49:
    v35 = *(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192);
    if (v35 && *(_QWORD *)(a1 + 152) != *(_QWORD *)(a1 + 144))
    {
      sub_20C653074(&v58, 0xAAAAAAAAAAAAAAABLL * (v35 >> 3));
      LODWORD(v53) = 0;
      v36 = *(_QWORD *)(a1 + 144);
      if (*(_QWORD *)(a1 + 152) != v36)
      {
        v37 = 0;
        do
        {
          sub_20C6CD190(v55, *(_QWORD *)(a1 + 168) + 24 * *(int *)(v36 + 4 * v37));
          for (i = v55[1]; i != (void **)v55; i = (void **)i[1])
            sub_20C59A7A4((uint64_t)v58 + 40 * *((int *)i + 4), &v53);
          sub_20BEB422C(v55);
          v37 = (int)v53 + 1;
          LODWORD(v53) = v53 + 1;
          v36 = *(_QWORD *)(a1 + 144);
        }
        while (v37 < (*(_QWORD *)(a1 + 152) - v36) >> 2);
      }
      v40 = *(_QWORD *)(a1 + 192);
      v39 = *(_QWORD *)(a1 + 200);
      if (v39 != v40)
      {
        for (j = 0; 0xAAAAAAAAAAAAAAABLL * ((v39 - v40) >> 3) > j; ++j)
        {
          v42 = v40 + 24 * j;
          if (*(char *)(v42 + 23) < 0)
          {
            if (*(_QWORD *)(v42 + 8))
            {
LABEL_63:
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v55);
              v43 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
              if (!v43)
                v43 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
              v52 = 0;
              v53 = 0;
              pxrInternal__aapl__pxrReserved__::UsdGeomSubset::CreateGeomSubset(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v55, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v43 + 312), (pxrInternal__aapl__pxrReserved__ *)((char *)v58 + 40 * j), (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v54);
              pxrInternal__aapl__pxrReserved__::UsdGeomSubset::~UsdGeomSubset((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v54);
              if ((v52 & 7) != 0)
              {
                v44 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
                do
                  v45 = __ldxr(v44);
                while (__stlxr(v45 - 2, v44));
              }
              if ((v53 & 7) != 0)
              {
                v46 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
                do
                  v47 = __ldxr(v46);
                while (__stlxr(v47 - 2, v46));
              }
              if (((uint64_t)v55[0] & 7) != 0)
              {
                v48 = (unsigned int *)((unint64_t)v55[0] & 0xFFFFFFFFFFFFFFF8);
                do
                  v49 = __ldxr(v48);
                while (__stlxr(v49 - 2, v48));
              }
              v40 = *(_QWORD *)(a1 + 192);
              v39 = *(_QWORD *)(a1 + 200);
            }
          }
          else if (*(_BYTE *)(v42 + 23))
          {
            goto LABEL_63;
          }
        }
      }
      v55[0] = (void **)&v58;
      sub_20C642144(v55);
    }
    v10 = 0;
LABEL_83:
    sub_20BF5618C((uint64_t)&v63);
    sub_20BF5618C((uint64_t)&v66);
    sub_20BF5618C((uint64_t)&v69);
    goto LABEL_84;
  }
  v8 = sub_20C6E7B7C();
  v9 = "toUsdMesh: Invalid mesh, authored attributes present in output mesh";
LABEL_10:
  sub_20BDDC0E4(&v72, v9);
  sub_20C6C3E64((os_log_t *)v8, (uint64_t *)&v72);
  if (SBYTE7(v73) < 0)
    operator delete((void *)v72);
  return 201;
}

void sub_20C6C5754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  unsigned int *v31;
  unsigned int v32;

  if ((a14 & 7) != 0)
  {
    v31 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  a14 = (unint64_t)&a19;
  sub_20C642144((void ***)&a14);
  sub_20BF5618C((uint64_t)&a23);
  sub_20BF5618C((uint64_t)&a29);
  sub_20BF5618C(v29 - 160);
  sub_20BF5618C(v29 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6C58CC(_QWORD *a1, unint64_t *a2, uint64_t a3, int a4)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v10;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  int v23;
  _DWORD *v24[15];

  if (a4 < 1)
    return 112;
  v24[1] = v7;
  v24[2] = v6;
  v24[13] = v4;
  v24[14] = v5;
  v10 = a1[1] - *a1;
  result = 112;
  if ((int)(v10 >> 2) >= a4 && !((int)(v10 >> 2) % a4))
  {
    v23 = 0;
    v24[0] = &v23;
    sub_20BF56258(a2, (v10 >> 2), v24);
    v16 = 0;
    v17 = 0;
    v18 = *(float *)(a3 + 4);
    v19 = (int)((uint64_t)v10 >> 2);
    v20 = 4 * a4;
    do
    {
      v21 = 0;
      do
      {
        v22 = (float)(v18 * (float)*(int *)(*a1 + v16 + v21)) + *(float *)(*(_QWORD *)(a3 + 8) + v21);
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v14, v15);
        *(float *)(a2[4] + v16 + v21) = v22;
        v21 += 4;
      }
      while (v20 != v21);
      v17 += a4;
      v16 += v20;
    }
    while (v17 < v19);
    return 0;
  }
  return result;
}

void sub_20C6C59E4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  int **v6[2];
  uint64_t v7;
  uint64_t v8;

  v7 = a3;
  v8 = a2;
  sub_20BF56210(a1);
  v6[0] = (int **)&v8;
  v6[1] = (int **)&v7;
  sub_20C6CD5CC(a1, (a3 - a2) >> 2, v6);
}

BOOL sub_20C6C5A40(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) != 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      sub_20BEB9180();
    return memcmp(a1, __s, v4) != 0;
  }
  return 1;
}

BOOL sub_20C6C5AD0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unsigned int v3;
  _BOOL8 result;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v1 = *(_QWORD **)(a1 + 216);
  v2 = (_QWORD *)(a1 + 224);
  if (v1 == (_QWORD *)(a1 + 224))
    return 0;
  do
  {
    v3 = *(unsigned __int8 *)(v1[7] + 136) - 5;
    result = v3 < 0xFFFFFFFE;
    if (v3 < 0xFFFFFFFE)
      break;
    v5 = (_QWORD *)v1[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v1[2];
        v7 = *v6 == (_QWORD)v1;
        v1 = v6;
      }
      while (!v7);
    }
    v1 = v6;
  }
  while (v6 != v2);
  return result;
}

uint64_t sub_20C6C5B3C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  std::string v21;
  std::string v22;
  std::string v23;
  __int128 v24;
  std::string::size_type v25;

  v1 = *(_QWORD **)(a1 + 216);
  if (v1 == (_QWORD *)(a1 + 224))
    return 1;
  while (*(unsigned __int8 *)(v1[7] + 136) - 3 < 3)
  {
    v2 = (_QWORD *)v1[1];
    if (v2)
    {
      do
      {
        v3 = v2;
        v2 = (_QWORD *)*v2;
      }
      while (v2);
    }
    else
    {
      do
      {
        v3 = (_QWORD *)v1[2];
        v4 = *v3 == (_QWORD)v1;
        v1 = v3;
      }
      while (!v4);
    }
    v1 = v3;
    if (v3 == (_QWORD *)(a1 + 224))
      return 1;
  }
  v6 = sub_20C6E7B7C();
  std::operator+<char>();
  v7 = std::string::append(&v21, ": interpolation ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  sub_20C6C5D7C(*(_BYTE *)(v1[7] + 136), (unsigned int **)&v20);
  if ((v20 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((v20 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  v11 = *((char *)EmptyString + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)EmptyString;
  else
    v12 = (const std::string::value_type *)*EmptyString;
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)EmptyString + 23);
  else
    v13 = EmptyString[1];
  v14 = std::string::append(&v22, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v23, " not supported");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v25 = v16->__r_.__value_.__r.__words[2];
  v24 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&v24);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if ((v20 & 7) != 0)
  {
    v18 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return 0;
}

void sub_20C6C5D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  unsigned int *v29;
  unsigned int v30;

  if (a28 < 0)
    operator delete(__p);
  if ((a9 & 7) != 0)
  {
    v29 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C6C5D7C(unsigned __int8 a1@<W0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t *v30[3];
  unsigned __int8 v31;
  _BYTE *v32[2];
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v31 = a1;
  LOBYTE(v32[0]) = 0;
  v32[1] = 0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v33 = 1;
  v4 = *((_QWORD *)v3 + 17);
  v34 = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7)
    v7 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v35 = 2;
  v8 = *((_QWORD *)v7 + 145);
  v36 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v36 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v11)
    v11 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v37 = 3;
  v12 = *((_QWORD *)v11 + 151);
  v38 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v38 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v15)
    v15 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v39 = 4;
  v16 = *((_QWORD *)v15 + 153);
  v40 = v16;
  if ((v16 & 7) != 0)
  {
    v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 2, v17));
    if ((v18 & 1) == 0)
      v40 &= 0xFFFFFFFFFFFFFFF8;
  }
  v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v19)
    v19 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v41 = 5;
  v20 = *((_QWORD *)v19 + 40);
  v42 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20C6CBAE8((uint64_t)v30, (unsigned __int8 *)v32, 6);
  v23 = &v43;
  do
  {
    v24 = *(v23 - 1);
    if ((v24 & 7) != 0)
    {
      v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    v23 -= 2;
  }
  while (v23 != (uint64_t *)v32);
  v32[0] = &v31;
  v27 = (unint64_t)sub_20C6CBE08(v30, &v31, (uint64_t)&unk_20CAC184C, v32)[5];
  *a2 = (unsigned int *)v27;
  if ((v27 & 7) != 0)
  {
    v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 2, v28));
    if ((v29 & 1) == 0)
      *a2 = v28;
  }
  sub_20BF383C0((uint64_t)v30, v30[1]);
}

void sub_20C6C6058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  char *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;

  while (1)
  {
    v15 = *((_QWORD *)v14 - 1);
    if ((v15 & 7) != 0)
    {
      v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    v14 -= 16;
    if (v14 == &a14)
      _Unwind_Resume(exception_object);
  }
}

uint64_t sub_20C6C60F0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  std::string::size_type v16;
  _QWORD *v17;
  std::string **v18;
  std::string *v19;
  std::string *v20;
  int v21;
  std::string::pointer data;
  size_t v23;
  const void *v24;
  std::string::size_type size;
  std::string::pointer v26;
  std::string::__raw *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  _DWORD *v32;
  int *v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  _DWORD *v39;
  std::string::size_type v40;
  std::string::size_type v41;
  _DWORD *v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  int v49;
  __int128 v50;
  __int128 v51;
  std::string::size_type v52;
  void *v53;
  std::string::size_type v54;
  std::string::size_type v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  int v63;
  int v64;
  BOOL v65;
  std::string::size_type v66;
  std::string::size_type v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  int64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  std::string::size_type v76;
  std::string::size_type v77;
  uint64_t *v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  std::string::size_type v87;
  uint64_t v88;
  int v89;
  std::string::size_type v90;
  std::string::size_type v91;
  int *v92;
  _QWORD *v93;
  _DWORD *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  int v110;
  std::string::size_type v111;
  int *i;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::string::size_type v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  _DWORD *v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  int v131;
  std::string::size_type v132;
  int *j;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  std::string::size_type v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  _DWORD *v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  int v153;
  __int128 v154;
  char *v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t *v162;
  std::string *v163;
  __int128 v164;
  std::string *v165;
  std::string::size_type v166;
  std::string *v167;
  __int128 v168;
  std::string *v169;
  __int128 v170;
  std::string *v171;
  std::string::size_type v172;
  std::string *v173;
  __int128 v174;
  os_log_t *v175;
  uint64_t *v176;
  std::string *v177;
  __int128 v178;
  uint64_t *v179;
  std::string *v180;
  __int128 v181;
  std::string *v182;
  std::string::size_type v183;
  std::string *v184;
  __int128 v185;
  std::string *v186;
  __int128 v187;
  std::string *v188;
  std::string::size_type v189;
  std::string *v190;
  __int128 v191;
  void *v192;
  uint64_t *v193;
  std::string::size_type v194;
  uint64_t v195;
  uint64_t v196;
  int __val[2];
  int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  std::string::size_type v205;
  std::string::size_type v206;
  void *__p[2];
  __int128 v208;
  int v209;
  std::string v210;
  std::string v211;
  std::string v212;
  std::string v213;
  std::string v214;
  std::string v215;
  std::string v216;
  std::string v217;
  std::string v218;
  void *v219[3];
  __int128 v220;
  uint64_t v221;
  __int128 v222;
  char *v223;

  v1 = a1;
  if (!sub_20C6C5AD0(a1))
    return 0;
  v2 = (uint64_t)(*(_QWORD *)(v1 + 88) - *(_QWORD *)(v1 + 80)) >> 2;
  if (0xAAAAAAAAAAAAAAABLL * v2 >= 0x5555555555555556)
  {
    v3 = sub_20C6E7B7C();
    sub_20BDDC0E4(__p, "unifyIndices: Size of points should be a multiple of 3");
    sub_20C6C3E64((os_log_t *)v3, (uint64_t *)__p);
    if (SBYTE7(v208) < 0)
      operator delete(__p[0]);
    return 110;
  }
  *(_QWORD *)__val = *(_QWORD *)(v1 + 232);
  v7 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 64);
  v222 = 0uLL;
  v223 = 0;
  sub_20BE857FC((void **)&v222, v2);
  sub_20BDE39A0(&v220, (uint64_t)(*(_QWORD *)(v1 + 64) - *(_QWORD *)(v1 + 56)) >> 2);
  __p[0] = 0;
  sub_20C6CD7AC(v219, __val[0], __p);
  v8 = *(_QWORD **)(v1 + 216);
  if (v8 == (_QWORD *)(v1 + 224))
  {
    LODWORD(v9) = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      *((_QWORD *)v219[0] + v9) = v8[7];
      v10 = (_QWORD *)v8[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v8[2];
          v65 = *v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v65);
      }
      ++v9;
      v8 = v11;
    }
    while (v11 != (_QWORD *)(v1 + 224));
  }
  if ((_DWORD)v9 == __val[0])
  {
    sub_20C6CD82C(&v218, __val[0]);
    v12 = (unint64_t)(v6 - v7) >> 2;
    memset(&v217, 0, sizeof(v217));
    memset(&v216, 0, sizeof(v216));
    v13 = v12;
    *(_BYTE *)(v1 + 1) = 0;
    v195 = v1;
    v200 = v12;
    if (__val[0] >= 1)
    {
      v14 = 0;
      v198 = v12;
      while (1)
      {
        v15 = (std::string *)*((_QWORD *)v219[0] + v14);
        v16 = v218.__r_.__value_.__r.__words[0];
        v17 = operator new(0x98uLL);
        v17[10] = 0;
        v17[11] = 0;
        v18 = (std::string **)(v16 + 16 * v14);
        v17[12] = 0;
        v17[15] = 0;
        v17[16] = 0;
        v17[14] = 0;
        *(_OWORD *)v17 = 0u;
        *((_OWORD *)v17 + 1) = 0u;
        *((_OWORD *)v17 + 2) = 0u;
        *((_OWORD *)v17 + 3) = 0u;
        v17[8] = 0;
        sub_20C6C74FC(v18, (uint64_t)v17);
        std::string::operator=(*v18, v15);
        v19 = *v18;
        v19[3].__r_.__value_.__r.__words[0] = v15[3].__r_.__value_.__r.__words[0];
        if (v19 != v15)
          sub_20BE8B37C(&v19[3].__r_.__value_.__s.__data_[8], (char *)v15[3].__r_.__value_.__l.__size_, v15[3].__r_.__value_.__r.__words[2], (uint64_t)(v15[3].__r_.__value_.__r.__words[2] - v15[3].__r_.__value_.__l.__size_) >> 2);
        LODWORD(v19[4].__r_.__value_.__r.__words[1]) = v15[4].__r_.__value_.__r.__words[1];
        std::string::operator=((std::string *)((char *)*v18 + 112), (std::string *)((char *)v15 + 112));
        v20 = *v18;
        v20[5].__r_.__value_.__s.__data_[16] = v15[5].__r_.__value_.__s.__data_[16];
        *(std::string::size_type *)((char *)&v20[5].__r_.__value_.__r.__words[2] + 4) = *(std::string::size_type *)((char *)&v15[5].__r_.__value_.__r.__words[2] + 4);
        v20[6].__r_.__value_.__s.__data_[4] = v15[6].__r_.__value_.__s.__data_[4];
        v21 = v15[5].__r_.__value_.__s.__data_[16];
        if (v21 == 5)
        {
          data = v15[2].__r_.__value_.__l.__data_;
          v23 = v15[2].__r_.__value_.__l.__size_ - (_QWORD)data;
          v24 = *(const void **)(v1 + 56);
          if (v23 != *(_QWORD *)(v1 + 64) - (_QWORD)v24 || memcmp(data, v24, v23))
          {
LABEL_32:
            v26 = v15[2].__r_.__value_.__l.__data_;
            size = v15[2].__r_.__value_.__l.__size_;
            v27 = (std::string::__raw *)&v15[2];
            if (v26 == (std::string::pointer)size)
            {
              v28 = (uint64_t)(*(_QWORD *)(v1 + 64) - *(_QWORD *)(v1 + 56)) >> 2;
              v203 = SHIDWORD(v15[5].__r_.__value_.__r.__words[2]);
              if (v28 * v203 != (uint64_t)(v15[1].__r_.__value_.__l.__size_ - v15[1].__r_.__value_.__r.__words[0]) >> 2)
              {
                v179 = sub_20C6E7B7C();
                std::operator+<char>();
                v180 = std::string::append(&v212, " has incorrect size ");
                v181 = *(_OWORD *)&v180->__r_.__value_.__l.__data_;
                v213.__r_.__value_.__r.__words[2] = v180->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v181;
                v180->__r_.__value_.__l.__size_ = 0;
                v180->__r_.__value_.__r.__words[2] = 0;
                v180->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v211, (uint64_t)(v15[1].__r_.__value_.__l.__size_ - v15[1].__r_.__value_.__r.__words[0]) >> 2);
                if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v182 = &v211;
                else
                  v182 = (std::string *)v211.__r_.__value_.__r.__words[0];
                if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v183 = HIBYTE(v211.__r_.__value_.__r.__words[2]);
                else
                  v183 = v211.__r_.__value_.__l.__size_;
                v184 = std::string::append(&v213, (const std::string::value_type *)v182, v183);
                v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
                v214.__r_.__value_.__r.__words[2] = v184->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v185;
                v184->__r_.__value_.__l.__size_ = 0;
                v184->__r_.__value_.__r.__words[2] = 0;
                v184->__r_.__value_.__r.__words[0] = 0;
                v186 = std::string::append(&v214, " vs ");
                v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
                v215.__r_.__value_.__r.__words[2] = v186->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v187;
                v186->__r_.__value_.__l.__size_ = 0;
                v186->__r_.__value_.__r.__words[2] = 0;
                v186->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v210, ((uint64_t)(*(_QWORD *)(v1 + 64) - *(_QWORD *)(v1 + 56)) >> 2) * v203);
                if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v188 = &v210;
                else
                  v188 = (std::string *)v210.__r_.__value_.__r.__words[0];
                if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v189 = HIBYTE(v210.__r_.__value_.__r.__words[2]);
                else
                  v189 = v210.__r_.__value_.__l.__size_;
                v190 = std::string::append(&v215, (const std::string::value_type *)v188, v189);
                v191 = *(_OWORD *)&v190->__r_.__value_.__l.__data_;
                *(_QWORD *)&v208 = *((_QWORD *)&v190->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v191;
                v190->__r_.__value_.__l.__size_ = 0;
                v190->__r_.__value_.__r.__words[2] = 0;
                v190->__r_.__value_.__r.__words[0] = 0;
                v175 = (os_log_t *)v179;
LABEL_253:
                sub_20C6C3E64(v175, (uint64_t *)__p);
                if (SBYTE7(v208) < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v210.__r_.__value_.__l.__data_);
                if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v215.__r_.__value_.__l.__data_);
                if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v214.__r_.__value_.__l.__data_);
                if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v211.__r_.__value_.__l.__data_);
                if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v213.__r_.__value_.__l.__data_);
                if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
                {
                  v192 = (void *)v212.__r_.__value_.__r.__words[0];
                  goto LABEL_267;
                }
                goto LABEL_269;
              }
              sub_20BE81ACC((uint64_t)&v15[2], v28);
              *(_OWORD *)__p = 0u;
              v208 = 0u;
              v209 = 1065353216;
              memset(&v215, 0, sizeof(v215));
              sub_20BDE39A0(&v214, v203);
              v201 = v14;
              sub_20BE857FC((void **)&v215.__r_.__value_.__l.__data_, (uint64_t)(v15[1].__r_.__value_.__l.__size_ - v15[1].__r_.__value_.__r.__words[0]) >> 2);
              if ((int)v12 >= 1)
              {
                v29 = 0;
                v30 = 0;
                v31 = 0;
                do
                {
                  if ((int)v203 >= 1)
                  {
                    v32 = (_DWORD *)v214.__r_.__value_.__r.__words[0];
                    v33 = (int *)(v15[1].__r_.__value_.__r.__words[0] + 4 * v31);
                    v31 += v203;
                    v34 = v203;
                    do
                    {
                      v35 = *v33++;
                      *v32++ = v35;
                      --v34;
                    }
                    while (v34);
                  }
                  v36 = sub_20C6C756C(__p, (int **)&v214);
                  if (v36)
                  {
                    *(_DWORD *)(v27->__words[0] + 4 * v29) = *((_DWORD *)v36 + 10);
                  }
                  else
                  {
                    v37 = v30 + 1;
                    *(_DWORD *)sub_20C6C76A8((uint64_t)__p, (int **)&v214) = v30;
                    *(_DWORD *)(v27->__words[0] + 4 * v29) = v30;
                    if ((int)v203 < 1)
                    {
                      ++v30;
                    }
                    else
                    {
                      v38 = 0;
                      v39 = (_DWORD *)v215.__r_.__value_.__l.__size_;
                      do
                      {
                        v40 = v214.__r_.__value_.__r.__words[0];
                        if ((unint64_t)v39 >= v215.__r_.__value_.__r.__words[2])
                        {
                          v42 = (_DWORD *)v215.__r_.__value_.__r.__words[0];
                          v43 = (uint64_t)((uint64_t)v39 - v215.__r_.__value_.__r.__words[0]) >> 2;
                          v44 = v43 + 1;
                          if ((unint64_t)(v43 + 1) >> 62)
                            sub_20BDDF694();
                          v45 = v215.__r_.__value_.__r.__words[2] - v215.__r_.__value_.__r.__words[0];
                          if ((uint64_t)(v215.__r_.__value_.__r.__words[2] - v215.__r_.__value_.__r.__words[0]) >> 1 > v44)
                            v44 = v45 >> 1;
                          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
                            v46 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v46 = v44;
                          if (v46)
                          {
                            v47 = (char *)sub_20BDE1330((uint64_t)&v215.__r_.__value_.__r.__words[2], v46);
                            v39 = (_DWORD *)v215.__r_.__value_.__l.__size_;
                            v42 = (_DWORD *)v215.__r_.__value_.__r.__words[0];
                          }
                          else
                          {
                            v47 = 0;
                          }
                          v48 = &v47[4 * v43];
                          *(_DWORD *)v48 = *(_DWORD *)(v40 + 4 * v38);
                          v41 = (std::string::size_type)(v48 + 4);
                          while (v39 != v42)
                          {
                            v49 = *--v39;
                            *((_DWORD *)v48 - 1) = v49;
                            v48 -= 4;
                          }
                          v215.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
                          v215.__r_.__value_.__l.__size_ = v41;
                          v215.__r_.__value_.__r.__words[2] = (std::string::size_type)&v47[4 * v46];
                          if (v42)
                            operator delete(v42);
                        }
                        else
                        {
                          *v39 = *(_DWORD *)(v214.__r_.__value_.__r.__words[0] + 4 * v38);
                          v41 = (std::string::size_type)(v39 + 1);
                        }
                        v215.__r_.__value_.__l.__size_ = v41;
                        ++v38;
                        v39 = (_DWORD *)v41;
                      }
                      while (v38 != v203);
                      v30 = v37;
                      v13 = v200;
                    }
                  }
                  ++v29;
                }
                while (v29 != v13);
              }
              v50 = *(_OWORD *)&v15[1].__r_.__value_.__l.__data_;
              v51 = *(_OWORD *)&v215.__r_.__value_.__l.__data_;
              *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v50;
              *(_OWORD *)&v15[1].__r_.__value_.__l.__data_ = v51;
              v52 = v215.__r_.__value_.__r.__words[2];
              v215.__r_.__value_.__r.__words[2] = v15[1].__r_.__value_.__r.__words[2];
              v15[1].__r_.__value_.__r.__words[2] = v52;
              if (v214.__r_.__value_.__r.__words[0])
              {
                v214.__r_.__value_.__l.__size_ = v214.__r_.__value_.__r.__words[0];
                operator delete(v214.__r_.__value_.__l.__data_);
                v53 = (void *)v215.__r_.__value_.__r.__words[0];
              }
              else
              {
                v53 = (void *)v50;
              }
              v1 = v195;
              v14 = v201;
              LODWORD(v12) = v198;
              if (v53)
              {
                v215.__r_.__value_.__l.__size_ = (std::string::size_type)v53;
                operator delete(v53);
              }
              sub_20BECB20C((uint64_t)__p);
              v26 = v15[2].__r_.__value_.__l.__data_;
              size = v15[2].__r_.__value_.__l.__size_;
            }
            if (((size - (unint64_t)v26) >> 2) != (_DWORD)v12)
            {
              v162 = sub_20C6E7B7C();
              std::operator+<char>();
              v163 = std::string::append(&v212, " has incorrect indices size ");
              v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
              v213.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v164;
              v163->__r_.__value_.__l.__size_ = 0;
              v163->__r_.__value_.__r.__words[2] = 0;
              v163->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v211, (uint64_t)(v15[2].__r_.__value_.__l.__size_ - v15[2].__r_.__value_.__r.__words[0]) >> 2);
              if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v165 = &v211;
              else
                v165 = (std::string *)v211.__r_.__value_.__r.__words[0];
              if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v166 = HIBYTE(v211.__r_.__value_.__r.__words[2]);
              else
                v166 = v211.__r_.__value_.__l.__size_;
              v167 = std::string::append(&v213, (const std::string::value_type *)v165, v166);
              v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
              v214.__r_.__value_.__r.__words[2] = v167->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v168;
              v167->__r_.__value_.__l.__size_ = 0;
              v167->__r_.__value_.__r.__words[2] = 0;
              v167->__r_.__value_.__r.__words[0] = 0;
              v169 = std::string::append(&v214, " vs index count");
              v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
              v215.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v170;
              v169->__r_.__value_.__l.__size_ = 0;
              v169->__r_.__value_.__r.__words[2] = 0;
              v169->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v210, v12);
              if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v171 = &v210;
              else
                v171 = (std::string *)v210.__r_.__value_.__r.__words[0];
              if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v172 = HIBYTE(v210.__r_.__value_.__r.__words[2]);
              else
                v172 = v210.__r_.__value_.__l.__size_;
              v173 = std::string::append(&v215, (const std::string::value_type *)v171, v172);
              v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
              *(_QWORD *)&v208 = *((_QWORD *)&v173->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v174;
              v173->__r_.__value_.__l.__size_ = 0;
              v173->__r_.__value_.__r.__words[2] = 0;
              v173->__r_.__value_.__r.__words[0] = 0;
              v175 = (os_log_t *)v162;
              goto LABEL_253;
            }
            (*v18)[5].__r_.__value_.__s.__data_[16] = 4;
            v64 = SHIBYTE(v15->__r_.__value_.__r.__words[2]);
            if (v64 < 0)
            {
              if (v15->__r_.__value_.__l.__size_ != 7)
              {
LABEL_100:
                v66 = v217.__r_.__value_.__l.__size_;
                if (v217.__r_.__value_.__l.__size_ >= v217.__r_.__value_.__r.__words[2])
                {
                  v68 = (void *)v217.__r_.__value_.__r.__words[0];
                  v69 = (uint64_t)(v217.__r_.__value_.__l.__size_ - v217.__r_.__value_.__r.__words[0]) >> 2;
                  v70 = v69 + 1;
                  if ((unint64_t)(v69 + 1) >> 62)
LABEL_286:
                    sub_20BDDF694();
                  v71 = v217.__r_.__value_.__r.__words[2] - v217.__r_.__value_.__r.__words[0];
                  if ((uint64_t)(v217.__r_.__value_.__r.__words[2] - v217.__r_.__value_.__r.__words[0]) >> 1 > v70)
                    v70 = v71 >> 1;
                  if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
                    v72 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v72 = v70;
                  if (v72)
                  {
                    v73 = (char *)sub_20BDE1330((uint64_t)&v217.__r_.__value_.__r.__words[2], v72);
                    v66 = v217.__r_.__value_.__l.__size_;
                    v68 = (void *)v217.__r_.__value_.__r.__words[0];
                  }
                  else
                  {
                    v73 = 0;
                  }
                  v74 = &v73[4 * v69];
                  *(_DWORD *)v74 = v14;
                  v67 = (std::string::size_type)(v74 + 4);
                  while ((void *)v66 != v68)
                  {
                    v75 = *(_DWORD *)(v66 - 4);
                    v66 -= 4;
                    *((_DWORD *)v74 - 1) = v75;
                    v74 -= 4;
                  }
                  v217.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
                  v217.__r_.__value_.__l.__size_ = v67;
                  v217.__r_.__value_.__r.__words[2] = (std::string::size_type)&v73[4 * v72];
                  if (v68)
                    operator delete(v68);
                }
                else
                {
                  *(_DWORD *)v217.__r_.__value_.__l.__size_ = v14;
                  v67 = v66 + 4;
                }
                v217.__r_.__value_.__l.__size_ = v67;
                goto LABEL_117;
              }
              v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
            }
            else if (v64 != 7)
            {
              goto LABEL_100;
            }
            v65 = LODWORD(v15->__r_.__value_.__l.__data_) == 1836216174
               && *(_DWORD *)((char *)v15->__r_.__value_.__r.__words + 3) == 1936482669;
            if (v65)
            {
              MEMORY[0x212B929D0]();
              (*v18)[6].__r_.__value_.__s.__data_[4] = 1;
              *(_BYTE *)(v1 + 1) = 1;
            }
            goto LABEL_100;
          }
          v15[5].__r_.__value_.__s.__data_[16] = 4;
          sub_20BE81ACC((uint64_t)&v15[2], 0);
          v21 = v15[5].__r_.__value_.__s.__data_[16];
        }
        if ((v21 - 3) > 1)
        {
          if (v21 == 5)
            goto LABEL_32;
          if (v15[2].__r_.__value_.__r.__words[0] != v15[2].__r_.__value_.__l.__size_)
          {
            v193 = sub_20C6E7B7C();
            std::operator+<char>();
            sub_20C6C3E64((os_log_t *)v193, (uint64_t *)__p);
            if ((SBYTE7(v208) & 0x80000000) == 0)
              goto LABEL_269;
            v192 = __p[0];
LABEL_267:
            operator delete(v192);
LABEL_269:
            v4 = 202;
            goto LABEL_270;
          }
        }
        else
        {
          if (v15[2].__r_.__value_.__l.__size_ != v15[2].__r_.__value_.__r.__words[0])
          {
            v176 = sub_20C6E7B7C();
            std::operator+<char>();
            v177 = std::string::append(&v215, " cannot both be Vertex/Varying Interpolation and have indices.");
            v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
            *(_QWORD *)&v208 = *((_QWORD *)&v177->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v178;
            v177->__r_.__value_.__l.__size_ = 0;
            v177->__r_.__value_.__r.__words[2] = 0;
            v177->__r_.__value_.__r.__words[0] = 0;
            sub_20C6C3E64((os_log_t *)v176, (uint64_t *)__p);
            if (SBYTE7(v208) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v215.__r_.__value_.__l.__data_);
            v4 = 110;
            goto LABEL_270;
          }
          if (v21 == 3)
            goto LABEL_67;
        }
        LOBYTE(v21) = 4;
LABEL_67:
        (*v18)[5].__r_.__value_.__s.__data_[16] = v21;
        v54 = v216.__r_.__value_.__l.__size_;
        if (v216.__r_.__value_.__l.__size_ >= v216.__r_.__value_.__r.__words[2])
        {
          v56 = (void *)v216.__r_.__value_.__r.__words[0];
          v57 = (uint64_t)(v216.__r_.__value_.__l.__size_ - v216.__r_.__value_.__r.__words[0]) >> 2;
          v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 62)
            goto LABEL_286;
          v59 = v216.__r_.__value_.__r.__words[2] - v216.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v216.__r_.__value_.__r.__words[2] - v216.__r_.__value_.__r.__words[0]) >> 1 > v58)
            v58 = v59 >> 1;
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
            v60 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v60 = v58;
          if (v60)
          {
            v61 = (char *)sub_20BDE1330((uint64_t)&v216.__r_.__value_.__r.__words[2], v60);
            v54 = v216.__r_.__value_.__l.__size_;
            v56 = (void *)v216.__r_.__value_.__r.__words[0];
          }
          else
          {
            v61 = 0;
          }
          v62 = &v61[4 * v57];
          *(_DWORD *)v62 = v14;
          v55 = (std::string::size_type)(v62 + 4);
          while ((void *)v54 != v56)
          {
            v63 = *(_DWORD *)(v54 - 4);
            v54 -= 4;
            *((_DWORD *)v62 - 1) = v63;
            v62 -= 4;
          }
          v216.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
          v216.__r_.__value_.__l.__size_ = v55;
          v216.__r_.__value_.__r.__words[2] = (std::string::size_type)&v61[4 * v60];
          if (v56)
            operator delete(v56);
        }
        else
        {
          *(_DWORD *)v216.__r_.__value_.__l.__size_ = v14;
          v55 = v54 + 4;
        }
        v216.__r_.__value_.__l.__size_ = v55;
LABEL_117:
        if (++v14 == __val[0])
        {
          v76 = v217.__r_.__value_.__l.__size_;
          v77 = v217.__r_.__value_.__r.__words[0];
          goto LABEL_137;
        }
      }
    }
    v77 = 0;
    v76 = 0;
LABEL_137:
    *(_OWORD *)__p = 0u;
    v208 = 0u;
    v209 = 1065353216;
    v87 = v76 - v77;
    sub_20BDE39A0(&v215, (uint64_t)(((v76 - v77) << 30) + 0x100000000) >> 32);
    if ((int)v12 >= 1)
    {
      v88 = 0;
      v89 = 0;
      v90 = v87 >> 2;
      v196 = (v87 >> 2);
      v194 = v87 >> 2;
      do
      {
        v91 = v215.__r_.__value_.__r.__words[0];
        v204 = *(int *)(*(_QWORD *)(v1 + 56) + 4 * v88);
        *(_DWORD *)v215.__r_.__value_.__l.__data_ = v204;
        if ((int)v90 >= 1)
        {
          v92 = (int *)v217.__r_.__value_.__r.__words[0];
          v93 = v219[0];
          v94 = (_DWORD *)(v91 + 4);
          v95 = v196;
          do
          {
            v96 = *v92++;
            *v94++ = *(_DWORD *)(*(_QWORD *)(v93[v96] + 48) + 4 * v88);
            --v95;
          }
          while (v95);
        }
        v97 = sub_20C6C756C(__p, (int **)&v215);
        if (v97)
        {
          *(_DWORD *)(v220 + 4 * v88) = *((_DWORD *)v97 + 10);
        }
        else
        {
          v98 = 0;
          *(_DWORD *)sub_20C6C76A8((uint64_t)__p, (int **)&v215) = v89;
          *(_DWORD *)(v220 + 4 * v88) = v89;
          v99 = (char *)*((_QWORD *)&v222 + 1);
          do
          {
            v100 = v98 + 3 * v204;
            v101 = *(_QWORD *)(v1 + 80);
            if (v99 >= v223)
            {
              v103 = (char *)v222;
              v104 = (uint64_t)&v99[-v222] >> 2;
              v105 = v104 + 1;
              if ((unint64_t)(v104 + 1) >> 62)
                sub_20BDDF694();
              v106 = (uint64_t)&v223[-v222];
              if ((uint64_t)&v223[-v222] >> 1 > v105)
                v105 = v106 >> 1;
              if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
                v107 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v107 = v105;
              if (v107)
              {
                v108 = (char *)sub_20BDE1330((uint64_t)&v223, v107);
                v99 = (char *)*((_QWORD *)&v222 + 1);
                v103 = (char *)v222;
              }
              else
              {
                v108 = 0;
              }
              v109 = &v108[4 * v104];
              *(_DWORD *)v109 = *(_DWORD *)(v101 + 4 * v100);
              v102 = v109 + 4;
              while (v99 != v103)
              {
                v110 = *((_DWORD *)v99 - 1);
                v99 -= 4;
                *((_DWORD *)v109 - 1) = v110;
                v109 -= 4;
              }
              *(_QWORD *)&v222 = v109;
              *((_QWORD *)&v222 + 1) = v102;
              v223 = &v108[4 * v107];
              if (v103)
                operator delete(v103);
            }
            else
            {
              *(_DWORD *)v99 = *(_DWORD *)(v101 + 4 * v100);
              v102 = v99 + 4;
            }
            *((_QWORD *)&v222 + 1) = v102;
            ++v98;
            v99 = v102;
          }
          while (v98 != 3);
          v199 = v89 + 1;
          v202 = v88;
          v111 = v216.__r_.__value_.__l.__size_;
          v205 = v216.__r_.__value_.__l.__size_;
          for (i = (int *)v216.__r_.__value_.__r.__words[0]; i != (int *)v111; ++i)
          {
            v113 = *i;
            v114 = *((_QWORD *)v219[0] + v113);
            v115 = *(unsigned int *)(v114 + 140);
            if ((int)v115 >= 1)
            {
              v116 = 0;
              v117 = v218.__r_.__value_.__r.__words[0] + 16 * v113;
              do
              {
                v118 = *(_QWORD **)v117;
                v119 = v116 + (int)v115 * (int)v204;
                v120 = *(_QWORD *)(v114 + 24);
                v121 = *(char **)(*(_QWORD *)v117 + 32);
                v122 = *(_QWORD *)(*(_QWORD *)v117 + 40);
                if ((unint64_t)v121 >= v122)
                {
                  v124 = (char *)v118[3];
                  v125 = (v121 - v124) >> 2;
                  if ((unint64_t)(v125 + 1) >> 62)
                    sub_20BDDF694();
                  v126 = v122 - (_QWORD)v124;
                  v127 = (uint64_t)(v122 - (_QWORD)v124) >> 1;
                  if (v127 <= v125 + 1)
                    v127 = v125 + 1;
                  if (v126 >= 0x7FFFFFFFFFFFFFFCLL)
                    v128 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v128 = v127;
                  if (v128)
                  {
                    v129 = (char *)sub_20BDE1330(*(_QWORD *)v117 + 40, v128);
                    v124 = (char *)v118[3];
                    v121 = (char *)v118[4];
                  }
                  else
                  {
                    v129 = 0;
                  }
                  v130 = &v129[4 * v125];
                  *(_DWORD *)v130 = *(_DWORD *)(v120 + 4 * v119);
                  v123 = v130 + 4;
                  while (v121 != v124)
                  {
                    v131 = *((_DWORD *)v121 - 1);
                    v121 -= 4;
                    *((_DWORD *)v130 - 1) = v131;
                    v130 -= 4;
                  }
                  v118[3] = v130;
                  v118[4] = v123;
                  v118[5] = &v129[4 * v128];
                  if (v124)
                    operator delete(v124);
                }
                else
                {
                  *(_DWORD *)v121 = *(_DWORD *)(v120 + 4 * v119);
                  v123 = v121 + 4;
                }
                v118[4] = v123;
                ++v116;
              }
              while (v116 != v115);
            }
            v111 = v205;
          }
          v132 = v217.__r_.__value_.__l.__size_;
          v206 = v217.__r_.__value_.__l.__size_;
          for (j = (int *)v217.__r_.__value_.__r.__words[0]; j != (int *)v132; ++j)
          {
            v134 = *j;
            v135 = *((_QWORD *)v219[0] + v134);
            v136 = *(unsigned int *)(v135 + 140);
            if ((int)v136 >= 1)
            {
              v137 = 0;
              v138 = v218.__r_.__value_.__r.__words[0] + 16 * v134;
              v139 = *(int *)(*(_QWORD *)(v135 + 48) + 4 * v202) * (uint64_t)(int)v136;
              do
              {
                v140 = *(_QWORD **)v138;
                v141 = v137 + v139;
                v142 = *(_QWORD *)(v135 + 24);
                v143 = *(char **)(*(_QWORD *)v138 + 32);
                v144 = *(_QWORD *)(*(_QWORD *)v138 + 40);
                if ((unint64_t)v143 >= v144)
                {
                  v146 = (char *)v140[3];
                  v147 = (v143 - v146) >> 2;
                  if ((unint64_t)(v147 + 1) >> 62)
                    sub_20BDDF694();
                  v148 = v144 - (_QWORD)v146;
                  v149 = (uint64_t)(v144 - (_QWORD)v146) >> 1;
                  if (v149 <= v147 + 1)
                    v149 = v147 + 1;
                  if (v148 >= 0x7FFFFFFFFFFFFFFCLL)
                    v150 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v150 = v149;
                  if (v150)
                  {
                    v151 = (char *)sub_20BDE1330(*(_QWORD *)v138 + 40, v150);
                    v146 = (char *)v140[3];
                    v143 = (char *)v140[4];
                  }
                  else
                  {
                    v151 = 0;
                  }
                  v152 = &v151[4 * v147];
                  *(_DWORD *)v152 = *(_DWORD *)(v142 + 4 * v141);
                  v145 = v152 + 4;
                  while (v143 != v146)
                  {
                    v153 = *((_DWORD *)v143 - 1);
                    v143 -= 4;
                    *((_DWORD *)v152 - 1) = v153;
                    v152 -= 4;
                  }
                  v140[3] = v152;
                  v140[4] = v145;
                  v140[5] = &v151[4 * v150];
                  if (v146)
                    operator delete(v146);
                }
                else
                {
                  *(_DWORD *)v143 = *(_DWORD *)(v142 + 4 * v141);
                  v145 = v143 + 4;
                }
                v140[4] = v145;
                ++v137;
              }
              while (v137 != v136);
            }
            v132 = v206;
          }
          v89 = v199;
          LODWORD(v90) = v194;
          v1 = v195;
          v13 = v200;
          v88 = v202;
        }
        ++v88;
      }
      while (v88 != v13);
    }
    v154 = *(_OWORD *)(v1 + 80);
    *(_OWORD *)(v1 + 80) = v222;
    v222 = v154;
    v155 = *(char **)(v1 + 96);
    *(_QWORD *)(v1 + 96) = v223;
    v223 = v155;
    v156 = *(_OWORD *)(v1 + 56);
    *(_OWORD *)(v1 + 56) = v220;
    v220 = v156;
    v157 = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v1 + 72) = v221;
    v221 = v157;
    if (__val[0] >= 1)
    {
      v158 = 0;
      do
      {
        v159 = (uint64_t *)(v218.__r_.__value_.__r.__words[0] + v158);
        v214.__r_.__value_.__r.__words[0] = *(_QWORD *)(v218.__r_.__value_.__r.__words[0] + v158);
        v160 = sub_20C6CC48C((uint64_t **)(v1 + 216), (const void **)v214.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)&v214);
        sub_20BDE881C(v160 + 7, v159);
        v158 += 16;
      }
      while (16 * __val[0] != v158);
    }
    if (*(_BYTE *)(v1 + 1))
    {
      sub_20BDDC0E4(&v214, "normals");
      sub_20C1B5B28((uint64_t **)(v1 + 216), (const void **)&v214.__r_.__value_.__l.__data_);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
    }
    if (*(_QWORD *)(v1 + 80) == *(_QWORD *)(v1 + 88))
    {
      v161 = sub_20C6E7B7C();
      sub_20BDDC0E4(&v214, "unifyIndices: points should not be empty");
      sub_20C6C3E64((os_log_t *)v161, (uint64_t *)&v214);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
      v4 = 202;
    }
    else
    {
      v4 = 0;
    }
    if (v215.__r_.__value_.__r.__words[0])
    {
      v215.__r_.__value_.__l.__size_ = v215.__r_.__value_.__r.__words[0];
      operator delete(v215.__r_.__value_.__l.__data_);
    }
    sub_20BECB20C((uint64_t)__p);
LABEL_270:
    if (v216.__r_.__value_.__r.__words[0])
    {
      v216.__r_.__value_.__l.__size_ = v216.__r_.__value_.__r.__words[0];
      operator delete(v216.__r_.__value_.__l.__data_);
    }
    if (v217.__r_.__value_.__r.__words[0])
    {
      v217.__r_.__value_.__l.__size_ = v217.__r_.__value_.__r.__words[0];
      operator delete(v217.__r_.__value_.__l.__data_);
    }
    __p[0] = &v218;
    sub_20BDE9EB0((void ***)__p);
  }
  else
  {
    v78 = sub_20C6E7B7C();
    std::to_string(&v216, v9);
    v79 = std::string::insert(&v216, 0, "unifyIndices: Invalid attribute counter/count ");
    v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    v217.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    v81 = std::string::append(&v217, " and ");
    v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    v218.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v215, __val[0]);
    if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v83 = &v215;
    else
      v83 = (std::string *)v215.__r_.__value_.__r.__words[0];
    if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v84 = HIBYTE(v215.__r_.__value_.__r.__words[2]);
    else
      v84 = v215.__r_.__value_.__l.__size_;
    v85 = std::string::append(&v218, (const std::string::value_type *)v83, v84);
    v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    *(_QWORD *)&v208 = *((_QWORD *)&v85->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v78, (uint64_t *)__p);
    if (SBYTE7(v208) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v215.__r_.__value_.__l.__data_);
    if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v218.__r_.__value_.__l.__data_);
    if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v217.__r_.__value_.__l.__data_);
    if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v216.__r_.__value_.__l.__data_);
    v4 = 202;
  }
  if (v219[0])
  {
    v219[1] = v219[0];
    operator delete(v219[0]);
  }
  if ((_QWORD)v220)
  {
    *((_QWORD *)&v220 + 1) = v220;
    operator delete((void *)v220);
  }
  if ((_QWORD)v222)
  {
    *((_QWORD *)&v222 + 1) = v222;
    operator delete((void *)v222);
  }
  return v4;
}

void sub_20C6C72A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;

  v65 = *(void **)(v63 - 248);
  if (v65)
  {
    *(_QWORD *)(v63 - 240) = v65;
    operator delete(v65);
  }
  v66 = *(void **)(v63 - 224);
  if (v66)
  {
    *(_QWORD *)(v63 - 216) = v66;
    operator delete(v66);
  }
  a21 = v63 - 192;
  sub_20BDE9EB0((void ***)&a21);
  v67 = *(void **)(v63 - 168);
  if (v67)
  {
    *(_QWORD *)(v63 - 160) = v67;
    operator delete(v67);
  }
  v68 = *(void **)(v63 - 144);
  if (v68)
  {
    *(_QWORD *)(v63 - 136) = v68;
    operator delete(v68);
  }
  v69 = *(void **)(v63 - 112);
  if (v69)
  {
    *(_QWORD *)(v63 - 104) = v69;
    operator delete(v69);
  }
  _Unwind_Resume(a1);
}

void sub_20C6C74FC(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20C6CD8A8(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *sub_20C6C756C(_QWORD *a1, int **a2)
{
  int *v2;
  int *v3;
  unint64_t v4;
  int *v5;
  uint64_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  unint64_t v14;
  const void *v15;

  v3 = *a2;
  v2 = a2[1];
  if (*a2 == v2)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = *a2;
    do
    {
      v6 = *v5++;
      v4 ^= (v4 << 6) + (v4 >> 2) + 2654435769u + v6;
    }
    while (v5 != v2);
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v4;
    if (v4 >= *(_QWORD *)&v7)
      v10 = v4 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v4;
  }
  v11 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = (_QWORD *)*v11;
  if (*v11)
  {
    v13 = (char *)v2 - (char *)v3;
    do
    {
      v14 = v12[1];
      if (v14 == v4)
      {
        v15 = (const void *)v12[2];
        if (v12[3] - (_QWORD)v15 == v13 && !memcmp(v15, v3, v13))
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(_QWORD *)&v7)
            v14 %= *(_QWORD *)&v7;
        }
        else
        {
          v14 &= *(_QWORD *)&v7 - 1;
        }
        if (v14 != v10)
          return 0;
      }
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  return v12;
}

_QWORD *sub_20C6C76A8(uint64_t a1, int **a2)
{
  unint64_t v2;
  int *v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  const void *v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL4 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  void *v37;
  _QWORD *v38;

  v4 = *a2;
  v5 = (uint64_t)a2[1];
  if (*a2 == (int *)v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = *a2;
    do
    {
      v8 = *v7++;
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v8;
    }
    while (v7 != (int *)v5);
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v6;
      if (v6 >= v9)
        v2 = v6 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v6;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v6)
          {
            v15 = (const void *)v13[2];
            if (v13[3] - (_QWORD)v15 == v5 - (_QWORD)v4 && !memcmp(v15, v4, v5 - (_QWORD)v4))
              return v13 + 5;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v2)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v38 = operator new(0x30uLL);
  *v38 = 0;
  v38[1] = v6;
  v38[3] = 0;
  v38[4] = 0;
  v38[2] = 0;
  sub_20BE8B214(v38 + 2, v4, v5, (v5 - (uint64_t)v4) >> 2);
  *((_DWORD *)v38 + 10) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = (v9 & (v9 - 1)) == 0;
    if (v9 < 3)
      v19 = 0;
    v20 = (2 * v9) | !v19;
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = (int8x8_t)v21;
    else
      prime = (int8x8_t)v20;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_36;
    if (*(_QWORD *)&prime < v9)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (*(_QWORD *)&prime <= v29)
        prime = (int8x8_t)v29;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(_QWORD *)&prime >> 61)
            sub_20BDDF5B4();
          v23 = operator new(8 * *(_QWORD *)&prime);
          v24 = *(void **)a1;
          *(_QWORD *)a1 = v23;
          if (v24)
            operator delete(v24);
          v25 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
          while (*(_QWORD *)&prime != v25);
          v26 = (_QWORD *)*v16;
          if (*v16)
          {
            v27 = v26[1];
            v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(_QWORD *)&prime)
                v27 %= *(_QWORD *)&prime;
            }
            else
            {
              v27 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v16;
            v32 = (_QWORD *)*v26;
            if (*v26)
            {
              do
              {
                v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&prime)
                    v33 %= *(_QWORD *)&prime;
                }
                else
                {
                  v33 &= *(_QWORD *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v26;
                    goto LABEL_61;
                  }
                  *v26 = *v32;
                  *v32 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v33);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v33) = v32;
                  v32 = v26;
                }
                v33 = v27;
LABEL_61:
                v26 = v32;
                v32 = (_QWORD *)*v32;
                v27 = v33;
              }
              while (v32);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_65;
        }
        v37 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v37)
          operator delete(v37);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_65:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v6 >= v9)
        v2 = v6 % v9;
      else
        v2 = v6;
    }
    else
    {
      v2 = (v9 - 1) & v6;
    }
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v34)
  {
    *v38 = *v34;
    *v34 = v38;
  }
  else
  {
    *v38 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v38;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v16;
    if (*v38)
    {
      v35 = *(_QWORD *)(*v38 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v35 >= v9)
          v35 %= v9;
      }
      else
      {
        v35 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v38;
    }
  }
  v13 = v38;
  ++*(_QWORD *)(a1 + 24);
  return v13 + 5;
}

void sub_20C6C7B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;

  if (a10)
    sub_20C2B1784(v10, a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6C7B60(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  unint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  int64_t v27;
  unint64_t v28;
  const void *v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  _QWORD *v35;
  _OWORD *v36;
  unint64_t v37;
  const void *v38;
  _OWORD *v39;
  float v40;
  _BOOL4 v41;
  unint64_t v42;
  unint64_t v43;
  int8x8_t prime;
  void *v45;
  void *v46;
  uint64_t v47;
  _QWORD **v48;
  unint64_t v49;
  uint8x8_t v50;
  unint64_t v51;
  uint8x8_t v52;
  uint64_t v53;
  _QWORD *i;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  _DWORD *v60;
  void *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int v69;
  void *v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  const void **v75;
  int v76;
  int v77;
  BOOL v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  __int128 *v83;
  __int128 *v84;
  __int128 *v85;
  _OWORD *v86;
  unint64_t *v87;
  void *v88;
  unint64_t *v89;
  unint64_t v90;
  _OWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t **v96;
  unint64_t v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  __int128 *v100;
  __int128 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v106;
  int v107;
  int v108;
  uint64_t v109;
  void *__s2;
  int *v111;
  void *v112[2];
  _QWORD v113[2];
  void *__p[2];
  __int128 v115;
  float v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  const void *__dst[2];
  char v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  _OWORD *v123[2];
  char v124;

  v1 = *(__int128 **)(a1 + 216);
  v96 = (uint64_t **)(a1 + 216);
  v101 = (__int128 *)(a1 + 224);
  if (v1 != (__int128 *)(a1 + 224))
  {
    v2 = *(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56);
    v97 = (unint64_t)v2 >> 2;
    v98 = (int)(v2 >> 2);
    v3 = (unint64_t)v113;
    v103 = ((unint64_t)v2 >> 2);
    do
    {
      sub_20BF1BF34(__dst, v1 + 2);
      v5 = v121;
      v4 = v122;
      v117 = v121;
      v118 = v122;
      if (v122)
      {
        p_shared_owners = (unint64_t *)&v122->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      if (*(_BYTE *)(v5 + 136) != 5 || *(_QWORD *)(v5 + 56) != *(_QWORD *)(v5 + 48))
      {
        if (v4)
          goto LABEL_9;
        goto LABEL_163;
      }
      v10 = *(int *)(v5 + 140);
      *(_OWORD *)__p = 0u;
      v115 = 0u;
      v116 = 1.0;
      v112[0] = 0;
      v112[1] = 0;
      v113[0] = 0;
      sub_20BDE39A0(&__s2, v10 + 1);
      v99 = v4;
      v100 = v1;
      v106 = (_QWORD *)(v5 + 48);
      sub_20BE81ACC(v5 + 48, v98);
      sub_20BE857FC(v112, (uint64_t)(*(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24)) >> 2);
      v102 = v5;
      if ((int)v97 >= 1)
      {
        v11 = 0;
        v107 = 0;
        v108 = 0;
        v12 = v10;
        v104 = v10;
        do
        {
          v13 = (int *)__s2;
          if ((int)v10 >= 1)
          {
            v14 = (int *)(*(_QWORD *)(v102 + 24) + 4 * v107);
            v107 += v12;
            v15 = v12;
            v16 = __s2;
            do
            {
              v17 = *v14++;
              *v16++ = v17;
              --v15;
            }
            while (v15);
          }
          v13[v10] = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * v11);
          v18 = (uint64_t)v111;
          v109 = v11;
          v19 = 0;
          if (v13 != v111)
          {
            v20 = v13;
            do
            {
              v21 = *v20++;
              v19 ^= (v19 << 6) + 2654435769u + (v19 >> 2) + v21;
            }
            while (v20 != v111);
          }
          v22 = (unint64_t)__p[1];
          if (__p[1])
          {
            v23 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
            v23.i16[0] = vaddlv_u8(v23);
            v3 = v23.u32[0];
            if (v23.u32[0] > 1uLL)
            {
              v24 = v19;
              if ((void *)v19 >= __p[1])
                v24 = v19 % (unint64_t)__p[1];
            }
            else
            {
              v24 = ((unint64_t)__p[1] - 1) & v19;
            }
            v25 = (uint64_t **)*((_QWORD *)__p[0] + v24);
            if (v25)
            {
              v26 = *v25;
              if (*v25)
              {
                v27 = (char *)v111 - (char *)v13;
                do
                {
                  v28 = v26[1];
                  if (v28 == v19)
                  {
                    v29 = (const void *)v26[2];
                    if (v26[3] - (_QWORD)v29 == v27 && !memcmp(v29, v13, v18 - (_QWORD)v13))
                    {
                      v71 = v109;
                      *(_DWORD *)(*v106 + 4 * v109) = *((_DWORD *)v26 + 10);
                      goto LABEL_137;
                    }
                  }
                  else
                  {
                    if (v3 > 1)
                    {
                      if (v28 >= v22)
                        v28 %= v22;
                    }
                    else
                    {
                      v28 &= v22 - 1;
                    }
                    if (v28 != v24)
                      break;
                  }
                  v26 = (uint64_t *)*v26;
                }
                while (v26);
              }
            }
          }
          if (v13 == (int *)v18)
          {
            v30 = 0;
            if (!v22)
              goto LABEL_61;
          }
          else
          {
            v30 = 0;
            v31 = v13;
            do
            {
              v32 = *v31++;
              v30 ^= (v30 << 6) + 2654435769u + (v30 >> 2) + v32;
            }
            while (v31 != (int *)v18);
            if (!v22)
              goto LABEL_61;
          }
          v33 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
          v33.i16[0] = vaddlv_u8(v33);
          v34 = v33.u32[0];
          if (v33.u32[0] > 1uLL)
          {
            v3 = v30;
            if (v30 >= v22)
              v3 = v30 % v22;
          }
          else
          {
            v3 = v30 & (v22 - 1);
          }
          v35 = (_QWORD *)*((_QWORD *)__p[0] + v3);
          if (v35)
          {
            v36 = (_OWORD *)*v35;
            if (*v35)
            {
              do
              {
                v37 = *((_QWORD *)v36 + 1);
                if (v37 == v30)
                {
                  v38 = (const void *)*((_QWORD *)v36 + 2);
                  if (*((_QWORD *)v36 + 3) - (_QWORD)v38 == v18 - (_QWORD)v13 && !memcmp(v38, v13, v18 - (_QWORD)v13))
                  {
                    v3 = (unint64_t)v113;
                    goto LABEL_116;
                  }
                }
                else
                {
                  if (v34 > 1)
                  {
                    if (v37 >= v22)
                      v37 %= v22;
                  }
                  else
                  {
                    v37 &= v22 - 1;
                  }
                  if (v37 != v3)
                    break;
                }
                v36 = *(_OWORD **)v36;
              }
              while (v36);
            }
          }
LABEL_61:
          v39 = operator new(0x30uLL);
          v123[0] = v39;
          v123[1] = &v115;
          v124 = 0;
          *(_QWORD *)v39 = 0;
          *((_QWORD *)v39 + 1) = v30;
          *((_QWORD *)v39 + 3) = 0;
          *((_QWORD *)v39 + 4) = 0;
          *((_QWORD *)v39 + 2) = 0;
          sub_20BE8B214((_QWORD *)v39 + 2, v13, v18, (v18 - (uint64_t)v13) >> 2);
          *((_DWORD *)v39 + 10) = 0;
          v124 = 1;
          v40 = (float)(unint64_t)(*((_QWORD *)&v115 + 1) + 1);
          if (v22 && (float)(v116 * (float)v22) >= v40)
            goto LABEL_107;
          v41 = (v22 & (v22 - 1)) == 0;
          if (v22 < 3)
            v41 = 0;
          v42 = (2 * v22) | !v41;
          v43 = vcvtps_u32_f32(v40 / v116);
          if (v42 <= v43)
            prime = (int8x8_t)v43;
          else
            prime = (int8x8_t)v42;
          if (*(_QWORD *)&prime == 1)
          {
            prime = (int8x8_t)2;
          }
          else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
          {
            prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          }
          v22 = (unint64_t)__p[1];
          if ((void *)*(_QWORD *)&prime > __p[1])
          {
LABEL_73:
            if (*(_QWORD *)&prime >> 61)
              sub_20BDDF5B4();
            v45 = operator new(8 * *(_QWORD *)&prime);
            v46 = __p[0];
            __p[0] = v45;
            if (v46)
              operator delete(v46);
            v47 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v47++) = 0;
            while (*(_QWORD *)&prime != v47);
            v48 = (_QWORD **)v115;
            if ((_QWORD)v115)
            {
              v49 = *(_QWORD *)(v115 + 8);
              v50 = (uint8x8_t)vcnt_s8(prime);
              v50.i16[0] = vaddlv_u8(v50);
              if (v50.u32[0] > 1uLL)
              {
                if (v49 >= *(_QWORD *)&prime)
                  v49 %= *(_QWORD *)&prime;
              }
              else
              {
                v49 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v49) = &v115;
              for (i = *v48; i; v49 = v55)
              {
                v55 = i[1];
                if (v50.u32[0] > 1uLL)
                {
                  if (v55 >= *(_QWORD *)&prime)
                    v55 %= *(_QWORD *)&prime;
                }
                else
                {
                  v55 &= *(_QWORD *)&prime - 1;
                }
                if (v55 != v49)
                {
                  if (!*((_QWORD *)__p[0] + v55))
                  {
                    *((_QWORD *)__p[0] + v55) = v48;
                    goto LABEL_98;
                  }
                  *v48 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v55);
                  **((_QWORD **)__p[0] + v55) = i;
                  i = v48;
                }
                v55 = v49;
LABEL_98:
                v48 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v22 = (unint64_t)prime;
            goto LABEL_102;
          }
          if ((void *)*(_QWORD *)&prime < __p[1])
          {
            v51 = vcvtps_u32_f32((float)*((unint64_t *)&v115 + 1) / v116);
            if (__p[1] < (void *)3
              || (v52 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v52.i16[0] = vaddlv_u8(v52), v52.u32[0] > 1uLL))
            {
              v51 = std::__next_prime(v51);
            }
            else
            {
              v53 = 1 << -(char)__clz(v51 - 1);
              if (v51 >= 2)
                v51 = v53;
            }
            if (*(_QWORD *)&prime <= v51)
              prime = (int8x8_t)v51;
            if (*(_QWORD *)&prime >= v22)
            {
              v22 = (unint64_t)__p[1];
            }
            else
            {
              if (prime)
                goto LABEL_73;
              v70 = __p[0];
              __p[0] = 0;
              if (v70)
                operator delete(v70);
              v22 = 0;
              __p[1] = 0;
            }
          }
LABEL_102:
          if ((v22 & (v22 - 1)) != 0)
          {
            if (v30 >= v22)
              v3 = v30 % v22;
            else
              v3 = v30;
          }
          else
          {
            v3 = (v22 - 1) & v30;
          }
LABEL_107:
          v56 = (_QWORD *)*((_QWORD *)__p[0] + v3);
          if (v56)
          {
            *(_QWORD *)v123[0] = *v56;
            *v56 = v123[0];
            v3 = (unint64_t)v113;
          }
          else
          {
            *(_QWORD *)v123[0] = v115;
            *(_OWORD **)&v115 = v123[0];
            *((_QWORD *)__p[0] + v3) = &v115;
            v3 = (unint64_t)v113;
            if (*(_QWORD *)v123[0])
            {
              v57 = *(_QWORD *)(*(_QWORD *)v123[0] + 8);
              if ((v22 & (v22 - 1)) != 0)
              {
                if (v57 >= v22)
                  v57 %= v22;
              }
              else
              {
                v57 &= v22 - 1;
              }
              *((_OWORD **)__p[0] + v57) = v123[0];
            }
          }
          v36 = v123[0];
          ++*((_QWORD *)&v115 + 1);
LABEL_116:
          *((_DWORD *)v36 + 10) = v108;
          v71 = v109;
          *(_DWORD *)(*v106 + 4 * v109) = v108;
          if ((int)v12 < 1)
          {
            ++v108;
          }
          else
          {
            v58 = 0;
            v59 = (char *)v112[1];
            do
            {
              v60 = __s2;
              if ((unint64_t)v59 >= v113[0])
              {
                v62 = (char *)v112[0];
                v63 = (v59 - (char *)v112[0]) >> 2;
                v64 = v63 + 1;
                if ((unint64_t)(v63 + 1) >> 62)
                  sub_20BDDF694();
                v65 = v113[0] - (unint64_t)v112[0];
                if ((uint64_t)(v113[0] - (unint64_t)v112[0]) >> 1 > v64)
                  v64 = v65 >> 1;
                if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
                  v66 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v66 = v64;
                if (v66)
                {
                  v67 = (char *)sub_20BDE1330((uint64_t)v113, v66);
                  v62 = (char *)v112[0];
                  v59 = (char *)v112[1];
                }
                else
                {
                  v67 = 0;
                }
                v68 = &v67[4 * v63];
                *(_DWORD *)v68 = v60[v58];
                v61 = v68 + 4;
                while (v59 != v62)
                {
                  v69 = *((_DWORD *)v59 - 1);
                  v59 -= 4;
                  *((_DWORD *)v68 - 1) = v69;
                  v68 -= 4;
                }
                v112[0] = v68;
                v112[1] = v61;
                v113[0] = &v67[4 * v66];
                if (v62)
                  operator delete(v62);
              }
              else
              {
                *(_DWORD *)v59 = *((_DWORD *)__s2 + v58);
                v61 = v59 + 4;
              }
              v112[1] = v61;
              ++v58;
              v59 = (char *)v61;
            }
            while (v58 != v12);
            ++v108;
            v71 = v109;
          }
LABEL_137:
          v11 = v71 + 1;
          v10 = v104;
        }
        while (v11 != v103);
      }
      v72 = *(_OWORD *)(v102 + 24);
      v73 = *(_OWORD *)v112;
      *(_OWORD *)v112 = v72;
      *(_OWORD *)(v102 + 24) = v73;
      v74 = v113[0];
      v113[0] = *(_QWORD *)(v102 + 40);
      *(_QWORD *)(v102 + 40) = v74;
      if (v120 < 0)
      {
        v4 = v99;
        v1 = v100;
        if (__dst[1] != (const void *)7)
          goto LABEL_159;
        v75 = (const void **)__dst[0];
      }
      else
      {
        v4 = v99;
        v1 = v100;
        if (v120 != 7)
          goto LABEL_159;
        v75 = __dst;
      }
      v76 = *(_DWORD *)v75;
      v77 = *(_DWORD *)((char *)v75 + 3);
      v78 = v76 == 1836216174 && v77 == 1936482669;
      if (v78)
        *(_BYTE *)(a1 + 1) = 1;
LABEL_159:
      if (__s2)
      {
        v111 = (int *)__s2;
        operator delete(__s2);
        v79 = v112[0];
        if (!v112[0])
          goto LABEL_162;
LABEL_161:
        v112[1] = v79;
        operator delete(v79);
        goto LABEL_162;
      }
      v79 = (void *)v72;
      if ((_QWORD)v72)
        goto LABEL_161;
LABEL_162:
      sub_20BECB20C((uint64_t)__p);
      if (v4)
      {
LABEL_9:
        v8 = (unint64_t *)&v4->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
LABEL_163:
      v80 = v122;
      if (v122)
      {
        v81 = (unint64_t *)&v122->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      if (v120 < 0)
        operator delete((void *)__dst[0]);
      v83 = v1;
      v84 = (__int128 *)*((_QWORD *)v1 + 1);
      if (v84)
      {
        do
        {
          v85 = v84;
          v84 = *(__int128 **)v84;
        }
        while (v84);
      }
      else
      {
        do
        {
          v85 = (__int128 *)*((_QWORD *)v83 + 2);
          v78 = *(_QWORD *)v85 == (_QWORD)v83;
          v83 = v85;
        }
        while (!v78);
      }
      v1 = v85;
    }
    while (v85 != v101);
  }
  if (*(_BYTE *)(a1 + 1))
  {
    sub_20BDDC0E4(__dst, "normals");
    v123[0] = __dst;
    v86 = sub_20C6CD9EC(v96, __dst, (uint64_t)&unk_20CAC184C, v123);
    v88 = (void *)*((_QWORD *)v86 + 7);
    v87 = (unint64_t *)*((_QWORD *)v86 + 8);
    __p[0] = v88;
    __p[1] = v87;
    if (v87)
    {
      v89 = v87 + 1;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    if (v120 < 0)
      operator delete((void *)__dst[0]);
    MEMORY[0x212B929D0](v88, "primvars:normals");
    *((_BYTE *)__p[0] + 148) = 1;
    sub_20BDDC0E4(__dst, "primvars:normals");
    v123[0] = __dst;
    v91 = sub_20C6CD9EC(v96, __dst, (uint64_t)&unk_20CAC184C, v123);
    sub_20BDE881C((_QWORD *)v91 + 7, (uint64_t *)__p);
    if (v120 < 0)
      operator delete((void *)__dst[0]);
    sub_20BDDC0E4(__dst, "normals");
    sub_20C1B5B28(v96, __dst);
    if (v120 < 0)
      operator delete((void *)__dst[0]);
    v92 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v93 = (unint64_t *)((char *)__p[1] + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
  }
  return 0;
}

void sub_20C6C8648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 129) < 0)
    operator delete(*(void **)(v33 - 152));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6C8720(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned __int8 *a5)
{
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  unint64_t *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t *v37;
  std::string *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  void *v44;
  char *v46;
  char *v47;
  _OWORD *v48;
  uint64_t v49;
  _OWORD *v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _OWORD *v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  _OWORD *v64;
  unint64_t v65;
  int v66;
  __int128 *v67;
  _QWORD *v68;
  int v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  int v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  int v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  void **v91;
  void *v92;
  void *v93;
  BOOL v94;
  char *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  size_t v99;
  std::string *v100;
  void **v101;
  char *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  __int128 *v107;
  __int128 *v108;
  uint64_t *v109;
  std::string *v110;
  __int128 v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  uint64_t v117[2];
  std::string v118;
  uint64_t v119[2];
  void *__p[2];
  int64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  std::string v125;
  unsigned int v126;
  _DWORD v127[2];
  char v128;
  int v129;
  char v130;
  int v131;
  char v132;
  void *v133[3];
  int *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  std::__shared_weak_count *v139;
  __int128 __dst;
  uint64_t v141;

  v9 = *a5;
  *(_BYTE *)(a1 + 2) = v9;
  v10 = a5[1];
  *(_BYTE *)(a1 + 3) = v10;
  if (v10)
  {
    if (v9 || sub_20C6C5AD0(a1))
    {
      v11 = sub_20C6E7B7C();
      sub_20BDDC0E4(__p, "encode: when preserving flags, cannot require index unification.");
      sub_20C6C3E64((os_log_t *)v11, (uint64_t *)__p);
      if (SHIBYTE(v121) < 0)
        operator delete(__p[0]);
      return 11;
    }
    v13 = (char *)operator new(0xB0uLL);
    *((_QWORD *)v13 + 1) = 0;
    v14 = (unint64_t *)(v13 + 8);
    *(_QWORD *)v13 = off_24C541D60;
    *(_OWORD *)(v13 + 24) = 0u;
    v15 = (void **)(v13 + 24);
    *((_QWORD *)v13 + 2) = 0;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_OWORD *)(v13 + 104) = 0u;
    *(_OWORD *)(v13 + 120) = 0u;
    *(_OWORD *)(v13 + 136) = 0u;
    *(_OWORD *)(v13 + 152) = 0u;
    *((_QWORD *)v13 + 21) = 0;
    v135 = v13 + 24;
    v136 = v13;
    sub_20BDDC0E4(__p, "_orderingIndices");
    if (v13[47] < 0)
      operator delete(*v15);
    *(_OWORD *)v15 = *(_OWORD *)__p;
    *((_QWORD *)v13 + 5) = v121;
    sub_20BE81ACC((uint64_t)(v13 + 48), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2);
    v16 = *((_QWORD *)v13 + 6);
    v17 = *((_QWORD *)v13 + 7);
    v18 = v17 - v16;
    if (v17 != v16)
    {
      v19 = 0;
      v20 = v18 >> 2;
      if (v20 <= 1)
        v20 = 1;
      do
      {
        *(_DWORD *)(v16 + 4 * v19) = v19;
        ++v19;
      }
      while (v20 != v19);
    }
    *((_QWORD *)v13 + 10) = *((_QWORD *)v13 + 9);
    v13[96] = 0;
    MEMORY[0x212B929D0](v13 + 136, "int");
    v13[160] = 4;
    *(_QWORD *)(v13 + 164) = 0x100000001;
    v13[172] = 0;
    if (v13[47] < 0)
    {
      sub_20BDDBFAC(&__dst, *((void **)v13 + 3), *((_QWORD *)v13 + 4));
    }
    else
    {
      __dst = *(_OWORD *)v15;
      v141 = *((_QWORD *)v13 + 5);
    }
    v138 = v13 + 24;
    v139 = (std::__shared_weak_count *)v13;
    do
      v21 = __ldxr(v14);
    while (__stxr(v21 + 1, v14));
    __p[0] = &__dst;
    v22 = sub_20C6CC48C((uint64_t **)(a1 + 216), (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)__p);
    sub_20BDE881C(v22 + 7, (uint64_t *)&v138);
    v23 = v139;
    if (v139)
    {
      p_shared_owners = (unint64_t *)&v139->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (SHIBYTE(v141) < 0)
      operator delete((void *)__dst);
    v26 = (std::__shared_weak_count *)v136;
    if (v136)
    {
      v27 = (unint64_t *)(v136 + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  sub_20BEDD928(a3);
  v135 = 0;
  v136 = 0;
  v137 = 0;
  sub_20C706DC8(&v134);
  v30 = *(_QWORD *)(a1 + 80);
  v29 = *(_QWORD *)(a1 + 88);
  sub_20BDE2BE0(v133, 0x400uLL);
  v31 = v29 - v30;
  v128 = 4;
  v129 = 2;
  v130 = 0;
  v131 = 16843009;
  v132 = 1;
  v32 = *(_DWORD *)(a1 + 136);
  v127[0] = 0;
  v127[1] = v32;
  v33 = *(int **)(a1 + 144);
  if (*(int **)(a1 + 152) == v33)
    v33 = 0;
  else
    v130 = 1;
  v126 = a4;
  v34 = (v31 >> 2) / 3uLL;
  sub_20C706DF4((uint64_t)&v134, *(_QWORD *)(a1 + 80), v34, *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2, *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 2, (uint64_t)v33, &v126, (uint64_t)v127);
  v36 = v35;
  if (v35)
  {
    v37 = sub_20C6E7B7C();
    std::to_string(&v125, v36);
    v38 = std::string::insert(&v125, 0, "encode: issue with estimatePositionsAndPolygonsEncodingParameters: ");
    goto LABEL_41;
  }
  v39 = sub_20C6F594C(*(_QWORD *)(a1 + 80), (v31 >> 2) / 3uLL, *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2, *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 2, (uint64_t)v33, (uint64_t)v127);
  v40 = v39;
  v41 = (uint64_t)v135;
  if (v39 <= v136 - v135)
  {
    if (v39 < v136 - v135)
      v136 = &v135[v39];
  }
  else
  {
    sub_20C6BBBDC((unint64_t *)&v135, v39 - (v136 - v135));
    v41 = (uint64_t)v135;
  }
  v124 = 0;
  v42 = sub_20C706E08(&v134, *(uint64_t **)(a1 + 80), (v31 >> 2) / 3uLL, *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2, *(const void **)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 2, v33, v41, v40, (uint64_t *)&v124, (uint64_t)v127);
  if (v42)
  {
    v37 = sub_20C6E7B7C();
    std::to_string(&v125, v42);
    v38 = std::string::insert(&v125, 0, "encode: issue with encodePositionsAndPolygons: ");
LABEL_41:
    v43 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v121 = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v43;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v37, (uint64_t *)__p);
    if (SHIBYTE(v121) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    {
      v44 = (void *)v125.__r_.__value_.__r.__words[0];
      goto LABEL_45;
    }
    goto LABEL_46;
  }
  v46 = v135;
  v47 = v136;
  if (v124 <= v136 - v135)
  {
    if (v124 < v136 - v135)
    {
      v47 = &v135[v124];
      v136 = &v135[v124];
    }
  }
  else
  {
    sub_20C6BBBDC((unint64_t *)&v135, v124 - (v136 - v135));
    v46 = v135;
    v47 = v136;
  }
  sub_20C6CDB78(a2, *(char **)(a2 + 8), v46, v47, v47 - v46);
  sub_20BDDC0E4(__p, "points");
  v48 = operator new(0x28uLL);
  v48[1] = *(_OWORD *)__p;
  *((_QWORD *)v48 + 4) = v121;
  __p[1] = 0;
  v121 = 0;
  v49 = *a3;
  *(_QWORD *)v48 = *a3;
  *((_QWORD *)v48 + 1) = a3;
  *(_QWORD *)(v49 + 8) = v48;
  *a3 = (uint64_t)v48;
  ++a3[2];
  sub_20BDDC0E4(__p, "faceVertexCounts");
  v50 = operator new(0x28uLL);
  v50[1] = *(_OWORD *)__p;
  *((_QWORD *)v50 + 4) = v121;
  __p[1] = 0;
  v121 = 0;
  v51 = *a3;
  *(_QWORD *)v50 = *a3;
  *((_QWORD *)v50 + 1) = a3;
  *(_QWORD *)(v51 + 8) = v50;
  *a3 = (uint64_t)v50;
  ++a3[2];
  sub_20BDDC0E4(__p, "faceVertexIndices");
  v52 = operator new(0x28uLL);
  v52[1] = *(_OWORD *)__p;
  *((_QWORD *)v52 + 4) = v121;
  __p[1] = 0;
  v121 = 0;
  v53 = *a3;
  *(_QWORD *)v52 = *a3;
  *((_QWORD *)v52 + 1) = a3;
  *(_QWORD *)(v53 + 8) = v52;
  *a3 = (uint64_t)v52;
  ++a3[2];
  v54 = sub_20C706E50((uint64_t)&v134);
  sub_20BDDC0E4(__p, "points");
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v55 = sub_20C6CDD54((uint64_t **)(a1 + 288), (const void **)__p, (uint64_t)&unk_20CAC184C, &v125);
  sub_20BE81ACC((uint64_t)v55 + 56, (v31 >> 2) / 3uLL);
  v115 = (unint64_t *)a2;
  if (SHIBYTE(v121) < 0)
    operator delete(__p[0]);
  if ((unint64_t)v31 >= 0xC)
  {
    v56 = 0;
    if (v34 <= 1)
      v57 = 1;
    else
      v57 = v34;
    do
    {
      v58 = *(_DWORD *)(v54 + 4 * v56);
      sub_20BDDC0E4(__p, "points");
      v125.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      *(_DWORD *)(*((_QWORD *)sub_20C6CDD54((uint64_t **)(a1 + 288), (const void **)__p, (uint64_t)&unk_20CAC184C, &v125)
                  + 7)
                + 4 * v56) = v58;
      if (SHIBYTE(v121) < 0)
        operator delete(__p[0]);
      ++v56;
    }
    while (v57 != v56);
  }
  v59 = sub_20C706E5C((uint64_t)&v134);
  sub_20BDDC0E4(__p, "faceVertexCounts");
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v60 = sub_20C6CDD54((uint64_t **)(a1 + 288), (const void **)__p, (uint64_t)&unk_20CAC184C, &v125);
  sub_20BE81ACC((uint64_t)v60 + 56, (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2);
  if (SHIBYTE(v121) < 0)
    operator delete(__p[0]);
  if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32))
  {
    v61 = 0;
    do
    {
      v62 = *(_DWORD *)(v59 + 4 * v61);
      sub_20BDDC0E4(__p, "faceVertexCounts");
      v125.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      *(_DWORD *)(*((_QWORD *)sub_20C6CDD54((uint64_t **)(a1 + 288), (const void **)__p, (uint64_t)&unk_20CAC184C, &v125)
                  + 7)
                + 4 * v61) = v62;
      if (SHIBYTE(v121) < 0)
        operator delete(__p[0]);
      ++v61;
    }
    while (v61 < (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2);
  }
  v63 = sub_20C706E68((uint64_t)&v134);
  sub_20BDDC0E4(__p, "faceVertexIndices");
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v64 = sub_20C6CDD54((uint64_t **)(a1 + 288), (const void **)__p, (uint64_t)&unk_20CAC184C, &v125);
  sub_20BE81ACC((uint64_t)v64 + 56, (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2);
  if (SHIBYTE(v121) < 0)
    operator delete(__p[0]);
  if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32))
  {
    v65 = 0;
    do
    {
      v66 = *(_DWORD *)(v63 + 4 * v65);
      sub_20BDDC0E4(__p, "faceVertexIndices");
      v125.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      *(_DWORD *)(*((_QWORD *)sub_20C6CDD54((uint64_t **)(a1 + 288), (const void **)__p, (uint64_t)&unk_20CAC184C, &v125)
                  + 7)
                + 4 * v65) = v66;
      if (SHIBYTE(v121) < 0)
        operator delete(__p[0]);
      ++v65;
    }
    while (v65 < (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2);
  }
  v67 = *(__int128 **)(a1 + 216);
  if (v67 == (__int128 *)(a1 + 224))
  {
LABEL_145:
    v12 = 0;
    goto LABEL_47;
  }
  v116 = a1 + 240;
  while (1)
  {
    v68 = sub_20BF1BF34(__p, v67 + 2);
    v69 = *(unsigned __int8 *)(v122 + 136);
    if ((v69 - 3) > 1)
      break;
    v70 = (std::__shared_weak_count *)v123;
    v119[0] = v122;
    v119[1] = v123;
    if (v123)
    {
      v71 = (unint64_t *)(v123 + 8);
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    v73 = sub_20C6C9640((uint64_t)v68, v119, &v134, v115, &v126);
    if (v70)
    {
      v74 = (unint64_t *)&v70->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    if (v73)
    {
      v109 = sub_20C6E7B7C();
      std::to_string(&v118, v73);
      v110 = std::string::insert(&v118, 0, "encode: issue with compressVertexAttribute: ");
      goto LABEL_147;
    }
LABEL_106:
    if (*(_BYTE *)(a1 + 1))
    {
      if (SHIBYTE(v121) < 0)
      {
        if (__p[1] != (void *)16)
          goto LABEL_116;
        v91 = (void **)__p[0];
      }
      else
      {
        if (SHIBYTE(v121) != 16)
          goto LABEL_116;
        v91 = __p;
      }
      v93 = *v91;
      v92 = v91[1];
      v94 = v93 == (void *)0x737261766D697270 && v92 == (void *)0x736C616D726F6E3ALL;
      if (v94)
      {
        sub_20BDDC0E4(&v125, "normals");
        v95 = (char *)operator new(0x28uLL);
        *(std::string *)(v95 + 16) = v125;
        *(_OWORD *)&v125.__r_.__value_.__r.__words[1] = 0uLL;
        v96 = *a3;
        *((_QWORD *)v95 + 1) = a3;
        goto LABEL_117;
      }
    }
LABEL_116:
    v95 = (char *)sub_20BEDE334((uint64_t)a3, 0, 0, (uint64_t)__p);
    *((_QWORD *)v95 + 1) = a3;
    v96 = *a3;
LABEL_117:
    *(_QWORD *)v95 = v96;
    *(_QWORD *)(v96 + 8) = v95;
    *a3 = (uint64_t)v95;
    ++a3[2];
    v97 = sub_20BEDE334(v116, 0, 0, (uint64_t)__p);
    v97[1] = v116;
    v98 = *(_QWORD *)(a1 + 240);
    *v97 = v98;
    *(_QWORD *)(v98 + 8) = v97;
    *(_QWORD *)(a1 + 240) = v97;
    ++*(_QWORD *)(a1 + 256);
    if (a1 + 264 != sub_20C6CDFDC(*(_QWORD *)(a1 + 272), a1 + 264, (unsigned __int8 **)__p))
    {
      if (v121 >= 0)
        v99 = HIBYTE(v121);
      else
        v99 = (size_t)__p[1];
      sub_20BDF6BDC((uint64_t)&v125, v99 + 8);
      if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v100 = &v125;
      else
        v100 = (std::string *)v125.__r_.__value_.__r.__words[0];
      if (v99)
      {
        if (v121 >= 0)
          v101 = __p;
        else
          v101 = (void **)__p[0];
        memmove(v100, v101, v99);
      }
      strcpy((char *)v100 + v99, ":indices");
      v102 = (char *)operator new(0x28uLL);
      *(std::string *)(v102 + 16) = v125;
      *(_OWORD *)&v125.__r_.__value_.__r.__words[1] = 0uLL;
      v103 = *a3;
      *(_QWORD *)v102 = *a3;
      *((_QWORD *)v102 + 1) = a3;
      *(_QWORD *)(v103 + 8) = v102;
      *a3 = (uint64_t)v102;
      ++a3[2];
    }
    v104 = (std::__shared_weak_count *)v123;
    if (v123)
    {
      v105 = (unint64_t *)(v123 + 8);
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    if (SHIBYTE(v121) < 0)
      operator delete(__p[0]);
    v107 = (__int128 *)*((_QWORD *)v67 + 1);
    if (v107)
    {
      do
      {
        v108 = v107;
        v107 = *(__int128 **)v107;
      }
      while (v107);
    }
    else
    {
      do
      {
        v108 = (__int128 *)*((_QWORD *)v67 + 2);
        v94 = *(_QWORD *)v108 == (_QWORD)v67;
        v67 = v108;
      }
      while (!v94);
    }
    v67 = v108;
    if (v108 == (__int128 *)(a1 + 224))
      goto LABEL_145;
  }
  if (v69 != 5)
    goto LABEL_106;
  v76 = (std::__shared_weak_count *)v123;
  v117[0] = v122;
  v117[1] = v123;
  if (v123)
  {
    v77 = (unint64_t *)(v123 + 8);
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  v79 = sub_20C6C9970((uint64_t)v68, v117, &v134, v115, &v126);
  if (v76)
  {
    v80 = (unint64_t *)&v76->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (!v79)
  {
    v82 = sub_20C706F60((uint64_t)&v134);
    v83 = *(_QWORD *)(v122 + 24);
    v84 = *(_QWORD *)(v122 + 32);
    v85 = *(int *)(v122 + 144);
    v125.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    v86 = sub_20C6CDEA0((uint64_t **)(a1 + 288), (const void **)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v125);
    v87 = (v84 - v83) >> 2;
    v88 = v87 / v85;
    sub_20BE81ACC((uint64_t)(v86 + 7), v87 / v85);
    if (v87 >= v85)
    {
      v89 = 0;
      if (v88 <= 1)
        v88 = 1;
      do
      {
        v90 = *(_DWORD *)(v82 + 4 * v89);
        v125.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        *(_DWORD *)(sub_20C6CDEA0((uint64_t **)(a1 + 288), (const void **)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v125)[7]+ 4 * v89++) = v90;
      }
      while (v88 != v89);
    }
    goto LABEL_106;
  }
  v109 = sub_20C6E7B7C();
  std::to_string(&v118, v79);
  v110 = std::string::insert(&v118, 0, "encode: issue with compressFaceVaryingAttribute: ");
LABEL_147:
  v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
  v125.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v111;
  v110->__r_.__value_.__l.__size_ = 0;
  v110->__r_.__value_.__r.__words[2] = 0;
  v110->__r_.__value_.__r.__words[0] = 0;
  sub_20C6C3E64((os_log_t *)v109, (uint64_t *)&v125);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v125.__r_.__value_.__l.__data_);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  v112 = (std::__shared_weak_count *)v123;
  if (v123)
  {
    v113 = (unint64_t *)(v123 + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  if (SHIBYTE(v121) < 0)
  {
    v44 = __p[0];
LABEL_45:
    operator delete(v44);
  }
LABEL_46:
  v12 = 110;
LABEL_47:
  if (v133[0])
  {
    v133[1] = v133[0];
    operator delete(v133[0]);
  }
  sub_20C706DCC((uint64_t *)&v134);
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
  return v12;
}

void sub_20C6C94AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  void *v44;
  void *v45;

  if (a25 < 0)
    operator delete(__p);
  sub_20BF181E8((uint64_t)&a28);
  v44 = *(void **)(v42 - 200);
  if (v44)
  {
    *(_QWORD *)(v42 - 192) = v44;
    operator delete(v44);
  }
  sub_20C706DCC((uint64_t *)(v42 - 176));
  v45 = *(void **)(v42 - 168);
  if (v45)
  {
    *(_QWORD *)(v42 - 160) = v45;
    operator delete(v45);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C6C9640(uint64_t a1, uint64_t *a2, int **a3, unint64_t *a4, unsigned int *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  __int128 v33;
  uint64_t result;
  unint64_t v35;
  uint64_t v36;
  std::string v37;
  std::string v38;
  std::string v39;
  void *__p[2];
  std::string::size_type v41;
  _DWORD v42[2];
  char v43;
  uint64_t v44;
  int v45;
  char v46;

  v43 = 4;
  v44 = 2;
  v45 = 0;
  v46 = 1;
  v8 = *a2;
  v9 = *(_DWORD *)(*a2 + 104);
  v42[0] = 0;
  v42[1] = v9;
  v10 = *(_QWORD *)(v8 + 24);
  v11 = *(_QWORD *)(v8 + 32);
  v12 = *(int *)(v8 + 140);
  v13 = sub_20C706E00(a3, v10, 0, 16, v12, a5, (uint64_t)v42);
  if (v13)
  {
    v14 = v13;
    v15 = sub_20C6E7B7C();
    std::operator+<char>();
    v16 = std::string::append(&v38, " due to error ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v37, v14);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v37;
    else
      v18 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      size = v37.__r_.__value_.__l.__size_;
    v20 = std::string::append(&v39, (const std::string::value_type *)v18, size);
LABEL_21:
    v33 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v41 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v33;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v15, (uint64_t *)__p);
    if (SHIBYTE(v41) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    return 110;
  }
  v21 = (v11 - v10) >> 2;
  v22 = a4[1] - *a4;
  v23 = sub_20C6F6000(*(_QWORD *)(*a2 + 24), 0, 16, v21 / v12, *(int *)(*a2 + 140), (uint64_t)v42);
  v24 = v23;
  v25 = *a4;
  v26 = a4[1] - *a4;
  if (v23 + v22 <= v26)
  {
    if (v23 + v22 < v26)
      a4[1] = v25 + v23 + v22;
  }
  else
  {
    sub_20C6BBBDC(a4, v23 + v22 - v26);
    v25 = *a4;
  }
  v36 = 0;
  v27 = sub_20C706E40((unsigned int **)a3, *(_QWORD *)(*a2 + 24), 0, 0x10u, 0, *(int *)(*a2 + 140), v25 + v22, v24, &v36, (uint64_t)v42);
  if (v27)
  {
    v28 = v27;
    v15 = sub_20C6E7B7C();
    std::operator+<char>();
    v29 = std::string::append(&v38, " due to error ");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v37, v28);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v37;
    else
      v31 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      v32 = v37.__r_.__value_.__l.__size_;
    v20 = std::string::append(&v39, (const std::string::value_type *)v31, v32);
    goto LABEL_21;
  }
  v35 = a4[1] - *a4;
  if (v36 + v22 <= v35)
  {
    if (v36 + v22 < v35)
    {
      result = 0;
      a4[1] = *a4 + v36 + v22;
      return result;
    }
  }
  else
  {
    sub_20C6BBBDC(a4, v36 + v22 - v35);
  }
  return 0;
}

void sub_20C6C9918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6C9970(uint64_t a1, uint64_t *a2, int **a3, unint64_t *a4, unsigned int *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type v31;
  __int128 v32;
  uint64_t result;
  unint64_t v34;
  uint64_t v35;
  std::string v36;
  std::string v37;
  std::string v38;
  void *__p[2];
  std::string::size_type v40;
  _DWORD v41[2];
  char v42;
  uint64_t v43;
  int v44;
  char v45;

  v42 = 4;
  v43 = 2;
  v44 = 0;
  v45 = 1;
  v8 = *a2;
  v9 = *(_DWORD *)(*a2 + 104);
  v41[0] = 0;
  v41[1] = v9;
  v10 = *(_QWORD *)(v8 + 24);
  v11 = *(int *)(v8 + 140);
  v12 = ((*(_QWORD *)(v8 + 32) - v10) >> 2) / v11;
  v13 = sub_20C706EA0(a3, v10, 0, 16, v12, v11, *(_QWORD *)(v8 + 48), a5, (uint64_t)v41);
  if (v13)
  {
    v14 = v13;
    v15 = sub_20C6E7B7C();
    std::operator+<char>();
    v16 = std::string::append(&v37, " due to error ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v36, v14);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v36;
    else
      v18 = (std::string *)v36.__r_.__value_.__r.__words[0];
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    else
      size = v36.__r_.__value_.__l.__size_;
    v20 = std::string::append(&v38, (const std::string::value_type *)v18, size);
LABEL_21:
    v32 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v40 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v32;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v15, (uint64_t *)__p);
    if (SHIBYTE(v40) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    return 110;
  }
  v44 = 1;
  v21 = a4[1] - *a4;
  v22 = sub_20C706E74(*(_QWORD *)(*a2 + 24), 0, 16, v12, *(int *)(*a2 + 140), *(_QWORD *)(*a2 + 48), (uint64_t)(*(_QWORD *)(*a2 + 56) - *(_QWORD *)(*a2 + 48)) >> 2, (uint64_t)v41);
  v23 = v22;
  v24 = *a4;
  v25 = a4[1] - *a4;
  if (v22 + v21 <= v25)
  {
    if (v22 + v21 < v25)
      a4[1] = v24 + v22 + v21;
  }
  else
  {
    sub_20C6BBBDC(a4, v22 + v21 - v25);
    v24 = *a4;
  }
  v35 = 0;
  v26 = sub_20C706F44((uint64_t *)a3, *(int **)(*a2 + 24), 0, 16, 0, v12, *(int *)(*a2 + 140), *(int **)(*a2 + 48), v24 + v21, v23, &v35, (uint64_t)v41);
  if (v26)
  {
    v27 = v26;
    v15 = sub_20C6E7B7C();
    std::operator+<char>();
    v28 = std::string::append(&v37, " due to error ");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v36, v27);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v36;
    else
      v30 = (std::string *)v36.__r_.__value_.__r.__words[0];
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    else
      v31 = v36.__r_.__value_.__l.__size_;
    v20 = std::string::append(&v38, (const std::string::value_type *)v30, v31);
    goto LABEL_21;
  }
  v34 = a4[1] - *a4;
  if (v35 + v21 <= v34)
  {
    if (v35 + v21 < v34)
    {
      result = 0;
      a4[1] = *a4 + v35 + v21;
      return result;
    }
  }
  else
  {
    sub_20C6BBBDC(a4, v35 + v21 - v34);
  }
  return 0;
}

void sub_20C6C9C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6C9CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  std::string *v9;
  __int128 v10;
  void *v11;
  uint64_t *v12;
  int v13;
  int v14;
  uint64_t *v15;
  std::string *v16;
  __int128 v17;
  int v18;
  uint64_t *v19;
  std::string *v20;
  __int128 v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t v29;
  uint64_t *v30;
  std::string **v31;
  uint64_t v32;
  char v33;
  uint64_t *v34;
  int *v36;
  uint64_t v37;
  unint64_t v38;
  std::string::size_type v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  BOOL v47;
  int *v48;
  unint64_t v49;
  std::string::size_type v50;
  uint64_t v51;
  std::string *v52;
  uint64_t *v53;
  void *v54[2];
  char v55;
  void *v56;
  _BYTE *v57;
  uint64_t v58;
  std::string v59;
  void *__p[2];
  __int128 v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  std::string __dst;
  void *v67[2];
  uint64_t v68;
  _QWORD **v69;
  _QWORD *v70[2];
  void *v71[2];
  uint64_t v72;
  int v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  void **v80;

  v67[0] = 0;
  v67[1] = 0;
  v70[0] = 0;
  v70[1] = 0;
  v68 = 0;
  v69 = v70;
  v71[1] = 0;
  v72 = 0;
  v71[0] = 0;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v4 = sub_20C6E60CC(a2, (uint64_t)v67);
  if ((_DWORD)v4)
    goto LABEL_63;
  v5 = *(_DWORD **)(a2 + 176);
  if (!v5)
  {
    v12 = sub_20C6E7B7C();
    sub_20BDDC0E4(__p, "decode: empty buffer");
    sub_20C6C3E64((os_log_t *)v12, (uint64_t *)__p);
    if ((SBYTE7(v61) & 0x80000000) == 0)
    {
LABEL_11:
      v4 = 100;
      goto LABEL_63;
    }
    v11 = __p[0];
LABEL_10:
    operator delete(v11);
    goto LABEL_11;
  }
  v6 = *(_QWORD *)(a2 + 184) & ~(*(uint64_t *)(a2 + 184) >> 63);
  v7 = sub_20C6F4A10(v5, v6);
  if (v7)
  {
    v8 = sub_20C6E7B7C();
    std::to_string(&__dst, v7);
    v9 = std::string::insert(&__dst, 0, "decode: issue with checkBitstream: ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(_QWORD *)&v61 = *((_QWORD *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v8, (uint64_t *)__p);
    if (SBYTE7(v61) < 0)
      operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
    v11 = (void *)__dst.__r_.__value_.__r.__words[0];
    goto LABEL_10;
  }
  sub_20C6F4928(&v65);
  v63 = 0;
  v64 = 0;
  *(_BYTE *)(a1 + 104) = sub_20C6CA5FC((uint64_t)v71);
  *(_DWORD *)(a1 + 108) = v73;
  if ((__int128 *)(a1 + 112) != &v74)
    sub_20BE8B37C((char *)(a1 + 112), (char *)v74, *((uint64_t *)&v74 + 1), (uint64_t)(*((_QWORD *)&v74 + 1) - v74) >> 2);
  v62 = 0;
  *(_OWORD *)__p = 0u;
  v61 = 0u;
  sub_20C6F4954((uint64_t)v5, v6, (uint64_t)__p);
  v14 = v13;
  if (v13)
  {
    v15 = sub_20C6E7B7C();
    std::to_string(&v59, v14);
    v16 = std::string::insert(&v59, 0, "decode: cannot parse header: ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v15, (uint64_t *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    v4 = 151;
    goto LABEL_62;
  }
  *(_DWORD *)(a1 + 136) = DWORD2(v61);
  if (v62)
  {
    sub_20BE81ACC(a1 + 144, (int)v61);
    v4 = *(_QWORD *)(a1 + 144);
  }
  else
  {
    v4 = 0;
  }
  if ((__int128 *)(a1 + 192) != (__int128 *)((char *)&v78 + 8))
    sub_20BE75818(a1 + 192, *((std::string **)&v78 + 1), (__int128 *)v79, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - *((_QWORD *)&v78 + 1)) >> 3));
  if ((__int128 *)(a1 + 168) != &v77)
    sub_20C6CE094((uint64_t **)(a1 + 168), v77, *((uint64_t **)&v77 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v77 + 1) - v77) >> 3));
  sub_20BE81ACC(a1 + 32, (int)v61);
  sub_20BE81ACC(a1 + 80, 3 * SHIDWORD(__p[1]));
  sub_20BE81ACC(a1 + 56, SDWORD1(v61));
  v63 = 0;
  v18 = sub_20C6F4A6C((uint64_t *)&v65, (unint64_t)v5, v6, &v63, *(int32x2_t **)(a1 + 80), *(_DWORD **)(a1 + 32), *(void **)(a1 + 56), (int *)v4);
  if (v18)
  {
    v19 = sub_20C6E7B7C();
    std::to_string(&v59, v18);
    v20 = std::string::insert(&v59, 0, "decode: issue with decodePositionAndPolygons: ");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v19, (uint64_t *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    {
      v22 = (void *)v59.__r_.__value_.__r.__words[0];
      goto LABEL_32;
    }
    goto LABEL_61;
  }
  v64 = v63;
  v23 = v69;
  while (1)
  {
    if (v64 == v6)
    {
      *(_BYTE *)a1 = 1;
      v28 = (uint64_t **)(a1 + 216);
      sub_20BDDC0E4(&__dst, "_orderingIndices");
      v29 = sub_20BDEEBA4(a1 + 216, (const void **)&__dst.__r_.__value_.__l.__data_);
      v30 = (uint64_t *)(a1 + 224);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (v30 == (uint64_t *)v29)
        goto LABEL_110;
      memset(&__dst, 0, sizeof(__dst));
      sub_20BDDC0E4(&v59, "_orderingIndices");
      v31 = (std::string **)sub_20C6CAEDC(a1 + 216, (const void **)&v59.__r_.__value_.__l.__data_);
      if (&__dst != &(*v31)[1])
        v31 = (std::string **)sub_20BE8B37C((char *)&__dst, (*v31)[1].__r_.__value_.__l.__data_, (*v31)[1].__r_.__value_.__l.__size_, (uint64_t)((*v31)[1].__r_.__value_.__l.__size_ - (*v31)[1].__r_.__value_.__r.__words[0]) >> 2);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      memset(&v59, 0, sizeof(v59));
      if (&v59 != (std::string *)(a1 + 80))
        v31 = (std::string **)sub_20BE8B37C((char *)&v59, *(char **)(a1 + 80), *(_QWORD *)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2);
      v32 = sub_20C6CAF18((uint64_t)v31, (uint64_t *)&v59, (uint64_t *)(a1 + 80), 3, (uint64_t *)&__dst);
      if ((_DWORD)v32)
        goto LABEL_59;
      v36 = *(int **)(a1 + 56);
      v37 = *(_QWORD *)(a1 + 64) - (_QWORD)v36;
      if (v37)
      {
        v38 = v37 >> 2;
        v39 = __dst.__r_.__value_.__r.__words[0];
        v40 = (uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 2;
        if (v38 <= 1)
          v38 = 1;
        while (1)
        {
          v41 = *v36;
          if ((v41 & 0x80000000) != 0 || v40 <= v41)
            break;
          *v36++ = *(_DWORD *)(v39 + 4 * v41);
          if (!--v38)
            goto LABEL_79;
        }
        v53 = sub_20C6E7B7C();
        sub_20BDDC0E4(&v56, "decode: Cannot reorder faceVertexIndices, out of range");
        sub_20C6C3E64((os_log_t *)v53, (uint64_t *)&v56);
        if (SHIBYTE(v58) < 0)
          operator delete(v56);
        v33 = 0;
        v4 = 12;
      }
      else
      {
LABEL_79:
        v42 = *v28;
        if (*v28 != v30)
        {
          while (1)
          {
            v43 = (char *)sub_20C6C5A40(v42 + 4, "_orderingIndices");
            if ((_DWORD)v43)
            {
              v44 = v42[7];
              if (*(_BYTE *)(v44 + 136) == 4)
              {
                if (&v59 != (std::string *)(v44 + 24))
                {
                  v43 = sub_20BE8B37C((char *)&v59, *(char **)(v44 + 24), *(_QWORD *)(v44 + 32), (uint64_t)(*(_QWORD *)(v44 + 32) - *(_QWORD *)(v44 + 24)) >> 2);
                  v44 = v42[7];
                }
                v32 = sub_20C6CAF18((uint64_t)v43, (uint64_t *)&v59, (uint64_t *)(v44 + 24), *(_DWORD *)(v44 + 140), (uint64_t *)&__dst);
                if ((_DWORD)v32)
                  break;
              }
            }
            v45 = (uint64_t *)v42[1];
            if (v45)
            {
              do
              {
                v46 = v45;
                v45 = (uint64_t *)*v45;
              }
              while (v45);
            }
            else
            {
              do
              {
                v46 = (uint64_t *)v42[2];
                v47 = *v46 == (_QWORD)v42;
                v42 = v46;
              }
              while (!v47);
            }
            v42 = v46;
            if (v46 == v30)
              goto LABEL_91;
          }
LABEL_59:
          v33 = 0;
          v4 = v32;
          goto LABEL_105;
        }
LABEL_91:
        v56 = 0;
        v57 = 0;
        v58 = 0;
        sub_20BE8B214(&v56, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, (uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 2);
        v48 = (int *)v56;
        if (v57 != v56)
        {
          v49 = (v57 - (_BYTE *)v56) >> 2;
          v50 = __dst.__r_.__value_.__r.__words[0];
          if (v49 <= 1)
            v49 = 1;
          do
          {
            v51 = *v48++;
            *(_DWORD *)(v50 + 4 * v51) = v51;
            --v49;
          }
          while (v49);
        }
        sub_20BDDC0E4(v54, "_orderingIndices");
        v80 = v54;
        v52 = (std::string *)(*((_QWORD *)sub_20C6CD9EC(v28, (const void **)v54, (uint64_t)&unk_20CAC184C, (_OWORD **)&v80)+ 7)+ 24);
        if (v52 != &__dst)
          sub_20BE8B37C((char *)v52, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, (uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 2);
        if (v55 < 0)
          operator delete(v54[0]);
        if (v56)
        {
          v57 = v56;
          operator delete(v56);
        }
        v33 = 1;
      }
LABEL_105:
      if (v59.__r_.__value_.__r.__words[0])
      {
        v59.__r_.__value_.__l.__size_ = v59.__r_.__value_.__r.__words[0];
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if (__dst.__r_.__value_.__r.__words[0])
      {
        __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if ((v33 & 1) == 0)
        goto LABEL_62;
LABEL_110:
      v4 = 0;
      goto LABEL_62;
    }
    if (v23 == v70)
      break;
    if (*((char *)v23 + 55) < 0)
      sub_20BDDBFAC(&__dst, (void *)v23[4], v23[5]);
    else
      __dst = *(std::string *)(v23 + 4);
    v24 = sub_20C6CA938(a1, (uint64_t *)&v65, (uint64_t)v5, v6, (uint64_t)(v23 + 7), &v64);
    v25 = v24;
    if ((_DWORD)v24)
    {
      v4 = v24;
    }
    else
    {
      v26 = (_QWORD *)v23[1];
      if (v26)
      {
        do
        {
          v23 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = v23;
          v23 = (_QWORD *)v23[2];
        }
        while ((_QWORD *)*v23 != v27);
      }
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (v25)
      goto LABEL_62;
  }
  v34 = sub_20C6E7B7C();
  sub_20BDDC0E4(&__dst, "decode: Cannot decompress mesh, missing attribute json data");
  sub_20C6C3E64((os_log_t *)v34, (uint64_t *)&__dst);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_61;
  v22 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_32:
  operator delete(v22);
LABEL_61:
  v4 = 150;
LABEL_62:
  sub_20C6F492C(&v65);
LABEL_63:
  __p[0] = (char *)&v78 + 8;
  sub_20BDE5038((void ***)__p);
  __p[0] = &v77;
  sub_20C6CC41C((void ***)__p);
  if (*((_QWORD *)&v75 + 1))
  {
    *(_QWORD *)&v76 = *((_QWORD *)&v75 + 1);
    operator delete(*((void **)&v75 + 1));
  }
  if ((_QWORD)v74)
  {
    *((_QWORD *)&v74 + 1) = v74;
    operator delete((void *)v74);
  }
  if (SHIBYTE(v72) < 0)
    operator delete(v71[0]);
  sub_20C6CBEC8((uint64_t)&v69, v70[0]);
  if (SHIBYTE(v68) < 0)
    operator delete(v67[0]);
  return v4;
}

void sub_20C6CA4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  if (__p)
    operator delete(__p);
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  sub_20C6F492C(&a32);
  sub_20C6CB268((uint64_t)&a40);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6CA5FC(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  uint64_t v4;
  _DWORD *v11;
  uint64_t *v17;
  std::string *v18;
  __int128 v19;
  std::string v20;
  void *__p[2];
  std::string::size_type v22;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v1 = *(unsigned __int8 *)(a1 + 23);
    if (v1 > 8)
    {
      if (v1 != 9)
      {
        if (v1 != 17)
        {
          if (v1 != 23)
            goto LABEL_68;
          v2 = *(_QWORD *)a1 == 0x2079726174696E75 && *(_QWORD *)(a1 + 8) == 0x6576697469736F70;
          if (!v2 || *(_QWORD *)(a1 + 15) != 0x7468676965772065)
            goto LABEL_68;
          return 4;
        }
        if (*(_QWORD *)a1 != 0x2079726174696E75
          || *(_QWORD *)(a1 + 8) != 0x6F74636576206433
          || *(_BYTE *)(a1 + 16) != 114)
        {
LABEL_68:
          v17 = sub_20C6E7B7C();
          std::operator+<char>();
          v18 = std::string::append(&v20, ", using default NONE");
          v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v22 = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          sub_20C6C3584((os_log_t *)v17, (uint64_t *)__p);
          if (SHIBYTE(v22) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v20.__r_.__value_.__l.__data_);
          return 0;
        }
        return 2;
      }
      if (*(_QWORD *)a1 != 0x677220726F6C6F63 || *(_BYTE *)(a1 + 8) != 98)
        goto LABEL_68;
      return 3;
    }
    v11 = (_DWORD *)a1;
    if (v1 != 4)
    {
      if (v1 != 7)
        goto LABEL_68;
      if (*(_DWORD *)a1 != 1718185589 || *(_DWORD *)(a1 + 3) != 1836216166)
        goto LABEL_68;
      return 1;
    }
LABEL_67:
    if (*v11 == 1701736302)
      return 0;
    goto LABEL_68;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 == 7 && **(_DWORD **)a1 == 1718185589 && *(_DWORD *)(*(_QWORD *)a1 + 3) == 1836216166)
    return 1;
  if (v4 == 17)
  {
    if (**(_QWORD **)a1 == 0x2079726174696E75
      && *(_QWORD *)(*(_QWORD *)a1 + 8) == 0x6F74636576206433
      && *(_BYTE *)(*(_QWORD *)a1 + 16) == 114)
    {
      return 2;
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  if (v4 == 9)
  {
    if (**(_QWORD **)a1 == 0x677220726F6C6F63 && *(_BYTE *)(*(_QWORD *)a1 + 8) == 98)
      return 3;
    v4 = *(_QWORD *)(a1 + 8);
  }
  if (v4 != 23)
  {
LABEL_44:
    if (v4 != 4)
      goto LABEL_68;
    v11 = *(_DWORD **)a1;
    goto LABEL_67;
  }
  if (**(_QWORD **)a1 != 0x2079726174696E75
    || *(_QWORD *)(*(_QWORD *)a1 + 8) != 0x6576697469736F70
    || *(_QWORD *)(*(_QWORD *)a1 + 15) != 0x7468676965772065)
  {
    v4 = *(_QWORD *)(a1 + 8);
    goto LABEL_44;
  }
  return 4;
}

void sub_20C6CA91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6CA938(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, _QWORD *a6)
{
  char *v12;
  _QWORD *v13;
  char v14;
  const void **v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  char v19;
  const void **v20;
  int v21;
  uint64_t *v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  void *v29;
  int v30;
  int v31;
  uint64_t *v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type size;
  std::string *v37;
  __int128 v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  const void **v44;
  int v45;
  int v46;
  int v47;
  int v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::string::size_type v52;
  uint64_t *v53;
  uint64_t v54;
  std::string v55;
  void *__p[2];
  __int128 v57;
  __int128 v58;
  std::string v59;
  std::string v60;
  std::string v61;
  uint64_t v62;
  const void **v63;
  std::__shared_weak_count *v64;

  v12 = (char *)operator new(0xB0uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = off_24C541D60;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *((_QWORD *)v12 + 21) = 0;
  v64 = (std::__shared_weak_count *)v12;
  *(_OWORD *)(v12 + 24) = 0u;
  v63 = (const void **)(v12 + 24);
  std::string::operator=((std::string *)v12 + 1, (const std::string *)a5);
  std::string::operator=((std::string *)(v63 + 14), (const std::string *)(a5 + 24));
  v13 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v62);
  v14 = sub_20C6CB2FC(v13);
  v16 = v62;
  v15 = v63;
  *((_BYTE *)v63 + 136) = v14;
  if ((v16 & 7) != 0)
  {
    v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
    v15 = v63;
  }
  *((_DWORD *)v15 + 36) = *(_DWORD *)(a5 + 72);
  *((_BYTE *)v15 + 148) = *(_BYTE *)(a5 + 76);
  v19 = sub_20C6CA5FC(a5 + 80);
  v20 = v63;
  *((_BYTE *)v63 + 72) = v19;
  *((_DWORD *)v20 + 19) = *(_DWORD *)(a5 + 104);
  if (v20 + 10 != (const void **)(a5 + 112))
    sub_20BE8B37C((char *)v20 + 80, *(char **)(a5 + 112), *(_QWORD *)(a5 + 120), (uint64_t)(*(_QWORD *)(a5 + 120) - *(_QWORD *)(a5 + 112)) >> 2);
  v21 = sub_20C6F4A10((_DWORD *)(a3 + *a6), a4);
  if (!v21)
  {
    v57 = 0u;
    v58 = 0u;
    *(_OWORD *)__p = 0u;
    sub_20C6F49B0(a3 + *a6, a4, __p);
    v31 = v30;
    if (v30)
    {
      v32 = sub_20C6E7B7C();
      std::operator+<char>();
      v33 = std::string::append(&v59, " due to error ");
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v55, v31);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v55;
      else
        v35 = (std::string *)v55.__r_.__value_.__r.__words[0];
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      else
        size = v55.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v60, (const std::string::value_type *)v35, size);
LABEL_30:
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      sub_20C6C3E64((os_log_t *)v32, (uint64_t *)&v61);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_39;
      v29 = (void *)v59.__r_.__value_.__r.__words[0];
      goto LABEL_38;
    }
    v44 = v63;
    v46 = HIDWORD(__p[1]);
    v45 = v57;
    *((_DWORD *)v63 + 35) = v57;
    *((_DWORD *)v44 + 26) = HIDWORD(v57);
    v54 = 0;
    sub_20BE81ACC((uint64_t)(v44 + 3), v46 * (uint64_t)v45);
    sub_20BE81ACC((uint64_t)(v63 + 6), SDWORD1(v57));
    if (DWORD1(v58) == 3)
    {
      v47 = sub_20C6F4A80(a2, a3 + *a6, a4, &v54, (uint64_t)v63[3], (void *)v63[6]);
    }
    else
    {
      if (DWORD1(v58))
        goto LABEL_58;
      v47 = sub_20C6F4A74(a2, a3 + *a6, a4, &v54, (uint64_t)v63[3]);
    }
    v48 = v47;
    if (v47)
    {
      v32 = sub_20C6E7B7C();
      std::operator+<char>();
      v49 = std::string::append(&v59, " due to error ");
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v55, v48);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v55;
      else
        v51 = (std::string *)v55.__r_.__value_.__r.__words[0];
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      else
        v52 = v55.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v60, (const std::string::value_type *)v51, v52);
      goto LABEL_30;
    }
LABEL_58:
    *a6 += v54;
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
    v53 = sub_20C6CC48C((uint64_t **)(a1 + 216), v63, (uint64_t)&unk_20CAC184C, (__int128 **)&v61);
    sub_20BDE881C(v53 + 7, (uint64_t *)&v63);
    v39 = 0;
    goto LABEL_40;
  }
  v22 = sub_20C6E7B7C();
  std::operator+<char>();
  v23 = std::string::append(&v60, " due to error ");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v59, v21);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v59;
  else
    v25 = (std::string *)v59.__r_.__value_.__r.__words[0];
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  else
    v26 = v59.__r_.__value_.__l.__size_;
  v27 = std::string::append(&v61, (const std::string::value_type *)v25, v26);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  *(_QWORD *)&v57 = *((_QWORD *)&v27->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  sub_20C6C3E64((os_log_t *)v22, (uint64_t *)__p);
  if (SBYTE7(v57) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_39;
  v29 = (void *)v60.__r_.__value_.__r.__words[0];
LABEL_38:
  operator delete(v29);
LABEL_39:
  v39 = 150;
LABEL_40:
  v40 = v64;
  if (v64)
  {
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  return v39;
}

void sub_20C6CADEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a15 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (a28 < 0)
    operator delete(a23);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v34 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_20C6CAEDC(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *sub_20BDDE084(a1, &v4, a2);
  if (!v2)
    sub_20BEB9194("map::at:  key not found");
  return v2 + 56;
}

uint64_t sub_20C6CAF18(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, uint64_t *a5)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type size;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  __int128 v45;
  std::string::size_type v46;

  if (a4 < 1 || (v8 = (a2[1] - *a2) >> 2, v8 % a4) || v8 / a4 != (a5[1] - *a5) >> 2)
  {
    v23 = sub_20C6E7B7C();
    std::to_string(&v40, a4);
    v24 = std::string::insert(&v40, 0, "reorderData: Size issue, componentsPerVector: ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v41, ", inputData size: ");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, (a2[1] - *a2) >> 2);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v39;
    else
      v28 = (std::string *)v39.__r_.__value_.__r.__words[0];
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      size = v39.__r_.__value_.__l.__size_;
    v30 = std::string::append(&v42, (const std::string::value_type *)v28, size);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v43, ", orderInfo size: ");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v38, (a5[1] - *a5) >> 2);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v38;
    else
      v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    else
      v35 = v38.__r_.__value_.__l.__size_;
    v36 = std::string::append(&v44, (const std::string::value_type *)v34, v35);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v46 = v36->__r_.__value_.__r.__words[2];
    v45 = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v23, (uint64_t *)&v45);
    if (SHIBYTE(v46) < 0)
      operator delete((void *)v45);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    return 12;
  }
  else
  {
    sub_20BE81ACC((uint64_t)a3, v8);
    v10 = *a2;
    v11 = a2[1];
    v12 = v11 - *a2;
    if (v11 != *a2)
    {
      v13 = 0;
      v14 = v12 >> 2;
      v15 = *a5;
      v16 = *a3;
      do
      {
        v17 = (int *)(v10 + 4 * (int)v13);
        v18 = v13 << 32;
        v19 = (_DWORD *)(v16 + 4 * *(_DWORD *)(v15 + 4 * ((int)v13 / a4)) * a4);
        v20 = a4;
        do
        {
          v21 = *v17++;
          *v19++ = v21;
          v18 += 0x100000000;
          v13 = (v13 + 1);
          --v20;
        }
        while (v20);
      }
      while (v14 > v18 >> 32);
    }
    return 0;
  }
}

void sub_20C6CB1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v47 - 89) < 0)
    operator delete(*(void **)(v47 - 112));
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6CB268(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v5 = (void **)(a1 + 152);
  sub_20BDE5038(&v5);
  v5 = (void **)(a1 + 128);
  sub_20C6CC41C(&v5);
  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  sub_20C6CBEC8(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C6CB2FC(_QWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v30[3];
  void *__p;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (*a1)
  {
    v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v2)
      v2 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v3 = *((_QWORD *)v2 + 17);
    __p = (void *)v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        __p = (void *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
    }
    v32 = 1;
    v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v6)
      v6 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v7 = *((_QWORD *)v6 + 145);
    v33 = v7;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    v34 = 2;
    v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v10)
      v10 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v11 = *((_QWORD *)v10 + 151);
    v35 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    v36 = 3;
    v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v14)
      v14 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v15 = *((_QWORD *)v14 + 153);
    v37 = v15;
    if ((v15 & 7) != 0)
    {
      v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 2, v16));
      if ((v17 & 1) == 0)
        v37 &= 0xFFFFFFFFFFFFFFF8;
    }
    v38 = 4;
    v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v18)
      v18 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v19 = *((_QWORD *)v18 + 40);
    v39 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 2, v20));
      if ((v21 & 1) == 0)
        v39 &= 0xFFFFFFFFFFFFFFF8;
    }
    v40 = 5;
    sub_20C6CBF94((uint64_t)v30, (uint64_t *)&__p, 5);
    v22 = (void **)&v41;
    do
    {
      v24 = (uint64_t)*(v22 - 2);
      v22 -= 2;
      v23 = v24;
      if ((v24 & 7) != 0)
      {
        v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
    }
    while (v22 != &__p);
    __p = a1;
    v27 = *((unsigned __int8 *)sub_20C6CC10C(v30, a1, (uint64_t)&unk_20CAC184C, (uint64_t **)&__p) + 40);
    sub_20BF2B200((uint64_t)v30, v30[1]);
  }
  else
  {
    v28 = sub_20C6E7B7C();
    sub_20BDDC0E4(&__p, "getInterpolationFromToken: Empty token");
    sub_20C6C3584((os_log_t *)v28, (uint64_t *)&__p);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    return 0;
  }
  return v27;
}

void sub_20C6CB5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;

  while (1)
  {
    v16 = *((_QWORD *)v14 - 2);
    v14 -= 16;
    v15 = v16;
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    if (v14 == &a14)
      _Unwind_Resume(exception_object);
  }
}

uint64_t sub_20C6CB674(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  _BYTE __str[32];
  __int128 v10;
  std::string v11;
  int v12;
  char v13;
  std::string v14;
  int v15;
  void *v16;
  _BYTE *v17;
  uint64_t v18;
  void *__dst[2];
  uint64_t v20;
  std::string v21;
  uint64_t *v22;
  _QWORD *v23[2];
  __int128 __p;
  uint64_t v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[3];
  _BYTE v31[247];
  __int128 *v32[2];

  sub_20C6CC21C((uint64_t)v31);
  memset(&v21, 0, sizeof(v21));
  v23[0] = 0;
  v23[1] = 0;
  v22 = (uint64_t *)v23;
  v25 = 0;
  __p = 0uLL;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  memset(v30, 0, sizeof(v30));
  std::string::operator=(&v21, (const std::string *)(a1 + 8));
  sub_20BDDC0E4(__str, off_24C541DA0[*(char *)(a1 + 104)]);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)__p);
  v8 = a2;
  __p = *(_OWORD *)__str;
  v25 = *(_QWORD *)&__str[16];
  v26 = *(_DWORD *)(a1 + 108);
  if (&v27 != (__int128 *)(a1 + 112))
    sub_20BE8B37C((char *)&v27, *(char **)(a1 + 112), *(_QWORD *)(a1 + 120), (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 2);
  if (v30 != (_OWORD *)(a1 + 168))
    sub_20C6CE094((uint64_t **)v30, *(_QWORD *)(a1 + 168), *(uint64_t **)(a1 + 176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 3));
  if ((_OWORD *)((char *)&v30[1] + 8) != (_OWORD *)(a1 + 192))
    sub_20BE75818((uint64_t)&v30[1] + 8, *(std::string **)(a1 + 192), *(__int128 **)(a1 + 200), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) >> 3));
  for (i = *(_QWORD *)(a1 + 248); i != a1 + 240; i = *(_QWORD *)(i + 8))
  {
    if (*(char *)(i + 39) < 0)
    {
      sub_20BDDBFAC(__dst, *(void **)(i + 16), *(_QWORD *)(i + 24));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(i + 16);
      v20 = *(_QWORD *)(i + 32);
    }
    memset(&v14, 0, sizeof(v14));
    v17 = 0;
    v18 = 0;
    v16 = 0;
    memset(__str, 0, sizeof(__str));
    v10 = 0u;
    memset(&v11, 0, sizeof(v11));
    v32[0] = (__int128 *)__dst;
    v5 = sub_20C6CC48C((uint64_t **)(a1 + 216), (const void **)__dst, (uint64_t)&unk_20CAC184C, v32);
    sub_20C6E36EC((std::string *)v5[7], (std::string *)__str);
    v32[0] = (__int128 *)__str;
    v6 = sub_20C6CE518(&v22, (const void **)__str, (uint64_t)&unk_20CAC184C, v32);
    std::string::operator=((std::string *)(v6 + 7), (const std::string *)__str);
    std::string::operator=((std::string *)(v6 + 10), (const std::string *)&__str[24]);
    std::string::operator=((std::string *)(v6 + 13), &v11);
    *((_DWORD *)v6 + 32) = v12;
    *((_BYTE *)v6 + 132) = v13;
    std::string::operator=((std::string *)(v6 + 17), &v14);
    *((_DWORD *)v6 + 40) = v15;
    if (v6 + 7 != (uint64_t *)__str)
      sub_20BE8B37C((char *)v6 + 168, (char *)v16, (uint64_t)v17, (v17 - (_BYTE *)v16) >> 2);
    if (v16)
    {
      v17 = v16;
      operator delete(v16);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(v10) < 0)
      operator delete(*(void **)&__str[24]);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    if (SHIBYTE(v20) < 0)
      operator delete(__dst[0]);
  }
  sub_20C6E61C0((uint64_t)v31, (uint64_t)&v21);
  sub_20C6E50A4((uint64_t)v31, v8);
  *(_QWORD *)__str = (char *)&v30[1] + 8;
  sub_20BDE5038((void ***)__str);
  *(_QWORD *)__str = v30;
  sub_20C6CC41C((void ***)__str);
  if (*((_QWORD *)&v28 + 1))
  {
    *(_QWORD *)&v29 = *((_QWORD *)&v28 + 1);
    operator delete(*((void **)&v28 + 1));
  }
  if ((_QWORD)v27)
  {
    *((_QWORD *)&v27 + 1) = v27;
    operator delete((void *)v27);
  }
  if (SHIBYTE(v25) < 0)
    operator delete((void *)__p);
  sub_20C6CBEC8((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  sub_20C6CC29C((uint64_t)v31);
  return 0;
}

void sub_20C6CBA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  sub_20C6CB268((uint64_t)&a39);
  sub_20C6CC29C((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6CBA78(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C6CBAE8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_20C6CBB64((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_20C6CBB4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF383C0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6CBB64(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_20C6CBBE4(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_20C6CBD8C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_20C6CBBE4(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int8 *)a2 + 32), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((unsigned __int8 *)v10 + 32) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int8 *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int8 *)a4 + 32))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(unsigned __int8 *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_BYTE *sub_20C6CBD8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _BYTE *result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v5 = a1 + 8;
  result = operator new(0x30uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  result[32] = *(_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)result + 5) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *((_QWORD *)result + 5) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t **sub_20C6CBE08(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _BYTE *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[32] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    sub_20BDDE1B4(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_20C6CBEC8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C6CBEC8(a1, *a2);
    sub_20C6CBEC8(a1, a2[1]);
    sub_20C6CBF10((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C6CBF10(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20C6CBF94(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_20C6CC010((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_20C6CBFF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF2B200(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6CC010(uint64_t **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (uint64_t **)sub_20C0A7D98(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_20C6CC090((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *sub_20C6CC090@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v5 = a1 + 8;
  result = operator new(0x30uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *a2;
  result[4] = *a2;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_BYTE *)result + 40) = *((_BYTE *)a2 + 8);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *sub_20C6CC10C(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_20BF1E63C((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_20C6CC1A0((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *sub_20C6CC1A0@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v5 = a1 + 8;
  result = operator new(0x30uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = **a2;
  result[4] = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_BYTE *)result + 40) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_20C6CC21C(uint64_t a1)
{
  _DWORD *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  v2 = operator new(4uLL);
  *(_QWORD *)(a1 + 192) = v2;
  *v2++ = 0;
  *(_QWORD *)(a1 + 200) = v2;
  *(_QWORD *)(a1 + 208) = v2;
  *(_QWORD *)(a1 + 232) = 16;
  return a1;
}

void sub_20C6CC288(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C6CB268(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6CC29C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  v2 = *(void **)(a1 + 192);
  if (v2)
  {
    *(_QWORD *)(a1 + 200) = v2;
    operator delete(v2);
  }
  v6 = (void **)(a1 + 152);
  sub_20BDE5038(&v6);
  v6 = (void **)(a1 + 128);
  sub_20C6CC41C(&v6);
  v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(_QWORD *)(a1 + 112) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(_QWORD *)(a1 + 88) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  sub_20C6CBEC8(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_DWORD *sub_20C6CC340(_DWORD *result, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  int v5;
  int *v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;

  v2 = result;
  if (result != a2 && result + 1 != a2)
  {
    v5 = *result;
    v4 = result[1];
    if (v4 < *result)
      ++result;
    v6 = v4 >= v5 ? v2 + 1 : v2;
    v7 = v2 + 2;
    if (v7 != a2)
    {
      if (v4 <= v5)
        v8 = v5;
      else
        v8 = v4;
      if (v4 >= v5)
        v4 = v5;
      while (v7 + 1 != a2)
      {
        v10 = *v7;
        v9 = v7[1];
        if (v9 >= *v7)
        {
          if (v10 < v4)
          {
            v4 = *v7;
            result = v7;
          }
          v11 = v9 < v8;
          if (v9 > v8)
            v8 = v7[1];
          if (!v11)
            v6 = v7 + 1;
        }
        else
        {
          v4 = *result;
          if (v9 < *result)
          {
            v4 = v7[1];
            result = v7 + 1;
          }
          v8 = *v6;
          if (v10 > *v6)
            v8 = *v7;
          if (v10 >= *v6)
            v6 = v7;
        }
        v7 += 2;
        if (v7 == a2)
          return result;
      }
      if (*v7 < *result)
        return v7;
    }
  }
  return result;
}

void sub_20C6CC41C(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        sub_20BEB422C(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_20C6CC48C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C6CC534((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20BE7B260((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_20C6CC534@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C6CC5AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE7B260(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6CC5C4(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_20C6CC658((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *sub_20C6CC658@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C6CC6D8(v6 + 4, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C6CC6BC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BDEEB58(v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6CC6D8(_QWORD *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  *((_WORD *)__dst + 14) = 0;
  *((_DWORD *)__dst + 6) = 0;
  return __dst;
}

uint64_t *sub_20C6CC72C(uint64_t **a1, double *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  double v7;
  uint64_t **v8;
  double v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((double *)v5 + 4);
        if (v7 >= v9)
          break;
        v5 = (uint64_t *)*v5;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_20BDDE1B4(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_20C6CC7E4(unsigned int *a1, _QWORD *a2, uint64_t a3, int a4, int a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  char *v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  float *v19;
  float *v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  char *v25;
  float v26;
  float *v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  float *v43;
  float *v44;
  int v45;
  uint64_t *v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::string::size_type size;
  std::string *v53;
  __int128 v54;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  void *__p[2];
  std::string::size_type v61;
  void *v62[3];
  char *v63;
  char *v64;

  if (a4 < 1)
    return 112;
  v7 = *a1;
  v8 = 112;
  if ((int)v7 >= a4 && !((int)v7 % a4))
  {
    sub_20BE81ACC((uint64_t)a2, v7);
    v12 = a4;
    sub_20C6CCBE8(&v63, a4, *((_DWORD **)a1 + 4));
    sub_20C6CCBE8(v62, a4, *((_DWORD **)a1 + 4));
    v13 = 0;
    v14 = (float *)v62[0];
    v15 = v63;
    v16 = (int)v7;
    v17 = (float *)*((_QWORD *)a1 + 4);
    do
    {
      v18 = a4;
      v19 = v14;
      v20 = (float *)v15;
      v21 = v17;
      do
      {
        v22 = *v21++;
        v23 = v22;
        v24 = *v20;
        if (*v20 >= v22)
          v24 = v23;
        *v20++ = v24;
        if (v23 < *v19)
          v23 = *v19;
        *v19++ = v23;
        --v18;
      }
      while (v18);
      v13 += a4;
      v17 += a4;
    }
    while (v13 < (int)v7);
    v25 = v63;
    v26 = *(float *)v62[0] - *(float *)v63;
    if (a4 >= 2)
    {
      v27 = (float *)((char *)v62[0] + 4);
      v28 = (float *)(v63 + 4);
      v29 = a4 - 1;
      do
      {
        v30 = *v27++;
        v31 = v30;
        v32 = *v28++;
        v33 = v31 - v32;
        if (v33 >= v26)
          v26 = v33;
        --v29;
      }
      while (v29);
    }
    v34 = 1 << a5;
    if (a5)
    {
      if (v26 < 2.2204e-16)
        v26 = 1.0;
      v35 = (float)((float)v34 + -1.0) / v26;
    }
    else
    {
      v35 = 1.0;
    }
    v36 = 0;
    v37 = 0;
    v38 = (float *)*((_QWORD *)a1 + 4);
    v39 = a4;
    v40 = 4 * a4;
    while (2)
    {
      v41 = (int *)(*a2 + v36);
      v42 = v12;
      v43 = (float *)v25;
      v44 = v38;
      do
      {
        v45 = llroundf(v35 * (float)(*v44 - *v43));
        if (v45 < 0 || v34 <= v45)
        {
          v46 = sub_20C6E7B7C();
          std::to_string(&v57, v45);
          v47 = std::string::insert(&v57, 0, "Uniform quantization: values out of bound; qvalue=");
          v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v58.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          v49 = std::string::append(&v58, " and qp1=");
          v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          v59.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v50;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v56, 1 << a5);
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v51 = &v56;
          else
            v51 = (std::string *)v56.__r_.__value_.__r.__words[0];
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
          else
            size = v56.__r_.__value_.__l.__size_;
          v53 = std::string::append(&v59, (const std::string::value_type *)v51, size);
          v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          v61 = v53->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          sub_20C6C3E64((os_log_t *)v46, (uint64_t *)__p);
          if (SHIBYTE(v61) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v56.__r_.__value_.__l.__data_);
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v59.__r_.__value_.__l.__data_);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v58.__r_.__value_.__l.__data_);
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v57.__r_.__value_.__l.__data_);
          v8 = 112;
          goto LABEL_49;
        }
        *v41++ = v45;
        ++v44;
        ++v43;
        --v42;
      }
      while (v42);
      v37 += v39;
      v38 = (float *)((char *)v38 + v40);
      v36 += v40;
      if (v37 < v16)
        continue;
      break;
    }
    if ((char **)(a3 + 8) != &v63)
      sub_20BE8B37C((char *)(a3 + 8), v63, (uint64_t)v64, (v64 - v63) >> 2);
    v8 = 0;
    *(float *)(a3 + 4) = 1.0 / v35;
LABEL_49:
    if (v62[0])
    {
      v62[1] = v62[0];
      operator delete(v62[0]);
    }
    if (v63)
    {
      v64 = v63;
      operator delete(v63);
    }
  }
  return v8;
}

void sub_20C6CCB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v35;
  void *v36;

  v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(_QWORD *)(v33 - 120) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v33 - 104);
  if (v36)
  {
    *(_QWORD *)(v33 - 96) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C6CCBE8(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDE3738(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20C6CCC4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6CCC68(double **a1, _QWORD *a2, uint64_t a3, int a4, int a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float *v16;
  char *v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  float *v21;
  float *v22;
  double *v23;
  double v24;
  float v25;
  float v26;
  char *v27;
  float v28;
  float *v29;
  float *v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  int v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  float *v46;
  double *v47;
  int v48;
  uint64_t *v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  std::string::size_type size;
  std::string *v56;
  __int128 v57;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  void *__p[2];
  std::string::size_type v64;
  void *v65[3];
  char *v66;
  char *v67;

  if (a4 < 1)
    return 112;
  v7 = *(unsigned int *)a1;
  v8 = 112;
  if ((int)v7 >= a4 && !((int)v7 % a4))
  {
    sub_20BE81ACC((uint64_t)a2, v7);
    v12 = a4;
    v13 = *a1[4];
    *(float *)v65 = v13;
    sub_20C6CCBE8(&v66, a4, v65);
    v14 = *a1[4];
    *(float *)__p = v14;
    sub_20C6CCBE8(v65, a4, __p);
    v15 = 0;
    v16 = (float *)v65[0];
    v17 = v66;
    v18 = (int)v7;
    v19 = a1[4];
    do
    {
      v20 = a4;
      v21 = v16;
      v22 = (float *)v17;
      v23 = v19;
      do
      {
        v24 = *v23++;
        v25 = v24;
        v26 = *v22;
        if (*v22 >= v25)
          v26 = v25;
        *v22++ = v26;
        if (*v21 > v25)
          v25 = *v21;
        *v21++ = v25;
        --v20;
      }
      while (v20);
      v15 += a4;
      v19 += a4;
    }
    while (v15 < (int)v7);
    v27 = v66;
    v28 = *(float *)v65[0] - *(float *)v66;
    if (a4 >= 2)
    {
      v29 = (float *)((char *)v65[0] + 4);
      v30 = (float *)(v66 + 4);
      v31 = a4 - 1;
      do
      {
        v32 = *v29++;
        v33 = v32;
        v34 = *v30++;
        v35 = v33 - v34;
        if (v35 >= v28)
          v28 = v35;
        --v31;
      }
      while (v31);
    }
    v36 = 1 << a5;
    if (a5)
    {
      if (v28 < 2.2204e-16)
        v28 = 1.0;
      v37 = (float)((float)v36 + -1.0) / v28;
    }
    else
    {
      v37 = 1.0;
    }
    v38 = 0;
    v39 = 0;
    v40 = a1[4];
    v41 = a4;
    v42 = 8 * a4;
    v43 = 4 * a4;
    while (2)
    {
      v44 = (int *)(*a2 + v38);
      v45 = v12;
      v46 = (float *)v27;
      v47 = v40;
      do
      {
        v48 = llround((*v47 - *v46) * v37);
        if (v48 < 0 || v36 <= v48)
        {
          v49 = sub_20C6E7B7C();
          std::to_string(&v60, v48);
          v50 = std::string::insert(&v60, 0, "Uniform quantization: values out of bound; qvalue=");
          v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v61.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          v52 = std::string::append(&v61, " and qp1=");
          v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
          v62.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v53;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v59, 1 << a5);
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v54 = &v59;
          else
            v54 = (std::string *)v59.__r_.__value_.__r.__words[0];
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
          else
            size = v59.__r_.__value_.__l.__size_;
          v56 = std::string::append(&v62, (const std::string::value_type *)v54, size);
          v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          v64 = v56->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          sub_20C6C3E64((os_log_t *)v49, (uint64_t *)__p);
          if (SHIBYTE(v64) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v59.__r_.__value_.__l.__data_);
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v62.__r_.__value_.__l.__data_);
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v61.__r_.__value_.__l.__data_);
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v60.__r_.__value_.__l.__data_);
          v8 = 112;
          goto LABEL_49;
        }
        *v44++ = v48;
        ++v47;
        ++v46;
        --v45;
      }
      while (v45);
      v39 += v41;
      v40 = (double *)((char *)v40 + v42);
      v38 += v43;
      if (v39 < v18)
        continue;
      break;
    }
    if ((char **)(a3 + 8) != &v66)
      sub_20BE8B37C((char *)(a3 + 8), v66, (uint64_t)v67, (v67 - v66) >> 2);
    v8 = 0;
    *(float *)(a3 + 4) = 1.0 / v37;
LABEL_49:
    if (v65[0])
    {
      v65[1] = v65[0];
      operator delete(v65[0]);
    }
    if (v66)
    {
      v67 = v66;
      operator delete(v66);
    }
  }
  return v8;
}

void sub_20C6CD000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v35;
  void *v36;

  v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(_QWORD *)(v33 - 120) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v33 - 104);
  if (v36)
  {
    *(_QWORD *)(v33 - 96) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C6CD09C(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      v5 = v3 - 24;
      v6 = v3 - 24;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 24;
        (*v7)(v5);
        v8 = v5 == v1;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *sub_20C6CD110(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDE4FA4(a1, a2);
    v4 = (_QWORD *)a1[1];
    v5 = &v4[3 * a2];
    do
    {
      *v4 = v4;
      v4[1] = v4;
      v4[2] = 0;
      v4 += 3;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C6CD17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C6CC41C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6CD190(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v7[4] = *(_DWORD *)(v3 + 16);
      *(_QWORD *)v7 = v6;
      *((_QWORD *)v7 + 1) = a1;
      *((_QWORD *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_20C6CD214(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEB422C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6CD228(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;

  v3 = *(uint64_t **)a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = a1 + 16;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 16;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v16 = &v10[24 * v9];
  sub_20C6CD190(v14, a2);
  v15 = v14 + 24;
  sub_20C6CD32C((uint64_t **)a1, &v13);
  v11 = *(_QWORD *)(a1 + 8);
  sub_20C6CD3EC((uint64_t)&v13);
  return v11;
}

void sub_20C6CD318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C6CD3EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_20C6CD32C(uint64_t **result, _QWORD *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = (uint64_t *)a2[1];
  if (v4 != *result)
  {
    do
    {
      v6 -= 3;
      v4 -= 3;
      result = (uint64_t **)sub_20C6CD3C8((uint64_t)(v3 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *v3;
  *v3 = v6;
  a2[1] = v7;
  v8 = v3[1];
  v3[1] = (uint64_t *)a2[2];
  a2[2] = v8;
  v9 = v3[2];
  v3[2] = (uint64_t *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C6CD3C8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  return sub_20BEBD458((uint64_t)a2, a2, a3);
}

uint64_t sub_20C6CD3EC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_20BEB422C((_QWORD *)(i - 24));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20C6CD438(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  _QWORD v22[4];
  char v23;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      v9 = *a2;
      v10 = v5 + 12 * v4;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
      *(_QWORD *)v10 = v9;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v11 = *(uint64_t **)(a1 + 32);
    v12 = 1;
    do
    {
      v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    v14 = sub_20BF5AF1C(a1, v13);
    v15 = v14;
    if (v4)
    {
      v16 = 12 * v4;
      v17 = v14;
      do
      {
        v18 = *v11;
        *((_DWORD *)v17 + 2) = *((_DWORD *)v11 + 2);
        *v17 = v18;
        v17 = (_QWORD *)((char *)v17 + 12);
        v11 = (uint64_t *)((char *)v11 + 12);
        v16 -= 12;
      }
      while (v16);
    }
    v19 = *a2;
    v20 = (char *)v14 + 12 * v4;
    *((_DWORD *)v20 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v20 = v19;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  v22[0] = "vt/array.h";
  v22[1] = "emplace_back";
  v22[2] = 433;
  v22[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec3f, Args = <const pxrInternal__aapl__pxrReserved__::GfVec3f &>]";
  v23 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v21 = 4;
    else
      v21 = 3;
  }
  else
  {
    v21 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v21);
}

void sub_20C6CD5CC(unint64_t *a1, unint64_t a2, int ***a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int v15;
  unint64_t *v16;
  unint64_t *v17;
  int *v18;
  int *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  int v25;
  int *v26;
  int *v27;
  uint64_t v28;
  int v29;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_20;
  v7 = (unint64_t *)a1[4];
  if (!v7)
  {
    if (4 * a2 / a2 == 4)
    {
      v17 = sub_20BF64F28((uint64_t)a1, a2);
      v16 = v17;
      v18 = **a3;
      v19 = *a3[1];
      if (v18 != v19)
      {
        v20 = 0;
        do
        {
          *(_DWORD *)((char *)v17 + v20 * 4) = v18[v20];
          ++v20;
        }
        while (&v18[v20] != v19);
      }
      goto LABEL_32;
    }
LABEL_20:
    sub_20BF56210(a1);
    return;
  }
  if (a1[3])
  {
LABEL_22:
    if (v3 >= a2)
      v21 = a2;
    else
      v21 = *a1;
    v22 = sub_20BF64F28((uint64_t)a1, a2);
    v16 = v22;
    if (v21)
    {
      v23 = 4 * v21;
      v24 = v22;
      do
      {
        v25 = *(_DWORD *)v7;
        v7 = (unint64_t *)((char *)v7 + 4);
        *(_DWORD *)v24 = v25;
        v24 = (unint64_t *)((char *)v24 + 4);
        v23 -= 4;
      }
      while (v23);
    }
    if (v3 < a2)
    {
      v26 = **a3;
      v27 = *a3[1];
      if (v26 != v27)
      {
        v28 = 4 * v3;
        do
        {
          v29 = *v26++;
          *(_DWORD *)((char *)v22 + v28) = v29;
          v28 += 4;
        }
        while (v26 != v27);
      }
    }
    goto LABEL_32;
  }
  v8 = atomic_load(v7 - 2);
  if (v8 != 1)
  {
    v7 = (unint64_t *)a1[4];
    goto LABEL_22;
  }
  if (v3 < a2)
  {
    v9 = a1[4];
    if (*(_QWORD *)(v9 - 8) < a2)
    {
      v10 = sub_20BF64F28((uint64_t)a1, a2);
      v7 = v10;
      if (v3)
      {
        v11 = 0;
        do
        {
          *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
          v11 += 4;
        }
        while (4 * v3 != v11);
      }
    }
    v12 = **a3;
    v13 = *a3[1];
    if (v12 != v13)
    {
      v14 = 4 * v3;
      do
      {
        v15 = *v12++;
        *(_DWORD *)((char *)v7 + v14) = v15;
        v14 += 4;
      }
      while (v12 != v13);
    }
  }
  v16 = v7;
LABEL_32:
  if (v16 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v16;
  }
  *a1 = a2;
}

_QWORD *sub_20C6CD7AC(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20C6CD810(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C6CD82C(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BE90F0C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_20C6CD894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BDE9EB0(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6CD8A8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &off_24C541CE8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C6CD8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;

  a10 = 0;
  if (v10)
    sub_20C6CD974((int)&a10, v10);
  _Unwind_Resume(exception_object);
}

void sub_20C6CD918(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C6CD92C(uint64_t a1)
{
  sub_20C6CD974(a1 + 24, *(void ***)(a1 + 24));
}

uint64_t sub_20C6CD934(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C541D38))
    return a1 + 24;
  else
    return 0;
}

void sub_20C6CD974(int a1, void **__p)
{
  void *v3;
  void *v4;
  void *v5;

  if (__p)
  {
    if (*((char *)__p + 135) < 0)
      operator delete(__p[14]);
    v3 = __p[10];
    if (v3)
    {
      __p[11] = v3;
      operator delete(v3);
    }
    v4 = __p[6];
    if (v4)
    {
      __p[7] = v4;
      operator delete(v4);
    }
    v5 = __p[3];
    if (v5)
    {
      __p[4] = v5;
      operator delete(v5);
    }
    if (*((char *)__p + 23) < 0)
      operator delete(*__p);
    operator delete(__p);
  }
}

_OWORD *sub_20C6CD9EC(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)sub_20BDDE084((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    v13 = 1;
    sub_20BDDE1B4(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_20BE7B260((uint64_t)v12, 0);
  }
  return v7;
}

void sub_20C6CDAAC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C541D60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20C6CDABC(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C541D60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C6CDADC(uint64_t a1)
{
  char v1;

  sub_20C6CDB04((uint64_t)&v1, a1 + 24);
}

void sub_20C6CDB04(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;

  if (*(char *)(a2 + 135) < 0)
    operator delete(*(void **)(a2 + 112));
  v3 = *(void **)(a2 + 80);
  if (v3)
  {
    *(_QWORD *)(a2 + 88) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 48);
  if (v4)
  {
    *(_QWORD *)(a2 + 56) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a2 + 24);
  if (v5)
  {
    *(_QWORD *)(a2 + 32) = v5;
    operator delete(v5);
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

char *sub_20C6CDB78(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int64_t v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  char *v30;
  char *v31;
  char *v32;
  char v33;
  char *v34;
  char *v35;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v6 = a5;
  v7 = __src;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      sub_20BDDF694();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = operator new(v15);
    else
      v16 = 0;
    v26 = &v13[(_QWORD)v16];
    v27 = &v13[(_QWORD)v16 + v6];
    v28 = v26;
    do
    {
      v29 = *v7++;
      *v28++ = v29;
      --v6;
    }
    while (v6);
    v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      v32 = v26;
    }
    else
    {
      v31 = v5;
      v32 = v26;
      do
      {
        v33 = *--v31;
        *--v32 = v33;
      }
      while (v31 != v30);
      v10 = *(char **)(a1 + 8);
    }
    v34 = (char *)v16 + v15;
    if (v10 != v5)
      memmove(v27, v5, v10 - v5);
    v35 = *(char **)a1;
    *(_QWORD *)a1 = v32;
    *(_QWORD *)(a1 + 8) = &v27[v10 - v5];
    *(_QWORD *)(a1 + 16) = v34;
    if (v35)
      operator delete(v35);
    return v26;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(char **)(a1 + 8);
LABEL_17:
    v21 = &v5[v6];
    v22 = &v20[-v6];
    v23 = v20;
    if (&v20[-v6] < v10)
    {
      v24 = &v10[v6] - v20;
      v23 = v20;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v5[v6], v5, v20 - v21);
    if (v18 != v7)
      memmove(v5, v7, v18 - v7);
    return v5;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
    goto LABEL_17;
  return v5;
}

_OWORD *sub_20C6CDD54(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)sub_20BDDE084((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    sub_20BDDE1B4(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_20C6CDE18((uint64_t)v12, 0);
  }
  return v7;
}

void sub_20C6CDE18(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C6CDE5C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20C6CDE5C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *sub_20C6CDEA0(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C6CDF48((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C6CDE18((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_20C6CDF48@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C6CDFC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C6CDE18(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6CDFDC(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 39);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 39);
      else
        v9 = *(unsigned __int8 **)(v3 + 24);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v3 + 16), v7, *(_QWORD *)(v3 + 24)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 39))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10 + 16) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t sub_20C6CE094(uint64_t **a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) < a4)
  {
    sub_20C6CE200(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v10 = 0x5555555555555556 * (a1[2] - *a1);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_20BDE4FA4(a1, v11);
    result = sub_20C6CE264(v8, a2, (uint64_t)a3, (uint64_t)a1[1]);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[1] - v9) < a4)
  {
    v13 = (uint64_t *)(a2 + 8 * (a1[1] - v9));
    sub_20C6CE2E4(a2, v13, v9);
    result = sub_20C6CE264(v8, (uint64_t)v13, (uint64_t)a3, (uint64_t)a1[1]);
LABEL_11:
    a1[1] = (uint64_t *)result;
    return result;
  }
  result = (uint64_t)sub_20C6CE2E4(a2, a3, v9);
  v15 = v14;
  v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      result = (uint64_t)sub_20BEB422C(v16);
    }
    while (v16 != v15);
  }
  a1[1] = v15;
  return result;
}

void sub_20C6CE1F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C6CE1F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C6CE200(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;

  v1 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        sub_20BEB422C(v3);
      }
      while (v3 != v1);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_20C6CE264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      sub_20C6CD190((_QWORD *)(a4 + v7), a2 + v7);
      v7 += 24;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20C6CE2C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 24;
    do
    {
      sub_20BEB422C((_QWORD *)(v4 + v2));
      v2 -= 24;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C6CE2E4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;

  v4 = (uint64_t *)a1;
  if ((uint64_t *)a1 != a2)
  {
    v6 = a1;
    do
    {
      if (v4 != a3)
        sub_20C6CE354(a3, v4[1], v6);
      v4 += 3;
      a3 += 3;
      v6 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t *sub_20C6CE354(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *i;

  for (i = (uint64_t *)a1[1]; a2 != a3 && i != a1; i = (uint64_t *)i[1])
  {
    *((_DWORD *)i + 4) = *(_DWORD *)(a2 + 16);
    a2 = *(_QWORD *)(a2 + 8);
  }
  if (i == a1)
    return sub_20C6CE3A4((uint64_t)a1, a1, a2, a3);
  else
    return sub_20C6CE4A8((uint64_t)a1, i, a1);
}

uint64_t *sub_20C6CE3A4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = operator new(0x18uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    *((_DWORD *)v8 + 4) = *(_DWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = v8;
      do
      {
        v8 = operator new(0x18uLL);
        *v8 = v12;
        v8[1] = 0;
        *((_DWORD *)v8 + 4) = *(_DWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        v10 = *(_QWORD *)(v10 + 8);
        v12 = v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_20C6CE474(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_20C6CE494(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6CE4A8(uint64_t a1, uint64_t *__p, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (__p != a3)
  {
    v5 = *a3;
    v6 = *__p;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    do
    {
      v7 = (uint64_t *)__p[1];
      --*(_QWORD *)(a1 + 16);
      operator delete(__p);
      __p = v7;
    }
    while (v7 != a3);
  }
  return a3;
}

uint64_t *sub_20C6CE518(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C6CE5C0((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C6CE674((uint64_t)v10, 0);
  }
  return v7;
}

double sub_20C6CE5C0@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  __int128 *v8;
  __int128 v9;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0xC0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_20BDDBFAC(v7, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)v7 = v9;
  }
  *((_QWORD *)v6 + 23) = 0;
  result = 0.0;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C6CE65C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C6CE674(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C6CE674(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C6CBF10((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_20C6CE6B8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  void **v11;

  v11 = (void **)(a1 + 24);
  sub_20BEEB2B8(&v11);
  v2 = *(_QWORD *)(a1 + 16);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v8 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

unsigned int **sub_20C6CE750(unsigned int **a1)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a1, "gcl", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "1.0", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a1 + 2, "usd", 0);
  v3 = *a1;
  v23 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v23 = v4;
  }
  v6 = *v2;
  v24 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v24 = v7;
  }
  v9 = a1[2];
  v25 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v25 = v10;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v12 = (unsigned int *)operator new(0x18uLL);
  v13 = 0;
  a1[3] = v12;
  a1[4] = v12;
  a1[5] = v12 + 6;
  do
  {
    v14 = (&v23)[v13];
    *(_QWORD *)v12 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        *(_QWORD *)v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v13;
    v12 += 2;
  }
  while (v13 != 3);
  v17 = (unsigned int **)&v26;
  a1[4] = v12;
  do
  {
    v19 = (uint64_t)*--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
  }
  while (v17 != &v23);
  return a1;
}

void sub_20C6CE918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  sub_20BEEB2B8(&a9);
  v18 = &a14;
  while (1)
  {
    v20 = *--v18;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v18 == (uint64_t *)&a11)
    {
      if ((*v16 & 7) != 0)
      {
        v23 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((*v15 & 7) != 0)
      {
        v25 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      if ((*v14 & 7) != 0)
      {
        v27 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20C6CE9CC()
{
  uint64_t *v0;

  v0 = sub_20C6CF5F8();
  return sub_20C6CF718(v0);
}

uint64_t sub_20C6CE9E0(_QWORD *a1)
{
  uint64_t *v2;
  unsigned int **v3;
  unsigned int **v4;
  pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t *EmptyString;
  uint64_t result;

  v2 = (uint64_t *)atomic_load(&qword_254990A98);
  if (!v2)
    v2 = (uint64_t *)sub_20C6CF954(&qword_254990A98);
  v3 = (unsigned int **)atomic_load(&qword_254990A98);
  if (!v3)
    v3 = sub_20C6CF954(&qword_254990A98);
  v4 = (unsigned int **)atomic_load(&qword_254990A98);
  if (!v4)
    v4 = sub_20C6CF954(&qword_254990A98);
  v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&qword_254990A98);
  if (!v5)
    v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C6CF954(&qword_254990A98);
  if ((*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  result = pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat((uint64_t)a1, v2, (uint64_t *)v3 + 1, (uint64_t *)v4 + 2, (uint64_t)EmptyString);
  *a1 = &off_24C541DD8;
  return result;
}

void sub_20C6CEAC0(pxrInternal__aapl__pxrReserved__::SdfFileFormat *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::SdfFileFormat::~SdfFileFormat(a1);
  operator delete(v1);
}

BOOL sub_20C6CEAD4(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2)
{
  uint64_t *Resolver;
  uint64_t v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v11 = *(_QWORD *)(a2 + 16);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  v4 = v12;
  if (!v12)
  {
    v5 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v5, (uint64_t *)__p);
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
  }
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v4 != 0;
}

void sub_20C6CEBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_20C6CEC00(pxrInternal__aapl__pxrReserved__ *a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, __int128 *a3)
{
  uint64_t *Resolver;
  void *v6;
  uint64_t v7;
  _BOOL8 v8;
  _BOOL8 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *p_dst;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::string v25;
  std::string v26;
  void *__p[2];
  std::string::size_type v28;
  __int128 __dst;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(&__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    __dst = *a3;
    v30 = *((_QWORD *)a3 + 2);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  if (SHIBYTE(v30) < 0)
    operator delete((void *)__dst);
  if (v31)
  {
    __dst = 0uLL;
    v30 = 0;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v31 + 24))(__p);
    v6 = __p[0];
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
    v8 = sub_20C6CEEEC(v7, a2, (uint64_t)v6, v7, 0, (uint64_t)&__dst);
    v9 = v8;
    v10 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_11;
    v11 = (unint64_t *)((char *)__p[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (!v9)
        goto LABEL_12;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_12:
        v13 = sub_20C6E7B7C();
        std::operator+<char>();
        v14 = std::string::append(&v25, ", error ");
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v26.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        if (v30 >= 0)
          p_dst = (const std::string::value_type *)&__dst;
        else
          p_dst = (const std::string::value_type *)__dst;
        if (v30 >= 0)
          v17 = HIBYTE(v30);
        else
          v17 = *((_QWORD *)&__dst + 1);
        v18 = std::string::append(&v26, p_dst, v17);
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v28 = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        sub_20C6C3E64((os_log_t *)v13, (uint64_t *)__p);
        if (SHIBYTE(v28) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v30) < 0)
      operator delete((void *)__dst);
    goto LABEL_30;
  }
  v20 = sub_20C6E7B7C();
  std::operator+<char>();
  sub_20C6C3E64((os_log_t *)v20, (uint64_t *)&__dst);
  if (SHIBYTE(v30) < 0)
    operator delete((void *)__dst);
  v9 = 0;
LABEL_30:
  v21 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v9;
}

void sub_20C6CEE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v23 - 57) < 0)
    operator delete(*(void **)(v23 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v23 - 48));
  _Unwind_Resume(a1);
}

BOOL sub_20C6CEEEC(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3, _BOOL8 a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 v7;
  std::string::size_type size;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  unsigned int *v20;
  unsigned int v21;
  std::string::size_type v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  std::string __p;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  pxrInternal__aapl__pxrReserved__ *v33;
  _QWORD **v34;
  _QWORD *v35;
  uint64_t v36;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v37;
  _BYTE v38[129];
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD v55[2];
  _QWORD v56[3];
  _QWORD v57[4];
  _QWORD v58[2];

  v7 = a4;
  if (a4)
  {
    v39 = 0x10000;
    v47 = 0;
    v48 = 0;
    v46 = 0;
    v55[1] = 0;
    v55[0] = 0;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0;
    v54 = v55;
    v56[0] = v56;
    v56[1] = v56;
    v56[2] = 0;
    v57[0] = v57;
    v57[1] = v57;
    v57[2] = 0;
    v58[1] = 0;
    v58[0] = 0;
    v57[3] = v58;
    sub_20C6CC21C((uint64_t)v38);
    if (sub_20C6E4DDC((uint64_t)v38, a3, v7))
    {
      MEMORY[0x212B929D0](a6, "Aborting, unable to read JSON bitstream");
      v7 = 0;
    }
    else
    {
      sub_20C6C9CC0((uint64_t)&v39, (uint64_t)v38);
      sub_20BDDC0E4(&__p, ".usda");
      v35 = 0;
      v36 = 0;
      v34 = &v35;
      pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v34, (uint64_t *)&v37);
      sub_20BDE9D48((uint64_t)&v34, v35);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_20C1034E8((uint64_t *)&__p, (uint64_t *)&v37);
      pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t *)&__p, 0, &v33);
      size = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v11 = (unsigned int *)(__p.__r_.__value_.__l.__size_ + 8);
        do
        {
          v12 = __ldxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
          (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
      }
      sub_20C696CA8(&v31, (uint64_t *)&v33);
      sub_20BDDC0E4(&__p, "/ReconstructedUsdMesh");
      pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v29, &__p);
      pxrInternal__aapl__pxrReserved__::UsdGeomMesh::Define(&v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v34);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
      sub_20BFD265C(&v29);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v14 = v32;
      if (v32)
      {
        v15 = (unsigned int *)(v32 + 8);
        do
        {
          v16 = __ldxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      v18 = sub_20C6C515C((uint64_t)&v39, (uint64_t)&v34);
      v7 = v18 == 0;
      if (v18)
      {
        MEMORY[0x212B929D0](a6, "Aborting, unable to convert gcl mesh to usd mesh");
      }
      else
      {
        v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8((uint64_t *)&v33);
        sub_20C35C4F8((uint64_t)&__p, (uint64_t *)&v35, &v36);
        pxrInternal__aapl__pxrReserved__::UsdStage::SetDefaultPrim(v19, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p);
        if ((v28 & 7) != 0)
        {
          v20 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
          do
            v21 = __ldxr(v20);
          while (__stlxr(v21 - 2, v20));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p.__r_.__value_.__r.__words[2] + 1);
        sub_20BFD265C(&__p.__r_.__value_.__r.__words[2]);
        if (__p.__r_.__value_.__l.__size_)
          sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p.__r_.__value_.__l.__size_);
        sub_20C1034E8((uint64_t *)&__p, (uint64_t *)&v37);
        pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(a2, (uint64_t *)&__p);
        v22 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v23 = (unsigned int *)(__p.__r_.__value_.__l.__size_ + 8);
          do
          {
            v24 = __ldxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v22 + 8))(v22);
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomMesh::~UsdGeomMesh((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&v34);
      sub_20C455C74(&v33);
      sub_20C103234(&v37);
    }
    sub_20C6CC29C((uint64_t)v38);
    sub_20C6CF83C((uint64_t)&v39);
  }
  else
  {
    MEMORY[0x212B929D0](a6, "Aborting, empty bitstream");
  }
  return v7;
}

void sub_20C6CF248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, unsigned int *a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;

  if (a11)
  {
    v60 = a11 + 2;
    do
    {
      v61 = __ldxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::~UsdGeomMesh((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&a21);
  sub_20C455C74(&a20);
  sub_20C103234(&a26);
  sub_20C6CC29C((uint64_t)&a27);
  sub_20C6CF83C((uint64_t)&a59);
  _Unwind_Resume(a1);
}

BOOL sub_20C6CF3A8(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t *v6;
  void *__p;
  char v9;
  void *v10[2];
  uint64_t v11;

  v10[0] = 0;
  v10[1] = 0;
  v11 = 0;
  v3 = *(_QWORD *)(a3 + 8);
  if (*(char *)(a3 + 23) >= 0)
  {
    v4 = *(unsigned __int8 *)(a3 + 23);
  }
  else
  {
    a3 = *(_QWORD *)a3;
    v4 = v3;
  }
  v5 = sub_20C6CEEEC(a1, a2, a3, v4, 0, (uint64_t)v10);
  if (!v5)
  {
    v6 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&__p);
    if (v9 < 0)
      operator delete(__p);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  return v5;
}

void sub_20C6CF448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6CF468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;

  v7 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  if (!v7)
    v7 = sub_20C27EB9C(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(v7, &v15);
  v8 = sub_20BFCF6F4(&v15);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 88))(v8, a2, a3, a4);
  v10 = v16;
  if (v16)
  {
    v11 = (unsigned int *)(v16 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return v9;
}

void sub_20C6CF518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B408(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6CF530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;

  v7 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  if (!v7)
    v7 = sub_20C27EB9C(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(v7, &v15);
  v8 = sub_20BFCF6F4(&v15);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 80))(v8, a2, a3, a4);
  v10 = v16;
  if (v16)
  {
    v11 = (unsigned int *)(v16 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return v9;
}

void sub_20C6CF5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B408(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C6CF5F8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C1BA13C((unint64_t **)v5);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C541E68, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, (std::type_info *)&unk_24C541E68, (char *)0x70, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C6CF6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6CF718(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &off_24C541E90;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20C6CF778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C6CF7A4(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase::~Sdf_FileFormatFactoryBase(a1);
  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C6CF7B8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;

  v2 = operator new(0x70uLL);
  sub_20C6CE9E0(v2);
  *a1 = v2;
  v4 = 0;
  return sub_20C6CF810(&v4);
}

void sub_20C6CF7FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C6CF810(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

uint64_t sub_20C6CF83C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v8;

  sub_20C6CF90C(a1 + 288, *(_QWORD **)(a1 + 296));
  sub_20BEDD928((_QWORD *)(a1 + 264));
  sub_20BEDD928((_QWORD *)(a1 + 240));
  sub_20BE78E5C(a1 + 216, *(_QWORD **)(a1 + 224));
  v8 = (void **)(a1 + 192);
  sub_20BDE5038(&v8);
  v8 = (void **)(a1 + 168);
  sub_20C6CC41C(&v8);
  v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(_QWORD *)(a1 + 152) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(_QWORD *)(a1 + 120) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(_QWORD *)(a1 + 88) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 56);
  if (v5)
  {
    *(_QWORD *)(a1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    *(_QWORD *)(a1 + 40) = v6;
    operator delete(v6);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20C6CF90C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C6CF90C(a1, *a2);
    sub_20C6CF90C(a1, a2[1]);
    sub_20C6CDE5C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

unsigned int **sub_20C6CF954(unint64_t *a1)
{
  unsigned int **result;
  void *v4;

  result = sub_20C6CF99C();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C6CE6B8((uint64_t)result);
    operator delete(v4);
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **sub_20C6CF99C()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new(0x30uLL);
  sub_20C6CE750(v0);
  return v0;
}

void sub_20C6CF9C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6CF9DC(_BYTE *a1)
{
  BOOL v1;
  uint64_t *v3;
  void *__p[2];
  char v5;

  if (*a1)
    v1 = a1[1] == 0;
  else
    v1 = 1;
  if (v1)
    return 0;
  v3 = sub_20C6E7B7C();
  sub_20BDDC0E4(__p, "checkParameters: cannot have unifyIndices and preserveVertexOrder both true at the same time");
  sub_20C6C3E64((os_log_t *)v3, (uint64_t *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return 10;
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplGclCodec_CompressMesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  return pxrInternal__aapl__pxrReserved__::AaplGclCodec_CompressMesh(a1, a2, a3, a4, a5, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplGclCodec_CompressMesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, __int16 a6)
{
  BOOL v12;
  uint64_t *v13;
  std::string *v14;
  __int128 v15;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  _BOOL4 v23;
  _BOOL4 v26;
  uint64_t *v27;
  unint64_t v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  unint64_t v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  uint64_t v38;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v39;
  char IsDefined;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v41;
  std::string::size_type i;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v47;
  const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *j;
  std::string::size_type v49;
  unsigned __int8 *v50;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v51;
  pxrInternal__aapl__pxrReserved__::TfToken *v52;
  std::string::size_type v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  void (**v63)(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *__hidden);
  uint64_t v64;
  int v65;
  const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v66;
  const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v67;
  std::string v68;
  uint64_t v69;
  std::string v70;
  std::string __p;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD v86[2];
  _QWORD v87[3];
  _QWORD v88[4];
  _QWORD v89[3];
  std::string __dst;
  std::string v91;
  unsigned __int8 v92[18];

  *(_WORD *)v92 = a6;
  sub_20C6D04E4(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ != 3
      || (*(_WORD *)__p.__r_.__value_.__l.__data_ == 25447
        ? (v12 = *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 2) == 108)
        : (v12 = 0),
          !v12))
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_15;
    }
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 3)
      goto LABEL_15;
    if (LOWORD(__p.__r_.__value_.__l.__data_) != 25447 || __p.__r_.__value_.__s.__data_[2] != 108)
      goto LABEL_15;
  }
  sub_20C6D04E4(a3, &v70);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
  {
    v23 = v70.__r_.__value_.__l.__size_ != 3
       || *(_WORD *)v70.__r_.__value_.__l.__data_ != 25447
       || *(_BYTE *)(v70.__r_.__value_.__r.__words[0] + 2) != 108;
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  else
  {
    v23 = SHIBYTE(v70.__r_.__value_.__r.__words[2]) != 3
       || LOWORD(v70.__r_.__value_.__l.__data_) != 25447
       || v70.__r_.__value_.__s.__data_[2] != 108;
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v23)
      goto LABEL_55;
LABEL_15:
    v13 = sub_20C6E7B7C();
    sub_20C6D04E4(a2, &v91);
    std::operator+<char>();
    v14 = std::string::append(&v68, " refPath: ");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_20C6D04E4(a3, &__dst);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v18 = std::string::append(&v70, (const std::string::value_type *)p_dst, size);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v13, (uint64_t *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    return 5;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v23)
    goto LABEL_15;
LABEL_55:
  sub_20C6D05F0((__int128 *)a2, &__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0 || __p.__r_.__value_.__l.__size_ < 0x100)
  {
    sub_20C6D05F0((__int128 *)a3, &v70);
    v26 = (v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0 && v70.__r_.__value_.__l.__size_ > 0xFF;
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v26)
        goto LABEL_68;
    }
    else if (v26)
    {
      goto LABEL_68;
    }
    v20 = sub_20C6CF9DC(v92);
    if ((_DWORD)v20)
      return v20;
    LODWORD(__p.__r_.__value_.__l.__data_) = 0x10000;
    v77 = 0;
    v78 = 0;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v79 = 0;
    v84 = 0;
    v85 = v86;
    v86[0] = 0;
    v86[1] = 0;
    v87[0] = v87;
    v87[1] = v87;
    v87[2] = 0;
    v88[0] = v88;
    v88[1] = v88;
    v88[2] = 0;
    v89[0] = 0;
    v89[1] = 0;
    v88[3] = v89;
    v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
    v91.__r_.__value_.__l.__size_ = (std::string::size_type)&v91;
    v91.__r_.__value_.__r.__words[2] = 0;
    v20 = sub_20C6D075C(&__p, a1, a2, (uint64_t *)&v91, a4, a5, v92);
    if (!(_DWORD)v20)
    {
      v38 = *(_QWORD *)(a1 + 8);
      if (v38
        && (*(_BYTE *)(v38 + 57) & 8) == 0
        && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) != 0)
      {
        sub_20C35C4F8((uint64_t)&v70, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
        IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v70, v39);
        sub_20C35C2E0((uint64_t)&v70);
        if ((IsDefined & 1) != 0)
        {
          sub_20C35C4F8((uint64_t)&v68, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v68, (uint64_t)&v70);
          sub_20C35C2E0((uint64_t)&v68);
          if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v70, v41) & 1) != 0)
          {
            pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v68, 0.0, 1.0);
            pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference((pxrInternal__aapl__pxrReserved__::UsdObject *)&v70, a3, (uint64_t)&v68, 1);
            for (i = v91.__r_.__value_.__l.__size_; (std::string *)i != &v91; i = *(_QWORD *)(i + 8))
            {
              if (*(char *)(i + 39) < 0)
                sub_20BDDBFAC(&__dst, *(void **)(i + 16), *(_QWORD *)(i + 24));
              else
                __dst = *(std::string *)(i + 16);
              sub_20C35C4F8((uint64_t)&v68, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v66);
              pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v68, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v66);
              if ((v66 & 7) != 0)
              {
                v43 = (unsigned int *)((unint64_t)v66 & 0xFFFFFFFFFFFFFFF8);
                do
                  v44 = __ldxr(v43);
                while (__stlxr(v44 - 2, v43));
              }
              if ((v69 & 7) != 0)
              {
                v45 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
                do
                  v46 = __ldxr(v45);
                while (__stlxr(v46 - 2, v45));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v68.__r_.__value_.__r.__words[2] + 1);
              sub_20BFD265C(&v68.__r_.__value_.__r.__words[2]);
              if (v68.__r_.__value_.__l.__size_)
                sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v68.__r_.__value_.__l.__size_);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
            }
            memset(&__dst, 0, sizeof(__dst));
            sub_20BE78B98((char *)&__dst, (__int128 *)v83, *((__int128 **)&v83 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v83 + 1) - v83) >> 3));
            if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
            {
              pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetAllGeomSubsets((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)a1, (uint64_t)&v66);
              v47 = v66;
              for (j = v67; v47 != j; v47 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v47 + 24))
              {
                pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v63, v47);
                v63 = off_24C53CF80;
                v49 = __dst.__r_.__value_.__l.__size_;
                v50 = (unsigned __int8 *)__dst.__r_.__value_.__r.__words[0];
                sub_20C35C4F8((uint64_t)&v68, &v64, &v65);
                v51 = sub_20C398E78(&v68);
                if (v50 != (unsigned __int8 *)v49)
                {
                  v52 = v51;
                  while ((pxrInternal__aapl__pxrReserved__::TfToken::operator==(v52, v50) & 1) == 0)
                  {
                    v50 += 24;
                    if (v50 == (unsigned __int8 *)v49)
                    {
                      v50 = (unsigned __int8 *)v49;
                      break;
                    }
                  }
                }
                v53 = __dst.__r_.__value_.__l.__size_;
                if ((v69 & 7) != 0)
                {
                  v54 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v55 = __ldxr(v54);
                  while (__stlxr(v55 - 2, v54));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v68.__r_.__value_.__r.__words[2] + 1);
                sub_20BFD265C(&v68.__r_.__value_.__r.__words[2]);
                if (v68.__r_.__value_.__l.__size_)
                  sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v68.__r_.__value_.__l.__size_);
                if (v50 != (unsigned __int8 *)v53)
                {
                  sub_20C35C4F8((uint64_t)&v68, &v64, &v65);
                  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v62, "indices");
                  pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v68, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v62);
                  if ((v62 & 7) != 0)
                  {
                    v56 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v57 = __ldxr(v56);
                    while (__stlxr(v57 - 2, v56));
                  }
                  if ((v69 & 7) != 0)
                  {
                    v58 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v59 = __ldxr(v58);
                    while (__stlxr(v59 - 2, v58));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v68.__r_.__value_.__r.__words[2] + 1);
                  sub_20BFD265C(&v68.__r_.__value_.__r.__words[2]);
                  if (v68.__r_.__value_.__l.__size_)
                    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v68.__r_.__value_.__l.__size_);
                }
                pxrInternal__aapl__pxrReserved__::UsdGeomSubset::~UsdGeomSubset((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)&v63);
              }
              v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
              sub_20C599B38((void ***)&v68);
            }
            v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
            sub_20BDE5038((void ***)&v68);
            v20 = 0;
          }
          else
          {
            v61 = sub_20C6E7B7C();
            sub_20BDDC0E4(&v68, "Invalid references!");
            sub_20C6C3E64((os_log_t *)v61, (uint64_t *)&v68);
            if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v68.__r_.__value_.__l.__data_);
            v20 = 255;
          }
          sub_20C6D0B98((uint64_t)&v70);
          goto LABEL_142;
        }
        v60 = sub_20C6E7B7C();
        sub_20BDDC0E4(&v70, "Invalid prim!");
      }
      else
      {
        v60 = sub_20C6E7B7C();
        sub_20BDDC0E4(&v70, "Invalid mesh!");
      }
      sub_20C6C3E64((os_log_t *)v60, (uint64_t *)&v70);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      v20 = 255;
    }
LABEL_142:
    sub_20BEDD928(&v91);
    sub_20C6CF83C((uint64_t)&__p);
    return v20;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_68:
  v27 = sub_20C6E7B7C();
  if (*(char *)(a2 + 23) >= 0)
    v28 = *(unsigned __int8 *)(a2 + 23);
  else
    v28 = *(_QWORD *)(a2 + 8);
  std::to_string(&v91, v28);
  v29 = std::string::insert(&v91, 0, "AaplGclCodec_CompressMesh: File name too long! filename: ");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v68, " refPath: ");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v70.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a3 + 23) >= 0)
    v33 = *(unsigned __int8 *)(a3 + 23);
  else
    v33 = *(_QWORD *)(a3 + 8);
  std::to_string(&__dst, v33);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &__dst;
  else
    v34 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v35 = __dst.__r_.__value_.__l.__size_;
  v36 = std::string::append(&v70, (const std::string::value_type *)v34, v35);
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  sub_20C6C3E64((os_log_t *)v27, (uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  return 6;
}

void sub_20C6D0314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  a17 = (void *)(v36 - 160);
  sub_20BDE5038((void ***)&a17);
  sub_20C6D0B98((uint64_t)&a24);
  sub_20BEDD928((_QWORD *)(v36 - 128));
  sub_20C6CF83C((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_20C6D04E4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::string *p_str;
  std::string::size_type size;
  char *v5;
  int v6;
  std::string::size_type v7;
  std::string v8;
  std::string __str;
  char v10;

  if (*(char *)(a1 + 23) < 0)
    sub_20BDDBFAC(&__str, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __str = *(std::string *)a1;
  p_str = &__str;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  v5 = (char *)&p_str[-1].__r_.__value_.__r.__words[2] + 7;
  while (size)
  {
    v6 = v5[size--];
    if (v6 == 46)
    {
      if (size != -1)
      {
        std::string::basic_string(&v8, &__str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v10);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = v8;
        v7 = v8.__r_.__value_.__r.__words[2];
        *(_OWORD *)a2 = *(_OWORD *)&v8.__r_.__value_.__l.__data_;
        a2[2] = v7;
        return;
      }
      break;
    }
  }
  sub_20BDDC0E4(a2, "");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_20C6D05D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20C6D05F0@<D0>(__int128 *a1@<X0>, std::string *a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  std::string *v7;
  std::string::size_type size;
  uint64_t v9;
  int v10;
  std::string::size_type v11;
  int v12;
  BOOL v13;
  std::string *v14;
  uint64_t v15;
  int v16;
  std::string v18;
  char v19;

  if (*((char *)a1 + 23) < 0)
  {
    sub_20BDDBFAC(a2, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    v3 = *a1;
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *a1;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 2);
  }
  v4 = 0;
  v5 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  v6 = v5 < 0;
  v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if (v5 >= 0)
    v7 = a2;
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6)
    size = a2->__r_.__value_.__l.__size_;
  v9 = (uint64_t)&v7[-1].__r_.__value_.__r.__words[2] + 7;
  while (size != v4)
  {
    v10 = *(unsigned __int8 *)(v9 + size);
    ++v4;
    --v9;
    if (v10 == 47)
    {
      if (size + 1 != v4)
      {
        v11 = size - v4;
        if (v4 == 1)
        {
          std::string::basic_string(&v18, a2, 0, v11, (std::allocator<char> *)&v19);
          if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
            operator delete(a2->__r_.__value_.__l.__data_);
          *(_QWORD *)&v3 = v18.__r_.__value_.__r.__words[0];
          *a2 = v18;
          v12 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
          v13 = v12 < 0;
          v14 = (std::string *)a2->__r_.__value_.__r.__words[0];
          if (v12 >= 0)
            v14 = a2;
          size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          if (v13)
            size = a2->__r_.__value_.__l.__size_;
          v15 = (uint64_t)&v14[-1].__r_.__value_.__r.__words[2] + 7;
          v11 = size;
          while (v11)
          {
            v16 = *(unsigned __int8 *)(v15 + v11--);
            if (v16 == 47)
              goto LABEL_22;
          }
        }
        else
        {
LABEL_22:
          if (size && v11 != -1)
          {
            std::string::basic_string(&v18, a2, v11 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v19);
            if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
              operator delete(a2->__r_.__value_.__l.__data_);
            *(_QWORD *)&v3 = v18.__r_.__value_.__r.__words[0];
            *a2 = v18;
          }
        }
      }
      return *(double *)&v3;
    }
  }
  return *(double *)&v3;
}

void sub_20C6D073C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6D075C(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, unsigned int a6, unsigned __int8 *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  _DWORD *v15;
  int v16;
  uint64_t *v17;
  uint64_t *v19;
  void *v20[2];
  char v21;
  void *__p;
  void *v23;
  char v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31[2];
  char v32;
  _BYTE v33[552];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v11 = sub_20C6C223C((uint64_t)a1, a2, a5);
  if (!(_DWORD)v11)
  {
    v12 = *a7 ? sub_20C6C60F0((uint64_t)a1) : sub_20C6C7B60((uint64_t)a1);
    v11 = v12;
    if (!(_DWORD)v12)
    {
      if (sub_20C6C5B3C((uint64_t)a1))
      {
        if (*a1)
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v11 = sub_20C6C8720((uint64_t)a1, (uint64_t)&v28, a4, a6, a7);
          if (!(_DWORD)v11)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            v11 = sub_20C6CB674((uint64_t)a1, (uint64_t)&v25);
            if (!(_DWORD)v11)
            {
              sub_20C6D1E7C((uint64_t)v31);
              sub_20C6D1F40(v31);
              if (*(_DWORD *)&v33[*((_QWORD *)v31[0] - 3)])
              {
                v13 = sub_20C6E7B7C();
                std::operator+<char>();
                sub_20C6C3E64((os_log_t *)v13, (uint64_t *)&__p);
                if (v24 < 0)
                  operator delete(__p);
                v11 = 400;
              }
              else
              {
                sub_20BDFC9B8(&__p, 0x10uLL);
                v15 = __p;
                *(_QWORD *)__p = 1246511943;
                v15[2] = 1281;
                v16 = HIBYTE(v27);
                if (v27 < 0)
                  v16 = v26;
                v15[3] = (_DWORD)v23 - (_DWORD)__p + v16;
                std::ostream::write();
                if (*(_DWORD *)&v33[*((_QWORD *)v31[0] - 3)]
                  || (std::ostream::write(), *(_DWORD *)&v33[*((_QWORD *)v31[0] - 3)])
                  || (std::ostream::write(), *(_DWORD *)&v33[*((_QWORD *)v31[0] - 3)]))
                {
                  v17 = sub_20C6E7B7C();
                  std::operator+<char>();
                  sub_20C6C3E64((os_log_t *)v17, (uint64_t *)v20);
                  if (v21 < 0)
                    operator delete(v20[0]);
                  v11 = 403;
                }
                else
                {
                  sub_20C6D1F98(v31);
                  if (*(_DWORD *)&v33[*((_QWORD *)v31[0] - 3)])
                  {
                    v19 = sub_20C6E7B7C();
                    std::operator+<char>();
                    sub_20C6C3E64((os_log_t *)v19, (uint64_t *)v20);
                    if (v21 < 0)
                      operator delete(v20[0]);
                    v11 = 401;
                  }
                  else
                  {
                    v11 = 0;
                  }
                }
                if (__p)
                {
                  v23 = __p;
                  operator delete(__p);
                }
              }
              sub_20C6D1FE0(v31);
            }
            if (SHIBYTE(v27) < 0)
              operator delete(v25);
          }
          if (v28)
          {
            v29 = v28;
            operator delete(v28);
          }
        }
        else
        {
          v14 = sub_20C6E7B7C();
          sub_20BDDC0E4(v31, "compress: invalid mesh");
          sub_20C6C3E64((os_log_t *)v14, (uint64_t *)v31);
          if (v32 < 0)
            operator delete(v31[0]);
          return 201;
        }
      }
      else
      {
        return 15;
      }
    }
  }
  return v11;
}

void sub_20C6D0B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  sub_20C6D1FE0(&a24);
  if (a20 < 0)
    operator delete(a15);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6D0B98(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

uint64_t sub_20C6D0BF8(const __CFString *a1, uint64_t a2)
{
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v6;
  char *v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;

  Length = CFStringGetLength(a1);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  if (MaximumSizeForEncoding == -1)
    return 0;
  v6 = MaximumSizeForEncoding + 1;
  v7 = (char *)operator new[](MaximumSizeForEncoding + 1);
  result = CFStringGetCString(a1, v7, v6, 0x8000100u);
  if ((_DWORD)result)
  {
    sub_20BDDC0E4(&v9, v7);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v9;
    *(_QWORD *)(a2 + 16) = v10;
    operator delete[](v7);
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::aaplUsdGclCodec::compressMesh(pxrInternal__aapl__pxrReserved__::aaplUsdGclCodec *this, pxrInternal__aapl__pxrReserved__::UsdGeomMesh *a2, const __CFDictionary *a3, __CFDictionary *a4)
{
  uint64_t *v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v9;
  uint64_t *EmptyString;
  size_t v11;
  std::string *v12;
  const void *v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t Count;
  uint64_t v17;
  size_t v18;
  const void **v19;
  const void **v20;
  uint64_t v21;
  const __CFData *v22;
  int v23;
  char v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v28;
  BOOL v29;
  uint64_t *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  std::string::size_type size;
  std::string *v35;
  __int128 v36;
  _BOOL4 v38;
  _BOOL4 v41;
  uint64_t *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string::size_type v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  uint64_t v54;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v55;
  char IsDefined;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v57;
  std::string::size_type i;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v63;
  std::string::size_type v64;
  unsigned __int8 *v65;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v66;
  pxrInternal__aapl__pxrReserved__::TfToken *v67;
  std::string::size_type v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  const __CFBoolean *v73;
  uint64_t *v74;
  uint64_t *v75;
  const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *j;
  __CFDictionary *v77;
  uint64_t v78;
  void (**v79)(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *__hidden);
  uint64_t v80;
  int v81;
  const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v82;
  const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v83;
  std::string buffer;
  uint64_t v85;
  std::string v86;
  std::string __p;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD v102[2];
  _QWORD v103[3];
  _QWORD v104[4];
  _QWORD v105[3];
  std::string v106;
  std::string v107;
  void *v108;
  char **v109;
  char *v110[2];
  void *v111;
  __int16 v112;
  void *v113;
  unsigned int valuePtr;
  std::string __dst;
  void *value;
  std::string v117[2];
  CFRange v118;

  sub_20BDDC0E4(v117, "");
  value = 0;
  if (CFDictionaryGetValueIfPresent(a2, CFSTR("CompressedBitstreamPath"), (const void **)&value))
  {
    if ((sub_20C6D0BF8((const __CFString *)value, (uint64_t)v117) & 1) == 0)
    {
      v7 = sub_20C6E7B7C();
      sub_20BDDC0E4(&__p, "Invalid filename parameter");
      sub_20C6C3E64((os_log_t *)v7, (uint64_t *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v8 = 4;
      goto LABEL_152;
    }
  }
  else
  {
    sub_20C35C4F8((uint64_t)&__p, (uint64_t *)this + 1, (_DWORD *)this + 4);
    v9 = sub_20C398E78(&__p);
    if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
    if (*((char *)EmptyString + 23) >= 0)
      v11 = *((unsigned __int8 *)EmptyString + 23);
    else
      v11 = EmptyString[1];
    sub_20BDF6BDC((uint64_t)&v86, v11 + 4);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v86;
    else
      v12 = (std::string *)v86.__r_.__value_.__r.__words[0];
    if (v11)
    {
      if (*((char *)EmptyString + 23) >= 0)
        v13 = EmptyString;
      else
        v13 = (const void *)*EmptyString;
      memmove(v12, v13, v11);
    }
    strcpy((char *)v12 + v11, ".gcl");
    if (SHIBYTE(v117[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v117[0].__r_.__value_.__l.__data_);
    v117[0] = v86;
    *((_BYTE *)&v86.__r_.__value_.__s + 23) = 0;
    v86.__r_.__value_.__s.__data_[0] = 0;
    if ((v88 & 7) != 0)
    {
      v14 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p.__r_.__value_.__r.__words[2] + 1);
    sub_20BFD265C(&__p.__r_.__value_.__r.__words[2]);
    if (__p.__r_.__value_.__l.__size_)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v117[0].__r_.__value_.__r.__words[2]) < 0)
    sub_20BDDBFAC(&__dst, v117[0].__r_.__value_.__l.__data_, v117[0].__r_.__value_.__l.__size_);
  else
    __dst = v117[0];
  if (CFDictionaryGetValueIfPresent(a2, CFSTR("ReferencePath"), (const void **)&value)
    && (sub_20C6D0BF8((const __CFString *)value, (uint64_t)&__dst) & 1) == 0)
  {
    v28 = sub_20C6E7B7C();
    sub_20BDDC0E4(&__p, "Invalid ref path parameter");
LABEL_64:
    sub_20C6C3E64((os_log_t *)v28, (uint64_t *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v8 = 4;
    goto LABEL_150;
  }
  valuePtr = 10;
  v113 = 0;
  if (CFDictionaryGetValueIfPresent(a2, CFSTR("CompressionLevel"), (const void **)&v113)
    && !CFNumberGetValue((CFNumberRef)v113, kCFNumberIntType, &valuePtr))
  {
    v28 = sub_20C6E7B7C();
    sub_20BDDC0E4(&__p, "Invalid compression level parameter");
    goto LABEL_64;
  }
  v112 = 1;
  v111 = 0;
  if (CFDictionaryGetValueIfPresent(a2, CFSTR("UnifyIndices"), (const void **)&v111))
    LOBYTE(v112) = CFBooleanGetValue((CFBooleanRef)v111) != 0;
  if (CFDictionaryGetValueIfPresent(a2, CFSTR("PreserveVertexOrdering"), (const void **)&v111))
    HIBYTE(v112) = CFBooleanGetValue((CFBooleanRef)v111) != 0;
  v110[0] = 0;
  v110[1] = 0;
  v108 = 0;
  v109 = v110;
  if (CFDictionaryGetValueIfPresent(a2, CFSTR("AttributeDescription"), (const void **)&v108))
  {
    Count = CFDictionaryGetCount((CFDictionaryRef)v108);
    v17 = Count;
    if (Count >> 61)
      v18 = -1;
    else
      v18 = 8 * Count;
    v19 = (const void **)operator new[](v18);
    v20 = (const void **)operator new[](v18);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)v108, v19, v20);
    if (v17 >= 1)
    {
      v21 = 0;
      while (1)
      {
        memset(&__p, 0, sizeof(__p));
        v22 = (const __CFData *)v20[v21];
        v23 = sub_20C6D0BF8((const __CFString *)v19[v21], (uint64_t)&__p);
        v24 = v23;
        if (v23)
        {
          WORD2(buffer.__r_.__value_.__r.__words[0]) = 0;
          LODWORD(buffer.__r_.__value_.__l.__data_) = 0;
          v118.length = CFDataGetLength(v22);
          v118.location = 0;
          CFDataGetBytes(v22, v118, (UInt8 *)&buffer);
          v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          v25 = sub_20C6CC5C4((uint64_t **)&v109, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)&v86);
          *((_DWORD *)v25 + 14) = buffer.__r_.__value_.__l.__data_;
          *((_WORD *)v25 + 30) = WORD2(buffer.__r_.__value_.__r.__words[0]);
        }
        else
        {
          v26 = sub_20C6E7B7C();
          sub_20BDDC0E4(&v86, "Invalid attribute description parameter");
          sub_20C6C3E64((os_log_t *)v26, (uint64_t *)&v86);
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v86.__r_.__value_.__l.__data_);
          operator delete[](v19);
          operator delete[](v20);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((v24 & 1) == 0)
          break;
        if (v17 == ++v21)
          goto LABEL_53;
      }
      v8 = 4;
      goto LABEL_149;
    }
LABEL_53:
    operator delete[](v19);
    operator delete[](v20);
  }
  sub_20C6D04E4((uint64_t)v117, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ != 3
      || (*(_WORD *)__p.__r_.__value_.__l.__data_ == 25447
        ? (v29 = *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 2) == 108)
        : (v29 = 0),
          !v29))
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_73;
    }
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 3)
      goto LABEL_73;
    if (LOWORD(__p.__r_.__value_.__l.__data_) != 25447 || __p.__r_.__value_.__s.__data_[2] != 108)
      goto LABEL_73;
  }
  sub_20C6D04E4((uint64_t)&__dst, &v86);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
  {
    v38 = v86.__r_.__value_.__l.__size_ != 3
       || *(_WORD *)v86.__r_.__value_.__l.__data_ != 25447
       || *(_BYTE *)(v86.__r_.__value_.__r.__words[0] + 2) != 108;
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  else
  {
    v38 = SHIBYTE(v86.__r_.__value_.__r.__words[2]) != 3
       || LOWORD(v86.__r_.__value_.__l.__data_) != 25447
       || v86.__r_.__value_.__s.__data_[2] != 108;
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v38)
      goto LABEL_113;
LABEL_73:
    v30 = sub_20C6E7B7C();
    sub_20C6D04E4((uint64_t)v117, &v107);
    std::operator+<char>();
    v31 = std::string::append(&buffer, " refPath: ");
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    sub_20C6D04E4((uint64_t)&__dst, &v106);
    if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &v106;
    else
      v33 = (std::string *)v106.__r_.__value_.__r.__words[0];
    if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v106.__r_.__value_.__r.__words[2]);
    else
      size = v106.__r_.__value_.__l.__size_;
    v35 = std::string::append(&v86, (const std::string::value_type *)v33, size);
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v30, (uint64_t *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if (SHIBYTE(buffer.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buffer.__r_.__value_.__l.__data_);
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v107.__r_.__value_.__l.__data_);
    v8 = 5;
    goto LABEL_149;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v38)
    goto LABEL_73;
LABEL_113:
  sub_20C6D05F0((__int128 *)v117, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0 && __p.__r_.__value_.__l.__size_ >= 0x100)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_126:
    v42 = sub_20C6E7B7C();
    if ((v117[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = HIBYTE(v117[0].__r_.__value_.__r.__words[2]);
    else
      v43 = v117[0].__r_.__value_.__l.__size_;
    std::to_string(&v107, v43);
    v44 = std::string::insert(&v107, 0, "AaplGclCodec_CompressMesh: File name too long! filename: ");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    buffer.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buffer.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v46 = std::string::append(&buffer, " refPath: ");
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v48 = __dst.__r_.__value_.__l.__size_;
    std::to_string(&v106, v48);
    if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &v106;
    else
      v49 = (std::string *)v106.__r_.__value_.__r.__words[0];
    if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
    else
      v50 = v106.__r_.__value_.__l.__size_;
    v51 = std::string::append(&v86, (const std::string::value_type *)v49, v50);
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v42, (uint64_t *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if (SHIBYTE(buffer.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buffer.__r_.__value_.__l.__data_);
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v107.__r_.__value_.__l.__data_);
    v8 = 6;
    goto LABEL_149;
  }
  sub_20C6D05F0((__int128 *)&__dst, &v86);
  v41 = (v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0 && v86.__r_.__value_.__l.__size_ > 0xFF;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v41)
      goto LABEL_126;
  }
  else if (v41)
  {
    goto LABEL_126;
  }
  v8 = sub_20C6CF9DC(&v112);
  if (!(_DWORD)v8)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 0x10000;
    v93 = 0;
    v94 = 0;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v96 = 0u;
    v97 = 0u;
    v98 = 0u;
    v99 = 0u;
    v95 = 0;
    v100 = 0;
    v101 = v102;
    v102[0] = 0;
    v102[1] = 0;
    v103[0] = v103;
    v103[1] = v103;
    v103[2] = 0;
    v104[0] = v104;
    v104[1] = v104;
    v104[2] = 0;
    v105[0] = 0;
    v105[1] = 0;
    v104[3] = v105;
    v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&v107;
    v107.__r_.__value_.__l.__size_ = (std::string::size_type)&v107;
    v107.__r_.__value_.__r.__words[2] = 0;
    v8 = sub_20C6D075C(&__p, (uint64_t)this, (uint64_t)v117, (uint64_t *)&v107, (uint64_t)&v109, valuePtr, (unsigned __int8 *)&v112);
    if (!(_DWORD)v8)
    {
      v54 = *((_QWORD *)this + 1);
      if (v54
        && (*(_BYTE *)(v54 + 57) & 8) == 0
        && ((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::aaplUsdGclCodec *))(*(_QWORD *)this + 32))(this) & 1) != 0)
      {
        sub_20C35C4F8((uint64_t)&v86, (uint64_t *)this + 1, (_DWORD *)this + 4);
        IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v86, v55);
        sub_20C35C2E0((uint64_t)&v86);
        if ((IsDefined & 1) != 0)
        {
          v77 = a3;
          sub_20C35C4F8((uint64_t)&buffer, (uint64_t *)this + 1, (_DWORD *)this + 4);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)&buffer, (uint64_t)&v86);
          sub_20C35C2E0((uint64_t)&buffer);
          if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v86, v57) & 1) != 0)
          {
            pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&buffer, 0.0, 1.0);
            pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference((pxrInternal__aapl__pxrReserved__::UsdObject *)&v86, (uint64_t)&__dst, (uint64_t)&buffer, 1);
            for (i = v107.__r_.__value_.__l.__size_; (std::string *)i != &v107; i = *(_QWORD *)(i + 8))
            {
              if (*(char *)(i + 39) < 0)
                sub_20BDDBFAC(&v106, *(void **)(i + 16), *(_QWORD *)(i + 24));
              else
                v106 = *(std::string *)(i + 16);
              sub_20C35C4F8((uint64_t)&buffer, (uint64_t *)this + 1, (_DWORD *)this + 4);
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v82);
              pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&buffer, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v82);
              if ((v82 & 7) != 0)
              {
                v59 = (unsigned int *)((unint64_t)v82 & 0xFFFFFFFFFFFFFFF8);
                do
                  v60 = __ldxr(v59);
                while (__stlxr(v60 - 2, v59));
              }
              if ((v85 & 7) != 0)
              {
                v61 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
                do
                  v62 = __ldxr(v61);
                while (__stlxr(v62 - 2, v61));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&buffer.__r_.__value_.__r.__words[2] + 1);
              sub_20BFD265C(&buffer.__r_.__value_.__r.__words[2]);
              if (buffer.__r_.__value_.__l.__size_)
                sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)buffer.__r_.__value_.__l.__size_);
              if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v106.__r_.__value_.__l.__data_);
            }
            memset(&v106, 0, sizeof(v106));
            sub_20BE78B98((char *)&v106, (__int128 *)v99, *((__int128 **)&v99 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v99 + 1) - v99) >> 3));
            if (v106.__r_.__value_.__l.__size_ != v106.__r_.__value_.__r.__words[0])
            {
              pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetAllGeomSubsets(this, (uint64_t)&v82);
              v63 = v82;
              for (j = v83; v63 != j; v63 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v63 + 24))
              {
                pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v79, v63);
                v79 = off_24C53CF80;
                v64 = v106.__r_.__value_.__l.__size_;
                v65 = (unsigned __int8 *)v106.__r_.__value_.__r.__words[0];
                sub_20C35C4F8((uint64_t)&buffer, &v80, &v81);
                v66 = sub_20C398E78(&buffer);
                if (v65 != (unsigned __int8 *)v64)
                {
                  v67 = v66;
                  while ((pxrInternal__aapl__pxrReserved__::TfToken::operator==(v67, v65) & 1) == 0)
                  {
                    v65 += 24;
                    if (v65 == (unsigned __int8 *)v64)
                    {
                      v65 = (unsigned __int8 *)v64;
                      break;
                    }
                  }
                }
                v68 = v106.__r_.__value_.__l.__size_;
                if ((v85 & 7) != 0)
                {
                  v69 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v70 = __ldxr(v69);
                  while (__stlxr(v70 - 2, v69));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&buffer.__r_.__value_.__r.__words[2] + 1);
                sub_20BFD265C(&buffer.__r_.__value_.__r.__words[2]);
                if (buffer.__r_.__value_.__l.__size_)
                  sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)buffer.__r_.__value_.__l.__size_);
                if (v65 != (unsigned __int8 *)v68)
                {
                  sub_20C35C4F8((uint64_t)&buffer, &v80, &v81);
                  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v78, "indices");
                  pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&buffer, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v78);
                  if ((v78 & 7) != 0)
                  {
                    v71 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v72 = __ldxr(v71);
                    while (__stlxr(v72 - 2, v71));
                  }
                  sub_20C35C2E0((uint64_t)&buffer);
                }
                pxrInternal__aapl__pxrReserved__::UsdGeomSubset::~UsdGeomSubset((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)&v79);
              }
              buffer.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
              sub_20C599B38((void ***)&buffer);
            }
            if (v77)
            {
              if (CFDictionaryContainsKey(a2, CFSTR("DumpOrderingInfo")))
              {
                v73 = (const __CFBoolean *)CFDictionaryGetValue(a2, CFSTR("DumpOrderingInfo"));
                if (v73)
                {
                  if (CFBooleanGetValue(v73))
                    sub_20C6D1C68((uint64_t)&__p, v77);
                }
              }
            }
            buffer.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
            sub_20BDE5038((void ***)&buffer);
            v8 = 0;
          }
          else
          {
            v75 = sub_20C6E7B7C();
            sub_20BDDC0E4(&buffer, "Invalid references!");
            sub_20C6C3E64((os_log_t *)v75, (uint64_t *)&buffer);
            if (SHIBYTE(buffer.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buffer.__r_.__value_.__l.__data_);
            v8 = 255;
          }
          sub_20C6D0B98((uint64_t)&v86);
          goto LABEL_207;
        }
        v74 = sub_20C6E7B7C();
        sub_20BDDC0E4(&v86, "Invalid prim!");
      }
      else
      {
        v74 = sub_20C6E7B7C();
        sub_20BDDC0E4(&v86, "Invalid mesh!");
      }
      sub_20C6C3E64((os_log_t *)v74, (uint64_t *)&v86);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      v8 = 255;
    }
LABEL_207:
    sub_20BEDD928(&v107);
    sub_20C6CF83C((uint64_t)&__p);
  }
LABEL_149:
  sub_20BDECAB8((uint64_t)&v109, v110[0]);
LABEL_150:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_152:
  if (SHIBYTE(v117[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117[0].__r_.__value_.__l.__data_);
  return v8;
}

void sub_20C6D19F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *p_p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t v67;

  p_p = &__p;
  sub_20BDE5038((void ***)&p_p);
  sub_20C6D0B98((uint64_t)&a23);
  sub_20BEDD928((_QWORD *)(v67 - 248));
  sub_20C6CF83C((uint64_t)&a27);
  sub_20BDECAB8(v67 - 216, *(char **)(v67 - 208));
  if (*(char *)(v67 - 137) < 0)
    operator delete(*(void **)(v67 - 160));
  if (*(char *)(v67 - 105) < 0)
    operator delete(*(void **)(v67 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_20C6D1C68(uint64_t a1, __CFDictionary *a2)
{
  uint64_t *v3;
  const __CFAllocator *v4;
  const CFArrayCallBacks *v5;
  __CFArray *Mutable;
  _DWORD *v7;
  _DWORD *v8;
  CFNumberRef v9;
  const char *v10;
  CFStringRef v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t v16;
  void *__p[2];
  char v19;
  void *__dst[2];
  char v21;
  void *v22;
  _BYTE *v23;
  uint64_t *v24;
  _QWORD *v25[2];

  v25[0] = 0;
  v25[1] = 0;
  v24 = (uint64_t *)v25;
  if ((uint64_t **)(a1 + 288) == &v24
    || (sub_20C6D2288(&v24, *(__int128 **)(a1 + 288), (__int128 *)(a1 + 296)), v3 = v24, v24 == (uint64_t *)v25))
  {
LABEL_25:
    v16 = 0;
  }
  else
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v5 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
    while (1)
    {
      sub_20C6D259C(__dst, (__int128 *)v3 + 2);
      Mutable = CFArrayCreateMutable(v4, (v23 - (_BYTE *)v22) >> 2, v5);
      if (Mutable)
      {
        v7 = v22;
        v8 = v23;
        while (v7 != v8)
        {
          LODWORD(__p[0]) = 0;
          LODWORD(__p[0]) = *v7;
          v9 = CFNumberCreate(v4, kCFNumberIntType, __p);
          CFArrayAppendValue(Mutable, v9);
          ++v7;
        }
        v10 = v21 >= 0 ? (const char *)__dst : (const char *)__dst[0];
        v11 = CFStringCreateWithCString(v4, v10, 0x8000100u);
        CFDictionaryAddValue(a2, v11, Mutable);
      }
      else
      {
        v12 = sub_20C6E7B7C();
        sub_20BDDC0E4(__p, "Invalid reordering info!");
        sub_20C6C3E64((os_log_t *)v12, (uint64_t *)__p);
        if (v19 < 0)
          operator delete(__p[0]);
      }
      if (v22)
      {
        v23 = v22;
        operator delete(v22);
      }
      if (v21 < 0)
        operator delete(__dst[0]);
      if (!Mutable)
        break;
      v13 = (uint64_t *)v3[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (uint64_t *)v3[2];
          v15 = *v14 == (_QWORD)v3;
          v3 = v14;
        }
        while (!v15);
      }
      v3 = v14;
      if (v14 == (uint64_t *)v25)
        goto LABEL_25;
    }
    v16 = 256;
  }
  sub_20C6CF90C((uint64_t)&v24, v25[0]);
  return v16;
}

void sub_20C6D1E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  sub_20C6CF90C((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6D1E7C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = &unk_24C541F00;
  v2 = a1 + 24;
  *(_QWORD *)(a1 + 432) = &unk_24C542040;
  *(_QWORD *)a1 = &unk_24C542018;
  *(_QWORD *)(a1 + 8) = 0;
  std::ios_base::init((std::ios_base *)(a1 + 432), (void *)(a1 + 24));
  *(_QWORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 576) = -1;
  *(_QWORD *)a1 = &unk_24C541ED8;
  *(_QWORD *)(a1 + 432) = &unk_24C541F28;
  *(_QWORD *)(a1 + 16) = &unk_24C541F00;
  MEMORY[0x212B92AA8](v2);
  return a1;
}

void sub_20C6D1F10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x212B92EB0](v1);
  _Unwind_Resume(a1);
}

void sub_20C6D1F40(_QWORD *a1)
{
  uint64_t v2;
  std::ios_base *v3;
  std::ios_base::iostate v4;

  v2 = std::filebuf::open();
  v3 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  if (v2)
    v4 = 0;
  else
    v4 = v3->__rdstate_ | 4;
  std::ios_base::clear(v3, v4);
}

void sub_20C6D1F98(_QWORD *a1)
{
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
}

_QWORD *sub_20C6D1FE0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_24C541ED8;
  v2 = a1 + 54;
  a1[54] = &unk_24C541F28;
  a1[2] = &unk_24C541F00;
  MEMORY[0x212B92AB4](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x212B92EB0](v2);
  return a1;
}

uint64_t sub_20C6D2048(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20C6D2088(_QWORD *a1)
{
  a1[52] = &unk_24C541F28;
  *a1 = &unk_24C541F00;
  *(a1 - 2) = &unk_24C541ED8;
  MEMORY[0x212B92AB4](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x212B92EB0);
}

void sub_20C6D20E4(_QWORD *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *v1 = &unk_24C541ED8;
  v1[54] = &unk_24C541F28;
  v1[2] = &unk_24C541F00;
  MEMORY[0x212B92AB4](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x212B92EB0);
}

void sub_20C6D214C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_24C541ED8;
  v2 = a1 + 54;
  a1[54] = &unk_24C541F28;
  a1[2] = &unk_24C541F00;
  MEMORY[0x212B92AB4](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x212B92EB0](v2);
  operator delete(a1);
}

void sub_20C6D21B4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = a1 + 52;
  a1[52] = &unk_24C541F28;
  *a1 = &unk_24C541F00;
  *(a1 - 2) = &unk_24C541ED8;
  v2 = a1 - 2;
  MEMORY[0x212B92AB4](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x212B92EB0](v1);
  operator delete(v2);
}

void sub_20C6D2218(_QWORD *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *v1 = &unk_24C541ED8;
  v1[54] = &unk_24C541F28;
  v1[2] = &unk_24C541F00;
  MEMORY[0x212B92AB4](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x212B92EB0](v1 + 54);
  operator delete(v1);
}

uint64_t **sub_20C6D2288(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **v10;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = sub_20BDFC6B0((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          sub_20C6D2414((uint64_t)v18, (const std::string *)(v9 + 2));
          v10 = (uint64_t **)sub_20BDFC638((uint64_t)v5, v18, v17 + 4);
          sub_20BDDE1B4(v5, v18[0], v10, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = sub_20BDFC6B0((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)sub_20C6D2460((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_20C6D24B4(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_20C6D2400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C6D2460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6D2414(uint64_t a1, const std::string *a2)
{
  char *v4;

  std::string::operator=(*(std::string **)a1, a2);
  v4 = *(char **)(a1 + 8);
  if (v4 != (char *)&a2[1])
    sub_20BE8B37C(v4, a2[1].__r_.__value_.__l.__data_, a2[1].__r_.__value_.__l.__size_, (uint64_t)(a2[1].__r_.__value_.__l.__size_ - a2[1].__r_.__value_.__r.__words[0]) >> 2);
  return a1;
}

uint64_t sub_20C6D2460(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_20C6CF90C(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_20C6CF90C(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *sub_20C6D24B4(uint64_t **a1, __int128 *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  sub_20C6D2534((uint64_t)a1, a2, (uint64_t)v7);
  v3 = (uint64_t **)sub_20BDFC638((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_20BDDE1B4(a1, v6, v3, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  sub_20C6CDE18((uint64_t)v7, 0);
  return v4;
}

void sub_20C6D251C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C6CDE18((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6D2534@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C6D259C(v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C6D2584(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C6CDE18(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6D259C(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  sub_20BE8B214(__dst + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2);
  return __dst;
}

void sub_20C6D2604(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20C6D2620()
{
  uint64_t v0;
  uint64_t v1;
  void *__p;
  uint64_t v3;
  uint64_t v4;
  void *v5[2];
  char v6;

  sub_20BDDC0E4(v5, "AAPL_GCL_CODEC_MESH");
  __p = 0;
  v3 = 0;
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420B8, 0, (uint64_t)v5, (uint64_t)&__p);
  if (SHIBYTE(v4) < 0)
    operator delete(__p);
  if (v6 < 0)
    operator delete(v5[0]);
  v0 = sub_20C6D2744();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "AAPL_GCL_CODEC_MESH", "converting mesh");
  sub_20BDDC0E4(v5, "AAPL_GCL_CODEC_MESH_ENCODER");
  __p = 0;
  v3 = 0;
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420B8, 1, (uint64_t)v5, (uint64_t)&__p);
  if (SHIBYTE(v4) < 0)
    operator delete(__p);
  if (v6 < 0)
    operator delete(v5[0]);
  v1 = sub_20C6D2744();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 4, "AAPL_GCL_CODEC_MESH_ENCODER", "encoding mesh");
}

void sub_20C6D2714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6D2744()
{
  unsigned __int8 v0;
  _QWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25473D290);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473D290))
  {
    v2 = operator new(8uLL);
    *v2 = 0;
    qword_25473D288 = (uint64_t)v2;
    __cxa_guard_release(&qword_25473D290);
  }
  return qword_25473D288;
}

void sub_20C6D27A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473D290);
  _Unwind_Resume(a1);
}

void sub_20C6D27BC()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "GclCodecErrorCode::OK");
  sub_20BDDC0E4(__p, "No issue found!");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::INVALID_PARAMETER");
  sub_20BDDC0E4(__p, "Invalid parameter");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::WRONG_OUTPUT_FILE_EXTENSION");
  sub_20BDDC0E4(__p, "Output file needs to be a .gcl");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 5, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::FILENAME_OR_REFPATH_TOO_LONG");
  sub_20BDDC0E4(__p, "filename and refPath parameters should be limited to 255 characters");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 6, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::PARAMETER_ERROR_UNIFY_AND_ORDER");
  sub_20BDDC0E4(__p, "Parameters unify indices and preserve vertex order cannot be both set to true");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 10, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::CANNOT_PRESERVE_VERTEX_ORDER_UNIFICATION_REQUIRED");
  sub_20BDDC0E4(__p, "Cannot preserve order, index unification is required");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 11, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::CANNOT_REORDER_DATA");
  sub_20BDDC0E4(__p, "Cannot reorder data");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 12, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::INDEX_UNIFICATION_REQUIRED");
  sub_20BDDC0E4(__p, "Input requires index unification : either provide unified indices (all attributes are vertex interpolated without indices specified), or set parameter unifyIndices to true (only if preserveVertexOrder is false).");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 13, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::MISSING_ATTRIBUTE_DESCRIPTION");
  sub_20BDDC0E4(__p, "Missing description for an attribute");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 14, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::UNSUPPORTED_INTERPOLATION");
  sub_20BDDC0E4(__p, "Interpolation is not supported by the compression plugin");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 15, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::UNSUPPORTED_USD_DATATYPE");
  sub_20BDDC0E4(__p, "Data type is not supported by the compression plugin");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 16, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::UNSUPPORTED_ATTRIBUTE_NOT_PRIMVAR");
  sub_20BDDC0E4(__p, "Non-primvar attribute not supported for compression");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 17, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::UNSUPPORTED_ATTRIBUTE_NO_VALUE");
  sub_20BDDC0E4(__p, "Attribute with no value");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 18, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::FILE_NOT_FOUND");
  sub_20BDDC0E4(__p, "File was not found");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 50, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::ASSET_SIZE_ERROR");
  sub_20BDDC0E4(__p, "Asset as a size of zero or negative");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 51, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::ASSET_DATA_ACCESS_ERROR");
  sub_20BDDC0E4(__p, "Data from asset cannot be accessed");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 52, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::INCOMPATIBLE_BITSTREAM");
  sub_20BDDC0E4(__p, "Incompatible bitstream");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 100, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::CANNOT_COMPRESS_MESH");
  sub_20BDDC0E4(__p, "Cannot compress mesh");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 110, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::UNABLE_TO_GENERATE_HEADER");
  sub_20BDDC0E4(__p, "Unable to generate header");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 111, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::QUANTIZATION_ERROR");
  sub_20BDDC0E4(__p, "Quantization");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 112, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::INCOMPATIBLE_QUANTIZATION");
  sub_20BDDC0E4(__p, "Incompatible quantization for given data type");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 113, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::CANNOT_DECOMPRESS_MESH");
  sub_20BDDC0E4(__p, "Cannot decompress mesh");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 150, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::UNABLE_TO_READ_HEADER");
  sub_20BDDC0E4(__p, "Invalid bitstream header");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 151, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::UNSUPPORTED_MESH");
  sub_20BDDC0E4(__p, "Unsupported mesh");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 200, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::INVALID_MESH");
  sub_20BDDC0E4(__p, "Invalid mesh");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 201, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::INDEX_UNIFICATION_ERROR");
  sub_20BDDC0E4(__p, "Error during index unification");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 202, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::ATTRIBUTE_INVALID_VALUE_COUNT");
  sub_20BDDC0E4(__p, "Number of attribute elements not compatible with geometry");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 210, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::ATTRIBUTE_INVALID_INDEX_COUNT");
  sub_20BDDC0E4(__p, "Number of attribute indices not compatible with geometry");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 211, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::ATTRIBUTE_INVALID_INDEX_VALUE");
  sub_20BDDC0E4(__p, "Attribute index out of bound");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 212, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::ATTRIBUTE_UNABLE_TO_READ");
  sub_20BDDC0E4(__p, "Unable to read attribute data or indices (if any) from USD");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 213, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::UPDATE_REFERENCE_ISSUE");
  sub_20BDDC0E4(__p, "Unable to update reference list");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 255, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::UNABLE_TO_REPORT_COMPRESSION_RESULT");
  sub_20BDDC0E4(__p, "Unable to report result info from compression");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 256, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::JSON_NOT_VALID");
  sub_20BDDC0E4(__p, "Not a (valid) JSON file");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 300, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::JSON_INCOMPATIBLE");
  sub_20BDDC0E4(__p, "Not a GCL-USD compatible Json file");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 301, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::JSON_VERSION_ISSUE");
  sub_20BDDC0E4(__p, "JSON version issue");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 302, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::JSON_HEADER");
  sub_20BDDC0E4(__p, "Error reading JSON header");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 303, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::JSON_MESH_UNKNOWN");
  sub_20BDDC0E4(__p, "Mesh not present in JSON");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 310, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::CANNOT_OPEN_FILE");
  sub_20BDDC0E4(__p, "Error when opening file");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 400, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::CANNOT_CLOSE_FILE");
  sub_20BDDC0E4(__p, "Error when closing file");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 401, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::CANNOT_READ_FROM_FILE");
  sub_20BDDC0E4(__p, "Error when reading from file");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 402, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "GclCodecErrorCode::CANNOT_WRITE_TO_FILE");
  sub_20BDDC0E4(__p, "Error when writing to file");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5420C8, 403, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20C6D35F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6D3768(const std::string::value_type **a1, uint64_t a2)
{
  const std::string::value_type *v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  const std::string::value_type *v9;
  uint64_t v11;
  uint64_t CPPTypeName;
  __int128 v13;
  int v14;
  int v15;
  const std::string::value_type *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  int *v25;
  uint64_t *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type size;
  std::string *v33;
  __int128 v34;
  void *v35;
  __int128 *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  BOOL v47;
  int v49;
  int v50;
  BOOL v52;
  uint64_t *v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  pxrInternal__aapl__pxrReserved__::TfToken *v64;
  uint64_t *EmptyString;
  int v66;
  int v67;
  BOOL v69;
  BOOL v70;
  int v71;
  const std::string::value_type *v72;
  std::string::size_type v73;
  std::string *v74;
  __int128 v75;
  unsigned int *v76;
  unsigned int v77;
  int v78;
  uint64_t *v79;
  std::string *v80;
  __int128 v81;
  int v82;
  const std::string::value_type **v83;
  std::string::size_type v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  std::string *v95;
  __int128 v96;
  int v97;
  std::string *v98;
  __int128 v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v109;
  uint64_t *v110;
  std::string *v111;
  __int128 v112;
  int v113;
  const std::string::value_type *v114;
  std::string::size_type v115;
  std::string *v116;
  __int128 v117;
  int v118;
  std::string *v119;
  __int128 v120;
  unint64_t v122;
  std::string v123;
  std::string v124;
  std::string v125;
  _BYTE v126[32];
  void *__dst;
  std::string v128;
  std::string v129;
  uint64_t v130;
  __int128 v131;
  std::string::size_type v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;

  v4 = *a1;
  if ((*a1)[23] < 0)
  {
    v6 = *((_QWORD *)v4 + 1);
    if (v6 == 6 && **(_DWORD **)v4 == 1852403568 && *(_WORD *)(*(_QWORD *)v4 + 4) == 29556)
      return 1;
    if (v6 != 16)
      goto LABEL_16;
    v4 = *(const std::string::value_type **)v4;
    goto LABEL_12;
  }
  v5 = *((unsigned __int8 *)*a1 + 23);
  if (v5 != 6)
  {
    if (v5 != 16)
      goto LABEL_16;
LABEL_12:
    v9 = *(const std::string::value_type **)v4;
    v8 = *((_QWORD *)v4 + 1);
    if (v9 != (const std::string::value_type *)0x6E69726564726F5FLL || v8 != 0x73656369646E4967)
      goto LABEL_16;
    return 1;
  }
  v14 = *(_DWORD *)v4;
  v15 = *((unsigned __int16 *)v4 + 2);
  if (v14 == 1852403568 && v15 == 29556)
    return 1;
LABEL_16:
  v137 = sub_20C6D4B7C((unsigned __int16 *)*a1 + 56);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v137))
    return 0;
  *(_QWORD *)&v131 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v137);
  CPPTypeName = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetCPPTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v131);
  if (*(char *)(CPPTypeName + 23) < 0)
  {
    sub_20BDDBFAC(&v135, *(void **)CPPTypeName, *(_QWORD *)(CPPTypeName + 8));
  }
  else
  {
    v13 = *(_OWORD *)CPPTypeName;
    v136 = *(_QWORD *)(CPPTypeName + 16);
    v135 = v13;
  }
  v17 = *a1;
  if (!(*a1)[148])
  {
    if (*((_QWORD *)v17 + 6) != *((_QWORD *)v17 + 7))
    {
      v26 = sub_20C6E7B7C();
      std::operator+<char>();
      v27 = std::string::append(&v128, "! ");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v129.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v129, "Indices size ");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      *(_QWORD *)&v126[16] = *((_QWORD *)&v29->__r_.__value_.__l + 2);
      *(_OWORD *)v126 = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v125, (uint64_t)(*((_QWORD *)*a1 + 7) - *((_QWORD *)*a1 + 6)) >> 2);
      if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v125;
      else
        v31 = (std::string *)v125.__r_.__value_.__r.__words[0];
      if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v125.__r_.__value_.__r.__words[2]);
      else
        size = v125.__r_.__value_.__l.__size_;
      v33 = std::string::append((std::string *)v126, (const std::string::value_type *)v31, size);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v132 = v33->__r_.__value_.__r.__words[2];
      v131 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      sub_20C6C3E64((os_log_t *)v26, (uint64_t *)&v131);
      if (SHIBYTE(v132) < 0)
        operator delete((void *)v131);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
      if ((v126[23] & 0x80000000) != 0)
        operator delete(*(void **)v126);
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v129.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_274;
      v35 = (void *)v128.__r_.__value_.__r.__words[0];
      goto LABEL_153;
    }
    sub_20C35C4F8((uint64_t)&v131, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v129);
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)&v131, (uint64_t *)&v129, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v137, 0, (uint64_t)v126);
    if ((v129.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v37 = (unsigned int *)(v129.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
    if ((v133 & 7) != 0)
    {
      v39 = (unsigned int *)(v133 & 0xFFFFFFFFFFFFFFF8);
      do
        v40 = __ldxr(v39);
      while (__stlxr(v40 - 2, v39));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v132 + 1);
    sub_20BFD265C(&v132);
    if (*((_QWORD *)&v131 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v131 + 1));
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v131, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v126);
    sub_20C6C5D7C((*a1)[136], (unsigned int **)&v129);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v131, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v129);
    if ((v129.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v41 = (unsigned int *)(v129.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v42 = __ldxr(v41);
      while (__stlxr(v42 - 2, v41));
    }
    if ((v134 & 7) != 0)
    {
      v43 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stlxr(v44 - 2, v43));
    }
    if ((v133 & 7) != 0)
    {
      v45 = (unsigned int *)(v133 & 0xFFFFFFFFFFFFFFF8);
      do
        v46 = __ldxr(v45);
      while (__stlxr(v46 - 2, v45));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v132 + 1);
    sub_20BFD265C(&v132);
    if (*((_QWORD *)&v131 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v131 + 1));
    if (*((_DWORD *)*a1 + 36))
    {
      if (sub_20BEB90F0(&v135, "GfVec2i"))
      {
        v47 = sub_20C6D69A4((pxrInternal__aapl__pxrReserved__ **)v126, (uint64_t)a1);
      }
      else if (sub_20BEB90F0(&v135, "GfVec3i"))
      {
        v47 = sub_20C6D6AC8((pxrInternal__aapl__pxrReserved__ **)v126, (uint64_t)a1);
      }
      else if (sub_20BEB90F0(&v135, "GfVec4i"))
      {
        v47 = sub_20C6D6BEC((pxrInternal__aapl__pxrReserved__ **)v126, (uint64_t)a1);
      }
      else if (sub_20BEB90F0(&v135, "GfVec2f"))
      {
        v47 = sub_20C6D6D10((pxrInternal__aapl__pxrReserved__ **)v126, (uint64_t)a1);
      }
      else if (sub_20BEB90F0(&v135, "GfVec3f"))
      {
        v47 = sub_20C6D6E34((pxrInternal__aapl__pxrReserved__ **)v126, (uint64_t)a1);
      }
      else if (sub_20BEB90F0(&v135, "GfVec4f"))
      {
        v47 = sub_20C6D6F58((pxrInternal__aapl__pxrReserved__ **)v126, (uint64_t)a1);
      }
      else if (sub_20BEB90F0(&v135, "GfVec2d"))
      {
        v47 = sub_20C6D707C((pxrInternal__aapl__pxrReserved__ **)v126, (uint64_t)a1);
      }
      else if (sub_20BEB90F0(&v135, "GfVec3d"))
      {
        v47 = sub_20C6D71A0((pxrInternal__aapl__pxrReserved__ **)v126, (uint64_t)a1);
      }
      else
      {
        if (!sub_20BEB90F0(&v135, "GfVec4d"))
        {
LABEL_261:
          v110 = sub_20C6E7B7C();
          std::operator+<char>();
          v116 = std::string::append(&v128, " data for ");
          v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
          v129.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v117;
          v116->__r_.__value_.__l.__size_ = 0;
          v116->__r_.__value_.__r.__words[2] = 0;
          v116->__r_.__value_.__r.__words[0] = 0;
          v118 = (*a1)[23];
          if (v118 >= 0)
            v114 = *a1;
          else
            v114 = *(const std::string::value_type **)*a1;
          if (v118 >= 0)
            v115 = *((unsigned __int8 *)*a1 + 23);
          else
            v115 = *((_QWORD *)*a1 + 1);
LABEL_267:
          v119 = std::string::append(&v129, v114, v115);
          v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
          v132 = v119->__r_.__value_.__r.__words[2];
          v131 = v120;
          v119->__r_.__value_.__l.__size_ = 0;
          v119->__r_.__value_.__r.__words[2] = 0;
          v119->__r_.__value_.__r.__words[0] = 0;
          sub_20C6C3E64((os_log_t *)v110, (uint64_t *)&v131);
          if (SHIBYTE(v132) < 0)
            operator delete((void *)v131);
          if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v129.__r_.__value_.__l.__data_);
          if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v128.__r_.__value_.__l.__data_);
          sub_20C372B54((uint64_t)v126);
          goto LABEL_274;
        }
        v47 = sub_20C6D72C4((pxrInternal__aapl__pxrReserved__ **)v126, (uint64_t)a1);
      }
      if (v47)
      {
LABEL_259:
        sub_20C372B54((uint64_t)v126);
LABEL_260:
        v11 = 1;
        goto LABEL_275;
      }
      goto LABEL_261;
    }
    if (sub_20BEB90F0(&v135, "float"))
    {
      v70 = sub_20C6D647C((pxrInternal__aapl__pxrReserved__ **)v126, (uint64_t)a1);
      goto LABEL_245;
    }
    if (sub_20BEB90F0(&v135, "double"))
    {
      v70 = sub_20C6D6558((pxrInternal__aapl__pxrReserved__ **)v126, (uint64_t)a1);
      goto LABEL_245;
    }
    if (sub_20BEB90F0(&v135, "int"))
    {
      v70 = sub_20C6D6634((pxrInternal__aapl__pxrReserved__ **)v126, (uint64_t)a1);
      goto LABEL_245;
    }
    if (sub_20BEB90F0(&v135, "BOOL"))
    {
      v70 = sub_20C6D6710((pxrInternal__aapl__pxrReserved__ **)v126, (uint64_t)a1);
      goto LABEL_245;
    }
    if (!sub_20BEB90F0(&v135, "uint8_t"))
    {
      if (sub_20BEB90F0(&v135, "unsigned int"))
      {
        v70 = sub_20C6D68C8((pxrInternal__aapl__pxrReserved__ **)v126, (uint64_t)a1);
        goto LABEL_245;
      }
      if (!sub_20BEB90F0(&v135, "unsigned char"))
      {
LABEL_248:
        v110 = sub_20C6E7B7C();
        std::operator+<char>();
        v111 = std::string::append(&v128, " data for ");
        v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
        v129.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v112;
        v111->__r_.__value_.__l.__size_ = 0;
        v111->__r_.__value_.__r.__words[2] = 0;
        v111->__r_.__value_.__r.__words[0] = 0;
        v113 = (*a1)[23];
        if (v113 >= 0)
          v114 = *a1;
        else
          v114 = *(const std::string::value_type **)*a1;
        if (v113 >= 0)
          v115 = *((unsigned __int8 *)*a1 + 23);
        else
          v115 = *((_QWORD *)*a1 + 1);
        goto LABEL_267;
      }
    }
    v70 = sub_20C6D67EC((pxrInternal__aapl__pxrReserved__ **)v126, (uint64_t)a1);
LABEL_245:
    if (v70)
    {
      if (*((_DWORD *)*a1 + 35) != 1)
      {
        v109 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v131, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v126);
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetElementSize(v109, *((_DWORD *)*a1 + 35));
        sub_20C58DE20((uint64_t)&v131);
      }
      goto LABEL_259;
    }
    goto LABEL_248;
  }
  if (*((_QWORD *)v17 + 7) != *((_QWORD *)v17 + 6) || *((unsigned __int8 *)v17 + 136) - 3 <= 1)
  {
    sub_20C35C4F8((uint64_t)&v129, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v126, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v129);
    *(_QWORD *)&v126[24] = 0;
    *(_QWORD *)v126 = off_24C53CE78;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v128);
    v125.__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v126, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v128, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v137, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v125, -1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v131);
    if ((v125.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v18 = (unsigned int *)(v125.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    if ((v128.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v20 = (unsigned int *)(v128.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v126);
    if ((v130 & 7) != 0)
    {
      v22 = (unsigned int *)(v130 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v129.__r_.__value_.__r.__words[2] + 1);
    sub_20BFD265C(&v129.__r_.__value_.__r.__words[2]);
    if (v129.__r_.__value_.__l.__size_)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v129.__r_.__value_.__l.__size_);
    if (*((_DWORD *)*a1 + 36))
    {
      if (v136 < 0)
      {
        if (*((_QWORD *)&v135 + 1) != 7)
          goto LABEL_100;
        v25 = (int *)v135;
        if (*(_DWORD *)v135 != 1700161095 || *(_DWORD *)(v135 + 3) != 1764909925)
        {
LABEL_96:
          v49 = *v25;
          v50 = *(int *)((char *)v25 + 3);
          if (v49 == 1700161095 && v50 == 1764975461)
          {
            v52 = sub_20C6D5B5C((pxrInternal__aapl__pxrReserved__ **)&v131, (uint64_t)a1);
            goto LABEL_192;
          }
LABEL_100:
          if (sub_20BEB90F0(&v135, "GfVec4i"))
          {
            v52 = sub_20C6D5C80((pxrInternal__aapl__pxrReserved__ **)&v131, (uint64_t)a1);
          }
          else if (sub_20BEB90F0(&v135, "GfVec2f"))
          {
            v52 = sub_20C6D5DA4((pxrInternal__aapl__pxrReserved__ **)&v131, (uint64_t)a1);
          }
          else if (sub_20BEB90F0(&v135, "GfVec3f"))
          {
            v52 = sub_20C6D5EC8((pxrInternal__aapl__pxrReserved__ **)&v131, (uint64_t)a1);
          }
          else if (sub_20BEB90F0(&v135, "GfVec4f"))
          {
            v52 = sub_20C6D5FEC((pxrInternal__aapl__pxrReserved__ **)&v131, (uint64_t)a1);
          }
          else if (sub_20BEB90F0(&v135, "GfVec2d"))
          {
            v52 = sub_20C6D6110((pxrInternal__aapl__pxrReserved__ **)&v131, (uint64_t)a1);
          }
          else if (sub_20BEB90F0(&v135, "GfVec3d"))
          {
            v52 = sub_20C6D6234((pxrInternal__aapl__pxrReserved__ **)&v131, (uint64_t)a1);
          }
          else
          {
            if (!sub_20BEB90F0(&v135, "GfVec4d"))
            {
LABEL_206:
              v79 = sub_20C6E7B7C();
              std::operator+<char>();
              v95 = std::string::append(&v128, " data for ");
              v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
              v129.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v96;
              v95->__r_.__value_.__l.__size_ = 0;
              v95->__r_.__value_.__r.__words[2] = 0;
              v95->__r_.__value_.__r.__words[0] = 0;
              v97 = (*a1)[23];
              if (v97 >= 0)
                v83 = (const std::string::value_type **)*a1;
              else
                v83 = *(const std::string::value_type ***)*a1;
              if (v97 >= 0)
                v84 = *((unsigned __int8 *)*a1 + 23);
              else
                v84 = *((_QWORD *)*a1 + 1);
LABEL_212:
              v98 = std::string::append(&v129, (const std::string::value_type *)v83, v84);
              v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
              *(_QWORD *)&v126[16] = *((_QWORD *)&v98->__r_.__value_.__l + 2);
              *(_OWORD *)v126 = v99;
              v98->__r_.__value_.__l.__size_ = 0;
              v98->__r_.__value_.__r.__words[2] = 0;
              v98->__r_.__value_.__r.__words[0] = 0;
              sub_20C6C3E64((os_log_t *)v79, (uint64_t *)v126);
              if ((v126[23] & 0x80000000) != 0)
                operator delete(*(void **)v126);
              if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v129.__r_.__value_.__l.__data_);
              if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v128.__r_.__value_.__l.__data_);
              if ((v134 & 7) != 0)
              {
                v100 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
                do
                  v101 = __ldxr(v100);
                while (__stlxr(v101 - 2, v100));
              }
              if ((v133 & 7) != 0)
              {
                v102 = (unsigned int *)(v133 & 0xFFFFFFFFFFFFFFF8);
                do
                  v103 = __ldxr(v102);
                while (__stlxr(v103 - 2, v102));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v132 + 1);
              sub_20BFD265C(&v132);
              if (*((_QWORD *)&v131 + 1))
                sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v131 + 1));
              goto LABEL_274;
            }
            v52 = sub_20C6D6358((pxrInternal__aapl__pxrReserved__ **)&v131, (uint64_t)a1);
          }
LABEL_192:
          if (v52)
          {
LABEL_193:
            v85 = *((_QWORD *)*a1 + 6);
            v86 = *((_QWORD *)*a1 + 7);
            if (v85 != v86)
              goto LABEL_194;
            v104 = *((unsigned __int8 *)*a1 + 136);
            if (v104 == 3)
            {
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v126, "varying");
              pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v131, (const pxrInternal__aapl__pxrReserved__::TfToken *)v126);
              if ((v126[0] & 7) != 0)
              {
                v107 = (unsigned int *)(*(_QWORD *)v126 & 0xFFFFFFFFFFFFFFF8);
                do
                  v108 = __ldxr(v107);
                while (__stlxr(v108 - 2, v107));
              }
              goto LABEL_198;
            }
            if (v104 == 4)
            {
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v126, "vertex");
              pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v131, (const pxrInternal__aapl__pxrReserved__::TfToken *)v126);
              if ((v126[0] & 7) != 0)
              {
                v105 = (unsigned int *)(*(_QWORD *)v126 & 0xFFFFFFFFFFFFFFF8);
                do
                  v106 = __ldxr(v105);
                while (__stlxr(v106 - 2, v105));
              }
            }
            else
            {
LABEL_194:
              __dst = 0;
              memset(v126, 0, sizeof(v126));
              LODWORD(v128.__r_.__value_.__l.__data_) = 0;
              v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
              sub_20BF64D74((unint64_t *)v126, (v86 - v85) >> 2, &v129);
              sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v126, v87, v88);
              memcpy(__dst, *((const void **)*a1 + 6), 4 * *(_QWORD *)v126);
              pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetIndices((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v131, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v126, NAN);
              sub_20C6C5D7C((*a1)[136], (unsigned int **)&v129);
              pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v131, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v129);
              if ((v129.__r_.__value_.__s.__data_[0] & 7) != 0)
              {
                v89 = (unsigned int *)(v129.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                do
                  v90 = __ldxr(v89);
                while (__stlxr(v90 - 2, v89));
              }
              sub_20BF5618C((uint64_t)v126);
            }
LABEL_198:
            if ((v134 & 7) != 0)
            {
              v91 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
              do
                v92 = __ldxr(v91);
              while (__stlxr(v92 - 2, v91));
            }
            if ((v133 & 7) != 0)
            {
              v93 = (unsigned int *)(v133 & 0xFFFFFFFFFFFFFFF8);
              do
                v94 = __ldxr(v93);
              while (__stlxr(v94 - 2, v93));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v132 + 1);
            sub_20BFD265C(&v132);
            if (*((_QWORD *)&v131 + 1))
              sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v131 + 1));
            goto LABEL_260;
          }
          goto LABEL_206;
        }
      }
      else
      {
        if (HIBYTE(v136) != 7)
          goto LABEL_100;
        if ((_DWORD)v135 != 1700161095 || *(_DWORD *)((char *)&v135 + 3) != 1764909925)
        {
          v25 = (int *)&v135;
          goto LABEL_96;
        }
      }
      v52 = sub_20C6D5A38((pxrInternal__aapl__pxrReserved__ **)&v131, (uint64_t)a1);
      goto LABEL_192;
    }
    if (v136 < 0)
    {
      if (*((_QWORD *)&v135 + 1) != 5)
        goto LABEL_118;
      v36 = (__int128 *)v135;
    }
    else
    {
      if (HIBYTE(v136) != 5)
        goto LABEL_118;
      v36 = &v135;
    }
    v66 = *(_DWORD *)v36;
    v67 = *((unsigned __int8 *)v36 + 4);
    if (v66 == 1634692198 && v67 == 116)
    {
      v69 = sub_20C6D5510((pxrInternal__aapl__pxrReserved__ **)&v131, (uint64_t)a1);
      goto LABEL_174;
    }
LABEL_118:
    if (sub_20BEB90F0(&v135, "double"))
    {
      v69 = sub_20C6D55EC((pxrInternal__aapl__pxrReserved__ **)&v131, (uint64_t)a1);
      goto LABEL_174;
    }
    if (sub_20BEB90F0(&v135, "int"))
    {
      v69 = sub_20C6D56C8((pxrInternal__aapl__pxrReserved__ **)&v131, (uint64_t)a1);
      goto LABEL_174;
    }
    if (sub_20BEB90F0(&v135, "BOOL"))
    {
      v69 = sub_20C6D57A4((pxrInternal__aapl__pxrReserved__ **)&v131, (uint64_t)a1);
      goto LABEL_174;
    }
    if (!sub_20BEB90F0(&v135, "uint8_t"))
    {
      if (sub_20BEB90F0(&v135, "unsigned int"))
      {
        v69 = sub_20C6D595C((pxrInternal__aapl__pxrReserved__ **)&v131, (uint64_t)a1);
LABEL_174:
        if (v69)
        {
          v78 = *((_DWORD *)*a1 + 35);
          if (v78 != 1)
            pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v131, v78);
          goto LABEL_193;
        }
        goto LABEL_184;
      }
      if (!sub_20BEB90F0(&v135, "unsigned char"))
      {
LABEL_184:
        v79 = sub_20C6E7B7C();
        std::operator+<char>();
        v80 = std::string::append(&v128, " data for ");
        v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
        v129.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v81;
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        v82 = (*a1)[23];
        if (v82 >= 0)
          v83 = (const std::string::value_type **)*a1;
        else
          v83 = *(const std::string::value_type ***)*a1;
        if (v82 >= 0)
          v84 = *((unsigned __int8 *)*a1 + 23);
        else
          v84 = *((_QWORD *)*a1 + 1);
        goto LABEL_212;
      }
    }
    v69 = sub_20C6D5880((pxrInternal__aapl__pxrReserved__ **)&v131, (uint64_t)a1);
    goto LABEL_174;
  }
  v53 = sub_20C6E7B7C();
  std::operator+<char>();
  v54 = std::string::append(&v124, "! ");
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v125.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  v56 = std::string::append(&v125, "Indices size ");
  v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v128.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v123, (uint64_t)(*((_QWORD *)*a1 + 7) - *((_QWORD *)*a1 + 6)) >> 2);
  if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v58 = &v123;
  else
    v58 = (std::string *)v123.__r_.__value_.__r.__words[0];
  if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
  else
    v59 = v123.__r_.__value_.__l.__size_;
  v60 = std::string::append(&v128, (const std::string::value_type *)v58, v59);
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v129.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  v62 = std::string::append(&v129, " and interpolation ");
  v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  *(_QWORD *)&v126[16] = *((_QWORD *)&v62->__r_.__value_.__l + 2);
  *(_OWORD *)v126 = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  sub_20C6C5D7C((*a1)[136], (unsigned int **)&v122);
  if ((v122 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((v122 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v64);
  v71 = *((char *)EmptyString + 23);
  if (v71 >= 0)
    v72 = (const std::string::value_type *)EmptyString;
  else
    v72 = (const std::string::value_type *)*EmptyString;
  if (v71 >= 0)
    v73 = *((unsigned __int8 *)EmptyString + 23);
  else
    v73 = EmptyString[1];
  v74 = std::string::append((std::string *)v126, v72, v73);
  v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  v132 = v74->__r_.__value_.__r.__words[2];
  v131 = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  sub_20C6C3E64((os_log_t *)v53, (uint64_t *)&v131);
  if (SHIBYTE(v132) < 0)
    operator delete((void *)v131);
  if ((v122 & 7) != 0)
  {
    v76 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v77 = __ldxr(v76);
    while (__stlxr(v77 - 2, v76));
  }
  if ((v126[23] & 0x80000000) != 0)
    operator delete(*(void **)v126);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v125.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_274;
  v35 = (void *)v124.__r_.__value_.__r.__words[0];
LABEL_153:
  operator delete(v35);
LABEL_274:
  v11 = 0;
LABEL_275:
  if (SHIBYTE(v136) < 0)
    operator delete((void *)v135);
  return v11;
}

void sub_20C6D480C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  sub_20C58DE20(v44 - 128);
  sub_20C372B54((uint64_t)&a30);
  if (*(char *)(v44 - 57) < 0)
    operator delete(*(void **)(v44 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_20C6D4B7C(unsigned __int16 *a1)
{
  unsigned __int8 v2;
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;
  uint64_t v12;
  uint64_t *v13;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v14;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v15;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v16;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v17;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v20;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v21;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v23;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v24;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v25;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v26;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v28;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v29;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v30;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v31;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v33;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v34;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v35;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v36;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v37;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v38;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v39;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v40;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v41;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v43;
  uint64_t v44;
  uint64_t v45;
  void *__p[2];
  char v47;
  uint64_t v48;
  _QWORD v49[4];
  _QWORD v50[4];
  _QWORD v51[4];
  _QWORD v52[4];
  _QWORD v53[4];
  _QWORD v54[4];
  _QWORD v55[4];
  _QWORD v56[4];
  _QWORD v57[4];
  _QWORD v58[4];
  _QWORD v59[4];
  _QWORD v60[4];
  _QWORD v61[4];
  _QWORD v62[4];
  _QWORD v63[4];
  _QWORD v64[4];
  _QWORD v65[4];
  _QWORD v66[4];
  _QWORD v67[4];
  _QWORD v68[4];
  _QWORD v69[4];
  _QWORD v70[4];
  _QWORD v71[4];
  _QWORD v72[4];
  _QWORD v73[4];
  _QWORD v74[4];
  _QWORD v75[4];
  _QWORD v76[5];

  v76[4] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25473D2B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25473D2B0))
  {
    v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v15)
      v15 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(__p, "BOOL");
    v48 = *((_QWORD *)v15 + 56);
    v16 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v16)
      v16 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v49, "uchar");
    v49[3] = *((_QWORD *)v16 + 57);
    v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v17)
      v17 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v50, "int");
    v50[3] = *((_QWORD *)v17 + 58);
    v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v18)
      v18 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v51, "uint");
    v51[3] = *((_QWORD *)v18 + 60);
    v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v19)
      v19 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v52, "float");
    v52[3] = *((_QWORD *)v19 + 64);
    v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v20)
      v20 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v53, "double");
    v53[3] = *((_QWORD *)v20 + 65);
    v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v21)
      v21 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v54, "int2");
    v54[3] = *((_QWORD *)v21 + 70);
    v22 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v22)
      v22 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v55, "int3");
    v55[3] = *((_QWORD *)v22 + 71);
    v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v23)
      v23 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v56, "int4");
    v56[3] = *((_QWORD *)v23 + 72);
    v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v24)
      v24 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v57, "float2");
    v57[3] = *((_QWORD *)v24 + 76);
    v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v25)
      v25 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v58, "float3");
    v58[3] = *((_QWORD *)v25 + 77);
    v26 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v26)
      v26 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v59, "float4");
    v59[3] = *((_QWORD *)v26 + 78);
    v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v27)
      v27 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v60, "double2");
    v60[3] = *((_QWORD *)v27 + 79);
    v28 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v28)
      v28 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v61, "double3");
    v61[3] = *((_QWORD *)v28 + 80);
    v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v29)
      v29 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v62, "double4");
    v62[3] = *((_QWORD *)v29 + 81);
    v30 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v30)
      v30 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v63, "point3f");
    v63[3] = *((_QWORD *)v30 + 83);
    v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v31)
      v31 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v64, "point3d");
    v64[3] = *((_QWORD *)v31 + 84);
    v32 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v32)
      v32 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v65, "normal3f");
    v65[3] = *((_QWORD *)v32 + 89);
    v33 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v33)
      v33 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v66, "normal3d");
    v66[3] = *((_QWORD *)v33 + 90);
    v34 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v34)
      v34 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v67, "vector3f");
    v67[3] = *((_QWORD *)v34 + 86);
    v35 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v35)
      v35 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v68, "vector3d");
    v68[3] = *((_QWORD *)v35 + 87);
    v36 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v36)
      v36 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v69, "color3f");
    v69[3] = *((_QWORD *)v36 + 92);
    v37 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v37)
      v37 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v70, "color3d");
    v70[3] = *((_QWORD *)v37 + 93);
    v38 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v38)
      v38 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v71, "color4f");
    v71[3] = *((_QWORD *)v38 + 95);
    v39 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v39)
      v39 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v72, "color4d");
    v72[3] = *((_QWORD *)v39 + 96);
    v40 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v40)
      v40 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v73, "texCoord2f");
    v73[3] = *((_QWORD *)v40 + 105);
    v41 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v41)
      v41 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v74, "texCoord2d");
    v74[3] = *((_QWORD *)v41 + 106);
    v42 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v42)
      v42 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v75, "texCoord3f");
    v75[3] = *((_QWORD *)v42 + 108);
    v43 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v43)
      v43 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v76, "texCoord3d");
    v76[3] = *((_QWORD *)v43 + 109);
    sub_20C6DAD1C((uint64_t)&unk_25473D298, (const void **)__p, 29);
    v44 = 116;
    do
    {
      if (*((char *)&__p[v44 - 1] - 1) < 0)
        operator delete(__p[v44 - 4]);
      v44 -= 4;
    }
    while (v44 * 8);
    __cxa_atexit((void (*)(void *))sub_20C6DACF4, &unk_25473D298, &dword_20BDBC000);
    __cxa_guard_release(&qword_25473D2B0);
  }
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (*((_BYTE *)a1 + 23) != 7)
    {
      v3 = a1;
      if (*((_BYTE *)a1 + 23) != 10)
      {
LABEL_25:
        v12 = sub_20BDEEBA4((uint64_t)&unk_25473D298, (const void **)a1);
        if ((_UNKNOWN *)v12 != &unk_25473D2A0)
          return *(_QWORD *)(v12 + 56);
        v13 = sub_20C6E7B7C();
        std::operator+<char>();
        sub_20C6C3E64((os_log_t *)v13, (uint64_t *)__p);
        if (v47 < 0)
          operator delete(__p[0]);
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v45);
        return v45;
      }
      goto LABEL_13;
    }
    if (*(_DWORD *)a1 != 1702258279 || *(_DWORD *)((char *)a1 + 3) != 1714643813)
      goto LABEL_25;
LABEL_30:
    v14 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v14)
      v14 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    return *((_QWORD *)v14 + 77);
  }
  v4 = *((_QWORD *)a1 + 1);
  if (v4 == 7 && **(_DWORD **)a1 == 1702258279 && *(_DWORD *)(*(_QWORD *)a1 + 3) == 1714643813)
    goto LABEL_30;
  if (v4 != 10)
    goto LABEL_25;
  v3 = *(unsigned __int16 **)a1;
LABEL_13:
  v6 = *(_QWORD *)v3;
  v7 = v3[4];
  if (v6 != 0x64726F6F63786574 || v7 != 26162)
    goto LABEL_25;
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  return *((_QWORD *)v9 + 105);
}

void sub_20C6D54A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473D2B0);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D5510(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  void *__p;
  char v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v3 = sub_20C6DAEE4((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v8, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (v3)
  {
    v4 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v4, (uint64_t *)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<float>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v8, NAN);
  }
  sub_20BF5618C((uint64_t)v8);
  return v3 == 0;
}

void sub_20C6D55CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D55EC(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  void *__p;
  char v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v3 = sub_20C6DB89C((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v8, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (v3)
  {
    v4 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v4, (uint64_t *)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<double>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v8, NAN);
  }
  sub_20BF5618C((uint64_t)v8);
  return v3 == 0;
}

void sub_20C6D56A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D56C8(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  void *__p;
  char v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v3 = sub_20C6DC378((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v8, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (v3)
  {
    v4 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v4, (uint64_t *)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<int>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v8, NAN);
  }
  sub_20BF5618C((uint64_t)v8);
  return v3 == 0;
}

void sub_20C6D5784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D57A4(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  void *__p;
  char v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v3 = sub_20C6DCC58((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v8, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (v3)
  {
    v4 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v4, (uint64_t *)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v8, NAN);
  }
  sub_20BF5618C((uint64_t)v8);
  return v3 == 0;
}

void sub_20C6D5860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D5880(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  void *__p;
  char v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v3 = sub_20C6DD580((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v8, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (v3)
  {
    v4 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v4, (uint64_t *)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v8, NAN);
  }
  sub_20BF5618C((uint64_t)v8);
  return v3 == 0;
}

void sub_20C6D593C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D595C(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  void *__p;
  char v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v3 = sub_20C6DDE78((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v8, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (v3)
  {
    v4 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v4, (uint64_t *)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v8, NAN);
  }
  sub_20BF5618C((uint64_t)v8);
  return v3 == 0;
}

void sub_20C6D5A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D5A38(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v5 = sub_20C6DC378((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v12, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v12[0])
    {
      v6 = 0;
      do
      {
        v7 = 0;
        v8 = 1;
        do
        {
          v9 = v8;
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v3, v4);
          v8 = 0;
          *((_DWORD *)&v11 + v7) = *(_DWORD *)(v13 + 4 * (v6 | v7));
          v7 = 1;
        }
        while ((v9 & 1) != 0);
        sub_20C59A370((uint64_t)v14, &v11);
        v6 += 2;
      }
      while (v6 < *(_QWORD *)&v12[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v14, NAN);
  }
  sub_20BF5618C((uint64_t)v12);
  sub_20BF5618C((uint64_t)v14);
  return v5 == 0;
}

void sub_20C6D5B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D5B5C(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t i;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v5 = sub_20C6DC378((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v11, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v11[0])
    {
      v6 = 0;
      v7 = 0;
      do
      {
        for (i = 0; i != 12; i += 4)
        {
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v3, v4);
          *(_DWORD *)((char *)&v10 + i) = *(_DWORD *)(v12 + v6 + i);
        }
        sub_20C59BDF8((uint64_t)v13, &v10);
        v7 += 3;
        v6 += 12;
      }
      while (v7 < *(_QWORD *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v13, NAN);
  }
  sub_20BF5618C((uint64_t)v11);
  sub_20BF5618C((uint64_t)v13);
  return v5 == 0;
}

void sub_20C6D5C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D5C80(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t i;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v5 = sub_20C6DC378((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v11, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v11[0])
    {
      v6 = 0;
      v7 = 0;
      do
      {
        for (i = 0; i != 16; i += 4)
        {
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v3, v4);
          *(_DWORD *)((char *)&v11[-1] + i) = *(_DWORD *)(v12 + v6 + i);
        }
        sub_20C6DE758((uint64_t)v13, &v10);
        v7 += 4;
        v6 += 16;
      }
      while (v7 < *(_QWORD *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v13, NAN);
  }
  sub_20BF5618C((uint64_t)v11);
  sub_20BF5618C((uint64_t)v13);
  return v5 == 0;
}

void sub_20C6D5D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D5DA4(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v5 = sub_20C6DAEE4((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v12, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v12[0])
    {
      v6 = 0;
      do
      {
        v7 = 0;
        v8 = 1;
        do
        {
          v9 = v8;
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v3, v4);
          v8 = 0;
          *((_DWORD *)&v11 + v7) = *(_DWORD *)(v13 + 4 * (v6 | v7));
          v7 = 1;
        }
        while ((v9 & 1) != 0);
        sub_20C6DE8BC((uint64_t)v14, &v11);
        v6 += 2;
      }
      while (v6 < *(_QWORD *)&v12[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v14, NAN);
  }
  sub_20BF5618C((uint64_t)v12);
  sub_20BF5618C((uint64_t)v14);
  return v5 == 0;
}

void sub_20C6D5E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D5EC8(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t i;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v5 = sub_20C6DAEE4((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v11, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v11[0])
    {
      v6 = 0;
      v7 = 0;
      do
      {
        for (i = 0; i != 12; i += 4)
        {
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v3, v4);
          *(_DWORD *)((char *)&v10 + i) = *(_DWORD *)(v12 + v6 + i);
        }
        sub_20C6CD438((uint64_t)v13, &v10);
        v7 += 3;
        v6 += 12;
      }
      while (v7 < *(_QWORD *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v13, NAN);
  }
  sub_20BF5618C((uint64_t)v11);
  sub_20BF5618C((uint64_t)v13);
  return v5 == 0;
}

void sub_20C6D5FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D5FEC(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t i;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v5 = sub_20C6DAEE4((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v11, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v11[0])
    {
      v6 = 0;
      v7 = 0;
      do
      {
        for (i = 0; i != 16; i += 4)
        {
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v3, v4);
          *(_DWORD *)((char *)&v11[-1] + i) = *(_DWORD *)(v12 + v6 + i);
        }
        sub_20C6DEA20((uint64_t)v13, &v10);
        v7 += 4;
        v6 += 16;
      }
      while (v7 < *(_QWORD *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v13, NAN);
  }
  sub_20BF5618C((uint64_t)v11);
  sub_20BF5618C((uint64_t)v13);
  return v5 == 0;
}

void sub_20C6D60E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D6110(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  __int128 v11;
  _OWORD v12[2];
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v5 = sub_20C6DB89C((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v12, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v12[0])
    {
      v6 = 0;
      do
      {
        v7 = 0;
        v8 = 1;
        do
        {
          v9 = v8;
          sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v3, v4);
          v8 = 0;
          *((_QWORD *)&v12[-1] + v7) = *(_QWORD *)(v13 + 8 * (v6 | v7));
          v7 = 1;
        }
        while ((v9 & 1) != 0);
        sub_20C6B50CC((uint64_t)v14, &v11);
        v6 += 2;
      }
      while (v6 < *(_QWORD *)&v12[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v14, NAN);
  }
  sub_20BF5618C((uint64_t)v12);
  sub_20BF5618C((uint64_t)v14);
  return v5 == 0;
}

void sub_20C6D6208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D6234(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t i;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v5 = sub_20C6DB89C((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v11, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v11[0])
    {
      v6 = 0;
      v7 = 0;
      do
      {
        for (i = 0; i != 24; i += 8)
        {
          sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v3, v4);
          *(_QWORD *)((char *)&v10 + i) = *(_QWORD *)(v12 + v6 + i);
        }
        sub_20C6DEB84((uint64_t)v13, &v10);
        v7 += 3;
        v6 += 24;
      }
      while (v7 < *(_QWORD *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v13, NAN);
  }
  sub_20BF5618C((uint64_t)v11);
  sub_20BF5618C((uint64_t)v13);
  return v5 == 0;
}

void sub_20C6D632C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D6358(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t i;
  _OWORD v10[2];
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v5 = sub_20C6DB89C((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v11, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v11[0])
    {
      v6 = 0;
      v7 = 0;
      do
      {
        for (i = 0; i != 32; i += 8)
        {
          sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v3, v4);
          *(_QWORD *)((char *)v10 + i) = *(_QWORD *)(v12 + v6 + i);
        }
        sub_20C6DED18((uint64_t)v13, v10);
        v7 += 4;
        v6 += 32;
      }
      while (v7 < *(_QWORD *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v13, NAN);
  }
  sub_20BF5618C((uint64_t)v11);
  sub_20BF5618C((uint64_t)v13);
  return v5 == 0;
}

void sub_20C6D6450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D647C(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  void *__p;
  char v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v3 = sub_20C6DAEE4((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v8, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (v3)
  {
    v4 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v4, (uint64_t *)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<float>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v8, NAN);
  }
  sub_20BF5618C((uint64_t)v8);
  return v3 == 0;
}

void sub_20C6D6538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D6558(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  void *__p;
  char v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v3 = sub_20C6DB89C((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v8, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (v3)
  {
    v4 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v4, (uint64_t *)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<double>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v8, NAN);
  }
  sub_20BF5618C((uint64_t)v8);
  return v3 == 0;
}

void sub_20C6D6614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D6634(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  void *__p;
  char v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v3 = sub_20C6DC378((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v8, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (v3)
  {
    v4 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v4, (uint64_t *)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<int>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v8, NAN);
  }
  sub_20BF5618C((uint64_t)v8);
  return v3 == 0;
}

void sub_20C6D66F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D6710(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  void *__p;
  char v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v3 = sub_20C6DCC58((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v8, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (v3)
  {
    v4 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v4, (uint64_t *)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v8, NAN);
  }
  sub_20BF5618C((uint64_t)v8);
  return v3 == 0;
}

void sub_20C6D67CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D67EC(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  void *__p;
  char v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v3 = sub_20C6DD580((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v8, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (v3)
  {
    v4 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v4, (uint64_t *)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v8, NAN);
  }
  sub_20BF5618C((uint64_t)v8);
  return v3 == 0;
}

void sub_20C6D68A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D68C8(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  void *__p;
  char v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v3 = sub_20C6DDE78((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v8, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (v3)
  {
    v4 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v4, (uint64_t *)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v8, NAN);
  }
  sub_20BF5618C((uint64_t)v8);
  return v3 == 0;
}

void sub_20C6D6984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D69A4(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v5 = sub_20C6DC378((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v12, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v12[0])
    {
      v6 = 0;
      do
      {
        v7 = 0;
        v8 = 1;
        do
        {
          v9 = v8;
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v3, v4);
          v8 = 0;
          *((_DWORD *)&v11 + v7) = *(_DWORD *)(v13 + 4 * (v6 | v7));
          v7 = 1;
        }
        while ((v9 & 1) != 0);
        sub_20C59A370((uint64_t)v14, &v11);
        v6 += 2;
      }
      while (v6 < *(_QWORD *)&v12[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v14, NAN);
  }
  sub_20BF5618C((uint64_t)v12);
  sub_20BF5618C((uint64_t)v14);
  return v5 == 0;
}

void sub_20C6D6A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D6AC8(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t i;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v5 = sub_20C6DC378((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v11, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v11[0])
    {
      v6 = 0;
      v7 = 0;
      do
      {
        for (i = 0; i != 12; i += 4)
        {
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v3, v4);
          *(_DWORD *)((char *)&v10 + i) = *(_DWORD *)(v12 + v6 + i);
        }
        sub_20C59BDF8((uint64_t)v13, &v10);
        v7 += 3;
        v6 += 12;
      }
      while (v7 < *(_QWORD *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v13, NAN);
  }
  sub_20BF5618C((uint64_t)v11);
  sub_20BF5618C((uint64_t)v13);
  return v5 == 0;
}

void sub_20C6D6BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D6BEC(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t i;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v5 = sub_20C6DC378((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v11, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v11[0])
    {
      v6 = 0;
      v7 = 0;
      do
      {
        for (i = 0; i != 16; i += 4)
        {
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v3, v4);
          *(_DWORD *)((char *)&v11[-1] + i) = *(_DWORD *)(v12 + v6 + i);
        }
        sub_20C6DE758((uint64_t)v13, &v10);
        v7 += 4;
        v6 += 16;
      }
      while (v7 < *(_QWORD *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v13, NAN);
  }
  sub_20BF5618C((uint64_t)v11);
  sub_20BF5618C((uint64_t)v13);
  return v5 == 0;
}

void sub_20C6D6CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D6D10(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v5 = sub_20C6DAEE4((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v12, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v12[0])
    {
      v6 = 0;
      do
      {
        v7 = 0;
        v8 = 1;
        do
        {
          v9 = v8;
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v3, v4);
          v8 = 0;
          *((_DWORD *)&v11 + v7) = *(_DWORD *)(v13 + 4 * (v6 | v7));
          v7 = 1;
        }
        while ((v9 & 1) != 0);
        sub_20C6DE8BC((uint64_t)v14, &v11);
        v6 += 2;
      }
      while (v6 < *(_QWORD *)&v12[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v14, NAN);
  }
  sub_20BF5618C((uint64_t)v12);
  sub_20BF5618C((uint64_t)v14);
  return v5 == 0;
}

void sub_20C6D6E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D6E34(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t i;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v5 = sub_20C6DAEE4((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v11, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v11[0])
    {
      v6 = 0;
      v7 = 0;
      do
      {
        for (i = 0; i != 12; i += 4)
        {
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v3, v4);
          *(_DWORD *)((char *)&v10 + i) = *(_DWORD *)(v12 + v6 + i);
        }
        sub_20C6CD438((uint64_t)v13, &v10);
        v7 += 3;
        v6 += 12;
      }
      while (v7 < *(_QWORD *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v13, NAN);
  }
  sub_20BF5618C((uint64_t)v11);
  sub_20BF5618C((uint64_t)v13);
  return v5 == 0;
}

void sub_20C6D6F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D6F58(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t i;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v5 = sub_20C6DAEE4((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v11, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v11[0])
    {
      v6 = 0;
      v7 = 0;
      do
      {
        for (i = 0; i != 16; i += 4)
        {
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v3, v4);
          *(_DWORD *)((char *)&v11[-1] + i) = *(_DWORD *)(v12 + v6 + i);
        }
        sub_20C6DEA20((uint64_t)v13, &v10);
        v7 += 4;
        v6 += 16;
      }
      while (v7 < *(_QWORD *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v13, NAN);
  }
  sub_20BF5618C((uint64_t)v11);
  sub_20BF5618C((uint64_t)v13);
  return v5 == 0;
}

void sub_20C6D7050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D707C(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  __int128 v11;
  _OWORD v12[2];
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v5 = sub_20C6DB89C((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v12, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v12[0])
    {
      v6 = 0;
      do
      {
        v7 = 0;
        v8 = 1;
        do
        {
          v9 = v8;
          sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v3, v4);
          v8 = 0;
          *((_QWORD *)&v12[-1] + v7) = *(_QWORD *)(v13 + 8 * (v6 | v7));
          v7 = 1;
        }
        while ((v9 & 1) != 0);
        sub_20C6B50CC((uint64_t)v14, &v11);
        v6 += 2;
      }
      while (v6 < *(_QWORD *)&v12[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v14, NAN);
  }
  sub_20BF5618C((uint64_t)v12);
  sub_20BF5618C((uint64_t)v14);
  return v5 == 0;
}

void sub_20C6D7174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D71A0(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t i;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v5 = sub_20C6DB89C((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v11, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v11[0])
    {
      v6 = 0;
      v7 = 0;
      do
      {
        for (i = 0; i != 24; i += 8)
        {
          sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v3, v4);
          *(_QWORD *)((char *)&v10 + i) = *(_QWORD *)(v12 + v6 + i);
        }
        sub_20C6DEB84((uint64_t)v13, &v10);
        v7 += 3;
        v6 += 24;
      }
      while (v7 < *(_QWORD *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v13, NAN);
  }
  sub_20BF5618C((uint64_t)v11);
  sub_20BF5618C((uint64_t)v13);
  return v5 == 0;
}

void sub_20C6D7298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D72C4(pxrInternal__aapl__pxrReserved__ **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t i;
  _OWORD v10[2];
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v5 = sub_20C6DB89C((uint64_t *)(*(_QWORD *)a2 + 24), (unint64_t *)v11, (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140));
  if (!v5)
  {
    if (*(_QWORD *)&v11[0])
    {
      v6 = 0;
      v7 = 0;
      do
      {
        for (i = 0; i != 32; i += 8)
        {
          sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v3, v4);
          *(_QWORD *)((char *)v10 + i) = *(_QWORD *)(v12 + v6 + i);
        }
        sub_20C6DED18((uint64_t)v13, v10);
        v7 += 4;
        v6 += 32;
      }
      while (v7 < *(_QWORD *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v13, NAN);
  }
  sub_20BF5618C((uint64_t)v11);
  sub_20BF5618C((uint64_t)v13);
  return v5 == 0;
}

void sub_20C6D73BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6D73E8(uint64_t a1, std::string *a2, uint64_t a3, uint64_t **a4)
{
  int v7;
  int *v8;
  int v9;
  int v10;
  uint64_t *v12;
  _DWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  char IsPrimvar;
  char v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t CPPTypeName;
  __int128 v36;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v40;
  unsigned int *v41;
  unsigned int v42;
  std::string::size_type size;
  char *v44;
  uint64_t v45;
  unsigned __int32 v46;
  uint64_t v47;
  void **v48;
  uint64_t *v50;
  void *v51;
  void *v52;
  BOOL v56;
  size_t v59;
  std::string *p_p;
  std::string *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  char *v70;
  uint64_t *v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t *v78;
  std::string *v79;
  __int128 v80;
  int v81;
  const std::string::value_type *v82;
  std::string::size_type v83;
  std::string *v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  uint64_t v92;
  std::string v93;
  uint64_t v94;
  std::string __p;
  __n128 v96;
  uint64_t v97;
  std::string __str;
  void *__dst[2];
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  void *__src;
  uint64_t v104;
  char *v105;
  std::__shared_weak_count *v106;
  char v107[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v108;
  int v109;
  int v110;
  uint64_t v111;

  v7 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v7 < 0)
  {
    if (a2->__r_.__value_.__l.__size_ != 6)
      goto LABEL_10;
    v8 = (int *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    v8 = (int *)a2;
    if (v7 != 6)
      goto LABEL_10;
  }
  v9 = *v8;
  v10 = *((unsigned __int16 *)v8 + 2);
  if (v9 == 1852403568 && v10 == 29556)
    return 1;
LABEL_10:
  v12 = (uint64_t *)(a1 + 8);
  v13 = (_DWORD *)(a1 + 16);
  sub_20C35C4F8((uint64_t)&v101, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v93);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v101, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v93, (uint64_t)v107);
  if ((v93.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v14 = (unsigned int *)(v93.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  if ((BYTE8(v102) & 7) != 0)
  {
    v16 = (unsigned int *)(*((_QWORD *)&v102 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v102 + 1);
  sub_20BFD265C(&v102);
  if (*((_QWORD *)&v101 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v101 + 1));
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v107, v18))goto LABEL_155;
  v19 = (char *)operator new(0xB0uLL);
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *(_QWORD *)v19 = off_24C541D60;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_OWORD *)(v19 + 104) = 0u;
  *(_OWORD *)(v19 + 120) = 0u;
  *(_OWORD *)(v19 + 136) = 0u;
  *(_OWORD *)(v19 + 152) = 0u;
  *((_QWORD *)v19 + 21) = 0;
  *(_OWORD *)(v19 + 24) = 0u;
  v105 = v19 + 24;
  v106 = (std::__shared_weak_count *)v19;
  std::string::operator=((std::string *)v19 + 1, a2);
  v20 = (uint64_t)v105;
  v105[72] = *(_BYTE *)(a3 + 5);
  *(_DWORD *)(v20 + 104) = *(_DWORD *)a3;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v93, "elementSize");
  *(_QWORD *)&v101 = 0;
  v21 = sub_20C6DEE84((uint64_t)v107, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v93, (uint64_t)(v105 + 140), (uint64_t *)&v101);
  if ((v101 & 7) != 0)
  {
    v23 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  if ((v93.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v25 = (unsigned int *)(v93.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  if (!v21)
    *((_DWORD *)v105 + 35) = -1;
  IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v107, v22);
  v105[148] = IsPrimvar;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v101, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v107);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v101, &v104);
  v28 = sub_20C6CB2FC(&v104);
  v105[136] = v28;
  if ((v104 & 7) != 0)
  {
    v29 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  if ((__src & 7) != 0)
  {
    v31 = (unsigned int *)((unint64_t)__src & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  if ((BYTE8(v102) & 7) != 0)
  {
    v33 = (unsigned int *)(*((_QWORD *)&v102 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v102 + 1);
  sub_20BFD265C(&v102);
  if (*((_QWORD *)&v101 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v101 + 1));
  v93.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v107);
  *(_QWORD *)&v101 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v93);
  CPPTypeName = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetCPPTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v101);
  if (*(char *)(CPPTypeName + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)CPPTypeName, *(_QWORD *)(CPPTypeName + 8));
  }
  else
  {
    v36 = *(_OWORD *)CPPTypeName;
    v100 = *(_QWORD *)(CPPTypeName + 16);
    *(_OWORD *)__dst = v36;
  }
  v93.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v107);
  AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&v93, (unsigned int **)&v101);
  if ((v101 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((v101 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_20BDDBFAC(&__str, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    v40 = *(_OWORD *)EmptyString;
    __str.__r_.__value_.__r.__words[2] = EmptyString[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v40;
  }
  if ((v101 & 7) != 0)
  {
    v41 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stlxr(v42 - 2, v41));
  }
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  std::string::basic_string((std::string *)&v101, &__str, 0, size - 2, (std::allocator<char> *)&v93);
  v44 = v105 + 112;
  if (v105[135] < 0)
    operator delete(*(void **)v44);
  *(_OWORD *)v44 = v101;
  *((_QWORD *)v44 + 2) = v102;
  *(_QWORD *)&v101 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v107);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)&v101, &v96);
  if (v97 == 1)
  {
    v46 = v96.n128_u32[0];
    v47 = (uint64_t)v105;
    *((_DWORD *)v105 + 36) = v96.n128_u32[0];
    if (*(_DWORD *)(v47 + 140) == -1)
      *(_DWORD *)(v47 + 140) = v46;
  }
  else
  {
    if (v97)
    {
      v50 = sub_20C6E7B7C();
      std::operator+<char>();
      sub_20C6C3E64((os_log_t *)v50, (uint64_t *)&v101);
      if ((SBYTE7(v102) & 0x80000000) == 0)
        goto LABEL_187;
      v51 = (void *)v101;
LABEL_186:
      operator delete(v51);
      goto LABEL_187;
    }
    v45 = (uint64_t)v105;
    *((_DWORD *)v105 + 36) = 0;
    if (*(_DWORD *)(v45 + 140) == -1)
      *(_DWORD *)(v45 + 140) = 1;
  }
  if ((SHIBYTE(v100) & 0x80000000) == 0)
  {
    v48 = __dst;
    switch(HIBYTE(v100))
    {
      case 3:
        goto LABEL_63;
      case 4:
        goto LABEL_90;
      case 5:
        if (LODWORD(__dst[0]) != 1634692198 || BYTE4(__dst[0]) != 116)
          goto LABEL_104;
        goto LABEL_97;
      case 6:
        if (LODWORD(__dst[0]) == 1651863396 && WORD2(__dst[0]) == 25964)
          goto LABEL_111;
        if (HIBYTE(v100) == 4)
        {
          v48 = __dst;
          goto LABEL_90;
        }
        if (HIBYTE(v100) != 3)
          goto LABEL_104;
LABEL_63:
        if (LOWORD(__dst[0]) != 28265 || BYTE2(__dst[0]) != 116)
          goto LABEL_104;
        goto LABEL_112;
      default:
        goto LABEL_104;
    }
  }
  v52 = __dst[1];
  if (__dst[1] == (void *)5 && *(_DWORD *)__dst[0] == 1634692198 && *((_BYTE *)__dst[0] + 4) == 116)
  {
LABEL_97:
    v56 = sub_20C6D81FC((uint64_t)v107, (uint64_t)&v105, *(_DWORD *)a3);
    goto LABEL_113;
  }
  if (__dst[1] == (void *)6)
  {
    if (*(_DWORD *)__dst[0] == 1651863396 && *((_WORD *)__dst[0] + 2) == 25964)
    {
LABEL_111:
      v56 = sub_20C6D82DC((uint64_t)v107, (uint64_t)&v105, *(_DWORD *)a3);
      goto LABEL_113;
    }
    v52 = __dst[1];
  }
  if (v52 == (void *)3)
  {
    if (*(_WORD *)__dst[0] == 28265 && *((_BYTE *)__dst[0] + 2) == 116)
    {
LABEL_112:
      v56 = sub_20C6D83BC((uint64_t)v107, (uint64_t)&v105, *(_DWORD *)a3);
      goto LABEL_113;
    }
    v52 = __dst[1];
  }
  if (v52 == (void *)4)
  {
    v48 = (void **)__dst[0];
LABEL_90:
    if (*(_DWORD *)v48 == 1819242338)
    {
      v56 = sub_20C6D849C((uint64_t)v107, (uint64_t)&v105, *(_DWORD *)a3);
      goto LABEL_113;
    }
  }
LABEL_104:
  if (sub_20BEB90F0(__dst, "uint8_t"))
    goto LABEL_105;
  if (sub_20BEB90F0(__dst, "unsigned int"))
  {
    v56 = sub_20C6D865C((uint64_t)v107, (uint64_t)&v105, *(_DWORD *)a3);
  }
  else
  {
    if (sub_20BEB90F0(__dst, "unsigned char"))
    {
LABEL_105:
      v56 = sub_20C6D857C((uint64_t)v107, (uint64_t)&v105, *(_DWORD *)a3);
      goto LABEL_113;
    }
    if (sub_20BEB90F0(__dst, "GfVec2i"))
    {
      v56 = sub_20C6D873C((uint64_t)v107, (uint64_t)&v105, *(_DWORD *)a3);
    }
    else if (sub_20BEB90F0(__dst, "GfVec3i"))
    {
      v56 = sub_20C6D88E4((uint64_t)v107, (uint64_t)&v105, *(_DWORD *)a3);
    }
    else if (sub_20BEB90F0(__dst, "GfVec4i"))
    {
      v56 = sub_20C6D8A94((uint64_t)v107, (uint64_t)&v105, *(_DWORD *)a3);
    }
    else if (sub_20BEB90F0(__dst, "GfVec2f"))
    {
      v56 = sub_20C6D8C44((uint64_t)v107, (uint64_t)&v105, *(_DWORD *)a3);
    }
    else if (sub_20BEB90F0(__dst, "GfVec3f"))
    {
      v56 = sub_20C6D8DF4((uint64_t)v107, (uint64_t)&v105, *(_DWORD *)a3);
    }
    else if (sub_20BEB90F0(__dst, "GfVec4f"))
    {
      v56 = sub_20C6D8FA4((uint64_t)v107, (uint64_t)&v105, *(_DWORD *)a3);
    }
    else if (sub_20BEB90F0(__dst, "GfVec2d"))
    {
      v56 = sub_20C6D9154((uint64_t)v107, (uint64_t)&v105, *(_DWORD *)a3);
    }
    else if (sub_20BEB90F0(__dst, "GfVec3d"))
    {
      v56 = sub_20C6D9300((uint64_t)v107, (uint64_t)&v105, *(_DWORD *)a3);
    }
    else
    {
      if (!sub_20BEB90F0(__dst, "GfVec4d"))
        goto LABEL_174;
      v56 = sub_20C6D94AC((uint64_t)v107, (uint64_t)&v105, *(_DWORD *)a3);
    }
  }
LABEL_113:
  if (!v56)
  {
LABEL_174:
    v78 = sub_20C6E7B7C();
    std::operator+<char>();
    v79 = std::string::append(&__p, " data for ");
    v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    v81 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v81 >= 0)
      v82 = (const std::string::value_type *)a2;
    else
      v82 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
    if (v81 >= 0)
      v83 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    else
      v83 = a2->__r_.__value_.__l.__size_;
    v84 = std::string::append(&v93, v82, v83);
    v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    *(_QWORD *)&v102 = *((_QWORD *)&v84->__r_.__value_.__l + 2);
    v101 = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v78, (uint64_t *)&v101);
    if (SBYTE7(v102) < 0)
      operator delete((void *)v101);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_187;
    v51 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_186;
  }
  if (v105[136] == 5)
  {
    sub_20C35C4F8((uint64_t)&v101, v12, v13);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    else
      v59 = a2->__r_.__value_.__l.__size_;
    p_p = &__p;
    sub_20BDF6BDC((uint64_t)&__p, v59 + 8);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v59)
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = a2;
      else
        v61 = (std::string *)a2->__r_.__value_.__r.__words[0];
      memmove(p_p, v61, v59);
    }
    strcpy((char *)p_p + v59, ":indices");
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v92);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v101, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v92, (uint64_t)&v93);
    if ((v92 & 7) != 0)
    {
      v62 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
      do
        v63 = __ldxr(v62);
      while (__stlxr(v63 - 2, v62));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((BYTE8(v102) & 7) != 0)
    {
      v64 = (unsigned int *)(*((_QWORD *)&v102 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v65 = __ldxr(v64);
      while (__stlxr(v65 - 2, v64));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v102 + 1);
    sub_20BFD265C(&v102);
    if (*((_QWORD *)&v101 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v101 + 1));
    if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v93, v66))goto LABEL_141;
    __src = 0;
    v101 = 0u;
    v102 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)&v93, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v101);
    v67 = v101;
    if ((_QWORD)v101)
    {
      sub_20BE81ACC((uint64_t)(v105 + 48), v101);
      v68 = (void *)*((_QWORD *)v105 + 6);
      sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v101, v69, v70);
      memcpy(v68, __src, 4 * v101);
    }
    else
    {
      v71 = sub_20C6E7B7C();
      std::operator+<char>();
      sub_20C6C3E64((os_log_t *)v71, (uint64_t *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_20BF5618C((uint64_t)&v101);
    if (v67)
    {
LABEL_141:
      if ((v94 & 7) != 0)
      {
        v72 = (unsigned int *)(v94 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93.__r_.__value_.__r.__words[2] + 1);
      sub_20BFD265C(&v93.__r_.__value_.__r.__words[2]);
      if (v93.__r_.__value_.__l.__size_)
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v93.__r_.__value_.__l.__size_);
      goto LABEL_146;
    }
    sub_20C372B54((uint64_t)&v93);
LABEL_187:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v100) < 0)
      operator delete(__dst[0]);
    v86 = v106;
    if (v106)
    {
      p_shared_owners = (unint64_t *)&v106->__shared_owners_;
      do
        v88 = __ldaxr(p_shared_owners);
      while (__stlxr(v88 - 1, p_shared_owners));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    v37 = 0;
    goto LABEL_197;
  }
LABEL_146:
  *(_QWORD *)&v101 = a2;
  v74 = sub_20C6CC48C(a4, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)&v101);
  sub_20BDE881C(v74 + 7, (uint64_t *)&v105);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v100) < 0)
    operator delete(__dst[0]);
  v75 = v106;
  if (v106)
  {
    v76 = (unint64_t *)&v106->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
LABEL_155:
  v37 = 1;
LABEL_197:
  if ((v111 & 7) != 0)
  {
    v89 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
    do
      v90 = __ldxr(v89);
    while (__stlxr(v90 - 2, v89));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v110);
  sub_20BFD265C(&v109);
  if (v108)
    sub_20C35C614(v108);
  return v37;
}

void sub_20C6D7FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;

  sub_20BF5618C((uint64_t)&a41);
  sub_20C372B54((uint64_t)&a11);
  if (a32 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v41 - 120));
  sub_20C372B54(v41 - 104);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D81FC(uint64_t a1, uint64_t a2, char a3)
{
  _BOOL8 v5;
  uint64_t *v6;
  void *__p;
  char v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10);
  if (*(_QWORD *)&v10[0])
  {
    v5 = sub_20C6DEF14((unint64_t *)v10, (uint64_t *)(*(_QWORD *)a2 + 24), (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140), a3) == 0;
  }
  else
  {
    v6 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&__p);
    if (v9 < 0)
      operator delete(__p);
    v5 = 0;
  }
  sub_20BF5618C((uint64_t)v10);
  return v5;
}

void sub_20C6D82B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D82DC(uint64_t a1, uint64_t a2, char a3)
{
  _BOOL8 v5;
  uint64_t *v6;
  void *__p;
  char v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<double>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10);
  if (*(_QWORD *)&v10[0])
  {
    v5 = sub_20C6DF8CC((unint64_t *)v10, (uint64_t *)(*(_QWORD *)a2 + 24), (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140), a3) == 0;
  }
  else
  {
    v6 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&__p);
    if (v9 < 0)
      operator delete(__p);
    v5 = 0;
  }
  sub_20BF5618C((uint64_t)v10);
  return v5;
}

void sub_20C6D8398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D83BC(uint64_t a1, uint64_t a2, char a3)
{
  _BOOL8 v5;
  uint64_t *v6;
  void *__p;
  char v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10);
  if (*(_QWORD *)&v10[0])
  {
    v5 = sub_20C6E02A4((unint64_t *)v10, (uint64_t *)(*(_QWORD *)a2 + 24), (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140), a3) == 0;
  }
  else
  {
    v6 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&__p);
    if (v9 < 0)
      operator delete(__p);
    v5 = 0;
  }
  sub_20BF5618C((uint64_t)v10);
  return v5;
}

void sub_20C6D8478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D849C(uint64_t a1, uint64_t a2, char a3)
{
  _BOOL8 v5;
  uint64_t *v6;
  void *__p;
  char v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10);
  if (*(_QWORD *)&v10[0])
  {
    v5 = sub_20C6E0F3C((unint64_t *)v10, (uint64_t *)(*(_QWORD *)a2 + 24), (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140), a3) == 0;
  }
  else
  {
    v6 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&__p);
    if (v9 < 0)
      operator delete(__p);
    v5 = 0;
  }
  sub_20BF5618C((uint64_t)v10);
  return v5;
}

void sub_20C6D8558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D857C(uint64_t a1, uint64_t a2, char a3)
{
  _BOOL8 v5;
  uint64_t *v6;
  void *__p;
  char v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10);
  if (*(_QWORD *)&v10[0])
  {
    v5 = sub_20C6E1C8C((unint64_t *)v10, (uint64_t *)(*(_QWORD *)a2 + 24), (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140), a3) == 0;
  }
  else
  {
    v6 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&__p);
    if (v9 < 0)
      operator delete(__p);
    v5 = 0;
  }
  sub_20BF5618C((uint64_t)v10);
  return v5;
}

void sub_20C6D8638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D865C(uint64_t a1, uint64_t a2, char a3)
{
  _BOOL8 v5;
  uint64_t *v6;
  void *__p;
  char v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10);
  if (*(_QWORD *)&v10[0])
  {
    v5 = sub_20C6E2838((unint64_t *)v10, (uint64_t *)(*(_QWORD *)a2 + 24), (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140), a3) == 0;
  }
  else
  {
    v6 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&__p);
    if (v9 < 0)
      operator delete(__p);
    v5 = 0;
  }
  sub_20BF5618C((uint64_t)v10);
  return v5;
}

void sub_20C6D8718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D873C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  char *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  int v13;
  uint64_t v14;
  char *v15;
  int v16;
  _BOOL8 v17;
  uint64_t *v18;
  void *__p[2];
  __int128 v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  int v25;
  int *v26;

  v24 = 0;
  memset(v23, 0, sizeof(v23));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
  if (*(_QWORD *)&v23[0])
  {
    v22 = 0;
    *(_OWORD *)__p = 0u;
    v21 = 0u;
    v25 = 0;
    v26 = &v25;
    sub_20BF64D74((unint64_t *)__p, 2 * *(_QWORD *)&v23[0], &v26);
    if (*(_QWORD *)&v23[0])
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = 0;
        v10 = v8;
        v11 = 1;
        do
        {
          v12 = v11;
          sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v23, v5, v6);
          v13 = *(_DWORD *)(v24 + 8 * v7 + 4 * v9);
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v14, v15);
          v11 = 0;
          v8 = v10 + 1;
          *(_DWORD *)(v22 + 4 * v10++) = v13;
          v9 = 1;
        }
        while ((v12 & 1) != 0);
        ++v7;
      }
      while (*(_QWORD *)&v23[0] > v7);
    }
    v16 = sub_20C6E02A4((unint64_t *)__p, (uint64_t *)(*(_QWORD *)a2 + 24), (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140), a3);
    sub_20BF5618C((uint64_t)__p);
    v17 = v16 == 0;
  }
  else
  {
    v18 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v18, (uint64_t *)__p);
    if (SBYTE7(v21) < 0)
      operator delete(__p[0]);
    v17 = 0;
  }
  sub_20BF5618C((uint64_t)v23);
  return v17;
}

void sub_20C6D88A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D88E4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  int v15;
  _BOOL8 v16;
  uint64_t *v17;
  void *__p[2];
  __int128 v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  int v24;
  int *v25;

  v23 = 0;
  memset(v22, 0, sizeof(v22));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v22);
  if (*(_QWORD *)&v22[0])
  {
    v21 = 0;
    *(_OWORD *)__p = 0u;
    v20 = 0u;
    v24 = 0;
    v25 = &v24;
    sub_20BF64D74((unint64_t *)__p, 3 * *(_QWORD *)&v22[0], &v25);
    if (*(_QWORD *)&v22[0])
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = 0;
        v11 = v9;
        do
        {
          sub_20C011B6C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v22, v5, v6);
          v12 = *(_DWORD *)(v23 + v7 + v10);
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v13, v14);
          v9 = v11 + 1;
          *(_DWORD *)(v21 + 4 * v11) = v12;
          v10 += 4;
          ++v11;
        }
        while (v10 != 12);
        ++v8;
        v7 += 12;
      }
      while (*(_QWORD *)&v22[0] > v8);
    }
    v15 = sub_20C6E02A4((unint64_t *)__p, (uint64_t *)(*(_QWORD *)a2 + 24), (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140), a3);
    sub_20BF5618C((uint64_t)__p);
    v16 = v15 == 0;
  }
  else
  {
    v17 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v17, (uint64_t *)__p);
    if (SBYTE7(v20) < 0)
      operator delete(__p[0]);
    v16 = 0;
  }
  sub_20BF5618C((uint64_t)v22);
  return v16;
}

void sub_20C6D8A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D8A94(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  int v15;
  _BOOL8 v16;
  uint64_t *v17;
  void *__p[2];
  __int128 v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  int v24;
  int *v25;

  v23 = 0;
  memset(v22, 0, sizeof(v22));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v22);
  if (*(_QWORD *)&v22[0])
  {
    v21 = 0;
    *(_OWORD *)__p = 0u;
    v20 = 0u;
    v24 = 0;
    v25 = &v24;
    sub_20BF64D74((unint64_t *)__p, 4 * *(_QWORD *)&v22[0], &v25);
    if (*(_QWORD *)&v22[0])
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = 0;
        v11 = v9;
        do
        {
          sub_20C013B80((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v22, v5, v6);
          v12 = *(_DWORD *)(v23 + v7 + v10);
          sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v13, v14);
          v9 = v11 + 1;
          *(_DWORD *)(v21 + 4 * v11) = v12;
          v10 += 4;
          ++v11;
        }
        while (v10 != 16);
        ++v8;
        v7 += 16;
      }
      while (*(_QWORD *)&v22[0] > v8);
    }
    v15 = sub_20C6E02A4((unint64_t *)__p, (uint64_t *)(*(_QWORD *)a2 + 24), (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140), a3);
    sub_20BF5618C((uint64_t)__p);
    v16 = v15 == 0;
  }
  else
  {
    v17 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v17, (uint64_t *)__p);
    if (SBYTE7(v20) < 0)
      operator delete(__p[0]);
    v16 = 0;
  }
  sub_20BF5618C((uint64_t)v22);
  return v16;
}

void sub_20C6D8C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D8C44(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  char *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  int v13;
  uint64_t v14;
  char *v15;
  int v16;
  _BOOL8 v17;
  uint64_t *v18;
  void *__p[2];
  __int128 v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  int v25;
  int *v26;

  v24 = 0;
  memset(v23, 0, sizeof(v23));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
  if (*(_QWORD *)&v23[0])
  {
    v22 = 0;
    *(_OWORD *)__p = 0u;
    v21 = 0u;
    v25 = 0;
    v26 = &v25;
    sub_20BF56258((unint64_t *)__p, 2 * *(_QWORD *)&v23[0], &v26);
    if (*(_QWORD *)&v23[0])
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = 0;
        v10 = v8;
        v11 = 1;
        do
        {
          v12 = v11;
          sub_20BF58964((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v23, v5, v6);
          v13 = *(_DWORD *)(v24 + 8 * v7 + 4 * v9);
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v14, v15);
          v11 = 0;
          v8 = v10 + 1;
          *(_DWORD *)(v22 + 4 * v10++) = v13;
          v9 = 1;
        }
        while ((v12 & 1) != 0);
        ++v7;
      }
      while (*(_QWORD *)&v23[0] > v7);
    }
    v16 = sub_20C6DEF14((unint64_t *)__p, (uint64_t *)(*(_QWORD *)a2 + 24), (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140), a3);
    sub_20BF5618C((uint64_t)__p);
    v17 = v16 == 0;
  }
  else
  {
    v18 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v18, (uint64_t *)__p);
    if (SBYTE7(v21) < 0)
      operator delete(__p[0]);
    v17 = 0;
  }
  sub_20BF5618C((uint64_t)v23);
  return v17;
}

void sub_20C6D8DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D8DF4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  int v15;
  _BOOL8 v16;
  uint64_t *v17;
  void *__p[2];
  __int128 v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  int v24;
  int *v25;

  v23 = 0;
  memset(v22, 0, sizeof(v22));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v22);
  if (*(_QWORD *)&v22[0])
  {
    v21 = 0;
    *(_OWORD *)__p = 0u;
    v20 = 0u;
    v24 = 0;
    v25 = &v24;
    sub_20BF56258((unint64_t *)__p, 3 * *(_QWORD *)&v22[0], &v25);
    if (*(_QWORD *)&v22[0])
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = 0;
        v11 = v9;
        do
        {
          sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v22, v5, v6);
          v12 = *(_DWORD *)(v23 + v7 + v10);
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v13, v14);
          v9 = v11 + 1;
          *(_DWORD *)(v21 + 4 * v11) = v12;
          v10 += 4;
          ++v11;
        }
        while (v10 != 12);
        ++v8;
        v7 += 12;
      }
      while (*(_QWORD *)&v22[0] > v8);
    }
    v15 = sub_20C6DEF14((unint64_t *)__p, (uint64_t *)(*(_QWORD *)a2 + 24), (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140), a3);
    sub_20BF5618C((uint64_t)__p);
    v16 = v15 == 0;
  }
  else
  {
    v17 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v17, (uint64_t *)__p);
    if (SBYTE7(v20) < 0)
      operator delete(__p[0]);
    v16 = 0;
  }
  sub_20BF5618C((uint64_t)v22);
  return v16;
}

void sub_20C6D8F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D8FA4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  int v15;
  _BOOL8 v16;
  uint64_t *v17;
  void *__p[2];
  __int128 v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  int v24;
  int *v25;

  v23 = 0;
  memset(v22, 0, sizeof(v22));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v22);
  if (*(_QWORD *)&v22[0])
  {
    v21 = 0;
    *(_OWORD *)__p = 0u;
    v20 = 0u;
    v24 = 0;
    v25 = &v24;
    sub_20BF56258((unint64_t *)__p, 4 * *(_QWORD *)&v22[0], &v25);
    if (*(_QWORD *)&v22[0])
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = 0;
        v11 = v9;
        do
        {
          sub_20BF5D5F0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v22, v5, v6);
          v12 = *(_DWORD *)(v23 + v7 + v10);
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v13, v14);
          v9 = v11 + 1;
          *(_DWORD *)(v21 + 4 * v11) = v12;
          v10 += 4;
          ++v11;
        }
        while (v10 != 16);
        ++v8;
        v7 += 16;
      }
      while (*(_QWORD *)&v22[0] > v8);
    }
    v15 = sub_20C6DEF14((unint64_t *)__p, (uint64_t *)(*(_QWORD *)a2 + 24), (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140), a3);
    sub_20BF5618C((uint64_t)__p);
    v16 = v15 == 0;
  }
  else
  {
    v17 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v17, (uint64_t *)__p);
    if (SBYTE7(v20) < 0)
      operator delete(__p[0]);
    v16 = 0;
  }
  sub_20BF5618C((uint64_t)v22);
  return v16;
}

void sub_20C6D9114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D9154(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  char *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  _BOOL8 v17;
  uint64_t *v18;
  void *__p[2];
  __int128 v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v24 = 0;
  memset(v23, 0, sizeof(v23));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
  if (*(_QWORD *)&v23[0])
  {
    v22 = 0;
    *(_OWORD *)__p = 0u;
    v21 = 0u;
    v25 = 0;
    v26 = &v25;
    sub_20BF57894((unint64_t *)__p, 2 * *(_QWORD *)&v23[0], &v26);
    if (*(_QWORD *)&v23[0])
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = 0;
        v10 = v8;
        v11 = 1;
        do
        {
          v12 = v11;
          sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v23, v5, v6);
          v13 = *(_QWORD *)(v24 + 16 * v7 + 8 * v9);
          sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v14, v15);
          v11 = 0;
          v8 = v10 + 1;
          *(_QWORD *)(v22 + 8 * v10++) = v13;
          v9 = 1;
        }
        while ((v12 & 1) != 0);
        ++v7;
      }
      while (*(_QWORD *)&v23[0] > v7);
    }
    v16 = sub_20C6DF8CC((unint64_t *)__p, (uint64_t *)(*(_QWORD *)a2 + 24), (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140), a3);
    sub_20BF5618C((uint64_t)__p);
    v17 = v16 == 0;
  }
  else
  {
    v18 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v18, (uint64_t *)__p);
    if (SBYTE7(v21) < 0)
      operator delete(__p[0]);
    v17 = 0;
  }
  sub_20BF5618C((uint64_t)v23);
  return v17;
}

void sub_20C6D92C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D9300(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  _BOOL8 v16;
  uint64_t *v17;
  void *__p[2];
  __int128 v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v23 = 0;
  memset(v22, 0, sizeof(v22));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v22);
  if (*(_QWORD *)&v22[0])
  {
    v21 = 0;
    *(_OWORD *)__p = 0u;
    v20 = 0u;
    v24 = 0;
    v25 = &v24;
    sub_20BF57894((unint64_t *)__p, 3 * *(_QWORD *)&v22[0], &v25);
    if (*(_QWORD *)&v22[0])
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = 0;
        v11 = v9;
        do
        {
          sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v22, v5, v6);
          v12 = *(_QWORD *)(v23 + v7 + v10);
          sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v13, v14);
          v9 = v11 + 1;
          *(_QWORD *)(v21 + 8 * v11) = v12;
          v10 += 8;
          ++v11;
        }
        while (v10 != 24);
        ++v8;
        v7 += 24;
      }
      while (*(_QWORD *)&v22[0] > v8);
    }
    v15 = sub_20C6DF8CC((unint64_t *)__p, (uint64_t *)(*(_QWORD *)a2 + 24), (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140), a3);
    sub_20BF5618C((uint64_t)__p);
    v16 = v15 == 0;
  }
  else
  {
    v17 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v17, (uint64_t *)__p);
    if (SBYTE7(v20) < 0)
      operator delete(__p[0]);
    v16 = 0;
  }
  sub_20BF5618C((uint64_t)v22);
  return v16;
}

void sub_20C6D946C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C6D94AC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  _BOOL8 v16;
  uint64_t *v17;
  void *__p[2];
  __int128 v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v23 = 0;
  memset(v22, 0, sizeof(v22));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v22);
  if (*(_QWORD *)&v22[0])
  {
    v21 = 0;
    *(_OWORD *)__p = 0u;
    v20 = 0u;
    v24 = 0;
    v25 = &v24;
    sub_20BF57894((unint64_t *)__p, 4 * *(_QWORD *)&v22[0], &v25);
    if (*(_QWORD *)&v22[0])
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = 0;
        v11 = v9;
        do
        {
          sub_20BF5ECA0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v22, v5, v6);
          v12 = *(_QWORD *)(v23 + v7 + v10);
          sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v13, v14);
          v9 = v11 + 1;
          *(_QWORD *)(v21 + 8 * v11) = v12;
          v10 += 8;
          ++v11;
        }
        while (v10 != 32);
        ++v8;
        v7 += 32;
      }
      while (*(_QWORD *)&v22[0] > v8);
    }
    v15 = sub_20C6DF8CC((unint64_t *)__p, (uint64_t *)(*(_QWORD *)a2 + 24), (_BYTE *)(*(_QWORD *)a2 + 72), (int *)(*(_QWORD *)a2 + 140), a3);
    sub_20BF5618C((uint64_t)__p);
    v16 = v15 == 0;
  }
  else
  {
    v17 = sub_20C6E7B7C();
    std::operator+<char>();
    sub_20C6C3E64((os_log_t *)v17, (uint64_t *)__p);
    if (SBYTE7(v20) < 0)
      operator delete(__p[0]);
    v16 = 0;
  }
  sub_20BF5618C((uint64_t)v22);
  return v16;
}

void sub_20C6D9618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6D9658(const pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v4;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v5;
  uint64_t *EmptyString;
  __int128 v7;
  void **v8;
  BOOL v9;
  uint64_t v10;
  void **v12;
  int v14;
  int v15;
  int v17;
  int v18;
  std::string::size_type v21;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v22;
  unsigned int *v23;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v24;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v25;
  unsigned int v26;
  unsigned int v27;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *v29;
  __int128 v30;
  unsigned int *v31;
  unsigned int v32;
  std::string::size_type size;
  BOOL v34;
  BOOL v35;
  uint64_t *v36;
  std::string *v37;
  __int128 v38;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v39;
  uint64_t *v40;
  int v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string __str;
  void *__p[2];
  uint64_t v56;
  _BYTE v57[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;

  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v57, a1);
  v4 = sub_20C398E78(a1);
  if ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_20BDDBFAC(__p, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    v7 = *(_OWORD *)EmptyString;
    v56 = EmptyString[2];
    *(_OWORD *)__p = v7;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v57, v5) & 1) != 0)goto LABEL_8;
  if (SHIBYTE(v56) < 0)
  {
    if (__p[1] != (void *)6)
    {
      if (__p[1] != (void *)7)
        goto LABEL_49;
      if (*(_DWORD *)__p[0] != 1836216174 || *(_DWORD *)((char *)__p[0] + 3) != 1936482669)
        goto LABEL_49;
      goto LABEL_8;
    }
    v12 = (void **)__p[0];
    goto LABEL_45;
  }
  if (HIBYTE(v56) == 6)
  {
    v12 = __p;
LABEL_45:
    v17 = *(_DWORD *)v12;
    v18 = *((unsigned __int16 *)v12 + 2);
    if (v17 != 1852403568 || v18 != 29556)
      goto LABEL_49;
    goto LABEL_8;
  }
  if (HIBYTE(v56) != 7
    || (LODWORD(__p[0]) == 1836216174 ? (v9 = *(_DWORD *)((char *)__p + 3) == 1936482669) : (v9 = 0), !v9))
  {
LABEL_49:
    v10 = 17;
    goto LABEL_102;
  }
LABEL_8:
  if (!pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v57))
  {
    v10 = 18;
    goto LABEL_102;
  }
  if (SHIBYTE(v56) < 0)
  {
    if (__p[1] == (void *)6 && *(_DWORD *)__p[0] == 1852403568 && *((_WORD *)__p[0] + 2) == 29556)
      goto LABEL_69;
    if (__p[1] != (void *)7)
      goto LABEL_54;
    v8 = (void **)__p[0];
  }
  else
  {
    if (HIBYTE(v56) == 6)
    {
      if (LODWORD(__p[0]) == 1852403568 && WORD2(__p[0]) == 29556)
        goto LABEL_69;
      goto LABEL_54;
    }
    if (HIBYTE(v56) != 7)
    {
LABEL_54:
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v57, &__str);
      goto LABEL_55;
    }
    v8 = __p;
  }
  v14 = *(_DWORD *)v8;
  v15 = *(_DWORD *)((char *)v8 + 3);
  if (v14 != 1836216174 || v15 != 1936482669)
    goto LABEL_54;
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsInterpolation(a2, (unsigned int **)&__str);
LABEL_55:
  v21 = __str.__r_.__value_.__r.__words[0];
  v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v22)
    v22 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v23 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
  if ((v21 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v22 + 153) & 0xFFFFFFFFFFFFFFF8))
  {
    v24 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v24)
      v24 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (v23 != (unsigned int *)(*((_QWORD *)v24 + 151) & 0xFFFFFFFFFFFFFFF8))
    {
      v25 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v25)
        v25 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (v23 != (unsigned int *)(*((_QWORD *)v25 + 40) & 0xFFFFFFFFFFFFFFF8))
      {
        if ((v21 & 7) != 0)
        {
          do
            v26 = __ldxr(v23);
          while (__stlxr(v26 - 2, v23));
        }
        v10 = 15;
        goto LABEL_102;
      }
    }
  }
  if ((v21 & 7) != 0)
  {
    do
      v27 = __ldxr(v23);
    while (__stlxr(v27 - 2, v23));
  }
LABEL_69:
  v52.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&v52, (unsigned int **)&v53);
  if ((v53.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
    v29 = (uint64_t *)((v53.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v29 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
  if (*((char *)v29 + 23) < 0)
  {
    sub_20BDDBFAC(&__str, (void *)*v29, v29[1]);
  }
  else
  {
    v30 = *(_OWORD *)v29;
    __str.__r_.__value_.__r.__words[2] = v29[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v30;
  }
  if ((v53.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v31 = (unsigned int *)(v53.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  std::string::basic_string(&v53, &__str, 0, size - 2, (std::allocator<char> *)&v52);
  v34 = sub_20C6D9C5C((const void **)&v53.__r_.__value_.__l.__data_);
  v35 = v34;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v53.__r_.__value_.__l.__data_);
    if (v35)
      goto LABEL_82;
LABEL_84:
    v36 = sub_20C6E7B7C();
    std::operator+<char>();
    v37 = std::string::append(&v51, " for attribute ");
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v39 = sub_20C398E78(a1);
    if ((*(_QWORD *)v39 & 0xFFFFFFFFFFFFFFF8) != 0)
      v40 = (uint64_t *)((*(_QWORD *)v39 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v40 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v39);
    v41 = *((char *)v40 + 23);
    if (v41 >= 0)
      v42 = (const std::string::value_type *)v40;
    else
      v42 = (const std::string::value_type *)*v40;
    if (v41 >= 0)
      v43 = *((unsigned __int8 *)v40 + 23);
    else
      v43 = v40[1];
    v44 = std::string::append(&v52, v42, v43);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v36, (uint64_t *)&v53);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    v10 = 16;
    goto LABEL_100;
  }
  if (!v34)
    goto LABEL_84;
LABEL_82:
  v10 = 0;
LABEL_100:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_102:
  if (SHIBYTE(v56) < 0)
    operator delete(__p[0]);
  if ((v62 & 7) != 0)
  {
    v46 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v47 = __ldxr(v46);
    while (__stlxr(v47 - 2, v46));
  }
  if ((v61 & 7) != 0)
  {
    v48 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v60);
  sub_20BFD265C(&v59);
  if (v58)
    sub_20C35C614(v58);
  return v10;
}

BOOL sub_20C6D9C5C(const void **a1)
{
  unsigned __int8 v2;
  uint64_t v4;
  const void *v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[3];
  _QWORD v22[3];
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  _QWORD v29[3];
  _QWORD v30[3];
  _QWORD v31[3];
  _QWORD v32[3];
  _QWORD v33[4];

  v33[3] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25473D2D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25473D2D0))
  {
    sub_20BDDC0E4(v5, "BOOL");
    sub_20BDDC0E4(v6, "uchar");
    sub_20BDDC0E4(v7, "int");
    sub_20BDDC0E4(v8, "uint");
    sub_20BDDC0E4(v9, "float");
    sub_20BDDC0E4(v10, "double");
    sub_20BDDC0E4(v11, "int2");
    sub_20BDDC0E4(v12, "int3");
    sub_20BDDC0E4(v13, "int4");
    sub_20BDDC0E4(v14, "float2");
    sub_20BDDC0E4(v15, "float3");
    sub_20BDDC0E4(v16, "float4");
    sub_20BDDC0E4(v17, "double2");
    sub_20BDDC0E4(v18, "double3");
    sub_20BDDC0E4(v19, "double4");
    sub_20BDDC0E4(v20, "point3f");
    sub_20BDDC0E4(v21, "point3d");
    sub_20BDDC0E4(v22, "normal3f");
    sub_20BDDC0E4(v23, "normal3d");
    sub_20BDDC0E4(v24, "vector3f");
    sub_20BDDC0E4(v25, "vector3d");
    sub_20BDDC0E4(v26, "color3f");
    sub_20BDDC0E4(v27, "color3d");
    sub_20BDDC0E4(v28, "color4f");
    sub_20BDDC0E4(v29, "color4d");
    sub_20BDDC0E4(v30, "texCoord2f");
    sub_20BDDC0E4(v31, "texCoord2d");
    sub_20BDDC0E4(v32, "texCoord3f");
    sub_20BDDC0E4(v33, "texCoord3d");
    sub_20C695E90((uint64_t)&unk_25473D2B8, v5, 29);
    v4 = 87;
    do
    {
      if (SHIBYTE(v5[v4 - 1]) < 0)
        operator delete((void *)v5[v4 - 3]);
      v4 -= 3;
    }
    while (v4 * 8);
    __cxa_atexit((void (*)(void *))sub_20C6DAEBC, &unk_25473D2B8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25473D2D0);
  }
  return sub_20BDEEBA4((uint64_t)&unk_25473D2B8, a1) != (_QWORD)&unk_25473D2C0;
}

void sub_20C6D9FD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 696;
  while (1)
  {
    if (*(char *)(v1 + v3 - 1) < 0)
      operator delete(*(void **)(v1 + v3 - 24));
    v3 -= 24;
    if (!v3)
    {
      __cxa_guard_abort(&qword_25473D2D0);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20C6DA048(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;
  __int128 *p_dst;
  uint64_t v13;
  uint64_t v17;
  int v18;
  uint64_t CPPTypeName;
  __int128 v21;
  uint64_t *v22;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v23;
  void **v24;
  int v26;
  int v27;
  uint64_t v29;
  int v31;
  uint64_t *v32;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string v39;
  std::string __p;
  void *v41[2];
  std::string::size_type v42;
  __int128 __dst;
  uint64_t v44;

  __p.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&__p, (unsigned int **)v41);
  if (((unint64_t)v41[0] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)(((unint64_t)v41[0] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    v6 = *(_OWORD *)EmptyString;
    v44 = EmptyString[2];
    __dst = v6;
  }
  if (((uint64_t)v41[0] & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v41[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (v44 < 0)
  {
    v13 = *((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1) == 10)
    {
      if (*(_QWORD *)__dst == 0x66336C616D726F6ELL && *(_WORD *)(__dst + 8) == 23899)
        goto LABEL_50;
      if (*(_QWORD *)__dst == 0x64336C616D726F6ELL && *(_WORD *)(__dst + 8) == 23899)
        goto LABEL_50;
      v13 = *((_QWORD *)&__dst + 1);
    }
    if (v13 != 9)
      goto LABEL_48;
    if (*(_QWORD *)__dst != 0x5B6633726F6C6F63 || *(_BYTE *)(__dst + 8) != 93)
    {
      if (*((_QWORD *)&__dst + 1) != 9)
        goto LABEL_48;
      p_dst = (__int128 *)__dst;
LABEL_44:
      v17 = *(_QWORD *)p_dst;
      v18 = *((unsigned __int8 *)p_dst + 8);
      if (v17 != 0x5B6433726F6C6F63 || v18 != 93)
      {
LABEL_48:
        v39.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
        __p.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v39);
        CPPTypeName = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetCPPTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&__p);
        if (*(char *)(CPPTypeName + 23) < 0)
        {
          sub_20BDDBFAC(v41, *(void **)CPPTypeName, *(_QWORD *)(CPPTypeName + 8));
        }
        else
        {
          v21 = *(_OWORD *)CPPTypeName;
          v42 = *(_QWORD *)(CPPTypeName + 16);
          *(_OWORD *)v41 = v21;
        }
        if ((v42 & 0x8000000000000000) != 0)
        {
          if (v41[1] == (void *)5 && *(_DWORD *)v41[0] == 1634692198 && *((_BYTE *)v41[0] + 4) == 116)
            goto LABEL_83;
          if (v41[1] == (void *)7)
          {
            v24 = (void **)v41[0];
LABEL_65:
            v26 = *(_DWORD *)v24;
            v27 = *(_DWORD *)((char *)v24 + 3);
            if (v26 == 1700161095 && v27 == 1714578277)
              goto LABEL_83;
          }
        }
        else
        {
          if (HIBYTE(v42) == 5)
          {
            if (LODWORD(v41[0]) == 1634692198 && BYTE4(v41[0]) == 116)
              goto LABEL_83;
            goto LABEL_77;
          }
          if (HIBYTE(v42) == 7)
          {
            v24 = v41;
            goto LABEL_65;
          }
        }
LABEL_77:
        if (!sub_20BEB90F0(v41, "GfVec3f")
          && !sub_20BEB90F0(v41, "GfVec4f")
          && !sub_20BEB90F0(v41, "double")
          && !sub_20BEB90F0(v41, "GfVec2d")
          && !sub_20BEB90F0(v41, "GfVec3d")
          && !sub_20BEB90F0(v41, "GfVec4d"))
        {
          if (*(_BYTE *)(a2 + 5))
          {
            v32 = sub_20C6E7B7C();
            v33 = sub_20C398E78(a1);
            if ((*(_QWORD *)v33 & 0xFFFFFFFFFFFFFFF8) != 0)
              goto LABEL_87;
            goto LABEL_86;
          }
          v29 = 0;
LABEL_92:
          if (SHIBYTE(v42) < 0)
            operator delete(v41[0]);
          goto LABEL_101;
        }
LABEL_83:
        v29 = 0;
        v31 = *(unsigned __int8 *)(a2 + 5);
        if (v31 != 1 && v31 != 4)
        {
          v32 = sub_20C6E7B7C();
          v33 = sub_20C398E78(a1);
          if ((*(_QWORD *)v33 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
LABEL_87:
            std::operator+<char>();
            v34 = std::string::append(&v39, ")");
            v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
            v34->__r_.__value_.__l.__size_ = 0;
            v34->__r_.__value_.__r.__words[2] = 0;
            v34->__r_.__value_.__r.__words[0] = 0;
            sub_20C6C3E64((os_log_t *)v32, (uint64_t *)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v39.__r_.__value_.__l.__data_);
            v29 = 113;
            goto LABEL_92;
          }
LABEL_86:
          pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v33);
          goto LABEL_87;
        }
        goto LABEL_92;
      }
    }
  }
  else
  {
    if (HIBYTE(v44) != 9)
    {
      if (HIBYTE(v44) != 10)
        goto LABEL_48;
      if (((_QWORD)__dst != 0x66336C616D726F6ELL || WORD4(__dst) != 23899)
        && ((_QWORD)__dst != 0x64336C616D726F6ELL || WORD4(__dst) != 23899))
      {
        goto LABEL_48;
      }
LABEL_50:
      if (*(unsigned __int8 *)(a2 + 5) - 1 >= 2)
      {
        v22 = sub_20C6E7B7C();
        v23 = sub_20C398E78(a1);
        if ((*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8) != 0)
          goto LABEL_96;
        goto LABEL_95;
      }
LABEL_72:
      v29 = 0;
      goto LABEL_101;
    }
    if ((_QWORD)__dst != 0x5B6633726F6C6F63 || BYTE8(__dst) != 93)
    {
      p_dst = &__dst;
      goto LABEL_44;
    }
  }
  if ((*(unsigned __int8 *)(a2 + 5) | 2) == 3)
    goto LABEL_72;
  v22 = sub_20C6E7B7C();
  v23 = sub_20C398E78(a1);
  if ((*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8) == 0)
LABEL_95:
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v23);
LABEL_96:
  std::operator+<char>();
  v36 = std::string::append(&__p, ")");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v42 = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)v41 = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  sub_20C6C3E64((os_log_t *)v22, (uint64_t *)v41);
  if (SHIBYTE(v42) < 0)
    operator delete(v41[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v29 = 113;
LABEL_101:
  if (SHIBYTE(v44) < 0)
    operator delete((void *)__dst);
  return v29;
}

void sub_20C6DA600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a15 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 41) < 0)
    operator delete(*(void **)(v28 - 64));
  _Unwind_Resume(exception_object);
}

unint64_t sub_20C6DA6A4(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  unsigned __int8 v2;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t TypeName;
  unint64_t v17;
  void *__p[2];
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  _QWORD v22[4];
  _QWORD v23[4];
  _QWORD v24[4];
  _QWORD v25[4];
  _QWORD v26[4];
  _QWORD v27[4];
  _QWORD v28[4];
  _QWORD v29[4];
  _QWORD v30[4];
  _QWORD v31[4];
  _QWORD v32[4];
  _QWORD v33[4];
  _QWORD v34[4];
  _QWORD v35[4];
  _QWORD v36[4];
  _QWORD v37[4];
  _QWORD v38[4];
  _QWORD v39[4];
  _QWORD v40[4];
  _QWORD v41[4];
  _QWORD v42[4];
  _QWORD v43[4];
  _QWORD v44[4];
  _QWORD v45[4];
  _QWORD v46[4];
  _QWORD v47[4];
  _QWORD v48[6];

  v48[5] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C078);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C078))
  {
    sub_20BDDC0E4(__p, "BOOL[]");
    v20 = 0;
    sub_20BDDC0E4(v21, "uchar[]");
    v21[3] = 0;
    sub_20BDDC0E4(v22, "int[]");
    v22[3] = 0;
    sub_20BDDC0E4(v23, "uint[]");
    v23[3] = 0;
    sub_20BDDC0E4(v24, "float[]");
    v24[3] = 0x1000000000ELL;
    sub_20BDDC0E4(v25, "double[]");
    v25[3] = 0x1000000000ELL;
    sub_20BDDC0E4(v26, "int2[]");
    v26[3] = 0x200000000;
    sub_20BDDC0E4(v27, "int3[]");
    v27[3] = 0x300000000;
    sub_20BDDC0E4(v28, "int4[]");
    v28[3] = 0x400000000;
    sub_20BDDC0E4(v29, "float2[]");
    v29[3] = 0x1020000000ELL;
    sub_20BDDC0E4(v30, "float3[]");
    v30[3] = 0x1030000000ELL;
    sub_20BDDC0E4(v31, "float4[]");
    v31[3] = 0x1040000000ELL;
    sub_20BDDC0E4(v32, "double2[]");
    v32[3] = 0x1020000000ELL;
    sub_20BDDC0E4(v33, "double3[]");
    v33[3] = 0x1030000000ELL;
    sub_20BDDC0E4(v34, "double4[]");
    v34[3] = 0x1040000000ELL;
    sub_20BDDC0E4(v35, "point3f[]");
    v35[3] = 0x1030000000ELL;
    sub_20BDDC0E4(v36, "point3d[]");
    v36[3] = 0x1030000000ELL;
    sub_20BDDC0E4(v37, "normal3f[]");
    v37[3] = 0x2030000000ALL;
    sub_20BDDC0E4(v38, "normal3d[]");
    v38[3] = 0x2030000000ALL;
    sub_20BDDC0E4(v39, "vector3f[]");
    v39[3] = 0x1030000000ELL;
    sub_20BDDC0E4(v40, "vector3d[]");
    v40[3] = 0x1030000000ELL;
    sub_20BDDC0E4(v41, "color3f[]");
    v41[3] = 0x30300000008;
    sub_20BDDC0E4(v42, "color3d[]");
    v42[3] = 0x30300000008;
    sub_20BDDC0E4(v43, "color4f[]");
    v43[3] = 0x1040000000ELL;
    sub_20BDDC0E4(v44, "color4d[]");
    v44[3] = 0x1040000000ELL;
    sub_20BDDC0E4(v45, "texCoord2f[]");
    v45[3] = 0x1020000000CLL;
    sub_20BDDC0E4(v46, "texCoord2d[]");
    v46[3] = 0x1020000000CLL;
    sub_20BDDC0E4(v47, "texCoord3f[]");
    v47[3] = 0x1030000000CLL;
    sub_20BDDC0E4(v48, "texCoord3d[]");
    v48[3] = 0x1030000000CLL;
    sub_20C6E354C((uint64_t)&unk_25498C060, (const void **)__p, 29);
    v15 = 116;
    do
    {
      if (*((char *)&TypeName + v15 * 8 + 7) < 0)
        operator delete(__p[v15 - 4]);
      v15 -= 4;
    }
    while (v15 * 8);
    __cxa_atexit((void (*)(void *))sub_20C6DACCC, &unk_25498C060, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C078);
  }
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
  AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&TypeName, (unsigned int **)&v17);
  if ((v17 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((v17 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_20BDDBFAC(__p, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    v5 = *(_OWORD *)EmptyString;
    v19 = EmptyString[2];
    *(_OWORD *)__p = v5;
  }
  if ((v17 & 7) != 0)
  {
    v6 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = sub_20BDEEBA4((uint64_t)&unk_25498C060, (const void **)__p);
  if ((_UNKNOWN *)v8 == &unk_25498C068)
  {
    v12 = 0;
    v10 = 0;
    v11 = 0x10000000000;
    v13 = 14;
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 56);
    v10 = v9 & 0xFFFF000000000000;
    v11 = v9 & 0xFF0000000000;
    v12 = v9 & 0xFF00000000;
    v13 = v9;
  }
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  return v12 | v13 | v11 | v10;
}

void sub_20C6DABB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v18;

  v18 = 928;
  while (1)
  {
    if (*(char *)(v16 + v18 - 9) < 0)
      operator delete(*(void **)(v16 + v18 - 32));
    v18 -= 32;
    if (!v18)
    {
      __cxa_guard_abort(&qword_25498C078);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20C6DACCC(uint64_t a1)
{
  sub_20BDECAB8(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_20C6DACF4(uint64_t a1)
{
  sub_20BDECAB8(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_20C6DAD1C(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      sub_20C6DAD98((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_20C6DAD80(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BDECAB8(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6DAD98(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)sub_20BDEC0F8(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_20C6DAE18((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

_BYTE *sub_20C6DAE18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v6 + 7) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C6DAEA0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BDEEB58(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6DAEBC(uint64_t a1)
{
  sub_20BDECAB8(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_20C6DAEE4(uint64_t *a1, unint64_t *a2, _BYTE *a3, int *a4)
{
  uint64_t result;
  uint64_t *v5;
  void *__p[2];
  char v7;

  switch(*a3)
  {
    case 0:
      result = sub_20C6DAFB4(a1, a2);
      break;
    case 1:
      result = sub_20C6C58CC(a1, a2, (uint64_t)a3, *a4);
      break;
    case 2:
      result = sub_20C6DB050(a1, a2, (uint64_t)a3, a4);
      break;
    case 3:
      result = sub_20C6DB200(a1, a2, (uint64_t)a3);
      break;
    case 4:
      result = sub_20C6DB69C(a1, a2, (uint64_t)a3, a4);
      break;
    default:
      v5 = sub_20C6E7B7C();
      sub_20BDDC0E4(__p, "Unknown quantization function");
      sub_20C6C3E64((os_log_t *)v5, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      result = 112;
      break;
  }
  return result;
}

uint64_t sub_20C6DAFB4(uint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  float v9;
  int v11;
  int *v12;

  v4 = (a1[1] - *a1) >> 2;
  v11 = 0;
  v12 = &v11;
  sub_20BF56258(a2, v4, &v12);
  v7 = *a1;
  if (a1[1] != *a1)
  {
    v8 = 0;
    do
    {
      v9 = (float)*(int *)(v7 + 4 * v8);
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
      *(float *)(a2[4] + 4 * v8++) = v9;
      v7 = *a1;
    }
    while (v8 < (a1[1] - *a1) >> 2);
  }
  return 0;
}

uint64_t sub_20C6DB050(_QWORD *a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  __int128 v27;

  v4 = a1[1] - *a1;
  if (v4)
    v5 = (v4 & 4) == 0;
  else
    v5 = 0;
  if (!v5)
    return 112;
  if (*(int *)(a3 + 32) < 3 || *a4 != 2)
    return 112;
  v12 = (unint64_t)v4 >> 2;
  DWORD1(v27) = 0;
  *((_QWORD *)&v27 + 1) = (char *)&v27 + 4;
  sub_20BF56258(a2, 3 * ((unint64_t)(v4 >> 2) >> 1), (_DWORD **)&v27 + 1);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = ~(-1 << (*(_DWORD *)(a3 + 32) - 1));
    do
    {
      DWORD2(v27) = 0;
      *(_QWORD *)&v27 = 0;
      sub_20C6E8170(*(unsigned int *)(*a1 + 4 * v14), *(_DWORD *)(*a1 + 4 * v14 + 4), (int *)&v27 + 2, (int *)&v27 + 1, (int *)&v27, v15);
      v18 = (float)SDWORD2(v27);
      v19 = (float)SDWORD1(v27);
      v20 = (float)(int)v27;
      if (*(_QWORD *)((char *)&v27 + 4) || (v21 = 1.0, (_DWORD)v27))
        v21 = 1.0 / sqrtf((float)((float)(v18 * v18) + (float)(v19 * v19)) + (float)(v20 * v20));
      v22 = v21 * v18;
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v16, v17);
      *(float *)(a2[4] + v13) = v22;
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v23, v24);
      *(float *)(a2[4] + v13 + 4) = v21 * v19;
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
      *(float *)(a2[4] + v13 + 8) = v21 * v20;
      v14 += 2;
      v13 += 12;
    }
    while ((int)v14 < (int)v12);
  }
  result = 0;
  ++*a4;
  return result;
}

uint64_t sub_20C6DB200(_QWORD *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  void *v9;
  float v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  BOOL v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type size;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  __int128 v52;
  std::string::size_type v53;

  v3 = a1[1] - *a1;
  v4 = v3 >> 2;
  if (v3 < 0xC || (int)(v3 >> 2) % 3 != 0)
  {
    v6 = sub_20C6E7B7C();
    std::to_string(&v51, v4);
    v7 = std::string::insert(&v51, 0, "dequantizeColorRGB: Incompatible data dimension: componentCount ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v53 = v7->__r_.__value_.__r.__words[2];
    v52 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&v52);
    if (SHIBYTE(v53) < 0)
      operator delete((void *)v52);
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 112;
    v9 = (void *)v51.__r_.__value_.__r.__words[0];
    goto LABEL_49;
  }
  v12 = *(float *)(a3 + 4);
  LODWORD(v51.__r_.__value_.__l.__data_) = 0;
  *(_QWORD *)&v52 = &v51;
  sub_20BF56258(a2, (int)((uint64_t)v3 >> 2), (_DWORD **)&v52);
  if ((int)v4 < 1)
    return 0;
  v15 = 0;
  while (1)
  {
    v16 = (int *)(*a1 + 4 * v15);
    v17 = v12 * (float)*v16;
    v18 = (float)(v12 * (float)v16[1]) + -0.5;
    v19 = (float)(v12 * (float)v16[2]) + -0.5;
    v20 = fminf(fmaxf(v17 + (float)(v19 * 1.5748), 0.0), 1.0);
    v21 = fminf(fmaxf((float)(v17 + (float)(v18 * -0.18733)) + (float)(v19 * -0.46813), 0.0), 1.0);
    v22 = fminf(fmaxf(v17 + (float)(v18 * 1.8556), 0.0), 1.0);
    v23 = v20 <= 1.0 && v21 <= 1.0;
    if (!v23 || v22 > 1.0)
      break;
    sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v13, v14);
    *(float *)(a2[4] + 4 * v15) = v20;
    sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
    *(float *)(a2[4] + 4 * v15 + 4) = v21;
    sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v27, v28);
    *(float *)(a2[4] + 4 * v15 + 8) = v22;
    v15 += 3;
    if ((int)v15 >= (int)v4)
      return 0;
  }
  v30 = sub_20C6E7B7C();
  std::to_string(&v47, v20);
  v31 = std::string::insert(&v47, 0, "dequantizeColorRGB: values out of bound r=");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v48, ", g=");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, v21);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v46;
  else
    v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  else
    size = v46.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v49, (const std::string::value_type *)v35, size);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(&v50, ", b=");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v45, v22);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = &v45;
  else
    v41 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  else
    v42 = v45.__r_.__value_.__l.__size_;
  v43 = std::string::append(&v51, (const std::string::value_type *)v41, v42);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v53 = v43->__r_.__value_.__r.__words[2];
  v52 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  sub_20C6C3E64((os_log_t *)v30, (uint64_t *)&v52);
  if (SHIBYTE(v53) < 0)
    operator delete((void *)v52);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_49:
    operator delete(v9);
  }
  return 112;
}

void sub_20C6DB5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a15 < 0)
    operator delete(__p);
  if (a54 < 0)
    operator delete(a49);
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6DB69C(_QWORD *a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  int v10;
  float v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  int v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v28;
  char *v29;
  void *__p[2];
  char v31;
  int v32;

  v4 = *a4;
  *a4 = v4 + 1;
  if ((int)v4 <= 0)
  {
    v28 = sub_20C6E7B7C();
    v29 = "Weight dequantization: componentsPerVector value too small";
LABEL_21:
    sub_20BDDC0E4(__p, v29);
    sub_20C6C3E64((os_log_t *)v28, (uint64_t *)__p);
    if (v31 < 0)
      operator delete(__p[0]);
    return 112;
  }
  v6 = (a1[1] - *a1) >> 2;
  if ((int)v6 % (int)v4)
    v7 = 0;
  else
    v7 = (int)v4 <= (int)v6;
  if (v7)
  {
    v10 = v6 / v4 * (v4 + 1);
    v11 = *(float *)(a3 + 4);
    v32 = 0;
    __p[0] = &v32;
    sub_20BF56258(a2, v10, (_DWORD **)__p);
    if (v10 < 1)
      return 0;
    LODWORD(v14) = 0;
    v15 = 0;
    while (1)
    {
      v14 = (int)v14;
      v16 = v4;
      v17 = 4 * v15;
      v18 = 0.0;
      do
      {
        v19 = *(_DWORD *)(*a1 + 4 * v14++);
        v20 = fminf(fmaxf(v11 * (float)v19, 0.0), 1.0);
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v12, v13);
        *(float *)(a2[4] + v17) = v20;
        v18 = v18 + v20;
        v17 += 4;
        --v16;
      }
      while (v16);
      v21 = fminf(fmaxf(1.0 - v18, 0.0), 1.0);
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v12, v13);
      *(float *)(a2[4] + 4 * (v15 + (int)v4)) = v21;
      v22 = v18 + v21;
      if (v22 <= 0.0)
        break;
      LODWORD(v23) = *a4;
      if (vabds_f32(1.0, v22) > 0.000001 && (int)v23 >= 1)
      {
        v25 = 0;
        do
        {
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v12, v13);
          v26 = a2[4] + 4 * v15;
          *(float *)(v26 + 4 * v25) = *(float *)(v26 + 4 * v25) / v22;
          ++v25;
          v23 = (int)*a4;
        }
        while (v25 < v23);
      }
      v15 += v23;
      if (v15 >= v10)
        return 0;
    }
    v28 = sub_20C6E7B7C();
    v29 = "Weight dequantization: negative weights sum";
    goto LABEL_21;
  }
  return 112;
}

uint64_t sub_20C6DB89C(uint64_t *a1, unint64_t *a2, _BYTE *a3, int *a4)
{
  uint64_t result;
  uint64_t *v5;
  void *__p[2];
  char v7;

  switch(*a3)
  {
    case 0:
      result = sub_20C6DB96C(a1, a2);
      break;
    case 1:
      result = sub_20C6DBA04(a1, a2, (uint64_t)a3, *a4);
      break;
    case 2:
      result = sub_20C6DBB14(a1, a2, (uint64_t)a3, a4);
      break;
    case 3:
      result = sub_20C6DBCC0(a1, a2, (uint64_t)a3);
      break;
    case 4:
      result = sub_20C6DC168(a1, a2, (uint64_t)a3, a4);
      break;
    default:
      v5 = sub_20C6E7B7C();
      sub_20BDDC0E4(__p, "Unknown quantization function");
      sub_20C6C3E64((os_log_t *)v5, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      result = 112;
      break;
  }
  return result;
}

uint64_t sub_20C6DB96C(uint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  uint64_t v11;
  uint64_t *v12;

  v4 = (a1[1] - *a1) >> 2;
  v11 = 0;
  v12 = &v11;
  sub_20BF57894(a2, v4, &v12);
  v7 = *a1;
  if (a1[1] != *a1)
  {
    v8 = 0;
    do
    {
      v9 = (double)*(int *)(v7 + 4 * v8);
      sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
      *(double *)(a2[4] + 8 * v8++) = v9;
      v7 = *a1;
    }
    while (v8 < (a1[1] - *a1) >> 2);
  }
  return 0;
}

uint64_t sub_20C6DBA04(_QWORD *a1, unint64_t *a2, uint64_t a3, int a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v10;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t *v23[15];

  if (a4 < 1)
    return 112;
  v23[1] = v7;
  v23[2] = v6;
  v23[13] = v4;
  v23[14] = v5;
  v10 = a1[1] - *a1;
  result = 112;
  if ((int)(v10 >> 2) >= a4 && !((int)(v10 >> 2) % a4))
  {
    v22 = 0;
    v23[0] = &v22;
    sub_20BF57894(a2, (v10 >> 2), v23);
    v16 = 0;
    v17 = *(float *)(a3 + 4);
    v18 = (int)((uint64_t)v10 >> 2);
    do
    {
      v19 = 0;
      v20 = v16;
      do
      {
        v21 = (float)((float)(v17 * (float)*(int *)(*a1 + 4 * v20)) + *(float *)(*(_QWORD *)(a3 + 8) + v19));
        sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v14, v15);
        *(double *)(a2[4] + 8 * v20++) = v21;
        v19 += 4;
      }
      while (4 * a4 != v19);
      v16 += a4;
    }
    while (v16 < v18);
    return 0;
  }
  return result;
}

uint64_t sub_20C6DBB14(_QWORD *a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;

  v4 = a1[1] - *a1;
  if (v4)
    v5 = (v4 & 4) == 0;
  else
    v5 = 0;
  if (!v5)
    return 112;
  if (*(int *)(a3 + 32) < 3 || *a4 != 2)
    return 112;
  v12 = (unint64_t)v4 >> 2;
  v28 = 0;
  v29 = &v28;
  sub_20BF57894(a2, 3 * ((unint64_t)(v4 >> 2) >> 1), &v29);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = ~(-1 << (*(_DWORD *)(a3 + 32) - 1));
    do
    {
      LODWORD(v29) = 0;
      v27 = 0;
      LODWORD(v28) = 0;
      sub_20C6E8170(*(unsigned int *)(*a1 + 4 * v14), *(_DWORD *)(*a1 + 4 * v14 + 4), (int *)&v29, (int *)&v28, &v27, v15);
      v18 = (double)(int)v29;
      v19 = (double)(int)v28;
      v20 = (double)v27;
      if ((_DWORD)v29 || (_DWORD)v28 || (v21 = 1.0, v27))
        v21 = 1.0 / sqrt(v18 * v18 + v19 * v19 + v20 * v20);
      v22 = v21 * v18;
      sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v16, v17);
      *(double *)(a2[4] + v13) = v22;
      sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v23, v24);
      *(double *)(a2[4] + v13 + 8) = v21 * v19;
      sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
      *(double *)(a2[4] + v13 + 16) = v21 * v20;
      v14 += 2;
      v13 += 24;
    }
    while ((int)v14 < (int)v12);
  }
  result = 0;
  ++*a4;
  return result;
}

uint64_t sub_20C6DBCC0(_QWORD *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  void *v9;
  float v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  BOOL v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type size;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  __int128 v52;
  std::string::size_type v53;

  v3 = a1[1] - *a1;
  v4 = v3 >> 2;
  if (v3 < 0xC || (int)(v3 >> 2) % 3 != 0)
  {
    v6 = sub_20C6E7B7C();
    std::to_string(&v51, v4);
    v7 = std::string::insert(&v51, 0, "dequantizeColorRGB: Incompatible data dimension: componentCount ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v53 = v7->__r_.__value_.__r.__words[2];
    v52 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&v52);
    if (SHIBYTE(v53) < 0)
      operator delete((void *)v52);
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 112;
    v9 = (void *)v51.__r_.__value_.__r.__words[0];
    goto LABEL_49;
  }
  v12 = *(float *)(a3 + 4);
  v51.__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)&v52 = &v51;
  sub_20BF57894(a2, (int)((uint64_t)v3 >> 2), (uint64_t **)&v52);
  if ((int)v4 < 1)
    return 0;
  v15 = 0;
  while (1)
  {
    v16 = (int *)(*a1 + 4 * v15);
    v17 = v12 * (float)*v16;
    v18 = (float)(v12 * (float)v16[1]) + -0.5;
    v19 = (float)(v12 * (float)v16[2]) + -0.5;
    v20 = fminf(fmaxf(v17 + (float)(v19 * 1.5748), 0.0), 1.0);
    v21 = fminf(fmaxf((float)(v17 + (float)(v18 * -0.18733)) + (float)(v19 * -0.46813), 0.0), 1.0);
    v22 = fminf(fmaxf(v17 + (float)(v18 * 1.8556), 0.0), 1.0);
    v23 = v20 <= 1.0 && v21 <= 1.0;
    if (!v23 || v22 > 1.0)
      break;
    sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v13, v14);
    *(double *)(a2[4] + 8 * v15) = v20;
    sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
    *(double *)(a2[4] + 8 * v15 + 8) = v21;
    sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v27, v28);
    *(double *)(a2[4] + 8 * v15 + 16) = v22;
    v15 += 3;
    if ((int)v15 >= (int)v4)
      return 0;
  }
  v30 = sub_20C6E7B7C();
  std::to_string(&v47, v20);
  v31 = std::string::insert(&v47, 0, "dequantizeColorRGB: values out of bound r=");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v48, ", g=");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, v21);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v46;
  else
    v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  else
    size = v46.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v49, (const std::string::value_type *)v35, size);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(&v50, ", b=");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v45, v22);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = &v45;
  else
    v41 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  else
    v42 = v45.__r_.__value_.__l.__size_;
  v43 = std::string::append(&v51, (const std::string::value_type *)v41, v42);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v53 = v43->__r_.__value_.__r.__words[2];
  v52 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  sub_20C6C3E64((os_log_t *)v30, (uint64_t *)&v52);
  if (SHIBYTE(v53) < 0)
    operator delete((void *)v52);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_49:
    operator delete(v9);
  }
  return 112;
}

void sub_20C6DC0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a15 < 0)
    operator delete(__p);
  if (a54 < 0)
    operator delete(a49);
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6DC168(_QWORD *a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  int v10;
  float v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  int v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v28;
  char *v29;
  void *__p[2];
  char v31;
  uint64_t v32;

  v4 = *a4;
  *a4 = v4 + 1;
  if ((int)v4 <= 0)
  {
    v28 = sub_20C6E7B7C();
    v29 = "Weight dequantization: componentsPerVector value too small";
LABEL_21:
    sub_20BDDC0E4(__p, v29);
    sub_20C6C3E64((os_log_t *)v28, (uint64_t *)__p);
    if (v31 < 0)
      operator delete(__p[0]);
    return 112;
  }
  v6 = (a1[1] - *a1) >> 2;
  if ((int)v6 % (int)v4)
    v7 = 0;
  else
    v7 = (int)v4 <= (int)v6;
  if (v7)
  {
    v10 = v6 / v4 * (v4 + 1);
    v11 = *(float *)(a3 + 4);
    v32 = 0;
    __p[0] = &v32;
    sub_20BF57894(a2, v10, (uint64_t **)__p);
    if (v10 < 1)
      return 0;
    LODWORD(v14) = 0;
    v15 = 0;
    while (1)
    {
      v14 = (int)v14;
      v16 = v4;
      v17 = 8 * v15;
      v18 = 0.0;
      do
      {
        v19 = *(_DWORD *)(*a1 + 4 * v14++);
        v20 = fmin(fmaxf(v11 * (float)v19, 0.0), 1.0);
        sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v12, v13);
        *(double *)(a2[4] + v17) = v20;
        v18 = v18 + v20;
        v17 += 8;
        --v16;
      }
      while (v16);
      v21 = fmin(fmax(1.0 - v18, 0.0), 1.0);
      sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v12, v13);
      *(double *)(a2[4] + 8 * (v15 + (int)v4)) = v21;
      v22 = v18 + v21;
      if (v22 <= 0.0)
        break;
      LODWORD(v23) = *a4;
      if (vabdd_f64(1.0, v22) > 0.000001 && (int)v23 >= 1)
      {
        v25 = 0;
        do
        {
          sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v12, v13);
          v26 = a2[4] + 8 * v15;
          *(double *)(v26 + 8 * v25) = *(double *)(v26 + 8 * v25) / v22;
          ++v25;
          v23 = (int)*a4;
        }
        while (v25 < v23);
      }
      v15 += v23;
      if (v15 >= v10)
        return 0;
    }
    v28 = sub_20C6E7B7C();
    v29 = "Weight dequantization: negative weights sum";
    goto LABEL_21;
  }
  return 112;
}

uint64_t sub_20C6DC378(uint64_t *a1, unint64_t *a2, _BYTE *a3, int *a4)
{
  uint64_t result;
  uint64_t *v5;
  char *v6;
  void *__p[2];
  char v8;

  switch(*a3)
  {
    case 0:
      result = sub_20C6DC44C(a1, a2);
      break;
    case 1:
      result = sub_20C6DC4DC(a1, a2, (uint64_t)a3, *a4);
      break;
    case 2:
      result = sub_20C6DC5F8(a1, a2, (uint64_t)a3, a4);
      break;
    case 3:
      result = sub_20C6DC7A8(a1, a2, (uint64_t)a3);
      break;
    case 4:
      v5 = sub_20C6E7B7C();
      v6 = "Weight dequantization: incompatible type int";
      goto LABEL_8;
    default:
      v5 = sub_20C6E7B7C();
      v6 = "Unknown quantization function";
LABEL_8:
      sub_20BDDC0E4(__p, v6);
      sub_20C6C3E64((os_log_t *)v5, (uint64_t *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
      result = 112;
      break;
  }
  return result;
}

uint64_t sub_20C6DC44C(uint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v11;
  int *v12;

  v4 = (a1[1] - *a1) >> 2;
  v11 = 0;
  v12 = &v11;
  sub_20BF64D74(a2, v4, &v12);
  v7 = *a1;
  if (a1[1] != *a1)
  {
    v8 = 0;
    do
    {
      v9 = *(_DWORD *)(v7 + 4 * v8);
      sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
      *(_DWORD *)(a2[4] + 4 * v8++) = v9;
      v7 = *a1;
    }
    while (v8 < (a1[1] - *a1) >> 2);
  }
  return 0;
}

uint64_t sub_20C6DC4DC(_QWORD *a1, unint64_t *a2, uint64_t a3, int a4)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v10;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  _DWORD *v24[15];

  if (a4 < 1)
    return 112;
  v24[1] = v7;
  v24[2] = v6;
  v24[13] = v4;
  v24[14] = v5;
  v10 = a1[1] - *a1;
  result = 112;
  if ((int)(v10 >> 2) >= a4 && !((int)(v10 >> 2) % a4))
  {
    v23 = 0;
    v24[0] = &v23;
    sub_20BF64D74(a2, (v10 >> 2), v24);
    v16 = 0;
    v17 = 0;
    v18 = *(float *)(a3 + 4);
    v19 = (int)((uint64_t)v10 >> 2);
    v20 = 4 * a4;
    do
    {
      v21 = 0;
      do
      {
        v22 = (int)(float)((float)(v18 * (float)*(int *)(*a1 + v16 + v21)) + *(float *)(*(_QWORD *)(a3 + 8) + v21));
        sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v14, v15);
        *(_DWORD *)(a2[4] + v16 + v21) = v22;
        v21 += 4;
      }
      while (v20 != v21);
      v17 += a4;
      v16 += v20;
    }
    while (v17 < v19);
    return 0;
  }
  return result;
}

uint64_t sub_20C6DC5F8(_QWORD *a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  double v20;
  int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;

  v4 = a1[1] - *a1;
  if (v4)
    v5 = (v4 & 4) == 0;
  else
    v5 = 0;
  if (!v5)
    return 112;
  if (*(int *)(a3 + 32) < 3 || *a4 != 2)
    return 112;
  v12 = (unint64_t)v4 >> 2;
  DWORD1(v26) = 0;
  *((_QWORD *)&v26 + 1) = (char *)&v26 + 4;
  sub_20BF64D74(a2, 3 * ((unint64_t)(v4 >> 2) >> 1), (_DWORD **)&v26 + 1);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = ~(-1 << (*(_DWORD *)(a3 + 32) - 1));
    do
    {
      DWORD2(v26) = 0;
      *(_QWORD *)&v26 = 0;
      sub_20C6E8170(*(unsigned int *)(*a1 + 4 * v14), *(_DWORD *)(*a1 + 4 * v14 + 4), (int *)&v26 + 2, (int *)&v26 + 1, (int *)&v26, v15);
      v18 = DWORD1(v26);
      v19 = v26;
      if (*(_QWORD *)((char *)&v26 + 4) || (v20 = 1.0, (_DWORD)v26))
        v20 = 1.0 / sqrt((double)(DWORD2(v26) * DWORD2(v26) + DWORD1(v26) * DWORD1(v26) + (int)v26 * (int)v26));
      v21 = (int)(v20 * (double)SDWORD2(v26));
      sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v16, v17);
      *(_DWORD *)(a2[4] + v13) = v21;
      sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v22, v23);
      *(_DWORD *)(a2[4] + v13 + 4) = (int)(v20 * (double)v18);
      sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v24, v25);
      *(_DWORD *)(a2[4] + v13 + 8) = (int)(v20 * (double)v19);
      v14 += 2;
      v13 += 12;
    }
    while ((int)v14 < (int)v12);
  }
  result = 0;
  ++*a4;
  return result;
}

uint64_t sub_20C6DC7A8(_QWORD *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  void *v9;
  float v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  BOOL v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type size;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  __int128 v52;
  std::string::size_type v53;

  v3 = a1[1] - *a1;
  v4 = v3 >> 2;
  if (v3 < 0xC || (int)(v3 >> 2) % 3 != 0)
  {
    v6 = sub_20C6E7B7C();
    std::to_string(&v51, v4);
    v7 = std::string::insert(&v51, 0, "dequantizeColorRGB: Incompatible data dimension: componentCount ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v53 = v7->__r_.__value_.__r.__words[2];
    v52 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&v52);
    if (SHIBYTE(v53) < 0)
      operator delete((void *)v52);
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 112;
    v9 = (void *)v51.__r_.__value_.__r.__words[0];
    goto LABEL_49;
  }
  v12 = *(float *)(a3 + 4);
  LODWORD(v51.__r_.__value_.__l.__data_) = 0;
  *(_QWORD *)&v52 = &v51;
  sub_20BF64D74(a2, (int)((uint64_t)v3 >> 2), (_DWORD **)&v52);
  if ((int)v4 < 1)
    return 0;
  v15 = 0;
  while (1)
  {
    v16 = (int *)(*a1 + 4 * v15);
    v17 = v12 * (float)*v16;
    v18 = (float)(v12 * (float)v16[1]) + -0.5;
    v19 = (float)(v12 * (float)v16[2]) + -0.5;
    v20 = fminf(fmaxf(v17 + (float)(v19 * 1.5748), 0.0), 1.0);
    v21 = fminf(fmaxf((float)(v17 + (float)(v18 * -0.18733)) + (float)(v19 * -0.46813), 0.0), 1.0);
    v22 = fminf(fmaxf(v17 + (float)(v18 * 1.8556), 0.0), 1.0);
    v23 = v20 <= 1.0 && v21 <= 1.0;
    if (!v23 || v22 > 1.0)
      break;
    sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v13, v14);
    *(_DWORD *)(a2[4] + 4 * v15) = (int)v20;
    sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
    *(_DWORD *)(a2[4] + 4 * v15 + 4) = (int)v21;
    sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v27, v28);
    *(_DWORD *)(a2[4] + 4 * v15 + 8) = (int)v22;
    v15 += 3;
    if ((int)v15 >= (int)v4)
      return 0;
  }
  v30 = sub_20C6E7B7C();
  std::to_string(&v47, v20);
  v31 = std::string::insert(&v47, 0, "dequantizeColorRGB: values out of bound r=");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v48, ", g=");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, v21);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v46;
  else
    v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  else
    size = v46.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v49, (const std::string::value_type *)v35, size);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(&v50, ", b=");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v45, v22);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = &v45;
  else
    v41 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  else
    v42 = v45.__r_.__value_.__l.__size_;
  v43 = std::string::append(&v51, (const std::string::value_type *)v41, v42);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v53 = v43->__r_.__value_.__r.__words[2];
  v52 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  sub_20C6C3E64((os_log_t *)v30, (uint64_t *)&v52);
  if (SHIBYTE(v53) < 0)
    operator delete((void *)v52);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_49:
    operator delete(v9);
  }
  return 112;
}

void sub_20C6DCB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a15 < 0)
    operator delete(__p);
  if (a54 < 0)
    operator delete(a49);
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6DCC58(uint64_t *a1, unint64_t *a2, _BYTE *a3, int *a4)
{
  uint64_t result;
  uint64_t *v5;
  char *v6;
  void *__p[2];
  char v8;

  switch(*a3)
  {
    case 0:
      result = sub_20C6DCD2C(a1, a2);
      break;
    case 1:
      result = sub_20C6DCDC4(a1, a2, (uint64_t)a3, *a4);
      break;
    case 2:
      result = sub_20C6DCEE4(a1, a2, (uint64_t)a3, a4);
      break;
    case 3:
      result = sub_20C6DD0C4(a1, a2, (uint64_t)a3);
      break;
    case 4:
      v5 = sub_20C6E7B7C();
      v6 = "Weight dequantization: incompatible type BOOL";
      goto LABEL_8;
    default:
      v5 = sub_20C6E7B7C();
      v6 = "Unknown quantization function";
LABEL_8:
      sub_20BDDC0E4(__p, v6);
      sub_20C6C3E64((os_log_t *)v5, (uint64_t *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
      result = 112;
      break;
  }
  return result;
}

uint64_t sub_20C6DCD2C(uint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  char v11;
  char *v12;

  v4 = (a1[1] - *a1) >> 2;
  v11 = 0;
  v12 = &v11;
  sub_20C001780(a2, v4, &v12);
  v7 = *a1;
  if (a1[1] != *a1)
  {
    v8 = 0;
    do
    {
      v9 = *(_DWORD *)(v7 + 4 * v8) != 0;
      sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
      *(_BYTE *)(a2[4] + v8++) = v9;
      v7 = *a1;
    }
    while (v8 < (a1[1] - *a1) >> 2);
  }
  return 0;
}

uint64_t sub_20C6DCDC4(_QWORD *a1, unint64_t *a2, uint64_t a3, int a4)
{
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  unint64_t v10;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  _BYTE *v23[15];

  if (a4 < 1)
    return 112;
  v23[1] = v7;
  v23[2] = v6;
  v23[13] = v4;
  v23[14] = v5;
  v10 = a1[1] - *a1;
  result = 112;
  if ((int)(v10 >> 2) >= a4 && !((int)(v10 >> 2) % a4))
  {
    v22 = 0;
    v23[0] = &v22;
    sub_20C001780(a2, (v10 >> 2), v23);
    v16 = 0;
    v17 = 0;
    v18 = *(float *)(a3 + 4);
    v19 = (int)((uint64_t)v10 >> 2);
    do
    {
      v20 = 0;
      do
      {
        v21 = (float)((float)(v18 * (float)*(int *)(*a1 + v16 + 4 * v20)) + *(float *)(*(_QWORD *)(a3 + 8) + 4 * v20)) != 0.0;
        sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v14, v15);
        *(_BYTE *)(a2[4] + v17 + v20++) = v21;
      }
      while (a4 != v20);
      v17 += a4;
      v16 += 4 * a4;
    }
    while (v17 < v19);
    return 0;
  }
  return result;
}

uint64_t sub_20C6DCEE4(_QWORD *a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  double v20;
  int v21;
  double v22;
  BOOL v23;
  uint64_t v24;
  char *v25;
  double v26;
  BOOL v27;
  uint64_t v28;
  char *v29;
  double v30;
  BOOL v31;
  __int128 v32;

  v4 = a1[1] - *a1;
  if (v4)
    v5 = (v4 & 4) == 0;
  else
    v5 = 0;
  if (!v5)
    return 112;
  if (*(int *)(a3 + 32) < 3 || *a4 != 2)
    return 112;
  v12 = (unint64_t)v4 >> 2;
  BYTE4(v32) = 0;
  *((_QWORD *)&v32 + 1) = (char *)&v32 + 4;
  sub_20C001780(a2, 3 * ((unint64_t)(v4 >> 2) >> 1), (_BYTE **)&v32 + 1);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = ~(-1 << (*(_DWORD *)(a3 + 32) - 1));
    do
    {
      DWORD2(v32) = 0;
      *(_QWORD *)&v32 = 0;
      sub_20C6E8170(*(unsigned int *)(*a1 + 4 * v13), *(_DWORD *)(*a1 + 4 * v13 + 4), (int *)&v32 + 2, (int *)&v32 + 1, (int *)&v32, v15);
      v18 = DWORD1(v32);
      v19 = v32;
      if (*(_QWORD *)((char *)&v32 + 4) || (v20 = 1.0, (_DWORD)v32))
      {
        v21 = DWORD2(v32) != 0;
        if (DWORD1(v32))
          ++v21;
        if ((_DWORD)v32)
          ++v21;
        v20 = 1.0 / sqrt((double)v21);
      }
      if (DWORD2(v32))
        v22 = 1.0;
      else
        v22 = 0.0;
      v23 = v20 * v22 != 0.0;
      sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v16, v17);
      *(_BYTE *)(a2[4] + v14) = v23;
      if (v18)
        v26 = 1.0;
      else
        v26 = 0.0;
      v27 = v20 * v26 != 0.0;
      sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v24, v25);
      *(_BYTE *)(a2[4] + v14 + 1) = v27;
      if (v19)
        v30 = 1.0;
      else
        v30 = 0.0;
      v31 = v20 * v30 != 0.0;
      sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v28, v29);
      *(_BYTE *)(a2[4] + v14 + 2) = v31;
      v13 += 2;
      v14 += 3;
    }
    while ((int)v13 < (int)v12);
  }
  result = 0;
  ++*a4;
  return result;
}

uint64_t sub_20C6DD0C4(_QWORD *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  void *v9;
  float v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  BOOL v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type size;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  __int128 v52;
  std::string::size_type v53;

  v3 = a1[1] - *a1;
  v4 = v3 >> 2;
  if (v3 < 0xC || (int)(v3 >> 2) % 3 != 0)
  {
    v6 = sub_20C6E7B7C();
    std::to_string(&v51, v4);
    v7 = std::string::insert(&v51, 0, "dequantizeColorRGB: Incompatible data dimension: componentCount ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v53 = v7->__r_.__value_.__r.__words[2];
    v52 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&v52);
    if (SHIBYTE(v53) < 0)
      operator delete((void *)v52);
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 112;
    v9 = (void *)v51.__r_.__value_.__r.__words[0];
    goto LABEL_49;
  }
  v12 = *(float *)(a3 + 4);
  v51.__r_.__value_.__s.__data_[0] = 0;
  *(_QWORD *)&v52 = &v51;
  sub_20C001780(a2, (int)((uint64_t)v3 >> 2), (_BYTE **)&v52);
  if ((int)v4 < 1)
    return 0;
  v15 = 0;
  while (1)
  {
    v16 = (int *)(*a1 + 4 * v15);
    v17 = v12 * (float)*v16;
    v18 = (float)(v12 * (float)v16[1]) + -0.5;
    v19 = (float)(v12 * (float)v16[2]) + -0.5;
    v20 = fminf(fmaxf(v17 + (float)(v19 * 1.5748), 0.0), 1.0);
    v21 = fminf(fmaxf((float)(v17 + (float)(v18 * -0.18733)) + (float)(v19 * -0.46813), 0.0), 1.0);
    v22 = fminf(fmaxf(v17 + (float)(v18 * 1.8556), 0.0), 1.0);
    v23 = v20 <= 1.0 && v21 <= 1.0;
    if (!v23 || v22 > 1.0)
      break;
    sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v13, v14);
    *(_BYTE *)(a2[4] + v15) = v20 != 0.0;
    sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
    *(_BYTE *)(a2[4] + v15 + 1) = v21 != 0.0;
    sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v27, v28);
    *(_BYTE *)(a2[4] + v15 + 2) = v22 != 0.0;
    v15 += 3;
    if ((int)v15 >= (int)v4)
      return 0;
  }
  v30 = sub_20C6E7B7C();
  std::to_string(&v47, v20);
  v31 = std::string::insert(&v47, 0, "dequantizeColorRGB: values out of bound r=");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v48, ", g=");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, v21);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v46;
  else
    v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  else
    size = v46.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v49, (const std::string::value_type *)v35, size);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(&v50, ", b=");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v45, v22);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = &v45;
  else
    v41 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  else
    v42 = v45.__r_.__value_.__l.__size_;
  v43 = std::string::append(&v51, (const std::string::value_type *)v41, v42);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v53 = v43->__r_.__value_.__r.__words[2];
  v52 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  sub_20C6C3E64((os_log_t *)v30, (uint64_t *)&v52);
  if (SHIBYTE(v53) < 0)
    operator delete((void *)v52);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_49:
    operator delete(v9);
  }
  return 112;
}

void sub_20C6DD4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a15 < 0)
    operator delete(__p);
  if (a54 < 0)
    operator delete(a49);
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6DD580(uint64_t *a1, unint64_t *a2, _BYTE *a3, int *a4)
{
  uint64_t result;
  uint64_t *v5;
  char *v6;
  void *__p[2];
  char v8;

  switch(*a3)
  {
    case 0:
      result = sub_20C6DD654(a1, a2);
      break;
    case 1:
      result = sub_20C6DD6E4(a1, a2, (uint64_t)a3, *a4);
      break;
    case 2:
      result = sub_20C6DD800(a1, a2, (uint64_t)a3, a4);
      break;
    case 3:
      result = sub_20C6DD9C8(a1, a2, (uint64_t)a3);
      break;
    case 4:
      v5 = sub_20C6E7B7C();
      v6 = "Weight dequantization: incompatible type uint8_t";
      goto LABEL_8;
    default:
      v5 = sub_20C6E7B7C();
      v6 = "Unknown quantization function";
LABEL_8:
      sub_20BDDC0E4(__p, v6);
      sub_20C6C3E64((os_log_t *)v5, (uint64_t *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
      result = 112;
      break;
  }
  return result;
}

uint64_t sub_20C6DD654(uint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  char v11;
  char *v12;

  v4 = (a1[1] - *a1) >> 2;
  v11 = 0;
  v12 = &v11;
  sub_20BF65720(a2, v4, &v12);
  v7 = *a1;
  if (a1[1] != *a1)
  {
    v8 = 0;
    do
    {
      v9 = *(_DWORD *)(v7 + 4 * v8);
      sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
      *(_BYTE *)(a2[4] + v8++) = v9;
      v7 = *a1;
    }
    while (v8 < (a1[1] - *a1) >> 2);
  }
  return 0;
}

uint64_t sub_20C6DD6E4(_QWORD *a1, unint64_t *a2, uint64_t a3, int a4)
{
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  unint64_t v10;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  _BYTE *v23[15];

  if (a4 < 1)
    return 112;
  v23[1] = v7;
  v23[2] = v6;
  v23[13] = v4;
  v23[14] = v5;
  v10 = a1[1] - *a1;
  result = 112;
  if ((int)(v10 >> 2) >= a4 && !((int)(v10 >> 2) % a4))
  {
    v22 = 0;
    v23[0] = &v22;
    sub_20BF65720(a2, (v10 >> 2), v23);
    v16 = 0;
    v17 = 0;
    v18 = *(float *)(a3 + 4);
    v19 = (int)((uint64_t)v10 >> 2);
    do
    {
      v20 = 0;
      do
      {
        v21 = (int)(float)((float)(v18 * (float)*(int *)(*a1 + v16 + 4 * v20))
                         + *(float *)(*(_QWORD *)(a3 + 8) + 4 * v20));
        sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v14, v15);
        *(_BYTE *)(a2[4] + v17 + v20++) = v21;
      }
      while (a4 != v20);
      v17 += a4;
      v16 += 4 * a4;
    }
    while (v17 < v19);
    return 0;
  }
  return result;
}

uint64_t sub_20C6DD800(_QWORD *a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  double v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  __int128 v27;

  v4 = a1[1] - *a1;
  if (v4)
    v5 = (v4 & 4) == 0;
  else
    v5 = 0;
  if (!v5)
    return 112;
  if (*(int *)(a3 + 32) < 3 || *a4 != 2)
    return 112;
  v12 = (unint64_t)v4 >> 2;
  BYTE4(v27) = 0;
  *((_QWORD *)&v27 + 1) = (char *)&v27 + 4;
  sub_20BF65720(a2, 3 * ((unint64_t)(v4 >> 2) >> 1), (_BYTE **)&v27 + 1);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = ~(-1 << (*(_DWORD *)(a3 + 32) - 1));
    do
    {
      DWORD2(v27) = 0;
      *(_QWORD *)&v27 = 0;
      sub_20C6E8170(*(unsigned int *)(*a1 + 4 * v13), *(_DWORD *)(*a1 + 4 * v13 + 4), (int *)&v27 + 2, (int *)&v27 + 1, (int *)&v27, v15);
      if (*(_QWORD *)((char *)&v27 + 4) || (v18 = 0, v19 = 0, v20 = 0, v21 = 1.0, (_DWORD)v27))
      {
        v20 = BYTE8(v27);
        v19 = BYTE4(v27);
        v18 = v27;
        v21 = 1.0 / sqrt((double)(v20 * v20 + v19 * v19 + v18 * v18));
      }
      v22 = (int)(v21 * (double)v20);
      sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v16, v17);
      *(_BYTE *)(a2[4] + v14) = v22;
      sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v23, v24);
      *(_BYTE *)(a2[4] + v14 + 1) = (int)(v21 * (double)v19);
      sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
      *(_BYTE *)(a2[4] + v14 + 2) = (int)(v21 * (double)v18);
      v13 += 2;
      v14 += 3;
    }
    while ((int)v13 < (int)v12);
  }
  result = 0;
  ++*a4;
  return result;
}

uint64_t sub_20C6DD9C8(_QWORD *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  void *v9;
  float v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  BOOL v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type size;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  __int128 v52;
  std::string::size_type v53;

  v3 = a1[1] - *a1;
  v4 = v3 >> 2;
  if (v3 < 0xC || (int)(v3 >> 2) % 3 != 0)
  {
    v6 = sub_20C6E7B7C();
    std::to_string(&v51, v4);
    v7 = std::string::insert(&v51, 0, "dequantizeColorRGB: Incompatible data dimension: componentCount ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v53 = v7->__r_.__value_.__r.__words[2];
    v52 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&v52);
    if (SHIBYTE(v53) < 0)
      operator delete((void *)v52);
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 112;
    v9 = (void *)v51.__r_.__value_.__r.__words[0];
    goto LABEL_49;
  }
  v12 = *(float *)(a3 + 4);
  v51.__r_.__value_.__s.__data_[0] = 0;
  *(_QWORD *)&v52 = &v51;
  sub_20BF65720(a2, (int)((uint64_t)v3 >> 2), (_BYTE **)&v52);
  if ((int)v4 < 1)
    return 0;
  v15 = 0;
  while (1)
  {
    v16 = (int *)(*a1 + 4 * v15);
    v17 = v12 * (float)*v16;
    v18 = (float)(v12 * (float)v16[1]) + -0.5;
    v19 = (float)(v12 * (float)v16[2]) + -0.5;
    v20 = fminf(fmaxf(v17 + (float)(v19 * 1.5748), 0.0), 1.0);
    v21 = fminf(fmaxf((float)(v17 + (float)(v18 * -0.18733)) + (float)(v19 * -0.46813), 0.0), 1.0);
    v22 = fminf(fmaxf(v17 + (float)(v18 * 1.8556), 0.0), 1.0);
    v23 = v20 <= 1.0 && v21 <= 1.0;
    if (!v23 || v22 > 1.0)
      break;
    sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v13, v14);
    *(_BYTE *)(a2[4] + v15) = (int)v20;
    sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
    *(_BYTE *)(a2[4] + v15 + 1) = (int)v21;
    sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v27, v28);
    *(_BYTE *)(a2[4] + v15 + 2) = (int)v22;
    v15 += 3;
    if ((int)v15 >= (int)v4)
      return 0;
  }
  v30 = sub_20C6E7B7C();
  std::to_string(&v47, v20);
  v31 = std::string::insert(&v47, 0, "dequantizeColorRGB: values out of bound r=");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v48, ", g=");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, v21);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v46;
  else
    v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  else
    size = v46.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v49, (const std::string::value_type *)v35, size);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(&v50, ", b=");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v45, v22);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = &v45;
  else
    v41 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  else
    v42 = v45.__r_.__value_.__l.__size_;
  v43 = std::string::append(&v51, (const std::string::value_type *)v41, v42);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v53 = v43->__r_.__value_.__r.__words[2];
  v52 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  sub_20C6C3E64((os_log_t *)v30, (uint64_t *)&v52);
  if (SHIBYTE(v53) < 0)
    operator delete((void *)v52);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_49:
    operator delete(v9);
  }
  return 112;
}

void sub_20C6DDDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a15 < 0)
    operator delete(__p);
  if (a54 < 0)
    operator delete(a49);
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6DDE78(uint64_t *a1, unint64_t *a2, _BYTE *a3, int *a4)
{
  uint64_t result;
  uint64_t *v5;
  char *v6;
  void *__p[2];
  char v8;

  switch(*a3)
  {
    case 0:
      result = sub_20C6DDF4C(a1, a2);
      break;
    case 1:
      result = sub_20C6DDFDC(a1, a2, (uint64_t)a3, *a4);
      break;
    case 2:
      result = sub_20C6DE0F8(a1, a2, (uint64_t)a3, a4);
      break;
    case 3:
      result = sub_20C6DE2A8(a1, a2, (uint64_t)a3);
      break;
    case 4:
      v5 = sub_20C6E7B7C();
      v6 = "Weight dequantization: incompatible type unsigned int";
      goto LABEL_8;
    default:
      v5 = sub_20C6E7B7C();
      v6 = "Unknown quantization function";
LABEL_8:
      sub_20BDDC0E4(__p, v6);
      sub_20C6C3E64((os_log_t *)v5, (uint64_t *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
      result = 112;
      break;
  }
  return result;
}

uint64_t sub_20C6DDF4C(uint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v11;
  int *v12;

  v4 = (a1[1] - *a1) >> 2;
  v11 = 0;
  v12 = &v11;
  sub_20BF64220(a2, v4, &v12);
  v7 = *a1;
  if (a1[1] != *a1)
  {
    v8 = 0;
    do
    {
      v9 = *(_DWORD *)(v7 + 4 * v8);
      sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
      *(_DWORD *)(a2[4] + 4 * v8++) = v9;
      v7 = *a1;
    }
    while (v8 < (a1[1] - *a1) >> 2);
  }
  return 0;
}

uint64_t sub_20C6DDFDC(_QWORD *a1, unint64_t *a2, uint64_t a3, int a4)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v10;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  _DWORD *v24[15];

  if (a4 < 1)
    return 112;
  v24[1] = v7;
  v24[2] = v6;
  v24[13] = v4;
  v24[14] = v5;
  v10 = a1[1] - *a1;
  result = 112;
  if ((int)(v10 >> 2) >= a4 && !((int)(v10 >> 2) % a4))
  {
    v23 = 0;
    v24[0] = &v23;
    sub_20BF64220(a2, (v10 >> 2), v24);
    v16 = 0;
    v17 = 0;
    v18 = *(float *)(a3 + 4);
    v19 = (int)((uint64_t)v10 >> 2);
    v20 = 4 * a4;
    do
    {
      v21 = 0;
      do
      {
        v22 = (float)((float)(v18 * (float)*(int *)(*a1 + v16 + v21))
                                  + *(float *)(*(_QWORD *)(a3 + 8) + v21));
        sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v14, v15);
        *(_DWORD *)(a2[4] + v16 + v21) = v22;
        v21 += 4;
      }
      while (v20 != v21);
      v17 += a4;
      v16 += v20;
    }
    while (v17 < v19);
    return 0;
  }
  return result;
}

uint64_t sub_20C6DE0F8(_QWORD *a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  double v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;

  v4 = a1[1] - *a1;
  if (v4)
    v5 = (v4 & 4) == 0;
  else
    v5 = 0;
  if (!v5)
    return 112;
  if (*(int *)(a3 + 32) < 3 || *a4 != 2)
    return 112;
  v12 = (unint64_t)v4 >> 2;
  DWORD1(v26) = 0;
  *((_QWORD *)&v26 + 1) = (char *)&v26 + 4;
  sub_20BF64220(a2, 3 * ((unint64_t)(v4 >> 2) >> 1), (_DWORD **)&v26 + 1);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = ~(-1 << (*(_DWORD *)(a3 + 32) - 1));
    do
    {
      DWORD2(v26) = 0;
      *(_QWORD *)&v26 = 0;
      sub_20C6E8170(*(unsigned int *)(*a1 + 4 * v14), *(_DWORD *)(*a1 + 4 * v14 + 4), (int *)&v26 + 2, (int *)&v26 + 1, (int *)&v26, v15);
      v18 = DWORD1(v26);
      v19 = v26;
      if (*(_QWORD *)((char *)&v26 + 4) || (v20 = 1.0, (_DWORD)v26))
        v20 = 1.0 / sqrt((double)(DWORD2(v26) * DWORD2(v26) + DWORD1(v26) * DWORD1(v26) + v26 * v26));
      v21 = (v20 * (double)DWORD2(v26));
      sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v16, v17);
      *(_DWORD *)(a2[4] + v13) = v21;
      sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v22, v23);
      *(_DWORD *)(a2[4] + v13 + 4) = (v20 * (double)v18);
      sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v24, v25);
      *(_DWORD *)(a2[4] + v13 + 8) = (v20 * (double)v19);
      v14 += 2;
      v13 += 12;
    }
    while ((int)v14 < (int)v12);
  }
  result = 0;
  ++*a4;
  return result;
}

uint64_t sub_20C6DE2A8(_QWORD *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  void *v9;
  float v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  BOOL v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type size;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  __int128 v52;
  std::string::size_type v53;

  v3 = a1[1] - *a1;
  v4 = v3 >> 2;
  if (v3 < 0xC || (int)(v3 >> 2) % 3 != 0)
  {
    v6 = sub_20C6E7B7C();
    std::to_string(&v51, v4);
    v7 = std::string::insert(&v51, 0, "dequantizeColorRGB: Incompatible data dimension: componentCount ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v53 = v7->__r_.__value_.__r.__words[2];
    v52 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&v52);
    if (SHIBYTE(v53) < 0)
      operator delete((void *)v52);
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 112;
    v9 = (void *)v51.__r_.__value_.__r.__words[0];
    goto LABEL_49;
  }
  v12 = *(float *)(a3 + 4);
  LODWORD(v51.__r_.__value_.__l.__data_) = 0;
  *(_QWORD *)&v52 = &v51;
  sub_20BF64220(a2, (int)((uint64_t)v3 >> 2), (_DWORD **)&v52);
  if ((int)v4 < 1)
    return 0;
  v15 = 0;
  while (1)
  {
    v16 = (int *)(*a1 + 4 * v15);
    v17 = v12 * (float)*v16;
    v18 = (float)(v12 * (float)v16[1]) + -0.5;
    v19 = (float)(v12 * (float)v16[2]) + -0.5;
    v20 = fminf(fmaxf(v17 + (float)(v19 * 1.5748), 0.0), 1.0);
    v21 = fminf(fmaxf((float)(v17 + (float)(v18 * -0.18733)) + (float)(v19 * -0.46813), 0.0), 1.0);
    v22 = fminf(fmaxf(v17 + (float)(v18 * 1.8556), 0.0), 1.0);
    v23 = v20 <= 1.0 && v21 <= 1.0;
    if (!v23 || v22 > 1.0)
      break;
    sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v13, v14);
    *(_DWORD *)(a2[4] + 4 * v15) = v20;
    sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
    *(_DWORD *)(a2[4] + 4 * v15 + 4) = v21;
    sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v27, v28);
    *(_DWORD *)(a2[4] + 4 * v15 + 8) = v22;
    v15 += 3;
    if ((int)v15 >= (int)v4)
      return 0;
  }
  v30 = sub_20C6E7B7C();
  std::to_string(&v47, v20);
  v31 = std::string::insert(&v47, 0, "dequantizeColorRGB: values out of bound r=");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v48, ", g=");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, v21);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v46;
  else
    v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  else
    size = v46.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v49, (const std::string::value_type *)v35, size);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(&v50, ", b=");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v45, v22);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = &v45;
  else
    v41 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  else
    v42 = v45.__r_.__value_.__l.__size_;
  v43 = std::string::append(&v51, (const std::string::value_type *)v41, v42);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v53 = v43->__r_.__value_.__r.__words[2];
  v52 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  sub_20C6C3E64((os_log_t *)v30, (uint64_t *)&v52);
  if (SHIBYTE(v53) < 0)
    operator delete((void *)v52);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_49:
    operator delete(v9);
  }
  return 112;
}

void sub_20C6DE698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a15 < 0)
    operator delete(__p);
  if (a54 < 0)
    operator delete(a49);
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_20C6DE758(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  int v17;
  _QWORD v18[4];
  char v19;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_OWORD *)(v5 + 16 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(__int128 **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_20C013AE8(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 16 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 16;
      }
      while (v14);
    }
    *(_OWORD *)&v12[2 * v4] = *a2;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4i, Args = <const pxrInternal__aapl__pxrReserved__::GfVec4i &>]";
  v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v17 = 4;
    else
      v17 = 3;
  }
  else
  {
    v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

void sub_20C6DE8BC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  _QWORD v18[4];
  char v19;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_QWORD *)(v5 + 8 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(uint64_t **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_20BF588C8(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 8 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 8;
      }
      while (v14);
    }
    v12[v4] = *a2;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2f, Args = <const pxrInternal__aapl__pxrReserved__::GfVec2f &>]";
  v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v17 = 4;
    else
      v17 = 3;
  }
  else
  {
    v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

void sub_20C6DEA20(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  int v17;
  _QWORD v18[4];
  char v19;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_OWORD *)(v5 + 16 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(__int128 **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_20BF5D558(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 16 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 16;
      }
      while (v14);
    }
    *(_OWORD *)&v12[2 * v4] = *a2;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4f, Args = <const pxrInternal__aapl__pxrReserved__::GfVec4f &>]";
  v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v17 = 4;
    else
      v17 = 3;
  }
  else
  {
    v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

void sub_20C6DEB84(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  int v21;
  _QWORD v22[4];
  char v23;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      v9 = *a2;
      v10 = v5 + 24 * v4;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v10 = v9;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v11 = *(__int128 **)(a1 + 32);
    v12 = 1;
    do
    {
      v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    v14 = sub_20BF5C690(a1, v13);
    v15 = v14;
    if (v4)
    {
      v16 = 24 * v4;
      v17 = v14;
      do
      {
        v18 = *v11;
        v17[2] = *((_QWORD *)v11 + 2);
        *(_OWORD *)v17 = v18;
        v17 += 3;
        v11 = (__int128 *)((char *)v11 + 24);
        v16 -= 24;
      }
      while (v16);
    }
    v19 = *a2;
    v20 = &v14[3 * v4];
    v20[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v20 = v19;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  v22[0] = "vt/array.h";
  v22[1] = "emplace_back";
  v22[2] = 433;
  v22[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec3d, Args = <const pxrInternal__aapl__pxrReserved__::GfVec3d &>]";
  v23 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v21 = 4;
    else
      v21 = 3;
  }
  else
  {
    v21 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v21);
}

void sub_20C6DED18(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  _OWORD *v10;
  __int128 *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  int v22;
  _QWORD v23[4];
  char v24;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      v9 = a2[1];
      v10 = (_OWORD *)(v5 + 32 * v4);
      *v10 = *a2;
      v10[1] = v9;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v11 = *(__int128 **)(a1 + 32);
    v12 = 1;
    do
    {
      v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    v14 = sub_20BF5EC08(a1, v13);
    v15 = v14;
    if (v4)
    {
      v16 = 32 * v4;
      v17 = v14;
      do
      {
        v18 = *v11;
        v19 = v11[1];
        v11 += 2;
        *v17 = v18;
        v17[1] = v19;
        v17 += 2;
        v16 -= 32;
      }
      while (v16);
    }
    v20 = a2[1];
    v21 = &v14[4 * v4];
    *v21 = *a2;
    v21[1] = v20;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  v23[0] = "vt/array.h";
  v23[1] = "emplace_back";
  v23[2] = 433;
  v23[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4d, Args = <const pxrInternal__aapl__pxrReserved__::GfVec4d &>]";
  v24 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v22 = 4;
    else
      v22 = 3;
  }
  else
  {
    v22 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v22);
}

BOOL sub_20C6DEE84(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  __int16 v12;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD *)v8;
  v11[1] = a3;
  v11[2] = MEMORY[0x24BEDB798];
  v12 = 0;
  v11[0] = off_24C5420E8;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

uint64_t sub_20C6DEF14(unint64_t *a1, uint64_t *a2, _BYTE *a3, int *a4, char a5)
{
  uint64_t result;

  switch(*a3)
  {
    case 0:
      result = sub_20C6DEF64(a1, a2);
      break;
    case 1:
      result = sub_20C6CC7E4((unsigned int *)a1, a2, (uint64_t)a3, *a4, a5);
      break;
    case 2:
      result = sub_20C6DEFB8(a1, a2, a4, a5);
      break;
    case 3:
      result = sub_20C6DF0AC((uint64_t *)a1, a2, (uint64_t)a3, a5);
      break;
    case 4:
      result = sub_20C6DF688((uint64_t)a1, a2, (uint64_t)a3, a4, a5);
      break;
    default:
      result = 112;
      break;
  }
  return result;
}

uint64_t sub_20C6DEF64(unint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  float *v5;
  _DWORD *v6;
  float v7;

  sub_20BE81ACC((uint64_t)a2, *a1);
  v4 = *a1;
  if (*a1)
  {
    v5 = (float *)a1[4];
    v6 = (_DWORD *)*a2;
    do
    {
      v7 = *v5++;
      *v6++ = (int)v7;
      --v4;
    }
    while (v4);
  }
  return 0;
}

uint64_t sub_20C6DEFB8(unint64_t *a1, _QWORD *a2, _DWORD *a3, int a4)
{
  unint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  if (!*a1)
    return 112;
  v5 = a4;
  result = 112;
  if (a4 >= 3 && !(v4 % 3) && *a3 == 3)
  {
    sub_20BE81ACC((uint64_t)a2, 2 * (v4 / 3));
    if ((int)v4 >= 1)
    {
      v11 = 0;
      v12 = 0;
      v13 = ~(-1 << (v5 - 1));
      do
      {
        sub_20C6E7E50(*a2 + v11, *a2 + v11 + 4, v13, *(float *)(a1[4] + 4 * v12), *(float *)(a1[4] + 4 * v12 + 4), *(float *)(a1[4] + 4 * v12 + 8));
        v12 += 3;
        v11 += 8;
      }
      while ((int)v12 < (int)v4);
    }
    result = 0;
    --*a3;
  }
  return result;
}

uint64_t sub_20C6DF0AC(uint64_t *a1, _QWORD *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  void *v9;
  float *v14;
  float *v15;
  uint64_t *v16;
  uint64_t result;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int32x2_t *i;
  float *v22;
  float v23;
  float v24;
  int v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  int32x2_t v29;
  uint64_t *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type size;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  float v51;
  int32x2_t v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  __int128 v63;
  std::string::size_type v64;

  v4 = *a1;
  if ((unint64_t)*a1 < 3 || (int)*a1 % 3 != 0)
  {
    v6 = sub_20C6E7B7C();
    std::to_string(&v62, v4);
    v7 = std::string::insert(&v62, 0, "quantizeColorRGB: Incompatible data dimension: componentCount ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v64 = v7->__r_.__value_.__r.__words[2];
    v63 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&v63);
    if (SHIBYTE(v64) < 0)
      operator delete((void *)v63);
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 112;
    v9 = (void *)v62.__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
  v14 = (float *)a1[4];
  v62.__r_.__value_.__s.__data_[0] = 0;
  if (*sub_20C6DF7F8(v14, &v14[v4]) >= 0.0 && *v15 <= 1.0)
  {
    v18 = 1 << a4;
    v51 = (float)v18 + -1.0;
    *(float *)(a3 + 4) = 1.0 / v51;
    LODWORD(v63) = 0;
    sub_20BE89A68(a3 + 8, 3uLL, &v63);
    sub_20BE81ACC((uint64_t)a2, (int)v4);
    if ((int)v4 < 1)
      return 0;
    v19 = 0;
    v20 = a1[4];
    for (i = (int32x2_t *)(*a2 + 4); ; i = (int32x2_t *)((char *)i + 12))
    {
      v22 = (float *)(v20 + 4 * v19);
      v23 = v22[1];
      v24 = v22[2];
      v25 = llroundf(v51 * (float)((float)((float)(*v22 * 0.2126) + (float)(v23 * 0.7152)) + (float)(v24 * 0.0722)));
      v26 = vadd_f32(vmul_n_f32((float32x2_t)0x3F000000BDEAB368, *v22), vmul_n_f32((float32x2_t)0xBEE88CE7BEC55326, v23));
      v27 = vmul_n_f32((float32x2_t)0x3D3B98C83F000000, v24);
      v28.i32[0] = vadd_f32(v26, v27).u32[0];
      v28.i32[1] = vsub_f32(v26, v27).i32[1];
      v29 = vcvt_s32_f32(vrnda_f32(vmul_n_f32(vadd_f32(v28, (float32x2_t)0x3F0000003F000000), v51)));
      if (v25 < 0 || v18 <= v25 || v29.i32[0] < 0 || v18 <= v29.i32[0] || v29.i32[1] < 0 || v18 <= v29.i32[1])
        break;
      result = 0;
      i[-1].i32[1] = v25;
      *i = v29;
      v19 += 3;
      if ((int)v19 >= (int)v4)
        return result;
    }
    v52 = v29;
    v30 = sub_20C6E7B7C();
    std::to_string(&v56, v18);
    v31 = std::string::insert(&v56, 0, "quantizeColorRGB: values out of bound qp1=");
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v33 = std::string::append(&v57, ", y=");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v55, v25);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &v55;
    else
      v35 = (std::string *)v55.__r_.__value_.__r.__words[0];
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    else
      size = v55.__r_.__value_.__l.__size_;
    v37 = std::string::append(&v58, (const std::string::value_type *)v35, size);
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v39 = std::string::append(&v59, ", u=");
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v54, v52.i32[0]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &v54;
    else
      v41 = (std::string *)v54.__r_.__value_.__r.__words[0];
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    else
      v42 = v54.__r_.__value_.__l.__size_;
    v43 = std::string::append(&v60, (const std::string::value_type *)v41, v42);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v45 = std::string::append(&v61, ", v=");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v53, v52.i32[1]);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = &v53;
    else
      v47 = (std::string *)v53.__r_.__value_.__r.__words[0];
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    else
      v48 = v53.__r_.__value_.__l.__size_;
    v49 = std::string::append(&v62, (const std::string::value_type *)v47, v48);
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v64 = v49->__r_.__value_.__r.__words[2];
    v63 = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v30, (uint64_t *)&v63);
    if (SHIBYTE(v64) < 0)
      operator delete((void *)v63);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    {
      v9 = (void *)v56.__r_.__value_.__r.__words[0];
      goto LABEL_13;
    }
  }
  else
  {
    v16 = sub_20C6E7B7C();
    sub_20BDDC0E4(&v63, "quantizeColorRGB: Input out of range");
    sub_20C6C3E64((os_log_t *)v16, (uint64_t *)&v63);
    if (SHIBYTE(v64) < 0)
    {
      v9 = (void *)v63;
LABEL_13:
      operator delete(v9);
    }
  }
  return 112;
}

void sub_20C6DF580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v54 - 89) < 0)
    operator delete(*(void **)(v54 - 112));
  if (*(char *)(v54 - 121) < 0)
    operator delete(*(void **)(v54 - 144));
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v54 - 153) < 0)
    operator delete(*(void **)(v54 - 176));
  if (a54 < 0)
    operator delete(a49);
  if (a28 < 0)
    operator delete(a23);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6DF688(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, char a5)
{
  unint64_t v6;
  uint64_t result;
  int v9;
  uint64_t v11;
  unsigned int v12;
  float v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float *v20;
  float v21;
  uint64_t *v22;
  void *__p[2];
  char v24;

  v6 = *a4;
  if ((int)v6 < 2)
    return 112;
  v9 = *(_DWORD *)a1;
  result = 112;
  if ((int)v6 <= v9 && !(v9 % (int)v6))
  {
    v11 = (v6 - 1);
    v12 = v9 / v6;
    v13 = (float)(1 << a5) + -1.0;
    *(float *)(a3 + 4) = 1.0 / v13;
    LODWORD(__p[0]) = 0;
    sub_20BE89A68(a3 + 8, v6, __p);
    sub_20BE81ACC((uint64_t)a2, (int)(v12 * v11));
    LODWORD(v14) = 0;
    v15 = 0;
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *a2;
    while (1)
    {
      v14 = (int)v14;
      v18 = 0.0;
      v19 = v11;
      v20 = (float *)(v16 + 4 * v15);
      do
      {
        v21 = *v20++;
        v18 = v18 + v21;
        *(_DWORD *)(v17 + 4 * v14++) = llroundf(v13 * v21);
        --v19;
      }
      while (v19);
      if (vabds_f32(1.0, v18 + *(float *)(v16 + 4 * (v15 + (int)v11))) > 0.00001)
        break;
      v15 += *a4;
      if (v15 >= v9)
      {
        result = 0;
        --*a4;
        return result;
      }
    }
    v22 = sub_20C6E7B7C();
    sub_20BDDC0E4(__p, "Weight quantization: sum too far from 1.0");
    sub_20C6C3E64((os_log_t *)v22, (uint64_t *)__p);
    if (v24 < 0)
      operator delete(__p[0]);
    return 112;
  }
  return result;
}

float *sub_20C6DF7F8(float *result, float *a2)
{
  float *v2;
  float v4;
  float v5;
  float *v6;
  float *v7;
  float v8;
  float v9;

  v2 = result;
  if (result != a2 && result + 1 != a2)
  {
    v5 = *result;
    v4 = result[1];
    if (v4 < *result)
      ++result;
    v6 = v4 >= *v2 ? v2 + 1 : v2;
    v7 = v2 + 2;
    if (v7 != a2)
    {
      if (v4 >= v5)
        v4 = v5;
      while (v7 + 1 != a2)
      {
        v9 = *v7;
        v8 = v7[1];
        if (v8 >= *v7)
        {
          if (v9 < v4)
          {
            v4 = *v7;
            result = v7;
          }
          if (v8 >= *v6)
            v6 = v7 + 1;
        }
        else
        {
          v4 = *result;
          if (v8 < *result)
          {
            v4 = v7[1];
            result = v7 + 1;
          }
          if (v9 >= *v6)
            v6 = v7;
        }
        v7 += 2;
        if (v7 == a2)
          return result;
      }
      if (*v7 < *result)
        return v7;
    }
  }
  return result;
}

uint64_t sub_20C6DF8CC(unint64_t *a1, uint64_t *a2, _BYTE *a3, int *a4, char a5)
{
  uint64_t result;

  switch(*a3)
  {
    case 0:
      result = sub_20C6DF91C(a1, a2);
      break;
    case 1:
      result = sub_20C6CCC68((double **)a1, a2, (uint64_t)a3, *a4, a5);
      break;
    case 2:
      result = sub_20C6DF970(a1, a2, a4, a5);
      break;
    case 3:
      result = sub_20C6DFA64((uint64_t *)a1, a2, (uint64_t)a3, a5);
      break;
    case 4:
      result = sub_20C6E004C((uint64_t)a1, a2, (uint64_t)a3, a4, a5);
      break;
    default:
      result = 112;
      break;
  }
  return result;
}

uint64_t sub_20C6DF91C(unint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  double *v5;
  _DWORD *v6;
  double v7;

  sub_20BE81ACC((uint64_t)a2, *a1);
  v4 = *a1;
  if (*a1)
  {
    v5 = (double *)a1[4];
    v6 = (_DWORD *)*a2;
    do
    {
      v7 = *v5++;
      *v6++ = (int)v7;
      --v4;
    }
    while (v4);
  }
  return 0;
}

uint64_t sub_20C6DF970(unint64_t *a1, _QWORD *a2, _DWORD *a3, int a4)
{
  unint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  if (!*a1)
    return 112;
  v5 = a4;
  result = 112;
  if (a4 >= 3 && !(v4 % 3) && *a3 == 3)
  {
    sub_20BE81ACC((uint64_t)a2, 2 * (v4 / 3));
    if ((int)v4 >= 1)
    {
      v11 = 0;
      v12 = 0;
      v13 = ~(-1 << (v5 - 1));
      do
      {
        sub_20C6E7FE8(*a2 + v11, *a2 + v11 + 4, v13, *(double *)(a1[4] + 8 * v12), *(double *)(a1[4] + 8 * v12 + 8), *(double *)(a1[4] + 8 * v12 + 16));
        v12 += 3;
        v11 += 8;
      }
      while ((int)v12 < (int)v4);
    }
    result = 0;
    --*a3;
  }
  return result;
}

uint64_t sub_20C6DFA64(uint64_t *a1, _QWORD *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  void *v9;
  double *v14;
  double *v15;
  uint64_t *v16;
  uint64_t result;
  int v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  int32x2_t *v23;
  double *v28;
  double v29;
  double v30;
  int v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  int32x2_t v35;
  uint64_t *v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type size;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  int32x2_t v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  __int128 v68;
  std::string::size_type v69;

  v4 = *a1;
  if ((unint64_t)*a1 < 3 || (int)*a1 % 3 != 0)
  {
    v6 = sub_20C6E7B7C();
    std::to_string(&v67, v4);
    v7 = std::string::insert(&v67, 0, "quantizeColorRGB: Incompatible data dimension: componentCount ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v69 = v7->__r_.__value_.__r.__words[2];
    v68 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&v68);
    if (SHIBYTE(v69) < 0)
      operator delete((void *)v68);
    if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 112;
    v9 = (void *)v67.__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
  v14 = (double *)a1[4];
  v67.__r_.__value_.__s.__data_[0] = 0;
  if (*sub_20C6E01D0(v14, &v14[v4]) < 0.0 || *v15 > 1.0)
  {
    v16 = sub_20C6E7B7C();
    sub_20BDDC0E4(&v68, "quantizeColorRGB: Input out of range");
    sub_20C6C3E64((os_log_t *)v16, (uint64_t *)&v68);
    if ((SHIBYTE(v69) & 0x80000000) == 0)
      return 112;
    v9 = (void *)v68;
LABEL_13:
    operator delete(v9);
    return 112;
  }
  v18 = 1 << a4;
  v19 = (float)v18 + -1.0;
  *(float *)(a3 + 4) = 1.0 / v19;
  LODWORD(v68) = 0;
  sub_20BE89A68(a3 + 8, 3uLL, &v68);
  sub_20BE81ACC((uint64_t)a2, (int)v4);
  if ((int)v4 >= 1)
  {
    v20 = 0;
    v21 = a1[4];
    v22 = v19;
    v23 = (int32x2_t *)(*a2 + 4);
    __asm { FMOV            V7.2D, #0.5 }
    while (1)
    {
      v28 = (double *)(v21 + 8 * v20);
      v29 = v28[1];
      v30 = v28[2];
      v31 = llround((*v28 * 0.212599993 + v29 * 0.715200007 + v30 * 0.0722000003) * v22);
      v32 = vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_20CAF8880, *v28), vmulq_n_f64((float64x2_t)xmmword_20CAF8890, v29));
      v33 = vmulq_n_f64((float64x2_t)xmmword_20CAF88A0, v30);
      *(_QWORD *)&v34.f64[0] = *(_OWORD *)&vaddq_f64(v32, v33);
      v34.f64[1] = vsubq_f64(v32, v33).f64[1];
      v35 = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vaddq_f64(v34, _Q7), v22))));
      if (v31 < 0 || v18 <= v31 || v35.i32[0] < 0 || v18 <= v35.i32[0] || v35.i32[1] < 0 || v18 <= v35.i32[1])
        break;
      result = 0;
      v23[-1].i32[1] = v31;
      *v23 = v35;
      v23 = (int32x2_t *)((char *)v23 + 12);
      v20 += 3;
      if ((int)v20 >= (int)v4)
        return result;
    }
    v57 = v35;
    v36 = sub_20C6E7B7C();
    std::to_string(&v61, v18);
    v37 = std::string::insert(&v61, 0, "quantizeColorRGB: values out of bound qp1=");
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v39 = std::string::append(&v62, ", y=");
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v60, v31);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &v60;
    else
      v41 = (std::string *)v60.__r_.__value_.__r.__words[0];
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    else
      size = v60.__r_.__value_.__l.__size_;
    v43 = std::string::append(&v63, (const std::string::value_type *)v41, size);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v45 = std::string::append(&v64, ", u=");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v59, v57.i32[0]);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = &v59;
    else
      v47 = (std::string *)v59.__r_.__value_.__r.__words[0];
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    else
      v48 = v59.__r_.__value_.__l.__size_;
    v49 = std::string::append(&v65, (const std::string::value_type *)v47, v48);
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    v51 = std::string::append(&v66, ", v=");
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v58, v57.i32[1]);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &v58;
    else
      v53 = (std::string *)v58.__r_.__value_.__r.__words[0];
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    else
      v54 = v58.__r_.__value_.__l.__size_;
    v55 = std::string::append(&v67, (const std::string::value_type *)v53, v54);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v69 = v55->__r_.__value_.__r.__words[2];
    v68 = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v36, (uint64_t *)&v68);
    if (SHIBYTE(v69) < 0)
      operator delete((void *)v68);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 112;
    v9 = (void *)v61.__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
  return 0;
}

void sub_20C6DFF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v54 - 105) < 0)
    operator delete(*(void **)(v54 - 128));
  if (*(char *)(v54 - 137) < 0)
    operator delete(*(void **)(v54 - 160));
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v54 - 169) < 0)
    operator delete(*(void **)(v54 - 192));
  if (a54 < 0)
    operator delete(a49);
  if (a28 < 0)
    operator delete(a23);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6E004C(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, char a5)
{
  unint64_t v6;
  uint64_t result;
  int v9;
  uint64_t v11;
  unsigned int v12;
  float v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  double *v20;
  double v21;
  float v22;
  uint64_t *v23;
  void *__p[2];
  char v25;

  v6 = *a4;
  if ((int)v6 < 2)
    return 112;
  v9 = *(_DWORD *)a1;
  result = 112;
  if ((int)v6 <= v9 && !(v9 % (int)v6))
  {
    v11 = (v6 - 1);
    v12 = v9 / v6;
    v13 = (float)(1 << a5) + -1.0;
    *(float *)(a3 + 4) = 1.0 / v13;
    LODWORD(__p[0]) = 0;
    sub_20BE89A68(a3 + 8, v6, __p);
    sub_20BE81ACC((uint64_t)a2, (int)(v12 * v11));
    LODWORD(v14) = 0;
    v15 = 0;
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *a2;
    while (1)
    {
      v14 = (int)v14;
      v18 = 0.0;
      v19 = v11;
      v20 = (double *)(v16 + 8 * v15);
      do
      {
        v21 = *v20++;
        v18 = v21 + v18;
        *(_DWORD *)(v17 + 4 * v14++) = llround(v21 * v13);
        --v19;
      }
      while (v19);
      v22 = *(double *)(v16 + 8 * (v15 + (int)v11)) + v18;
      if (vabds_f32(1.0, v22) > 0.00001)
        break;
      v15 += *a4;
      if (v15 >= v9)
      {
        result = 0;
        --*a4;
        return result;
      }
    }
    v23 = sub_20C6E7B7C();
    sub_20BDDC0E4(__p, "Weight quantization: sum too far from 1.0");
    sub_20C6C3E64((os_log_t *)v23, (uint64_t *)__p);
    if (v25 < 0)
      operator delete(__p[0]);
    return 112;
  }
  return result;
}

double *sub_20C6E01D0(double *result, double *a2)
{
  double *v2;
  double v4;
  double v5;
  double *v6;
  double *v7;
  double v8;
  double v9;

  v2 = result;
  if (result != a2 && result + 1 != a2)
  {
    v5 = *result;
    v4 = result[1];
    if (v4 < *result)
      ++result;
    v6 = v4 >= *v2 ? v2 + 1 : v2;
    v7 = v2 + 2;
    if (v7 != a2)
    {
      if (v4 >= v5)
        v4 = v5;
      while (v7 + 1 != a2)
      {
        v9 = *v7;
        v8 = v7[1];
        if (v8 >= *v7)
        {
          if (v9 < v4)
          {
            v4 = *v7;
            result = v7;
          }
          if (v8 >= *v6)
            v6 = v7 + 1;
        }
        else
        {
          v4 = *result;
          if (v8 < *result)
          {
            v4 = v7[1];
            result = v7 + 1;
          }
          if (v9 >= *v6)
            v6 = v7;
        }
        v7 += 2;
        if (v7 == a2)
          return result;
      }
      if (*v7 < *result)
        return v7;
    }
  }
  return result;
}

uint64_t sub_20C6E02A4(unint64_t *a1, uint64_t *a2, _BYTE *a3, int *a4, char a5)
{
  uint64_t result;
  uint64_t *v6;
  void *__p[2];
  char v8;

  switch(*a3)
  {
    case 0:
      result = sub_20C6E0368(a1, a2);
      break;
    case 1:
      result = sub_20C6E03B8((int **)a1, a2, (uint64_t)a3, *a4, a5);
      break;
    case 2:
      v6 = sub_20C6E7B7C();
      sub_20BDDC0E4(__p, "Weight quantizeUnitary3DVector: incompatible type int");
      sub_20C6C3E64((os_log_t *)v6, (uint64_t *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
      goto LABEL_6;
    case 3:
      result = sub_20C6E07E0((uint64_t *)a1, a2, (uint64_t)a3, a5);
      break;
    case 4:
      result = sub_20C6E0DC4((uint64_t)a1, a2, (uint64_t)a3, a4, a5);
      break;
    default:
LABEL_6:
      result = 112;
      break;
  }
  return result;
}

uint64_t sub_20C6E0368(unint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  int *v5;
  _DWORD *v6;
  int v7;

  sub_20BE81ACC((uint64_t)a2, *a1);
  v4 = *a1;
  if (*a1)
  {
    v5 = (int *)a1[4];
    v6 = (_DWORD *)*a2;
    do
    {
      v7 = *v5++;
      *v6++ = v7;
      --v4;
    }
    while (v4);
  }
  return 0;
}

uint64_t sub_20C6E03B8(int **a1, _QWORD *a2, uint64_t a3, int a4, int a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  char *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  float *v19;
  float *v20;
  int *v21;
  int v22;
  float v23;
  float v24;
  char *v25;
  float v26;
  float *v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  float *v43;
  int *v44;
  int v45;
  int v46;
  uint64_t *v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  std::string::size_type size;
  std::string *v54;
  __int128 v55;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  void *__p[2];
  std::string::size_type v62;
  void *v63[3];
  char *v64;
  char *v65;

  if (a4 < 1)
    return 112;
  v7 = *(unsigned int *)a1;
  v8 = 112;
  if ((int)v7 >= a4 && !((int)v7 % a4))
  {
    sub_20BE81ACC((uint64_t)a2, v7);
    v12 = a4;
    *(float *)v63 = (float)*a1[4];
    sub_20C6CCBE8(&v64, a4, v63);
    *(float *)__p = (float)*a1[4];
    sub_20C6CCBE8(v63, a4, __p);
    v13 = 0;
    v14 = (float *)v63[0];
    v15 = v64;
    v16 = (int)v7;
    v17 = a1[4];
    do
    {
      v18 = a4;
      v19 = v14;
      v20 = (float *)v15;
      v21 = v17;
      do
      {
        v22 = *v21++;
        v23 = (float)v22;
        v24 = *v20;
        if (*v20 >= (float)v22)
          v24 = v23;
        *v20++ = v24;
        if (*v19 > v23)
          v23 = *v19;
        *v19++ = v23;
        --v18;
      }
      while (v18);
      v13 += a4;
      v17 += a4;
    }
    while (v13 < (int)v7);
    v25 = v64;
    v26 = *(float *)v63[0] - *(float *)v64;
    if (a4 >= 2)
    {
      v27 = (float *)((char *)v63[0] + 4);
      v28 = (float *)(v64 + 4);
      v29 = a4 - 1;
      do
      {
        v30 = *v27++;
        v31 = v30;
        v32 = *v28++;
        v33 = v31 - v32;
        if (v33 >= v26)
          v26 = v33;
        --v29;
      }
      while (v29);
    }
    v34 = 1 << a5;
    if (a5)
    {
      if (v26 < 2.2204e-16)
        v26 = 1.0;
      v35 = (float)((float)v34 + -1.0) / v26;
    }
    else
    {
      v35 = 1.0;
    }
    v36 = 0;
    v37 = 0;
    v38 = a1[4];
    v39 = a4;
    v40 = 4 * a4;
    while (2)
    {
      v41 = (int *)(*a2 + v36);
      v42 = v12;
      v43 = (float *)v25;
      v44 = v38;
      do
      {
        v45 = *v44++;
        v46 = llroundf(v35 * (float)((float)v45 - *v43));
        if (v46 < 0 || v34 <= v46)
        {
          v47 = sub_20C6E7B7C();
          std::to_string(&v58, v46);
          v48 = std::string::insert(&v58, 0, "Uniform quantization: values out of bound; qvalue=");
          v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v59.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          v50 = std::string::append(&v59, " and qp1=");
          v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v60.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v57, 1 << a5);
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v52 = &v57;
          else
            v52 = (std::string *)v57.__r_.__value_.__r.__words[0];
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
          else
            size = v57.__r_.__value_.__l.__size_;
          v54 = std::string::append(&v60, (const std::string::value_type *)v52, size);
          v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
          v62 = v54->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v55;
          v54->__r_.__value_.__l.__size_ = 0;
          v54->__r_.__value_.__r.__words[2] = 0;
          v54->__r_.__value_.__r.__words[0] = 0;
          sub_20C6C3E64((os_log_t *)v47, (uint64_t *)__p);
          if (SHIBYTE(v62) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v57.__r_.__value_.__l.__data_);
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v60.__r_.__value_.__l.__data_);
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v59.__r_.__value_.__l.__data_);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v58.__r_.__value_.__l.__data_);
          v8 = 112;
          goto LABEL_49;
        }
        *v41++ = v46;
        ++v43;
        --v42;
      }
      while (v42);
      v37 += v39;
      v38 = (int *)((char *)v38 + v40);
      v36 += v40;
      if (v37 < v16)
        continue;
      break;
    }
    if ((char **)(a3 + 8) != &v64)
      sub_20BE8B37C((char *)(a3 + 8), v64, (uint64_t)v65, (v65 - v64) >> 2);
    v8 = 0;
    *(float *)(a3 + 4) = 1.0 / v35;
LABEL_49:
    if (v63[0])
    {
      v63[1] = v63[0];
      operator delete(v63[0]);
    }
    if (v64)
    {
      v65 = v64;
      operator delete(v64);
    }
  }
  return v8;
}

void sub_20C6E0744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v35;
  void *v36;

  v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(_QWORD *)(v33 - 120) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v33 - 104);
  if (v36)
  {
    *(_QWORD *)(v33 - 96) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6E07E0(uint64_t *a1, _QWORD *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  void *v9;
  _DWORD *v14;
  int *v15;
  uint64_t *v16;
  uint64_t result;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int32x2_t *i;
  int *v22;
  float v23;
  float v24;
  float v25;
  int v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int32x2_t v30;
  uint64_t *v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::string::size_type size;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  float v52;
  int32x2_t v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  __int128 v64;
  std::string::size_type v65;

  v4 = *a1;
  if ((unint64_t)*a1 < 3 || (int)*a1 % 3 != 0)
  {
    v6 = sub_20C6E7B7C();
    std::to_string(&v63, v4);
    v7 = std::string::insert(&v63, 0, "quantizeColorRGB: Incompatible data dimension: componentCount ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v65 = v7->__r_.__value_.__r.__words[2];
    v64 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0)
      operator delete((void *)v64);
    if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 112;
    v9 = (void *)v63.__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
  v14 = (_DWORD *)a1[4];
  v63.__r_.__value_.__s.__data_[0] = 0;
  if ((*sub_20C6CC340(v14, &v14[v4]) & 0x80000000) != 0 || *v15 > 1)
  {
    v16 = sub_20C6E7B7C();
    sub_20BDDC0E4(&v64, "quantizeColorRGB: Input out of range");
    sub_20C6C3E64((os_log_t *)v16, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0)
    {
      v9 = (void *)v64;
LABEL_13:
      operator delete(v9);
    }
  }
  else
  {
    v18 = 1 << a4;
    v52 = (float)v18 + -1.0;
    *(float *)(a3 + 4) = 1.0 / v52;
    LODWORD(v64) = 0;
    sub_20BE89A68(a3 + 8, 3uLL, &v64);
    sub_20BE81ACC((uint64_t)a2, (int)v4);
    if ((int)v4 < 1)
      return 0;
    v19 = 0;
    v20 = a1[4];
    for (i = (int32x2_t *)(*a2 + 4); ; i = (int32x2_t *)((char *)i + 12))
    {
      v22 = (int *)(v20 + 4 * v19);
      v23 = (float)*v22;
      v24 = (float)v22[1];
      v25 = (float)v22[2];
      v26 = llroundf(v52 * (float)((float)((float)(v23 * 0.2126) + (float)(v24 * 0.7152)) + (float)(v25 * 0.0722)));
      v27 = vadd_f32(vmul_n_f32((float32x2_t)0x3F000000BDEAB368, v23), vmul_n_f32((float32x2_t)0xBEE88CE7BEC55326, v24));
      v28 = vmul_n_f32((float32x2_t)0x3D3B98C83F000000, v25);
      v29.i32[0] = vadd_f32(v27, v28).u32[0];
      v29.i32[1] = vsub_f32(v27, v28).i32[1];
      v30 = vcvt_s32_f32(vrnda_f32(vmul_n_f32(vadd_f32(v29, (float32x2_t)0x3F0000003F000000), v52)));
      if (v26 < 0 || v18 <= v26 || v30.i32[0] < 0 || v18 <= v30.i32[0] || v30.i32[1] < 0 || v18 <= v30.i32[1])
        break;
      result = 0;
      i[-1].i32[1] = v26;
      *i = v30;
      v19 += 3;
      if ((int)v19 >= (int)v4)
        return result;
    }
    v53 = v30;
    v31 = sub_20C6E7B7C();
    std::to_string(&v57, v18);
    v32 = std::string::insert(&v57, 0, "quantizeColorRGB: values out of bound qp1=");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v58, ", y=");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v56, v26);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v56;
    else
      v36 = (std::string *)v56.__r_.__value_.__r.__words[0];
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    else
      size = v56.__r_.__value_.__l.__size_;
    v38 = std::string::append(&v59, (const std::string::value_type *)v36, size);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    v40 = std::string::append(&v60, ", u=");
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v55, v53.i32[0]);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v55;
    else
      v42 = (std::string *)v55.__r_.__value_.__r.__words[0];
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    else
      v43 = v55.__r_.__value_.__l.__size_;
    v44 = std::string::append(&v61, (const std::string::value_type *)v42, v43);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v46 = std::string::append(&v62, ", v=");
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v54, v53.i32[1]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v54;
    else
      v48 = (std::string *)v54.__r_.__value_.__r.__words[0];
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    else
      v49 = v54.__r_.__value_.__l.__size_;
    v50 = std::string::append(&v63, (const std::string::value_type *)v48, v49);
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v65 = v50->__r_.__value_.__r.__words[2];
    v64 = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v31, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0)
      operator delete((void *)v64);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    {
      v9 = (void *)v57.__r_.__value_.__r.__words[0];
      goto LABEL_13;
    }
  }
  return 112;
}

void sub_20C6E0CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v54 - 89) < 0)
    operator delete(*(void **)(v54 - 112));
  if (*(char *)(v54 - 121) < 0)
    operator delete(*(void **)(v54 - 144));
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v54 - 153) < 0)
    operator delete(*(void **)(v54 - 176));
  if (a54 < 0)
    operator delete(a49);
  if (a28 < 0)
    operator delete(a23);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6E0DC4(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, char a5)
{
  unint64_t v6;
  uint64_t result;
  int v9;
  uint64_t v11;
  unsigned int v12;
  float v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t *v22;
  void *__p[2];
  char v24;

  v6 = *a4;
  if ((int)v6 < 2)
    return 112;
  v9 = *(_DWORD *)a1;
  result = 112;
  if ((int)v6 <= v9 && !(v9 % (int)v6))
  {
    v11 = (v6 - 1);
    v12 = v9 / v6;
    v13 = (float)(1 << a5) + -1.0;
    *(float *)(a3 + 4) = 1.0 / v13;
    LODWORD(__p[0]) = 0;
    sub_20BE89A68(a3 + 8, v6, __p);
    sub_20BE81ACC((uint64_t)a2, (int)(v12 * v11));
    LODWORD(v14) = 0;
    v15 = 0;
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *a2;
    while (1)
    {
      v14 = (int)v14;
      v18 = 0.0;
      v19 = v11;
      v20 = (int *)(v16 + 4 * v15);
      do
      {
        v21 = *v20++;
        v18 = v18 + (float)v21;
        *(_DWORD *)(v17 + 4 * v14++) = llroundf(v13 * (float)v21);
        --v19;
      }
      while (v19);
      if (vabds_f32(1.0, v18 + (float)*(int *)(v16 + 4 * (v15 + (int)v11))) > 0.00001)
        break;
      v15 += *a4;
      if (v15 >= v9)
      {
        result = 0;
        --*a4;
        return result;
      }
    }
    v22 = sub_20C6E7B7C();
    sub_20BDDC0E4(__p, "Weight quantization: sum too far from 1.0");
    sub_20C6C3E64((os_log_t *)v22, (uint64_t *)__p);
    if (v24 < 0)
      operator delete(__p[0]);
    return 112;
  }
  return result;
}

uint64_t sub_20C6E0F3C(unint64_t *a1, uint64_t *a2, _BYTE *a3, int *a4, char a5)
{
  uint64_t result;
  uint64_t *v6;
  void *__p[2];
  char v8;

  switch(*a3)
  {
    case 0:
      result = sub_20C6E1000(a1, a2);
      break;
    case 1:
      result = sub_20C6E1050((unsigned int *)a1, a2, (uint64_t)a3, *a4, a5);
      break;
    case 2:
      v6 = sub_20C6E7B7C();
      sub_20BDDC0E4(__p, "Weight quantizeUnitary3DVector: incompatible type BOOL");
      sub_20C6C3E64((os_log_t *)v6, (uint64_t *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
      goto LABEL_6;
    case 3:
      result = sub_20C6E1488((uint64_t *)a1, a2, (uint64_t)a3, a5);
      break;
    case 4:
      result = sub_20C6E1A20((uint64_t)a1, a2, (uint64_t)a3, a4, a5);
      break;
    default:
LABEL_6:
      result = 112;
      break;
  }
  return result;
}

uint64_t sub_20C6E1000(unint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  unsigned __int8 *v5;
  _DWORD *v6;
  int v7;

  sub_20BE81ACC((uint64_t)a2, *a1);
  v4 = *a1;
  if (*a1)
  {
    v5 = (unsigned __int8 *)a1[4];
    v6 = (_DWORD *)*a2;
    do
    {
      v7 = *v5++;
      *v6++ = v7;
      --v4;
    }
    while (v4);
  }
  return 0;
}

uint64_t sub_20C6E1050(unsigned int *a1, _QWORD *a2, uint64_t a3, int a4, int a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float *v16;
  char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  float *v21;
  float *v22;
  unsigned __int8 *v23;
  float v25;
  float v26;
  char *v27;
  float v28;
  float *v29;
  float *v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  int v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  float *v45;
  unsigned __int8 *v46;
  unsigned int v47;
  int v48;
  uint64_t *v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  std::string::size_type size;
  std::string *v56;
  __int128 v57;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  void *__p[2];
  std::string::size_type v64;
  void *v65[3];
  char *v66;
  char *v67;

  if (a4 < 1)
    return 112;
  v7 = *a1;
  v8 = 112;
  if ((int)v7 >= a4 && !((int)v7 % a4))
  {
    sub_20BE81ACC((uint64_t)a2, v7);
    v12 = a4;
    if (**((_BYTE **)a1 + 4))
      v13 = 1.0;
    else
      v13 = 0.0;
    *(float *)v65 = v13;
    sub_20C6CCBE8(&v66, a4, v65);
    if (**((_BYTE **)a1 + 4))
      v14 = 1.0;
    else
      v14 = 0.0;
    *(float *)__p = v14;
    sub_20C6CCBE8(v65, a4, __p);
    v15 = 0;
    v16 = (float *)v65[0];
    v17 = v66;
    v18 = (int)v7;
    v19 = (unsigned __int8 *)*((_QWORD *)a1 + 4);
    do
    {
      v20 = a4;
      v21 = v16;
      v22 = (float *)v17;
      v23 = v19;
      do
      {
        if (*v23++)
          v25 = 1.0;
        else
          v25 = 0.0;
        v26 = *v22;
        if (*v22 >= v25)
          v26 = v25;
        *v22++ = v26;
        if (*v21 > v25)
          v25 = *v21;
        *v21++ = v25;
        --v20;
      }
      while (v20);
      v15 += a4;
      v19 += a4;
    }
    while (v15 < (int)v7);
    v27 = v66;
    v28 = *(float *)v65[0] - *(float *)v66;
    if (a4 >= 2)
    {
      v29 = (float *)((char *)v65[0] + 4);
      v30 = (float *)(v66 + 4);
      v31 = a4 - 1;
      do
      {
        v32 = *v29++;
        v33 = v32;
        v34 = *v30++;
        v35 = v33 - v34;
        if (v35 >= v28)
          v28 = v35;
        --v31;
      }
      while (v31);
    }
    v36 = 1 << a5;
    if (a5)
    {
      if (v28 < 2.2204e-16)
        v28 = 1.0;
      v37 = (float)((float)v36 + -1.0) / v28;
    }
    else
    {
      v37 = 1.0;
    }
    v38 = 0;
    v39 = 0;
    v40 = (unsigned __int8 *)*((_QWORD *)a1 + 4);
    v41 = a4;
    v42 = 4 * a4;
    while (2)
    {
      v43 = (int *)(*a2 + v38);
      v44 = v12;
      v45 = (float *)v27;
      v46 = v40;
      do
      {
        v47 = *v46++;
        v48 = llroundf(v37 * (float)((float)v47 - *v45));
        if (v48 < 0 || v36 <= v48)
        {
          v49 = sub_20C6E7B7C();
          std::to_string(&v60, v48);
          v50 = std::string::insert(&v60, 0, "Uniform quantization: values out of bound; qvalue=");
          v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v61.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          v52 = std::string::append(&v61, " and qp1=");
          v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
          v62.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v53;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v59, 1 << a5);
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v54 = &v59;
          else
            v54 = (std::string *)v59.__r_.__value_.__r.__words[0];
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
          else
            size = v59.__r_.__value_.__l.__size_;
          v56 = std::string::append(&v62, (const std::string::value_type *)v54, size);
          v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          v64 = v56->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          sub_20C6C3E64((os_log_t *)v49, (uint64_t *)__p);
          if (SHIBYTE(v64) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v59.__r_.__value_.__l.__data_);
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v62.__r_.__value_.__l.__data_);
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v61.__r_.__value_.__l.__data_);
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v60.__r_.__value_.__l.__data_);
          v8 = 112;
          goto LABEL_58;
        }
        *v43++ = v48;
        ++v45;
        --v44;
      }
      while (v44);
      v39 += v41;
      v40 += v41;
      v38 += v42;
      if (v39 < v18)
        continue;
      break;
    }
    if ((char **)(a3 + 8) != &v66)
      sub_20BE8B37C((char *)(a3 + 8), v66, (uint64_t)v67, (v67 - v66) >> 2);
    v8 = 0;
    *(float *)(a3 + 4) = 1.0 / v37;
LABEL_58:
    if (v65[0])
    {
      v65[1] = v65[0];
      operator delete(v65[0]);
    }
    if (v66)
    {
      v67 = v66;
      operator delete(v66);
    }
  }
  return v8;
}

void sub_20C6E13EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v35;
  void *v36;

  v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(_QWORD *)(v33 - 120) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v33 - 104);
  if (v36)
  {
    *(_QWORD *)(v33 - 96) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6E1488(uint64_t *a1, _QWORD *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  void *v9;
  unsigned __int8 *v14;
  int v15;
  int32x2_t v16;
  float32x2_t v17;
  uint64_t v18;
  uint64_t v19;
  int32x2_t *i;
  float v21;
  float v22;
  unsigned int v23;
  float v24;
  int v25;
  float32x2_t v26;
  float32x2_t v27;
  uint64_t *v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type size;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  float v50;
  int32x2_t v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  __int128 v62;
  std::string::size_type v63;

  v4 = *a1;
  if ((unint64_t)*a1 < 3 || (int)*a1 % 3 != 0)
  {
    v6 = sub_20C6E7B7C();
    std::to_string(&v61, v4);
    v7 = std::string::insert(&v61, 0, "quantizeColorRGB: Incompatible data dimension: componentCount ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v63 = v7->__r_.__value_.__r.__words[2];
    v62 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&v62);
    if (SHIBYTE(v63) < 0)
      operator delete((void *)v62);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 112;
    v9 = (void *)v61.__r_.__value_.__r.__words[0];
    goto LABEL_59;
  }
  v14 = (unsigned __int8 *)a1[4];
  v61.__r_.__value_.__s.__data_[0] = 0;
  sub_20C6E1B9C(v14, &v14[v4]);
  v15 = 1 << a4;
  v50 = (float)v15 + -1.0;
  *(float *)(a3 + 4) = 1.0 / v50;
  LODWORD(v62) = 0;
  sub_20BE89A68(a3 + 8, 3uLL, &v62);
  sub_20BE81ACC((uint64_t)a2, (int)v4);
  if ((int)v4 < 1)
    return 0;
  v18 = 0;
  v19 = a1[4];
  for (i = (int32x2_t *)(*a2 + 4); ; i = (int32x2_t *)((char *)i + 12))
  {
    v16.i8[0] = *(_BYTE *)(v19 + v18);
    v21 = (float)v16.u32[0];
    v17.i8[0] = *(_BYTE *)(v19 + v18 + 1);
    v22 = (float)v17.u32[0];
    *(float *)&v23 = v22 * 0.7152;
    LOBYTE(v23) = *(_BYTE *)(v19 + v18 + 2);
    v24 = (float)v23;
    v25 = llroundf(v50 * (float)((float)((float)(v21 * 0.2126) + (float)(v22 * 0.7152)) + (float)(v24 * 0.0722)));
    v26 = vadd_f32(vmul_n_f32((float32x2_t)0x3F000000BDEAB368, v21), vmul_n_f32((float32x2_t)0xBEE88CE7BEC55326, v22));
    v27 = vmul_n_f32((float32x2_t)0x3D3B98C83F000000, v24);
    v17.i32[0] = vadd_f32(v26, v27).u32[0];
    v17.i32[1] = vsub_f32(v26, v27).i32[1];
    v16 = vcvt_s32_f32(vrnda_f32(vmul_n_f32(vadd_f32(v17, (float32x2_t)0x3F0000003F000000), v50)));
    if (v25 < 0 || v15 <= v25 || v16.i32[0] < 0 || v15 <= v16.i32[0] || v16.i32[1] < 0 || v15 <= v16.i32[1])
      break;
    i[-1].i32[1] = v25;
    *i = v16;
    v18 += 3;
    if ((int)v18 >= (int)v4)
      return 0;
  }
  v51 = v16;
  v29 = sub_20C6E7B7C();
  std::to_string(&v55, v15);
  v30 = std::string::insert(&v55, 0, "quantizeColorRGB: values out of bound qp1=");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v32 = std::string::append(&v56, ", y=");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v54, v25);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v54;
  else
    v34 = (std::string *)v54.__r_.__value_.__r.__words[0];
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  else
    size = v54.__r_.__value_.__l.__size_;
  v36 = std::string::append(&v57, (const std::string::value_type *)v34, size);
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  v38 = std::string::append(&v58, ", u=");
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v53, v51.i32[0]);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &v53;
  else
    v40 = (std::string *)v53.__r_.__value_.__r.__words[0];
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  else
    v41 = v53.__r_.__value_.__l.__size_;
  v42 = std::string::append(&v59, (const std::string::value_type *)v40, v41);
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  v44 = std::string::append(&v60, ", v=");
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v52, v51.i32[1]);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = &v52;
  else
    v46 = (std::string *)v52.__r_.__value_.__r.__words[0];
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  else
    v47 = v52.__r_.__value_.__l.__size_;
  v48 = std::string::append(&v61, (const std::string::value_type *)v46, v47);
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v63 = v48->__r_.__value_.__r.__words[2];
  v62 = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  sub_20C6C3E64((os_log_t *)v29, (uint64_t *)&v62);
  if (SHIBYTE(v63) < 0)
    operator delete((void *)v62);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (void *)v55.__r_.__value_.__r.__words[0];
LABEL_59:
    operator delete(v9);
  }
  return 112;
}

void sub_20C6E1918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v54 - 89) < 0)
    operator delete(*(void **)(v54 - 112));
  if (*(char *)(v54 - 121) < 0)
    operator delete(*(void **)(v54 - 144));
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v54 - 153) < 0)
    operator delete(*(void **)(v54 - 176));
  if (a54 < 0)
    operator delete(a49);
  if (a28 < 0)
    operator delete(a23);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

void sub_20C6E1A04()
{
  JUMPOUT(0x20C6E19ECLL);
}

void sub_20C6E1A0C()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    JUMPOUT(0x20C6E19F8);
  JUMPOUT(0x20C6E19FCLL);
}

uint64_t sub_20C6E1A20(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, char a5)
{
  unint64_t v6;
  uint64_t result;
  int v9;
  uint64_t v11;
  unsigned int v12;
  float v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  float v23;
  uint64_t *v24;
  void *__p[2];
  char v26;

  v6 = *a4;
  if ((int)v6 < 2)
    return 112;
  v9 = *(_DWORD *)a1;
  result = 112;
  if ((int)v6 <= v9 && !(v9 % (int)v6))
  {
    v11 = (v6 - 1);
    v12 = v9 / v6;
    v13 = (float)(1 << a5) + -1.0;
    *(float *)(a3 + 4) = 1.0 / v13;
    LODWORD(__p[0]) = 0;
    sub_20BE89A68(a3 + 8, v6, __p);
    sub_20BE81ACC((uint64_t)a2, (int)(v12 * v11));
    LODWORD(v14) = 0;
    v15 = 0;
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *a2;
    while (1)
    {
      v18 = v15;
      v14 = (int)v14;
      v19 = 0.0;
      v20 = v11;
      v21 = (unsigned __int8 *)(v16 + v15);
      do
      {
        v22 = *v21++;
        v19 = v19 + (float)v22;
        v23 = v13 * (float)v22;
        *(_DWORD *)(v17 + 4 * v14++) = llroundf(v23);
        --v20;
      }
      while (v20);
      LOBYTE(v23) = *(_BYTE *)(v16 + v18 + (int)v11);
      if (vabds_f32(1.0, v19 + (float)LODWORD(v23)) > 0.00001)
        break;
      v15 = *a4 + v18;
      if (v15 >= v9)
      {
        result = 0;
        --*a4;
        return result;
      }
    }
    v24 = sub_20C6E7B7C();
    sub_20BDDC0E4(__p, "Weight quantization: sum too far from 1.0");
    sub_20C6C3E64((os_log_t *)v24, (uint64_t *)__p);
    if (v26 < 0)
      operator delete(__p[0]);
    return 112;
  }
  return result;
}

unsigned __int8 *sub_20C6E1B9C(unsigned __int8 *result, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned int v9;

  v2 = result;
  if (result != a2 && result + 1 != a2)
  {
    v3 = result[1];
    v4 = *result;
    if (v3 >= v4)
    {
      v5 = result + 1;
    }
    else
    {
      ++result;
      v5 = v2;
    }
    v6 = v2 + 2;
    if (v2 + 2 != a2)
    {
      if (v2 + 3 == a2)
      {
LABEL_21:
        if (*v6 < *result)
          return v6;
      }
      else
      {
        if (v3 >= v4)
          v7 = v4;
        else
          v7 = v3;
        while (1)
        {
          v8 = v6[1];
          v9 = *v6;
          if (v8 >= v9)
          {
            if (v9 < v7)
            {
              v7 = *v6;
              result = v6;
            }
            if (v8 >= *v5)
              v5 = v6 + 1;
          }
          else
          {
            v7 = 0;
            if (v8 < *result)
              result = v6 + 1;
            v5 = v6;
          }
          v6 += 2;
          if (v6 == a2)
            break;
          if (v6 + 1 == a2)
            goto LABEL_21;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20C6E1C8C(unint64_t *a1, uint64_t *a2, _BYTE *a3, int *a4, char a5)
{
  uint64_t result;
  uint64_t *v6;
  void *__p[2];
  char v8;

  switch(*a3)
  {
    case 0:
      result = sub_20C6E1000(a1, a2);
      break;
    case 1:
      result = sub_20C6E1D50((unsigned int *)a1, a2, (uint64_t)a3, *a4, a5);
      break;
    case 2:
      v6 = sub_20C6E7B7C();
      sub_20BDDC0E4(__p, "Weight quantizeUnitary3DVector: incompatible type uint8_t");
      sub_20C6C3E64((os_log_t *)v6, (uint64_t *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
      goto LABEL_6;
    case 3:
      result = sub_20C6E2174((uint64_t *)a1, a2, (uint64_t)a3, a5);
      break;
    case 4:
      result = sub_20C6E1A20((uint64_t)a1, a2, (uint64_t)a3, a4, a5);
      break;
    default:
LABEL_6:
      result = 112;
      break;
  }
  return result;
}

uint64_t sub_20C6E1D50(unsigned int *a1, _QWORD *a2, uint64_t a3, int a4, int a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  float *v16;
  char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  float *v21;
  float *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  float v25;
  float v26;
  char *v27;
  float v28;
  float *v29;
  float *v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  int v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  float *v45;
  unsigned __int8 *v46;
  unsigned int v47;
  int v48;
  uint64_t *v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  std::string::size_type size;
  std::string *v56;
  __int128 v57;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  void *__p[2];
  std::string::size_type v64;
  void *v65[3];
  char *v66;
  char *v67;

  if (a4 < 1)
    return 112;
  v7 = *a1;
  v8 = 112;
  if ((int)v7 >= a4 && !((int)v7 % a4))
  {
    sub_20BE81ACC((uint64_t)a2, v7);
    v12 = a4;
    LOBYTE(v13) = **((_BYTE **)a1 + 4);
    *(float *)v65 = (float)v13;
    sub_20C6CCBE8(&v66, a4, v65);
    LOBYTE(v14) = **((_BYTE **)a1 + 4);
    *(float *)__p = (float)v14;
    sub_20C6CCBE8(v65, a4, __p);
    v15 = 0;
    v16 = (float *)v65[0];
    v17 = v66;
    v18 = (int)v7;
    v19 = (unsigned __int8 *)*((_QWORD *)a1 + 4);
    do
    {
      v20 = a4;
      v21 = v16;
      v22 = (float *)v17;
      v23 = v19;
      do
      {
        v24 = *v23++;
        v25 = (float)v24;
        v26 = *v22;
        if (*v22 >= (float)v24)
          v26 = v25;
        *v22++ = v26;
        if (*v21 > v25)
          v25 = *v21;
        *v21++ = v25;
        --v20;
      }
      while (v20);
      v15 += a4;
      v19 += a4;
    }
    while (v15 < (int)v7);
    v27 = v66;
    v28 = *(float *)v65[0] - *(float *)v66;
    if (a4 >= 2)
    {
      v29 = (float *)((char *)v65[0] + 4);
      v30 = (float *)(v66 + 4);
      v31 = a4 - 1;
      do
      {
        v32 = *v29++;
        v33 = v32;
        v34 = *v30++;
        v35 = v33 - v34;
        if (v35 >= v28)
          v28 = v35;
        --v31;
      }
      while (v31);
    }
    v36 = 1 << a5;
    if (a5)
    {
      if (v28 < 2.2204e-16)
        v28 = 1.0;
      v37 = (float)((float)v36 + -1.0) / v28;
    }
    else
    {
      v37 = 1.0;
    }
    v38 = 0;
    v39 = 0;
    v40 = (unsigned __int8 *)*((_QWORD *)a1 + 4);
    v41 = a4;
    v42 = 4 * a4;
    while (2)
    {
      v43 = (int *)(*a2 + v38);
      v44 = v12;
      v45 = (float *)v27;
      v46 = v40;
      do
      {
        v47 = *v46++;
        v48 = llroundf(v37 * (float)((float)v47 - *v45));
        if (v48 < 0 || v36 <= v48)
        {
          v49 = sub_20C6E7B7C();
          std::to_string(&v60, v48);
          v50 = std::string::insert(&v60, 0, "Uniform quantization: values out of bound; qvalue=");
          v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v61.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          v52 = std::string::append(&v61, " and qp1=");
          v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
          v62.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v53;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v59, 1 << a5);
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v54 = &v59;
          else
            v54 = (std::string *)v59.__r_.__value_.__r.__words[0];
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
          else
            size = v59.__r_.__value_.__l.__size_;
          v56 = std::string::append(&v62, (const std::string::value_type *)v54, size);
          v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          v64 = v56->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          sub_20C6C3E64((os_log_t *)v49, (uint64_t *)__p);
          if (SHIBYTE(v64) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v59.__r_.__value_.__l.__data_);
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v62.__r_.__value_.__l.__data_);
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v61.__r_.__value_.__l.__data_);
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v60.__r_.__value_.__l.__data_);
          v8 = 112;
          goto LABEL_49;
        }
        *v43++ = v48;
        ++v45;
        --v44;
      }
      while (v44);
      v39 += v41;
      v40 += v41;
      v38 += v42;
      if (v39 < v18)
        continue;
      break;
    }
    if ((char **)(a3 + 8) != &v66)
      sub_20BE8B37C((char *)(a3 + 8), v66, (uint64_t)v67, (v67 - v66) >> 2);
    v8 = 0;
    *(float *)(a3 + 4) = 1.0 / v37;
LABEL_49:
    if (v65[0])
    {
      v65[1] = v65[0];
      operator delete(v65[0]);
    }
    if (v66)
    {
      v67 = v66;
      operator delete(v66);
    }
  }
  return v8;
}

void sub_20C6E20D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v35;
  void *v36;

  v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(_QWORD *)(v33 - 120) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v33 - 104);
  if (v36)
  {
    *(_QWORD *)(v33 - 96) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6E2174(uint64_t *a1, _QWORD *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  void *v9;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t *v16;
  int v17;
  int32x2_t v18;
  float32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x2_t *i;
  float v23;
  float v24;
  unsigned int v25;
  float v26;
  int v27;
  float32x2_t v28;
  float32x2_t v29;
  uint64_t *v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::string::size_type size;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  float v52;
  int32x2_t v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  __int128 v64;
  std::string::size_type v65;

  v4 = *a1;
  if ((unint64_t)*a1 < 3 || (int)*a1 % 3 != 0)
  {
    v6 = sub_20C6E7B7C();
    std::to_string(&v63, v4);
    v7 = std::string::insert(&v63, 0, "quantizeColorRGB: Incompatible data dimension: componentCount ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v65 = v7->__r_.__value_.__r.__words[2];
    v64 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0)
      operator delete((void *)v64);
    if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 112;
    v9 = (void *)v63.__r_.__value_.__r.__words[0];
    goto LABEL_62;
  }
  v14 = (unsigned __int8 *)a1[4];
  v63.__r_.__value_.__s.__data_[0] = 0;
  sub_20C6E274C(v14, &v14[v4]);
  if (*v15 < 2u)
  {
    v17 = 1 << a4;
    v52 = (float)v17 + -1.0;
    *(float *)(a3 + 4) = 1.0 / v52;
    LODWORD(v64) = 0;
    sub_20BE89A68(a3 + 8, 3uLL, &v64);
    sub_20BE81ACC((uint64_t)a2, (int)v4);
    if ((int)v4 < 1)
      return 0;
    v20 = 0;
    v21 = a1[4];
    for (i = (int32x2_t *)(*a2 + 4); ; i = (int32x2_t *)((char *)i + 12))
    {
      v18.i8[0] = *(_BYTE *)(v21 + v20);
      v23 = (float)v18.u32[0];
      v19.i8[0] = *(_BYTE *)(v21 + v20 + 1);
      v24 = (float)v19.u32[0];
      *(float *)&v25 = v24 * 0.7152;
      LOBYTE(v25) = *(_BYTE *)(v21 + v20 + 2);
      v26 = (float)v25;
      v27 = llroundf(v52 * (float)((float)((float)(v23 * 0.2126) + (float)(v24 * 0.7152)) + (float)(v26 * 0.0722)));
      v28 = vadd_f32(vmul_n_f32((float32x2_t)0x3F000000BDEAB368, v23), vmul_n_f32((float32x2_t)0xBEE88CE7BEC55326, v24));
      v29 = vmul_n_f32((float32x2_t)0x3D3B98C83F000000, v26);
      v19.i32[0] = vadd_f32(v28, v29).u32[0];
      v19.i32[1] = vsub_f32(v28, v29).i32[1];
      v18 = vcvt_s32_f32(vrnda_f32(vmul_n_f32(vadd_f32(v19, (float32x2_t)0x3F0000003F000000), v52)));
      if (v27 < 0 || v17 <= v27 || v18.i32[0] < 0 || v17 <= v18.i32[0] || v18.i32[1] < 0 || v17 <= v18.i32[1])
        break;
      i[-1].i32[1] = v27;
      *i = v18;
      v20 += 3;
      if ((int)v20 >= (int)v4)
        return 0;
    }
    v53 = v18;
    v31 = sub_20C6E7B7C();
    std::to_string(&v57, v17);
    v32 = std::string::insert(&v57, 0, "quantizeColorRGB: values out of bound qp1=");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v58, ", y=");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v56, v27);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v56;
    else
      v36 = (std::string *)v56.__r_.__value_.__r.__words[0];
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    else
      size = v56.__r_.__value_.__l.__size_;
    v38 = std::string::append(&v59, (const std::string::value_type *)v36, size);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    v40 = std::string::append(&v60, ", u=");
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v55, v53.i32[0]);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v55;
    else
      v42 = (std::string *)v55.__r_.__value_.__r.__words[0];
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    else
      v43 = v55.__r_.__value_.__l.__size_;
    v44 = std::string::append(&v61, (const std::string::value_type *)v42, v43);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v46 = std::string::append(&v62, ", v=");
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v54, v53.i32[1]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v54;
    else
      v48 = (std::string *)v54.__r_.__value_.__r.__words[0];
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    else
      v49 = v54.__r_.__value_.__l.__size_;
    v50 = std::string::append(&v63, (const std::string::value_type *)v48, v49);
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v65 = v50->__r_.__value_.__r.__words[2];
    v64 = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v31, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0)
      operator delete((void *)v64);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    {
      v9 = (void *)v57.__r_.__value_.__r.__words[0];
      goto LABEL_62;
    }
  }
  else
  {
    v16 = sub_20C6E7B7C();
    sub_20BDDC0E4(&v64, "quantizeColorRGB: Input out of range");
    sub_20C6C3E64((os_log_t *)v16, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0)
    {
      v9 = (void *)v64;
LABEL_62:
      operator delete(v9);
    }
  }
  return 112;
}

void sub_20C6E2644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v54 - 89) < 0)
    operator delete(*(void **)(v54 - 112));
  if (*(char *)(v54 - 121) < 0)
    operator delete(*(void **)(v54 - 144));
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v54 - 153) < 0)
    operator delete(*(void **)(v54 - 176));
  if (a54 < 0)
    operator delete(a49);
  if (a28 < 0)
    operator delete(a23);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_20C6E274C(unsigned __int8 *result, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;

  v2 = result;
  if (result != a2 && result + 1 != a2)
  {
    v4 = result[1];
    v5 = *result;
    if (v4 >= v5)
    {
      v6 = result + 1;
    }
    else
    {
      ++result;
      v6 = v2;
    }
    v7 = v2 + 2;
    if (v7 != a2)
    {
      if (v4 <= v5)
        LOBYTE(v8) = v5;
      else
        LOBYTE(v8) = v4;
      if (v4 >= v5)
        LOBYTE(v4) = v5;
      while (v7 + 1 != a2)
      {
        v9 = v7[1];
        v10 = *v7;
        if (v9 >= v10)
        {
          if (v10 < v4)
          {
            LOBYTE(v4) = *v7;
            result = v7;
          }
          v12 = v9 >= v8;
          if (v9 > v8)
            LOBYTE(v8) = v7[1];
          if (v12)
            v6 = v7 + 1;
        }
        else
        {
          v4 = *result;
          if (v9 < v4)
          {
            LOBYTE(v4) = v7[1];
            result = v7 + 1;
          }
          v8 = *v6;
          v11 = v10 >= v8;
          if (v10 > v8)
            LOBYTE(v8) = *v7;
          if (v11)
            v6 = v7;
        }
        v7 += 2;
        if (v7 == a2)
          return result;
      }
      if (*v7 < *result)
        return v7;
    }
  }
  return result;
}

uint64_t sub_20C6E2838(unint64_t *a1, uint64_t *a2, _BYTE *a3, int *a4, char a5)
{
  uint64_t result;
  uint64_t *v6;
  void *__p[2];
  char v8;

  switch(*a3)
  {
    case 0:
      result = sub_20C6E0368(a1, a2);
      break;
    case 1:
      result = sub_20C6E28FC((unsigned int **)a1, a2, (uint64_t)a3, *a4, a5);
      break;
    case 2:
      v6 = sub_20C6E7B7C();
      sub_20BDDC0E4(__p, "Weight quantizeUnitary3DVector: incompatible type unsigned int");
      sub_20C6C3E64((os_log_t *)v6, (uint64_t *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
      goto LABEL_6;
    case 3:
      result = sub_20C6E2D24((uint64_t *)a1, a2, (uint64_t)a3, a5);
      break;
    case 4:
      result = sub_20C6E32F8((uint64_t)a1, a2, (uint64_t)a3, a4, a5);
      break;
    default:
LABEL_6:
      result = 112;
      break;
  }
  return result;
}

uint64_t sub_20C6E28FC(unsigned int **a1, _QWORD *a2, uint64_t a3, int a4, int a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  char *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  float *v19;
  float *v20;
  unsigned int *v21;
  unsigned int v22;
  float v23;
  float v24;
  char *v25;
  float v26;
  float *v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  float *v43;
  unsigned int *v44;
  unsigned int v45;
  int v46;
  uint64_t *v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  std::string::size_type size;
  std::string *v54;
  __int128 v55;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  void *__p[2];
  std::string::size_type v62;
  void *v63[3];
  char *v64;
  char *v65;

  if (a4 < 1)
    return 112;
  v7 = *(unsigned int *)a1;
  v8 = 112;
  if ((int)v7 >= a4 && !((int)v7 % a4))
  {
    sub_20BE81ACC((uint64_t)a2, v7);
    v12 = a4;
    *(float *)v63 = (float)*a1[4];
    sub_20C6CCBE8(&v64, a4, v63);
    *(float *)__p = (float)*a1[4];
    sub_20C6CCBE8(v63, a4, __p);
    v13 = 0;
    v14 = (float *)v63[0];
    v15 = v64;
    v16 = (int)v7;
    v17 = a1[4];
    do
    {
      v18 = a4;
      v19 = v14;
      v20 = (float *)v15;
      v21 = v17;
      do
      {
        v22 = *v21++;
        v23 = (float)v22;
        v24 = *v20;
        if (*v20 >= (float)v22)
          v24 = v23;
        *v20++ = v24;
        if (*v19 > v23)
          v23 = *v19;
        *v19++ = v23;
        --v18;
      }
      while (v18);
      v13 += a4;
      v17 += a4;
    }
    while (v13 < (int)v7);
    v25 = v64;
    v26 = *(float *)v63[0] - *(float *)v64;
    if (a4 >= 2)
    {
      v27 = (float *)((char *)v63[0] + 4);
      v28 = (float *)(v64 + 4);
      v29 = a4 - 1;
      do
      {
        v30 = *v27++;
        v31 = v30;
        v32 = *v28++;
        v33 = v31 - v32;
        if (v33 >= v26)
          v26 = v33;
        --v29;
      }
      while (v29);
    }
    v34 = 1 << a5;
    if (a5)
    {
      if (v26 < 2.2204e-16)
        v26 = 1.0;
      v35 = (float)((float)v34 + -1.0) / v26;
    }
    else
    {
      v35 = 1.0;
    }
    v36 = 0;
    v37 = 0;
    v38 = a1[4];
    v39 = a4;
    v40 = 4 * a4;
    while (2)
    {
      v41 = (int *)(*a2 + v36);
      v42 = v12;
      v43 = (float *)v25;
      v44 = v38;
      do
      {
        v45 = *v44++;
        v46 = llroundf(v35 * (float)((float)v45 - *v43));
        if (v46 < 0 || v34 <= v46)
        {
          v47 = sub_20C6E7B7C();
          std::to_string(&v58, v46);
          v48 = std::string::insert(&v58, 0, "Uniform quantization: values out of bound; qvalue=");
          v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v59.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          v50 = std::string::append(&v59, " and qp1=");
          v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v60.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v57, 1 << a5);
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v52 = &v57;
          else
            v52 = (std::string *)v57.__r_.__value_.__r.__words[0];
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
          else
            size = v57.__r_.__value_.__l.__size_;
          v54 = std::string::append(&v60, (const std::string::value_type *)v52, size);
          v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
          v62 = v54->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v55;
          v54->__r_.__value_.__l.__size_ = 0;
          v54->__r_.__value_.__r.__words[2] = 0;
          v54->__r_.__value_.__r.__words[0] = 0;
          sub_20C6C3E64((os_log_t *)v47, (uint64_t *)__p);
          if (SHIBYTE(v62) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v57.__r_.__value_.__l.__data_);
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v60.__r_.__value_.__l.__data_);
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v59.__r_.__value_.__l.__data_);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v58.__r_.__value_.__l.__data_);
          v8 = 112;
          goto LABEL_49;
        }
        *v41++ = v46;
        ++v43;
        --v42;
      }
      while (v42);
      v37 += v39;
      v38 = (unsigned int *)((char *)v38 + v40);
      v36 += v40;
      if (v37 < v16)
        continue;
      break;
    }
    if ((char **)(a3 + 8) != &v64)
      sub_20BE8B37C((char *)(a3 + 8), v64, (uint64_t)v65, (v65 - v64) >> 2);
    v8 = 0;
    *(float *)(a3 + 4) = 1.0 / v35;
LABEL_49:
    if (v63[0])
    {
      v63[1] = v63[0];
      operator delete(v63[0]);
    }
    if (v64)
    {
      v65 = v64;
      operator delete(v64);
    }
  }
  return v8;
}

void sub_20C6E2C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v35;
  void *v36;

  v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(_QWORD *)(v33 - 120) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v33 - 104);
  if (v36)
  {
    *(_QWORD *)(v33 - 96) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6E2D24(uint64_t *a1, _QWORD *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  void *v9;
  unsigned int *v14;
  _DWORD *v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int32x2_t *i;
  unsigned int *v21;
  float v22;
  float v23;
  float v24;
  int v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  int32x2_t v29;
  uint64_t *v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::string::size_type size;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  float v52;
  int32x2_t v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  __int128 v64;
  std::string::size_type v65;

  v4 = *a1;
  if ((unint64_t)*a1 < 3 || (int)*a1 % 3 != 0)
  {
    v6 = sub_20C6E7B7C();
    std::to_string(&v63, v4);
    v7 = std::string::insert(&v63, 0, "quantizeColorRGB: Incompatible data dimension: componentCount ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v65 = v7->__r_.__value_.__r.__words[2];
    v64 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v6, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0)
      operator delete((void *)v64);
    if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 112;
    v9 = (void *)v63.__r_.__value_.__r.__words[0];
    goto LABEL_62;
  }
  v14 = (unsigned int *)a1[4];
  v63.__r_.__value_.__s.__data_[0] = 0;
  sub_20C6E3470(v14, &v14[v4]);
  if (*v15 < 2u)
  {
    v17 = 1 << a4;
    v52 = (float)v17 + -1.0;
    *(float *)(a3 + 4) = 1.0 / v52;
    LODWORD(v64) = 0;
    sub_20BE89A68(a3 + 8, 3uLL, &v64);
    sub_20BE81ACC((uint64_t)a2, (int)v4);
    if ((int)v4 < 1)
      return 0;
    v18 = 0;
    v19 = a1[4];
    for (i = (int32x2_t *)(*a2 + 4); ; i = (int32x2_t *)((char *)i + 12))
    {
      v21 = (unsigned int *)(v19 + 4 * v18);
      v22 = (float)*v21;
      v23 = (float)v21[1];
      v24 = (float)v21[2];
      v25 = llroundf(v52 * (float)((float)((float)(v22 * 0.2126) + (float)(v23 * 0.7152)) + (float)(v24 * 0.0722)));
      v26 = vadd_f32(vmul_n_f32((float32x2_t)0x3F000000BDEAB368, v22), vmul_n_f32((float32x2_t)0xBEE88CE7BEC55326, v23));
      v27 = vmul_n_f32((float32x2_t)0x3D3B98C83F000000, v24);
      v28.i32[0] = vadd_f32(v26, v27).u32[0];
      v28.i32[1] = vsub_f32(v26, v27).i32[1];
      v29 = vcvt_s32_f32(vrnda_f32(vmul_n_f32(vadd_f32(v28, (float32x2_t)0x3F0000003F000000), v52)));
      if (v25 < 0 || v17 <= v25 || v29.i32[0] < 0 || v17 <= v29.i32[0] || v29.i32[1] < 0 || v17 <= v29.i32[1])
        break;
      i[-1].i32[1] = v25;
      *i = v29;
      v18 += 3;
      if ((int)v18 >= (int)v4)
        return 0;
    }
    v53 = v29;
    v31 = sub_20C6E7B7C();
    std::to_string(&v57, v17);
    v32 = std::string::insert(&v57, 0, "quantizeColorRGB: values out of bound qp1=");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v58, ", y=");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v56, v25);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v56;
    else
      v36 = (std::string *)v56.__r_.__value_.__r.__words[0];
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    else
      size = v56.__r_.__value_.__l.__size_;
    v38 = std::string::append(&v59, (const std::string::value_type *)v36, size);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    v40 = std::string::append(&v60, ", u=");
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v55, v53.i32[0]);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v55;
    else
      v42 = (std::string *)v55.__r_.__value_.__r.__words[0];
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    else
      v43 = v55.__r_.__value_.__l.__size_;
    v44 = std::string::append(&v61, (const std::string::value_type *)v42, v43);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v46 = std::string::append(&v62, ", v=");
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v54, v53.i32[1]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v54;
    else
      v48 = (std::string *)v54.__r_.__value_.__r.__words[0];
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    else
      v49 = v54.__r_.__value_.__l.__size_;
    v50 = std::string::append(&v63, (const std::string::value_type *)v48, v49);
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v65 = v50->__r_.__value_.__r.__words[2];
    v64 = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    sub_20C6C3E64((os_log_t *)v31, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0)
      operator delete((void *)v64);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    {
      v9 = (void *)v57.__r_.__value_.__r.__words[0];
      goto LABEL_62;
    }
  }
  else
  {
    v16 = sub_20C6E7B7C();
    sub_20BDDC0E4(&v64, "quantizeColorRGB: Input out of range");
    sub_20C6C3E64((os_log_t *)v16, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0)
    {
      v9 = (void *)v64;
LABEL_62:
      operator delete(v9);
    }
  }
  return 112;
}

void sub_20C6E31F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v54 - 89) < 0)
    operator delete(*(void **)(v54 - 112));
  if (*(char *)(v54 - 121) < 0)
    operator delete(*(void **)(v54 - 144));
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v54 - 153) < 0)
    operator delete(*(void **)(v54 - 176));
  if (a54 < 0)
    operator delete(a49);
  if (a28 < 0)
    operator delete(a23);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6E32F8(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, char a5)
{
  unint64_t v6;
  uint64_t result;
  int v9;
  uint64_t v11;
  unsigned int v12;
  float v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *v22;
  void *__p[2];
  char v24;

  v6 = *a4;
  if ((int)v6 < 2)
    return 112;
  v9 = *(_DWORD *)a1;
  result = 112;
  if ((int)v6 <= v9 && !(v9 % (int)v6))
  {
    v11 = (v6 - 1);
    v12 = v9 / v6;
    v13 = (float)(1 << a5) + -1.0;
    *(float *)(a3 + 4) = 1.0 / v13;
    LODWORD(__p[0]) = 0;
    sub_20BE89A68(a3 + 8, v6, __p);
    sub_20BE81ACC((uint64_t)a2, (int)(v12 * v11));
    LODWORD(v14) = 0;
    v15 = 0;
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *a2;
    while (1)
    {
      v14 = (int)v14;
      v18 = 0.0;
      v19 = v11;
      v20 = (unsigned int *)(v16 + 4 * v15);
      do
      {
        v21 = *v20++;
        v18 = v18 + (float)v21;
        *(_DWORD *)(v17 + 4 * v14++) = llroundf(v13 * (float)v21);
        --v19;
      }
      while (v19);
      if (vabds_f32(1.0, v18 + (float)*(unsigned int *)(v16 + 4 * (v15 + (int)v11))) > 0.00001)
        break;
      v15 += *a4;
      if (v15 >= v9)
      {
        result = 0;
        --*a4;
        return result;
      }
    }
    v22 = sub_20C6E7B7C();
    sub_20BDDC0E4(__p, "Weight quantization: sum too far from 1.0");
    sub_20C6C3E64((os_log_t *)v22, (uint64_t *)__p);
    if (v24 < 0)
      operator delete(__p[0]);
    return 112;
  }
  return result;
}

unsigned int *sub_20C6E3470(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;

  v2 = result;
  if (result != a2 && result + 1 != a2)
  {
    v5 = *result;
    v4 = result[1];
    if (v4 < *result)
      ++result;
    v6 = v4 >= v5 ? v2 + 1 : v2;
    v7 = v2 + 2;
    if (v7 != a2)
    {
      if (v4 <= v5)
        v8 = v5;
      else
        v8 = v4;
      if (v4 >= v5)
        v4 = v5;
      while (v7 + 1 != a2)
      {
        v10 = *v7;
        v9 = v7[1];
        if (v9 >= *v7)
        {
          if (v10 < v4)
          {
            v4 = *v7;
            result = v7;
          }
          v11 = v9 >= v8;
          if (v9 > v8)
            v8 = v7[1];
          if (v11)
            v6 = v7 + 1;
        }
        else
        {
          v4 = *result;
          if (v9 < *result)
          {
            v4 = v7[1];
            result = v7 + 1;
          }
          v8 = *v6;
          if (v10 > *v6)
            v8 = *v7;
          if (v10 >= *v6)
            v6 = v7;
        }
        v7 += 2;
        if (v7 == a2)
          return result;
      }
      if (*v7 < *result)
        return v7;
    }
  }
  return result;
}

uint64_t sub_20C6E354C(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      sub_20C6E35C8((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_20C6E35B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BDECAB8(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6E35C8(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)sub_20BDEC0F8(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_20C6E3648((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

_BYTE *sub_20C6E3648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v6 + 7) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C6E36D0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BDEEB58(v3, v2);
  _Unwind_Resume(a1);
}

char *sub_20C6E36EC(std::string *__str, std::string *this)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  const std::string *EmptyString;
  unsigned int *v6;
  unsigned int v7;
  void **p_size;
  char *result;
  __int128 v10;
  std::string::size_type v11;

  std::string::operator=(this, __str);
  std::string::operator=(this + 1, (std::string *)((char *)__str + 112));
  sub_20C6C5D7C(__str[5].__r_.__value_.__s.__data_[16], (unsigned int **)&v10);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const std::string *)((v10 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  std::string::operator=(this + 2, EmptyString);
  if ((v10 & 7) != 0)
  {
    v6 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  LODWORD(this[3].__r_.__value_.__l.__data_) = __str[6].__r_.__value_.__l.__data_;
  this[3].__r_.__value_.__s.__data_[4] = __str[6].__r_.__value_.__s.__data_[4];
  sub_20BDDC0E4(&v10, off_24C5420F8[__str[3].__r_.__value_.__s.__data_[0]]);
  p_size = (void **)&this[3].__r_.__value_.__l.__size_;
  if (this[4].__r_.__value_.__s.__data_[7] < 0)
    operator delete(*p_size);
  *(_OWORD *)p_size = v10;
  this[4].__r_.__value_.__r.__words[0] = v11;
  LODWORD(this[4].__r_.__value_.__r.__words[1]) = HIDWORD(__str[3].__r_.__value_.__r.__words[0]);
  result = &this[4].__r_.__value_.__s.__data_[16];
  if (&this[4].__r_.__value_.__r.__words[2] != &__str[3].__r_.__value_.__r.__words[1])
    return sub_20BE8B37C(result, (char *)__str[3].__r_.__value_.__l.__size_, __str[3].__r_.__value_.__r.__words[2], (uint64_t)(__str[3].__r_.__value_.__r.__words[2] - __str[3].__r_.__value_.__l.__size_) >> 2);
  return result;
}

void *sub_20C6E381C()
{
  unsigned __int8 v0;
  uint64_t v2;
  int v3[2];
  _QWORD v4[3];
  int v5;
  _QWORD v6[3];
  int v7;
  _QWORD v8[3];
  int v9;
  _QWORD v10[3];
  int v11;
  _QWORD v12[3];
  int v13;
  _QWORD v14[3];
  int v15;
  _QWORD v16[3];
  int v17;
  _QWORD v18[3];
  int v19;
  _QWORD v20[3];
  int v21;
  _QWORD v22[3];
  int v23;
  _QWORD v24[3];
  int v25;
  _QWORD v26[3];
  int v27;
  _QWORD v28[3];
  int v29;
  _QWORD v30[3];
  int v31;
  _QWORD v32[4];

  v32[3] = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25498C098);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25498C098))
  {
    v3[0] = 0;
    sub_20BDDC0E4(v4, "nm");
    v5 = 2;
    sub_20BDDC0E4(v6, "fg2ss");
    v7 = 1;
    sub_20BDDC0E4(v8, "ssn");
    v9 = 3;
    sub_20BDDC0E4(v10, "fn");
    v11 = 4;
    sub_20BDDC0E4(v12, "sc");
    v13 = 5;
    sub_20BDDC0E4(v14, "sh");
    v15 = 6;
    sub_20BDDC0E4(v16, "attr");
    v17 = 7;
    sub_20BDDC0E4(v18, "nm");
    v19 = 8;
    sub_20BDDC0E4(v20, "tp");
    v21 = 9;
    sub_20BDDC0E4(v22, "int");
    v23 = 10;
    sub_20BDDC0E4(v24, "usdCPV");
    v25 = 11;
    sub_20BDDC0E4(v26, "isPV");
    v27 = 12;
    sub_20BDDC0E4(v28, "fn");
    v29 = 13;
    sub_20BDDC0E4(v30, "sc");
    v31 = 14;
    sub_20BDDC0E4(v32, "sh");
    sub_20C6E7220((uint64_t)&unk_25498C080, v3, 15);
    v2 = 120;
    do
    {
      if (SHIBYTE(v3[v2 - 1]) < 0)
        operator delete(*(void **)&v3[v2 - 6]);
      v2 -= 8;
    }
    while (v2 * 4);
    __cxa_guard_release(&qword_25498C098);
  }
  return &unk_25498C080;
}

void sub_20C6E3AA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 480;
  while (1)
  {
    if (*(char *)(v1 + v3 - 1) < 0)
      operator delete(*(void **)(v1 + v3 - 24));
    v3 -= 32;
    if (!v3)
    {
      __cxa_guard_abort(&qword_25498C098);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C6E3B38()
{
  JUMPOUT(0x20C6E3B24);
}

uint64_t sub_20C6E3B40(uint64_t a1, char *a2, char *a3)
{
  uint64_t *v4;
  uint64_t v5;
  const void ***JsObject;
  int v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v17;
  std::__shared_weak_count *v18;
  char v19;
  void *__p[2];
  char v21;
  unint64_t *v22;
  std::__shared_weak_count *v23;

  pxrInternal__aapl__pxrReserved__::JsParseString(a2, 0, a3, (pxrInternal__aapl__pxrReserved__::JsValue *)&v22);
  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v22))
  {
    JsObject = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v22);
    sub_20BF1BE5C((uint64_t *)__p, JsObject);
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v17, __p);
    v7 = sub_20C6E3D10(a1, (unint64_t **)&v17);
    v8 = v7;
    v9 = v18;
    if (!v18)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v8)
        goto LABEL_10;
    }
    else
    {
LABEL_9:
      if (v7)
      {
LABEL_10:
        v12 = sub_20C6E7B7C();
        std::operator+<char>();
        sub_20C6C3E64((os_log_t *)v12, (uint64_t *)&v17);
        if (v19 < 0)
          operator delete(v17);
        v5 = 301;
        goto LABEL_15;
      }
    }
    v5 = 0;
LABEL_15:
    sub_20BE78E5C((uint64_t)__p, (_QWORD *)__p[1]);
    goto LABEL_16;
  }
  v4 = sub_20C6E7B7C();
  std::operator+<char>();
  sub_20C6C3E64((os_log_t *)v4, (uint64_t *)__p);
  if (v21 < 0)
    operator delete(__p[0]);
  v5 = 300;
LABEL_16:
  v13 = v23;
  if (v23)
  {
    v14 = (unint64_t *)&v23->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v5;
}

void sub_20C6E3CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  _QWORD *v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD *);
  v8 = va_arg(va1, _QWORD);
  sub_20BE78E5C((uint64_t)va, v7);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6E3D10(uint64_t a1, unint64_t **this)
{
  const void ***JsObject;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  const std::string *String;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  const std::string *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  float Real;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD **JsArray;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  float v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  _QWORD **v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t **v42;
  unint64_t **v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t ***v47;
  uint64_t **v48;
  uint64_t **v49;
  uint64_t *v50;
  unint64_t *v51;
  unint64_t v52;
  int Int;
  _DWORD *v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  _QWORD **v59;
  uint64_t v60;
  uint64_t i;
  uint64_t *v62;
  uint64_t *v63;
  void **v64;
  void **v65;
  unint64_t *v66;
  unint64_t *v67;
  unint64_t v68;
  __int128 *v69;
  uint64_t *v70;
  uint64_t *v71;
  _QWORD **v72;
  int v73;
  void **v74;
  void **v75;
  __int128 *v76;
  unint64_t *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  void *__p[2];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  void *v95;
  __int128 v96;
  uint64_t *v97[2];
  void *v98;
  void **v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::string v106;
  uint64_t *v107;
  _QWORD *v108[2];
  std::string v109;
  float v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t *v117;
  _QWORD *v118[4];

  if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)this))
  {
    JsObject = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(this);
    sub_20BF1BE5C((uint64_t *)&v117, JsObject);
    sub_20C6E381C();
    LODWORD(v106.__r_.__value_.__l.__data_) = 0;
    v5 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v106);
    if (v118 == (_QWORD **)sub_20BDEEBA4((uint64_t)&v117, (const void **)v5))
    {
      v37 = sub_20C6E7B7C();
      sub_20C6E381C();
      LODWORD(__p[0]) = 0;
      sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)__p);
      std::operator+<char>();
    }
    else
    {
      sub_20C6E381C();
      LODWORD(v106.__r_.__value_.__l.__data_) = 6;
      v6 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v106);
      if (v118 != (_QWORD **)sub_20BDEEBA4((uint64_t)&v117, (const void **)v6))
      {
        memset(&v106, 0, sizeof(v106));
        v108[0] = 0;
        v108[1] = 0;
        v107 = (uint64_t *)v108;
        memset(&v109, 0, sizeof(v109));
        v111 = 0u;
        v112 = 0u;
        v113 = 0u;
        v114 = 0u;
        v115 = 0u;
        v116 = 0u;
        sub_20C6E381C();
        LODWORD(v103) = 0;
        __p[0] = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v103);
        v7 = sub_20C6E750C(&v117, (const void **)__p[0], (uint64_t)&unk_20CAC184C, (__int128 **)__p);
        if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v7 + 7)))
        {
          sub_20C6E381C();
          LODWORD(v103) = 0;
          __p[0] = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v103);
          v8 = sub_20C6E750C(&v117, (const void **)__p[0], (uint64_t)&unk_20CAC184C, (__int128 **)__p);
          String = (const std::string *)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(v8 + 7));
          std::string::operator=(&v106, String);
          sub_20C6E381C();
          LODWORD(v103) = 3;
          v10 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v103);
          if (v118 == (_QWORD **)sub_20BDEEBA4((uint64_t)&v117, (const void **)v10)
            || (sub_20C6E381C(),
                LODWORD(v98) = 3,
                __p[0] = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v98),
                v11 = sub_20C6E750C(&v117, (const void **)__p[0], (uint64_t)&unk_20CAC184C, (__int128 **)__p),
                !pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v11 + 7))))
          {
            v38 = sub_20C6E7B7C();
            sub_20C6E381C();
            LODWORD(v103) = 3;
            sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v103);
            std::operator+<char>();
          }
          else
          {
            sub_20C6E381C();
            LODWORD(v103) = 3;
            __p[0] = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v103);
            v12 = sub_20C6E750C(&v117, (const void **)__p[0], (uint64_t)&unk_20CAC184C, (__int128 **)__p);
            v13 = (const std::string *)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(v12 + 7));
            std::string::operator=(&v109, v13);
            sub_20C6E381C();
            LODWORD(v103) = 4;
            v14 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v103);
            if (v118 == (_QWORD **)sub_20BDEEBA4((uint64_t)&v117, (const void **)v14)
              || (sub_20C6E381C(),
                  LODWORD(v98) = 4,
                  __p[0] = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v98),
                  v15 = sub_20C6E750C(&v117, (const void **)__p[0], (uint64_t)&unk_20CAC184C, (__int128 **)__p),
                  !pxrInternal__aapl__pxrReserved__::JsValue::IsReal((pxrInternal__aapl__pxrReserved__::JsValue *)(v15 + 7))))
            {
              v38 = sub_20C6E7B7C();
              sub_20C6E381C();
              LODWORD(v103) = 4;
              sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v103);
              std::operator+<char>();
            }
            else
            {
              sub_20C6E381C();
              LODWORD(v103) = 4;
              __p[0] = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v103);
              v16 = sub_20C6E750C(&v117, (const void **)__p[0], (uint64_t)&unk_20CAC184C, (__int128 **)__p);
              Real = pxrInternal__aapl__pxrReserved__::JsValue::GetReal((uint64_t **)v16 + 7);
              v110 = Real;
              sub_20C6E381C();
              LODWORD(v103) = 5;
              v18 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v103);
              if (v118 != (_QWORD **)sub_20BDEEBA4((uint64_t)&v117, (const void **)v18))
              {
                sub_20C6E381C();
                LODWORD(v98) = 5;
                __p[0] = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v98);
                v19 = sub_20C6E750C(&v117, (const void **)__p[0], (uint64_t)&unk_20CAC184C, (__int128 **)__p);
                if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v19 + 7)))
                {
                  sub_20C6E381C();
                  LODWORD(v98) = 5;
                  __p[0] = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v98);
                  v20 = sub_20C6E750C(&v117, (const void **)__p[0], (uint64_t)&unk_20CAC184C, (__int128 **)__p);
                  JsArray = (_QWORD **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v20 + 7);
                  v103 = 0;
                  v104 = 0;
                  v105 = 0;
                  sub_20BF1C0B0((char *)&v103, *JsArray, JsArray[1], ((char *)JsArray[1] - (char *)*JsArray) >> 4);
                  *((_QWORD *)&v111 + 1) = v111;
                  v22 = v103;
                  v23 = v104;
                  if (v103 != v104)
                  {
                    while (1)
                    {
                      v24 = *(_QWORD *)(v22 + 8);
                      v98 = *(void **)v22;
                      v99 = (void **)v24;
                      if (v24)
                      {
                        v25 = (unint64_t *)(v24 + 8);
                        do
                          v26 = __ldxr(v25);
                        while (__stxr(v26 + 1, v25));
                      }
                      if (!pxrInternal__aapl__pxrReserved__::JsValue::IsReal((pxrInternal__aapl__pxrReserved__::JsValue *)&v98))
                        break;
                      v27 = pxrInternal__aapl__pxrReserved__::JsValue::GetReal((uint64_t **)&v98);
                      *(float *)__p = v27;
                      sub_20C6E61D8((uint64_t)&v111, __p);
                      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v98);
                      v22 += 16;
                      if (v22 == v23)
                        goto LABEL_17;
                    }
                    v40 = sub_20C6E7B7C();
                    sub_20C6E381C();
                    LODWORD(v95) = 5;
                    sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v95);
                    std::operator+<char>();
                    sub_20C6C3E64((os_log_t *)v40, (uint64_t *)__p);
                    if (SBYTE7(v84) < 0)
                      operator delete(__p[0]);
                    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v98);
                    goto LABEL_107;
                  }
LABEL_17:
                  v28 = *(unsigned __int8 *)(a1 + 220);
                  if (v28 > 1 || v28 == 1 && *(unsigned __int8 *)(a1 + 221) >= 5u)
                  {
                    sub_20C6E381C();
                    LODWORD(__p[0]) = 2;
                    v29 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)__p);
                    if (v118 == (_QWORD **)sub_20BDEEBA4((uint64_t)&v117, (const void **)v29)
                      || (sub_20C6E381C(),
                          LODWORD(v95) = 2,
                          v98 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v95),
                          v30 = sub_20C6E750C(&v117, (const void **)v98, (uint64_t)&unk_20CAC184C, (__int128 **)&v98),
                          !pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v30 + 7))))
                    {
                      v41 = sub_20C6E7B7C();
                      sub_20C6E381C();
                      LODWORD(v98) = 2;
                      sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v98);
                      std::operator+<char>();
LABEL_97:
                      sub_20C6C3E64((os_log_t *)v41, (uint64_t *)__p);
                      if (SBYTE7(v84) < 0)
                        operator delete(__p[0]);
                      goto LABEL_107;
                    }
                    sub_20C6E381C();
                    LODWORD(v95) = 2;
                    v98 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v95);
                    v31 = sub_20C6E750C(&v117, (const void **)v98, (uint64_t)&unk_20CAC184C, (__int128 **)&v98);
                    v32 = (_QWORD **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v31 + 7);
                    __p[0] = 0;
                    __p[1] = 0;
                    *(_QWORD *)&v84 = 0;
                    sub_20BF1C0B0((char *)__p, *v32, v32[1], ((char *)v32[1] - (char *)*v32) >> 4);
                    v33 = (_QWORD *)*((_QWORD *)&v114 + 1);
                    v34 = (_QWORD *)v114;
                    while (v33 != v34)
                    {
                      v33 -= 3;
                      sub_20BEB422C(v33);
                    }
                    *((_QWORD *)&v114 + 1) = v34;
                    v42 = (unint64_t **)__p[0];
                    v43 = (unint64_t **)__p[1];
                    if (__p[0] != __p[1])
                    {
                      while (2)
                      {
                        v44 = v42[1];
                        v101 = *v42;
                        v102 = v44;
                        if (v44)
                        {
                          v45 = v44 + 1;
                          do
                            v46 = __ldxr(v45);
                          while (__stxr(v46 + 1, v45));
                        }
                        if (!pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)&v101))
                        {
                          v81 = sub_20C6E7B7C();
                          sub_20C6E381C();
                          LODWORD(v95) = 2;
                          sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v95);
                          std::operator+<char>();
                          sub_20C6C3E64((os_log_t *)v81, (uint64_t *)&v98);
                          if (SHIBYTE(v100) < 0)
                            operator delete(v98);
LABEL_77:
                          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v101);
                          goto LABEL_106;
                        }
                        v98 = &v98;
                        v99 = &v98;
                        v100 = 0;
                        v47 = (uint64_t ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(&v101);
                        v48 = *v47;
                        v49 = v47[1];
                        while (v48 != v49)
                        {
                          v50 = v48[1];
                          v97[0] = *v48;
                          v97[1] = v50;
                          if (v50)
                          {
                            v51 = (unint64_t *)(v50 + 1);
                            do
                              v52 = __ldxr(v51);
                            while (__stxr(v52 + 1, v51));
                          }
                          if (!pxrInternal__aapl__pxrReserved__::JsValue::IsInt((pxrInternal__aapl__pxrReserved__::JsValue *)v97))
                          {
                            v62 = sub_20C6E7B7C();
                            sub_20C6E381C();
                            v94 = 2;
                            sub_20C6E5F60((uint64_t)&unk_25498C080, &v94);
                            std::operator+<char>();
                            sub_20C6C3E64((os_log_t *)v62, (uint64_t *)&v95);
                            if (SHIBYTE(v96) < 0)
                              operator delete(v95);
                            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v97);
                            sub_20BEB422C(&v98);
                            goto LABEL_77;
                          }
                          Int = pxrInternal__aapl__pxrReserved__::JsValue::GetInt(v97);
                          v54 = operator new(0x18uLL);
                          v54[4] = Int;
                          v55 = v98;
                          *(_QWORD *)v54 = v98;
                          *((_QWORD *)v54 + 1) = &v98;
                          v55[1] = v54;
                          v98 = v54;
                          ++v100;
                          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v97);
                          v48 += 2;
                        }
                        sub_20C6E62BC((uint64_t)&v114, (uint64_t)&v98);
                        sub_20BEB422C(&v98);
                        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v101);
                        v42 += 2;
                        if (v42 != v43)
                          continue;
                        break;
                      }
                    }
                    sub_20C6E381C();
                    LODWORD(v98) = 1;
                    v56 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v98);
                    if (v118 == (_QWORD **)sub_20BDEEBA4((uint64_t)&v117, (const void **)v56)
                      || (sub_20C6E381C(),
                          LODWORD(v101) = 1,
                          v95 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v101),
                          v57 = sub_20C6E750C(&v117, (const void **)v95, (uint64_t)&unk_20CAC184C, (__int128 **)&v95),
                          !pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v57 + 7))))
                    {
                      v63 = sub_20C6E7B7C();
                      sub_20C6E381C();
                      LODWORD(v95) = 1;
                      sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v95);
                      std::operator+<char>();
                      sub_20C6C3E64((os_log_t *)v63, (uint64_t *)&v98);
                      if (SHIBYTE(v100) < 0)
                        operator delete(v98);
LABEL_106:
                      v98 = __p;
                      sub_20BDE9EB0((void ***)&v98);
LABEL_107:
                      v36 = 301;
LABEL_108:
                      __p[0] = &v103;
                      sub_20BDE9EB0((void ***)__p);
LABEL_40:
                      __p[0] = (char *)&v115 + 8;
                      sub_20BDE5038((void ***)__p);
                      __p[0] = &v114;
                      sub_20C6CC41C((void ***)__p);
                      if (*((_QWORD *)&v112 + 1))
                      {
                        *(_QWORD *)&v113 = *((_QWORD *)&v112 + 1);
                        operator delete(*((void **)&v112 + 1));
                      }
                      if ((_QWORD)v111)
                      {
                        *((_QWORD *)&v111 + 1) = v111;
                        operator delete((void *)v111);
                      }
                      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v109.__r_.__value_.__l.__data_);
                      sub_20C6CBEC8((uint64_t)&v107, v108[0]);
                      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v106.__r_.__value_.__l.__data_);
LABEL_48:
                      sub_20BE78E5C((uint64_t)&v117, v118[0]);
                      return v36;
                    }
                    sub_20C6E381C();
                    LODWORD(v101) = 1;
                    v95 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v101);
                    v58 = sub_20C6E750C(&v117, (const void **)v95, (uint64_t)&unk_20CAC184C, (__int128 **)&v95);
                    v59 = (_QWORD **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v58 + 7);
                    v98 = 0;
                    v99 = 0;
                    v100 = 0;
                    sub_20BF1C0B0((char *)&v98, *v59, v59[1], ((char *)v59[1] - (char *)*v59) >> 4);
                    v60 = *((_QWORD *)&v115 + 1);
                    for (i = v116; i != v60; i -= 24)
                    {
                      if (*(char *)(i - 1) < 0)
                        operator delete(*(void **)(i - 24));
                    }
                    *(_QWORD *)&v116 = v60;
                    v64 = (void **)v98;
                    v65 = v99;
                    if (v98 != v99)
                    {
                      while (1)
                      {
                        v66 = (unint64_t *)v64[1];
                        v101 = (unint64_t *)*v64;
                        v102 = v66;
                        if (v66)
                        {
                          v67 = v66 + 1;
                          do
                            v68 = __ldxr(v67);
                          while (__stxr(v68 + 1, v67));
                        }
                        if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)&v101))
                          break;
                        v69 = (__int128 *)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)&v101);
                        sub_20C6E630C((uint64_t *)&v115 + 1, v69);
                        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v101);
                        v64 += 2;
                        if (v64 == v65)
                          goto LABEL_86;
                      }
                      v82 = sub_20C6E7B7C();
                      sub_20C6E381C();
                      LODWORD(v97[0]) = 1;
                      sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)v97);
                      std::operator+<char>();
                      sub_20C6C3E64((os_log_t *)v82, (uint64_t *)&v95);
                      if (SHIBYTE(v96) < 0)
                        operator delete(v95);
                      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v101);
                      v95 = &v98;
                      sub_20BDE9EB0((void ***)&v95);
                      goto LABEL_106;
                    }
LABEL_86:
                    v95 = &v98;
                    sub_20BDE9EB0((void ***)&v95);
                    v98 = __p;
                    sub_20BDE9EB0((void ***)&v98);
                  }
                  sub_20C6E381C();
                  LODWORD(__p[0]) = 6;
                  v98 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)__p);
                  v70 = sub_20C6E750C(&v117, (const void **)v98, (uint64_t)&unk_20CAC184C, (__int128 **)&v98);
                  if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v70 + 7)))
                  {
                    sub_20C6E381C();
                    LODWORD(__p[0]) = 6;
                    v95 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)__p);
                    v71 = sub_20C6E750C(&v117, (const void **)v95, (uint64_t)&unk_20CAC184C, (__int128 **)&v95);
                    v72 = (_QWORD **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v71 + 7);
                    v98 = 0;
                    v99 = 0;
                    v100 = 0;
                    v73 = sub_20BF1C0B0((char *)&v98, *v72, v72[1], ((char *)v72[1] - (char *)*v72) >> 4);
                    v96 = 0uLL;
                    v95 = &v96;
                    v74 = (void **)v98;
                    v75 = v99;
                    v76 = &v96;
                    if (v98 == v99)
                    {
LABEL_95:
                      sub_20C6E761C(&v107, v76, &v96);
                      sub_20C6E60F0(a1, (uint64_t)&v106);
                      v36 = 0;
                    }
                    else
                    {
                      while (1)
                      {
                        v77 = (unint64_t *)v74[1];
                        v101 = (unint64_t *)*v74;
                        v102 = v77;
                        if (v77)
                        {
                          v78 = v77 + 1;
                          do
                            v79 = __ldxr(v78);
                          while (__stxr(v79 + 1, v78));
                        }
                        v88 = 0;
                        v89 = 0;
                        v90 = 0;
                        v92 = 0;
                        v93 = 0;
                        v91 = 0;
                        *(_OWORD *)__p = 0u;
                        v84 = 0u;
                        v85 = 0u;
                        v86 = 0u;
                        v87 = 0;
                        if (sub_20C6E6348(v73, &v101, (uint64_t)__p))
                          break;
                        v97[0] = (uint64_t *)__p;
                        v80 = sub_20C6CE518((uint64_t **)&v95, (const void **)__p, (uint64_t)&unk_20CAC184C, (__int128 **)v97);
                        sub_20C6E71A0((uint64_t)(v80 + 7), (uint64_t)__p);
                        sub_20C6CBA78((uint64_t)__p);
                        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v101);
                        v74 += 2;
                        if (v74 == v75)
                        {
                          v76 = (__int128 *)v95;
                          goto LABEL_95;
                        }
                      }
                      sub_20C6CBA78((uint64_t)__p);
                      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v101);
                      v36 = 301;
                    }
                    sub_20C6CBEC8((uint64_t)&v95, (_QWORD *)v96);
                    __p[0] = &v98;
                    sub_20BDE9EB0((void ***)__p);
                    goto LABEL_108;
                  }
                  v41 = sub_20C6E7B7C();
                  sub_20C6E381C();
                  LODWORD(v98) = 6;
                  sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v98);
                  std::operator+<char>();
                  goto LABEL_97;
                }
              }
              v38 = sub_20C6E7B7C();
              sub_20C6E381C();
              LODWORD(v103) = 5;
              sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v103);
              std::operator+<char>();
            }
          }
        }
        else
        {
          v38 = sub_20C6E7B7C();
          sub_20C6E381C();
          LODWORD(v103) = 0;
          sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v103);
          std::operator+<char>();
        }
        sub_20C6C3E64((os_log_t *)v38, (uint64_t *)__p);
        if (SBYTE7(v84) < 0)
          operator delete(__p[0]);
        v36 = 301;
        goto LABEL_40;
      }
      v37 = sub_20C6E7B7C();
      sub_20C6E381C();
      LODWORD(__p[0]) = 6;
      sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)__p);
      std::operator+<char>();
    }
    sub_20C6C3E64((os_log_t *)v37, (uint64_t *)&v106);
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
    v36 = 301;
    goto LABEL_48;
  }
  v35 = sub_20C6E7B7C();
  sub_20BDDC0E4(&v106, "parseJsonMesh: Not an object!");
  sub_20C6C3E64((os_log_t *)v35, (uint64_t *)&v106);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  return 301;
}

void sub_20C6E4BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void ****a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void ***a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a35);
  a27 = &a32;
  sub_20BDE9EB0((void ***)&a27);
  a32 = &a9;
  sub_20BDE9EB0((void ***)&a32);
  a9 = (void **)&a37;
  sub_20BDE9EB0(&a9);
  sub_20C6CB268((uint64_t)&a40);
  sub_20BE78E5C(v40 - 120, *(_QWORD **)(v40 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_20C6E4DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  char *v15;
  void *__p[2];
  char v17;

  if (a3 < 1)
    goto LABEL_18;
  **(_BYTE **)(a1 + 192) = *(_BYTE *)a2;
  if (a3 == 1)
    goto LABEL_18;
  *(_BYTE *)(*(_QWORD *)(a1 + 192) + 1) = *(_BYTE *)(a2 + 1);
  if (a3 == 2)
    goto LABEL_18;
  *(_BYTE *)(*(_QWORD *)(a1 + 192) + 2) = *(_BYTE *)(a2 + 2);
  if (a3 == 3
    || (*(_BYTE *)(*(_QWORD *)(a1 + 192) + 3) = *(_BYTE *)(a2 + 3), (a3 & 0xFFFFFFFFFFFFFFFCLL) == 4)
    || (*(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 4), a3 == 8)
    || (*(_BYTE *)(a1 + 220) = *(_BYTE *)(a2 + 8), a3 == 9)
    || (*(_BYTE *)(a1 + 221) = *(_BYTE *)(a2 + 9), (a3 & 0xFFFFFFFFFFFFFFFELL) == 0xA)
    || (*(_WORD *)(a1 + 222) = *(_WORD *)(a2 + 10), (a3 & 0xFFFFFFFFFFFFFFFCLL) == 0xC)
    || (*(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 12), v5 = (char *)(a2 + 16), a2 == -16))
  {
LABEL_18:
    v14 = sub_20C6E7B7C();
    v15 = "read: bytestream issue, JSON not valid!";
  }
  else
  {
    result = sub_20C6E4F94(a1);
    if ((_DWORD)result)
      return result;
    v7 = *(_QWORD *)(a1 + 232);
    v8 = *(unsigned int *)(a1 + 224) - v7;
    v9 = a3 - 16 - v8;
    if (v9 >= 0)
      v10 = *(unsigned int *)(a1 + 224) - v7;
    else
      v10 = 0;
    if (((v10 | v9) & 0x8000000000000000) == 0)
    {
      v11 = &v5[v8];
      sub_20BDFC7D8(__p, v5, v10);
      *(_QWORD *)(a1 + 176) = v11;
      *(_QWORD *)(a1 + 184) = v9;
      result = sub_20C6E3B40(a1, (char *)__p, v12);
      if (v17 < 0)
      {
        v13 = result;
        operator delete(__p[0]);
        return v13;
      }
      return result;
    }
    v14 = sub_20C6E7B7C();
    v15 = "read: bytestream or JSON data issue, JSON not valid!";
  }
  sub_20BDDC0E4(__p, v15);
  sub_20C6C3E64((os_log_t *)v14, (uint64_t *)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  return 300;
}

void sub_20C6E4F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6E4F94(uint64_t a1)
{
  _BYTE *v1;
  uint64_t *v2;
  char *v3;
  uint64_t *v5;
  void *__p[2];
  char v7;

  v1 = *(_BYTE **)(a1 + 192);
  if (*v1 != 71 || v1[1] != 67 || v1[2] != 76 || v1[3] != 74)
  {
    v2 = sub_20C6E7B7C();
    v3 = "checkJsonCompatible: Incorrect magic key!";
LABEL_11:
    sub_20BDDC0E4(__p, v3);
    sub_20C6C3E64((os_log_t *)v2, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    return 300;
  }
  if (*(_BYTE *)(a1 + 220) && *(_BYTE *)(a1 + 220) == 1 && *(unsigned __int8 *)(a1 + 221) < 6u)
  {
    if (*(_QWORD *)(a1 + 232) != *(_DWORD *)(a1 + 224))
      return 0;
    v2 = sub_20C6E7B7C();
    v3 = "checkJsonCompatible: Incorrect size!";
    goto LABEL_11;
  }
  v5 = sub_20C6E7B7C();
  sub_20BDDC0E4(__p, "checkJsonCompatible: Incompatible version!");
  sub_20C6C3E64((os_log_t *)v5, (uint64_t *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return 302;
}

uint64_t sub_20C6E50A4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  float *v16;
  float *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t j;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 *v38;
  __int128 *v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  float *v77;
  float *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  BOOL v91;
  uint64_t *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v100;
  int v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  void *__p[2];
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t *v115;
  _QWORD *v116[2];
  __int128 *v117[3];

  v116[0] = 0;
  v116[1] = 0;
  v115 = (uint64_t *)v116;
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v113, a1);
  sub_20C6E381C();
  LODWORD(v109) = 0;
  *(_QWORD *)&v111 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v109);
  v4 = sub_20C6E750C(&v115, (const void **)v111, (uint64_t)&unk_20CAC184C, (__int128 **)&v111);
  sub_20BDE82DC((uint64_t)(v4 + 7), &v113);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v113, a1 + 48);
  sub_20C6E381C();
  LODWORD(v109) = 3;
  *(_QWORD *)&v111 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v109);
  v8 = sub_20C6E750C(&v115, (const void **)v111, (uint64_t)&unk_20CAC184C, (__int128 **)&v111);
  sub_20BDE82DC((uint64_t)(v8 + 7), &v113);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v113, *(float *)(a1 + 72));
  sub_20C6E381C();
  LODWORD(v109) = 4;
  *(_QWORD *)&v111 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v109);
  v12 = sub_20C6E750C(&v115, (const void **)v111, (uint64_t)&unk_20CAC184C, (__int128 **)&v111);
  sub_20BDE82DC((uint64_t)(v12 + 7), &v113);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v113 = 0uLL;
  v114 = 0;
  v16 = *(float **)(a1 + 80);
  v17 = *(float **)(a1 + 88);
  while (v16 != v17)
  {
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v111, *v16);
    sub_20C6E5FB4((char **)&v113, (uint64_t)&v111);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
    if (*((_QWORD *)&v111 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    ++v16;
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v111, &v113);
  sub_20C6E381C();
  LODWORD(__p[0]) = 5;
  *(_QWORD *)&v109 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)__p);
  v21 = sub_20C6E750C(&v115, (const void **)v109, (uint64_t)&unk_20CAC184C, (__int128 **)&v109);
  sub_20BDE82DC((uint64_t)(v21 + 7), &v111);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
  if (*((_QWORD *)&v111 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v111 = 0uLL;
  v112 = 0;
  v26 = *(_QWORD *)(a1 + 128);
  for (i = *(_QWORD *)(a1 + 136); v26 != i; v26 += 24)
  {
    sub_20C6CD190(&v109, v26);
    __p[0] = 0;
    __p[1] = 0;
    v108 = 0;
    for (j = *((_QWORD *)&v109 + 1); (__int128 *)j != &v109; j = *(_QWORD *)(j + 8))
    {
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v105, *(_DWORD *)(j + 16));
      sub_20C6E5FB4((char **)__p, (uint64_t)&v105);
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
      if (*((_QWORD *)&v105 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v105, __p);
    sub_20C6E5FB4((char **)&v111, (uint64_t)&v105);
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
    if (*((_QWORD *)&v105 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    *(_QWORD *)&v105 = __p;
    sub_20BDE9EB0((void ***)&v105);
    sub_20BEB422C(&v109);
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v109, &v111);
  sub_20C6E381C();
  LODWORD(v105) = 2;
  __p[0] = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v105);
  v34 = sub_20C6E750C(&v115, (const void **)__p[0], (uint64_t)&unk_20CAC184C, (__int128 **)__p);
  sub_20BDE82DC((uint64_t)(v34 + 7), &v109);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  if (*((_QWORD *)&v109 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v109 = 0uLL;
  v110 = 0;
  v38 = *(__int128 **)(a1 + 152);
  v39 = *(__int128 **)(a1 + 160);
  while (v38 != v39)
  {
    if (*((char *)v38 + 23) < 0)
    {
      sub_20BDDBFAC(__p, *(void **)v38, *((_QWORD *)v38 + 1));
    }
    else
    {
      v40 = *v38;
      v108 = *((_QWORD *)v38 + 2);
      *(_OWORD *)__p = v40;
    }
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v105, __p);
    sub_20C6E5FB4((char **)&v109, (uint64_t)&v105);
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
    if (*((_QWORD *)&v105 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (SHIBYTE(v108) < 0)
      operator delete(__p[0]);
    v38 = (__int128 *)((char *)v38 + 24);
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(__p, &v109);
  sub_20C6E381C();
  LODWORD(v103) = 1;
  *(_QWORD *)&v105 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v103);
  v44 = sub_20C6E750C(&v115, (const void **)v105, (uint64_t)&unk_20CAC184C, (__int128 **)&v105);
  v100 = a2;
  sub_20BDE82DC((uint64_t)(v44 + 7), (__int128 *)__p);
  v45 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v46 = (unint64_t *)((char *)__p[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v108 = 0;
  v48 = *(_QWORD **)(a1 + 24);
  if (v48 != (_QWORD *)(a1 + 32))
  {
    do
    {
      *((_QWORD *)&v105 + 1) = 0;
      v106 = 0;
      *(_QWORD *)&v105 = (char *)&v105 + 8;
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v103, v48 + 4);
      sub_20C6E381C();
      LODWORD(v117[0]) = 7;
      *(_QWORD *)&v102 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)v117);
      v49 = sub_20C6E750C((uint64_t **)&v105, (const void **)v102, (uint64_t)&unk_20CAC184C, (__int128 **)&v102);
      sub_20BDE82DC((uint64_t)(v49 + 7), &v103);
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      if (*((_QWORD *)&v103 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v103, v48 + 10);
      sub_20C6E381C();
      LODWORD(v117[0]) = 8;
      *(_QWORD *)&v102 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)v117);
      v53 = sub_20C6E750C((uint64_t **)&v105, (const void **)v102, (uint64_t)&unk_20CAC184C, (__int128 **)&v102);
      sub_20BDE82DC((uint64_t)(v53 + 7), &v103);
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      if (*((_QWORD *)&v103 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v103, v48 + 13);
      sub_20C6E381C();
      LODWORD(v117[0]) = 9;
      *(_QWORD *)&v102 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)v117);
      v57 = sub_20C6E750C((uint64_t **)&v105, (const void **)v102, (uint64_t)&unk_20CAC184C, (__int128 **)&v102);
      sub_20BDE82DC((uint64_t)(v57 + 7), &v103);
      v58 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      if (*((_QWORD *)&v103 + 1))
      {
        v59 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v103, *((_DWORD *)v48 + 32));
      sub_20C6E381C();
      LODWORD(v117[0]) = 10;
      *(_QWORD *)&v102 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)v117);
      v61 = sub_20C6E750C((uint64_t **)&v105, (const void **)v102, (uint64_t)&unk_20CAC184C, (__int128 **)&v102);
      sub_20BDE82DC((uint64_t)(v61 + 7), &v103);
      v62 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      if (*((_QWORD *)&v103 + 1))
      {
        v63 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v103, *((_BYTE *)v48 + 132));
      sub_20C6E381C();
      LODWORD(v117[0]) = 11;
      *(_QWORD *)&v102 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)v117);
      v65 = sub_20C6E750C((uint64_t **)&v105, (const void **)v102, (uint64_t)&unk_20CAC184C, (__int128 **)&v102);
      sub_20BDE82DC((uint64_t)(v65 + 7), &v103);
      v66 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      if (*((_QWORD *)&v103 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v103, v48 + 17);
      sub_20C6E381C();
      LODWORD(v117[0]) = 12;
      *(_QWORD *)&v102 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)v117);
      v69 = sub_20C6E750C((uint64_t **)&v105, (const void **)v102, (uint64_t)&unk_20CAC184C, (__int128 **)&v102);
      sub_20BDE82DC((uint64_t)(v69 + 7), &v103);
      v70 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      if (*((_QWORD *)&v103 + 1))
      {
        v71 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v103, *((float *)v48 + 40));
      sub_20C6E381C();
      LODWORD(v117[0]) = 13;
      *(_QWORD *)&v102 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)v117);
      v73 = sub_20C6E750C((uint64_t **)&v105, (const void **)v102, (uint64_t)&unk_20CAC184C, (__int128 **)&v102);
      sub_20BDE82DC((uint64_t)(v73 + 7), &v103);
      v74 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      if (*((_QWORD *)&v103 + 1))
      {
        v75 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v103 = 0uLL;
      v104 = 0;
      v78 = (float *)v48[21];
      v77 = (float *)v48[22];
      while (v78 != v77)
      {
        pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v102, *v78);
        sub_20C6E5FB4((char **)&v103, (uint64_t)&v102);
        v79 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
        if (*((_QWORD *)&v102 + 1))
        {
          v80 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        ++v78;
      }
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v102, &v103);
      sub_20C6E381C();
      v101 = 14;
      v117[0] = (__int128 *)sub_20C6E5F60((uint64_t)&unk_25498C080, &v101);
      v82 = sub_20C6E750C((uint64_t **)&v105, (const void **)v117[0], (uint64_t)&unk_20CAC184C, v117);
      sub_20BDE82DC((uint64_t)(v82 + 7), &v102);
      v83 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
      if (*((_QWORD *)&v102 + 1))
      {
        v84 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v102, &v105);
      sub_20C6E5FB4((char **)__p, (uint64_t)&v102);
      v86 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
      if (*((_QWORD *)&v102 + 1))
      {
        v87 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      *(_QWORD *)&v102 = &v103;
      sub_20BDE9EB0((void ***)&v102);
      sub_20BE78E5C((uint64_t)&v105, *((_QWORD **)&v105 + 1));
      v89 = (_QWORD *)v48[1];
      if (v89)
      {
        do
        {
          v90 = v89;
          v89 = (_QWORD *)*v89;
        }
        while (v89);
      }
      else
      {
        do
        {
          v90 = (_QWORD *)v48[2];
          v91 = *v90 == (_QWORD)v48;
          v48 = v90;
        }
        while (!v91);
      }
      v48 = v90;
    }
    while (v90 != (_QWORD *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v105, __p);
  sub_20C6E381C();
  LODWORD(v102) = 6;
  *(_QWORD *)&v103 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v102);
  v92 = sub_20C6E750C(&v115, (const void **)v103, (uint64_t)&unk_20CAC184C, (__int128 **)&v103);
  sub_20BDE82DC((uint64_t)(v92 + 7), &v105);
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (*((_QWORD *)&v105 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v103, &v115);
  pxrInternal__aapl__pxrReserved__::JsWriteToString((unint64_t **)&v103, &v105);
  if (*(char *)(v100 + 23) < 0)
    operator delete(*(void **)v100);
  *(_OWORD *)v100 = v105;
  *(_QWORD *)(v100 + 16) = v106;
  HIBYTE(v106) = 0;
  LOBYTE(v105) = 0;
  v96 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  if (*((_QWORD *)&v103 + 1))
  {
    v97 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  *(_QWORD *)&v105 = __p;
  sub_20BDE9EB0((void ***)&v105);
  __p[0] = &v109;
  sub_20BDE9EB0((void ***)__p);
  *(_QWORD *)&v109 = &v111;
  sub_20BDE9EB0((void ***)&v109);
  *(_QWORD *)&v111 = &v113;
  sub_20BDE9EB0((void ***)&v111);
  sub_20BE78E5C((uint64_t)&v115, v116[0]);
  return 0;
}

void sub_20C6E5D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **p_p, uint64_t a17, uint64_t a18, char ***__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char **a26,uint64_t a27,uint64_t a28,char *a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  p_p = (void **)&__p;
  sub_20BDE9EB0(&p_p);
  __p = &a26;
  sub_20BDE9EB0((void ***)&__p);
  a26 = &a29;
  sub_20BDE9EB0((void ***)&a26);
  a29 = &a32;
  sub_20BDE9EB0((void ***)&a29);
  sub_20BE78E5C(v33 - 136, *(_QWORD **)(v32 + 56));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6E5F60(uint64_t a1, int *a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    sub_20BEB9194("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

uint64_t sub_20C6E5FB4(char **a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  int64x2_t v19;
  char *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  uint64_t v24;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_20BDDF694();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = result;
    if (v12)
      v13 = (char *)sub_20BDEA2F0(result, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    v23 = v15;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    v8 = v14 + 16;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v22.i64[1] = (uint64_t)(v14 + 16);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *((_OWORD *)v16 - 1);
        v16 -= 16;
        *((_OWORD *)v14 - 1) = v18;
        v14 -= 16;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (char *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = v15;
    v23 = v20;
    v21 = v19.i64[0];
    result = sub_20BDEA324((uint64_t)&v21);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v8 = v7 + 16;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  a1[1] = v8;
  return result;
}

uint64_t sub_20C6E60CC(uint64_t a1, uint64_t a2)
{
  sub_20C6E60F0(a2, a1);
  return 0;
}

uint64_t sub_20C6E60F0(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  }
  else
  {
    sub_20C6E761C((uint64_t **)(a1 + 24), *(__int128 **)(a2 + 24), (__int128 *)(a2 + 32));
    std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    sub_20BE8B37C((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
    sub_20C6BBD04((_QWORD *)(a1 + 104), *(char **)(a2 + 104), *(char **)(a2 + 112), *(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104));
    sub_20C6CE094((uint64_t **)(a1 + 128), *(_QWORD *)(a2 + 128), *(uint64_t **)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3));
    sub_20BE75818(a1 + 152, *(std::string **)(a2 + 152), *(__int128 **)(a2 + 160), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 3));
  }
  return a1;
}

uint64_t sub_20C6E61C0(uint64_t a1, uint64_t a2)
{
  sub_20C6E60F0(a1, a2);
  return 0;
}

void sub_20C6E61D8(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_20BDDF694();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_20BDE1330(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t sub_20C6E62BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= *(_QWORD *)(a1 + 16))
  {
    result = sub_20C6CD228(a1, a2);
  }
  else
  {
    sub_20C6CD190(*(_QWORD **)(a1 + 8), a2);
    result = v3 + 24;
    *(_QWORD *)(a1 + 8) = v3 + 24;
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_20C6E6304(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20C6E630C(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = sub_20BE4EE50(a1, a2);
  }
  else
  {
    sub_20BE4EDF4(a1, a2);
    result = v3 + 24;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_20C6E6348(int a1, unint64_t **this, uint64_t a3)
{
  const void ***JsObject;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  const std::string *String;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  const std::string *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  const std::string *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  const std::string *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  float Real;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  _QWORD **JsArray;
  uint64_t **i;
  uint64_t **v37;
  uint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  float v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  void *v45;
  uint64_t *v46;
  std::string *v47;
  __int128 v48;
  uint64_t *v49;
  int v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  uint64_t *v55;
  int v56;
  std::string *v57;
  __int128 v58;
  uint64_t *v59;
  int v60;
  std::string *v61;
  __int128 v62;
  uint64_t *v63;
  int v64;
  std::string *v65;
  __int128 v66;
  uint64_t *v67;
  int v68;
  std::string *v69;
  __int128 v70;
  uint64_t *v71;
  int v72;
  std::string *v73;
  __int128 v74;
  uint64_t *v75;
  int v76;
  std::string *v77;
  __int128 v78;
  uint64_t *v80;
  std::string *v81;
  __int128 v82;
  uint64_t *v83;
  int v84;
  const std::string::value_type *v85;
  std::string::size_type v86;
  std::string *v87;
  __int128 v88;
  int v89;
  std::string v90;
  uint64_t *v91[2];
  std::string v92;
  std::string v93;
  __int128 v94;
  std::string::size_type v95;
  uint64_t *v96;
  _QWORD *v97;
  char v98;

  if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)this))
  {
    JsObject = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(this);
    sub_20BF1BE5C((uint64_t *)&v96, JsObject);
    sub_20C6E381C();
    LODWORD(v93.__r_.__value_.__l.__data_) = 7;
    v6 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v93);
    if (&v97 == (_QWORD **)sub_20BDEEBA4((uint64_t)&v96, (const void **)v6)
      || (sub_20C6E381C(),
          LODWORD(v92.__r_.__value_.__l.__data_) = 7,
          *(_QWORD *)&v94 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v92),
          v7 = sub_20C6E750C(&v96, (const void **)v94, (uint64_t)&unk_20CAC184C, (__int128 **)&v94),
          !pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v7 + 7))))
    {
      v44 = sub_20C6E7B7C();
      sub_20C6E381C();
      LODWORD(v93.__r_.__value_.__l.__data_) = 7;
      sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v93);
      std::operator+<char>();
      sub_20C6C3E64((os_log_t *)v44, (uint64_t *)&v94);
      if (SHIBYTE(v95) < 0)
      {
        v45 = (void *)v94;
LABEL_78:
        operator delete(v45);
      }
    }
    else
    {
      sub_20C6E381C();
      LODWORD(v93.__r_.__value_.__l.__data_) = 7;
      *(_QWORD *)&v94 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v93);
      v8 = sub_20C6E750C(&v96, (const void **)v94, (uint64_t)&unk_20CAC184C, (__int128 **)&v94);
      String = (const std::string *)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(v8 + 7));
      std::string::operator=((std::string *)a3, String);
      sub_20C6E381C();
      LODWORD(v93.__r_.__value_.__l.__data_) = 8;
      v10 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v93);
      if (&v97 == (_QWORD **)sub_20BDEEBA4((uint64_t)&v96, (const void **)v10)
        || (sub_20C6E381C(),
            LODWORD(v92.__r_.__value_.__l.__data_) = 8,
            *(_QWORD *)&v94 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v92),
            v11 = sub_20C6E750C(&v96, (const void **)v94, (uint64_t)&unk_20CAC184C, (__int128 **)&v94),
            !pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v11 + 7))))
      {
        v46 = sub_20C6E7B7C();
        std::operator+<char>();
        v47 = std::string::append(&v92, ", key ");
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        sub_20C6E381C();
        LODWORD(v90.__r_.__value_.__l.__data_) = 8;
        v49 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v90);
        v50 = *((char *)v49 + 23);
        if (v50 >= 0)
          v51 = (const std::string::value_type *)v49;
        else
          v51 = (const std::string::value_type *)*v49;
        if (v50 >= 0)
          v52 = *((unsigned __int8 *)v49 + 23);
        else
          v52 = v49[1];
      }
      else
      {
        sub_20C6E381C();
        LODWORD(v93.__r_.__value_.__l.__data_) = 8;
        *(_QWORD *)&v94 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v93);
        v12 = sub_20C6E750C(&v96, (const void **)v94, (uint64_t)&unk_20CAC184C, (__int128 **)&v94);
        v13 = (const std::string *)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(v12 + 7));
        std::string::operator=((std::string *)(a3 + 24), v13);
        sub_20C6E381C();
        LODWORD(v93.__r_.__value_.__l.__data_) = 9;
        v14 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v93);
        if (&v97 == (_QWORD **)sub_20BDEEBA4((uint64_t)&v96, (const void **)v14)
          || (sub_20C6E381C(),
              LODWORD(v92.__r_.__value_.__l.__data_) = 9,
              *(_QWORD *)&v94 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v92),
              v15 = sub_20C6E750C(&v96, (const void **)v94, (uint64_t)&unk_20CAC184C, (__int128 **)&v94),
              !pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v15 + 7))))
        {
          v46 = sub_20C6E7B7C();
          std::operator+<char>();
          v53 = std::string::append(&v92, ", key ");
          v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          v93.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          sub_20C6E381C();
          LODWORD(v90.__r_.__value_.__l.__data_) = 9;
          v55 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v90);
          v56 = *((char *)v55 + 23);
          if (v56 >= 0)
            v51 = (const std::string::value_type *)v55;
          else
            v51 = (const std::string::value_type *)*v55;
          if (v56 >= 0)
            v52 = *((unsigned __int8 *)v55 + 23);
          else
            v52 = v55[1];
        }
        else
        {
          sub_20C6E381C();
          LODWORD(v93.__r_.__value_.__l.__data_) = 9;
          *(_QWORD *)&v94 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v93);
          v16 = sub_20C6E750C(&v96, (const void **)v94, (uint64_t)&unk_20CAC184C, (__int128 **)&v94);
          v17 = (const std::string *)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(v16 + 7));
          std::string::operator=((std::string *)(a3 + 48), v17);
          sub_20C6E381C();
          LODWORD(v93.__r_.__value_.__l.__data_) = 10;
          v18 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v93);
          if (&v97 == (_QWORD **)sub_20BDEEBA4((uint64_t)&v96, (const void **)v18)
            || (sub_20C6E381C(),
                LODWORD(v92.__r_.__value_.__l.__data_) = 10,
                *(_QWORD *)&v94 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v92),
                v19 = sub_20C6E750C(&v96, (const void **)v94, (uint64_t)&unk_20CAC184C, (__int128 **)&v94),
                !pxrInternal__aapl__pxrReserved__::JsValue::IsInt((pxrInternal__aapl__pxrReserved__::JsValue *)(v19 + 7))))
          {
            v46 = sub_20C6E7B7C();
            std::operator+<char>();
            v57 = std::string::append(&v92, ", key ");
            v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
            v93.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v58;
            v57->__r_.__value_.__l.__size_ = 0;
            v57->__r_.__value_.__r.__words[2] = 0;
            v57->__r_.__value_.__r.__words[0] = 0;
            sub_20C6E381C();
            LODWORD(v90.__r_.__value_.__l.__data_) = 10;
            v59 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v90);
            v60 = *((char *)v59 + 23);
            if (v60 >= 0)
              v51 = (const std::string::value_type *)v59;
            else
              v51 = (const std::string::value_type *)*v59;
            if (v60 >= 0)
              v52 = *((unsigned __int8 *)v59 + 23);
            else
              v52 = v59[1];
          }
          else
          {
            sub_20C6E381C();
            LODWORD(v93.__r_.__value_.__l.__data_) = 10;
            *(_QWORD *)&v94 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v93);
            v20 = sub_20C6E750C(&v96, (const void **)v94, (uint64_t)&unk_20CAC184C, (__int128 **)&v94);
            *(_DWORD *)(a3 + 72) = pxrInternal__aapl__pxrReserved__::JsValue::GetInt((uint64_t **)v20 + 7);
            sub_20C6E381C();
            LODWORD(v93.__r_.__value_.__l.__data_) = 11;
            v21 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v93);
            if (&v97 == (_QWORD **)sub_20BDEEBA4((uint64_t)&v96, (const void **)v21)
              || (sub_20C6E381C(),
                  LODWORD(v92.__r_.__value_.__l.__data_) = 11,
                  *(_QWORD *)&v94 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v92),
                  v22 = sub_20C6E750C(&v96, (const void **)v94, (uint64_t)&unk_20CAC184C, (__int128 **)&v94),
                  !pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)(v22 + 7))))
            {
              v46 = sub_20C6E7B7C();
              std::operator+<char>();
              v61 = std::string::append(&v92, ", key ");
              v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
              v93.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v62;
              v61->__r_.__value_.__l.__size_ = 0;
              v61->__r_.__value_.__r.__words[2] = 0;
              v61->__r_.__value_.__r.__words[0] = 0;
              sub_20C6E381C();
              LODWORD(v90.__r_.__value_.__l.__data_) = 11;
              v63 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v90);
              v64 = *((char *)v63 + 23);
              if (v64 >= 0)
                v51 = (const std::string::value_type *)v63;
              else
                v51 = (const std::string::value_type *)*v63;
              if (v64 >= 0)
                v52 = *((unsigned __int8 *)v63 + 23);
              else
                v52 = v63[1];
            }
            else
            {
              sub_20C6E381C();
              LODWORD(v93.__r_.__value_.__l.__data_) = 11;
              *(_QWORD *)&v94 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v93);
              v23 = sub_20C6E750C(&v96, (const void **)v94, (uint64_t)&unk_20CAC184C, (__int128 **)&v94);
              *(_BYTE *)(a3 + 76) = pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)(v23 + 7));
              sub_20C6E381C();
              LODWORD(v93.__r_.__value_.__l.__data_) = 12;
              v24 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v93);
              if (&v97 == (_QWORD **)sub_20BDEEBA4((uint64_t)&v96, (const void **)v24)
                || (sub_20C6E381C(),
                    LODWORD(v92.__r_.__value_.__l.__data_) = 12,
                    *(_QWORD *)&v94 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v92),
                    v25 = sub_20C6E750C(&v96, (const void **)v94, (uint64_t)&unk_20CAC184C, (__int128 **)&v94),
                    !pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v25 + 7))))
              {
                v46 = sub_20C6E7B7C();
                std::operator+<char>();
                v65 = std::string::append(&v92, ", key ");
                v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
                v93.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v66;
                v65->__r_.__value_.__l.__size_ = 0;
                v65->__r_.__value_.__r.__words[2] = 0;
                v65->__r_.__value_.__r.__words[0] = 0;
                sub_20C6E381C();
                LODWORD(v90.__r_.__value_.__l.__data_) = 12;
                v67 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v90);
                v68 = *((char *)v67 + 23);
                if (v68 >= 0)
                  v51 = (const std::string::value_type *)v67;
                else
                  v51 = (const std::string::value_type *)*v67;
                if (v68 >= 0)
                  v52 = *((unsigned __int8 *)v67 + 23);
                else
                  v52 = v67[1];
              }
              else
              {
                sub_20C6E381C();
                LODWORD(v93.__r_.__value_.__l.__data_) = 12;
                *(_QWORD *)&v94 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v93);
                v26 = sub_20C6E750C(&v96, (const void **)v94, (uint64_t)&unk_20CAC184C, (__int128 **)&v94);
                v27 = (const std::string *)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(v26 + 7));
                std::string::operator=((std::string *)(a3 + 80), v27);
                sub_20C6E381C();
                LODWORD(v93.__r_.__value_.__l.__data_) = 13;
                v28 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v93);
                if (&v97 == (_QWORD **)sub_20BDEEBA4((uint64_t)&v96, (const void **)v28)
                  || (sub_20C6E381C(),
                      LODWORD(v92.__r_.__value_.__l.__data_) = 13,
                      *(_QWORD *)&v94 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v92),
                      v29 = sub_20C6E750C(&v96, (const void **)v94, (uint64_t)&unk_20CAC184C, (__int128 **)&v94),
                      !pxrInternal__aapl__pxrReserved__::JsValue::IsReal((pxrInternal__aapl__pxrReserved__::JsValue *)(v29 + 7))))
                {
                  v46 = sub_20C6E7B7C();
                  std::operator+<char>();
                  v69 = std::string::append(&v92, ", key ");
                  v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
                  v93.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v70;
                  v69->__r_.__value_.__l.__size_ = 0;
                  v69->__r_.__value_.__r.__words[2] = 0;
                  v69->__r_.__value_.__r.__words[0] = 0;
                  sub_20C6E381C();
                  LODWORD(v90.__r_.__value_.__l.__data_) = 13;
                  v71 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v90);
                  v72 = *((char *)v71 + 23);
                  if (v72 >= 0)
                    v51 = (const std::string::value_type *)v71;
                  else
                    v51 = (const std::string::value_type *)*v71;
                  if (v72 >= 0)
                    v52 = *((unsigned __int8 *)v71 + 23);
                  else
                    v52 = v71[1];
                }
                else
                {
                  sub_20C6E381C();
                  LODWORD(v93.__r_.__value_.__l.__data_) = 13;
                  *(_QWORD *)&v94 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v93);
                  v30 = sub_20C6E750C(&v96, (const void **)v94, (uint64_t)&unk_20CAC184C, (__int128 **)&v94);
                  Real = pxrInternal__aapl__pxrReserved__::JsValue::GetReal((uint64_t **)v30 + 7);
                  *(float *)(a3 + 104) = Real;
                  sub_20C6E381C();
                  LODWORD(v93.__r_.__value_.__l.__data_) = 14;
                  v32 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v93);
                  if (&v97 != (_QWORD **)sub_20BDEEBA4((uint64_t)&v96, (const void **)v32))
                  {
                    sub_20C6E381C();
                    LODWORD(v92.__r_.__value_.__l.__data_) = 14;
                    *(_QWORD *)&v94 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v92);
                    v33 = sub_20C6E750C(&v96, (const void **)v94, (uint64_t)&unk_20CAC184C, (__int128 **)&v94);
                    if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v33 + 7)))
                    {
                      sub_20C6E381C();
                      LODWORD(v92.__r_.__value_.__l.__data_) = 14;
                      v93.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v92);
                      v34 = sub_20C6E750C(&v96, (const void **)v93.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)&v93);
                      JsArray = (_QWORD **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v34 + 7);
                      v94 = 0uLL;
                      v95 = 0;
                      sub_20BF1C0B0((char *)&v94, *JsArray, JsArray[1], ((char *)JsArray[1] - (char *)*JsArray) >> 4);
                      *(_QWORD *)(a3 + 120) = *(_QWORD *)(a3 + 112);
                      v37 = (uint64_t **)*((_QWORD *)&v94 + 1);
                      for (i = (uint64_t **)v94; ; i += 2)
                      {
                        if (i == v37)
                        {
                          v43 = 0;
                          goto LABEL_96;
                        }
                        v38 = i[1];
                        v91[0] = *i;
                        v91[1] = v38;
                        if (v38)
                        {
                          v39 = (unint64_t *)(v38 + 1);
                          do
                            v40 = __ldxr(v39);
                          while (__stxr(v40 + 1, v39));
                        }
                        if (!pxrInternal__aapl__pxrReserved__::JsValue::IsReal((pxrInternal__aapl__pxrReserved__::JsValue *)v91))
                          break;
                        v41 = pxrInternal__aapl__pxrReserved__::JsValue::GetReal(v91);
                        *(float *)&v93.__r_.__value_.__l.__data_ = v41;
                        sub_20C6E61D8(a3 + 112, &v93);
                        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v91);
                      }
                      v80 = sub_20C6E7B7C();
                      std::operator+<char>();
                      v81 = std::string::append(&v90, ", key ");
                      v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
                      v92.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v82;
                      v81->__r_.__value_.__l.__size_ = 0;
                      v81->__r_.__value_.__r.__words[2] = 0;
                      v81->__r_.__value_.__r.__words[0] = 0;
                      sub_20C6E381C();
                      v89 = 14;
                      v83 = sub_20C6E5F60((uint64_t)&unk_25498C080, &v89);
                      v84 = *((char *)v83 + 23);
                      if (v84 >= 0)
                        v85 = (const std::string::value_type *)v83;
                      else
                        v85 = (const std::string::value_type *)*v83;
                      if (v84 >= 0)
                        v86 = *((unsigned __int8 *)v83 + 23);
                      else
                        v86 = v83[1];
                      v87 = std::string::append(&v92, v85, v86);
                      v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
                      v93.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v88;
                      v87->__r_.__value_.__l.__size_ = 0;
                      v87->__r_.__value_.__r.__words[2] = 0;
                      v87->__r_.__value_.__r.__words[0] = 0;
                      sub_20C6C3E64((os_log_t *)v80, (uint64_t *)&v93);
                      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v93.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v92.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v90.__r_.__value_.__l.__data_);
                      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v91);
                      v43 = 301;
LABEL_96:
                      v93.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
                      sub_20BDE9EB0((void ***)&v93);
                      goto LABEL_80;
                    }
                  }
                  v46 = sub_20C6E7B7C();
                  std::operator+<char>();
                  v73 = std::string::append(&v92, ", key ");
                  v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
                  v93.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v74;
                  v73->__r_.__value_.__l.__size_ = 0;
                  v73->__r_.__value_.__r.__words[2] = 0;
                  v73->__r_.__value_.__r.__words[0] = 0;
                  sub_20C6E381C();
                  LODWORD(v90.__r_.__value_.__l.__data_) = 14;
                  v75 = sub_20C6E5F60((uint64_t)&unk_25498C080, (int *)&v90);
                  v76 = *((char *)v75 + 23);
                  if (v76 >= 0)
                    v51 = (const std::string::value_type *)v75;
                  else
                    v51 = (const std::string::value_type *)*v75;
                  if (v76 >= 0)
                    v52 = *((unsigned __int8 *)v75 + 23);
                  else
                    v52 = v75[1];
                }
              }
            }
          }
        }
      }
      v77 = std::string::append(&v93, v51, v52);
      v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v95 = v77->__r_.__value_.__r.__words[2];
      v94 = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      sub_20C6C3E64((os_log_t *)v46, (uint64_t *)&v94);
      if (SHIBYTE(v95) < 0)
        operator delete((void *)v94);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      {
        v45 = (void *)v92.__r_.__value_.__r.__words[0];
        goto LABEL_78;
      }
    }
    v43 = 301;
LABEL_80:
    sub_20BE78E5C((uint64_t)&v96, v97);
    return v43;
  }
  v42 = sub_20C6E7B7C();
  sub_20BDDC0E4(&v96, "parseJsonAttribute: Not an object!");
  sub_20C6C3E64((os_log_t *)v42, (uint64_t *)&v96);
  if (v98 < 0)
    operator delete(v96);
  return 301;
}

void sub_20C6E6FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a16);
  a25 = (void *)(v31 - 96);
  sub_20BDE9EB0((void ***)&a25);
  sub_20BE78E5C(v31 - 72, *(_QWORD **)(v30 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20C6E71A0(uint64_t a1, uint64_t a2)
{
  char v4;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  v4 = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = v4;
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  if (a1 != a2)
    sub_20BE8B37C((char *)(a1 + 112), *(char **)(a2 + 112), *(_QWORD *)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 2);
  return a1;
}

uint64_t sub_20C6E7220(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      sub_20C6E729C((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_20C6E7284(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF28644(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6E729C(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_20C21648C(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_20C6E731C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *sub_20C6E731C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  result = v6 + 10;
  if (*(char *)(a2 + 31) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 8);
    result[2] = *(_QWORD *)(a2 + 24);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C6E73A8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C6E73C4(v3, v2);
  _Unwind_Resume(a1);
}

void sub_20C6E73C4(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0)
      operator delete(__p[5]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *sub_20C6E7410(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = sub_20BDEC0F8(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    sub_20C6E74A4((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20BE7B260((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_20C6E74A4@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20BF1BF34(v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C6E74F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE7B260(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C6E750C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C6E75B4((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20BE7B260((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_20C6E75B4@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C6A1358(v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C6E7604(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE7B260(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t **sub_20C6E761C(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **v10;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = sub_20BDFC6B0((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          sub_20C6E77A8((uint64_t)v18, (uint64_t)(v9 + 2));
          v10 = (uint64_t **)sub_20BDFC638((uint64_t)v5, v18, v17 + 4);
          sub_20BDDE1B4(v5, v18[0], v10, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = sub_20BDFC6B0((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)sub_20C6E7848((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_20C6E789C(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_20C6E7794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C6E7848((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6E77A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(_QWORD *)(a1 + 8);
  std::string::operator=((std::string *)v4, (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(v4 + 24), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(v4 + 48), (const std::string *)(a2 + 72));
  v5 = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(v4 + 72) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(v4 + 76) = v5;
  std::string::operator=((std::string *)(v4 + 80), (const std::string *)(a2 + 104));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a2 + 128);
  if (v4 != a2 + 24)
    sub_20BE8B37C((char *)(v4 + 112), *(char **)(a2 + 136), *(_QWORD *)(a2 + 144), (uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 2);
  return a1;
}

uint64_t sub_20C6E7848(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_20C6CBEC8(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_20C6CBEC8(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *sub_20C6E789C(uint64_t **a1, __int128 *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  sub_20C6E791C((uint64_t)a1, a2, (uint64_t)v7);
  v3 = (uint64_t **)sub_20BDFC638((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_20BDDE1B4(a1, v6, v3, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  sub_20C6CE674((uint64_t)v7, 0);
  return v4;
}

void sub_20C6E7904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C6CE674((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_20C6E791C@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _BYTE *v6;
  _BYTE *result;

  v5 = a1 + 8;
  v6 = operator new(0xC0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C6E7984(v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C6E796C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C6CE674(v1, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_20C6E7984(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_20C6E79F8(__dst + 24, (__int128 *)((char *)a2 + 24));
  return __dst;
}

void sub_20C6E79DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20C6E79F8(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  __int128 v8;
  int v9;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_20BDDBFAC(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  v7 = *((_DWORD *)a2 + 18);
  __dst[76] = *((_BYTE *)a2 + 76);
  *((_DWORD *)__dst + 18) = v7;
  if (*((char *)a2 + 103) < 0)
  {
    sub_20BDDBFAC(__dst + 80, *((void **)a2 + 10), *((_QWORD *)a2 + 11));
  }
  else
  {
    v8 = a2[5];
    *((_QWORD *)__dst + 12) = *((_QWORD *)a2 + 12);
    *((_OWORD *)__dst + 5) = v8;
  }
  v9 = *((_DWORD *)a2 + 26);
  *((_QWORD *)__dst + 14) = 0;
  *((_DWORD *)__dst + 26) = v9;
  *((_QWORD *)__dst + 15) = 0;
  *((_QWORD *)__dst + 16) = 0;
  sub_20BE8B304((_QWORD *)__dst + 14, *((const void **)a2 + 14), *((_QWORD *)a2 + 15), (uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 2);
  return __dst;
}

void sub_20C6E7B18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C6E7B7C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25498C0A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25498C0A8))
  {
    qword_25498C0A0 = (uint64_t)os_log_create("com.apple.usdlib", "aaplUsdGclCodec");
    __cxa_atexit((void (*)(void *))sub_20C6E7C04, &qword_25498C0A0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C0A8);
  }
  return &qword_25498C0A0;
}

void **sub_20C6E7C04(void **a1)
{
  os_release(*a1);
  return a1;
}

uint64_t sub_20C6E7C30(uint64_t result)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;

  v1 = 0;
  *(_DWORD *)result = 0;
  *(_QWORD *)&v2 = 0xFFFF00000000;
  *((_QWORD *)&v2 + 1) = 0xFFFF00000000;
  *(_OWORD *)(result + 24) = v2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 40) = 0;
  v3 = 0x217u;
  do
  {
    *(_WORD *)(result + v1 * 2 + 48) = word_25473D2D8[v1];
    *(_WORD *)(result + v3 * 2) = word_25473D2D8[v3 - 280];
    --v3;
    ++v1;
  }
  while (v1 != 256);
  return result;
}

void *sub_20C6E7C84(uint64_t a1)
{
  __int128 v1;
  unsigned int v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)&v1 = 0xFFFF000000000000;
  *((_QWORD *)&v1 + 1) = 0xFFFF000000000000;
  *(_OWORD *)(a1 + 24) = v1;
  *(_QWORD *)(a1 + 40) = 16;
  v2 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1)
  {
    v4 = -16777216;
    goto LABEL_7;
  }
  v3 = *(unsigned __int8 **)(a1 + 8);
  v4 = *v3 << 24;
  *(_DWORD *)(a1 + 32) = v4;
  if (v2 == 1)
  {
LABEL_7:
    v5 = v4 | 0xFF0000;
    goto LABEL_8;
  }
  v5 = v4 | (v3[1] << 16);
  *(_DWORD *)(a1 + 32) = v5;
  if (v2 <= 2)
  {
LABEL_8:
    v6 = v5 | 0xFF00;
    goto LABEL_9;
  }
  v6 = v5 | (v3[2] << 8);
  *(_DWORD *)(a1 + 32) = v6;
  if (v2 == 3)
  {
LABEL_9:
    v7 = 255;
    goto LABEL_10;
  }
  v7 = v3[3];
LABEL_10:
  *(_DWORD *)(a1 + 32) = v7 | v6;
  *(_QWORD *)(a1 + 16) = 3;
  return memcpy((void *)(a1 + 48), &unk_25473D4D8, 0x400uLL);
}

uint64_t sub_20C6E7D1C(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;

  if (!a2)
    return 0xFFFFFFFFLL;
  v2 = (unsigned __int8 *)result;
  LODWORD(result) = -1;
  do
  {
    v3 = *v2++;
    result = (dword_20CAF88B0[v3 ^ BYTE3(result)] ^ ((_DWORD)result << 8));
    --a2;
  }
  while (a2);
  return result;
}

uint64_t sub_20C6E7D54(_DWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v4 = 3;
  if (a1 && (a2 & 0x8000000000000000) == 0 && (unint64_t)a2 >= 4)
  {
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 4 || a2 < 16 || a1 == (_DWORD *)-16 || !a4)
    {
      return 3;
    }
    else
    {
      v5 = a2 - 8;
      v6 = a1 + 2;
      v8 = 4 * a4;
      v9 = a1[3];
      while (*a3 != *a1)
      {
        ++a3;
        v4 = 3;
        v8 -= 4;
        if (!v8)
          return v4;
      }
      v11 = 8;
      if (v5 > 8)
        v11 = a2 - 8;
      v4 = 3;
      if ((a2 & (unint64_t)~(a2 >> 63)) - v11 + 8 <= v9 && ((a2 - v9) & 0x8000000000000000) == 0)
      {
        v4 = 3;
        if ((_DWORD *)((char *)v6 + (v5 & ~(v5 >> 63))) >= a1
          && (_DWORD *)((char *)a1 + v9) >= v6
          && a1 != (_DWORD *)-8
          && v9 >= 8)
        {
          v7 = a1[1];
          if (v7 == sub_20C6E7D1C((uint64_t)(a1 + 2), v9 - 8))
            return 0;
          else
            return 3;
        }
      }
    }
  }
  return v4;
}

int *sub_20C6E7E54(int *result, int *a2, int a3, float a4, float a5, float a6)
{
  float v6;
  float v7;
  int v8;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;
  int v14;
  int v15;
  int v16;
  double v17;
  char v18;
  int v19;
  int v20;
  int v21;
  char v22;
  int v23;
  int v24;
  double v25;
  char v26;
  char v27;
  int v28;
  int v29;
  int v30;
  double v31;
  int v32;
  int v33;
  int v34;
  int v35;

  v6 = fabsf(a6);
  v7 = (float)(fabsf(a4) + fabsf(a5)) + v6;
  if (v7 <= 0.0)
  {
    *result = a3;
  }
  else
  {
    v8 = 0;
    v9 = (double)a3 / v7;
    v10 = v9 * a4;
    v11 = v9 * a5;
    v12 = vcvtmd_s64_f64(v10);
    v13 = v9 * v6;
    v14 = vcvtmd_s64_f64(v11);
    if (v12 >= 0)
      v15 = v12;
    else
      v15 = -v12;
    if (v14 >= 0)
      v16 = v14;
    else
      v16 = -v14;
    v17 = (v10 * (double)v12 + v11 * (double)v14 + v13 * (double)(a3 - (v16 + v15)))
        / sqrt((double)(v14 * v14 + v12 * v12 + (a3 - (v16 + v15)) * (a3 - (v16 + v15))));
    v18 = 1;
    v19 = v14;
    v20 = v12;
    do
    {
      v21 = 0;
      v22 = v18;
      v23 = v8 + v14;
      if (v8 + v14 >= 0)
        v24 = v8 + v14;
      else
        v24 = -v23;
      v26 = 1;
      do
      {
        v27 = v26;
        v28 = v21 + v12;
        if (v21 + v12 >= 0)
          v29 = v21 + v12;
        else
          v29 = -v28;
        if (v21 | v8)
        {
          v30 = a3 - v24 - v29;
          if ((v30 & 0x80000000) == 0)
          {
            v31 = sqrt((double)(v23 * v23 + v28 * v28 + v30 * v30));
            v25 = v11 * (double)v23;
            if (v17 < (v25 + v10 * (double)v28 + v13 * (double)v30) / v31)
            {
              v17 = (v25 + v10 * (double)v28 + v13 * (double)v30) / v31;
              v20 = v28;
              v19 = v8 + v14;
            }
          }
        }
        v26 = 0;
        v21 = 1;
      }
      while ((v27 & 1) != 0);
      v18 = 0;
      v8 = 1;
    }
    while ((v22 & 1) != 0);
    if (a6 >= 0.0)
    {
      *result = v20 + a3;
      a3 += v19;
    }
    else
    {
      v32 = 2 * a3;
      if (v19 >= 0)
        v33 = v19;
      else
        v33 = -v19;
      if (a4 >= 0.0)
        v33 = v32 - v33;
      *result = v33;
      if (v20 >= 0)
        v34 = v20;
      else
        v34 = -v20;
      v35 = v32 - v34;
      if (a5 >= 0.0)
        a3 = v35;
      else
        a3 = v34;
    }
  }
  *a2 = a3;
  return result;
}

int *sub_20C6E7FEC(int *result, int *a2, int a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  int v8;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;
  int v14;
  int v15;
  int v16;
  double v17;
  char v18;
  int v19;
  int v20;
  int v21;
  char v22;
  int v23;
  int v24;
  double v25;
  char v26;
  char v27;
  int v28;
  int v29;
  int v30;
  double v31;
  int v32;
  int v33;
  int v34;
  int v35;

  v6 = fabs(a6);
  v7 = fabs(a4) + fabs(a5) + v6;
  if (v7 <= 0.0)
  {
    *result = a3;
  }
  else
  {
    v8 = 0;
    v9 = (double)a3 / v7;
    v10 = v9 * a4;
    v11 = v9 * a5;
    v12 = vcvtmd_s64_f64(v9 * a4);
    v13 = v6 * v9;
    v14 = vcvtmd_s64_f64(v9 * a5);
    if (v12 >= 0)
      v15 = v12;
    else
      v15 = -v12;
    if (v14 >= 0)
      v16 = v14;
    else
      v16 = -v14;
    v17 = (v10 * (double)v12 + v11 * (double)v14 + v13 * (double)(a3 - (v16 + v15)))
        / sqrt((double)(v14 * v14 + v12 * v12 + (a3 - (v16 + v15)) * (a3 - (v16 + v15))));
    v18 = 1;
    v19 = v14;
    v20 = v12;
    do
    {
      v21 = 0;
      v22 = v18;
      v23 = v8 + v14;
      if (v8 + v14 >= 0)
        v24 = v8 + v14;
      else
        v24 = -v23;
      v26 = 1;
      do
      {
        v27 = v26;
        v28 = v21 + v12;
        if (v21 + v12 >= 0)
          v29 = v21 + v12;
        else
          v29 = -v28;
        if (v21 | v8)
        {
          v30 = a3 - v24 - v29;
          if ((v30 & 0x80000000) == 0)
          {
            v31 = sqrt((double)(v23 * v23 + v28 * v28 + v30 * v30));
            v25 = v11 * (double)v23;
            if (v17 < (v25 + v10 * (double)v28 + v13 * (double)v30) / v31)
            {
              v17 = (v25 + v10 * (double)v28 + v13 * (double)v30) / v31;
              v20 = v28;
              v19 = v8 + v14;
            }
          }
        }
        v26 = 0;
        v21 = 1;
      }
      while ((v27 & 1) != 0);
      v18 = 0;
      v8 = 1;
    }
    while ((v22 & 1) != 0);
    if (a6 >= 0.0)
    {
      *result = v20 + a3;
      a3 += v19;
    }
    else
    {
      v32 = 2 * a3;
      if (v19 >= 0)
        v33 = v19;
      else
        v33 = -v19;
      if (a4 >= 0.0)
        v33 = v32 - v33;
      *result = v33;
      if (v20 >= 0)
        v34 = v20;
      else
        v34 = -v20;
      v35 = v32 - v34;
      if (a5 >= 0.0)
        a3 = v35;
      else
        a3 = v34;
    }
  }
  *a2 = a3;
  return result;
}

uint64_t sub_20C6E8170(uint64_t result, int a2, int *a3, int *a4, int *a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v6 = result - a6;
  v7 = a2 - a6;
  if ((int)result - a6 >= 0)
    v8 = result - a6;
  else
    v8 = a6 - result;
  if (v7 >= 0)
    v9 = a2 - a6;
  else
    v9 = a6 - a2;
  v10 = a6 - v8;
  v11 = v9 - a6;
  if (v6 >= 0)
    v11 = a6 - v9;
  v12 = v8 - a6;
  if (v7 >= 0)
    v12 = v10;
  v13 = v10 - v9;
  *a5 = v13;
  if (v13 < 0)
  {
    v6 = v11;
    v7 = v12;
  }
  *a3 = v6;
  *a4 = v7;
  return result;
}

BOOL sub_20C6E81C0(unsigned int *a1, _WORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  _BOOL8 v15;
  unsigned int v16;

  v2 = (unsigned __int16)*a2;
  v3 = a1[7];
  v4 = a1[8];
  if (v3 > 0x40000000)
  {
    v11 = a1[7];
  }
  else
  {
    v5 = a1[10];
    do
    {
      v4 *= 2;
      a1[10] = --v5;
      if (!v5)
      {
        v6 = *((_QWORD *)a1 + 2);
        *((_QWORD *)a1 + 2) = v6 + 1;
        v7 = *a1;
        if (v6 + 1 >= v7)
          v8 = 65280;
        else
          v8 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v6 + 1) << 8;
        v9 = v6 + 2;
        *((_QWORD *)a1 + 2) = v9;
        if (v9 >= v7)
          v10 = 255;
        else
          v10 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v9);
        v4 |= v8 | v10;
        v5 = 16;
        a1[10] = 16;
      }
      v11 = 2 * v3;
      v12 = v3 >= 0x20000001;
      v3 *= 2;
    }
    while (!v12);
  }
  v13 = (HIWORD(v11) * v2) & 0xFFFF0000;
  v14 = v11 - v13;
  v15 = v4 >= v13;
  *a2 = *((_WORD *)a1 + ((v2 >> 7) & 0x1FE | v15) + 24) + v2;
  if (v4 < v13)
    v16 = v13;
  else
    v16 = v14;
  if (v4 < v13)
    v13 = 0;
  a1[7] = v16;
  a1[8] = v4 - v13;
  return v15;
}

uint64_t sub_20C6E82B0(unsigned int *a1, int a2, _WORD *a3)
{
  int v6;
  int v7;
  int v9;
  int v10;
  __int16 v12;

  v6 = 0;
  if (sub_20C6E81C0(a1, a3) && a2 <= 30)
  {
    v6 = 0;
    do
    {
      v7 = a2 + 1;
      v6 |= 1 << a2;
      if (!sub_20C6E81C0(a1, a3))
        break;
    }
    while (a2++ < 30);
  }
  else
  {
    v7 = a2;
  }
  v9 = 0;
  if (v7)
  {
    v10 = v7 - 1;
    do
    {
      v12 = 0x8000;
      v9 |= sub_20C6E81C0(a1, &v12) << v10--;
    }
    while (v10 != -1);
  }
  return (v9 + v6);
}

void sub_20C6E8374(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_20C6E882C(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 12 * a2;
  }
}

void sub_20C6E83B0(uint64_t *a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_20C6E83EC(a1, v5, a3);
  }
  else if (!v4)
  {
    a1[1] = *a1 + 12 * a2;
  }
}

void sub_20C6E83EC(uint64_t *a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  char *v17;
  void *__p;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 2) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      do
      {
        *v9 = *a3;
        v9[1] = a3[1];
        v9[2] = a3[2];
        v9 += 3;
      }
      while (v9 != v15);
      v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 2);
    v11 = v10 + a2;
    if (v10 + a2 > 0x1555555555555555)
      sub_20BDDF694();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 2);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0xAAAAAAAAAAAAAAALL)
      v13 = 0x1555555555555555;
    else
      v13 = v11;
    v22 = v6;
    if (v13)
      v14 = (char *)sub_20C152228(v6, v13);
    else
      v14 = 0;
    v16 = &v14[12 * v10];
    __p = v14;
    v19 = v16;
    v21 = &v14[12 * v13];
    v17 = &v16[12 * a2];
    do
    {
      *(_DWORD *)v16 = *a3;
      *((_DWORD *)v16 + 1) = a3[1];
      *((_DWORD *)v16 + 2) = a3[2];
      v16 += 12;
    }
    while (v16 != v17);
    v20 = v17;
    sub_20C6E85C0(a1, &__p);
    if (v20 != v19)
      v20 = &v19[(v20 - v19 - 12) % 0xCuLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_20C6E8574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C6E85C0(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_DWORD *)(v2 - 12);
    v2 -= 12;
    *(_DWORD *)(v4 - 12) = v5;
    v4 -= 12;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *sub_20C6E8628(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    sub_20BDE2970(a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_20C6E8688(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C6E86A4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    sub_20C6E86D4((char **)a1, a2 - v2);
  }
}

void sub_20C6E86D4(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      memset_pattern16(*(void **)(v4 - 8), &unk_20CAF8CE0, 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      sub_20BDDF694();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_20BDE31CC(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    memset_pattern16(v15, &unk_20CAF8CE0, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t sub_20C6E87E0(unsigned int *a1, int a2, _WORD *a3, _WORD *a4)
{
  uint64_t result;
  unsigned int v7;

  result = sub_20C6E82B0(a1, a2, a4);
  if ((_DWORD)result)
  {
    v7 = result;
    if (sub_20C6E81C0(a1, a3))
      return v7;
    else
      return -v7;
  }
  return result;
}

void sub_20C6E882C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555)
      sub_20BDDF694();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_20C152228(v4, v11);
    else
      v12 = 0;
    __p = v12;
    v16 = &v12[12 * v8];
    v18 = &v12[12 * v11];
    v14 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_20C6E85C0(a1, &__p);
    if (v17 != v16)
      v17 = &v16[(v17 - v16 - 12) % 0xCuLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_20C6E89B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C6E8A00(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDE3738(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20C6E8A64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6E8A80(uint64_t result, int a2, _WORD *a3)
{
  unint64_t v3;
  int v4;
  unsigned int v5;
  __int16 v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v3 = (unsigned __int16)*a3;
  v4 = *(_DWORD *)(result + 28);
  v5 = (v4 * v3) >> 16;
  if (a2)
  {
    *(_DWORD *)(result + 24) += v5;
    v5 = v4 - v5;
    v6 = v3 - *(_WORD *)(result + ((v3 >> 7) & 0x1FE) + 48);
  }
  else
  {
    v6 = *(_WORD *)(result + (~(*a3 >> 7) & 0x1FE) + 48) + *a3;
  }
  *(_DWORD *)(result + 28) = v5;
  *a3 = v6;
  if (v5 <= 0x4000)
  {
    v7 = *(_DWORD *)(result + 24);
    v8 = *(_DWORD *)(result + 40);
    while (1)
    {
      v7 *= 2;
      v5 *= 2;
      *(_DWORD *)(result + 24) = v7;
      *(_DWORD *)(result + 28) = v5;
      *(_DWORD *)(result + 40) = ++v8;
      if (v8 == 8)
        break;
LABEL_18:
      if (v5 > 0x4000)
        return result;
    }
    v9 = *(_QWORD *)(result + 16);
    v10 = *(int *)(result + 44);
    if (v9 + v10 + 1 > (unint64_t)*(unsigned int *)(result + 4))
      return result;
    if (HIBYTE(v7))
    {
      ++*(_BYTE *)(v9 + *(_QWORD *)(result + 8) - 1);
      v9 = *(_QWORD *)(result + 16);
      if (*(_DWORD *)(result + 44))
      {
        do
        {
          *(_BYTE *)(*(_QWORD *)(result + 8) + v9) = 0;
          v11 = *(_DWORD *)(result + 44);
          v9 = *(_QWORD *)(result + 16) + 1;
          *(_QWORD *)(result + 16) = v9;
          *(_DWORD *)(result + 44) = --v11;
        }
        while (v11);
      }
    }
    else
    {
      if ((v7 + v5) >> 24)
      {
        *(_DWORD *)(result + 44) = v10 + 1;
LABEL_17:
        v8 = 0;
        v7 = (unsigned __int16)v7;
        *(_DWORD *)(result + 24) = (unsigned __int16)v7;
        *(_DWORD *)(result + 40) = 0;
        goto LABEL_18;
      }
      if ((_DWORD)v10)
      {
        do
        {
          *(_BYTE *)(*(_QWORD *)(result + 8) + v9) = -1;
          v12 = *(_DWORD *)(result + 44);
          v9 = *(_QWORD *)(result + 16) + 1;
          *(_QWORD *)(result + 16) = v9;
          *(_DWORD *)(result + 44) = --v12;
        }
        while (v12);
      }
    }
    *(_BYTE *)(*(_QWORD *)(result + 8) + v9) = *(_WORD *)(result + 26);
    ++*(_QWORD *)(result + 16);
    LOWORD(v7) = *(_WORD *)(result + 24);
    v5 = *(_DWORD *)(result + 28);
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_20C6E8BF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(int *)(a1 + 44);
  if (v1 + v2 + 3 <= (unint64_t)*(unsigned int *)(a1 + 4))
  {
    v4 = 0;
    v5 = *(_DWORD *)(a1 + 40);
    v6 = *(_DWORD *)(a1 + 24);
    do
    {
      if ((v6 | ((2 << v4) - 1)) > *(_DWORD *)(a1 + 28) - 1)
        break;
      ++v4;
    }
    while (v4 != 16);
    v7 = v6 | ~(-1 << v4);
    *(_DWORD *)(a1 + 24) = v7;
    if (v5 <= 7)
    {
      v8 = v5 - 8;
      do
        v7 = (2 * v7) | 1;
      while (!__CFADD__(v8++, 1));
      *(_DWORD *)(a1 + 24) = v7;
      *(_DWORD *)(a1 + 40) = 8;
    }
    if (HIBYTE(v7))
    {
      ++*(_BYTE *)(v1 + *(_QWORD *)(a1 + 8) - 1);
      v1 = *(_QWORD *)(a1 + 16);
      if (*(_DWORD *)(a1 + 44))
      {
        do
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 8) + v1) = 0;
          v10 = *(_DWORD *)(a1 + 44);
          v1 = *(_QWORD *)(a1 + 16) + 1;
          *(_QWORD *)(a1 + 16) = v1;
          *(_DWORD *)(a1 + 44) = --v10;
        }
        while (v10);
      }
    }
    else if ((_DWORD)v2)
    {
      do
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 8) + v1) = -1;
        v11 = *(_DWORD *)(a1 + 44);
        v1 = *(_QWORD *)(a1 + 16) + 1;
        *(_QWORD *)(a1 + 16) = v1;
        *(_DWORD *)(a1 + 44) = --v11;
      }
      while (v11);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 8) + v1) = *(_WORD *)(a1 + 26);
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16) + 1;
    *(_QWORD *)(a1 + 16) = v13;
    *(_BYTE *)(v12 + v13) = BYTE1(*(_DWORD *)(a1 + 24));
    v3 = *(_QWORD *)(a1 + 16) + 1;
    *(_QWORD *)(a1 + 16) = v3;
    if (v5 >= 1)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + v3) = *(_DWORD *)(a1 + 24);
      v3 = *(_QWORD *)(a1 + 16) + 1;
      *(_QWORD *)(a1 + 16) = v3;
    }
    if (v3 >= 2)
    {
      v14 = *(_QWORD *)(a1 + 8) - 1;
      while (*(unsigned __int8 *)(v14 + v3) == 255)
      {
        *(_QWORD *)(a1 + 16) = --v3;
        if (v3 <= 1)
          return 1;
      }
    }
  }
  else
  {
    v3 = 0;
    *(_DWORD *)a1 = 1;
  }
  return v3;
}

void sub_20C6E8D90(uint64_t a1, int a2)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = a1;
  sub_20BE81ACC(a1, 0);
  v5 = 0;
  sub_20BE86740(v3, a2 + 1, &v5);
  v3 += 24;
  sub_20BE81ACC(v3, 0);
  v4 = 0;
  sub_20BE86740(v3, a2, &v4);
}

void sub_20C6E8DFC(int **a1)
{
  int *v1;
  int *v2;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  int v7;
  uint64_t v8;

  v2 = *a1;
  v1 = a1[1];
  v3 = (char *)v1 - (char *)*a1;
  if ((int)(v3 >> 2) >= 2)
  {
    v4 = (v3 >> 2);
    v7 = *v2;
    v5 = v2 + 1;
    v6 = v7;
    v8 = v4 - 1;
    do
    {
      v6 += *v5;
      *v5++ = v6;
      --v8;
    }
    while (v8);
  }
  sub_20BE81ACC((uint64_t)(a1 + 6), *(v1 - 1));
}

uint64_t sub_20C6E8E3C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

_DWORD *sub_20C6E8E8C(_QWORD *a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  _DWORD *v6;
  uint64_t v8;
  _DWORD *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  char *v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _DWORD *v23;
  int64_t v24;
  _DWORD *v25;
  uint64_t v26;

  v6 = a2;
  v8 = a1[2];
  result = (_DWORD *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 2) < a4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1555555555555555)
      sub_20BDDF694();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v11;
    sub_20C211DE0(a1, v12);
    v14 = (_DWORD *)a1[1];
    v13 = (_DWORD **)(a1 + 1);
    result = v14;
    v15 = (char *)v14;
    if (v6 != a3)
    {
      v15 = (char *)result;
      do
      {
        *(_DWORD *)v15 = *v6;
        *((_DWORD *)v15 + 1) = v6[1];
        *((_DWORD *)v15 + 2) = v6[2];
        v15 += 12;
        v6 += 3;
      }
      while (v6 != a3);
    }
LABEL_26:
    v24 = v15 - (char *)result;
    goto LABEL_27;
  }
  v17 = (_DWORD *)a1[1];
  v13 = (_DWORD **)(a1 + 1);
  v16 = v17;
  v18 = 0xAAAAAAAAAAAAAAABLL * (v17 - result);
  if (v18 >= a4)
  {
    v15 = (char *)result;
    if (a2 != a3)
    {
      v25 = result;
      do
      {
        v26 = *(_QWORD *)v6;
        v25[2] = v6[2];
        *(_QWORD *)v25 = v26;
        v25 += 3;
        v6 += 3;
        v15 += 12;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  v19 = &a2[3 * v18];
  if (v16 != result)
  {
    v20 = 12 * v18;
    do
    {
      v21 = *(_QWORD *)v6;
      result[2] = v6[2];
      *(_QWORD *)result = v21;
      result += 3;
      v6 += 3;
      v20 -= 12;
    }
    while (v20);
    result = *v13;
  }
  v22 = (char *)result;
  if (v19 != a3)
  {
    v22 = (char *)result;
    v23 = result;
    do
    {
      *v23 = *v19;
      v23[1] = v19[1];
      v23[2] = v19[2];
      v22 += 12;
      v19 += 3;
      v23 += 3;
    }
    while (v19 != a3);
  }
  v24 = v22 - (char *)result;
LABEL_27:
  *v13 = (_DWORD *)((char *)result + v24);
  return result;
}

uint64_t sub_20C6E9058(uint64_t a1, signed int a2, int a3, _WORD *a4, _WORD *a5)
{
  signed int v6;
  uint64_t result;

  v6 = a2;
  if (a2 < 0)
    a2 = -a2;
  result = sub_20C6E90B8(a1, a2, a3, a5);
  if (v6)
    return sub_20C6E8A80(a1, v6 >= 0, a4);
  return result;
}

uint64_t sub_20C6E90B8(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  int v5;
  unsigned int v6;
  int i;
  uint64_t result;
  int v10;
  __int16 v11;

  v5 = a3;
  v6 = a2;
  for (i = 1 << a3; v6 >= 1 << v5; i = 1 << v5)
  {
    sub_20C6E8A80(a1, 1, a4);
    ++v5;
    v6 -= i;
  }
  result = sub_20C6E8A80(a1, 0, a4);
  if (v5)
  {
    v10 = v5 - 1;
    do
    {
      v11 = 0x8000;
      result = sub_20C6E8A80(a1, (v6 >> v10--) & 1, &v11);
    }
    while (v10 != -1);
  }
  return result;
}

int *sub_20C6E916C(int *result, int *a2, int *a3, int a4, int *a5, int *a6, int *a7, int *a8, _DWORD *a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;

  v10 = *a7;
  v11 = a7[1];
  v12 = *a5 - v10;
  v13 = a5[1] - v11;
  v14 = a7[2];
  v15 = a5[2] - v14;
  v16 = *a6 - v10;
  v17 = a6[1] - v11;
  v18 = a6[2] - v14;
  v19 = *a8 - v10;
  v20 = a8[1] - v11;
  v21 = a8[2] - v14;
  v22 = v12 * v12 + v13 * v13 + v15 * v15;
  v23 = v16 * v16 + v17 * v17 + v18 * v18;
  if (v22 >> 30)
    v24 = 0;
  else
    v24 = v23 >> 30 == 0;
  if (v24 && (unint64_t)(v19 * v19 + v20 * v20 + v21 * v21) >> 30 == 0)
  {
    v32 = v16 * v12 + v17 * v13 + v18 * v15;
    v33 = v23 * v22 - v32 * v32;
    if (v33)
    {
      v34 = v19 * v12 + v20 * v13 + v21 * v15;
      v35 = v19 * v16 + v20 * v17 + v21 * v18;
      if (v33 >= 0x80)
      {
        v44 = __clz(v33);
        v45 = 57 - v44;
        v46 = 1 << (56 - v44);
        v33 = (uint64_t)(v46 + v33) >> v45;
        v47 = v34 * v23 - v35 * v32;
        if (v47 < 0)
          v36 = -(uint64_t)((unint64_t)(v46 - v47) >> v45);
        else
          v36 = (unint64_t)(v46 + v47) >> v45;
        if (v36 >= 0x3FFFFFFFFFFFLL)
          v36 = 0x3FFFFFFFFFFFLL;
        if (v36 <= (uint64_t)0xFFFFC00000000001)
          v36 = 0xFFFFC00000000001;
        v48 = v35 * v22 - v34 * v32;
        if (v48 < 0)
          v37 = -(uint64_t)((unint64_t)(v46 - v48) >> v45);
        else
          v37 = (unint64_t)(v46 + v48) >> v45;
      }
      else
      {
        v36 = v34 * v23 - v35 * v32;
        if (v36 >= 0x3FFFFFFFFFFFLL)
          v36 = 0x3FFFFFFFFFFFLL;
        if (v36 <= (uint64_t)0xFFFFC00000000001)
          v36 = 0xFFFFC00000000001;
        v37 = v35 * v22 - v34 * v32;
      }
      if (v37 >= 0x3FFFFFFFFFFFLL)
        v37 = 0x3FFFFFFFFFFFLL;
      v49 = 0xFFFFC00000000001;
      if (v37 > (uint64_t)0xFFFFC00000000001)
        v49 = v37;
      v50 = word_20CAF8CF8[v33 - 1];
      if (v36 * v50 >= 0x3FFFFFFF)
        v51 = 0x3FFFFFFFLL;
      else
        v51 = v36 * v50;
      if (v51 <= -1073741823)
        v51 = -1073741823;
      v52 = v49 * v50;
      if (v52 >= 0x3FFFFFFF)
        v52 = 0x3FFFFFFFLL;
      if (v52 <= -1073741823)
        v52 = -1073741823;
      if (a4 >= 1)
      {
        v53 = a4;
        do
        {
          v55 = *result++;
          v54 = v55;
          v56 = *a2++;
          v57 = v51 * v54 + v52 * v56;
          v58 = *a3++;
          v59 = v57 + (0x10000 - (v52 + v51)) * v58;
          if (v59 >= 0)
            v60 = (unint64_t)(v59 + 0x8000) >> 16;
          else
            v60 = -(uint64_t)((unint64_t)(0x8000 - v59) >> 16);
          if (v60 >= 0x3FFFFFFF)
            v60 = 0x3FFFFFFFLL;
          if (v60 <= -1073741823)
            LODWORD(v60) = -1073741823;
          *a9++ = v60;
          --v53;
        }
        while (v53);
      }
    }
    else if (a4 >= 1)
    {
      v38 = a4;
      do
      {
        v40 = *result++;
        v39 = v40;
        v42 = *a2++;
        v41 = v42;
        v43 = *a3++;
        *a9++ = v41 + v39 - v43;
        --v38;
      }
      while (v38);
    }
  }
  else if (a4 >= 1)
  {
    v26 = a4;
    do
    {
      v28 = *result++;
      v27 = v28;
      v30 = *a2++;
      v29 = v30;
      v31 = *a3++;
      *a9++ = v29 + v27 - v31;
      --v26;
    }
    while (v26);
  }
  return result;
}

int *sub_20C6E940C(int *result, int *a2, int *a3, _DWORD *a4, _DWORD *a5, int *a6, int *a7, _DWORD *a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;

  *a8 = 0;
  v8 = a5[1];
  v9 = a4[1];
  v10 = a5[2];
  v11 = a4[2];
  v12 = (v8 - v9) * (uint64_t)(v8 - v9) + (*a5 - *a4) * (uint64_t)(*a5 - *a4) + (v10 - v11) * (uint64_t)(v10 - v11);
  v13 = *a6;
  v14 = a6[1];
  v15 = a6[2];
  v16 = (v14 - v9) * (uint64_t)(v14 - v9) + (v13 - *a4) * (uint64_t)(v13 - *a4) + (v15 - v11) * (uint64_t)(v15 - v11);
  v17 = (v14 - v8) * (uint64_t)(v14 - v8) + (v13 - *a5) * (uint64_t)(v13 - *a5) + (v15 - v10) * (uint64_t)(v15 - v10);
  if (v12 >> 28)
    v18 = 0;
  else
    v18 = v16 >> 28 == 0;
  if (!v18 || v17 >> 28 != 0 || v12 == 0)
  {
    v21 = *a2 + *result;
    if (v21 < 0 != __OFADD__(*a2, *result))
      ++v21;
    *a7 = v21 >> 1;
    v22 = result[1];
    v23 = a2[1];
    v24 = __OFADD__(v23, v22);
    v25 = v23 + v22;
    if (v25 < 0 != v24)
      ++v25;
    LODWORD(v26) = v25 >> 1;
  }
  else
  {
    v27 = __clz(v12);
    v28 = 1 << (56 - v27);
    if (v12 >= 0x80)
    {
      v17 = (v28 + v17) >> (57 - v27);
      v16 = (v28 + v16) >> (57 - v27);
      v12 = (v28 + v12) >> (57 - v27);
    }
    v29 = word_20CAF8CF8[v12 - 1];
    v30 = (v16 - v17) * v29;
    v31 = 1073676288;
    if (v30 < 1073676288)
      v31 = v30;
    v32 = v31 + 0x10000;
    v33 = v30 < -1073807360;
    v34 = -1073741824;
    if (!v33)
      v34 = v32;
    v35 = ((v16 * v29) << 18) - v34 * v34;
    if (v35 >= 0xFFFFFFFFLL)
      v35 = 0xFFFFFFFFLL;
    LODWORD(v36) = v35 & ~(v35 >> 63);
    v37 = *result;
    v38 = result[1];
    v39 = *a2 - v37;
    v40 = a2[1] - v38;
    v41 = a3[1] - v38;
    v42 = __clz(v36);
    v43 = ((v36 >> ((32 - v42) >> 1)) + (1 << ((32 - v42) >> 1))) >> 1;
    if (v36 >= 2)
      v36 = v43;
    else
      v36 = v36;
    if ((*a3 - v37) * v40 < v41 * v39)
    {
      v36 = -v36;
      *a8 = 1;
      LODWORD(v37) = *result;
    }
    v44 = (int)v37;
    v45 = v34 * v39 + v36 * v40;
    if (v45 >= 0)
      v46 = (unint64_t)(v45 + 0x10000) >> 17;
    else
      v46 = -(uint64_t)((unint64_t)(0x10000 - v45) >> 17);
    v47 = v46 + v44;
    v48 = v34 * v40 - v36 * v39;
    if (v48 >= 0)
      v49 = (unint64_t)(v48 + 0x10000) >> 17;
    else
      v49 = -(uint64_t)((unint64_t)(0x10000 - v48) >> 17);
    v50 = v49 + result[1];
    if (v47 >= 0x3FFFFFFF)
      v47 = 0x3FFFFFFFLL;
    if (v47 <= -1073741823)
      LODWORD(v47) = -1073741823;
    *a7 = v47;
    if (v50 >= 0x3FFFFFFF)
      v26 = 0x3FFFFFFFLL;
    else
      v26 = v50;
    if (v26 <= -1073741823)
      LODWORD(v26) = -1073741823;
  }
  a7[1] = v26;
  return result;
}

int *sub_20C6E964C(int *result, int *a2, _DWORD *a3, _DWORD *a4, int *a5, int a6, int *a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v7 = a4[1];
  v8 = a3[1];
  v9 = a4[2];
  v10 = a3[2];
  v11 = (v7 - v8) * (uint64_t)(v7 - v8) + (*a4 - *a3) * (uint64_t)(*a4 - *a3) + (v9 - v10) * (uint64_t)(v9 - v10);
  v12 = *a5;
  v13 = a5[1];
  v14 = a5[2];
  v15 = (v13 - v8) * (uint64_t)(v13 - v8) + (v12 - *a3) * (uint64_t)(v12 - *a3) + (v14 - v10) * (uint64_t)(v14 - v10);
  v16 = (v13 - v7) * (uint64_t)(v13 - v7) + (v12 - *a4) * (uint64_t)(v12 - *a4) + (v14 - v9) * (uint64_t)(v14 - v9);
  if (v11 >> 28)
    v17 = 0;
  else
    v17 = v15 >> 28 == 0;
  if (!v17 || v16 >> 28 != 0 || v11 == 0)
  {
    v20 = *a2 + *result;
    if (v20 < 0 != __OFADD__(*a2, *result))
      ++v20;
    *a7 = v20 >> 1;
    v21 = result[1];
    v22 = a2[1];
    v23 = __OFADD__(v22, v21);
    v24 = v22 + v21;
    if (v24 < 0 != v23)
      ++v24;
    LODWORD(v25) = v24 >> 1;
  }
  else
  {
    v26 = __clz(v11);
    v27 = 57 - v26;
    v28 = 1 << (56 - v26);
    v29 = (v28 + v11) >> v27;
    v30 = (v28 + v15) >> v27;
    v31 = (v28 + v16) >> v27;
    if (v11 >= 0x80)
    {
      v16 = v31;
      v15 = v30;
      v11 = v29;
    }
    v32 = word_20CAF8CF8[v11 - 1];
    v33 = (v15 - v16) * v32;
    v34 = 1073676288;
    if (v33 < 1073676288)
      v34 = v33;
    v35 = v34 + 0x10000;
    v36 = v33 < -1073807360;
    v37 = -1073741824;
    if (!v36)
      v37 = v35;
    v38 = ((v15 * v32) << 18) - v37 * v37;
    if (v38 >= 0xFFFFFFFFLL)
      v38 = 0xFFFFFFFFLL;
    LODWORD(v38) = v38 & ~(v38 >> 63);
    v39 = *result;
    v40 = result[1];
    v41 = *a2 - v39;
    v42 = a2[1] - v40;
    v43 = __clz(v38);
    if (v38 >= 2)
      v38 = ((v38 >> ((32 - v43) >> 1)) + (1 << ((32 - v43) >> 1))) >> 1;
    else
      v38 = v38;
    v44 = v38 * *((int *)&unk_20CAF8CB0 + a6);
    v45 = v37 * v41 + v44 * v42;
    if (v45 >= 0)
      v46 = (unint64_t)(v45 + 0x10000) >> 17;
    else
      v46 = -(uint64_t)((unint64_t)(0x10000 - v45) >> 17);
    v47 = v46 + v39;
    v48 = v37 * v42 - v44 * v41;
    if (v48 >= 0)
      v49 = (unint64_t)(v48 + 0x10000) >> 17;
    else
      v49 = -(uint64_t)((unint64_t)(0x10000 - v48) >> 17);
    v25 = v49 + v40;
    if (v47 >= 0x3FFFFFFF)
      v50 = 0x3FFFFFFFLL;
    else
      v50 = v47;
    if (v50 <= -1073741823)
      LODWORD(v50) = -1073741823;
    *a7 = v50;
    if (v25 >= 0x3FFFFFFF)
      v25 = 0x3FFFFFFFLL;
    if (v25 <= -1073741823)
      LODWORD(v25) = -1073741823;
  }
  a7[1] = v25;
  return result;
}

unint64_t sub_20C6E9868(unint64_t result, int *a2, int *a3, _DWORD *a4, _DWORD *a5, int *a6, int *a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v7 = a5[1];
  v8 = a4[1];
  v9 = a5[2];
  v10 = a4[2];
  v11 = (v7 - v8) * (uint64_t)(v7 - v8) + (*a5 - *a4) * (uint64_t)(*a5 - *a4) + (v9 - v10) * (uint64_t)(v9 - v10);
  v12 = *a6;
  v13 = a6[1];
  v14 = a6[2];
  v15 = (v13 - v8) * (uint64_t)(v13 - v8) + (v12 - *a4) * (uint64_t)(v12 - *a4) + (v14 - v10) * (uint64_t)(v14 - v10);
  v16 = (v13 - v7) * (uint64_t)(v13 - v7) + (v12 - *a5) * (uint64_t)(v12 - *a5) + (v14 - v9) * (uint64_t)(v14 - v9);
  if (v11 >> 28)
    v17 = 0;
  else
    v17 = v15 >> 28 == 0;
  if (!v17 || v16 >> 28 != 0 || v11 == 0)
  {
    v20 = *a2 + *(_DWORD *)result;
    if (v20 < 0 != __OFADD__(*a2, *(_DWORD *)result))
      ++v20;
    *a7 = v20 >> 1;
    v21 = *(_DWORD *)(result + 4);
    v22 = a2[1];
    v23 = __OFADD__(v22, v21);
    v24 = v22 + v21;
    if (v24 < 0 != v23)
      ++v24;
    LODWORD(v25) = v24 >> 1;
  }
  else
  {
    v26 = __clz(v11);
    v27 = 57 - v26;
    v28 = 1 << (56 - v26);
    v29 = (v28 + v11) >> v27;
    v30 = (v28 + v15) >> v27;
    v31 = (v28 + v16) >> v27;
    if (v11 >= 0x80)
    {
      v16 = v31;
      v15 = v30;
      v11 = v29;
    }
    v32 = word_20CAF8CF8[v11 - 1];
    v33 = (v15 - v16) * v32;
    v34 = 1073676288;
    if (v33 < 1073676288)
      v34 = v33;
    v35 = v34 + 0x10000;
    v36 = v33 < -1073807360;
    v37 = -1073741824;
    if (!v36)
      v37 = v35;
    v38 = ((v15 * v32) << 18) - v37 * v37;
    if (v38 >= 0xFFFFFFFFLL)
      v38 = 0xFFFFFFFFLL;
    LODWORD(v38) = v38 & ~(v38 >> 63);
    v39 = *(int *)result;
    v40 = *(int *)(result + 4);
    v41 = *a2 - v39;
    v42 = a2[1] - v40;
    v43 = (32 - __clz(v38)) >> 1;
    result = v38 >> v43;
    if (v38 >= 2)
      v38 = (result + (1 << v43)) >> 1;
    else
      v38 = v38;
    if ((v40 - a3[1]) * v41 < (v39 - *a3) * v42)
      v38 = -v38;
    v44 = v37 * v41 - v38 * v42;
    if (v44 >= 0)
      v45 = (unint64_t)(v44 + 0x10000) >> 17;
    else
      v45 = -(uint64_t)((unint64_t)(0x10000 - v44) >> 17);
    v46 = v45 + v39;
    v47 = v37 * v42 + v38 * v41;
    if (v47 >= 0)
      v48 = (unint64_t)(v47 + 0x10000) >> 17;
    else
      v48 = -(uint64_t)((unint64_t)(0x10000 - v47) >> 17);
    v25 = v48 + v40;
    if (v46 >= 0x3FFFFFFF)
      v49 = 0x3FFFFFFFLL;
    else
      v49 = v46;
    if (v49 <= -1073741823)
      LODWORD(v49) = -1073741823;
    *a7 = v49;
    if (v25 >= 0x3FFFFFFF)
      v25 = 0x3FFFFFFFLL;
    if (v25 <= -1073741823)
      LODWORD(v25) = -1073741823;
  }
  a7[1] = v25;
  return result;
}

char *sub_20C6E9A90(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  _DWORD *v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;

  v3 = a3 - 4;
  if (a3 >= 4)
  {
    v7 = *a2;
    v5 = a2 + 1;
    v6 = (char *)v7;
    if (v5)
      v4 = &v6[(_QWORD)v5];
    else
      v4 = v6;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v3 = 0;
    v6 = 0;
  }
  if (!v4)
    return 0;
  v8 = 0;
  if (((v3 - (_QWORD)v6) & 0x8000000000000000) == 0)
  {
    *(_DWORD *)a1 = (_DWORD)v6;
    *(_QWORD *)(a1 + 8) = v5;
    sub_20C6E7C84(a1);
    return v4;
  }
  return (char *)v8;
}

uint64_t sub_20C6E9B10(uint64_t a1, unint64_t a2, unint64_t a3, _QWORD *a4, int32x2_t *a5, _DWORD *a6, void *a7, int *a8)
{
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int16x4_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  uint64_t v28;
  int32x2_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  _DWORD *v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  int32x2_t v38;
  int v39;
  _DWORD *v40;
  int32x2_t *v41;
  __int32 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  __int128 v53;
  char v54;
  int v55;
  char v56;
  uint64_t v57;
  unsigned __int8 v58;

  *(_DWORD *)(a1 + 4384) = 0;
  v54 = 0;
  v52 = 0u;
  v53 = 0u;
  v55 = 0;
  v56 = 4;
  v57 = 0x101010100000002;
  v58 = 1;
  v16 = (_DWORD *)sub_20C6E9F20(a2, a3, (uint64_t)&v52, (int16x8_t)0);
  if (!v16)
    goto LABEL_59;
  if (v17 < 0)
    goto LABEL_59;
  if (!a2)
    goto LABEL_59;
  if (((a3 - DWORD2(v52)) & 0x8000000000000000) != 0)
    goto LABEL_59;
  if ((unint64_t)v16 + v17 < a2)
    goto LABEL_59;
  if (a2 + DWORD2(v52) < (unint64_t)v16)
    goto LABEL_59;
  v18 = a2 + DWORD2(v52) - (_QWORD)v16;
  if (v18 < 0)
    goto LABEL_59;
  if (!a5 || !a7 || !a6 && (HIDWORD(v53) & 0xFFFFFFFE) == 2 || !a8 && v54)
    goto LABEL_14;
  v20 = (int16x4_t)vand_s8((int8x8_t)vdup_n_s16(BYTE4(v52) == 0), (int8x8_t)vceq_s16((int16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE5(v52)) & 0xFF00FF00FF00FFLL), (int16x4_t)0x8000600040005));
  if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v20, 0xFuLL))) & 1) == 0
    || v54 && (vorr_s8((int8x8_t)v20, (int8x8_t)vdup_lane_s16(v20, 1)).u8[0] & 1) != 0 && (v56 & 0xFB) != 0)
  {
    v19 = 4;
    goto LABEL_60;
  }
  if (a3 < DWORD2(v52) || (_DWORD)v57 == 3 || (_DWORD)v57 == 4 || v56 == 3 || v56 == 1)
    goto LABEL_59;
  v19 = 0;
  if (!(_DWORD)v53 || !HIDWORD(v52))
    return v19;
  v49 = 0;
  v48 = 0;
  if ((unint64_t)v18 < 4
    || (LODWORD(v50) = *v16, (v18 & 0xFFFFFFFFFFFFFFFCLL) == 4)
    || (HIDWORD(v50) = v16[1], (v18 & 0xFFFFFFFFFFFFFFFCLL) == 8))
  {
    v21 = 0;
    v22 = 0;
  }
  else
  {
    v21 = v18 - 12;
    v22 = v16 + 3;
    v51 = v16[2];
  }
  v23 = v58;
  if (v58)
  {
    if (!v21)
      goto LABEL_59;
    v23 = *(unsigned __int8 *)v22;
    LODWORD(v48) = v23;
    if (v21 == 1)
      goto LABEL_59;
    v24 = *((unsigned __int8 *)v22 + 1);
    HIDWORD(v48) = v24;
    if (v21 == 2)
      goto LABEL_59;
    v21 -= 3;
    v25 = *((unsigned __int8 *)v22 + 2);
    v22 = (unsigned int *)((char *)v22 + 3);
    v49 = v25;
  }
  else
  {
    v25 = 0;
    v24 = 0;
  }
  if (!v22)
    goto LABEL_59;
  if ((int)v23 <= (int)v24)
    v26 = v24;
  else
    v26 = v23;
  if (v23 <= v24)
    v23 = v24;
  if (v26 < v25)
    v23 = v25;
  if (v23 >= 0x1D)
    goto LABEL_59;
  sub_20C6EA08C(a1 + 1072, &v52, &v50, &v48);
  sub_20C6EA1A4(a1 + 1304, a1 + 1072);
  v27 = sub_20C6E9A90(a1, v22, v21);
  if (!v27)
    goto LABEL_59;
  v30 = v28;
  if (v28 < 0)
    goto LABEL_59;
  v31 = (unsigned int *)v27;
  if (*(_BYTE *)(a1 + 1152))
    sub_20C6EA39C(a1, v29);
  else
    sub_20C6EA5C4(a1, v29);
  v19 = *(unsigned int *)(a1 + 4384);
  if ((_DWORD)v19)
    return v19;
  if (v54)
  {
    if (!a8)
    {
LABEL_14:
      v19 = 5;
LABEL_60:
      *(_DWORD *)(a1 + 4384) = v19;
      return v19;
    }
    if (sub_20C6E9A90(a1, v31, v30) && (v32 & 0x8000000000000000) == 0)
    {
      sub_20C6EA794(a1, a8);
      v19 = *(unsigned int *)(a1 + 4384);
      if ((_DWORD)v19)
        return v19;
      v19 = sub_20C6EAAF0(a1, a8);
      *(_DWORD *)(a1 + 4384) = v19;
      goto LABEL_63;
    }
LABEL_59:
    v19 = 3;
    goto LABEL_60;
  }
  sub_20BE81ACC(a1 + 1232, 2uLL);
  v34 = *(_DWORD **)(a1 + 1232);
  *v34 = 0;
  v34[1] = v53;
  v19 = *(unsigned int *)(a1 + 4384);
LABEL_63:
  if (!(_DWORD)v19)
  {
    v35 = *(_BYTE **)(a1 + 1184);
    v36 = *(_BYTE **)(a1 + 1192);
    if (v36 != v35)
      memmove(a7, v35, v36 - v35);
    v37 = HIDWORD(v52);
    if (SHIDWORD(v52) >= 1)
    {
      v38 = *(int32x2_t *)(a1 + 1092);
      v39 = *(_DWORD *)(a1 + 1100);
      v40 = (_DWORD *)(*(_QWORD *)(a1 + 1160) + 8);
      v41 = a5 + 1;
      do
      {
        v42 = *v40 + v39;
        v41[-1] = vadd_s32(*(int32x2_t *)(v40 - 2), v38);
        v41->i32[0] = v42;
        v41 = (int32x2_t *)((char *)v41 + 12);
        v40 += 3;
        --v37;
      }
      while (v37);
    }
    if (a6)
    {
      v43 = *(_QWORD *)(a1 + 1208);
      v44 = *(_QWORD *)(a1 + 1216) - v43;
      if ((unint64_t)v44 >= 5)
      {
        v45 = v44 >> 2;
        if (v45 <= 2)
          v45 = 2;
        v46 = v45 - 1;
        v47 = (_DWORD *)(v43 + 4);
        do
        {
          *a6++ = *v47 - *(v47 - 1);
          ++v47;
          --v46;
        }
        while (v46);
      }
    }
    v19 = 0;
    *a4 = DWORD2(v52);
  }
  return v19;
}

uint64_t sub_20C6E9F20(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  __int16 v11;
  int v12;
  int v13;
  int v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  if (a2 < 4)
    return 0;
  v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 4
    || a2 == 8
    || a2 == 9
    || (a2 & 0xFFFFFFFFFFFFFFFELL) == 0xA
    || v4 == 12
    || v4 == 16
    || v4 == 20
    || a2 == 24
    || a2 == 25
    || a2 == 26
    || a2 == 27
    || v4 == 28)
  {
    return 0;
  }
  v7 = a1 + 32;
  if (a1 == -32)
    return 0;
  v5 = 0;
  if (*(_DWORD *)a1 == -90009999)
  {
    v8 = *(_DWORD *)(a1 + 4);
    v9 = *(_BYTE *)(a1 + 8);
    v10 = *(_BYTE *)(a1 + 9);
    v11 = *(_WORD *)(a1 + 10);
    v12 = *(_DWORD *)(a1 + 12);
    v13 = *(_DWORD *)(a1 + 16) & 0x7FFFFFFF;
    v14 = *(_DWORD *)(a1 + 20) & 0x7FFFFFFF;
    v15 = *(_BYTE *)(a1 + 24);
    v16 = *(unsigned __int8 *)(a1 + 25);
    v17 = *(unsigned __int8 *)(a1 + 26);
    v18 = *(unsigned __int8 *)(a1 + 27);
    v19 = *(_DWORD *)(a1 + 28) & 0x7FFFFFFF;
    *(uint16x4_t *)a4.i8 = vshl_u16((uint16x4_t)vdup_n_s16(v17), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL);
    if (v17 >> 6 == 1)
      v19 = 4 * v14;
    if (v17 < 0x40)
      v19 = 3 * v14;
    *(_DWORD *)a3 = 0;
    *(_BYTE *)(a3 + 4) = v9;
    *(_BYTE *)(a3 + 5) = v10;
    *(_WORD *)(a3 + 6) = v11;
    *(_DWORD *)(a3 + 8) = v12;
    *(_DWORD *)(a3 + 12) = v13;
    *(_DWORD *)(a3 + 16) = v14;
    *(_DWORD *)(a3 + 20) = v19;
    *(_DWORD *)(a3 + 24) = v18;
    *(_DWORD *)(a3 + 28) = v17 >> 6;
    *(_BYTE *)(a3 + 32) = v17 & 1;
    *(_DWORD *)(a3 + 36) = v8;
    *(_BYTE *)(a3 + 40) = v15;
    *(_DWORD *)(a3 + 44) = v16;
    a4.i32[0] &= 0xFF01FF01;
    a4.i16[2] &= 0xFF01u;
    a4.i16[3] &= 0xFF01u;
    *(_DWORD *)(a3 + 48) = vmovn_s16(a4).u32[0];
    *(_BYTE *)(a3 + 52) = (v17 & 0x20) != 0;
    return v7;
  }
  return v5;
}

void sub_20C6EA08C(uint64_t a1, __int128 *a2, uint64_t *a3, uint64_t *a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  *(_QWORD *)(a1 + 77) = *(_QWORD *)((char *)a2 + 45);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)a1 = 0;
  v9 = *a4;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(a1 + 8) = v9;
  v10 = *a3;
  *(_DWORD *)(a1 + 28) = *((_DWORD *)a3 + 2);
  *(_QWORD *)(a1 + 20) = v10;
  v11 = *((int *)a2 + 3);
  sub_20C6E8374((uint64_t *)(a1 + 88), v11);
  sub_20BE81ACC(a1 + 136, 0);
  v12 = *((int *)a2 + 4) + 1;
  LODWORD(v13) = 0;
  sub_20BE86740(a1 + 136, v12, &v13);
  sub_20BE81ACC(a1 + 112, *((int *)a2 + 5));
  sub_20C6E8374((uint64_t *)(a1 + 184), 0);
  v14 = -1;
  v13 = -1;
  sub_20C6E83B0((uint64_t *)(a1 + 184), v11, &v13);
  sub_20C6E8374((uint64_t *)(a1 + 208), 0);
  v14 = -1;
  v13 = -1;
  sub_20C6E83B0((uint64_t *)(a1 + 208), v11, &v13);
  sub_20BE81ACC(a1 + 160, 0);
}

void sub_20C6EA1A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  BOOL v4;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *(int *)(a2 + 44);
  if (*(_BYTE *)(a2 + 81))
    v4 = *(_BYTE *)(a2 + 80) == 0;
  else
    v4 = 1;
  if (!v4 || (sub_20BE81ACC(a1 + 120, 0), v12 = 0, sub_20BE86740(a1 + 120, v3, &v12), *(_BYTE *)(a2 + 80)))
  {
    sub_20C6F4A90(a1 + 168, v3);
    sub_20C6F4ACC(a1 + 192, 64);
  }
  sub_20C6F4B60(a1 + 144, v3);
  v6 = *(_BYTE **)(a1 + 144);
  v7 = *(_BYTE **)(a1 + 152);
  if (v6 != v7)
    memset(v6, 255, ((v7 - v6 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
  sub_20BE857FC((void **)a1, 0x100uLL);
  sub_20BE857FC((void **)(a1 + 96), 0x40uLL);
  sub_20BE857FC((void **)(a1 + 72), 0x40uLL);
  sub_20BE857FC((void **)(a1 + 24), 0x20uLL);
  sub_20C6F4B90((unint64_t *)(a1 + 48), 0x20uLL);
  memset_pattern16((void *)(a1 + 1992), &unk_20CAF8CE0, 0xAuLL);
  v8 = 0;
  *(_WORD *)(a1 + 2002) = 0x8000;
  do
  {
    memset_pattern16((void *)(a1 + 2004 + v8), &unk_20CAF8CE0, 6uLL);
    v8 += 6;
  }
  while (v8 != 96);
  *(_WORD *)(a1 + 2100) = 0x8000;
  memset_pattern16((void *)(a1 + 2102), &unk_20CAF8CE0, 6uLL);
  v9 = 0;
  *(_WORD *)(a1 + 2108) = 0x8000;
  do
  {
    memset_pattern16((void *)(a1 + 2110 + v9), &unk_20CAF8CE0, 0x10uLL);
    v9 += 16;
  }
  while (v9 != 80);
  memset_pattern16((void *)(a1 + 2194), &unk_20CAF8CE0, 0x20uLL);
  memset_pattern16((void *)(a1 + 2232), &unk_20CAF8CE0, 0x80uLL);
  *(_WORD *)(a1 + 2230) = 0x8000;
  *(_DWORD *)(a1 + 2190) = -2147450880;
  *(_DWORD *)(a1 + 2226) = -2147450880;
  memset_pattern16((void *)(a1 + 2368), &unk_20CAF8CE0, 6uLL);
  v10 = 0;
  v11 = a1 + 2376;
  do
  {
    sub_20C6EC678(v11 + v10, 3);
    v10 += 120;
  }
  while (v10 != 240);
}

uint64_t sub_20C6EA39C(uint64_t a1, int32x2_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  _BOOL4 v12;
  _BOOL4 v13;
  unsigned int v14;
  int v15;
  int32x2_t v16;
  uint64_t result;
  int v18;
  int v19;
  _BOOL4 v20;
  _BOOL4 v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  uint64_t v27;

  v3 = *(unsigned int *)(a1 + 1116);
  v27 = 0;
  v26 = 0;
  if ((int)v3 < 1)
  {
    v22 = 0;
    v23 = 0;
LABEL_27:
    v24 = *(_DWORD *)(a1 + 1120) == v23 && (_DWORD)v3 == v22;
    if (v24 && *(_DWORD *)(a1 + 1124) == v26)
    {
      return 0;
    }
    else
    {
      result = 3;
      *(_DWORD *)(a1 + 4384) = 3;
    }
  }
  else
  {
    v4 = 0;
    v5 = (_DWORD *)(a1 + 1496);
    LODWORD(v6) = -1;
    while (1)
    {
      if (v4 == HIDWORD(v27))
      {
        ++HIDWORD(v27);
        v7 = *(_BYTE *)(a1 + 1156) ? -1 : v6;
        *(_DWORD *)(*(_QWORD *)(a1 + 1256) + 12 * v4) = v7;
        sub_20C6EE7E8(a1, v4, a2);
        sub_20C6EF550((_DWORD *)(a1 + 1496), (int *)(*(_QWORD *)(a1 + 1472) + 12 * v4));
        if (*(_DWORD *)(a1 + 1496))
          break;
      }
LABEL_24:
      if (++v4 == v3)
      {
        v23 = v27;
        v22 = HIDWORD(v27);
        LODWORD(v3) = *(_DWORD *)(a1 + 1116);
        goto LABEL_27;
      }
    }
    while (1)
    {
      v8 = *(_DWORD *)(a1 + 1500);
      v9 = v8 < 0 ? 0 : sub_20C6F54E0((_DWORD *)(a1 + 1496), v8);
      v6 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *(_QWORD *)(a1 + 1472)) >> 2);
      v10 = *(_DWORD *)(*(_QWORD *)(a1 + 1448) + 16 * (int)v6);
      v11 = *(_DWORD *)(*(_QWORD *)(a1 + 1448) + 16 * (int)v6 + 4);
      v12 = v10 != -1;
      v13 = v11 == v10 && v10 != -1;
      v14 = (v12 | (2 * (v11 != -1))) + v13;
      if (sub_20C6E81C0((unsigned int *)a1, (_WORD *)(a1 + 2 * v14 + 3296)))
        break;
LABEL_23:
      if (!*v5)
        goto LABEL_24;
    }
    while (1)
    {
      v25 = 0;
      v15 = sub_20C6EF6E0(a1, v6, v14, &v25, (_DWORD *)&v27 + 1, (int *)&v27, &v26);
      result = *(unsigned int *)(a1 + 4384);
      if (v15 < 0)
        break;
      if ((_DWORD)result)
        break;
      sub_20C6EEFC0(a1, v25, v15, v16);
      result = *(unsigned int *)(a1 + 4384);
      if ((_DWORD)result)
        break;
      sub_20C6EF080(a1, v6, v15);
      result = *(unsigned int *)(a1 + 4384);
      if ((_DWORD)result)
        break;
      v18 = *(_DWORD *)(*(_QWORD *)(a1 + 1448) + 16 * (int)v6);
      v19 = *(_DWORD *)(*(_QWORD *)(a1 + 1448) + 16 * (int)v6 + 4);
      v20 = v18 != -1;
      v21 = v19 == v18 && v18 != -1;
      v14 = (v20 | (2 * (v19 != -1))) + v21;
      if (!sub_20C6E81C0((unsigned int *)a1, (_WORD *)(a1 + 3306)))
        goto LABEL_23;
    }
  }
  return result;
}

uint64_t sub_20C6EA5C4(uint64_t a1, int32x2_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  unsigned int v13;
  int v14;
  int32x2_t v15;
  uint64_t result;
  int v17;
  int v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  int v26;

  v3 = *(unsigned int *)(a1 + 1116);
  v24 = 0;
  v25 = 0;
  if ((int)v3 < 1)
  {
    v4 = 0;
    v21 = 0;
LABEL_24:
    v22 = *(_DWORD *)(a1 + 1120) == v21 && (_DWORD)v3 == v4;
    if (v22 && *(_DWORD *)(a1 + 1124) == v24)
    {
      return 0;
    }
    else
    {
      result = 3;
      *(_DWORD *)(a1 + 4384) = 3;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
    LODWORD(v6) = 0;
    LODWORD(v7) = -1;
    while (1)
    {
      if (v5 == v4)
      {
        v26 = v4 + 1;
        v8 = *(_BYTE *)(a1 + 1156) ? -1 : v7;
        *(_DWORD *)(*(_QWORD *)(a1 + 1256) + 12 * v5) = v8;
        a2 = sub_20C6EE7E8(a1, v5, a2);
        v4 = v26;
        if ((int)v6 < v26)
          break;
      }
LABEL_21:
      if (++v5 == v3)
      {
        v21 = v25;
        LODWORD(v3) = *(_DWORD *)(a1 + 1116);
        goto LABEL_24;
      }
    }
    v6 = (int)v6;
    while (1)
    {
      v7 = v6;
      v9 = *(_DWORD *)(*(_QWORD *)(a1 + 1448) + 16 * v6);
      v10 = *(_DWORD *)(*(_QWORD *)(a1 + 1448) + 16 * v6 + 4);
      v11 = v9 != -1;
      v12 = v10 == v9 && v9 != -1;
      v13 = (v11 | (2 * (v10 != -1))) + v12;
      if (sub_20C6E81C0((unsigned int *)a1, (_WORD *)(a1 + 2 * v13 + 3296)))
        break;
LABEL_20:
      v6 = v7 + 1;
      v4 = v26;
      if (v7 + 1 >= v26)
        goto LABEL_21;
    }
    while (1)
    {
      v23 = 0;
      v14 = sub_20C6EF6E0(a1, v7, v13, &v23, &v26, &v25, &v24);
      result = *(unsigned int *)(a1 + 4384);
      if (v14 < 0)
        break;
      if ((_DWORD)result)
        break;
      sub_20C6EEFC0(a1, v23, v14, v15);
      result = *(unsigned int *)(a1 + 4384);
      if ((_DWORD)result)
        break;
      v17 = *(_DWORD *)(*(_QWORD *)(a1 + 1448) + 16 * v7);
      v18 = *(_DWORD *)(*(_QWORD *)(a1 + 1448) + 16 * v7 + 4);
      v19 = v17 != -1;
      v20 = v18 == v17 && v17 != -1;
      v13 = (v19 | (2 * (v18 != -1))) + v20;
      if (!sub_20C6E81C0((unsigned int *)a1, (_WORD *)(a1 + 3306)))
        goto LABEL_20;
    }
  }
  return result;
}

uint64_t sub_20C6EA794(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  _DWORD *v4;
  int v5;
  int v6;
  _BOOL4 v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  _WORD __b[64];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (a2 && (v3 = *(unsigned int *)(a1 + 1120), (int)v3 > 0))
  {
    v4 = a2;
    if (*(_BYTE *)(a1 + 1144))
    {
      v39 = 0x8000;
      v38 = 0x8000;
      memset_pattern16(__b, &unk_20CAF8CE0, 0x80uLL);
      v5 = 0;
      v37 = 0x8000;
      v6 = 6;
      do
      {
        if (sub_20C6E81C0((unsigned int *)a1, &v39))
        {
          v7 = sub_20C6E81C0((unsigned int *)a1, &v38);
          if (sub_20C6E81C0((unsigned int *)a1, __b))
            v8 = 32;
          else
            v8 = 0;
          if (sub_20C6E81C0((unsigned int *)a1, &__b[(v8 >> 5) + 1]))
            v9 = 16;
          else
            v9 = 0;
          v10 = v9 | v8;
          if (sub_20C6E81C0((unsigned int *)a1, &__b[(v10 >> 4) + 3]))
            v11 = 8;
          else
            v11 = 0;
          v12 = v10 | v11;
          if (sub_20C6E81C0((unsigned int *)a1, &__b[(v12 >> 3) + 7]))
            v13 = 4;
          else
            v13 = 0;
          v14 = v12 | v13;
          if (sub_20C6E81C0((unsigned int *)a1, &__b[(v14 >> 2) + 15]))
            v15 = 2;
          else
            v15 = 0;
          v16 = v14 | v15 | sub_20C6E81C0((unsigned int *)a1, &__b[((v14 | v15) >> 1) + 31]);
          if (v16 == 63)
          {
            v17 = sub_20C6E82B0((unsigned int *)a1, v6, &v37);
            v16 = v17 + 63;
            v18 = -63 - v17;
            if (v17 >= -63)
              v18 = v17 + 63;
            v19 = v18 >> v6;
            if (!v6 || v19)
            {
              if (v19 > 1)
                ++v6;
            }
            else
            {
              --v6;
            }
          }
          if (v7)
            v20 = v16 + 1;
          else
            v20 = ~v16;
        }
        else
        {
          v20 = 0;
        }
        v5 += v20;
        *v4++ = v5;
        --v3;
      }
      while (v3);
    }
    else
    {
      v39 = 0x8000;
      v38 = 0x8000;
      memset_pattern16(__b, &unk_20CAF8CE0, 0x80uLL);
      v22 = 0;
      v37 = 0x8000;
      do
      {
        if (sub_20C6E81C0((unsigned int *)a1, &v39))
        {
          v23 = sub_20C6E81C0((unsigned int *)a1, &v38);
          v24 = sub_20C6E81C0((unsigned int *)a1, __b);
          if (v24)
            v25 = 2;
          else
            v25 = 1;
          if (sub_20C6E81C0((unsigned int *)a1, &__b[v25]))
            v26 = 2;
          else
            v26 = 0;
          v27 = v26 | v24;
          if (sub_20C6E81C0((unsigned int *)a1, &__b[v27 + 3]))
            v28 = 4;
          else
            v28 = 0;
          v29 = v27 | v28;
          if (sub_20C6E81C0((unsigned int *)a1, &__b[v29 + 7]))
            v30 = 8;
          else
            v30 = 0;
          v31 = v29 | v30;
          if (sub_20C6E81C0((unsigned int *)a1, &__b[v31 + 15]))
            v32 = 16;
          else
            v32 = 0;
          v33 = v31 | v32;
          if (sub_20C6E81C0((unsigned int *)a1, &__b[v33 + 31]))
            v34 = 32;
          else
            v34 = 0;
          v35 = v33 | v34;
          if (v35 == 63)
            v35 = sub_20C6E82B0((unsigned int *)a1, 6, &v37) + 63;
          if (v23)
            v36 = v35 + 1;
          else
            v36 = ~v35;
        }
        else
        {
          v36 = 0;
        }
        v22 += v36;
        *v4++ = v22;
        --v3;
      }
      while (v3);
    }
    return 0;
  }
  else
  {
    result = 3;
    *(_DWORD *)(a1 + 4384) = 3;
  }
  return result;
}

uint64_t sub_20C6EAAF0(uint64_t a1, int *a2)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  int *v7;
  int v8;
  int v9;
  int v10;
  uint64_t result;
  int v12;
  int **v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  int v17;
  int *v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  int *v40;
  int *v41;
  _DWORD *v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int *v48;
  int v49;
  int *v50;
  uint64_t v51;
  void *__p[3];
  void *v53[2];
  uint64_t v54;
  void *v55[3];
  void *v56[3];

  if (!a2
    || ((v3 = *(unsigned int *)(a1 + 1120), v4 = *(unsigned int *)(a1 + 1124), (int)v4 >= 3)
      ? (v5 = (int)v3 <= 0)
      : (v5 = 1),
        v5
     || (LOBYTE(v55[0]) = 0, v8 = *sub_20C6CC340(a2, &a2[v3]), v8 < 0)
     || (v9 = *v7, v10 = *v7 - v8, v10 > (int)v3)))
  {
    result = 3;
    *(_DWORD *)(a1 + 4384) = 3;
  }
  else
  {
    v12 = v10 + 2;
    *(_DWORD *)(a1 + 1076) = v8;
    *(_DWORD *)(a1 + 1072) = v9;
    v13 = (int **)(a1 + 1232);
    sub_20BE81ACC(a1 + 1232, 0);
    LODWORD(v56[0]) = 0;
    sub_20BE86740(a1 + 1232, v10 + 2, v56);
    v14 = *(_QWORD *)(a1 + 1232);
    v15 = v3;
    v16 = a2;
    do
    {
      v17 = *v16++;
      ++*(_DWORD *)(v14 + 4 * (v17 - v8 + 1));
      --v15;
    }
    while (v15);
    if ((v10 & 0x80000000) == 0)
    {
      v18 = *v13;
      if (v12 <= 2)
        v19 = 2;
      else
        v19 = v12;
      v22 = *v18;
      v20 = v18 + 1;
      v21 = v22;
      v23 = v19 - 1;
      do
      {
        v21 += *v20;
        *v20++ = v21;
        --v23;
      }
      while (v23);
    }
    sub_20BDE39A0(v56, v3);
    LODWORD(v53[0]) = 0;
    sub_20C6E8A00(v55, (int)v3 + 1, v53);
    v24 = 0;
    v25 = *(_QWORD *)(a1 + 1232);
    v26 = v56[0];
    v27 = *(_QWORD *)(a1 + 1208);
    v28 = v55[0];
    do
    {
      v29 = a2[v24] - v8;
      v30 = *(int *)(v25 + 4 * v29);
      *(_DWORD *)(v25 + 4 * v29) = v30 + 1;
      v26[v30] = v24;
      v28[v24 + 1] = *(_DWORD *)(v27 + 4 * v24 + 4) - *(_DWORD *)(v27 + 4 * v24) + v28[v24];
      ++v24;
    }
    while (v3 != v24);
    sub_20BDE39A0(v53, v4);
    sub_20BDE39A0(__p, v3);
    v31 = 0;
    v32 = 0;
    do
    {
      v33 = *((int *)v56[0] + v31);
      v34 = 4 * v33 + 4;
      v35 = *(_DWORD *)(*(_QWORD *)(a1 + 1208) + v34) - *(_DWORD *)(*(_QWORD *)(a1 + 1208) + 4 * v33);
      v36 = *((int *)v55[0] + v33);
      v37 = *(int *)((char *)v55[0] + v34);
      *((_DWORD *)__p[0] + v31) = v35;
      if ((_DWORD)v37 != (_DWORD)v36)
        memmove((char *)v53[0] + 4 * v32, (const void *)(*(_QWORD *)(a1 + 1184) + 4 * v36), 4 * v37 - 4 * v36);
      v32 += v35;
      ++v31;
    }
    while (v3 != v31);
    v38 = *(_OWORD *)(a1 + 1184);
    *(_OWORD *)(a1 + 1184) = *(_OWORD *)v53;
    *(_OWORD *)v53 = v38;
    v39 = *(_QWORD *)(a1 + 1200);
    *(_QWORD *)(a1 + 1200) = v54;
    v54 = v39;
    v40 = *(int **)(a1 + 1208);
    v41 = (int *)__p[0];
    v44 = *v40;
    v42 = v40 + 1;
    v43 = v44;
    do
    {
      v45 = *v41++;
      v43 += v45;
      *v42++ = v43;
      --v3;
    }
    while (v3);
    if ((v10 & 0x80000000) == 0)
    {
      v46 = 0;
      v47 = 0;
      v48 = *v13;
      do
      {
        v49 = v48[v46];
        if (v47 < v49)
        {
          v50 = &a2[v47];
          v51 = v49 - (uint64_t)v47;
          do
          {
            *v50++ = v8 + v46;
            --v51;
          }
          while (v51);
        }
        v48[v46++] = v47;
        v47 = v49;
      }
      while (v46 != v10 + 1);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v53[0])
    {
      v53[1] = v53[0];
      operator delete(v53[0]);
    }
    if (v55[0])
    {
      v55[1] = v55[0];
      operator delete(v55[0]);
    }
    if (v56[0])
    {
      v56[1] = v56[0];
      operator delete(v56[0]);
    }
    return 0;
  }
  return result;
}

void sub_20C6EADF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6EAE3C(uint64_t a1, unint64_t a2, unint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int **v21;
  int **v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  unsigned __int8 v29;
  int *v30;
  int *v31;
  char v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  int *v40;
  _DWORD *v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;

  result = 5;
  if (a2 && a5)
  {
    if (*(_DWORD *)(a1 + 4384))
      return 6;
    v14 = (unsigned int *)sub_20C6EB13C(a2, a3, a1 + 3992);
    result = 3;
    if (v14)
    {
      if ((v13 & 0x8000000000000000) == 0)
      {
        v15 = *(unsigned int *)(a1 + 4000);
        if ((uint64_t)(a3 - v15) >= 0 && (unint64_t)v14 + v13 >= a2)
        {
          v16 = a2 + v15;
          if (a2 + v15 >= (unint64_t)v14)
          {
            v17 = v16 - (_QWORD)v14;
            if (v16 - (uint64_t)v14 >= 0 && !*(_DWORD *)(a1 + 4028))
            {
              if (*(_BYTE *)(a1 + 3996))
                return 4;
              v18 = *(unsigned __int8 *)(a1 + 3997);
              result = 4;
              if (v18 <= 8 && ((1 << v18) & 0x160) != 0)
              {
                if (a3 < v15)
                  return 3;
                v19 = *(_DWORD *)(a1 + 1116);
                if (*(_DWORD *)(a1 + 4004) != v19 || !a6 && *(_DWORD *)(a1 + 4032))
                  return 3;
                v44 = *(int *)(a1 + 4008);
                v45 = *(unsigned int *)(a1 + 4008);
                if ((*(_DWORD *)(a1 + 4048) - 5) >= 2)
                {
                  v20 = *(_DWORD *)(a1 + 4020);
                }
                else
                {
                  if (*(_DWORD *)(a1 + 4008) != 2)
                    return 3;
                  v20 = *(_DWORD *)(a1 + 4020);
                  if (!v20)
                    return 3;
                }
                if (v20 > 0x1B)
                  return 3;
                v21 = (int **)(a1 + 3920);
                v22 = (int **)(a1 + 3944);
                sub_20BE81ACC(a1 + 3944, v44);
                if ((int)v45 <= 0)
                {
                  sub_20BE81ACC(a1 + 3920, v44);
                }
                else
                {
                  v23 = 0;
                  v24 = 4 * v45;
                  do
                  {
                    v25 = v17 < 4;
                    v17 -= 4;
                    if (v25)
                    {
                      v17 = 0;
                      v14 = 0;
                    }
                    else
                    {
                      v26 = *v14++;
                      (*v22)[v23 / 4] = v26;
                    }
                    v23 += 4;
                  }
                  while (v24 != v23);
                  sub_20BE81ACC(a1 + 3920, v44);
                  v27 = 0;
                  do
                  {
                    v25 = v17-- < 1;
                    if (v25)
                    {
                      v17 = 0;
                      v14 = 0;
                    }
                    else
                    {
                      v28 = *(unsigned __int8 *)v14;
                      v14 = (unsigned int *)((char *)v14 + 1);
                      (*v21)[v27 / 4] = v28;
                    }
                    v27 += 4;
                  }
                  while (v24 != v27);
                }
                if (!v14)
                  return 3;
                if ((int)v45 < 1)
                {
                  v29 = 0;
                }
                else
                {
                  v29 = 0;
                  v30 = *v22;
                  v31 = *v21;
                  v32 = 1;
                  v33 = v45;
                  do
                  {
                    v34 = *v30++;
                    v29 |= v34 != 0;
                    v35 = *v31++;
                    v32 &= v35 < 29;
                    --v33;
                  }
                  while (v33);
                  if ((v32 & 1) == 0)
                    return 3;
                }
                v37 = sub_20C6E9A90(a1, v14, v17);
                result = 3;
                if (v37)
                {
                  if ((v36 & 0x8000000000000000) == 0)
                  {
                    result = sub_20C6EB290(a1, a5, a6);
                    if (!(_DWORD)result)
                    {
                      if ((v29 & (v19 > 0)) == 1)
                      {
                        v38 = 0;
                        v39 = 0;
                        do
                        {
                          if ((int)v45 >= 1)
                          {
                            v40 = *v22;
                            v41 = (_DWORD *)(a5 + 4 * v38);
                            v38 += v44;
                            v42 = v45;
                            do
                            {
                              v43 = *v40++;
                              *v41++ += v43;
                              --v42;
                            }
                            while (v42);
                          }
                          ++v39;
                        }
                        while (v39 != v19);
                      }
                      result = 0;
                      *a4 = *(unsigned int *)(a1 + 4000);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_20C6EB13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  char v8;
  char v9;
  __int16 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;

  if (a2 < 4)
    return 0;
  v3 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 4
    || a2 == 8
    || a2 == 9
    || (a2 & 0xFFFFFFFFFFFFFFFELL) == 0xA
    || v3 == 12
    || v3 == 16
    || a2 == 20
    || a2 == 21
    || a2 == 22
    || a2 == 23
    || a2 == 24
    || a2 == 25
    || a2 == 26
    || a2 == 27
    || v3 == 28)
  {
    return 0;
  }
  v6 = a1 + 32;
  if (a1 == -32)
    return 0;
  v4 = 0;
  if (*(_DWORD *)a1 == -290009985)
  {
    v7 = *(_DWORD *)(a1 + 4);
    v8 = *(_BYTE *)(a1 + 8);
    v9 = *(_BYTE *)(a1 + 9);
    v10 = *(_WORD *)(a1 + 10);
    v11 = *(_DWORD *)(a1 + 12);
    v12 = *(_DWORD *)(a1 + 16) & 0x7FFFFFFF;
    v13 = *(unsigned __int8 *)(a1 + 20);
    v14 = *(unsigned __int8 *)(a1 + 21);
    v15 = *(unsigned __int8 *)(a1 + 22);
    v16 = *(_BYTE *)(a1 + 23);
    v17 = *(unsigned __int8 *)(a1 + 24);
    v18 = *(unsigned __int8 *)(a1 + 25);
    v19 = *(unsigned __int8 *)(a1 + 26);
    v20 = *(unsigned __int8 *)(a1 + 27);
    v21 = *(_DWORD *)(a1 + 28) & 0x7FFFFFFF;
    *(_DWORD *)a3 = 0;
    *(_BYTE *)(a3 + 4) = v8;
    *(_BYTE *)(a3 + 5) = v9;
    *(_WORD *)(a3 + 6) = v10;
    *(_DWORD *)(a3 + 8) = v11;
    *(_DWORD *)(a3 + 12) = v12;
    *(_DWORD *)(a3 + 16) = v15;
    *(_DWORD *)(a3 + 20) = v21;
    *(_DWORD *)(a3 + 24) = v14;
    *(_DWORD *)(a3 + 28) = v20;
    *(_DWORD *)(a3 + 32) = v13;
    *(_DWORD *)(a3 + 36) = v18 & 0xF;
    *(_DWORD *)(a3 + 40) = v19;
    *(_DWORD *)(a3 + 44) = v18 >> 4;
    *(_DWORD *)(a3 + 48) = v7;
    *(_BYTE *)(a3 + 52) = v16;
    v4 = v6;
    *(_DWORD *)(a3 + 56) = v17;
  }
  return v4;
}

uint64_t sub_20C6EB290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t v17;
  _WORD __b[2];

  if (*(_DWORD *)(a1 + 4032) == 1)
  {
    memset_pattern16(__b, &unk_20CAF8CE0, 4uLL);
    if (*(int *)(a1 + 4004) >= 1)
    {
      v6 = 0;
      v7 = 0;
      while (1)
      {
        v8 = (int *)(*(_QWORD *)(a1 + 1256) + v6);
        v9 = *v8;
        v10 = v8[1];
        v11 = v8[2];
        v12 = (int *)(*(_QWORD *)(a1 + 1280) + v6);
        v13 = v12[2];
        if ((_DWORD)v13 != -1)
        {
          v14 = *(unsigned __int8 *)(a3 + v10)
              + *(unsigned __int8 *)(a3 + v9)
              + *(unsigned __int8 *)(a3 + v11)
              + *(unsigned __int8 *)(a3 + *v12)
              + *(unsigned __int8 *)(a3 + v12[1])
              + *(unsigned __int8 *)(a3 + v13) > 2;
          goto LABEL_8;
        }
        if ((_DWORD)v11 != -1)
        {
          v14 = *(unsigned __int8 *)(a3 + v10)
              + *(unsigned __int8 *)(a3 + v9)
              + *(unsigned __int8 *)(a3 + v11) > 1;
LABEL_8:
          v15 = v14;
          goto LABEL_11;
        }
        if ((_DWORD)v10 == -1)
          break;
        v15 = *(unsigned __int8 *)(a3 + v9);
        if (v15)
        {
          v16 = *(unsigned __int8 *)(a3 + v10);
LABEL_18:
          v15 = v16 != 0;
        }
LABEL_11:
        *(_BYTE *)(a3 + v7++) = sub_20C6E81C0((unsigned int *)a1, &__b[v15]);
        v6 += 12;
        if (v7 >= *(int *)(a1 + 4004))
          goto LABEL_20;
      }
      if ((_DWORD)v9 == -1)
      {
        v15 = 0;
        goto LABEL_11;
      }
      v16 = *(unsigned __int8 *)(a3 + v9);
      goto LABEL_18;
    }
  }
LABEL_20:
  v17 = *(unsigned int *)(a1 + 4048);
  if (v17 > 6)
    return 3;
  ((void (*)(uint64_t, uint64_t, uint64_t))*(&off_24C542120 + 2 * v17))(a1, a2, a3);
  return 0;
}

void sub_20C6EB41C(unsigned int *a1, uint64_t a2, uint64_t a3, int a4, _QWORD *a5, _BYTE *a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v13;
  _BOOL4 v14;
  _WORD *v15;
  _BOOL4 v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  _BOOL4 v42;
  _WORD *v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  char *v58;
  uint64_t v59;
  int v62;
  void *__p[3];

  v62 = 0;
  sub_20C6E8A00(__p, a4, &v62);
  switch(*a6)
  {
    case 0:
      if (a4 < 1)
        goto LABEL_89;
      v13 = 0;
      do
      {
        if (sub_20C6E81C0(a1, (_WORD *)(*a7 + 2 * v13)))
        {
          v14 = sub_20C6E81C0(a1, (_WORD *)(a7[3] + 2 * v13));
          v15 = (_WORD *)(a7[6] + 2 * (int)((_DWORD)v13 << 6));
          v16 = sub_20C6E81C0(a1, v15);
          if (v16)
            v17 = 2;
          else
            v17 = 1;
          if (sub_20C6E81C0(a1, &v15[v17]))
            v18 = 2;
          else
            v18 = 0;
          v19 = v18 | v16;
          if (sub_20C6E81C0(a1, &v15[v19 + 3]))
            v20 = 4;
          else
            v20 = 0;
          v21 = v19 | v20;
          if (sub_20C6E81C0(a1, &v15[v21 + 7]))
            v22 = 8;
          else
            v22 = 0;
          v23 = v21 | v22;
          if (sub_20C6E81C0(a1, &v15[v23 + 15]))
            v24 = 16;
          else
            v24 = 0;
          v25 = v23 | v24;
          if (sub_20C6E81C0(a1, &v15[v25 + 31]))
            v26 = 32;
          else
            v26 = 0;
          v27 = v25 | v26;
          if (v27 == 63)
            v27 = sub_20C6E82B0(a1, *(_DWORD *)(a7[12] + 4 * v13), (_WORD *)(a7[9] + 2 * v13)) + 63;
          if (v14)
            v28 = v27 + 1;
          else
            v28 = ~v27;
        }
        else
        {
          v28 = 0;
        }
        *((_DWORD *)__p[0] + v13++) = v28;
      }
      while (v13 != a4);
      goto LABEL_85;
    case 2:
      if (a4 < 1)
        goto LABEL_89;
      v29 = 0;
      do
      {
        v30 = a7[12];
        v31 = sub_20C6E87E0(a1, *(_DWORD *)(v30 + 4 * v29), (_WORD *)(a7[3] + 2 * v29), (_WORD *)(a7[9] + 2 * v29));
        if (v31 >= 0)
          v32 = v31;
        else
          v32 = -v31;
        v33 = *(_DWORD *)(v30 + 4 * v29);
        v34 = v32 >> v33;
        if (v33)
          v35 = v34 == 0;
        else
          v35 = 0;
        if (v35)
        {
          v36 = -1;
        }
        else
        {
          if (v34 < 2)
            goto LABEL_44;
          v36 = 1;
        }
        *(_DWORD *)(v30 + 4 * v29) = v33 + v36;
LABEL_44:
        *((_DWORD *)__p[0] + v29++) = v31;
      }
      while (v29 != a4);
LABEL_85:
      v58 = (char *)__p[0];
      if (a4 < 1)
        goto LABEL_90;
      v59 = 0;
      do
      {
        *(_DWORD *)(a8 + v59) = *(_DWORD *)&v58[v59] + *(_DWORD *)(a3 + v59);
        v59 += 4;
      }
      while (4 * a4 != v59);
LABEL_91:
      __p[1] = v58;
      operator delete(v58);
      return;
    case 3:
      if (a4 < 1)
        goto LABEL_89;
      v37 = 0;
      do
      {
        v38 = *(_DWORD *)(*a5 + 4 * v37);
        if (v38 < 1)
        {
          v40 = 0;
        }
        else
        {
          v39 = 0;
          v40 = 0;
          do
          {
            LOWORD(v62) = 0x8000;
            v40 += sub_20C6E81C0(a1, &v62) << v39++;
          }
          while (v38 != v39);
        }
        *((_DWORD *)__p[0] + v37++) = v40;
      }
      while (v37 != a4);
      goto LABEL_85;
    case 4:
      if (a4 < 1)
      {
LABEL_89:
        v58 = (char *)__p[0];
LABEL_90:
        if (v58)
          goto LABEL_91;
        return;
      }
      v41 = 0;
      break;
    default:
      goto LABEL_85;
  }
  while (!sub_20C6E81C0(a1, (_WORD *)(*a7 + 2 * v41)))
  {
    v57 = 0;
LABEL_84:
    *((_DWORD *)__p[0] + v41++) = v57;
    if (v41 == a4)
      goto LABEL_85;
  }
  v42 = sub_20C6E81C0(a1, (_WORD *)(a7[3] + 2 * v41));
  v43 = (_WORD *)(a7[6] + 2 * (int)((_DWORD)v41 << 6));
  if (sub_20C6E81C0(a1, v43))
    v44 = 32;
  else
    v44 = 0;
  if (sub_20C6E81C0(a1, &v43[(v44 >> 5) + 1]))
    v45 = 16;
  else
    v45 = 0;
  v46 = v45 | v44;
  if (sub_20C6E81C0(a1, &v43[(v46 >> 4) + 3]))
    v47 = 8;
  else
    v47 = 0;
  v48 = v46 | v47;
  if (sub_20C6E81C0(a1, &v43[(v48 >> 3) + 7]))
    v49 = 4;
  else
    v49 = 0;
  v50 = v48 | v49;
  if (sub_20C6E81C0(a1, &v43[(v50 >> 2) + 15]))
    v51 = 2;
  else
    v51 = 0;
  v52 = v50 | v51 | sub_20C6E81C0(a1, &v43[((v50 | v51) >> 1) + 31]);
  if (v52 == 63)
  {
    v53 = a7[12];
    v52 = sub_20C6E82B0(a1, *(_DWORD *)(v53 + 4 * v41), (_WORD *)(a7[9] + 2 * v41)) + 63;
    v54 = *(_DWORD *)(v53 + 4 * v41);
    v55 = v52 >> v54;
    if (!v54 || v55)
    {
      if (v55 < 2)
        goto LABEL_81;
      v56 = 1;
    }
    else
    {
      v56 = -1;
    }
    *(_DWORD *)(v53 + 4 * v41) = v54 + v56;
  }
LABEL_81:
  if (v42)
    v57 = v52 + 1;
  else
    v57 = ~v52;
  goto LABEL_84;
}

void sub_20C6EB8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C6EB8E0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int *v10;
  int32x2_t v11;
  _BYTE *v12;
  int32x2_t *v13;
  int32x2_t v14;
  int v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  int32x2_t v22;
  int32x2_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  double v29;
  int32x2_t v30;
  int32x2_t v31;
  int32x2_t v32;
  int32x2_t v33;
  int32x2_t v34;
  int32x2_t v35;
  int v36;
  int32x2_t v37;
  int32x2_t v38;
  int v39;
  _BOOL4 v40;
  uint64_t v41;
  int v42;
  int v43;
  int32x2_t v44;
  int32x2_t v45;
  int32x2_t v46;
  int32x2_t v47;
  int v48;
  int32x2_t v49;
  int32x2_t v50;
  int v51;
  unsigned int v52;
  uint32x2_t v53;
  int v54;
  int32x2_t v55;
  _BOOL4 v56;
  double v57;
  int32x2_t v58;
  int32x2_t v59;
  int32x2_t v60;
  int32x2_t v61;
  int v62;
  int32x2_t v63;
  int32x2_t v64;
  int v65;
  int32x2_t v66;
  int32x2_t v67;
  int32x2_t v68;
  int32x2_t v69;
  int v70;
  int32x2_t v71;
  int32x2_t v72;
  int v73;
  double v74;
  int32x2_t v75;
  __int32 v76;
  int8x8_t v77;
  __int32 v78;
  double v79;
  int v80;
  double v81;
  int32x2_t v82;
  __int32 v83;
  __int32 v84;
  double v85;
  int v86;
  int32x2_t v87;
  int32x2_t v88;
  int v89;
  int32x2_t v90;
  int32x2_t v91;
  int v92;
  int32x2_t v93;
  int32x2_t v94;
  uint32x2_t v95;
  BOOL v96;
  int v97;
  int32x2_t v98;
  int64x2_t v99;
  unint64_t v100;
  uint32x2_t v101;
  int v102;
  int64x2_t v103;
  int v104;
  int v105;
  int32x2_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  _BOOL4 v111;
  int v112;
  int v113;
  int *v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  unint64_t v130;
  char *v131;
  void *v132;
  void *v133;
  char *v134;
  void *v135;
  void *v136;
  void *v137;
  _QWORD *v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  _BYTE *v145;
  uint64_t v146;
  int32x2_t v147;
  int v149;
  uint64_t v151;
  int v152;
  int v153;
  _BYTE v154[4];
  int v155;
  int v156;
  int v157;
  _DWORD v158[2];
  __int16 v159;
  __int16 v160;
  _WORD v161[3];
  _WORD __b[3];
  _OWORD v163[22];
  uint64_t v164;
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a1 + 3920);
  v5 = *(unsigned int *)(a1 + 4004);
  v151 = *(int *)(a1 + 4008);
  v149 = ~(-1 << (*(_DWORD *)(a1 + 4020) - 1));
  sub_20C6F1AD8((_QWORD *)(a1 + 1160), (_QWORD *)(a1 + 1208), (_QWORD *)(a1 + 1184), (uint64_t *)(a1 + 1184), -1431655765 * ((*(_QWORD *)(a1 + 1168) - *(_QWORD *)(a1 + 1160)) >> 2), (uint64_t *)(a1 + 3968), v149);
  v6 = 0;
  v164 = 0;
  memset(v163, 0, sizeof(v163));
  do
  {
    sub_20C6EC678((uint64_t)v163 + v6, v151);
    v6 += 120;
  }
  while (v6 != 360);
  memset_pattern16(__b, &unk_20CAF8CE0, 6uLL);
  memset_pattern16(v161, &unk_20CAF8CE0, 6uLL);
  v160 = 0x8000;
  v159 = 0x8000;
  v7 = v149;
  if ((int)v5 > 0)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 4032);
    v143 = 2 * v149;
    v144 = v9;
    v146 = 12 * v5;
    v10 = (int *)(a2 + 4);
    v11 = vdup_n_s32(v149);
    v12 = a3;
    v145 = a3;
    v138 = v4;
    while (v9 && !*v12)
    {
LABEL_162:
      v8 += 12;
      ++v12;
      v10 += v151;
      if (v146 == v8)
        goto LABEL_163;
    }
    v13 = (int32x2_t *)(*(_QWORD *)(a1 + 3968) + v8);
    v14 = *v13;
    v15 = v13[1].i32[0];
    v16 = (int *)(*(_QWORD *)(a1 + 1256) + v8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = (int *)(*(_QWORD *)(a1 + 1280) + v8);
    v21 = v20[2];
    v147 = v14;
    if ((_DWORD)v21 != -1 && (!v9 || a3[v17] && a3[v18] && a3[v19] && a3[*v20] && a3[v20[1]] && a3[v21]))
    {
      v139 = *v20;
      v140 = v20[1];
      v22 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v17 * (int)v151), v11);
      v23 = vabs_s32(vrev64_s32(v22));
      v141 = v7 - v23.i32[1] - v23.i32[0];
      if (v141 < 0)
        v22 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v22), (int8x8_t)vsub_s32(v23, v11), (int8x8_t)__PAIR64__(v7 - v23.i32[1], v7 - v23.i32[0]));
      v24 = sub_20C6E81C0((unsigned int *)a1, v161);
      v25 = 2;
      if (!v24)
        v25 = 1;
      if (sub_20C6E81C0((unsigned int *)a1, &v161[v25]))
        v27 = 2;
      else
        v27 = 0;
      v28 = v27 | v24;
      if (v28 == 2)
      {
        v60 = vsub_s32(*(int32x2_t *)(a2 + 4 * v139 * (int)v151), v11);
        v61 = vabs_s32(vrev64_s32(v60));
        v62 = v149 - v61.i32[1] - v61.i32[0];
        if (v62 < 0)
          v60 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v60), (int8x8_t)vsub_s32(v61, v11), (int8x8_t)__PAIR64__(v149 - v61.i32[1], v149 - v61.i32[0]));
        v4 = v138;
        v63 = vsub_s32(*(int32x2_t *)(a2 + 4 * v140 * (int)v151), v11);
        v64 = vabs_s32(vrev64_s32(v63));
        v65 = v149 - v64.i32[1] - v64.i32[0];
        if (v65 < 0)
          v63 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v63), (int8x8_t)vsub_s32(v64, v11), (int8x8_t)__PAIR64__(v149 - v64.i32[1], v149 - v64.i32[0]));
        v66 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v21 * (int)v151), v11);
        v67 = vabs_s32(vrev64_s32(v66));
        if (v149 - v67.i32[1] - v67.i32[0] < 0)
          v66 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v66), (int8x8_t)vsub_s32(v67, v11), (int8x8_t)__PAIR64__(v149 - v67.i32[1], v149 - v67.i32[0]));
        v29 = COERCE_DOUBLE(vsub_s32(vadd_s32(v63, v60), v66));
        v15 = v65 + v62 - (v149 - v67.i32[1] - v67.i32[0]);
      }
      else
      {
        v4 = v138;
        if (v28 == 1)
        {
          v68 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v18 * (int)v151), v11);
          v69 = vabs_s32(vrev64_s32(v68));
          v70 = v149 - v69.i32[1] - v69.i32[0];
          if (v70 < 0)
            v68 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v68), (int8x8_t)vsub_s32(v69, v11), (int8x8_t)__PAIR64__(v149 - v69.i32[1], v149 - v69.i32[0]));
          v71 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v19 * (int)v151), v11);
          v72 = vabs_s32(vrev64_s32(v71));
          v73 = v149 - v72.i32[1] - v72.i32[0];
          if (v73 < 0)
            v71 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v71), (int8x8_t)vsub_s32(v72, v11), (int8x8_t)__PAIR64__(v149 - v72.i32[1], v149 - v72.i32[0]));
          v29 = COERCE_DOUBLE(vsub_s32(vadd_s32(v68, v22), v71));
          v15 = v70 + v141 - v73;
        }
        else if (v28)
        {
          v74 = COERCE_DOUBLE(vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v18 * (int)v151), v11));
          v75 = vabs_s32(vrev64_s32(*(int32x2_t *)&v74));
          v77 = (int8x8_t)vsub_s32(v75, v11);
          v78 = v75.i32[0];
          v75.i32[0] = v149 - v75.i32[0];
          v75.i32[1] = v149 - v75.i32[1];
          v76 = v75.i32[1];
          v79 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)&v74), v77, (int8x8_t)v75));
          v80 = v76 - v78;
          if (v80 < 0)
            v74 = v79;
          v81 = COERCE_DOUBLE(vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v19 * (int)v151), v11));
          v82 = vabs_s32(vrev64_s32(*(int32x2_t *)&v81));
          v83 = v149 - v82.i32[1];
          v84 = v82.i32[0];
          v85 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)&v81), (int8x8_t)vsub_s32(v82, v11), (int8x8_t)__PAIR64__(v149 - v82.i32[1], v149 - v82.i32[0])));
          v86 = v83 - v84;
          if (v86 < 0)
            v81 = v85;
          v87 = vsub_s32(*(int32x2_t *)(a2 + 4 * v139 * (int)v151), v11);
          v88 = vabs_s32(vrev64_s32(v87));
          v89 = v149 - v88.i32[1] - v88.i32[0];
          if (v89 < 0)
            v87 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v87), (int8x8_t)vsub_s32(v88, v11), (int8x8_t)__PAIR64__(v149 - v88.i32[1], v149 - v88.i32[0]));
          v90 = vsub_s32(*(int32x2_t *)(a2 + 4 * v140 * (int)v151), v11);
          v91 = vabs_s32(vrev64_s32(v90));
          v92 = v149 - v91.i32[1] - v91.i32[0];
          if (v92 < 0)
            v90 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v90), (int8x8_t)vsub_s32(v91, v11), (int8x8_t)__PAIR64__(v149 - v91.i32[1], v149 - v91.i32[0]));
          v93 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v21 * (int)v151), v11);
          v94 = vabs_s32(vrev64_s32(v93));
          if (v149 - v94.i32[1] - v94.i32[0] < 0)
            v93 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v93), (int8x8_t)vsub_s32(v94, v11), (int8x8_t)__PAIR64__(v149 - v94.i32[1], v149 - v94.i32[0]));
          v95 = (uint32x2_t)vadd_s32(v87, v22);
          v96 = __OFADD__(v89, v141);
          v97 = v89 + v141;
          if (v97 < 0 != v96)
            ++v97;
          v98 = vadd_s32(v90, *(int32x2_t *)&v74);
          v99 = vmull_s32(vsub_s32(vsra_n_s32(vadd_s32(v98, v98), (int32x2_t)vsra_n_u32(v95, v95, 0x1FuLL), 1uLL), vadd_s32(*(int32x2_t *)&v81, v93)), vdup_n_s32(0x55555556u));
          v29 = COERCE_DOUBLE(vadd_s32(vshrn_n_s64(v99, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v99, 0x3FuLL))));
          v100 = 1431655766 * ((v97 >> 1) + 2 * (v92 + v80) - (v86 + v149 - v94.i32[1] - v94.i32[0]));
          v15 = HIDWORD(v100) + (v100 >> 63);
        }
        else
        {
          v29 = *(double *)&v147;
          v30 = vzip1_s32(v22, v147);
          v31 = vzip2_s32(v22, v147);
          if (v30.i32[0] * (uint64_t)v30.i32[1] + v15 * (uint64_t)v141 + v31.i32[0] * (uint64_t)v31.i32[1] < 0)
          {
            v29 = COERCE_DOUBLE(vneg_s32(v147));
            v15 = -v15;
          }
        }
      }
      v52 = 2;
      goto LABEL_109;
    }
    if ((_DWORD)v19 != -1 && (!v9 || a3[v17] && a3[v18] && a3[v19]))
    {
      v32 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v17 * (int)v151), v11);
      v33 = vabs_s32(vrev64_s32(v32));
      v142 = v7 - v33.i32[1] - v33.i32[0];
      if (v142 < 0)
        v32 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v32), (int8x8_t)vsub_s32(v33, v11), (int8x8_t)__PAIR64__(v7 - v33.i32[1], v7 - v33.i32[0]));
      v34 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v18 * (int)v151), v11);
      v35 = vabs_s32(vrev64_s32(v34));
      v36 = v7 - v35.i32[1] - v35.i32[0];
      if (v36 < 0)
        v34 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v34), (int8x8_t)vsub_s32(v35, v11), (int8x8_t)__PAIR64__(v7 - v35.i32[1], v7 - v35.i32[0]));
      v37 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v19 * (int)v151), v11);
      v38 = vabs_s32(vrev64_s32(v37));
      v39 = v7 - v38.i32[1] - v38.i32[0];
      if (v39 < 0)
        v37 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v37), (int8x8_t)vsub_s32(v38, v11), (int8x8_t)__PAIR64__(v7 - v38.i32[1], v7 - v38.i32[0]));
      v40 = sub_20C6E81C0((unsigned int *)a1, __b);
      v41 = 2;
      if (!v40)
        v41 = 1;
      if (sub_20C6E81C0((unsigned int *)a1, &__b[v41]))
        v42 = 2;
      else
        v42 = 0;
      v43 = v42 | v40;
      if (v43 == 2)
      {
        v101 = (uint32x2_t)vsub_s32(v34, (int32x2_t)vmvn_s8((int8x8_t)v32));
        v29 = COERCE_DOUBLE(vshr_n_s32((int32x2_t)vsra_n_u32(v101, v101, 0x1FuLL), 1uLL));
        if (v142 + v36 + 1 >= 0)
          v102 = v142 + v36 + 1;
        else
          v102 = v142 + v36 + 2;
        v15 = v102 >> 1;
        v52 = 1;
      }
      else
      {
        if (v43 == 1)
        {
          v29 = COERCE_DOUBLE(vsub_s32(vadd_s32(v34, v32), v37));
          v15 = v36 + v142 - v39;
        }
        else if (v43)
        {
          v103 = vmull_s32(vadd_s32(vsub_s32(v34, (int32x2_t)vmvn_s8((int8x8_t)v32)), v37), vdup_n_s32(0x55555556u));
          v29 = COERCE_DOUBLE(vadd_s32(vshrn_n_s64(v103, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v103, 0x3FuLL))));
          v15 = (v142 + v36 + v39 + 1) / 3;
        }
        else
        {
          v29 = *(double *)&v147;
          v44 = vzip1_s32(v32, v147);
          v45 = vzip2_s32(v32, v147);
          if (v44.i32[0] * (uint64_t)v44.i32[1] + v15 * (uint64_t)v142 + v45.i32[0] * (uint64_t)v45.i32[1] < 0)
          {
            v29 = COERCE_DOUBLE(vneg_s32(v147));
            v15 = -v15;
          }
        }
        v52 = 1;
      }
      goto LABEL_109;
    }
    if ((_DWORD)v18 == -1 || v9 && (!a3[v17] || !a3[v18]))
    {
      if ((_DWORD)v17 == -1 || v9 && !a3[v17])
      {
        v56 = sub_20C6E81C0((unsigned int *)a1, &v159);
        v29 = *(double *)&v147;
        v57 = COERCE_DOUBLE(vneg_s32(v147));
        if (v56)
          v15 = -v15;
        v52 = 0;
        if (v56)
          v29 = v57;
LABEL_109:
        v104 = LODWORD(v29);
        v156 = LODWORD(v29);
        v105 = HIDWORD(v29);
        v155 = HIDWORD(v29);
        v106 = vabs_s32(*(int32x2_t *)&v29);
        v107 = v106.u32[1];
        if (v15 >= 0)
          v108 = v15;
        else
          v108 = -v15;
        v109 = v106.i32[0];
        v111 = v106.i32[0] < (unsigned __int32)v106.i32[1] || v106.i32[0] < v108;
        if (v111)
        {
          v109 = v108;
          v112 = HIDWORD(v29);
          v113 = LODWORD(v29);
          if (v106.i32[1] < v108)
            goto LABEL_123;
          v114 = &v155;
          v109 = v106.u32[1];
          v112 = v15;
          v113 = LODWORD(v29);
        }
        else
        {
          v114 = &v156;
          v112 = HIDWORD(v29);
          v113 = v15;
        }
        *v114 = v15;
LABEL_123:
        v157 = v113;
        v158[0] = v112;
        v158[1] = v109;
        sub_20C6EB41C((unsigned int *)a1, v26, (uint64_t)&v157, v151, v4, (_BYTE *)(a1 + 4044), (_QWORD *)v163 + 15 * v52, (uint64_t)&v152);
        v116 = v152;
        v115 = v153;
        if (v152 >= 0)
          v117 = v152;
        else
          v117 = -v152;
        if (v153 >= 0)
          v118 = v153;
        else
          v118 = -v153;
        v7 = v149;
        v119 = v149 - v117;
        v120 = v149 - v117 - v118;
        if (v120 < 0)
        {
          v123 = v149 - v118;
          v124 = v118 - v149;
          if (v152 >= 0)
            v116 = v123;
          else
            v116 = v124;
          v7 = v149;
          v125 = v117 - v149;
          if (v153 >= 0)
            v115 = v119;
          else
            v115 = v125;
          if (v111)
            goto LABEL_131;
        }
        else if (v111)
        {
LABEL_131:
          if (v15 >= 0)
            v121 = v120;
          else
            v121 = -v120;
          if (v105 < 0)
            v120 = -v120;
          if (v107 >= v108)
            v122 = v115;
          else
            v122 = v121;
          if (v107 >= v108)
            v115 = v120;
          goto LABEL_151;
        }
        v122 = v116;
        if (v104 >= 0)
          v116 = v120;
        else
          v116 = -v120;
LABEL_151:
        a3 = v145;
        if (v115 >= 0)
          v126 = v115;
        else
          v126 = -v115;
        if (v116 < 0)
        {
          v127 = -v116;
        }
        else
        {
          v126 = v143 - v126;
          v127 = v116;
        }
        if (v115 >= 0)
          v127 = v143 - v127;
        v128 = v116 + v7;
        v129 = v115 + v7;
        if (v122 < 0)
        {
          v128 = v126;
          v129 = v127;
        }
        *(v10 - 1) = v128;
        *v10 = v129;
        v9 = v144;
        goto LABEL_162;
      }
      v46 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v17 * (int)v151), v11);
      v55 = vabs_s32(vrev64_s32(v46));
      v48 = v7 - v55.i32[1] - v55.i32[0];
      if (v48 < 0)
        v46 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v46), (int8x8_t)vsub_s32(v55, v11), (int8x8_t)__PAIR64__(v7 - v55.i32[1], v7 - v55.i32[0]));
      if (sub_20C6E81C0((unsigned int *)a1, &v160))
      {
        v52 = 0;
        v15 = v48;
        v29 = *(double *)&v46;
        goto LABEL_109;
      }
    }
    else
    {
      v46 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v17 * (int)v151), v11);
      v47 = vabs_s32(vrev64_s32(v46));
      v48 = v7 - v47.i32[1] - v47.i32[0];
      if (v48 < 0)
        v46 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v46), (int8x8_t)vsub_s32(v47, v11), (int8x8_t)__PAIR64__(v7 - v47.i32[1], v7 - v47.i32[0]));
      v49 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v18 * (int)v151), v11);
      v50 = vabs_s32(vrev64_s32(v49));
      v51 = v7 - v50.i32[1] - v50.i32[0];
      if (v51 < 0)
        v49 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v49), (int8x8_t)vsub_s32(v50, v11), (int8x8_t)__PAIR64__(v7 - v50.i32[1], v7 - v50.i32[0]));
      if (sub_20C6E81C0((unsigned int *)a1, &v160))
      {
        v52 = 0;
        v53 = (uint32x2_t)vsub_s32(v49, (int32x2_t)vmvn_s8((int8x8_t)v46));
        v29 = COERCE_DOUBLE(vshr_n_s32((int32x2_t)vsra_n_u32(v53, v53, 0x1FuLL), 1uLL));
        if (v48 + v51 + 1 >= 0)
          v54 = v48 + v51 + 1;
        else
          v54 = v48 + v51 + 2;
        v15 = v54 >> 1;
        goto LABEL_109;
      }
    }
    v29 = *(double *)&v147;
    v58 = vzip1_s32(v46, v147);
    v52 = 0;
    v59 = vzip2_s32(v46, v147);
    if (v58.i32[0] * (uint64_t)v58.i32[1] + v15 * (uint64_t)v48 + v59.i32[0] * (uint64_t)v59.i32[1] < 0)
    {
      v29 = COERCE_DOUBLE(vneg_s32(v147));
      v15 = -v15;
    }
    goto LABEL_109;
  }
LABEL_163:
  v130 = 360;
  do
  {
    v131 = (char *)v163 + v130;
    v132 = *(void **)&v158[v130 / 4];
    if (v132)
    {
      *((_QWORD *)v131 - 2) = v132;
      operator delete(v132);
    }
    v133 = (void *)*((_QWORD *)v131 - 6);
    if (v133)
    {
      *(_QWORD *)&v154[v130] = v133;
      operator delete(v133);
    }
    v134 = (char *)v163 + v130;
    v135 = *(void **)((char *)&v163[-4] + v130 - 8);
    if (v135)
    {
      *((_QWORD *)v134 - 8) = v135;
      operator delete(v135);
    }
    v136 = (void *)*((_QWORD *)v134 - 12);
    if (v136)
    {
      *(_QWORD *)((char *)&v163[-5] + v130 - 8) = v136;
      operator delete(v136);
    }
    v137 = (void *)*((_QWORD *)v131 - 15);
    if (v137)
    {
      *(_QWORD *)((char *)&v163[-7] + v130) = v137;
      operator delete(v137);
    }
    v130 -= 120;
  }
  while (v130);
}

void sub_20C6EC64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t i;

  for (i = 240; i != -120; i -= 120)
    sub_20C6EC7C0((uint64_t)(&a31 + i));
  _Unwind_Resume(a1);
}

void sub_20C6EC678(uint64_t a1, int a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;

  v4 = a2;
  sub_20C6E86A4(a1, a2);
  sub_20C6E86A4(a1 + 24, v4);
  sub_20C6E86A4(a1 + 48, a2 << 6);
  sub_20C6E86A4(a1 + 72, v4);
  sub_20BE81ACC(a1 + 96, v4);
  v5 = *(void **)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104) - (_QWORD)v5;
  if (v6 >= 1)
    memset_pattern16(v5, &unk_20CAF8CD0, 4 * (((unint64_t)v6 >> 2) - ((unint64_t)v6 > 3)) + 4);
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 != v7)
    memset_pattern16(*(void **)a1, &unk_20CAF8CE0, ((v7 - *(_QWORD *)a1 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2);
  v8 = *(_BYTE **)(a1 + 24);
  v9 = *(_BYTE **)(a1 + 32);
  if (v8 != v9)
    memset_pattern16(v8, &unk_20CAF8CE0, ((v9 - v8 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2);
  v10 = *(_BYTE **)(a1 + 48);
  v11 = *(_BYTE **)(a1 + 56);
  if (v10 != v11)
    memset_pattern16(v10, &unk_20CAF8CE0, ((v11 - v10 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2);
  v12 = *(_BYTE **)(a1 + 72);
  v13 = *(_BYTE **)(a1 + 80);
  if (v12 != v13)
    memset_pattern16(v12, &unk_20CAF8CE0, ((v13 - v12 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2);
}

uint64_t sub_20C6EC7C0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_20C6EC830(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int *v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  _BOOL4 v28;
  int v29;
  int v30;
  char *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v55;
  int v56;
  char v57;
  char v58;
  _DWORD v59[3];
  __int16 v60;
  void *v61[2];
  void *v62[2];
  __int128 v63;
  void *v64[2];
  void *__p[2];
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v3 = *(unsigned int *)(a1 + 4004);
  v4 = *(_DWORD *)(a1 + 4008);
  v5 = ~(-1 << (*(_DWORD *)(a1 + 4020) - 1));
  v53 = *(_DWORD *)(a1 + 4032);
  sub_20C6F1AD8((_QWORD *)(a1 + 1160), (_QWORD *)(a1 + 1208), (_QWORD *)(a1 + 1184), (uint64_t *)(a1 + 1184), -1431655765 * ((*(_QWORD *)(a1 + 1168) - *(_QWORD *)(a1 + 1160)) >> 2), (uint64_t *)(a1 + 3968), v5);
  v68 = 0;
  v67 = 0u;
  *(_OWORD *)__p = 0u;
  v66 = 0u;
  v63 = 0u;
  *(_OWORD *)v64 = 0u;
  *(_OWORD *)v61 = 0u;
  *(_OWORD *)v62 = 0u;
  sub_20C6EC678((uint64_t)v61, v4);
  v60 = 0x8000;
  if ((int)v3 >= 1)
  {
    v7 = 0;
    v49 = 2 * v5;
    v8 = a3;
    v9 = (int *)(a2 + 4);
    v51 = 4 * v4;
    v52 = v4;
    v50 = 12 * v3;
    while (v53 && !*v8)
    {
LABEL_83:
      v7 += 12;
      ++v8;
      v9 = (int *)((char *)v9 + v51);
      if (v50 == v7)
        goto LABEL_84;
    }
    v10 = (int *)(*(_QWORD *)(a1 + 3968) + v7);
    v11 = *v10;
    v12 = v10[1];
    v13 = v10[2];
    v14 = *(int *)(*(_QWORD *)(a1 + 1256) + v7);
    if ((_DWORD)v14 == -1 || v53 && !a3[v14])
    {
      if (sub_20C6E81C0((unsigned int *)a1, &v60))
      {
        v11 = -v11;
        v12 = -v12;
        v13 = -v13;
      }
    }
    else
    {
      v15 = (_DWORD *)(a2 + 4 * (int)v14 * v52);
      v16 = *v15 - v5;
      v17 = v15[1] - v5;
      if (v16 >= 0)
        v18 = v16;
      else
        v18 = -v16;
      if (v17 >= 0)
        v19 = v17;
      else
        v19 = -v17;
      v20 = v5 - v18;
      v21 = v19 - v5;
      if (v16 >= 0)
        v21 = v5 - v19;
      v22 = v18 - v5;
      if (v17 >= 0)
        v22 = v20;
      v23 = v20 - v19;
      if (v23 < 0)
      {
        v16 = v21;
        v17 = v22;
      }
      if (v13 * (uint64_t)v23 + v11 * (uint64_t)v16 + v12 * (uint64_t)v17 < 0)
      {
        v11 = -v11;
        v12 = -v12;
        v13 = -v13;
      }
    }
    if (v11 >= 0)
      v24 = v11;
    else
      v24 = -v11;
    if (v12 >= 0)
      v25 = v12;
    else
      v25 = -v12;
    if (v13 >= 0)
      v26 = v13;
    else
      v26 = -v13;
    v28 = v24 < v25 || v24 < v26;
    if (v28)
    {
      v24 = v26;
      v29 = v12;
      v30 = v11;
      if (v25 < v26)
      {
LABEL_44:
        v59[0] = v30;
        v59[1] = v29;
        v59[2] = v24;
        sub_20C6EB41C((unsigned int *)a1, v6, (uint64_t)v59, v52, (_QWORD *)(a1 + 3920), (_BYTE *)(a1 + 4044), v61, (uint64_t)&v55);
        v32 = v55;
        v33 = v56;
        if (v55 >= 0)
          v34 = v55;
        else
          v34 = -v55;
        if (v56 >= 0)
          v35 = v56;
        else
          v35 = -v56;
        v36 = v5 - v34;
        v37 = v5 - v34 - v35;
        if (v37 < 0)
        {
          v38 = v5 - v35;
          v39 = v35 - v5;
          if (v55 >= 0)
            v32 = v38;
          else
            v32 = v39;
          v40 = v34 - v5;
          if (v56 >= 0)
            v33 = v36;
          else
            v33 = v40;
        }
        v41 = -v37;
        if (v13 >= 0)
          v42 = v37;
        else
          v42 = -v37;
        if (v12 >= 0)
          v41 = v37;
        if (v25 < v26)
          v41 = v33;
        else
          v42 = v33;
        if (v11 < 0)
          v37 = -v37;
        if (v28)
          v33 = v41;
        else
          v42 = v32;
        if (!v28)
          v32 = v37;
        if (v33 >= 0)
          v43 = v33;
        else
          v43 = -v33;
        if (v32 < 0)
        {
          v44 = -v32;
        }
        else
        {
          v43 = v49 - v43;
          v44 = v32;
        }
        if (v33 >= 0)
          v44 = v49 - v44;
        v45 = v32 + v5;
        v46 = v33 + v5;
        if (v42 < 0)
        {
          v45 = v43;
          v46 = v44;
        }
        *(v9 - 1) = v45;
        *v9 = v46;
        goto LABEL_83;
      }
      v31 = &v57;
      v24 = v25;
      v29 = v13;
      v30 = v11;
    }
    else
    {
      v31 = &v58;
      v29 = v12;
      v30 = v13;
    }
    *(_DWORD *)v31 = v13;
    goto LABEL_44;
  }
LABEL_84:
  if ((_QWORD)v67)
  {
    *((_QWORD *)&v67 + 1) = v67;
    operator delete((void *)v67);
  }
  if (__p[1])
  {
    *(void **)&v66 = __p[1];
    operator delete(__p[1]);
  }
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  if (v62[1])
  {
    *(void **)&v63 = v62[1];
    operator delete(v62[1]);
  }
  if (v61[0])
  {
    v61[1] = v61[0];
    operator delete(v61[0]);
  }
}

void sub_20C6ECBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20C6EC7C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C6ECBF4(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  int *v19;
  int *v20;
  int *v21;
  _BOOL4 v22;
  uint64_t v23;
  int v24;
  int v25;
  int *v26;
  int *v27;
  int *v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int *v37;
  int *v38;
  int *v39;
  _BOOL4 v40;
  uint64_t v41;
  int v42;
  int v43;
  _DWORD *v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  _BOOL4 v52;
  int *v53;
  _DWORD *v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  void *v58;
  int *v59;
  int *v60;
  int *v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  BOOL v66;
  int v67;
  _DWORD *v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int *v75;
  int *v76;
  uint64_t v77;
  int v78;
  int v79;
  _DWORD *v80;
  _DWORD *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int *v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  unint64_t v95;
  char *v96;
  int v97;
  int v98;
  int v99;
  unint64_t v100;
  _DWORD *v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  unint64_t v108;
  char *v109;
  void *v110;
  void *v111;
  char *v112;
  void *v113;
  void *v114;
  void *v115;
  int v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  _BYTE *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  void *__p[3];
  void *v133[3];
  _WORD v134[3];
  _WORD __b[3];
  __int16 v136;
  _OWORD v137[22];
  uint64_t v138;
  uint64_t v139;

  v5 = a1;
  v6 = 0;
  v139 = *MEMORY[0x24BDAC8D0];
  v130 = a1[1001];
  v7 = (int)a1[1002];
  v128 = a1 + 980;
  v8 = a1[1008];
  v138 = 0;
  memset(v137, 0, sizeof(v137));
  do
  {
    sub_20C6EC678((uint64_t)v137 + v6, v7);
    v6 += 120;
  }
  while (v6 != 360);
  v136 = 0x8000;
  memset_pattern16(__b, &unk_20CAF8CE0, 6uLL);
  memset_pattern16(v134, &unk_20CAF8CE0, 6uLL);
  LODWORD(__p[0]) = 0;
  sub_20C6E8A00(v133, v7, __p);
  v131 = 0;
  sub_20C6E8A00(__p, v7, &v131);
  if ((int)v130 >= 1)
  {
    v10 = 0;
    v117 = v7;
    v122 = 4 * v7;
    v123 = v5 + 1011;
    v125 = a3;
    v126 = a2;
    v127 = v5;
    v124 = v8;
    v129 = v7;
    do
    {
      if (v8 && !*(_BYTE *)(a3 + v10))
        goto LABEL_103;
      v11 = (int *)(*((_QWORD *)v5 + 157) + 12 * v10);
      v13 = *v11;
      v12 = v11[1];
      v14 = v11[2];
      v15 = (int *)(*((_QWORD *)v5 + 160) + 12 * v10);
      v16 = v15[2];
      if ((_DWORD)v16 != -1
        && (!v8
         || *(_BYTE *)(a3 + v13)
         && *(_BYTE *)(a3 + v12)
         && *(_BYTE *)(a3 + v14)
         && *(_BYTE *)(a3 + *v15)
         && *(_BYTE *)(a3 + v15[1])
         && *(_BYTE *)(a3 + v16)))
      {
        v118 = *v15;
        v119 = v15[1];
        v17 = v129;
        v116 = v13;
        v18 = v5;
        v19 = (int *)(a2 + 4 * (int)v13 * (int)v129);
        v120 = v12;
        v20 = (int *)(a2 + 4 * (int)v12 * (int)v129);
        v21 = (int *)(a2 + 4 * (int)v14 * (int)v129);
        v22 = sub_20C6E81C0(v18, v134);
        v23 = 2;
        if (!v22)
          v23 = 1;
        if (sub_20C6E81C0(v18, &v134[v23]))
          v24 = 2;
        else
          v24 = 0;
        v25 = v24 | v22;
        if (v25)
        {
          v26 = (int *)(a2 + 4 * v118 * (int)v129);
          v27 = (int *)(a2 + 4 * v119 * (int)v129);
          v28 = (int *)(a2 + 4 * (int)v16 * (int)v129);
          if (v25 == 2)
          {
            sub_20C6E916C(v19, v20, v21, v129, (int *)(*((_QWORD *)v127 + 145) + 12 * v116), (int *)(*((_QWORD *)v127 + 145) + 12 * v120), (int *)(*((_QWORD *)v127 + 145) + 12 * (int)v14), (int *)(*((_QWORD *)v127 + 145) + 12 * v10), (_DWORD *)v133[0]);
            sub_20C6E916C(v26, v27, v28, v129, (int *)(*((_QWORD *)v127 + 145) + 12 * v118), (int *)(*((_QWORD *)v127 + 145) + 12 * v119), (int *)(*((_QWORD *)v127 + 145) + 12 * (int)v16), (int *)(*((_QWORD *)v127 + 145) + 12 * v10), (_DWORD *)__p[0]);
            v17 = v129;
            if ((int)v129 >= 1)
            {
              v75 = (int *)v133[0];
              v76 = (int *)__p[0];
              v77 = v117;
              do
              {
                v78 = *v76++;
                v79 = v78 + *v75;
                if (v79 < 0 != __OFADD__(v78, *v75))
                  ++v79;
                *v75++ = v79 >> 1;
                --v77;
              }
              while (v77);
            }
          }
          else if (v25 == 1)
          {
            v17 = v129;
            if ((int)v129 >= 1)
            {
              v29 = v133[0];
              v30 = v117;
              do
              {
                v32 = *v26++;
                v31 = v32;
                v33 = *v27++;
                v34 = v33 + v31;
                v35 = *v28++;
                *v29++ = v34 - v35;
                --v30;
              }
              while (v30);
            }
          }
          else
          {
            v17 = v129;
            if ((_DWORD)v129 == 2)
            {
              sub_20C6E9868((unint64_t)v19, v20, v21, (_DWORD *)(*((_QWORD *)v127 + 145) + 12 * v116), (_DWORD *)(*((_QWORD *)v127 + 145) + 12 * v120), (int *)(*((_QWORD *)v127 + 145) + 12 * v10), (int *)v133[0]);
              sub_20C6E9868((unint64_t)v26, v27, v28, (_DWORD *)(*((_QWORD *)v127 + 145) + 12 * v118), (_DWORD *)(*((_QWORD *)v127 + 145) + 12 * v119), (int *)(*((_QWORD *)v127 + 145) + 12 * v10), (int *)__p[0]);
              v80 = v133[0];
              v81 = __p[0];
              v82 = *((_DWORD *)v133[0] + 1);
              v83 = *(_DWORD *)__p[0] + *(_DWORD *)v133[0];
              if (v83 < 0 != __OFADD__(*(_DWORD *)__p[0], *(_DWORD *)v133[0]))
                ++v83;
              *(_DWORD *)v133[0] = v83 >> 1;
              v84 = v81[1];
              v66 = __OFADD__(v84, v82);
              v85 = v84 + v82;
              if (v85 < 0 != v66)
                ++v85;
              v80[1] = v85 >> 1;
              v57 = 2;
              v17 = v129;
              goto LABEL_102;
            }
            if ((int)v129 >= 1)
            {
              v95 = 0;
              v96 = (char *)v133[0];
              do
              {
                v97 = v19[v95 / 4];
                v98 = v26[v95 / 4];
                v66 = __OFADD__(v98, v97);
                v99 = v98 + v97;
                if (v99 < 0 != v66)
                  ++v99;
                v100 = 1431655766 * ((v99 >> 1) - (v21[v95 / 4] + v28[v95 / 4]) + 2 * (v27[v95 / 4] + v20[v95 / 4]));
                *(_DWORD *)&v96[v95] = HIDWORD(v100) + (v100 >> 63);
                v95 += 4;
                v57 = 2;
              }
              while (v122 != v95);
              goto LABEL_102;
            }
          }
        }
        else if ((int)v129 >= 1)
        {
          v68 = v133[0];
          v69 = v117;
          do
          {
            v71 = *v19++;
            v70 = v71;
            v72 = *v20++;
            v73 = v72 + v70;
            v74 = *v21++;
            *v68++ = v73 - v74;
            --v69;
          }
          while (v69);
        }
      }
      else
      {
        if ((_DWORD)v14 == -1 || v8 && (!*(_BYTE *)(a3 + v13) || !*(_BYTE *)(a3 + v12) || !*(_BYTE *)(a3 + v14)))
        {
          v17 = v129;
          if ((_DWORD)v12 == -1 || v8 && (!*(_BYTE *)(a3 + v13) || !*(_BYTE *)(a3 + v12)))
          {
            if ((_DWORD)v13 == -1 || v8 && !*(_BYTE *)(a3 + v13))
            {
              v58 = v133[0];
              if ((int)v129 >= 1)
                bzero(v133[0], v122);
              LOBYTE(v131) = 3;
              sub_20C6EB41C(v5, v9, (uint64_t)v58, v129, v128, &v131, 0, a2 + 4 * v10 * v129);
              goto LABEL_103;
            }
            if ((int)v129 >= 1)
            {
              v53 = (int *)(a2 + 4 * (int)v13 * (int)v129);
              v54 = v133[0];
              v55 = v117;
              do
              {
                v56 = *v53++;
                *v54++ = v56;
                --v55;
              }
              while (v55);
            }
            v57 = 0;
          }
          else
          {
            v51 = v12;
            if ((_DWORD)v129 == 2)
            {
              v52 = sub_20C6E81C0(v5, &v136);
              sub_20C6E964C((int *)(a2 + 8 * (_DWORD)v13), (int *)(a2 + 8 * v51), (_DWORD *)(*((_QWORD *)v5 + 145) + 12 * (int)v13), (_DWORD *)(*((_QWORD *)v5 + 145) + 12 * v51), (int *)(*((_QWORD *)v5 + 145) + 12 * v10), v52, (int *)v133[0]);
            }
            else if ((int)v129 >= 1)
            {
              v59 = (int *)(a2 + 4 * (int)v13 * (int)v129);
              v60 = (int *)(a2 + 4 * (int)v12 * (int)v129);
              v61 = (int *)v133[0];
              v62 = v117;
              do
              {
                v64 = *v59++;
                v63 = v64;
                v65 = *v60++;
                v66 = __OFADD__(v65, v63);
                v67 = v65 + v63;
                if (v67 < 0 != v66)
                  ++v67;
                *v61++ = v67 >> 1;
                --v62;
              }
              while (v62);
            }
            v57 = 1;
          }
          goto LABEL_102;
        }
        v17 = v129;
        v36 = v13;
        v37 = (int *)(a2 + 4 * (int)v13 * (int)v129);
        v121 = v12;
        v38 = (int *)(a2 + 4 * (int)v12 * (int)v129);
        v39 = (int *)(a2 + 4 * (int)v14 * (int)v129);
        v40 = sub_20C6E81C0(v5, __b);
        v41 = 2;
        if (!v40)
          v41 = 1;
        if (sub_20C6E81C0(v5, &__b[v41]))
          v42 = 2;
        else
          v42 = 0;
        v43 = v42 | v40;
        if (v43 == 2)
        {
          sub_20C6E916C(v37, v38, v39, v129, (int *)(*((_QWORD *)v5 + 145) + 12 * v36), (int *)(*((_QWORD *)v5 + 145) + 12 * v121), (int *)(*((_QWORD *)v5 + 145) + 12 * (int)v14), (int *)(*((_QWORD *)v5 + 145) + 12 * v10), (_DWORD *)v133[0]);
          if ((int)v129 >= 1)
          {
            v86 = (int *)v133[0];
            v87 = v117;
            do
            {
              v89 = *v37++;
              v88 = v89;
              v90 = *v38++;
              v91 = v90 + v88;
              v92 = *v39++;
              v93 = v91 - v92;
              v66 = __OFADD__(v93, *v86);
              v94 = v93 + *v86;
              if (v94 < 0 != v66)
                ++v94;
              *v86++ = v94 >> 1;
              --v87;
            }
            while (v87);
          }
        }
        else if (v43 == 1)
        {
          sub_20C6E916C(v37, v38, v39, v129, (int *)(*((_QWORD *)v5 + 145) + 12 * v36), (int *)(*((_QWORD *)v5 + 145) + 12 * v121), (int *)(*((_QWORD *)v5 + 145) + 12 * (int)v14), (int *)(*((_QWORD *)v5 + 145) + 12 * v10), (_DWORD *)v133[0]);
        }
        else if (v43)
        {
          if ((_DWORD)v129 == 2)
          {
            sub_20C6E9868(v126 + 8 * v36, (int *)(v126 + 8 * v121), (int *)(v126 + 8 * (_DWORD)v14), (_DWORD *)(*((_QWORD *)v5 + 145) + 12 * v36), (_DWORD *)(*((_QWORD *)v5 + 145) + 12 * v121), (int *)(*((_QWORD *)v5 + 145) + 12 * v10), (int *)v133[0]);
          }
          else if ((int)v129 >= 1)
          {
            v101 = v133[0];
            v102 = v117;
            do
            {
              v104 = *v37++;
              v103 = v104;
              v106 = *v38++;
              v105 = v106;
              v107 = *v39++;
              *v101++ = v105 + v103 - v107;
              v57 = 2;
              --v102;
            }
            while (v102);
            goto LABEL_102;
          }
        }
        else if ((int)v129 >= 1)
        {
          v44 = v133[0];
          v45 = v117;
          do
          {
            v47 = *v37++;
            v46 = v47;
            v48 = *v38++;
            v49 = v48 + v46;
            v50 = *v39++;
            *v44++ = v49 - v50;
            --v45;
          }
          while (v45);
        }
      }
      v57 = 2;
LABEL_102:
      a2 = v126;
      v5 = v127;
      sub_20C6EB41C(v127, v9, (uint64_t)v133[0], v17, v128, v123, (_QWORD *)v137 + 15 * v57, v126 + 4 * v10 * v17);
      a3 = v125;
      v8 = v124;
LABEL_103:
      ++v10;
    }
    while (v10 != v130);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v133[0])
  {
    v133[1] = v133[0];
    operator delete(v133[0]);
  }
  v108 = 360;
  do
  {
    v109 = (char *)v137 + v108;
    v110 = v133[v108 / 8 + 2];
    if (v110)
    {
      *((_QWORD *)v109 - 2) = v110;
      operator delete(v110);
    }
    v111 = (void *)*((_QWORD *)v109 - 6);
    if (v111)
    {
      v133[v108 / 8] = v111;
      operator delete(v111);
    }
    v112 = (char *)v137 + v108;
    v113 = *(void **)((char *)&v137[-4] + v108 - 8);
    if (v113)
    {
      *((_QWORD *)v112 - 8) = v113;
      operator delete(v113);
    }
    v114 = (void *)*((_QWORD *)v112 - 12);
    if (v114)
    {
      *(_QWORD *)((char *)&v137[-5] + v108 - 8) = v114;
      operator delete(v114);
    }
    v115 = (void *)*((_QWORD *)v109 - 15);
    if (v115)
    {
      *(_QWORD *)((char *)&v137[-7] + v108) = v115;
      operator delete(v115);
    }
    v108 -= 120;
  }
  while (v108);
}

void sub_20C6ED4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t i;

  if (__p)
    operator delete(__p);
  for (i = 240; i != -120; i -= 120)
    sub_20C6EC7C0((uint64_t)(&a33 + i));
  _Unwind_Resume(a1);
}

void sub_20C6ED554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  _BOOL4 v25;
  int *v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  void *v30;
  int *v31;
  int *v32;
  int *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  unint64_t v40;
  char *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  void *v47;
  _QWORD *v48;
  uint64_t v50;
  int v51;
  void *__p[3];
  void *v53;
  _QWORD v54[2];
  __int16 v55;
  _OWORD v56[22];
  uint64_t v57;
  uint64_t v58;

  v5 = 0;
  v58 = *MEMORY[0x24BDAC8D0];
  v50 = *(unsigned int *)(a1 + 4004);
  v6 = *(int *)(a1 + 4008);
  v48 = (_QWORD *)(a1 + 3920);
  v7 = *(_DWORD *)(a1 + 4032);
  v57 = 0;
  memset(v56, 0, sizeof(v56));
  do
  {
    sub_20C6EC678((uint64_t)v56 + v5, v6);
    v5 += 120;
  }
  while (v5 != 360);
  v55 = 0x8000;
  LODWORD(__p[0]) = 0;
  sub_20C6E8A00(&v53, v6, __p);
  v51 = 0;
  sub_20C6E8A00(__p, v6, &v51);
  v9 = a3;
  if ((int)v50 >= 1)
  {
    for (i = 0; i != v50; ++i)
    {
      if (v7 && !*(_BYTE *)(v9 + i))
        continue;
      v11 = (int *)(*(_QWORD *)(a1 + 1256) + 12 * i);
      v13 = *v11;
      v12 = v11[1];
      v14 = v11[2];
      v15 = (int *)(*(_QWORD *)(a1 + 1280) + 12 * i);
      v16 = v15[2];
      if ((_DWORD)v16 != -1
        && ((v18 = *v15, v17 = v15[1], !v7)
         || *(_BYTE *)(v9 + v13)
         && *(_BYTE *)(v9 + v12)
         && *(_BYTE *)(v9 + v14)
         && *(_BYTE *)(v9 + v18)
         && *(_BYTE *)(v9 + v17)
         && *(_BYTE *)(v9 + v16)))
      {
        sub_20C6E916C((int *)(a2 + 4 * (int)v13 * (int)v6), (int *)(a2 + 4 * (int)v12 * (int)v6), (int *)(a2 + 4 * (int)v14 * (int)v6), v6, (int *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v13), (int *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v12), (int *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v14), (int *)(*(_QWORD *)(a1 + 1160) + 12 * i), v53);
        sub_20C6E916C((int *)(a2 + 4 * (int)v18 * (int)v6), (int *)(a2 + 4 * (int)v17 * (int)v6), (int *)(a2 + 4 * (int)v16 * (int)v6), v6, (int *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v18), (int *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v17), (int *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v16), (int *)(*(_QWORD *)(a1 + 1160) + 12 * i), (_DWORD *)__p[0]);
        if ((int)v6 >= 1)
        {
          v19 = (int *)v53;
          v20 = (int *)__p[0];
          v21 = v6;
          do
          {
            v22 = *v20++;
            v23 = v22 + *v19;
            if (v23 < 0 != __OFADD__(v22, *v19))
              ++v23;
            *v19++ = v23 >> 1;
            --v21;
          }
          while (v21);
        }
      }
      else
      {
        if ((_DWORD)v14 == -1 || v7 && (!*(_BYTE *)(v9 + v13) || !*(_BYTE *)(v9 + v12) || !*(_BYTE *)(v9 + v14)))
        {
          if ((_DWORD)v12 == -1 || v7 && (!*(_BYTE *)(v9 + v13) || !*(_BYTE *)(v9 + v12)))
          {
            if ((_DWORD)v13 == -1 || v7 && !*(_BYTE *)(v9 + v13))
            {
              v30 = v53;
              if ((int)v6 >= 1)
                bzero(v53, 4 * v6);
              LOBYTE(v51) = 3;
              sub_20C6EB41C((unsigned int *)a1, v8, (uint64_t)v30, v6, v48, &v51, 0, a2 + 4 * i * v6);
              v9 = a3;
              continue;
            }
            if ((int)v6 >= 1)
            {
              v26 = (int *)(a2 + 4 * (int)v13 * (int)v6);
              v27 = v53;
              v28 = v6;
              do
              {
                v29 = *v26++;
                *v27++ = v29;
                --v28;
              }
              while (v28);
            }
            v24 = 0;
          }
          else
          {
            if ((_DWORD)v6 == 2)
            {
              v25 = sub_20C6E81C0((unsigned int *)a1, &v55);
              sub_20C6E964C((int *)(a2 + 8 * v13), (int *)(a2 + 8 * (_DWORD)v12), (_DWORD *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v13), (_DWORD *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v12), (int *)(*(_QWORD *)(a1 + 1160) + 12 * i), v25, (int *)v53);
            }
            else if ((int)v6 >= 1)
            {
              v31 = (int *)(a2 + 4 * (int)v13 * (int)v6);
              v32 = (int *)(a2 + 4 * (int)v12 * (int)v6);
              v33 = (int *)v53;
              v34 = v6;
              do
              {
                v36 = *v31++;
                v35 = v36;
                v37 = *v32++;
                v38 = __OFADD__(v37, v35);
                v39 = v37 + v35;
                if (v39 < 0 != v38)
                  ++v39;
                *v33++ = v39 >> 1;
                --v34;
              }
              while (v34);
            }
            v24 = 1;
          }
          goto LABEL_50;
        }
        sub_20C6E916C((int *)(a2 + 4 * (int)v13 * (int)v6), (int *)(a2 + 4 * (int)v12 * (int)v6), (int *)(a2 + 4 * (int)v14 * (int)v6), v6, (int *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v13), (int *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v12), (int *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v14), (int *)(*(_QWORD *)(a1 + 1160) + 12 * i), v53);
      }
      v24 = 2;
LABEL_50:
      sub_20C6EB41C((unsigned int *)a1, v8, (uint64_t)v53, v6, v48, (_BYTE *)(a1 + 4044), (_QWORD *)v56 + 15 * v24, a2 + 4 * i * v6);
      v9 = a3;
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v53)
  {
    v54[0] = v53;
    operator delete(v53);
  }
  v40 = 360;
  do
  {
    v41 = (char *)v56 + v40;
    v42 = (void *)v54[v40 / 8];
    if (v42)
    {
      *((_QWORD *)v41 - 2) = v42;
      operator delete(v42);
    }
    v43 = (void *)*((_QWORD *)v41 - 6);
    if (v43)
    {
      __p[v40 / 8 + 2] = v43;
      operator delete(v43);
    }
    v44 = (char *)v56 + v40;
    v45 = *(void **)((char *)&v56[-4] + v40 - 8);
    if (v45)
    {
      *((_QWORD *)v44 - 8) = v45;
      operator delete(v45);
    }
    v46 = (void *)*((_QWORD *)v44 - 12);
    if (v46)
    {
      *(_QWORD *)((char *)&v56[-5] + v40 - 8) = v46;
      operator delete(v46);
    }
    v47 = (void *)*((_QWORD *)v41 - 15);
    if (v47)
    {
      *(_QWORD *)((char *)&v56[-7] + v40) = v47;
      operator delete(v47);
    }
    v40 -= 120;
  }
  while (v40);
}

void sub_20C6EDA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t i;

  if (__p)
    operator delete(__p);
  for (i = 240; i != -120; i -= 120)
    sub_20C6EC7C0((uint64_t)(&a25 + i));
  _Unwind_Resume(a1);
}

void sub_20C6EDA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  void *v59;
  void *v60;
  char *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  int v71;
  int v73;
  void *__p;
  _QWORD v75[2];
  _WORD __b[3];
  _OWORD v77[22];
  uint64_t v78;
  uint64_t v79;

  v5 = 0;
  v79 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned int *)(a1 + 4004);
  v7 = *(int *)(a1 + 4008);
  v70 = (_QWORD *)(a1 + 3920);
  v71 = *(_DWORD *)(a1 + 4032);
  v78 = 0;
  memset(v77, 0, sizeof(v77));
  do
  {
    sub_20C6EC678((uint64_t)v77 + v5, v7);
    v5 += 120;
  }
  while (v5 != 360);
  memset_pattern16(__b, &unk_20CAF8CE0, 6uLL);
  v73 = 0;
  sub_20C6E8A00(&__p, v7, &v73);
  v9 = v71;
  if ((int)v6 >= 1)
  {
    v10 = 0;
    v68 = a3;
    v11 = 4 * v7;
    v65 = v6;
    v69 = a2;
    do
    {
      if (v9 && !*(_BYTE *)(a3 + v10))
        goto LABEL_77;
      v12 = (int *)(*(_QWORD *)(a1 + 1256) + 12 * v10);
      v13 = *v12;
      v14 = v12[1];
      v15 = v12[2];
      v16 = (int *)(*(_QWORD *)(a1 + 1280) + 12 * v10);
      v17 = v16[2];
      if ((_DWORD)v17 != -1
        && (!v9
         || *(_BYTE *)(a3 + v13)
         && *(_BYTE *)(a3 + v14)
         && *(_BYTE *)(a3 + v15)
         && *(_BYTE *)(a3 + *v16)
         && *(_BYTE *)(a3 + v16[1])
         && *(_BYTE *)(a3 + v17)))
      {
        v66 = *v16;
        v67 = v16[1];
        v18 = sub_20C6E81C0((unsigned int *)a1, __b);
        v19 = 2;
        if (!v18)
          v19 = 1;
        if (sub_20C6E81C0((unsigned int *)a1, &__b[v19]))
          v20 = 2;
        else
          v20 = 0;
        v21 = v13 * v7;
        v22 = v69;
        v23 = v69 + 4 * v21;
        v24 = v69 + 4 * (int)v14 * (int)v7;
        v25 = v69 + 4 * (int)v15 * (int)v7;
        v26 = v20 | v18;
        if (v20 | v18)
        {
          v27 = v69 + 4 * v66 * (int)v7;
          v28 = v69 + 4 * v67 * (int)v7;
          v29 = v69 + 4 * (int)v17 * (int)v7;
          if (v26 == 1)
          {
            v30 = (char *)__p;
            a3 = v68;
            v6 = v65;
            if ((int)v7 >= 1)
            {
              v51 = 0;
              do
              {
                *(_DWORD *)&v30[v51] = *(_DWORD *)(v28 + v51) + *(_DWORD *)(v27 + v51) - *(_DWORD *)(v29 + v51);
                v51 += 4;
              }
              while (v11 != v51);
            }
          }
          else
          {
            a3 = v68;
            v6 = v65;
            if (v26 == 2)
            {
              v30 = (char *)__p;
              if ((int)v7 >= 1)
              {
                v31 = 0;
                do
                {
                  v32 = *(_DWORD *)(v23 + v31);
                  v33 = *(_DWORD *)(v27 + v31);
                  v34 = __OFADD__(v33, v32);
                  v35 = v33 + v32;
                  if (v35 < 0 != v34)
                    ++v35;
                  *(_DWORD *)&v30[v31] = *(_DWORD *)(v28 + v31) + *(_DWORD *)(v24 + v31) - (v35 >> 1);
                  v31 += 4;
                }
                while (v11 != v31);
              }
            }
            else
            {
              v30 = (char *)__p;
              if ((int)v7 >= 1)
              {
                v52 = 0;
                do
                {
                  v53 = *(_DWORD *)(v23 + v52);
                  v54 = *(_DWORD *)(v27 + v52);
                  v34 = __OFADD__(v54, v53);
                  v55 = v54 + v53;
                  if (v55 < 0 != v34)
                    ++v55;
                  v8 = *(unsigned int *)(v29 + v52);
                  v56 = 1431655766
                      * ((v55 >> 1)
                       - (*(_DWORD *)(v25 + v52)
                        + (int)v8)
                       + 2 * (*(_DWORD *)(v28 + v52) + *(_DWORD *)(v24 + v52)));
                  *(_DWORD *)&v30[v52] = HIDWORD(v56) + (v56 >> 63);
                  v52 += 4;
                }
                while (v11 != v52);
              }
            }
          }
        }
        else
        {
          v30 = (char *)__p;
          if ((int)v7 < 1)
          {
            v45 = 2;
            a3 = v68;
            v6 = v65;
            goto LABEL_76;
          }
          v50 = 0;
          a3 = v68;
          v6 = v65;
          do
          {
            *(_DWORD *)&v30[v50] = *(_DWORD *)(v24 + v50) + *(_DWORD *)(v23 + v50) - *(_DWORD *)(v25 + v50);
            v50 += 4;
          }
          while (v11 != v50);
        }
      }
      else
      {
        if ((_DWORD)v15 == -1 || v9 && (!*(_BYTE *)(a3 + v13) || !*(_BYTE *)(a3 + v14) || !*(_BYTE *)(a3 + v15)))
        {
          if ((_DWORD)v14 == -1 || v9 && (!*(_BYTE *)(a3 + v13) || !*(_BYTE *)(a3 + v14)))
          {
            if ((_DWORD)v13 == -1 || v9 && !*(_BYTE *)(a3 + v13))
            {
              v49 = __p;
              if ((int)v7 >= 1)
                bzero(__p, 4 * v7);
              LOBYTE(v73) = 3;
              sub_20C6EB41C((unsigned int *)a1, v8, (uint64_t)v49, v7, v70, &v73, 0, v69 + 4 * v10 * v7);
              a3 = v68;
              v9 = v71;
              goto LABEL_77;
            }
            v30 = (char *)__p;
            if ((int)v7 >= 1)
            {
              v46 = 0;
              v47 = v13 * v7;
              v22 = v69;
              v48 = v69 + 4 * v47;
              do
              {
                *(_DWORD *)&v30[v46] = *(_DWORD *)(v48 + v46);
                v46 += 4;
              }
              while (v11 != v46);
              v45 = 0;
              goto LABEL_76;
            }
            v45 = 0;
          }
          else
          {
            v30 = (char *)__p;
            if ((int)v7 >= 1)
            {
              v39 = 0;
              v40 = v13 * v7;
              v22 = v69;
              v41 = v69 + 4 * v40;
              do
              {
                v42 = *(_DWORD *)(v41 + v39);
                v43 = *(_DWORD *)(v69 + 4 * (int)v14 * (int)v7 + v39);
                v34 = __OFADD__(v43, v42);
                v44 = v43 + v42;
                if (v44 < 0 != v34)
                  ++v44;
                *(_DWORD *)&v30[v39] = v44 >> 1;
                v39 += 4;
              }
              while (v11 != v39);
              v45 = 1;
              goto LABEL_76;
            }
            v45 = 1;
          }
          goto LABEL_75;
        }
        v30 = (char *)__p;
        if ((int)v7 < 1)
        {
          v45 = 2;
LABEL_75:
          v22 = v69;
          goto LABEL_76;
        }
        v36 = 0;
        v37 = v13 * v7;
        v22 = v69;
        v38 = v69 + 4 * v37;
        do
        {
          *(_DWORD *)&v30[v36] = *(_DWORD *)(v69 + 4 * (int)v14 * (int)v7 + v36)
                               + *(_DWORD *)(v38 + v36)
                               - *(_DWORD *)(v69 + 4 * (int)v15 * (int)v7 + v36);
          v36 += 4;
        }
        while (v11 != v36);
      }
      v45 = 2;
LABEL_76:
      sub_20C6EB41C((unsigned int *)a1, v8, (uint64_t)v30, v7, v70, (_BYTE *)(a1 + 4044), (_QWORD *)v77 + 15 * v45, v22 + 4 * v10 * v7);
      v9 = v71;
LABEL_77:
      ++v10;
    }
    while (v10 != v6);
  }
  if (__p)
  {
    v75[0] = __p;
    operator delete(__p);
  }
  v57 = 360;
  do
  {
    v58 = (char *)v77 + v57;
    v59 = (void *)v75[v57 / 8];
    if (v59)
    {
      *((_QWORD *)v58 - 2) = v59;
      operator delete(v59);
    }
    v60 = (void *)*((_QWORD *)v58 - 6);
    if (v60)
    {
      *(_QWORD *)((char *)&v77[-2] + v57 - 8) = v60;
      operator delete(v60);
    }
    v61 = (char *)v77 + v57;
    v62 = *(void **)((char *)&v77[-4] + v57 - 8);
    if (v62)
    {
      *((_QWORD *)v61 - 8) = v62;
      operator delete(v62);
    }
    v63 = (void *)*((_QWORD *)v61 - 12);
    if (v63)
    {
      *(_QWORD *)((char *)&v77[-5] + v57 - 8) = v63;
      operator delete(v63);
    }
    v64 = (void *)*((_QWORD *)v58 - 15);
    if (v64)
    {
      *(_QWORD *)((char *)&v77[-7] + v57) = v64;
      operator delete(v64);
    }
    v57 -= 120;
  }
  while (v57);
}

void sub_20C6EE084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t i;

  for (i = 240; i != -120; i -= 120)
    sub_20C6EC7C0((uint64_t)(&a23 + i));
  _Unwind_Resume(a1);
}

void sub_20C6EE0CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  void *v38;
  unint64_t v39;
  char *v40;
  void *v41;
  void *v42;
  char *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  int v48;
  void *__p[3];
  _OWORD v50[22];
  uint64_t v51;
  uint64_t v52;

  v6 = 0;
  v52 = *MEMORY[0x24BDAC8D0];
  v7 = *(unsigned int *)(a1 + 4004);
  v8 = *(int *)(a1 + 4008);
  v9 = (_QWORD *)(a1 + 3920);
  v10 = *(unsigned int *)(a1 + 4032);
  v51 = 0;
  memset(v50, 0, sizeof(v50));
  do
  {
    sub_20C6EC678((uint64_t)v50 + v6, v8);
    v6 += 120;
  }
  while (v6 != 360);
  v48 = 0;
  sub_20C6E8A00(__p, v8, &v48);
  if ((int)v7 >= 1)
  {
    v12 = 0;
    v13 = (_BYTE *)(a1 + 4044);
    v14 = 4 * v8;
    v47 = a3;
    while ((_DWORD)v10)
    {
      if (*(_BYTE *)(a3 + v12))
      {
        v15 = (int *)(*(_QWORD *)(a1 + 1256) + 12 * v12);
        v16 = *v15;
        v17 = v15[1];
        v18 = v15[2];
        if (v18 == -1 || !*(_BYTE *)(a3 + v16) || !*(_BYTE *)(a3 + v17) || !*(_BYTE *)(a3 + v18))
        {
          if (v17 == -1 || !*(_BYTE *)(a3 + v16) || !*(_BYTE *)(a3 + v17))
          {
            if (v16 == -1 || !*(_BYTE *)(a3 + v16))
            {
LABEL_34:
              v35 = v7;
              v36 = v10;
              v37 = v13;
              v38 = __p[0];
              if ((int)v8 >= 1)
                bzero(__p[0], 4 * v8);
              LOBYTE(v48) = 3;
              sub_20C6EB41C((unsigned int *)a1, v11, (uint64_t)v38, v8, v9, &v48, 0, a2 + 4 * v12 * v8);
              v13 = v37;
              v10 = v36;
              v7 = v35;
              a3 = v47;
              goto LABEL_37;
            }
LABEL_16:
            v19 = (char *)__p[0];
            if ((int)v8 >= 1)
            {
              v20 = 0;
              v21 = a2 + 4 * v16 * (int)v8;
              do
              {
                *(_DWORD *)&v19[v20] = *(_DWORD *)(v21 + v20);
                v20 += 4;
              }
              while (v14 != v20);
            }
            v22 = 0;
LABEL_32:
            sub_20C6EB41C((unsigned int *)a1, v11, (uint64_t)v19, v8, v9, v13, (_QWORD *)v50 + 15 * v22, a2 + 4 * v12 * v8);
            goto LABEL_37;
          }
LABEL_26:
          v19 = (char *)__p[0];
          if ((int)v8 >= 1)
          {
            v28 = 0;
            v29 = a2 + 4 * v16 * (int)v8;
            v30 = a2 + 4 * v17 * (int)v8;
            do
            {
              v31 = *(_DWORD *)(v29 + v28);
              v32 = *(_DWORD *)(v30 + v28);
              v33 = __OFADD__(v32, v31);
              v34 = v32 + v31;
              if (v34 < 0 != v33)
                ++v34;
              *(_DWORD *)&v19[v28] = v34 >> 1;
              v28 += 4;
            }
            while (v14 != v28);
          }
          v22 = 1;
          goto LABEL_32;
        }
        goto LABEL_21;
      }
LABEL_37:
      if (++v12 == v7)
        goto LABEL_38;
    }
    v23 = (int *)(*(_QWORD *)(a1 + 1256) + 12 * v12);
    v16 = *v23;
    v17 = v23[1];
    v18 = v23[2];
    if (v18 == -1)
    {
      if (v17 == -1)
      {
        if (v16 == -1)
          goto LABEL_34;
        goto LABEL_16;
      }
      goto LABEL_26;
    }
LABEL_21:
    v19 = (char *)__p[0];
    if ((int)v8 >= 1)
    {
      v24 = 0;
      v25 = a2 + 4 * v16 * (int)v8;
      v26 = a2 + 4 * v17 * (int)v8;
      v27 = a2 + 4 * v18 * (int)v8;
      do
      {
        *(_DWORD *)&v19[v24] = *(_DWORD *)(v26 + v24) + *(_DWORD *)(v25 + v24) - *(_DWORD *)(v27 + v24);
        v24 += 4;
      }
      while (v14 != v24);
    }
    v22 = 2;
    goto LABEL_32;
  }
LABEL_38:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v39 = 360;
  do
  {
    v40 = (char *)v50 + v39;
    v41 = __p[v39 / 8];
    if (v41)
    {
      *((_QWORD *)v40 - 2) = v41;
      operator delete(v41);
    }
    v42 = (void *)*((_QWORD *)v40 - 6);
    if (v42)
    {
      *(_QWORD *)((char *)&v50[-2] + v39 - 8) = v42;
      operator delete(v42);
    }
    v43 = (char *)v50 + v39;
    v44 = *(void **)((char *)&v50[-4] + v39 - 8);
    if (v44)
    {
      *((_QWORD *)v43 - 8) = v44;
      operator delete(v44);
    }
    v45 = (void *)*((_QWORD *)v43 - 12);
    if (v45)
    {
      *(_QWORD *)((char *)&v50[-5] + v39 - 8) = v45;
      operator delete(v45);
    }
    v46 = (void *)*((_QWORD *)v40 - 15);
    if (v46)
    {
      *(_QWORD *)((char *)&v50[-7] + v39) = v46;
      operator delete(v46);
    }
    v39 -= 120;
  }
  while (v39);
}

void sub_20C6EE468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t i;

  for (i = 240; i != -120; i -= 120)
    sub_20C6EC7C0((uint64_t)(&a15 + i));
  _Unwind_Resume(a1);
}

void sub_20C6EE4B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  _BYTE *v29;
  void *v30;
  uint64_t i;
  _QWORD *v32;
  void *v33;
  void *v34;
  char *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  int v40;
  void *__p[3];
  _OWORD v42[15];
  uint64_t v43;

  v6 = 0;
  v43 = *MEMORY[0x24BDAC8D0];
  v7 = *(unsigned int *)(a1 + 4004);
  v8 = *(int *)(a1 + 4008);
  v39 = (_QWORD *)(a1 + 3920);
  v9 = *(_DWORD *)(a1 + 4032);
  memset(v42, 0, sizeof(v42));
  do
  {
    sub_20C6EC678((uint64_t)v42 + v6, v8);
    v6 += 120;
  }
  while (v6 != 240);
  v40 = 0;
  sub_20C6E8A00(__p, v8, &v40);
  if ((int)v7 >= 1)
  {
    v11 = 0;
    v12 = (_BYTE *)(a1 + 4044);
    v13 = 4 * v8;
    while (v9)
    {
      if (*(_BYTE *)(a3 + v11))
      {
        v14 = (int *)(*(_QWORD *)(a1 + 1256) + 12 * v11);
        v15 = *v14;
        v16 = v14[1];
        if (v16 == -1 || !*(_BYTE *)(a3 + v15) || !*(_BYTE *)(a3 + v16))
        {
          if (v15 == -1 || !*(_BYTE *)(a3 + v15))
          {
LABEL_25:
            v29 = v12;
            v30 = __p[0];
            if ((int)v8 >= 1)
              bzero(__p[0], 4 * v8);
            LOBYTE(v40) = 3;
            sub_20C6EB41C((unsigned int *)a1, v10, (uint64_t)v30, v8, v39, &v40, 0, a2 + 4 * v11 * v8);
            v12 = v29;
            goto LABEL_28;
          }
LABEL_12:
          v17 = (char *)__p[0];
          if ((int)v8 >= 1)
          {
            v18 = 0;
            v19 = a2 + 4 * v15 * (int)v8;
            do
            {
              *(_DWORD *)&v17[v18] = *(_DWORD *)(v19 + v18);
              v18 += 4;
            }
            while (v13 != v18);
          }
          v20 = 0;
LABEL_23:
          sub_20C6EB41C((unsigned int *)a1, v10, (uint64_t)v17, v8, v39, v12, (_QWORD *)v42 + 15 * v20, a2 + 4 * v11 * v8);
          goto LABEL_28;
        }
LABEL_17:
        v17 = (char *)__p[0];
        if ((int)v8 >= 1)
        {
          v22 = 0;
          v23 = a2 + 4 * v15 * (int)v8;
          v24 = a2 + 4 * v16 * (int)v8;
          do
          {
            v25 = *(_DWORD *)(v23 + v22);
            v26 = *(_DWORD *)(v24 + v22);
            v27 = __OFADD__(v26, v25);
            v28 = v26 + v25;
            if (v28 < 0 != v27)
              ++v28;
            *(_DWORD *)&v17[v22] = v28 >> 1;
            v22 += 4;
          }
          while (v13 != v22);
        }
        v20 = 1;
        goto LABEL_23;
      }
LABEL_28:
      if (++v11 == v7)
        goto LABEL_29;
    }
    v21 = (int *)(*(_QWORD *)(a1 + 1256) + 12 * v11);
    v15 = *v21;
    v16 = v21[1];
    if (v16 == -1)
    {
      if (v15 == -1)
        goto LABEL_25;
      goto LABEL_12;
    }
    goto LABEL_17;
  }
LABEL_29:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  for (i = 0; i != -240; i -= 120)
  {
    v32 = (_QWORD *)((char *)v42 + i);
    v33 = *(void **)((char *)&v42[13] + i + 8);
    if (v33)
    {
      v32[28] = v33;
      operator delete(v33);
    }
    v34 = (void *)v32[24];
    if (v34)
    {
      *(_QWORD *)((char *)&v42[12] + i + 8) = v34;
      operator delete(v34);
    }
    v35 = (char *)v42 + i;
    v36 = *(void **)((char *)&v42[10] + i + 8);
    if (v36)
    {
      *((_QWORD *)v35 + 22) = v36;
      operator delete(v36);
    }
    v37 = (void *)*((_QWORD *)v35 + 18);
    if (v37)
    {
      *(_QWORD *)((char *)&v42[9] + i + 8) = v37;
      operator delete(v37);
    }
    v38 = (void *)v32[15];
    if (v38)
    {
      *(_QWORD *)((char *)&v42[8] + i) = v38;
      operator delete(v38);
    }
  }
}

void sub_20C6EE7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t i;

  for (i = 120; i != -120; i -= 120)
    sub_20C6EC7C0((uint64_t)(&a15 + i));
  _Unwind_Resume(a1);
}

int32x2_t sub_20C6EE7E8(uint64_t a1, int a2, int32x2_t result)
{
  int *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int32x2_t *v18;
  int32x2_t *v19;
  int v20;
  int32x2_t *v21;
  unsigned int v22;
  uint64_t v23;
  int32x2_t *v24;
  int32x2_t *v25;
  int32x2_t *v26;
  int v27;
  uint64_t v28;
  int32x2_t *v29;
  int32x2_t *v30;
  uint32x2_t v31;
  __int32 v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  int32x2_t v36;
  int v37;
  int32x2_t v38;
  uint64_t v39;
  int32x2_t *v40;
  int32x2_t *v41;
  int32x2_t *v42;
  int32x2_t *v43;
  __int32 v44;
  __int32 v45;
  int v46;
  int32x2_t v47;
  uint32x2_t v48;
  int32x2_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int32x2_t *v53;
  int32x2_t *v54;
  __int32 v55;
  __int32 v56;
  int v57;
  int32x2_t *v58;
  int32x2_t *v59;
  int32x2_t *v60;
  int32x2_t *v61;
  uint32x2_t v62;
  int32x2_t v63;
  int64x2_t v64;
  int32x2_t *v65;
  int v66;
  int32x2_t v67;
  char v68;
  int32x2_t v69;
  int v70;

  if (*(_DWORD *)(a1 + 1116) <= a2)
  {
    *(_DWORD *)(a1 + 4384) = 3;
    return result;
  }
  v5 = (int *)(*(_QWORD *)(a1 + 1256) + 12 * a2);
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[2];
  v9 = *(_DWORD *)(a1 + 1148);
  if (v9 != 1)
  {
    if (v9 != 2)
      goto LABEL_17;
    v10 = (int *)(*(_QWORD *)(a1 + 1280) + 12 * a2);
    v11 = v10[2];
    if (v11 != -1)
    {
      v12 = *v10;
      v66 = v10[1];
      v13 = sub_20C6E81C0((unsigned int *)a1, (_WORD *)(a1 + 3672));
      v14 = 4;
      if (!v13)
        v14 = 2;
      if (sub_20C6E81C0((unsigned int *)a1, (_WORD *)(a1 + 3672 + v14)))
        v15 = 2;
      else
        v15 = 0;
      v16 = v15 | v13;
      if (v16 == 2)
      {
        v39 = *(_QWORD *)(a1 + 1160);
        v40 = (int32x2_t *)(v39 + 12 * v7);
        v41 = (int32x2_t *)(v39 + 12 * v66);
        v42 = (int32x2_t *)(v39 + 12 * v6);
        v43 = (int32x2_t *)(v39 + 12 * v12);
        v44 = v42[1].i32[0];
        v45 = v43[1].i32[0];
        v33 = __OFADD__(v45, v44);
        v46 = v45 + v44;
        v47 = vadd_s32(*v41, *v40);
        v48 = (uint32x2_t)vadd_s32(*v43, *v42);
        v49 = vshr_n_s32((int32x2_t)vsra_n_u32(v48, v48, 0x1FuLL), 1uLL);
        if (v46 < 0 != v33)
          v50 = v46 + 1;
        else
          v50 = v46;
        v67 = vsub_s32(v47, v49);
        v27 = v41[1].i32[0] + v40[1].i32[0] - (v50 >> 1);
        goto LABEL_34;
      }
      if (v16 == 1)
      {
        v51 = *(_QWORD *)(a1 + 1160);
        v18 = (int32x2_t *)(v51 + 12 * v12);
        v19 = (int32x2_t *)(v51 + 12 * v66);
        v20 = v19[1].i32[0] + v18[1].i32[0];
        v21 = (int32x2_t *)(v51 + 12 * v11);
      }
      else
      {
        if (v16)
        {
          v52 = *(_QWORD *)(a1 + 1160);
          v53 = (int32x2_t *)(v52 + 12 * v6);
          v54 = (int32x2_t *)(v52 + 12 * v12);
          v55 = v53[1].i32[0];
          v56 = v54[1].i32[0];
          v33 = __OFADD__(v56, v55);
          v57 = v56 + v55;
          if (v57 < 0 != v33)
            ++v57;
          v58 = (int32x2_t *)(v52 + 12 * v7);
          v59 = (int32x2_t *)(v52 + 12 * v66);
          v60 = (int32x2_t *)(v52 + 12 * v8);
          v61 = (int32x2_t *)(v52 + 12 * v11);
          v62 = (uint32x2_t)vadd_s32(*v54, *v53);
          v63 = vadd_s32(*v59, *v58);
          v64 = vmull_s32(vsub_s32(vsra_n_s32(vadd_s32(v63, v63), (int32x2_t)vsra_n_u32(v62, v62, 0x1FuLL), 1uLL), vadd_s32(*v60, *v61)), vdup_n_s32(0x55555556u));
          v67 = vadd_s32(vshrn_n_s64(v64, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v64, 0x3FuLL)));
          v27 = (2 * (v59[1].i32[0] + v58[1].i32[0]) + (v57 >> 1) - (v60[1].i32[0] + v61[1].i32[0])) / 3;
          goto LABEL_34;
        }
        v17 = *(_QWORD *)(a1 + 1160);
        v18 = (int32x2_t *)(v17 + 12 * v6);
        v19 = (int32x2_t *)(v17 + 12 * v7);
        v20 = v19[1].i32[0] + v18[1].i32[0];
        v21 = (int32x2_t *)(v17 + 12 * v8);
      }
      v67 = vsub_s32(vadd_s32(*v19, *v18), *v21);
      v27 = v20 - v21[1].i32[0];
LABEL_34:
      v22 = 1;
      goto LABEL_35;
    }
  }
  if (v8 != -1)
  {
    v22 = 0;
    v23 = *(_QWORD *)(a1 + 1160);
    v24 = (int32x2_t *)(v23 + 12 * v6);
    v25 = (int32x2_t *)(v23 + 12 * v7);
    v26 = (int32x2_t *)(v23 + 12 * v8);
    v67 = vsub_s32(vadd_s32(*v25, *v24), *v26);
    v27 = v25[1].i32[0] + v24[1].i32[0] - v26[1].i32[0];
LABEL_35:
    sub_20C6EEBCC(a1, (_BYTE *)(a1 + 1144), (_QWORD *)(a1 + 120 * v22 + 3680), (uint64_t)&v69);
    v36 = v69;
    v37 = v70;
    v38 = v67;
    goto LABEL_36;
  }
LABEL_17:
  if (v7 != -1)
  {
    v22 = 0;
    v28 = *(_QWORD *)(a1 + 1160);
    v29 = (int32x2_t *)(v28 + 12 * v6);
    v30 = (int32x2_t *)(v28 + 12 * v7);
    v31 = (uint32x2_t)vadd_s32(*v30, *v29);
    v32 = v29[1].i32[0];
    LODWORD(v30) = v30[1].i32[0];
    v33 = __OFADD__((_DWORD)v30, v32);
    v34 = (_DWORD)v30 + v32;
    v67 = vshr_n_s32((int32x2_t)vsra_n_u32(v31, v31, 0x1FuLL), 1uLL);
    if (v34 < 0 != v33)
      ++v34;
    v27 = v34 >> 1;
    goto LABEL_35;
  }
  if (v6 != -1)
  {
    v22 = 0;
    v35 = *(_QWORD *)(a1 + 1160) + 12 * v6;
    v67 = *(int32x2_t *)v35;
    v27 = *(_DWORD *)(v35 + 8);
    goto LABEL_35;
  }
  if (!*(_BYTE *)(a1 + 1156))
  {
    v22 = 0;
    v27 = 0;
    v67 = 0;
    goto LABEL_35;
  }
  v68 = 3;
  sub_20C6EEBCC(a1, &v68, 0, (uint64_t)&v69);
  v27 = 0;
  v36 = v69;
  v37 = v70;
  v38 = 0;
LABEL_36:
  v65 = (int32x2_t *)(*(_QWORD *)(a1 + 1160) + 12 * a2);
  result = vadd_s32(v36, v38);
  *v65 = result;
  v65[1].i32[0] = v37 + v27;
  return result;
}

uint64_t sub_20C6EEBCC@<X0>(uint64_t result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  _BOOL4 v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v31;
  uint64_t j;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  _WORD *v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  _BOOL4 v56;
  __int16 v57;

  v6 = (unsigned int *)result;
  switch(*a2)
  {
    case 0:
      v7 = 0;
      v8 = 0;
      v9 = 0;
      do
      {
        result = sub_20C6E81C0(v6, (_WORD *)(*a3 + v7));
        if ((_DWORD)result)
        {
          v56 = sub_20C6E81C0(v6, (_WORD *)(a3[3] + v7));
          v10 = (_WORD *)(a3[6] + v8);
          v11 = sub_20C6E81C0(v6, v10);
          if (v11)
            v12 = 2;
          else
            v12 = 1;
          if (sub_20C6E81C0(v6, &v10[v12]))
            v13 = 2;
          else
            v13 = 0;
          v14 = v13 | v11;
          if (sub_20C6E81C0(v6, &v10[v14 + 3]))
            v15 = 4;
          else
            v15 = 0;
          v16 = v14 | v15;
          if (sub_20C6E81C0(v6, &v10[v16 + 7]))
            v17 = 8;
          else
            v17 = 0;
          v18 = v16 | v17;
          if (sub_20C6E81C0(v6, &v10[v18 + 15]))
            v19 = 16;
          else
            v19 = 0;
          v20 = v18 | v19;
          result = sub_20C6E81C0(v6, &v10[v20 + 31]);
          if ((_DWORD)result)
            v21 = 32;
          else
            v21 = 0;
          v22 = v20 | v21;
          if (v22 == 63)
          {
            result = sub_20C6E82B0(v6, *(_DWORD *)(a3[12] + v9), (_WORD *)(a3[9] + v7));
            v22 = result + 63;
          }
          if (v56)
            v23 = v22 + 1;
          else
            v23 = ~v22;
        }
        else
        {
          v23 = 0;
        }
        *(_DWORD *)(a4 + v9) = v23;
        v9 += 4;
        v8 += 128;
        v7 += 2;
      }
      while (v7 != 6);
      return result;
    case 2:
      v24 = 0;
      for (i = 0; ; i += 4)
      {
        v26 = a3[12];
        result = sub_20C6E87E0(v6, *(_DWORD *)(v26 + i), (_WORD *)(a3[3] + v24), (_WORD *)(a3[9] + v24));
        v27 = (int)result >= 0 ? result : -(int)result;
        v28 = *(_DWORD *)(v26 + i);
        v29 = v27 >> v28;
        if (v28 && v29 == 0)
          break;
        if (v29 >= 2)
        {
          v31 = 1;
LABEL_41:
          *(_DWORD *)(v26 + i) = v28 + v31;
        }
        *(_DWORD *)(a4 + i) = result;
        v24 += 2;
        if (v24 == 6)
          return result;
      }
      v31 = -1;
      goto LABEL_41;
    case 3:
      for (j = 0; j != 3; ++j)
      {
        v33 = v6[j + 270];
        if (v33 < 1)
        {
          v35 = 0;
        }
        else
        {
          v34 = 0;
          v35 = 0;
          do
          {
            v57 = 0x8000;
            result = sub_20C6E81C0(v6, &v57);
            v35 += (_DWORD)result << v34++;
          }
          while (v33 != v34);
        }
        *(_DWORD *)(a4 + 4 * j) = v35;
      }
      return result;
    case 4:
      v36 = 0;
      v37 = 0;
      v38 = 0;
      break;
    default:
      return result;
  }
  do
  {
    result = sub_20C6E81C0(v6, (_WORD *)(*a3 + v36));
    if (!(_DWORD)result)
    {
      v55 = 0;
      goto LABEL_80;
    }
    v39 = sub_20C6E81C0(v6, (_WORD *)(a3[3] + v36));
    v40 = (_WORD *)(a3[6] + v37);
    if (sub_20C6E81C0(v6, v40))
      v41 = 32;
    else
      v41 = 0;
    if (sub_20C6E81C0(v6, (_WORD *)((char *)v40 + (v41 >> 4) + 2)))
      v42 = 16;
    else
      v42 = 0;
    v43 = v42 | v41;
    if (sub_20C6E81C0(v6, (_WORD *)((char *)v40 + (v43 >> 3) + 6)))
      v44 = 8;
    else
      v44 = 0;
    v45 = v43 | v44;
    if (sub_20C6E81C0(v6, (_WORD *)((char *)v40 + (v45 >> 2) + 14)))
      v46 = 4;
    else
      v46 = 0;
    v47 = v45 | v46;
    if (sub_20C6E81C0(v6, (_WORD *)((char *)v40 + (v47 >> 1) + 30)))
      v48 = 2;
    else
      v48 = 0;
    v49 = v47 | v48;
    result = sub_20C6E81C0(v6, (_WORD *)((char *)v40 + v49 + 62));
    v50 = v49 | result;
    if ((v49 | result) == 0x3F)
    {
      v51 = a3[12];
      result = sub_20C6E82B0(v6, *(_DWORD *)(v51 + v38), (_WORD *)(a3[9] + v36));
      v50 = result + 63;
      v52 = *(_DWORD *)(v51 + v38);
      v53 = ((int)result + 63) >> v52;
      if (!v52 || v53)
      {
        if (v53 < 2)
          goto LABEL_77;
        v54 = 1;
      }
      else
      {
        v54 = -1;
      }
      *(_DWORD *)(v51 + v38) = v52 + v54;
    }
LABEL_77:
    if (v39)
      v55 = v50 + 1;
    else
      v55 = ~v50;
LABEL_80:
    *(_DWORD *)(a4 + v38) = v55;
    v38 += 4;
    v37 += 128;
    v36 += 2;
  }
  while (v37 != 384);
  return result;
}

void sub_20C6EEFC0(uint64_t a1, int a2, int a3, int32x2_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == 3 || a2 == 5)
  {
    if (a3 >= 1)
    {
      v5 = a3 + 1;
      do
      {
        if (*(_DWORD *)(a1 + 4384))
          break;
        if (*(_BYTE *)(*(_QWORD *)(a1 + 1352) + (v5 - 2)))
          a4 = sub_20C6EE7E8(a1, *(_DWORD *)(*(_QWORD *)(a1 + 1328) + 4 * (v5 - 2)), a4);
        --v5;
      }
      while (v5 > 1);
    }
  }
  else if (a3 >= 1)
  {
    v6 = 0;
    v7 = a3;
    do
    {
      if (*(_DWORD *)(a1 + 4384))
        break;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 1352) + v6))
        a4 = sub_20C6EE7E8(a1, *(_DWORD *)(*(_QWORD *)(a1 + 1328) + 4 * v6), a4);
      ++v6;
    }
    while (v7 != v6);
  }
}

void sub_20C6EF080(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  _DWORD *v14;

  if (a3 > 1)
  {
    v6 = 0;
    v7 = 4 * a3 - 4;
    do
    {
      v8 = (int *)(*(_QWORD *)(a1 + 1328) + v6);
      v9 = *v8;
      v10 = v8[1];
      if (*(_BYTE *)(a1 + 1154))
      {
        sub_20C6EF178(a1, a2, v9, v10);
        if (*(_DWORD *)(a1 + 4384))
          return;
      }
      else
      {
        v11 = *(_QWORD *)(a1 + 1472);
        *(_DWORD *)(v11 + 12 * v9) += 8;
        *(_DWORD *)(v11 + 12 * v10) += 8;
      }
      v6 += 4;
    }
    while (v7 != v6);
  }
  if (a3 >= 1)
  {
    v12 = 0;
    do
    {
      v13 = (int *)(*(_QWORD *)(a1 + 1472) + 12 * *(int *)(*(_QWORD *)(a1 + 1328) + 4 * v12));
      v14 = (_DWORD *)(a1 + 1496);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 1352) + v12))
        sub_20C6EF550(v14, v13);
      else
        sub_20C6EF6A4(v14, v13);
      ++v12;
    }
    while (a3 != v12);
  }
}

uint64_t sub_20C6EF178(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v4;
  _DWORD *v5;
  int *v7;
  int *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _BOOL4 v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  _BOOL4 v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;

  v4 = *(_QWORD *)(result + 1160);
  v5 = (_DWORD *)(v4 + 12 * a2);
  v7 = (int *)(v4 + 12 * a3);
  v9 = (int *)(v4 + 12 * a4);
  v10 = *v9;
  v11 = v9[1];
  v13 = *v7;
  v12 = v7[1];
  v14 = *v9 - *v7;
  v15 = v11 - v12;
  v16 = v9[2];
  LODWORD(v9) = v7[2];
  v17 = v16 - (_DWORD)v9;
  v18 = v5[1];
  v19 = *v5 - v13;
  v20 = v18 - v12;
  v21 = v5[2];
  v22 = v21 - (_DWORD)v9;
  v23 = *v5 - v10;
  v24 = v18 - v11;
  v25 = v21 - v16;
  if (v14 >= 0)
    v26 = v14;
  else
    v26 = -v14;
  if (v15 >= 0)
    v27 = v15;
  else
    v27 = -v15;
  if (v17 >= 0)
    v28 = v17;
  else
    v28 = -v17;
  v31 = v26 < 0x1000 && v27 < 0x1000 && v28 < 0x1000;
  if (v19 >= 0)
    v32 = v19;
  else
    v32 = -v19;
  if (v20 >= 0)
    v33 = v20;
  else
    v33 = -v20;
  if (v22 >= 0)
    v34 = v22;
  else
    v34 = -v22;
  if (v31 && v32 <= 0xFFF && v33 <= 0xFFF && v34 <= 0xFFF)
  {
    v35 = v19 * v14 + v20 * v15 + v22 * v17;
    if (v35)
    {
      v36 = v22 * v15 - v20 * v17;
      if (v36 < 0)
        v36 = v20 * v17 - v22 * v15;
      v37 = v19 * v17 - v22 * v14;
      if (v37 < 0)
        v37 = -v37;
      v38 = v20 * v14 - v19 * v15;
      if (v38 < 0)
        v38 = -v38;
      v39 = v36 + v37;
      if (v37 < v38)
      {
        v40 = v38;
      }
      else
      {
        v39 = v36 + v38;
        v40 = v37;
      }
      v41 = v36 >= v37 && v36 >= v38;
      if (v41)
        v42 = v37 + v38;
      else
        v42 = v39;
      if (v41)
        v43 = v36;
      else
        v43 = v40;
      v44 = v43 + (v42 >> 2);
      if (v35 < 0)
        LODWORD(v45) = -16 * v35 / (int)(v44 - v35) + 16;
      else
        LODWORD(v45) = (int)(16 * v44) / (int)(v44 + v35);
      goto LABEL_77;
    }
LABEL_74:
    LODWORD(v45) = 16;
    goto LABEL_77;
  }
  v46 = v20 * (uint64_t)v15 + v19 * (uint64_t)v14 + v22 * (uint64_t)v17;
  if (!v46)
    goto LABEL_74;
  v47 = v22 * (uint64_t)v15 - v20 * (uint64_t)v17;
  if (v47 < 0)
    v47 = v20 * (uint64_t)v17 - v22 * (uint64_t)v15;
  v48 = v19 * (uint64_t)v17 - v22 * (uint64_t)v14;
  if (v48 < 0)
    v48 = -v48;
  v49 = v20 * (uint64_t)v14 - v19 * (uint64_t)v15;
  if (v49 < 0)
    v49 = -v49;
  v50 = v47 + v48;
  if (v48 < (unint64_t)v49)
  {
    v51 = v49;
  }
  else
  {
    v50 = v47 + v49;
    v51 = v48;
  }
  v52 = v47 >= (unint64_t)v48 && v47 >= (unint64_t)v49;
  if (v52)
    v53 = v48 + v49;
  else
    v53 = v50;
  if (v52)
    v54 = v47;
  else
    v54 = v51;
  v45 = v54 + (v53 >> 2);
  if (v46 < 0)
    LODWORD(v45) = -16 * v46 / (v45 - v46) + 16;
  else
    v45 = 16 * v45 / (v45 + v46);
LABEL_77:
  v55 = -v14;
  v56 = -v15;
  v57 = -v17;
  if (v23 >= 0)
    v58 = v23;
  else
    v58 = -v23;
  v59 = v58 < 0x1000 && v31;
  if (v24 >= 0)
    v60 = v24;
  else
    v60 = -v24;
  if (v25 >= 0)
    v61 = v25;
  else
    v61 = -v25;
  if (v59 && v60 <= 0xFFF && v61 <= 0xFFF)
  {
    v62 = v23 * v55 + v24 * v56 + v25 * v57;
    if (v62)
    {
      v63 = v24 * v17 + v25 * v56;
      if (v63 < 0)
        v63 = -v63;
      v64 = v23 * v57 + v25 * v14;
      if (v64 < 0)
        v64 = -v64;
      v65 = v23 * v15 + v24 * v55;
      if (v65 < 0)
        v65 = -v65;
      if (v63 < v64 || v63 < v65)
      {
        v66 = v63 + v64;
        if (v64 < v65)
        {
          v63 = v65;
        }
        else
        {
          v66 = v63 + v65;
          v63 = v64;
        }
      }
      else
      {
        v66 = v64 + v65;
      }
      v78 = v63 + (v66 >> 2);
      if (v62 < 0)
        LODWORD(v77) = -16 * v62 / (v78 - v62) + 16;
      else
        LODWORD(v77) = 16 * v78 / (v78 + v62);
      goto LABEL_131;
    }
LABEL_123:
    LODWORD(v77) = 16;
    goto LABEL_131;
  }
  v67 = v24 * (uint64_t)v56 + v23 * (uint64_t)v55 + v25 * (uint64_t)v57;
  if (!v67)
    goto LABEL_123;
  v68 = -v14;
  v69 = v25 * (uint64_t)v56 - v24 * (uint64_t)v57;
  if (v69 < 0)
    v69 = v24 * (uint64_t)v57 - v25 * (uint64_t)v56;
  v70 = v23 * (uint64_t)v57 - v25 * (uint64_t)v68;
  if (v70 < 0)
    v70 = -v70;
  v71 = v24 * (uint64_t)v68 - v23 * (uint64_t)v56;
  if (v71 < 0)
    v71 = -v71;
  v72 = v69 + v70;
  if (v70 < (unint64_t)v71)
  {
    v73 = v71;
  }
  else
  {
    v72 = v69 + v71;
    v73 = v70;
  }
  v74 = v69 >= (unint64_t)v70 && v69 >= (unint64_t)v71;
  if (v74)
    v75 = v70 + v71;
  else
    v75 = v72;
  if (v74)
    v76 = v69;
  else
    v76 = v73;
  v77 = v76 + (v75 >> 2);
  if (v67 < 0)
    LODWORD(v77) = -16 * v67 / (v77 - v67) + 16;
  else
    v77 = 16 * v77 / (v77 + v67);
LABEL_131:
  v79 = *(_QWORD *)(result + 1472);
  v80 = 12 * a3;
  *(_DWORD *)(v79 + v80) += v45;
  v81 = 12 * a4;
  v82 = *(_DWORD *)(v79 + v81) + v77;
  *(_DWORD *)(v79 + v81) = v82;
  if ((*(_DWORD *)(v79 + v80) & 0x80000000) != 0 || v82 < 0)
    *(_DWORD *)(result + 4384) = 3;
  return result;
}

void sub_20C6EF550(_DWORD *a1, int *a2)
{
  int v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  void **v10;
  int **v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int **v19;
  char *v20;
  char *v21;
  char *v22;
  int *v23;
  _DWORD *v24;
  unint64_t v25;

  if (*a2 >= 63)
    v4 = 63;
  else
    v4 = *a2;
  if (v4 <= a1[1])
    v5 = a1[1];
  else
    v5 = v4;
  v6 = &a1[6 * v4];
  v9 = *((_QWORD *)v6 + 1);
  v8 = (void **)(v6 + 2);
  v7 = v9;
  a1[1] = v5;
  v10 = v8 + 1;
  v11 = (int **)v8[1];
  v12 = ((uint64_t)v11 - v9) >> 3;
  a2[1] = v4;
  a2[2] = v12;
  v13 = (unint64_t)v8[2];
  if ((unint64_t)v11 >= v13)
  {
    if ((unint64_t)(v12 + 1) >> 61)
      sub_20BDDF694();
    v15 = v13 - v7;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v12 + 1))
      v16 = v12 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
      v18 = (char *)sub_20BDDF6A8((uint64_t)(v8 + 2), v17);
    else
      v18 = 0;
    v19 = (int **)&v18[8 * v12];
    v20 = &v18[8 * v17];
    *v19 = a2;
    v14 = v19 + 1;
    v21 = (char *)*v10;
    v22 = (char *)*v8;
    if (*v10 != *v8)
    {
      do
      {
        v23 = (int *)*((_QWORD *)v21 - 1);
        v21 -= 8;
        *--v19 = v23;
      }
      while (v21 != v22);
      v21 = (char *)*v8;
    }
    *v8 = v19;
    *v10 = v14;
    v8[2] = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v11 = a2;
    v14 = v11 + 1;
  }
  *v10 = v14;
  ++*a1;
  v24 = &a1[v4];
  v25 = (unint64_t)((char *)v14 - (_BYTE *)*v8) >> 3;
  if (v24[386] > (int)v25)
    LODWORD(v25) = v24[386];
  v24[386] = v25;
}

void sub_20C6EF6A4(_DWORD *a1, int *a2)
{
  if (sub_20C6F548C(a1, (uint64_t)a2))
    sub_20C6EF550(a1, a2);
}

uint64_t sub_20C6EF6E0(uint64_t a1, int a2, int a3, int *a4, _DWORD *a5, int *a6, int *a7)
{
  int v14;
  char v15;
  char v16;
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  int v26;
  int v27;
  _BOOL4 v28;
  int v29;
  unsigned int v30;
  BOOL v31;
  int *v32;
  _WORD *v33;
  _BOOL4 v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  _DWORD *v47;
  _BOOL4 v48;
  uint64_t v49;
  int v50;
  int v51;
  _DWORD *v52;
  _DWORD *v53;
  unint64_t v54;
  uint64_t v56;
  char **v57;
  char *v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  int v64;
  unsigned int *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  char *v71;
  uint64_t v72;
  int *v73;
  int v74;
  uint64_t v76;
  char *v77;
  int v78;
  int *v79;
  unint64_t v80;
  int v81;
  int v82;
  _BOOL4 v83;
  int v84;
  int *i;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  int v97;
  int v98;
  int *v99;
  int v100;
  unsigned int *v101;
  int v102;
  int v103;
  _DWORD *v104;
  int v105;
  char v106;
  char v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;

  v14 = *a6;
  if (sub_20C6E81C0((unsigned int *)a1, (_WORD *)(a1 + 16 * a3 + 3414)))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 1;
LABEL_3:
    v21 = 1;
  }
  else
  {
    v22 = a1 + 16 * a3;
    v23 = v22 + 3414;
    v24 = sub_20C6E81C0((unsigned int *)a1, (_WORD *)(v22 + 3416));
    v25 = 4;
    if (v24)
      v25 = 6;
    if (sub_20C6E81C0((unsigned int *)a1, (_WORD *)(v23 + v25)))
      v26 = 2;
    else
      v26 = 0;
    v27 = v26 | v24;
    v28 = sub_20C6E81C0((unsigned int *)a1, (_WORD *)(v23 + 2 * (v26 | v24 | 4u)));
    v19 = v27 + 5;
    if (!v28)
      v19 = v27 + 1;
    v15 = 0;
    v21 = 0;
    v17 = 0;
    v20 = 1;
    v16 = 1;
    v18 = 1;
    switch(v19)
    {
      case 1:
        break;
      case 2:
        v15 = 0;
        v16 = 0;
        v17 = 0;
        goto LABEL_3;
      case 3:
        v20 = 0;
        v16 = 0;
        v18 = 0;
        goto LABEL_16;
      case 4:
        v20 = 0;
        v16 = 0;
LABEL_16:
        v15 = 1;
        goto LABEL_18;
      case 5:
        v15 = 0;
        v16 = 0;
        v18 = 0;
LABEL_18:
        v21 = 1;
        goto LABEL_21;
      case 6:
        v15 = 0;
        v21 = 0;
        goto LABEL_21;
      case 7:
        v20 = 0;
        v21 = 0;
        v15 = 1;
LABEL_21:
        v17 = 1;
        break;
      default:
        v15 = 0;
        v16 = 0;
        v19 = 8;
        v20 = 1;
        v21 = 1;
        v17 = 1;
        v18 = 1;
        break;
    }
  }
  *a4 = v19;
  v104 = a5;
  v102 = v21;
  v103 = v18;
  v105 = v20;
  v106 = v16;
  v107 = v15;
  if (*(_BYTE *)(a1 + 1153) && *(_BYTE *)(a1 + 1152))
  {
    v29 = *(_DWORD *)(*(_QWORD *)(a1 + 1472) + 12 * a2);
    if (v29 <= 19)
      v29 = 19;
    v30 = v29 - 19;
    v109 = v30 >> 1;
    v110 = 15;
    v31 = v30 >= 0x1E;
    v32 = &v110;
    if (!v31)
      v32 = (int *)&v109;
  }
  else
  {
    v111 = 7;
    v32 = (int *)(*(_QWORD *)(a1 + 1424) + 4 * a2);
    if (*v32 >= 7)
      v32 = &v111;
  }
  v33 = (_WORD *)(a1 + 6 * *v32 + 3308);
  v34 = sub_20C6E81C0((unsigned int *)a1, v33);
  v35 = 2;
  if (!v34)
    v35 = 1;
  if (sub_20C6E81C0((unsigned int *)a1, &v33[v35]))
    v36 = 2;
  else
    v36 = 0;
  v37 = v36 | v34;
  if ((v36 | v34) != 3)
  {
LABEL_39:
    v39 = *a6;
    if (v37 >= *(_DWORD *)(a1 + 1120) - *a6)
      goto LABEL_65;
    v99 = a7;
    v100 = a2;
    v40 = v37 + 1;
    v98 = v14;
    v101 = (unsigned int *)a4;
    switch(*(_DWORD *)(a1 + 1132))
    {
      case 0:
        v41 = *(_QWORD *)(a1 + 1208);
        v42 = v40;
        do
        {
          *(_DWORD *)(v41 + 4 * v39 + 4) = *(_DWORD *)(v41 + 4 * v39) + 3;
          v39 = *a6 + 1;
          *a6 = v39;
          --v42;
        }
        while (v42);
        v43 = v40;
        break;
      case 1:
        v44 = *(_QWORD *)(a1 + 1208);
        v45 = v40;
        do
        {
          *(_DWORD *)(v44 + 4 * v39 + 4) = *(_DWORD *)(v44 + 4 * v39) + 4;
          v39 = *a6 + 1;
          *a6 = v39;
          --v45;
        }
        while (v45);
        v43 = 2 * v40;
        break;
      case 2:
        v43 = 0;
        do
        {
          if (sub_20C6E81C0((unsigned int *)a1, (_WORD *)(a1 + 3406)))
            v46 = 4;
          else
            v46 = 3;
          v47 = (_DWORD *)(*(_QWORD *)(a1 + 1208) + 4 * *a6);
          v47[1] = *v47 + v46;
          ++*a6;
          v43 = v43 + v46 - 2;
          --v40;
        }
        while (v40);
        break;
      case 3:
        v43 = 0;
        do
        {
          v48 = sub_20C6E81C0((unsigned int *)a1, (_WORD *)(a1 + 3406));
          if (v48)
            v49 = 4;
          else
            v49 = 2;
          if (sub_20C6E81C0((unsigned int *)a1, (_WORD *)(a1 + v49 + 3406)))
            v50 = 2;
          else
            v50 = 0;
          v51 = v50 | v48;
          if (v51 == 3)
            v51 = sub_20C6E82B0((unsigned int *)a1, 0, (_WORD *)(a1 + 3412)) + 3;
          v52 = (_DWORD *)(*(_QWORD *)(a1 + 1208) + 4 * *a6);
          v52[1] = v51 + *v52 + 3;
          ++*a6;
          v43 += v51 + 1;
          --v40;
        }
        while (v40);
        break;
      default:
        goto LABEL_65;
    }
    if (v43 <= 0 || v43 > *(_DWORD *)(a1 + 1124))
      goto LABEL_65;
    v54 = (v43 + 1);
    v97 = *(_DWORD *)(a1 + 1116);
    v56 = a1 + 1328;
    v57 = (char **)(a1 + 1352);
    sub_20BE81ACC(a1 + 1328, v54);
    v58 = *(char **)(a1 + 1352);
    v59 = *(_QWORD *)(a1 + 1360) - (_QWORD)v58;
    if (v54 <= v59)
    {
      v60 = v100;
      if (v54 < v59)
        *(_QWORD *)(a1 + 1360) = &v58[v54];
    }
    else
    {
      sub_20C6BBBDC((unint64_t *)(a1 + 1352), v54 - v59);
      v58 = *v57;
      v60 = v100;
    }
    *v58 = v107;
    *(_BYTE *)(*(_QWORD *)(a1 + 1352) + v43) = v106;
    v61 = v43;
    v62 = *(_DWORD **)(a1 + 1328);
    v63 = *(_QWORD *)(a1 + 1448);
    v108 = *(_DWORD *)(v63 + 16 * v60);
    if ((v17 & 1) != 0)
    {
      if (!v105)
        goto LABEL_79;
      if (*(_BYTE *)(a1 + 1152))
        v64 = sub_20C6F4F18(a1, v60 - 1);
      else
        v64 = v60 - 1 + sub_20C6E87E0((unsigned int *)a1, 0, (_WORD *)(a1 + 3530), (_WORD *)(a1 + 3532));
    }
    else
    {
      v64 = *(_DWORD *)(v63 + 16 * v60 + 4);
    }
    *v62 = v64;
LABEL_79:
    v31 = v43 >= 2;
    v65 = v101;
    if (v31)
    {
      if (sub_20C6E81C0((unsigned int *)a1, (_WORD *)(a1 + 3534)))
      {
        v66 = 1;
        do
          (*v57)[v66++] = 1;
        while (v61 != v66);
      }
      else if ((_DWORD)v54 == 3)
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 1352) + 1) = 0;
        if (*(_BYTE *)(a1 + 1152))
          v67 = sub_20C6F4F18(a1, v97);
        else
          v67 = v97 - sub_20C6E82B0((unsigned int *)a1, 0, (_WORD *)(a1 + 3532));
        *(_DWORD *)(*(_QWORD *)v56 + 4) = v67;
      }
      else
      {
        v68 = 1;
        do
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 1352) + v68) = sub_20C6E81C0((unsigned int *)a1, (_WORD *)(a1 + 3494));
          if (!*(_BYTE *)(*(_QWORD *)(a1 + 1352) + v68))
          {
            if (*(_BYTE *)(a1 + 1152))
              v69 = sub_20C6F4F18(a1, v97);
            else
              v69 = v97 - sub_20C6E82B0((unsigned int *)a1, 0, (_WORD *)(a1 + 3532));
            *(_DWORD *)(*(_QWORD *)v56 + 4 * v68) = v69;
          }
          ++v68;
        }
        while (v61 != v68);
      }
    }
    if (*(_DWORD *)(a1 + 4384))
      return 0xFFFFFFFFLL;
    v70 = v98;
    if (v103)
    {
      if (!v102)
      {
LABEL_107:
        v53 = (_DWORD *)(a1 + 4384);
        if (*v65 == 3 || *v65 == 5)
        {
          v71 = *v57;
          v72 = v61;
          v73 = v99;
          do
          {
            if (v71[v72])
            {
              v74 = (*v104)++;
              *(_DWORD *)(*(_QWORD *)v56 + 4 * v72) = v74;
            }
          }
          while (v72-- > 0);
        }
        else
        {
          v76 = 0;
          v77 = *v57;
          v73 = v99;
          do
          {
            if (v77[v76])
            {
              v78 = (*v104)++;
              *(_DWORD *)(*(_QWORD *)v56 + 4 * v76) = v78;
            }
            ++v76;
          }
          while (v54 != v76);
        }
        v79 = *(int **)(a1 + 1328);
        v80 = v54;
        while (1)
        {
          v82 = *v79++;
          v81 = v82;
          if (v82 < 0 || v81 >= (int)((*(_QWORD *)(a1 + 1456) - *(_QWORD *)(a1 + 1448)) >> 4))
            goto LABEL_66;
          if (!--v80)
          {
            sub_20C6F50D8((_QWORD *)a1, v60, *v65, v54);
            if (*(_BYTE *)(a1 + 1152))
              v83 = *(_BYTE *)(a1 + 1153) == 0;
            else
              v83 = 1;
            v84 = 0;
            for (i = (int *)(*(_QWORD *)(a1 + 1328) + 4); ; ++i)
            {
              v86 = *(i - 1);
              v87 = *i;
              if (!v84)
              {
                v88 = *v73;
                if ((int)v88 + 2 > *(_DWORD *)(a1 + 1124))
                  goto LABEL_66;
                v84 = *(_DWORD *)(*(_QWORD *)(a1 + 1208) + 4 * (v70 + 1))
                    - *(_DWORD *)(*(_QWORD *)(a1 + 1208) + 4 * v70)
                    - 2;
                *v73 = v88 + 1;
                v89 = *(_QWORD *)(a1 + 1184);
                *(_DWORD *)(v89 + 4 * v88) = v60;
                v90 = *v73;
                *v73 = v90 + 1;
                *(_DWORD *)(v89 + 4 * v90) = v86;
                ++v70;
              }
              v91 = *v73;
              if ((int)v91 >= *(_DWORD *)(a1 + 1124))
                break;
              v92 = v86;
              *v73 = v91 + 1;
              *(_DWORD *)(*(_QWORD *)(a1 + 1184) + 4 * v91) = v87;
              v93 = *(_QWORD *)(a1 + 1448);
              v94 = v93 + 16 * v87;
              *(_DWORD *)(v94 + 4) = v86;
              *(_DWORD *)(v94 + 8) = v60;
              v95 = (_DWORD *)(v93 + 16 * v86);
              *v95 = v87;
              v95[3] = v60;
              if (v83)
              {
                v96 = *(_QWORD *)(a1 + 1424);
                ++*(_DWORD *)(v96 + 4 * v92);
                ++*(_DWORD *)(v96 + 4 * v87);
              }
              --v84;
              if (!--v61)
                return v54;
            }
            goto LABEL_66;
          }
        }
      }
      if (*(_BYTE *)(a1 + 1152))
        v108 = sub_20C6F4F18(a1, v60 + 1);
      else
        v108 = v60 + 1 + sub_20C6E87E0((unsigned int *)a1, 0, (_WORD *)(a1 + 3530), (_WORD *)(a1 + 3532));
      v70 = v98;
      v65 = v101;
    }
    v62[v61] = v108;
    goto LABEL_107;
  }
  v38 = sub_20C6E82B0((unsigned int *)a1, 0, (_WORD *)(a1 + 3404));
  if (v38 >= -3)
  {
    v37 = v38 + 3;
    goto LABEL_39;
  }
LABEL_65:
  v53 = (_DWORD *)(a1 + 4384);
LABEL_66:
  *v53 = 3;
  return 0xFFFFFFFFLL;
}

uint64_t sub_20C6EFF5C(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t result;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t i;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  char v29;
  int *v30;
  int *v31;
  char v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  int v41;
  int *v42;
  unint64_t v43;
  int *v44;
  int v45;
  int **v46;
  int **v47;

  result = 5;
  if (a2 && a5)
  {
    if (*(_DWORD *)(a1 + 4384))
      return 6;
    v16 = (unsigned int *)sub_20C6EB13C(a2, a3, a1 + 4320);
    result = 3;
    if (v16)
    {
      if ((v15 & 0x8000000000000000) == 0)
      {
        v17 = *(unsigned int *)(a1 + 4328);
        if (a3 - v17 >= 0 && (unint64_t)v16 + v15 >= a2)
        {
          v18 = a2 + v17;
          if (v18 >= (unint64_t)v16)
          {
            v19 = v18 - (_QWORD)v16;
            if ((uint64_t)(v18 - (_QWORD)v16) >= 0)
            {
              v20 = *(_DWORD *)(a1 + 1124);
              if (v20 >= 1)
              {
                v21 = *(_DWORD *)(a1 + 4332);
                if (v21 >= 1)
                {
                  v22 = *(unsigned int *)(a1 + 4336);
                  if ((int)v22 >= 1
                    && *(_DWORD *)(a1 + 4356) == 3
                    && *(_DWORD *)(a1 + 4340) == v20
                    && (a7 || !*(_DWORD *)(a1 + 4364))
                    && (a6 || !*(_DWORD *)(a1 + 4360)))
                  {
                    if ((*(_DWORD *)(a1 + 4376) - 5) >= 2)
                    {
                      v23 = *(_DWORD *)(a1 + 4348);
                    }
                    else
                    {
                      if ((_DWORD)v22 != 2)
                        return result;
                      v23 = *(_DWORD *)(a1 + 4348);
                      if (!v23)
                        return result;
                    }
                    if (v23 > 0x1B)
                      return result;
                    v47 = (int **)(a1 + 4056);
                    sub_20BE81ACC(a1 + 4080, v22);
                    for (i = 0; i != v22; ++i)
                    {
                      v25 = v19 < 4;
                      v19 -= 4;
                      if (v25)
                      {
                        v19 = 0;
                        v16 = 0;
                      }
                      else
                      {
                        v26 = *v16++;
                        *(_DWORD *)(*(_QWORD *)(a1 + 4080) + 4 * i) = v26;
                      }
                    }
                    v46 = (int **)(a1 + 4080);
                    sub_20BE81ACC((uint64_t)v47, v22);
                    v27 = 0;
                    result = 3;
                    do
                    {
                      while (1)
                      {
                        v25 = v19-- < 1;
                        if (!v25)
                          break;
                        v16 = 0;
                        v19 = 0;
                        if (++v27 == v22)
                          return result;
                      }
                      v28 = *(unsigned __int8 *)v16;
                      v16 = (unsigned int *)((char *)v16 + 1);
                      (*v47)[v27++] = v28;
                    }
                    while (v27 != v22);
                    if (!v16)
                      return 3;
                    v29 = 0;
                    v30 = *v46;
                    v31 = *v47;
                    v32 = 1;
                    v33 = v22;
                    do
                    {
                      v34 = *v30++;
                      v29 |= v34 != 0;
                      v35 = *v31++;
                      v32 &= v35 < 29;
                      --v33;
                    }
                    while (v33);
                    if ((v32 & 1) == 0)
                      return 3;
                    v37 = sub_20C6E9A90(a1, v16, v19);
                    result = 3;
                    if (!v37 || v36 < 0)
                      return result;
                    if (*(_DWORD *)(a1 + 4364))
                      sub_20C6F026C(a1);
                    if (*(_QWORD *)(a1 + 4112) - *(_QWORD *)(a1 + 4104) != *(_QWORD *)(a1 + 1192)
                                                                          - *(_QWORD *)(a1 + 1184))
                      return 3;
                    result = sub_20C6F071C(a1, a5, a6);
                    if (!(_DWORD)result)
                    {
                      if (a7)
                      {
                        v38 = *(_BYTE **)(a1 + 4104);
                        v39 = *(_BYTE **)(a1 + 4112);
                        if (v39 != v38)
                          memmove(a7, v38, v39 - v38);
                      }
                      if ((v29 & 1) != 0)
                      {
                        LODWORD(v40) = 0;
                        v41 = 0;
                        v42 = *v46;
                        do
                        {
                          v40 = (int)v40;
                          v43 = v22;
                          v44 = v42;
                          do
                          {
                            v45 = *v44++;
                            *(_DWORD *)(a5 + 4 * v40++) += v45;
                            --v43;
                          }
                          while (v43);
                          ++v41;
                        }
                        while (v41 != v21);
                      }
                      result = 0;
                      *a4 = *(unsigned int *)(a1 + 4328);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_20C6F026C(uint64_t a1)
{
  uint64_t v2;
  int **v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  _BOOL8 v16;
  _BOOL8 v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  _QWORD *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t i;
  void *__p[3];
  __int16 v66;
  __int16 v67;
  __int16 v68;
  __int16 v69;
  _WORD __b[3];
  _DWORD v71[10];
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned int *)(a1 + 1116);
  v3 = (int **)(a1 + 4248);
  sub_20C6E8D90(a1 + 4248, v2);
  memset_pattern16(__b, &unk_20CAF8CE0, 6uLL);
  v69 = 0x8000;
  v68 = 0x8000;
  if ((int)v2 >= 1)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = (unsigned int *)(*(_QWORD *)(a1 + 1256) + v4);
      v7 = *v6;
      if ((v7 & 0x80000000) != 0)
        v8 = 0;
      else
        v8 = (*v3)[v7 + 1];
      v9 = v6[1];
      if ((v9 & 0x80000000) != 0)
        v10 = 0;
      else
        v10 = (*v3)[v9 + 1];
      v11 = (unsigned int *)(*(_QWORD *)(a1 + 1280) + v4);
      v12 = *v11;
      if ((v12 & 0x80000000) != 0)
        v13 = 0;
      else
        v13 = (*v3)[v12 + 1];
      v14 = v11[1];
      if ((v14 & 0x80000000) != 0)
        v15 = 0;
      else
        v15 = (*v3)[v14 + 1];
      v16 = v13 == v15;
      if (v8 == v10)
        v17 = v16 + 1;
      else
        v17 = v16;
      if (sub_20C6E81C0((unsigned int *)a1, &__b[v17]))
      {
        v18 = 1;
      }
      else if (sub_20C6E81C0((unsigned int *)a1, &v69))
      {
        v18 = 0;
      }
      else
      {
        v18 = sub_20C6E82B0((unsigned int *)a1, 0, &v68) + 2;
      }
      v4 += 12;
      (*v3)[v5++] += v18;
    }
    while (12 * v2 != v4);
  }
  sub_20C6E8DFC(v3);
  v19 = *(_DWORD *)(a1 + 4332);
  sub_20BE81ACC(a1 + 4128, 0);
  v71[0] = -1;
  sub_20BE86740(a1 + 4128, v19, v71);
  v67 = 0x8000;
  v66 = 0x8000;
  if ((int)v2 > 0)
  {
    v20 = 0;
    v21 = 0;
    v22 = *(_QWORD *)(a1 + 4248);
    do
    {
      v23 = v20 + 1;
      v24 = *(_DWORD *)(v22 + 4 * (v20 + 1)) - *(_DWORD *)(v22 + 4 * v20);
      if (v24 >= 1)
      {
        do
        {
          if (sub_20C6E81C0((unsigned int *)a1, &v67))
          {
            v22 = *(_QWORD *)(a1 + 4248);
            v25 = *(_DWORD *)(v22 + 4 * v20);
            v26 = *(_QWORD *)(a1 + 4272);
            v27 = *(_DWORD *)(v26 + 4 * v20);
            *(_DWORD *)(v26 + 4 * v20) = v27 + 1;
            *(_DWORD *)(*(_QWORD *)(a1 + 4296) + 4 * (v27 + v25)) = v21;
            v28 = v21++;
            v29 = (_QWORD *)(a1 + 4128);
            v30 = v20;
          }
          else
          {
            v31 = sub_20C6E82B0((unsigned int *)a1, 0, &v66);
            v22 = *(_QWORD *)(a1 + 4248);
            v32 = *(_DWORD *)(v22 + 4 * v20);
            v33 = *(_QWORD *)(a1 + 4272);
            v34 = *(_DWORD *)(v33 + 4 * v20);
            v30 = v21 + ~v31;
            *(_DWORD *)(v33 + 4 * v20) = v34 + 1;
            v28 = v34 + v32;
            v29 = (_QWORD *)(a1 + 4296);
          }
          *(_DWORD *)(*v29 + 4 * v28) = v30;
          --v24;
        }
        while (v24);
      }
      ++v20;
    }
    while (v23 != v2);
  }
  v35 = *(_QWORD *)(a1 + 4296);
  sub_20C6E8D90(a1 + 4176, v19);
  v36 = *(unsigned int *)(a1 + 1120);
  v71[0] = 0;
  sub_20C6E8A00(__p, (int)v2, v71);
  memset_pattern16(v71, &unk_20CAF8CE0, 0x28uLL);
  sub_20BE81ACC(a1 + 4104, (uint64_t)(*(_QWORD *)(a1 + 1192) - *(_QWORD *)(a1 + 1184)) >> 2);
  if ((int)v36 >= 1)
  {
    v37 = 0;
    v38 = 0;
    for (i = v36; i != v37; v36 = i)
    {
      v39 = *(_QWORD *)(a1 + 1208);
      v40 = *(int *)(v39 + 4 * v37++);
      v41 = *(_DWORD *)(v39 + 4 * v37);
      if (v41 > (int)v40)
      {
        v42 = 4 * v40;
        v43 = v41 - v40;
        do
        {
          v44 = *(int *)(*(_QWORD *)(a1 + 1184) + v42);
          v45 = *(_DWORD *)(*(_QWORD *)(a1 + 4248) + 4 * v44);
          v46 = *(_DWORD *)(*(_QWORD *)(a1 + 4272) + 4 * v44);
          if (v46 >= 2)
          {
            v47 = *((_DWORD *)__p[0] + v44);
            *((_DWORD *)__p[0] + v44) = v47 + 1;
            if (v38 >= 1)
              v48 = 1;
            else
              v48 = v38;
            if (v47 >= 4)
              v49 = 4;
            else
              v49 = v47;
            v38 = sub_20C6F0CC4((unsigned int *)a1, v46 - 1, &v71[2 * v49 + v48]);
            v45 += v38;
          }
          v50 = *(_DWORD *)(v35 + 4 * v45);
          *(_DWORD *)(*(_QWORD *)(a1 + 4104) + v42) = v50;
          ++*(_DWORD *)(*(_QWORD *)(a1 + 4176) + 4 * (v50 + 1));
          v42 += 4;
          --v43;
        }
        while (v43);
      }
    }
  }
  sub_20C6E8DFC((int **)(a1 + 4176));
  if ((int)v36 >= 1)
  {
    v51 = 0;
    v52 = *(_QWORD *)(a1 + 1208);
    do
    {
      v53 = *(int *)(v52 + 4 * v51);
      v54 = v51 + 1;
      v55 = *(int *)(v52 + 4 * (v51 + 1));
      if ((int)v53 < (int)v55)
      {
        v56 = *(_QWORD *)(a1 + 4176);
        v57 = *(_QWORD *)(a1 + 4200);
        v58 = *(_QWORD *)(a1 + 4224);
        v59 = (int *)(*(_QWORD *)(a1 + 4104) + 4 * v53);
        v60 = v55 - v53;
        do
        {
          v61 = *v59++;
          v62 = *(_DWORD *)(v56 + 4 * v61);
          v63 = *(_DWORD *)(v57 + 4 * v61);
          *(_DWORD *)(v57 + 4 * v61) = v63 + 1;
          *(_DWORD *)(v58 + 4 * (v63 + v62)) = v51;
          --v60;
        }
        while (v60);
      }
      ++v51;
    }
    while (v54 != v36);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20C6F06F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6F071C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  _WORD __b[2];

  if (*(_DWORD *)(a1 + 4360) == 1)
  {
    memset_pattern16(__b, &unk_20CAF8CE0, 4uLL);
    v6 = *(unsigned int *)(a1 + 4332);
    if ((int)v6 >= 1)
    {
      v7 = 0;
      while (1)
      {
        v8 = *(unsigned int *)(*(_QWORD *)(a1 + 4128) + 4 * v7);
        v21 = -1;
        v20 = -1;
        v19 = -1;
        v18 = -1;
        if ((v8 & 0x80000000) != 0)
        {
LABEL_22:
          v14 = 0;
          goto LABEL_23;
        }
        v9 = (unsigned int *)(*(_QWORD *)(a1 + 1280) + 12 * v8);
        sub_20C6F0928((_QWORD *)a1, v8, v7, (unsigned int *)(*(_QWORD *)(a1 + 1256) + 12 * v8), &v20);
        sub_20C6F0928((_QWORD *)a1, v8, v7, v9, &v18);
        v10 = v21;
        if ((v21 & 0x80000000) == 0 || v19 < 0)
        {
          v12 = v21;
          v10 = v19;
        }
        else
        {
          v11 = v20;
          v20 = v18;
          v12 = v19;
          v21 = v19;
          v18 = v11;
        }
        if (v10 != -1)
        {
          v13 = *(unsigned __int8 *)(a3 + SHIDWORD(v20))
              + *(unsigned __int8 *)(a3 + (int)v20)
              + *(unsigned __int8 *)(a3 + v12)
              + *(unsigned __int8 *)(a3 + (int)v18)
              + *(unsigned __int8 *)(a3 + SHIDWORD(v18))
              + *(unsigned __int8 *)(a3 + v10) > 2;
          goto LABEL_13;
        }
        if (v12 != -1)
        {
          v13 = *(unsigned __int8 *)(a3 + SHIDWORD(v20))
              + *(unsigned __int8 *)(a3 + (int)v20)
              + *(unsigned __int8 *)(a3 + v12) > 1;
LABEL_13:
          v14 = v13;
          goto LABEL_23;
        }
        if (HIDWORD(v20) == -1)
          break;
        v14 = *(unsigned __int8 *)(a3 + (int)v20);
        if (*(_BYTE *)(a3 + (int)v20))
        {
          v15 = *(unsigned __int8 *)(a3 + SHIDWORD(v20));
LABEL_21:
          v14 = v15 != 0;
        }
LABEL_23:
        *(_BYTE *)(a3 + v7++) = sub_20C6E81C0((unsigned int *)a1, &__b[v14]);
        if (v6 == v7)
          goto LABEL_24;
      }
      if ((_DWORD)v20 == -1)
        goto LABEL_22;
      v15 = *(unsigned __int8 *)(a3 + (int)v20);
      goto LABEL_21;
    }
  }
LABEL_24:
  v16 = *(unsigned int *)(a1 + 4376);
  if (v16 > 6)
    return 3;
  ((void (*)(uint64_t, uint64_t, uint64_t))*(&off_24C542190 + 2 * v16))(a1, a2, a3);
  return 0;
}

_QWORD *sub_20C6F0928(_QWORD *result, unsigned int a2, int a3, unsigned int *a4, _DWORD *a5)
{
  uint64_t v5;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v17;
  int v18;
  int v19;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *a4;
  *(_QWORD *)a5 = -1;
  a5[2] = -1;
  if ((a2 & 0x80000000) == 0 && (v5 & 0x80000000) == 0)
  {
    v7 = result;
    v8 = a5 + 1;
    v32 = result[537];
    v9 = result[534];
    v10 = *(_DWORD *)(v9 + 4 * a2);
    v11 = a4[2];
    v12 = (int)a4[1];
    if ((v11 & 0x80000000) != 0)
    {
      if ((v12 & 0x80000000) == 0)
      {
        v18 = *(_DWORD *)(v9 + 4 * v5);
        v19 = *(_DWORD *)(v9 + 4 * v12);
        if (v10 == 1 && v18 == 1 && v19 == 1)
        {
          v31 = result[531];
          *a5 = *(_DWORD *)(v32 + 4 * *(int *)(v31 + 4 * v5));
          a5[1] = *(_DWORD *)(v32 + 4 * *(int *)(v31 + 4 * v12));
        }
        else
        {
          return (_QWORD *)sub_20C6F0B30(result, a3, a2, v5, v12, a5, v8);
        }
      }
    }
    else
    {
      v13 = *(_DWORD *)(v9 + 4 * v5);
      v14 = *(_DWORD *)(v9 + 4 * v12);
      if (v10 == 1 && v13 == 1 && v14 == 1)
      {
        v22 = result[531];
        v17 = *(_DWORD *)(v32 + 4 * *(int *)(v22 + 4 * v5));
        *a5 = v17;
        a5[1] = *(_DWORD *)(v32 + 4 * *(int *)(v22 + 4 * v12));
        if (v17 < 0)
          return result;
      }
      else
      {
        result = (_QWORD *)sub_20C6F0B30(result, a3, a2, v5, v12, a5, v8);
        v17 = *a5;
        if ((*a5 & 0x80000000) != 0)
          return result;
      }
      v23 = *v8;
      if ((v23 & 0x80000000) == 0)
      {
        v24 = *(int *)(v7[534] + 4 * v11);
        if ((_DWORD)v24 == 1 && v13 == 1 && v14 == 1)
        {
          a5[2] = *(_DWORD *)(v32 + 4 * *(int *)(v7[531] + 4 * v11));
        }
        else if ((int)v24 >= 1)
        {
          v27 = *(int *)(v7[531] + 4 * v11);
          v28 = v27 + v24;
          do
          {
            v29 = *(_DWORD *)(v32 + 4 * v27);
            v33 = 0;
            result = (_QWORD *)sub_20C6F0B30(v7, v29, v11, v5, v12, (_DWORD *)&v33 + 1, &v33);
            if (HIDWORD(v33) == v17 && (_DWORD)v33 == v23)
              a5[2] = v29;
            ++v27;
          }
          while (v27 < v28);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20C6F0B30(_QWORD *a1, int a2, int a3, int a4, int a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  v7 = *(int *)(a1[525] + 4 * a2);
  if ((int)v7 >= 1)
  {
    v8 = *(int *)(a1[522] + 4 * a2);
    v9 = v7 + v8;
    v10 = a1[148];
    while (2)
    {
      v11 = (int *)(a1[151] + 4 * *(int *)(a1[528] + 4 * v8));
      v12 = *v11;
      v13 = v11[1];
      v14 = *(_DWORD *)(v10 + 4 * v12);
      v15 = (int)v12 + 1;
      v16 = 4 * v15 - 4;
      v17 = v15 + 1;
      while (v17 < v13)
      {
        v18 = *(_DWORD *)(v10 + v16 + 4);
        v19 = *(_DWORD *)(v10 + v16 + 8);
        if (v14 == a3 && v18 == a4 && v19 == a5)
        {
          v27 = a1[513] + v16;
          *a6 = *(_DWORD *)(v27 + 4);
          goto LABEL_41;
        }
        if (v14 == a3 && v19 == a4 && v18 == a5)
        {
          v28 = a1[513] + v16;
          *a7 = *(_DWORD *)(v28 + 4);
          goto LABEL_43;
        }
        if (v18 == a3 && v14 == a4 && v19 == a5)
        {
          v29 = a1[513];
          *a6 = *(_DWORD *)(v29 + 4 * v12);
          v27 = v29 + v16;
LABEL_41:
          v30 = *(_DWORD *)(v27 + 8);
LABEL_45:
          *a7 = v30;
          return 1;
        }
        if (v18 == a3 && v19 == a4 && v14 == a5)
        {
          v31 = a1[513];
          *a7 = *(_DWORD *)(v31 + 4 * v12);
          v28 = v31 + v16;
LABEL_43:
          v34 = *(_DWORD *)(v28 + 8);
LABEL_46:
          *a6 = v34;
          return 1;
        }
        if (v19 == a3 && v14 == a4 && v18 == a5)
        {
          v32 = a1[513];
          *a6 = *(_DWORD *)(v32 + 4 * v12);
          v30 = *(_DWORD *)(v32 + v16 + 4);
          goto LABEL_45;
        }
        v16 += 4;
        ++v17;
        if (v19 == a3 && v18 == a4 && v14 == a5)
        {
          v33 = a1[513];
          *a7 = *(_DWORD *)(v33 + 4 * v12);
          v34 = *(_DWORD *)(v33 + v16);
          goto LABEL_46;
        }
      }
      if (++v8 < v9)
        continue;
      break;
    }
  }
  result = 0;
  *a6 = -1;
  *a7 = -1;
  return result;
}

uint64_t sub_20C6F0CC4(unsigned int *a1, int a2, _WORD *a3)
{
  unint64_t v3;
  int v4;
  _WORD *v6;
  _BOOL4 v7;

  if (!a2)
    return 0;
  v3 = (unint64_t)a3;
  v4 = a2;
  if (!sub_20C6E81C0(a1, a3))
    return 0;
  if (v4 < 2)
    return 1;
  v6 = (_WORD *)(v3 + 2);
  LODWORD(v3) = 1;
  do
  {
    v7 = sub_20C6E81C0(a1, v6);
    v3 = (v3 + v7);
    if (v4 < 3)
      break;
    --v4;
  }
  while (v7);
  return v3;
}

void sub_20C6F0D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int32x2_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int32x2_t v18;
  int32x2_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  double v25;
  int32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  int32x2_t v29;
  int v30;
  int32x2_t v31;
  int32x2_t v32;
  int v33;
  int32x2_t v34;
  int32x2_t v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  int v39;
  int v40;
  int32x2_t v41;
  int32x2_t v42;
  int32x2_t v43;
  int32x2_t v44;
  int v45;
  int32x2_t v46;
  int32x2_t v47;
  unsigned int v48;
  uint32x2_t v49;
  __int32 v50;
  int v51;
  _BOOL4 v52;
  double v53;
  int32x2_t v54;
  int32x2_t v55;
  int32x2_t v56;
  int32x2_t v57;
  int v58;
  int32x2_t v59;
  int32x2_t v60;
  int v61;
  int32x2_t v62;
  int32x2_t v63;
  int32x2_t v64;
  int32x2_t v65;
  int v66;
  int32x2_t v67;
  int32x2_t v68;
  int v69;
  int32x2_t v70;
  int32x2_t v71;
  int v72;
  int32x2_t v73;
  int32x2_t v74;
  int v75;
  int32x2_t v76;
  int32x2_t v77;
  int v78;
  int32x2_t v79;
  int32x2_t v80;
  int v81;
  int32x2_t v82;
  int32x2_t v83;
  uint32x2_t v84;
  BOOL v85;
  int v86;
  int32x2_t v87;
  int64x2_t v88;
  unint64_t v89;
  uint32x2_t v90;
  int v91;
  int64x2_t v92;
  int v93;
  int v94;
  int32x2_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  _BOOL4 v100;
  int v101;
  int v102;
  int *v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  unint64_t v119;
  char *v120;
  void *v121;
  void *v122;
  char *v123;
  void *v124;
  void *v125;
  void *v126;
  int v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  int32x2_t v134;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  int v140;
  uint64_t v141;
  _DWORD v142[2];
  unint64_t v143;
  _DWORD v144[2];
  __int16 v145;
  __int16 v146;
  _WORD v147[3];
  _WORD __b[3];
  _OWORD v149[22];
  uint64_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x24BDAC8D0];
  v132 = (_QWORD *)(a1 + 4056);
  v138 = *(int *)(a1 + 4336);
  v136 = ~(-1 << (*(_DWORD *)(a1 + 4348) - 1));
  v137 = *(_DWORD *)(a1 + 4360);
  v133 = *(unsigned int *)(a1 + 4332);
  sub_20C6F1AD8((_QWORD *)(a1 + 1160), (_QWORD *)(a1 + 1208), (_QWORD *)(a1 + 1184), (uint64_t *)(a1 + 4104), v133, (uint64_t *)(a1 + 4152), v136);
  v5 = 0;
  v150 = 0;
  memset(v149, 0, sizeof(v149));
  do
  {
    sub_20C6EC678((uint64_t)v149 + v5, v138);
    v5 += 120;
  }
  while (v5 != 360);
  memset_pattern16(__b, &unk_20CAF8CE0, 6uLL);
  memset_pattern16(v147, &unk_20CAF8CE0, 6uLL);
  v146 = 0x8000;
  v145 = 0x8000;
  if ((int)v133 > 0)
  {
    v6 = 0;
    v131 = a3;
    v130 = 2 * v136;
    v7 = vdup_n_s32(v136);
    v8 = (int *)(a2 + 4);
    v9 = 8;
    while (v137 && !*(_BYTE *)(a3 + v6))
    {
LABEL_163:
      ++v6;
      v8 += v138;
      v9 += 12;
      if (v133 == v6)
        goto LABEL_166;
    }
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 4128) + 4 * v6);
    v11 = (int *)(*(_QWORD *)(a1 + 4152) + v9);
    v12 = *v11;
    v13 = *v11;
    v134 = *(int32x2_t *)(v11 - 2);
    if ((v10 & 0x80000000) == 0)
    {
      v144[0] = -1;
      v143 = -1;
      v142[0] = -1;
      v141 = -1;
      sub_20C6F0928((_QWORD *)a1, v10, v6, (unsigned int *)(*(_QWORD *)(a1 + 1256) + 12 * v10), &v143);
      sub_20C6F0928((_QWORD *)a1, v10, v6, (unsigned int *)(*(_QWORD *)(a1 + 1280) + 12 * v10), &v141);
      v14 = v144[0];
      if ((v144[0] & 0x80000000) == 0 || (v142[0] & 0x80000000) != 0)
      {
        v16 = v144[0];
        v14 = v142[0];
      }
      else
      {
        v15 = v143;
        v143 = v141;
        v16 = v142[0];
        v144[0] = v142[0];
        v141 = v15;
      }
      v17 = HIDWORD(v143);
      if (v14 != -1
        && (!v137
         || *(_BYTE *)(a3 + (int)v143)
         && *(_BYTE *)(a3 + SHIDWORD(v143))
         && *(_BYTE *)(a3 + v16)
         && *(_BYTE *)(a3 + (int)v141)
         && *(_BYTE *)(a3 + SHIDWORD(v141))
         && *(_BYTE *)(a3 + v14)))
      {
        v127 = v141;
        v128 = HIDWORD(v141);
        v18 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v143 * (int)v138), v7);
        v19 = vabs_s32(vrev64_s32(v18));
        v129 = v136 - v19.i32[1] - v19.i32[0];
        if (v129 < 0)
          v18 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v18), (int8x8_t)vsub_s32(v19, v7), (int8x8_t)__PAIR64__(v136 - v19.i32[1], v136 - v19.i32[0]));
        v20 = sub_20C6E81C0((unsigned int *)a1, v147);
        v21 = 2;
        if (!v20)
          v21 = 1;
        if (sub_20C6E81C0((unsigned int *)a1, &v147[v21]))
          v23 = 2;
        else
          v23 = 0;
        v24 = v23 | v20;
        if (v24 == 2)
        {
          v56 = vsub_s32(*(int32x2_t *)(a2 + 4 * v127 * (int)v138), v7);
          v57 = vabs_s32(vrev64_s32(v56));
          v58 = v136 - v57.i32[1] - v57.i32[0];
          if (v58 < 0)
            v56 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v56), (int8x8_t)vsub_s32(v57, v7), (int8x8_t)__PAIR64__(v136 - v57.i32[1], v136 - v57.i32[0]));
          v59 = vsub_s32(*(int32x2_t *)(a2 + 4 * v128 * (int)v138), v7);
          v60 = vabs_s32(vrev64_s32(v59));
          v61 = v136 - v60.i32[1] - v60.i32[0];
          if (v61 < 0)
            v59 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v59), (int8x8_t)vsub_s32(v60, v7), (int8x8_t)__PAIR64__(v136 - v60.i32[1], v136 - v60.i32[0]));
          v62 = vsub_s32(*(int32x2_t *)(a2 + 4 * v14 * (int)v138), v7);
          v63 = vabs_s32(vrev64_s32(v62));
          if (v136 - v63.i32[1] - v63.i32[0] < 0)
            v62 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v62), (int8x8_t)vsub_s32(v63, v7), (int8x8_t)__PAIR64__(v136 - v63.i32[1], v136 - v63.i32[0]));
          v25 = COERCE_DOUBLE(vsub_s32(vadd_s32(v59, v56), v62));
          v12 = v61 + v58 - (v136 - v63.i32[1] - v63.i32[0]);
        }
        else if (v24 == 1)
        {
          v64 = vsub_s32(*(int32x2_t *)(a2 + 4 * v17 * (int)v138), v7);
          v65 = vabs_s32(vrev64_s32(v64));
          v66 = v136 - v65.i32[1] - v65.i32[0];
          if (v66 < 0)
            v64 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v64), (int8x8_t)vsub_s32(v65, v7), (int8x8_t)__PAIR64__(v136 - v65.i32[1], v136 - v65.i32[0]));
          v67 = vsub_s32(*(int32x2_t *)(a2 + 4 * v16 * (int)v138), v7);
          v68 = vabs_s32(vrev64_s32(v67));
          v69 = v136 - v68.i32[1] - v68.i32[0];
          if (v69 < 0)
            v67 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v67), (int8x8_t)vsub_s32(v68, v7), (int8x8_t)__PAIR64__(v136 - v68.i32[1], v136 - v68.i32[0]));
          v25 = COERCE_DOUBLE(vsub_s32(vadd_s32(v64, v18), v67));
          v12 = v66 + v129 - v69;
        }
        else if (v24)
        {
          v70 = vsub_s32(*(int32x2_t *)(a2 + 4 * v17 * (int)v138), v7);
          v71 = vabs_s32(vrev64_s32(v70));
          v72 = v136 - v71.i32[1] - v71.i32[0];
          if (v72 < 0)
            v70 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v70), (int8x8_t)vsub_s32(v71, v7), (int8x8_t)__PAIR64__(v136 - v71.i32[1], v136 - v71.i32[0]));
          v73 = vsub_s32(*(int32x2_t *)(a2 + 4 * v16 * (int)v138), v7);
          v74 = vabs_s32(vrev64_s32(v73));
          v75 = v136 - v74.i32[1] - v74.i32[0];
          if (v75 < 0)
            v73 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v73), (int8x8_t)vsub_s32(v74, v7), (int8x8_t)__PAIR64__(v136 - v74.i32[1], v136 - v74.i32[0]));
          v76 = vsub_s32(*(int32x2_t *)(a2 + 4 * v127 * (int)v138), v7);
          v77 = vabs_s32(vrev64_s32(v76));
          v78 = v136 - v77.i32[1] - v77.i32[0];
          if (v78 < 0)
            v76 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v76), (int8x8_t)vsub_s32(v77, v7), (int8x8_t)__PAIR64__(v136 - v77.i32[1], v136 - v77.i32[0]));
          v79 = vsub_s32(*(int32x2_t *)(a2 + 4 * v128 * (int)v138), v7);
          v80 = vabs_s32(vrev64_s32(v79));
          v81 = v136 - v80.i32[1] - v80.i32[0];
          if (v81 < 0)
            v79 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v79), (int8x8_t)vsub_s32(v80, v7), (int8x8_t)__PAIR64__(v136 - v80.i32[1], v136 - v80.i32[0]));
          v82 = vsub_s32(*(int32x2_t *)(a2 + 4 * v14 * (int)v138), v7);
          v83 = vabs_s32(vrev64_s32(v82));
          if (v136 - v83.i32[1] - v83.i32[0] < 0)
            v82 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v82), (int8x8_t)vsub_s32(v83, v7), (int8x8_t)__PAIR64__(v136 - v83.i32[1], v136 - v83.i32[0]));
          v84 = (uint32x2_t)vadd_s32(v76, v18);
          v85 = __OFADD__(v78, v129);
          v86 = v78 + v129;
          if (v86 < 0 != v85)
            ++v86;
          v87 = vadd_s32(v79, v70);
          v88 = vmull_s32(vsub_s32(vsra_n_s32(vadd_s32(v87, v87), (int32x2_t)vsra_n_u32(v84, v84, 0x1FuLL), 1uLL), vadd_s32(v73, v82)), vdup_n_s32(0x55555556u));
          v25 = COERCE_DOUBLE(vadd_s32(vshrn_n_s64(v88, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v88, 0x3FuLL))));
          v89 = 1431655766 * ((v86 >> 1) + 2 * (v81 + v72) - (v75 + v136 - v83.i32[1] - v83.i32[0]));
          v12 = HIDWORD(v89) + (v89 >> 63);
        }
        else
        {
          v25 = *(double *)&v134;
          v26 = vzip1_s32(v18, v134);
          v27 = vzip2_s32(v18, v134);
          if (v26.i32[0] * (uint64_t)v26.i32[1] + v12 * (uint64_t)v129 + v27.i32[0] * (uint64_t)v27.i32[1] < 0)
          {
            v25 = COERCE_DOUBLE(vneg_s32(v134));
            v12 = -v12;
          }
        }
        v48 = 2;
        goto LABEL_110;
      }
      if (v16 != -1 && (!v137 || *(_BYTE *)(a3 + (int)v143) && *(_BYTE *)(a3 + SHIDWORD(v143)) && *(_BYTE *)(a3 + v16)))
      {
        v28 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v143 * (int)v138), v7);
        v29 = vabs_s32(vrev64_s32(v28));
        v30 = v136 - v29.i32[1] - v29.i32[0];
        if (v30 < 0)
          v28 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v28), (int8x8_t)vsub_s32(v29, v7), (int8x8_t)__PAIR64__(v136 - v29.i32[1], v136 - v29.i32[0]));
        v31 = vsub_s32(*(int32x2_t *)(a2 + 4 * HIDWORD(v143) * (int)v138), v7);
        v32 = vabs_s32(vrev64_s32(v31));
        v33 = v136 - v32.i32[1] - v32.i32[0];
        if (v33 < 0)
          v31 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v31), (int8x8_t)vsub_s32(v32, v7), (int8x8_t)__PAIR64__(v136 - v32.i32[1], v136 - v32.i32[0]));
        v34 = vsub_s32(*(int32x2_t *)(a2 + 4 * v16 * (int)v138), v7);
        v35 = vabs_s32(vrev64_s32(v34));
        v36 = v136 - v35.i32[1] - v35.i32[0];
        if (v36 < 0)
          v34 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v34), (int8x8_t)vsub_s32(v35, v7), (int8x8_t)__PAIR64__(v136 - v35.i32[1], v136 - v35.i32[0]));
        v37 = sub_20C6E81C0((unsigned int *)a1, __b);
        v38 = 2;
        if (!v37)
          v38 = 1;
        if (sub_20C6E81C0((unsigned int *)a1, &__b[v38]))
          v39 = 2;
        else
          v39 = 0;
        v40 = v39 | v37;
        if (v40 == 2)
        {
          v90 = (uint32x2_t)vsub_s32(v31, (int32x2_t)vmvn_s8((int8x8_t)v28));
          v25 = COERCE_DOUBLE(vshr_n_s32((int32x2_t)vsra_n_u32(v90, v90, 0x1FuLL), 1uLL));
          if (v30 + v33 + 1 >= 0)
            v91 = v30 + v33 + 1;
          else
            v91 = v30 + v33 + 2;
          v12 = v91 >> 1;
        }
        else if (v40 == 1)
        {
          v25 = COERCE_DOUBLE(vsub_s32(vadd_s32(v31, v28), v34));
          v12 = v33 + v30 - v36;
        }
        else if (v40)
        {
          v92 = vmull_s32(vadd_s32(vsub_s32(v31, (int32x2_t)vmvn_s8((int8x8_t)v28)), v34), vdup_n_s32(0x55555556u));
          v25 = COERCE_DOUBLE(vadd_s32(vshrn_n_s64(v92, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v92, 0x3FuLL))));
          v12 = (v30 + v33 + v36 + 1) / 3;
        }
        else
        {
          v25 = *(double *)&v134;
          v41 = vzip1_s32(v28, v134);
          v42 = vzip2_s32(v28, v134);
          if (v41.i32[0] * (uint64_t)v41.i32[1] + v12 * (uint64_t)v30 + v42.i32[0] * (uint64_t)v42.i32[1] < 0)
          {
            v25 = COERCE_DOUBLE(vneg_s32(v134));
            v12 = -v12;
          }
        }
        v48 = 1;
        goto LABEL_110;
      }
      if (HIDWORD(v143) != -1 && (!v137 || *(_BYTE *)(a3 + (int)v143) && *(_BYTE *)(a3 + SHIDWORD(v143))))
      {
        v43 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v143 * (int)v138), v7);
        v44 = vabs_s32(vrev64_s32(v43));
        v45 = v136 - v44.i32[1] - v44.i32[0];
        if (v45 < 0)
          v43 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v43), (int8x8_t)vsub_s32(v44, v7), (int8x8_t)__PAIR64__(v136 - v44.i32[1], v136 - v44.i32[0]));
        if (sub_20C6E81C0((unsigned int *)a1, &v146))
        {
          v46 = vsub_s32(*(int32x2_t *)(a2 + 4 * v17 * (int)v138), v7);
          v47 = vabs_s32(vrev64_s32(v46));
          if (v136 - v47.i32[1] - v47.i32[0] < 0)
            v46 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v46), (int8x8_t)vsub_s32(v47, v7), (int8x8_t)__PAIR64__(v136 - v47.i32[1], v136 - v47.i32[0]));
          v48 = 0;
          v49 = (uint32x2_t)vsub_s32(v46, (int32x2_t)vmvn_s8((int8x8_t)v43));
          v50 = v45 + v136 - v47.i32[1] - v47.i32[0];
          v25 = COERCE_DOUBLE(vshr_n_s32((int32x2_t)vsra_n_u32(v49, v49, 0x1FuLL), 1uLL));
          if (v50 + 1 >= 0)
            v51 = v50 + 1;
          else
            v51 = v50 + 2;
          v12 = v51 >> 1;
LABEL_110:
          v93 = LODWORD(v25);
          v140 = LODWORD(v25);
          v94 = HIDWORD(v25);
          v139 = HIDWORD(v25);
          v95 = vabs_s32(*(int32x2_t *)&v25);
          v96 = v95.u32[1];
          if (v12 >= 0)
            v97 = v12;
          else
            v97 = -v12;
          v98 = v95.i32[0];
          v100 = v95.i32[0] < (unsigned __int32)v95.i32[1] || v95.i32[0] < v97;
          if (v100)
          {
            v98 = v97;
            v101 = HIDWORD(v25);
            v102 = LODWORD(v25);
            if (v95.i32[1] < v97)
              goto LABEL_124;
            v103 = &v139;
            v98 = v95.u32[1];
            v101 = v12;
            v102 = LODWORD(v25);
          }
          else
          {
            v103 = &v140;
            v101 = HIDWORD(v25);
            v102 = v12;
          }
          *v103 = v12;
LABEL_124:
          v143 = __PAIR64__(v101, v102);
          v144[0] = v98;
          sub_20C6EB41C((unsigned int *)a1, v22, (uint64_t)&v143, v138, v132, (_BYTE *)(a1 + 4372), (_QWORD *)v149 + 15 * v48, (uint64_t)&v141);
          v105 = v141;
          v104 = HIDWORD(v141);
          if ((int)v141 >= 0)
            v106 = v141;
          else
            v106 = -(int)v141;
          if (v141 >= 0)
            v107 = HIDWORD(v141);
          else
            v107 = -HIDWORD(v141);
          v108 = v136 - v106;
          v109 = v136 - v106 - v107;
          if (v109 < 0)
          {
            v112 = v136 - v107;
            v113 = v107 - v136;
            if ((int)v141 >= 0)
              v105 = v112;
            else
              v105 = v113;
            v114 = v106 - v136;
            if (v141 >= 0)
              v104 = v108;
            else
              v104 = v114;
            if (v100)
              goto LABEL_132;
          }
          else if (v100)
          {
LABEL_132:
            if (v12 >= 0)
              v110 = v109;
            else
              v110 = -v109;
            if (v94 < 0)
              v109 = -v109;
            if (v96 >= v97)
              v111 = v104;
            else
              v111 = v110;
            if (v96 >= v97)
              v104 = v109;
            goto LABEL_152;
          }
          v111 = v105;
          if (v93 >= 0)
            v105 = v109;
          else
            v105 = -v109;
LABEL_152:
          if (v104 >= 0)
            v115 = v104;
          else
            v115 = -v104;
          if (v105 < 0)
          {
            v116 = -v105;
          }
          else
          {
            v115 = v130 - v115;
            v116 = v105;
          }
          if (v104 >= 0)
            v116 = v130 - v116;
          v117 = v105 + v136;
          v118 = v104 + v136;
          if (v111 < 0)
          {
            v117 = v115;
            v118 = v116;
          }
          *(v8 - 1) = v117;
          *v8 = v118;
          a3 = v131;
          goto LABEL_163;
        }
        v25 = *(double *)&v134;
        v54 = vzip1_s32(v43, v134);
        v55 = vzip2_s32(v43, v134);
        if (v54.i32[0] * (uint64_t)v54.i32[1] + v12 * (uint64_t)v45 + v55.i32[0] * (uint64_t)v55.i32[1] < 0)
        {
          v48 = 0;
          v25 = COERCE_DOUBLE(vneg_s32(v134));
          v12 = -v12;
          goto LABEL_110;
        }
LABEL_76:
        v48 = 0;
        goto LABEL_110;
      }
      v13 = v12;
    }
    if (sub_20C6F1E64(a1, v6, a2, a3, (uint64_t)&v143))
    {
      if (sub_20C6E81C0((unsigned int *)a1, &v146))
      {
        v12 = v144[0];
        v25 = *(double *)&v143;
      }
      else
      {
        v25 = *(double *)&v134;
        if ((int)v143 * (uint64_t)v134.i32[0] + SHIDWORD(v143) * (uint64_t)v134.i32[1] + v144[0] * (uint64_t)v13 < 0)
        {
          v25 = COERCE_DOUBLE(vneg_s32(v134));
          v12 = -v12;
        }
      }
    }
    else
    {
      v52 = sub_20C6E81C0((unsigned int *)a1, &v145);
      v25 = *(double *)&v134;
      v53 = COERCE_DOUBLE(vneg_s32(v134));
      if (v52)
      {
        v12 = -v12;
        v25 = v53;
      }
    }
    goto LABEL_76;
  }
LABEL_166:
  v119 = 360;
  do
  {
    v120 = (char *)v149 + v119;
    v121 = *(void **)&v144[v119 / 4];
    if (v121)
    {
      *((_QWORD *)v120 - 2) = v121;
      operator delete(v121);
    }
    v122 = (void *)*((_QWORD *)v120 - 6);
    if (v122)
    {
      *(_QWORD *)&v142[v119 / 4] = v122;
      operator delete(v122);
    }
    v123 = (char *)v149 + v119;
    v124 = *(void **)((char *)&v149[-4] + v119 - 8);
    if (v124)
    {
      *((_QWORD *)v123 - 8) = v124;
      operator delete(v124);
    }
    v125 = (void *)*((_QWORD *)v123 - 12);
    if (v125)
    {
      *(_QWORD *)((char *)&v149[-5] + v119 - 8) = v125;
      operator delete(v125);
    }
    v126 = (void *)*((_QWORD *)v120 - 15);
    if (v126)
    {
      *(_QWORD *)((char *)&v149[-7] + v119) = v126;
      operator delete(v126);
    }
    v119 -= 120;
  }
  while (v119);
}

void sub_20C6F1AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t i;

  for (i = 240; i != -120; i -= 120)
    sub_20C6EC7C0((uint64_t)(&a31 + i));
  _Unwind_Resume(a1);
}

void sub_20C6F1AD8(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, int a5, uint64_t *a6, int a7)
{
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int *v26;
  int *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  unint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  int *v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v71;
  uint64_t v72;
  void *__p[3];

  v12 = a2[1] - *a2;
  v13 = a5;
  sub_20C6E8374(a6, a5);
  v14 = a6[1] - *a6;
  if (v14 >= 1)
    bzero((void *)*a6, 12 * (v14 / 0xCuLL - ((unint64_t)v14 > 0xB)) + 12);
  LOBYTE(v71) = 0;
  sub_20C6E8628(__p, v13, &v71);
  if ((int)(v12 >> 2) >= 2)
  {
    v15 = 0;
    v16 = (v12 >> 2) - 1;
    do
    {
      v17 = *(int *)(*a2 + 4 * v15++);
      v18 = *(_DWORD *)(*a2 + 4 * v15) - 1;
      if ((int)v17 + 1 >= v18)
        continue;
      v19 = v17 + 1;
      do
      {
        v20 = 0;
        v21 = *(_DWORD *)(*a3 + 4 * v17);
        v22 = 4 * v19;
        v23 = *(_DWORD *)(*a3 + 4 * v19++);
        v24 = *(_DWORD *)(*a3 + 4 * v19);
        v25 = *a4;
        v71 = *(_DWORD *)(*a4 + 4 * v17);
        v72 = *(_QWORD *)(v25 + v22);
        v26 = (int *)(*a1 + 12 * v21);
        v27 = (int *)(*a1 + 12 * v23);
        v28 = (int *)(*a1 + 12 * v24);
        v29 = *v26;
        v30 = v26[1];
        v31 = *v27 - v29;
        v32 = *v28 - v29;
        v33 = v27[1] - v30;
        v34 = v28[1] - v30;
        v35 = v26[2];
        v36 = v27[2] - v35;
        v37 = v28[2] - v35;
        v38 = v37 * v33 - v34 * v36;
        v39 = v32 * v36 - v37 * v31;
        v40 = v34 * v31 - v32 * v33;
        do
        {
          v41 = *(int *)((char *)&v71 + v20);
          v42 = (int *)(*a6 + 12 * (int)v41);
          v43 = *((_BYTE *)__p[0] + v41);
          if (!v43)
          {
            v48 = v39 + v42[1];
            v49 = v40 + v42[2];
            v45 = v38;
            goto LABEL_18;
          }
          v44 = 1 << (v43 - 1);
          if (v38 < 0)
          {
            v45 = -((v44 - v38) >> v43);
            if ((v39 & 0x8000000000000000) == 0)
            {
LABEL_11:
              v46 = (v44 + v39) >> v43;
              if (v40 < 0)
                goto LABEL_16;
              goto LABEL_12;
            }
          }
          else
          {
            v45 = (v44 + v38) >> v43;
            if ((v39 & 0x8000000000000000) == 0)
              goto LABEL_11;
          }
          v46 = -((v44 - v39) >> v43);
          if (v40 < 0)
          {
LABEL_16:
            v47 = -((v44 - v40) >> v43);
            goto LABEL_17;
          }
LABEL_12:
          v47 = (v44 + v40) >> v43;
LABEL_17:
          v48 = v46 + v42[1];
          v49 = v47 + v42[2];
LABEL_18:
          v50 = v45 + *v42;
          v51 = fabs((double)v50);
          v52 = fabs((double)v48);
          v53 = fabs((double)v49);
          if (v51 < v52)
            v51 = v52;
          if (v51 < v53)
            v51 = v53;
          v54 = (uint64_t)v51 + 1;
          if (v54 >> 30)
          {
            v55 = __clz(v54);
            v56 = 34 - v55;
            *((_BYTE *)__p[0] + v41) = v43 + 34 - v55;
            v57 = 1 << (33 - v55);
            if (v50 < 0)
              v50 = -(uint64_t)((unint64_t)(v57 - v50) >> (34 - v55));
            else
              v50 = (unint64_t)(v57 + v50) >> (34 - v55);
            if (v48 < 0)
              v48 = -(uint64_t)((unint64_t)(v57 - v48) >> v56);
            else
              v48 = (unint64_t)(v57 + v48) >> v56;
            if (v49 < 0)
              v49 = -(uint64_t)((unint64_t)(v57 - v49) >> v56);
            else
              v49 = (unint64_t)(v57 + v49) >> v56;
          }
          v20 += 4;
          *v42 = v50;
          v42[1] = v48;
          v42[2] = v49;
        }
        while (v20 != 12);
      }
      while (v18 != (_DWORD)v19);
    }
    while (v15 != v16);
  }
  v58 = (int *)*a6;
  v59 = (int *)a6[1];
  if ((int *)*a6 != v59)
  {
    do
    {
      v60 = *v58;
      v61 = v58[1];
      v62 = v58[2];
      if (v60 >= 0)
        v63 = *v58;
      else
        v63 = -v60;
      if (v61 >= 0)
        v64 = v58[1];
      else
        v64 = -v61;
      if (v62 >= 0)
        v65 = v58[2];
      else
        v65 = -v62;
      v66 = v64 + v63 + v65;
      if (v66)
      {
        v67 = (int)v60 * (uint64_t)a7 / v66;
        v68 = (int)v61 * (uint64_t)a7 / v66;
        v69 = (int)v62 * (uint64_t)a7 / v66;
      }
      else
      {
        LODWORD(v67) = 0;
        LODWORD(v68) = 0;
        LODWORD(v69) = a7;
      }
      *v58 = v67;
      v58[1] = v68;
      v58[2] = v69;
      v58 += 3;
    }
    while (v58 != v59);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

uint64_t sub_20C6F1E64(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int32x2_t v24;
  int32x2_t v25;
  unint64_t i;

  v5 = *(_DWORD *)(a1 + 4360);
  v6 = *(unsigned int *)(a1 + 4336);
  v7 = *(int *)(*(_QWORD *)(a1 + 4176) + 4 * a2);
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 4200) + 4 * a2);
  v9 = *(_QWORD *)(a1 + 4224);
  v10 = *(_DWORD *)(a1 + 4348);
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  if (v8 < 1)
    return 0;
  result = 0;
  v13 = 0;
  v14 = ~(-1 << (v10 - 1));
  v15 = v8 + v7;
  v16 = *(_QWORD *)(a1 + 1208);
  v17 = 0;
  v18 = vdup_n_s32(v14);
  do
  {
    v19 = (int *)(v16 + 4 * *(int *)(v9 + 4 * v7));
    v21 = *v19;
    v20 = v19[1];
    if ((int)v21 < (int)v20)
    {
      v22 = *(_QWORD *)(a1 + 4104);
      do
      {
        v23 = *(int *)(v22 + 4 * v21);
        if ((int)v23 < a2 && (!v5 || *(_BYTE *)(a4 + v23)))
        {
          v24 = vsub_s32(*(int32x2_t *)(a3 + 4 * (int)v23 * (int)v6), v18);
          v25 = vabs_s32(vrev64_s32(v24));
          if ((int)(v14 - v25.i32[1] - v25.i32[0]) < 0)
            v24 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v24), (int8x8_t)vsub_s32(v25, v18), (int8x8_t)__PAIR64__(v14 - v25.i32[1], v14 - v25.i32[0]));
          v17 = vadd_s32(v17, v24);
          *(int32x2_t *)a5 = v17;
          v13 += v14 - v25.i32[1] - v25.i32[0];
          *(_DWORD *)(a5 + 8) = v13;
          result = (result + 1);
        }
        ++v21;
      }
      while (v21 < v20 && (int)result < 4);
    }
    ++v7;
  }
  while (v7 < v15 && (int)result < 4);
  if ((int)v6 >= 1 && (int)result >= 2)
  {
    for (i = 0; i < v6; ++i)
      *(int *)(a5 + 4 * i) /= (int)result;
  }
  return result;
}

void sub_20C6F1FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _BOOL4 v18;
  int v19;
  int v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v41;
  uint64_t v42;
  int v43;
  int v45;
  int v46;
  char v47;
  char v48;
  _DWORD v49[3];
  int v50;
  int v51;
  int v52;
  __int16 v53;
  __int16 v54;
  void *v55[2];
  void *v56[2];
  __int128 v57;
  void *v58[2];
  void *v59[2];
  __int128 v60;
  void *__p[2];
  uint64_t v62;

  v4 = *(unsigned int *)(a1 + 4332);
  v5 = *(_DWORD *)(a1 + 4336);
  v43 = *(_DWORD *)(a1 + 4360);
  v41 = ~(-1 << (*(_DWORD *)(a1 + 4348) - 1));
  sub_20C6F1AD8((_QWORD *)(a1 + 1160), (_QWORD *)(a1 + 1208), (_QWORD *)(a1 + 1184), (uint64_t *)(a1 + 4104), v4, (uint64_t *)(a1 + 4152), v41);
  v62 = 0;
  v60 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v58 = 0u;
  *(_OWORD *)v59 = 0u;
  *(_OWORD *)v56 = 0u;
  v57 = 0u;
  *(_OWORD *)v55 = 0u;
  sub_20C6EC678((uint64_t)v55, v5);
  v54 = 0x8000;
  v53 = 0x8000;
  if ((int)v4 >= 1)
  {
    v6 = 0;
    v38 = v4;
    v37 = 2 * v41;
    v7 = (int *)(a2 + 4);
    v39 = v5;
    v42 = 4 * v5;
    v8 = 4;
    while (v43 && !*(_BYTE *)(a3 + v6))
    {
LABEL_72:
      ++v6;
      v8 += 12;
      v7 = (int *)((char *)v7 + v42);
      if (v4 == v6)
        goto LABEL_73;
    }
    v9 = (int *)(*(_QWORD *)(a1 + 4152) + v8);
    v11 = *(v9 - 1);
    v10 = *v9;
    v12 = v9[1];
    if (sub_20C6F1E64(a1, v6, a2, a3, (uint64_t)&v50))
    {
      if (sub_20C6E81C0((unsigned int *)a1, &v54))
      {
        v10 = v51;
        v12 = v52;
        v11 = v50;
      }
      else if (v50 * (uint64_t)v11 + v51 * (uint64_t)v10 + v52 * (uint64_t)v12 < 0)
      {
        v11 = -v11;
        v10 = -v10;
        v12 = -v12;
      }
    }
    else if (sub_20C6E81C0((unsigned int *)a1, &v53))
    {
      v11 = -v11;
      v10 = -v10;
      v12 = -v12;
    }
    if (v11 >= 0)
      v14 = v11;
    else
      v14 = -v11;
    if (v10 >= 0)
      v15 = v10;
    else
      v15 = -v10;
    if (v12 >= 0)
      v16 = v12;
    else
      v16 = -v12;
    v18 = v14 < v15 || v14 < v16;
    if (v18)
    {
      v14 = v16;
      v19 = v10;
      v20 = v11;
      if (v15 < v16)
      {
LABEL_33:
        v49[0] = v20;
        v49[1] = v19;
        v49[2] = v14;
        sub_20C6EB41C((unsigned int *)a1, v13, (uint64_t)v49, v39, (_QWORD *)(a1 + 4056), (_BYTE *)(a1 + 4372), v55, (uint64_t)&v45);
        v22 = v45;
        v23 = v46;
        if (v45 >= 0)
          v24 = v45;
        else
          v24 = -v45;
        if (v46 >= 0)
          v25 = v46;
        else
          v25 = -v46;
        v26 = v41 - v24;
        v27 = v41 - v24 - v25;
        if (v27 < 0)
        {
          v28 = v41 - v25;
          v29 = v25 - v41;
          if (v45 >= 0)
            v22 = v28;
          else
            v22 = v29;
          v30 = v24 - v41;
          if (v46 >= 0)
            v23 = v26;
          else
            v23 = v30;
        }
        v31 = -v27;
        if (v12 >= 0)
          v32 = v27;
        else
          v32 = -v27;
        if (v10 >= 0)
          v31 = v27;
        if (v15 < v16)
          v31 = v23;
        else
          v32 = v23;
        if (v11 < 0)
          v27 = -v27;
        if (v18)
          v23 = v31;
        else
          v32 = v22;
        if (!v18)
          v22 = v27;
        if (v23 >= 0)
          v33 = v23;
        else
          v33 = -v23;
        if (v22 < 0)
        {
          v34 = -v22;
        }
        else
        {
          v33 = v37 - v33;
          v34 = v22;
        }
        if (v23 >= 0)
          v34 = v37 - v34;
        v35 = v22 + v41;
        v36 = v23 + v41;
        if (v32 < 0)
        {
          v35 = v33;
          v36 = v34;
        }
        *(v7 - 1) = v35;
        *v7 = v36;
        v4 = v38;
        goto LABEL_72;
      }
      v21 = &v47;
      v14 = v15;
      v19 = v12;
      v20 = v11;
    }
    else
    {
      v21 = &v48;
      v19 = v10;
      v20 = v12;
    }
    *(_DWORD *)v21 = v12;
    goto LABEL_33;
  }
LABEL_73:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v59[1])
  {
    *(void **)&v60 = v59[1];
    operator delete(v59[1]);
  }
  if (v58[0])
  {
    v58[1] = v58[0];
    operator delete(v58[0]);
  }
  if (v56[1])
  {
    *(void **)&v57 = v56[1];
    operator delete(v56[1]);
  }
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
}

void sub_20C6F231C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20C6EC7C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C6F2334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int *v13;
  int v14;
  unint64_t v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  int *v29;
  _BOOL4 v30;
  uint64_t v31;
  int v32;
  int v33;
  int *v34;
  int *v35;
  int *v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int *v44;
  int *v45;
  int *v46;
  _BOOL4 v47;
  uint64_t v48;
  int v49;
  int v50;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  _BOOL4 v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  int *v68;
  int *v69;
  int *v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  BOOL v75;
  int v76;
  _DWORD *v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int *v84;
  int *v85;
  uint64_t v86;
  int v87;
  int v88;
  _DWORD *v89;
  _DWORD *v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int *v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unint64_t v104;
  char *v105;
  int v106;
  int v107;
  int v108;
  unint64_t v109;
  _DWORD *v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  char *v117;
  uint64_t v118;
  int *v119;
  int v120;
  int v121;
  int v122;
  unint64_t v123;
  _BYTE *v124;
  void *v125;
  void *v126;
  _BYTE *v127;
  void *v128;
  void *v129;
  void *v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  int v143;
  int v144;
  _QWORD *v145;
  unint64_t v146;
  _DWORD *v147;
  int v148;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  unint64_t v154;
  int v155;
  unint64_t v156;
  int v157;
  void *__p;
  _QWORD v159[2];
  void *v160[3];
  void *v161;
  _DWORD v162[5];
  _WORD v163[3];
  _WORD v164[3];
  _WORD __b[3];
  __int16 v166;
  _QWORD v167[44];
  uint64_t v168;
  uint64_t v169;

  v4 = 0;
  v169 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned int *)(a1 + 4332);
  v6 = *(int *)(a1 + 4336);
  v145 = (_QWORD *)(a1 + 4056);
  v148 = *(_DWORD *)(a1 + 4360);
  v168 = 0;
  memset(v167, 0, sizeof(v167));
  do
  {
    sub_20C6EC678((uint64_t)&v167[v4], v6);
    v4 += 15;
  }
  while (v4 != 45);
  v166 = 0x8000;
  memset_pattern16(__b, &unk_20CAF8CE0, 6uLL);
  memset_pattern16(v164, &unk_20CAF8CE0, 6uLL);
  memset_pattern16(v163, &unk_20CAF8CE0, 6uLL);
  sub_20C6F554C(&v161, v6);
  LODWORD(__p) = 0;
  sub_20C6E8A00(v160, v6, &__p);
  v7 = a2;
  LODWORD(v156) = 0;
  sub_20C6E8A00(&__p, v6, &v156);
  if ((int)v5 >= 1)
  {
    v8 = 0;
    v138 = v6;
    v9 = 4 * v6;
    v10 = 4 * v6;
    v11 = (_DWORD *)a2;
    v141 = v5;
    v146 = v6;
    v134 = 4 * v6;
    v135 = v9;
    while (v148 && !*(_BYTE *)(a3 + v8))
    {
LABEL_117:
      ++v8;
      v11 = (_DWORD *)((char *)v11 + v10);
      if (v8 == v5)
        goto LABEL_118;
    }
    v12 = *(unsigned int *)(*(_QWORD *)(a1 + 4128) + 4 * v8);
    if ((v12 & 0x80000000) == 0)
    {
      v13 = (int *)(*(_QWORD *)(a1 + 1256) + 12 * v12);
      v14 = *v13;
      LODWORD(v156) = *v13;
      LODWORD(v15) = v13[1];
      HIDWORD(v156) = v15;
      v16 = v13[2];
      v157 = v16;
      v17 = (_DWORD *)(*(_QWORD *)(a1 + 1280) + 12 * v12);
      v18 = v17[1];
      LODWORD(v154) = *v17;
      HIDWORD(v154) = v18;
      v143 = v17[2];
      v144 = v154;
      v155 = v143;
      v153 = -1;
      v152 = -1;
      v151 = -1;
      v150 = -1;
      sub_20C6F0928((_QWORD *)a1, v12, v8, (unsigned int *)&v156, &v152);
      v140 = v12;
      sub_20C6F0928((_QWORD *)a1, v12, v8, (unsigned int *)&v154, &v150);
      v20 = v153;
      v21 = v151;
      if ((v153 & 0x80000000) == 0 || v151 < 0)
      {
        v136 = v18;
        v137 = v16;
        v139 = v14;
        v23 = v150;
        v22 = HIDWORD(v150);
      }
      else
      {
        v156 = v154;
        v143 = v16;
        v144 = v14;
        v157 = v155;
        v23 = v152;
        v22 = HIDWORD(v152);
        v152 = v150;
        v21 = v153;
        v20 = v151;
        v153 = v151;
        LODWORD(v154) = v14;
        LODWORD(v150) = v23;
        v136 = v15;
        v137 = v155;
        v15 = HIDWORD(v156);
        v139 = v156;
      }
      v24 = (int)v152;
      v25 = SHIDWORD(v152);
      if (v21 != -1
        && (!v148
         || *(_BYTE *)(a3 + (int)v152)
         && *(_BYTE *)(a3 + SHIDWORD(v152))
         && *(_BYTE *)(a3 + v20)
         && *(_BYTE *)(a3 + v23)
         && *(_BYTE *)(a3 + v22)
         && *(_BYTE *)(a3 + v21)))
      {
        v131 = v22;
        v132 = v15;
        v147 = v11;
        v6 = v146;
        v26 = (int *)(v7 + 4 * (int)v152 * (int)v146);
        v27 = v7;
        v28 = (int *)(v7 + 4 * HIDWORD(v152) * (int)v146);
        v29 = (int *)(v27 + 4 * v20 * (int)v146);
        v30 = sub_20C6E81C0((unsigned int *)a1, v163);
        v31 = 2;
        if (!v30)
          v31 = 1;
        if (sub_20C6E81C0((unsigned int *)a1, &v163[v31]))
          v32 = 2;
        else
          v32 = 0;
        v33 = v32 | v30;
        if (v33)
        {
          v34 = (int *)(v27 + 4 * v23 * (int)v146);
          v35 = (int *)(v27 + 4 * v131 * (int)v146);
          v36 = (int *)(v27 + 4 * v21 * (int)v146);
          if (v33 == 2)
          {
            v6 = v146;
            sub_20C6E916C(v26, v28, v29, v146, (int *)(*(_QWORD *)(a1 + 1160) + 12 * v139), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v132), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v137), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v140), (_DWORD *)v160[0]);
            v9 = v135;
            sub_20C6E916C(v34, v35, v36, v146, (int *)(*(_QWORD *)(a1 + 1160) + 12 * v144), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v136), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v143), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v140), __p);
            if ((int)v146 >= 1)
            {
              v84 = (int *)v160[0];
              v85 = (int *)__p;
              v86 = v138;
              do
              {
                v87 = *v85++;
                v88 = v87 + *v84;
                if (v88 < 0 != __OFADD__(v87, *v84))
                  ++v88;
                *v84++ = v88 >> 1;
                --v86;
              }
              while (v86);
            }
          }
          else
          {
            v9 = v135;
            if (v33 == 1)
            {
              v6 = v146;
              if ((int)v146 >= 1)
              {
                v37 = v160[0];
                v38 = v138;
                do
                {
                  v40 = *v34++;
                  v39 = v40;
                  v41 = *v35++;
                  v42 = v41 + v39;
                  v43 = *v36++;
                  *v37++ = v42 - v43;
                  --v38;
                }
                while (v38);
              }
            }
            else
            {
              v6 = v146;
              if ((_DWORD)v146 == 2)
              {
                sub_20C6E9868((unint64_t)v26, v28, v29, (_DWORD *)(*(_QWORD *)(a1 + 1160) + 12 * v139), (_DWORD *)(*(_QWORD *)(a1 + 1160) + 12 * v132), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v140), (int *)v160[0]);
                sub_20C6E9868((unint64_t)v34, v35, v36, (_DWORD *)(*(_QWORD *)(a1 + 1160) + 12 * v144), (_DWORD *)(*(_QWORD *)(a1 + 1160) + 12 * v136), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v140), (int *)__p);
                v89 = v160[0];
                v90 = __p;
                v91 = *((_DWORD *)v160[0] + 1);
                v92 = *(_DWORD *)__p + *(_DWORD *)v160[0];
                if (v92 < 0 != __OFADD__(*(_DWORD *)__p, *(_DWORD *)v160[0]))
                  ++v92;
                *(_DWORD *)v160[0] = v92 >> 1;
                v93 = v90[1];
                v75 = __OFADD__(v93, v91);
                v94 = v93 + v91;
                if (v94 < 0 != v75)
                  ++v94;
                v89[1] = v94 >> 1;
              }
              else if ((int)v146 >= 1)
              {
                v104 = 0;
                v105 = (char *)v160[0];
                do
                {
                  v106 = v26[v104 / 4];
                  v107 = v34[v104 / 4];
                  v75 = __OFADD__(v107, v106);
                  v108 = v107 + v106;
                  if (v108 < 0 != v75)
                    ++v108;
                  v109 = 1431655766
                       * ((v108 >> 1) - (v29[v104 / 4] + v36[v104 / 4]) + 2 * (v35[v104 / 4] + v28[v104 / 4]));
                  *(_DWORD *)&v105[v104] = HIDWORD(v109) + (v109 >> 63);
                  v104 += 4;
                  v60 = 2;
                }
                while (v135 != v104);
                goto LABEL_111;
              }
            }
          }
          goto LABEL_110;
        }
        if ((int)v146 >= 1)
        {
          v77 = v160[0];
          v78 = v138;
          v9 = v135;
          do
          {
            v80 = *v26++;
            v79 = v80;
            v81 = *v28++;
            v82 = v81 + v79;
            v83 = *v29++;
            *v77++ = v82 - v83;
            --v78;
          }
          while (v78);
LABEL_110:
          v60 = 2;
          goto LABEL_111;
        }
LABEL_98:
        v60 = 2;
LABEL_99:
        v9 = v135;
LABEL_111:
        v5 = v141;
        v7 = a2;
        v10 = v134;
        v11 = v147;
LABEL_112:
        sub_20C6EB41C((unsigned int *)a1, v19, (uint64_t)v160[0], v6, v145, (_BYTE *)(a1 + 4372), &v167[15 * v60], v7 + 4 * v8 * v6);
        if ((int)v6 >= 1)
        {
          v117 = (char *)v161 + 4;
          v118 = v138;
          v119 = v11;
          do
          {
            v121 = *v119++;
            v120 = v121;
            v122 = *((_DWORD *)v117 - 1);
            if (*(_DWORD *)&v117[4 * (((_BYTE)v122 - 1) & 3)] != v121)
            {
              *((_DWORD *)v117 - 1) = v122 + 1;
              *(_DWORD *)&v117[4 * (v122 & 3)] = v120;
            }
            v117 += 20;
            --v118;
          }
          while (v118);
        }
        goto LABEL_117;
      }
      if (v20 != -1 && (!v148 || *(_BYTE *)(a3 + (int)v152) && *(_BYTE *)(a3 + SHIDWORD(v152)) && *(_BYTE *)(a3 + v20)))
      {
        v133 = v15;
        v147 = v11;
        v44 = (int *)(v7 + 4 * (int)v152 * (int)v146);
        v45 = (int *)(v7 + 4 * HIDWORD(v152) * (int)v146);
        v46 = (int *)(v7 + 4 * v20 * (int)v146);
        v47 = sub_20C6E81C0((unsigned int *)a1, v164);
        v48 = 2;
        if (!v47)
          v48 = 1;
        if (sub_20C6E81C0((unsigned int *)a1, &v164[v48]))
          v49 = 2;
        else
          v49 = 0;
        v50 = v49 | v47;
        if (v50 == 2)
        {
          v6 = v146;
          sub_20C6E916C(v44, v45, v46, v146, (int *)(*(_QWORD *)(a1 + 1160) + 12 * v139), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v133), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v137), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v140), (_DWORD *)v160[0]);
          v9 = v135;
          if ((int)v146 >= 1)
          {
            v95 = (int *)v160[0];
            v96 = v138;
            do
            {
              v98 = *v44++;
              v97 = v98;
              v99 = *v45++;
              v100 = v99 + v97;
              v101 = *v46++;
              v102 = v100 - v101;
              v75 = __OFADD__(v102, *v95);
              v103 = v102 + *v95;
              if (v103 < 0 != v75)
                ++v103;
              *v95++ = v103 >> 1;
              --v96;
            }
            while (v96);
          }
          goto LABEL_110;
        }
        if (v50 == 1)
        {
          v6 = v146;
          sub_20C6E916C(v44, v45, v46, v146, (int *)(*(_QWORD *)(a1 + 1160) + 12 * v139), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v133), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v137), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v140), (_DWORD *)v160[0]);
        }
        else if (v50)
        {
          v6 = v146;
          if ((_DWORD)v146 != 2)
          {
            v9 = v135;
            if ((int)v146 >= 1)
            {
              v110 = v160[0];
              v111 = v138;
              do
              {
                v113 = *v44++;
                v112 = v113;
                v115 = *v45++;
                v114 = v115;
                v116 = *v46++;
                *v110++ = v114 + v112 - v116;
                v60 = 2;
                --v111;
              }
              while (v111);
              goto LABEL_111;
            }
            goto LABEL_110;
          }
          sub_20C6E9868(a2 + 8 * v24, (int *)(a2 + 8 * v25), (int *)(a2 + 8 * v20), (_DWORD *)(*(_QWORD *)(a1 + 1160) + 12 * v139), (_DWORD *)(*(_QWORD *)(a1 + 1160) + 12 * v133), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v140), (int *)v160[0]);
        }
        else
        {
          v6 = v146;
          if ((int)v146 >= 1)
          {
            v51 = v160[0];
            v52 = v138;
            v9 = v135;
            do
            {
              v54 = *v44++;
              v53 = v54;
              v55 = *v45++;
              v56 = v55 + v53;
              v57 = *v46++;
              *v51++ = v56 - v57;
              --v52;
            }
            while (v52);
            goto LABEL_110;
          }
        }
        goto LABEL_98;
      }
      if (HIDWORD(v152) != -1 && (!v148 || *(_BYTE *)(a3 + (int)v152) && *(_BYTE *)(a3 + SHIDWORD(v152))))
      {
        v58 = v15;
        v6 = v146;
        v147 = v11;
        if ((_DWORD)v146 == 2)
        {
          v59 = sub_20C6E81C0((unsigned int *)a1, &v166);
          sub_20C6E964C((int *)(v7 + 8 * (_DWORD)v24), (int *)(v7 + 8 * (_DWORD)v25), (_DWORD *)(*(_QWORD *)(a1 + 1160) + 12 * v139), (_DWORD *)(*(_QWORD *)(a1 + 1160) + 12 * v58), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v140), v59, (int *)v160[0]);
          v60 = 1;
          v6 = v146;
        }
        else
        {
          if ((int)v146 >= 1)
          {
            v68 = (int *)(v7 + 4 * (int)v152 * (int)v146);
            v69 = (int *)(v7 + 4 * HIDWORD(v152) * (int)v146);
            v70 = (int *)v160[0];
            v71 = v138;
            do
            {
              v73 = *v68++;
              v72 = v73;
              v74 = *v69++;
              v75 = __OFADD__(v74, v72);
              v76 = v74 + v72;
              if (v76 < 0 != v75)
                ++v76;
              *v70++ = v76 >> 1;
              --v71;
            }
            while (v71);
          }
          v60 = 1;
        }
        goto LABEL_99;
      }
      v5 = v141;
      v6 = v146;
      v10 = v134;
      v9 = v135;
    }
    v61 = sub_20C6F2EC4(a1, v8, v7, a3, (uint64_t)v160);
    v60 = 0;
    if (!v61 && (int)v6 >= 1)
    {
      v62 = 0;
      v63 = 4;
      do
      {
        v64 = sub_20C6E81C0((unsigned int *)a1, __b);
        v65 = v64;
        if (v64)
          v66 = 2;
        else
          v66 = 1;
        if (sub_20C6E81C0((unsigned int *)a1, &__b[v66]))
          v67 = 2;
        else
          v67 = 0;
        *(_DWORD *)((char *)v160[0] + v62) = *(_DWORD *)((char *)v161
                                                       + 4
                                                       * ((*(_DWORD *)((char *)v161 + v63 - 4)
                                                         + ~(v67 | v65)) & 3)
                                                       + v63);
        v63 += 20;
        v62 += 4;
      }
      while (v9 != v62);
      v60 = 0;
      v5 = v141;
      v7 = a2;
      v6 = v146;
    }
    goto LABEL_112;
  }
LABEL_118:
  if (__p)
  {
    v159[0] = __p;
    operator delete(__p);
  }
  if (v160[0])
  {
    v160[1] = v160[0];
    operator delete(v160[0]);
  }
  if (v161)
  {
    *(_QWORD *)v162 = v161;
    operator delete(v161);
  }
  v123 = 360;
  do
  {
    v124 = &v167[v123 / 8];
    v125 = *(void **)&v162[v123 / 4 + 4];
    if (v125)
    {
      *((_QWORD *)v124 - 2) = v125;
      operator delete(v125);
    }
    v126 = (void *)*((_QWORD *)v124 - 6);
    if (v126)
    {
      *(_QWORD *)&v162[v123 / 4] = v126;
      operator delete(v126);
    }
    v127 = &v167[v123 / 8];
    v128 = v160[v123 / 8];
    if (v128)
    {
      *((_QWORD *)v127 - 8) = v128;
      operator delete(v128);
    }
    v129 = (void *)*((_QWORD *)v127 - 12);
    if (v129)
    {
      v159[v123 / 8] = v129;
      operator delete(v129);
    }
    v130 = (void *)*((_QWORD *)v124 - 15);
    if (v130)
    {
      *(unint64_t *)((char *)&v156 + v123) = (unint64_t)v130;
      operator delete(v130);
    }
    v123 -= 120;
  }
  while (v123);
}

void sub_20C6F2E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t i;

  if (__p)
    operator delete(__p);
  if (a36)
    operator delete(a36);
  if (a39)
    operator delete(a39);
  for (i = 240; i != -120; i -= 120)
    sub_20C6EC7C0((uint64_t)(&a45 + i));
  _Unwind_Resume(a1);
}

uint64_t sub_20C6F2EC4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  unint64_t v25;
  _DWORD *v26;
  int v27;
  unint64_t i;

  v9 = *(_DWORD *)(a1 + 4360);
  v10 = *(unsigned int *)(a1 + 4336);
  v11 = *(_QWORD *)(a1 + 4224);
  v12 = *(int *)(*(_QWORD *)(a1 + 4176) + 4 * a2);
  v13 = *(int *)(*(_QWORD *)(a1 + 4200) + 4 * a2);
  v14 = *(_DWORD **)a5;
  v15 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v15 >= 1)
    bzero(*(void **)a5, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
  if ((int)v13 < 1)
    return 0;
  result = 0;
  v17 = v13 + v12;
  v18 = *(_QWORD *)(a1 + 1208);
  do
  {
    v19 = (int *)(v18 + 4 * *(int *)(v11 + 4 * v12));
    v20 = *v19;
    v21 = v19[1];
    if ((int)v20 < (int)v21)
    {
      v22 = *(_QWORD *)(a1 + 4104);
      do
      {
        v23 = *(int *)(v22 + 4 * v20);
        if ((int)v23 < a2 && (!v9 || *(_BYTE *)(a4 + v23)))
        {
          if ((int)v10 >= 1)
          {
            v24 = (int *)(a3 + 4 * (int)v23 * (int)v10);
            v25 = v10;
            v26 = v14;
            do
            {
              v27 = *v24++;
              *v26++ += v27;
              --v25;
            }
            while (v25);
          }
          result = (result + 1);
        }
        ++v20;
      }
      while (v20 < v21 && (int)result < 4);
    }
    ++v12;
  }
  while (v12 < v17 && (int)result < 4);
  if ((int)v10 >= 1 && (int)result >= 2)
  {
    for (i = 0; i < v10; ++i)
      v14[i] /= (int)result;
  }
  return result;
}

void sub_20C6F302C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int *v25;
  int *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  _BOOL4 v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  BOOL v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  int *v42;
  int v43;
  int v44;
  int v45;
  int *v46;
  int *v47;
  int *v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  BOOL v53;
  int v54;
  unint64_t v55;
  _BYTE *v56;
  void *v57;
  void *v58;
  _BYTE *v59;
  void *v60;
  void *v61;
  void *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  unsigned int v82;
  unint64_t v83;
  _DWORD v84[2];
  void *__p;
  _QWORD v86[2];
  void *v87[3];
  void *v88;
  _QWORD v89[2];
  __int16 v90;
  _WORD __b[3];
  _QWORD v92[44];
  uint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v70 = (_QWORD *)(a1 + 4056);
  v5 = *(unsigned int *)(a1 + 4332);
  v6 = *(int *)(a1 + 4336);
  v75 = *(_DWORD *)(a1 + 4360);
  memset_pattern16(__b, &unk_20CAF8CE0, 6uLL);
  v7 = 0;
  v93 = 0;
  memset(v92, 0, sizeof(v92));
  do
  {
    sub_20C6EC678((uint64_t)&v92[v7], v6);
    v7 += 15;
  }
  while (v7 != 45);
  v90 = 0x8000;
  sub_20C6F554C(&v88, v6);
  LODWORD(__p) = 0;
  sub_20C6E8A00(v87, v6, &__p);
  LODWORD(v83) = 0;
  sub_20C6E8A00(&__p, v6, &v83);
  if ((int)v5 >= 1)
  {
    v8 = 0;
    v69 = v6;
    v65 = v6;
    v66 = v5;
    v9 = 4 * v6;
    v74 = 4 * v6;
    v10 = (int *)a2;
    v67 = a2;
    while (v75 && !*(_BYTE *)(a3 + v8))
    {
LABEL_56:
      ++v8;
      v10 = (int *)((char *)v10 + v74);
      if (v8 == v5)
        goto LABEL_65;
    }
    v11 = *(unsigned int *)(*(_QWORD *)(a1 + 4128) + 4 * v8);
    if ((v11 & 0x80000000) == 0)
    {
      v12 = (unsigned int *)(*(_QWORD *)(a1 + 1256) + 12 * v11);
      v13 = *v12;
      LODWORD(v83) = *v12;
      v14 = v12[1];
      HIDWORD(v83) = v14;
      v15 = v12[2];
      v84[0] = v15;
      v16 = (_DWORD *)(*(_QWORD *)(a1 + 1280) + 12 * v11);
      v17 = v16[1];
      LODWORD(v81) = *v16;
      HIDWORD(v81) = v17;
      v71 = v17;
      v72 = v16[2];
      v73 = v81;
      v82 = v72;
      v80 = -1;
      v79 = -1;
      v78 = -1;
      v77 = -1;
      sub_20C6F0928((_QWORD *)a1, v11, v8, (unsigned int *)&v83, &v79);
      sub_20C6F0928((_QWORD *)a1, v11, v8, (unsigned int *)&v81, &v77);
      v19 = v80;
      v20 = v78;
      if ((v80 & 0x80000000) == 0 || v78 < 0)
      {
        v68 = __PAIR64__(v14, v13);
        v21 = v77;
        v22 = HIDWORD(v77);
      }
      else
      {
        v72 = v15;
        v73 = v13;
        v83 = v81;
        v15 = v82;
        v84[0] = v82;
        v21 = v79;
        v22 = HIDWORD(v79);
        v79 = v77;
        v20 = v80;
        v19 = v78;
        v80 = v78;
        v71 = v14;
        v68 = v81;
      }
      v23 = v79;
      v24 = HIDWORD(v79);
      if (v20 != -1
        && (!v75
         || *(_BYTE *)(a3 + (int)v79)
         && *(_BYTE *)(a3 + SHIDWORD(v79))
         && *(_BYTE *)(a3 + v19)
         && *(_BYTE *)(a3 + v21)
         && *(_BYTE *)(a3 + v22)
         && *(_BYTE *)(a3 + v20)))
      {
        v63 = v22;
        v64 = v21;
        v6 = v69;
        a2 = v67;
        sub_20C6E916C((int *)(v67 + 4 * (int)v79 * (int)v69), (int *)(v67 + 4 * HIDWORD(v79) * (int)v69), (int *)(v67 + 4 * v19 * (int)v69), v69, (int *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v68), (int *)(*(_QWORD *)(a1 + 1160) + 12 * SHIDWORD(v68)), (int *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v15), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v11), (_DWORD *)v87[0]);
        sub_20C6E916C((int *)(a2 + 4 * v64 * (int)v6), (int *)(a2 + 4 * v63 * (int)v6), (int *)(a2 + 4 * v20 * (int)v6), v6, (int *)(*(_QWORD *)(a1 + 1160) + 12 * v73), (int *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v71), (int *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v72), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v11), __p);
        v5 = v66;
        if ((int)v69 >= 1)
        {
          v25 = (int *)v87[0];
          v26 = (int *)__p;
          v27 = v65;
          do
          {
            v28 = *v26++;
            v29 = v28 + *v25;
            if (v29 < 0 != __OFADD__(v28, *v25))
              ++v29;
            *v25++ = v29 >> 1;
            --v27;
          }
          while (v27);
        }
        v30 = 2;
        goto LABEL_51;
      }
      if (v19 != -1 && (!v75 || *(_BYTE *)(a3 + (int)v79) && *(_BYTE *)(a3 + SHIDWORD(v79)) && *(_BYTE *)(a3 + v19)))
      {
        v6 = v69;
        a2 = v67;
        sub_20C6E916C((int *)(v67 + 4 * (int)v79 * (int)v69), (int *)(v67 + 4 * HIDWORD(v79) * (int)v69), (int *)(v67 + 4 * v19 * (int)v69), v69, (int *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v68), (int *)(*(_QWORD *)(a1 + 1160) + 12 * SHIDWORD(v68)), (int *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v15), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v11), (_DWORD *)v87[0]);
        v30 = 2;
        goto LABEL_50;
      }
      if (HIDWORD(v79) != -1 && (!v75 || *(_BYTE *)(a3 + (int)v79) && *(_BYTE *)(a3 + SHIDWORD(v79))))
      {
        v5 = v66;
        if ((_DWORD)v69 == 2)
        {
          v31 = sub_20C6E81C0((unsigned int *)a1, &v90);
          v32 = 2 * v24;
          a2 = v67;
          sub_20C6E964C((int *)(v67 + 8 * v23), (int *)(v67 + 4 * v32), (_DWORD *)(*(_QWORD *)(a1 + 1160) + 12 * (int)v68), (_DWORD *)(*(_QWORD *)(a1 + 1160) + 12 * SHIDWORD(v68)), (int *)(*(_QWORD *)(a1 + 1160) + 12 * v11), v31, (int *)v87[0]);
          v30 = 1;
          v6 = v69;
        }
        else if ((int)v69 < 1)
        {
          v30 = 1;
          a2 = v67;
          v6 = v69;
        }
        else
        {
          v46 = (int *)(v67 + 4 * (int)v79 * (int)v69);
          a2 = v67;
          v47 = (int *)(v67 + 4 * HIDWORD(v79) * (int)v69);
          v48 = (int *)v87[0];
          v49 = v65;
          v6 = v69;
          do
          {
            v51 = *v46++;
            v50 = v51;
            v52 = *v47++;
            v53 = __OFADD__(v52, v50);
            v54 = v52 + v50;
            if (v54 < 0 != v53)
              ++v54;
            *v48++ = v54 >> 1;
            --v49;
          }
          while (v49);
          v30 = 1;
        }
        goto LABEL_51;
      }
      v5 = v66;
      a2 = v67;
      v6 = v69;
    }
    v33 = sub_20C6F2EC4(a1, v8, a2, a3, (uint64_t)v87);
    v30 = 0;
    if (v33 || (int)v6 < 1)
    {
LABEL_51:
      sub_20C6EB41C((unsigned int *)a1, v18, (uint64_t)v87[0], v6, v70, (_BYTE *)(a1 + 4372), &v92[15 * v30], a2 + 4 * v8 * v6);
      if ((int)v6 >= 1)
      {
        v40 = (char *)v88 + 4;
        v41 = v65;
        v42 = v10;
        do
        {
          v44 = *v42++;
          v43 = v44;
          v45 = *((_DWORD *)v40 - 1);
          if (*(_DWORD *)&v40[4 * (((_BYTE)v45 - 1) & 3)] != v44)
          {
            *((_DWORD *)v40 - 1) = v45 + 1;
            *(_DWORD *)&v40[4 * (v45 & 3)] = v43;
          }
          v40 += 20;
          --v41;
        }
        while (v41);
      }
      goto LABEL_56;
    }
    v34 = 0;
    v35 = 4;
    do
    {
      v36 = sub_20C6E81C0((unsigned int *)a1, __b);
      v37 = v36;
      if (v36)
        v38 = 2;
      else
        v38 = 1;
      if (sub_20C6E81C0((unsigned int *)a1, &__b[v38]))
        v39 = 2;
      else
        v39 = 0;
      *(_DWORD *)((char *)v87[0] + v34) = *(_DWORD *)((char *)v88
                                                    + 4
                                                    * ((*(_DWORD *)((char *)v88 + v35 - 4)
                                                      + ~(v39 | v37)) & 3)
                                                    + v35);
      v35 += 20;
      v34 += 4;
    }
    while (v9 != v34);
    v30 = 0;
    v6 = v69;
    a2 = v67;
LABEL_50:
    v5 = v66;
    goto LABEL_51;
  }
LABEL_65:
  if (__p)
  {
    v86[0] = __p;
    operator delete(__p);
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  if (v88)
  {
    v89[0] = v88;
    operator delete(v88);
  }
  v55 = 90;
  do
  {
    v56 = &v92[v55 / 2];
    v57 = (void *)v89[v55 / 2];
    if (v57)
    {
      *((_QWORD *)v56 - 2) = v57;
      operator delete(v57);
    }
    v58 = (void *)*((_QWORD *)v56 - 6);
    if (v58)
    {
      v87[v55 / 2 + 2] = v58;
      operator delete(v58);
    }
    v59 = &v92[v55 / 2];
    v60 = (void *)v86[v55 / 2];
    if (v60)
    {
      *((_QWORD *)v59 - 8) = v60;
      operator delete(v60);
    }
    v61 = (void *)*((_QWORD *)v59 - 12);
    if (v61)
    {
      *(_QWORD *)&v84[v55] = v61;
      operator delete(v61);
    }
    v62 = (void *)*((_QWORD *)v56 - 15);
    if (v62)
    {
      *(_QWORD *)((char *)&v80 + v55 * 4) = v62;
      operator delete(v62);
    }
    v55 -= 30;
  }
  while (v55 * 4);
}

void sub_20C6F3758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t i;

  if (__p)
    operator delete(__p);
  if (a34)
    operator delete(a34);
  if (a37)
    operator delete(a37);
  for (i = 240; i != -120; i -= 120)
    sub_20C6EC7C0((uint64_t)(&a41 + i));
  _Unwind_Resume(a1);
}

void sub_20C6F37D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  int v21;
  int *v22;
  int *v23;
  int v24;
  int *v25;
  int v26;
  int *v27;
  int *v28;
  int *v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  BOOL v39;
  int v40;
  int *v41;
  int *v42;
  int *v43;
  _DWORD *v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int *v51;
  int *v52;
  int *v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL4 v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  _DWORD *v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  _DWORD *v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  unint64_t v81;
  char *v82;
  int v83;
  int v84;
  int v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  int *v89;
  int v90;
  int v91;
  int v92;
  unint64_t v93;
  char *v94;
  void *v95;
  void *v96;
  char *v97;
  void *v98;
  void *v99;
  void *v100;
  int v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  _DWORD v112[2];
  uint64_t v113;
  _DWORD v114[2];
  void *__p[3];
  void *v116[3];
  _WORD v117[3];
  _WORD __b[3];
  _OWORD v119[22];
  uint64_t v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v106 = (_QWORD *)(a1 + 4056);
  v108 = *(unsigned int *)(a1 + 4332);
  v6 = *(int *)(a1 + 4336);
  v110 = *(_DWORD *)(a1 + 4360);
  memset_pattern16(__b, &unk_20CAF8CE0, 6uLL);
  memset_pattern16(v117, &unk_20CAF8CE0, 6uLL);
  v7 = 0;
  v120 = 0;
  memset(v119, 0, sizeof(v119));
  do
  {
    sub_20C6EC678((uint64_t)v119 + v7, v6);
    v7 += 120;
  }
  while (v7 != 360);
  sub_20C6F554C(v116, v6);
  LODWORD(v113) = 0;
  sub_20C6E8A00(__p, v6, &v113);
  if ((int)v108 >= 1)
  {
    v8 = 0;
    v105 = a2;
    v103 = v6;
    v104 = v6;
    v9 = 4 * v6;
    v107 = 4 * v6;
    v10 = (int *)a2;
    v109 = a3;
    while (v110 && !*(_BYTE *)(a3 + v8))
    {
LABEL_87:
      ++v8;
      v10 = (int *)((char *)v10 + v107);
      if (v8 == v108)
        goto LABEL_90;
    }
    v11 = *(unsigned int *)(*(_QWORD *)(a1 + 4128) + 4 * v8);
    if ((v11 & 0x80000000) == 0)
    {
      v114[0] = -1;
      v113 = -1;
      v112[0] = -1;
      v111 = -1;
      sub_20C6F0928((_QWORD *)a1, v11, v8, (unsigned int *)(*(_QWORD *)(a1 + 1256) + 12 * v11), &v113);
      sub_20C6F0928((_QWORD *)a1, v11, v8, (unsigned int *)(*(_QWORD *)(a1 + 1280) + 12 * v11), &v111);
      v13 = v114[0];
      if ((v114[0] & 0x80000000) == 0 || (v112[0] & 0x80000000) != 0)
      {
        v15 = v114[0];
        v13 = v112[0];
      }
      else
      {
        v14 = v113;
        v113 = v111;
        v15 = v112[0];
        v114[0] = v112[0];
        v111 = v14;
      }
      v17 = v113;
      v16 = HIDWORD(v113);
      if (v13 != -1
        && (!v110
         || *(_BYTE *)(v109 + (int)v113)
         && *(_BYTE *)(v109 + SHIDWORD(v113))
         && *(_BYTE *)(v109 + v15)
         && *(_BYTE *)(v109 + (int)v111)
         && *(_BYTE *)(v109 + SHIDWORD(v111))
         && *(_BYTE *)(v109 + v13)))
      {
        v101 = v111;
        v102 = HIDWORD(v111);
        v18 = sub_20C6E81C0((unsigned int *)a1, v117);
        v19 = 2;
        if (!v18)
          v19 = 1;
        if (sub_20C6E81C0((unsigned int *)a1, &v117[v19]))
          v20 = 2;
        else
          v20 = 0;
        v21 = v17 * v104;
        a2 = v105;
        v22 = (int *)(v105 + 4 * v21);
        v23 = (int *)(v105 + 4 * v16 * (int)v104);
        v24 = v15 * v104;
        v6 = v104;
        v25 = (int *)(v105 + 4 * v24);
        v26 = v20 | v18;
        if (v20 | v18)
        {
          v27 = (int *)(v105 + 4 * v101 * (int)v104);
          v28 = (int *)(v105 + 4 * v102 * (int)v104);
          v29 = (int *)(v105 + 4 * v13 * (int)v104);
          if (v26 == 1)
          {
            a3 = v109;
            if ((int)v104 >= 1)
            {
              v74 = __p[0];
              v75 = v103;
              do
              {
                v77 = *v27++;
                v76 = v77;
                v78 = *v28++;
                v79 = v78 + v76;
                v80 = *v29++;
                *v74++ = v79 - v80;
                --v75;
              }
              while (v75);
            }
          }
          else
          {
            a3 = v109;
            if (v26 == 2)
            {
              if ((int)v104 >= 1)
              {
                v30 = __p[0];
                v31 = v103;
                do
                {
                  v33 = *v23++;
                  v32 = v33;
                  v34 = *v28++;
                  v35 = v34 + v32;
                  v37 = *v22++;
                  v36 = v37;
                  v38 = *v27++;
                  v39 = __OFADD__(v38, v36);
                  v40 = v38 + v36;
                  if (v40 < 0 != v39)
                    ++v40;
                  *v30++ = v35 - (v40 >> 1);
                  --v31;
                }
                while (v31);
              }
            }
            else if ((int)v104 >= 1)
            {
              v81 = 0;
              v82 = (char *)__p[0];
              do
              {
                v83 = v22[v81 / 4];
                v84 = v27[v81 / 4];
                v39 = __OFADD__(v84, v83);
                v85 = v84 + v83;
                if (v85 < 0 != v39)
                  ++v85;
                v12 = v25[v81 / 4];
                v86 = 1431655766 * ((v85 >> 1) - ((int)v12 + v29[v81 / 4]) + 2 * (v28[v81 / 4] + v23[v81 / 4]));
                *(_DWORD *)&v82[v81] = HIDWORD(v86) + (v86 >> 63);
                v81 += 4;
              }
              while (v9 != v81);
            }
          }
          goto LABEL_81;
        }
        if ((int)v104 >= 1)
        {
          v67 = __p[0];
          v68 = v103;
          a3 = v109;
          do
          {
            v70 = *v22++;
            v69 = v70;
            v71 = *v23++;
            v72 = v71 + v69;
            v73 = *v25++;
            *v67++ = v72 - v73;
            --v68;
          }
          while (v68);
LABEL_81:
          v59 = 2;
          goto LABEL_82;
        }
        v59 = 2;
        a3 = v109;
LABEL_82:
        sub_20C6EB41C((unsigned int *)a1, v12, (uint64_t)__p[0], v6, v106, (_BYTE *)(a1 + 4372), (_QWORD *)v119 + 15 * v59, a2 + 4 * v8 * v6);
        if ((int)v6 >= 1)
        {
          v87 = (char *)v116[0] + 4;
          v88 = v103;
          v89 = v10;
          do
          {
            v91 = *v89++;
            v90 = v91;
            v92 = *((_DWORD *)v87 - 1);
            if (*(_DWORD *)&v87[4 * (((_BYTE)v92 - 1) & 3)] != v91)
            {
              *((_DWORD *)v87 - 1) = v92 + 1;
              *(_DWORD *)&v87[4 * (v92 & 3)] = v90;
            }
            v87 += 20;
            --v88;
          }
          while (v88);
        }
        goto LABEL_87;
      }
      a3 = v109;
      if (v15 != -1
        && (!v110 || *(_BYTE *)(v109 + (int)v113) && *(_BYTE *)(v109 + SHIDWORD(v113)) && *(_BYTE *)(v109 + v15)))
      {
        if ((int)v104 < 1)
        {
          v59 = 2;
          a2 = v105;
          v6 = v104;
          goto LABEL_82;
        }
        a2 = v105;
        v41 = (int *)(v105 + 4 * (int)v113 * (int)v104);
        v42 = (int *)(v105 + 4 * HIDWORD(v113) * (int)v104);
        v43 = (int *)(v105 + 4 * v15 * (int)v104);
        v44 = __p[0];
        v45 = v103;
        v6 = v104;
        do
        {
          v47 = *v41++;
          v46 = v47;
          v48 = *v42++;
          v49 = v48 + v46;
          v50 = *v43++;
          *v44++ = v49 - v50;
          --v45;
        }
        while (v45);
        goto LABEL_81;
      }
      if (HIDWORD(v113) != -1 && (!v110 || *(_BYTE *)(v109 + (int)v113) && *(_BYTE *)(v109 + SHIDWORD(v113))))
      {
        v6 = v104;
        if ((int)v104 >= 1)
        {
          a2 = v105;
          v51 = (int *)(v105 + 4 * (int)v113 * (int)v104);
          v52 = (int *)(v105 + 4 * HIDWORD(v113) * (int)v104);
          v53 = (int *)__p[0];
          v54 = v103;
          do
          {
            v56 = *v51++;
            v55 = v56;
            v57 = *v52++;
            v39 = __OFADD__(v57, v55);
            v58 = v57 + v55;
            if (v58 < 0 != v39)
              ++v58;
            *v53++ = v58 >> 1;
            --v54;
          }
          while (v54);
          v59 = 1;
          goto LABEL_82;
        }
        v59 = 1;
        goto LABEL_65;
      }
      v6 = v104;
      a2 = v105;
    }
    v60 = sub_20C6F2EC4(a1, v8, a2, a3, (uint64_t)__p);
    v59 = 0;
    if (v60 || (int)v6 < 1)
      goto LABEL_82;
    v61 = 0;
    v62 = 4;
    do
    {
      v63 = sub_20C6E81C0((unsigned int *)a1, __b);
      v64 = v63;
      if (v63)
        v65 = 2;
      else
        v65 = 1;
      if (sub_20C6E81C0((unsigned int *)a1, &__b[v65]))
        v66 = 2;
      else
        v66 = 0;
      *(_DWORD *)((char *)__p[0] + v61) = *(_DWORD *)((char *)v116[0]
                                                    + 4
                                                    * ((*(_DWORD *)((char *)v116[0] + v62 - 4)
                                                      + ~(v66 | v64)) & 3)
                                                    + v62);
      v62 += 20;
      v61 += 4;
    }
    while (v9 != v61);
    v59 = 0;
    v6 = v104;
    a3 = v109;
LABEL_65:
    a2 = v105;
    goto LABEL_82;
  }
LABEL_90:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v116[0])
  {
    v116[1] = v116[0];
    operator delete(v116[0]);
  }
  v93 = 90;
  do
  {
    v94 = (char *)v119 + v93 * 4;
    v95 = v116[v93 / 2 + 2];
    if (v95)
    {
      *((_QWORD *)v94 - 2) = v95;
      operator delete(v95);
    }
    v96 = (void *)*((_QWORD *)v94 - 6);
    if (v96)
    {
      v116[v93 / 2] = v96;
      operator delete(v96);
    }
    v97 = (char *)v119 + v93 * 4;
    v98 = *(void **)&v114[v93];
    if (v98)
    {
      *((_QWORD *)v97 - 8) = v98;
      operator delete(v98);
    }
    v99 = (void *)*((_QWORD *)v97 - 12);
    if (v99)
    {
      *(_QWORD *)&v112[v93] = v99;
      operator delete(v99);
    }
    v100 = (void *)*((_QWORD *)v94 - 15);
    if (v100)
    {
      *(_QWORD *)((char *)&v119[-7] + v93 * 4) = v100;
      operator delete(v100);
    }
    v93 -= 30;
  }
  while (v93 * 4);
}

void sub_20C6F3EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t i;

  if (__p)
    operator delete(__p);
  for (i = 240; i != -120; i -= 120)
    sub_20C6EC7C0((uint64_t)(&a33 + i));
  _Unwind_Resume(a1);
}

void sub_20C6F3F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int *v17;
  int *v18;
  int v19;
  int *v20;
  _DWORD *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int *v28;
  int *v29;
  int *v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  BOOL v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  int *v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  char *v51;
  void *v52;
  void *v53;
  char *v54;
  void *v55;
  void *v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  void *__p[3];
  void *v69;
  _QWORD v70[2];
  _WORD __b[3];
  _OWORD v72[22];
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v61 = (_QWORD *)(a1 + 4056);
  v64 = *(unsigned int *)(a1 + 4332);
  v6 = *(int *)(a1 + 4336);
  v65 = *(_DWORD *)(a1 + 4360);
  memset_pattern16(__b, &unk_20CAF8CE0, 6uLL);
  v7 = 0;
  v73 = 0;
  memset(v72, 0, sizeof(v72));
  do
  {
    sub_20C6EC678((uint64_t)v72 + v7, v6);
    v7 += 120;
  }
  while (v7 != 360);
  sub_20C6F554C(&v69, v6);
  LODWORD(v66) = 0;
  sub_20C6E8A00(__p, v6, &v66);
  if ((int)v64 >= 1)
  {
    v8 = 0;
    v60 = a2;
    v58 = v6;
    v59 = v6;
    v9 = 4 * v6;
    v62 = a3;
    v63 = 4 * v6;
    v10 = (int *)a2;
    while (v65 && !*(_BYTE *)(a3 + v8))
    {
LABEL_50:
      ++v8;
      v10 = (int *)((char *)v10 + v63);
      if (v8 == v64)
        goto LABEL_51;
    }
    v11 = *(_DWORD *)(*(_QWORD *)(a1 + 4128) + 4 * v8);
    if ((v11 & 0x80000000) != 0)
    {
      a3 = v62;
      goto LABEL_34;
    }
    v67 = -1;
    v66 = -1;
    sub_20C6F0928((_QWORD *)a1, v11, v8, (unsigned int *)(*(_QWORD *)(a1 + 1256) + 12 * v11), &v66);
    v14 = v66;
    v13 = HIDWORD(v66);
    v15 = v67;
    if (v67 < 0)
    {
      sub_20C6F0928((_QWORD *)a1, v11, v8, (unsigned int *)(*(_QWORD *)(a1 + 1280) + 12 * v11), &v66);
      if (v67 < 0)
      {
        a3 = v62;
        if (v15 == -1)
        {
LABEL_23:
          if (v13 != -1 && (!v65 || *(_BYTE *)(a3 + v14) && *(_BYTE *)(a3 + v13)))
          {
            a2 = v60;
            if ((int)v6 >= 1)
            {
              v28 = (int *)(v60 + 4 * v14 * (int)v6);
              v29 = (int *)(v60 + 4 * v13 * (int)v6);
              v30 = (int *)__p[0];
              v31 = v59;
              do
              {
                v33 = *v28++;
                v32 = v33;
                v34 = *v29++;
                v35 = __OFADD__(v34, v32);
                v36 = v34 + v32;
                if (v36 < 0 != v35)
                  ++v36;
                *v30++ = v36 >> 1;
                --v31;
              }
              while (v31);
            }
            v27 = 1;
            goto LABEL_45;
          }
          a2 = v60;
LABEL_34:
          v37 = sub_20C6F2EC4(a1, v8, a2, a3, (uint64_t)__p);
          v27 = 0;
          if (!v37 && (int)v6 >= 1)
          {
            v38 = 0;
            v39 = 4;
            do
            {
              v40 = sub_20C6E81C0((unsigned int *)a1, __b);
              v41 = v40;
              if (v40)
                v42 = 2;
              else
                v42 = 1;
              if (sub_20C6E81C0((unsigned int *)a1, &__b[v42]))
                v43 = 2;
              else
                v43 = 0;
              *(_DWORD *)((char *)__p[0] + v38) = *(_DWORD *)((char *)v69
                                                            + 4
                                                            * ((*(_DWORD *)((char *)v69 + v39 - 4)
                                                              + ~(v43 | v41)) & 3)
                                                            + v39);
              v39 += 20;
              v38 += 4;
            }
            while (v9 != v38);
            v27 = 0;
            a3 = v62;
            a2 = v60;
            v6 = v58;
          }
          goto LABEL_45;
        }
LABEL_12:
        if (!v65 || *(_BYTE *)(a3 + v14) && *(_BYTE *)(a3 + v13) && *(_BYTE *)(a3 + v15))
        {
          if ((int)v6 < 1)
          {
            v27 = 2;
            a2 = v60;
          }
          else
          {
            v16 = v59;
            v17 = (int *)(v60 + 4 * v14 * (int)v6);
            v18 = (int *)(v60 + 4 * v13 * (int)v6);
            v19 = v15 * v6;
            a2 = v60;
            v20 = (int *)(v60 + 4 * v19);
            v21 = __p[0];
            do
            {
              v23 = *v17++;
              v22 = v23;
              v24 = *v18++;
              v25 = v24 + v22;
              v26 = *v20++;
              *v21++ = v25 - v26;
              --v16;
            }
            while (v16);
            v27 = 2;
          }
LABEL_45:
          sub_20C6EB41C((unsigned int *)a1, v12, (uint64_t)__p[0], v6, v61, (_BYTE *)(a1 + 4372), (_QWORD *)v72 + 15 * v27, a2 + 4 * v8 * v6);
          if ((int)v6 >= 1)
          {
            v44 = (char *)v69 + 4;
            v45 = v59;
            v46 = v10;
            do
            {
              v48 = *v46++;
              v47 = v48;
              v49 = *((_DWORD *)v44 - 1);
              if (*(_DWORD *)&v44[4 * (((_BYTE)v49 - 1) & 3)] != v48)
              {
                *((_DWORD *)v44 - 1) = v49 + 1;
                *(_DWORD *)&v44[4 * (v49 & 3)] = v47;
              }
              v44 += 20;
              --v45;
            }
            while (v45);
          }
          goto LABEL_50;
        }
        goto LABEL_23;
      }
      v14 = v66;
      v13 = HIDWORD(v66);
      v15 = v67;
    }
    a3 = v62;
    goto LABEL_12;
  }
LABEL_51:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v69)
  {
    v70[0] = v69;
    operator delete(v69);
  }
  v50 = 360;
  do
  {
    v51 = (char *)v72 + v50;
    v52 = (void *)v70[v50 / 8];
    if (v52)
    {
      *((_QWORD *)v51 - 2) = v52;
      operator delete(v52);
    }
    v53 = (void *)*((_QWORD *)v51 - 6);
    if (v53)
    {
      __p[v50 / 8 + 2] = v53;
      operator delete(v53);
    }
    v54 = (char *)v72 + v50;
    v55 = *(void **)((char *)&v66 + v50);
    if (v55)
    {
      *((_QWORD *)v54 - 8) = v55;
      operator delete(v55);
    }
    v56 = (void *)*((_QWORD *)v54 - 12);
    if (v56)
    {
      *(_QWORD *)((char *)&v72[-5] + v50 - 8) = v56;
      operator delete(v56);
    }
    v57 = (void *)*((_QWORD *)v51 - 15);
    if (v57)
    {
      *(_QWORD *)((char *)&v72[-7] + v50) = v57;
      operator delete(v57);
    }
    v50 -= 120;
  }
  while (v50);
}

void sub_20C6F4408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t i;

  if (__p)
    operator delete(__p);
  for (i = 240; i != -120; i -= 120)
    sub_20C6EC7C0((uint64_t)(&a27 + i));
  _Unwind_Resume(a1);
}

void sub_20C6F4464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  int *v14;
  int *v15;
  int *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  BOOL v28;
  uint64_t v29;
  char v30;
  char *v31;
  uint64_t v32;
  int *v33;
  int v34;
  int v35;
  int v36;
  uint64_t i;
  _QWORD *v38;
  void *v39;
  void *v40;
  char *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v53;
  int v54;
  void *__p[3];
  void *v56[3];
  _WORD __b[3];
  _OWORD v58[15];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v46 = (_QWORD *)(a1 + 4056);
  v49 = *(unsigned int *)(a1 + 4332);
  v4 = *(int *)(a1 + 4336);
  v50 = *(_DWORD *)(a1 + 4360);
  memset_pattern16(__b, &unk_20CAF8CE0, 6uLL);
  v5 = 0;
  memset(v58, 0, sizeof(v58));
  do
  {
    sub_20C6EC678((uint64_t)v58 + v5, v4);
    v5 += 120;
  }
  while (v5 != 240);
  sub_20C6F554C(v56, v4);
  LODWORD(v53) = 0;
  sub_20C6E8A00(__p, v4, &v53);
  if ((int)v49 >= 1)
  {
    v6 = 0;
    v45 = v4;
    v7 = 4 * v4;
    v47 = 4 * v4;
    v48 = v4;
    v8 = (int *)a2;
    while (v50 && !*(_BYTE *)(a3 + v6))
    {
LABEL_39:
      ++v6;
      v8 = (int *)((char *)v8 + v47);
      if (v6 == v49)
        goto LABEL_40;
    }
    v9 = *(_DWORD *)(*(_QWORD *)(a1 + 4128) + 4 * v6);
    if ((v9 & 0x80000000) != 0)
    {
      v13 = v48;
      goto LABEL_23;
    }
    v54 = -1;
    v53 = -1;
    sub_20C6F0928((_QWORD *)a1, v9, v6, (unsigned int *)(*(_QWORD *)(a1 + 1256) + 12 * v9), &v53);
    v11 = v53;
    v12 = HIDWORD(v53);
    if (v53 < 0)
    {
      sub_20C6F0928((_QWORD *)a1, v9, v6, (unsigned int *)(*(_QWORD *)(a1 + 1280) + 12 * v9), &v53);
      if (v53 < 0)
      {
        v13 = v48;
        if (v12 == -1)
          goto LABEL_23;
        goto LABEL_12;
      }
      v11 = v53;
      v12 = HIDWORD(v53);
    }
    v13 = v48;
LABEL_12:
    if (!v50 || *(_BYTE *)(a3 + v11) && *(_BYTE *)(a3 + v12))
    {
      if ((int)v13 >= 1)
      {
        v14 = (int *)(a2 + 4 * v11 * (int)v13);
        v15 = (int *)(a2 + 4 * v12 * (int)v13);
        v16 = (int *)__p[0];
        v17 = v45;
        do
        {
          v19 = *v14++;
          v18 = v19;
          v20 = *v15++;
          v21 = __OFADD__(v20, v18);
          v22 = v20 + v18;
          if (v22 < 0 != v21)
            ++v22;
          *v16++ = v22 >> 1;
          --v17;
        }
        while (v17);
      }
      v23 = 1;
LABEL_34:
      sub_20C6EB41C((unsigned int *)a1, v10, (uint64_t)__p[0], v13, v46, (_BYTE *)(a1 + 4372), (_QWORD *)v58 + 15 * v23, a2 + 4 * v6 * v13);
      if ((int)v13 >= 1)
      {
        v31 = (char *)v56[0] + 4;
        v32 = v45;
        v33 = v8;
        do
        {
          v35 = *v33++;
          v34 = v35;
          v36 = *((_DWORD *)v31 - 1);
          if (*(_DWORD *)&v31[4 * (((_BYTE)v36 - 1) & 3)] != v35)
          {
            *((_DWORD *)v31 - 1) = v36 + 1;
            *(_DWORD *)&v31[4 * (v36 & 3)] = v34;
          }
          v31 += 20;
          --v32;
        }
        while (v32);
      }
      goto LABEL_39;
    }
LABEL_23:
    v24 = sub_20C6F2EC4(a1, v6, a2, a3, (uint64_t)__p);
    v23 = 0;
    if (!v24 && (int)v13 >= 1)
    {
      v25 = 0;
      v26 = 4;
      do
      {
        v27 = sub_20C6E81C0((unsigned int *)a1, __b);
        v28 = v27;
        if (v27)
          v29 = 2;
        else
          v29 = 1;
        if (sub_20C6E81C0((unsigned int *)a1, &__b[v29]))
          v30 = 2;
        else
          v30 = 0;
        *(_DWORD *)((char *)__p[0] + v25) = *(_DWORD *)((char *)v56[0]
                                                      + 4
                                                      * ((*(_DWORD *)((char *)v56[0] + v26 - 4)
                                                        + ~(v30 | v28)) & 3)
                                                      + v26);
        v26 += 20;
        v25 += 4;
      }
      while (v7 != v25);
      v23 = 0;
      v13 = v48;
    }
    goto LABEL_34;
  }
LABEL_40:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v56[0])
  {
    v56[1] = v56[0];
    operator delete(v56[0]);
  }
  for (i = 0; i != -240; i -= 120)
  {
    v38 = (_QWORD *)((char *)v58 + i);
    v39 = *(void **)((char *)&v58[13] + i + 8);
    if (v39)
    {
      v38[28] = v39;
      operator delete(v39);
    }
    v40 = (void *)v38[24];
    if (v40)
    {
      *(_QWORD *)((char *)&v58[12] + i + 8) = v40;
      operator delete(v40);
    }
    v41 = (char *)v58 + i;
    v42 = *(void **)((char *)&v58[10] + i + 8);
    if (v42)
    {
      *((_QWORD *)v41 + 22) = v42;
      operator delete(v42);
    }
    v43 = (void *)*((_QWORD *)v41 + 18);
    if (v43)
    {
      *(_QWORD *)((char *)&v58[9] + i + 8) = v43;
      operator delete(v43);
    }
    v44 = (void *)v38[15];
    if (v44)
    {
      *(_QWORD *)((char *)&v58[8] + i) = v44;
      operator delete(v44);
    }
  }
}

void sub_20C6F4884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t i;

  if (__p)
    operator delete(__p);
  for (i = 120; i != -120; i -= 120)
    sub_20C6EC7C0((uint64_t)(&a27 + i));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C6F48E0(_QWORD *a1)
{
  void *v2;

  v2 = operator new(0x1128uLL);
  sub_20C6F5258((uint64_t)v2);
  *a1 = v2;
  return a1;
}

void sub_20C6F4914(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD **sub_20C6F492C(_QWORD **a1)
{
  sub_20C6F55D0(a1, 0);
  return a1;
}

double sub_20C6F4954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;

  v9 = 0;
  v7 = 0u;
  v8 = 0u;
  if (sub_20C6E9F20(a1, a2, (uint64_t)&v7, (int16x8_t)0))
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      result = *(double *)&v7;
      v6 = v8;
      *(_OWORD *)a3 = v7;
      *(_OWORD *)(a3 + 16) = v6;
      *(_BYTE *)(a3 + 32) = v9;
    }
  }
  return result;
}

double sub_20C6F49B0(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;

  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  if (sub_20C6EB13C(a1, a2, (uint64_t)&v7))
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      v6 = v8;
      *a3 = v7;
      a3[1] = v6;
      result = *(double *)&v9;
      a3[2] = v9;
    }
  }
  return result;
}

uint64_t sub_20C6F4A10(_DWORD *a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[1] = *MEMORY[0x24BDAC8D0];
  v3[0] = 0xEEB6CC7FFAA28E71;
  return sub_20C6E7D54(a1, a2, v3, 2);
}

uint64_t sub_20C6F4A6C(uint64_t *a1, unint64_t a2, unint64_t a3, _QWORD *a4, int32x2_t *a5, _DWORD *a6, void *a7, int *a8)
{
  return sub_20C6E9B10(*a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_20C6F4A74(uint64_t *a1, unint64_t a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  return sub_20C6EAE3C(*a1, a2, a3, a4, a5, 0);
}

uint64_t sub_20C6F4A80(uint64_t *a1, unint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, void *a6)
{
  return sub_20C6EFF5C(*a1, a2, a3, a4, a5, 0, a6);
}

void sub_20C6F4A90(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_20C6F4C38((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 12 * a2;
  }
}

void sub_20C6F4ACC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = a1 + 8;
  v3 = a1 + 1544;
  v4 = a2;
  do
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    sub_20C6F4D94(&__p, *(const void **)v2, *(_QWORD *)(v2 + 8), (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 3);
    sub_20BE8BBC4(&__p, v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
    v2 += 24;
  }
  while (v2 != v3);
}

void sub_20C6F4B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C6F4B60(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    sub_20C6F4E0C((void **)a1, a2 - v2);
  }
}

void sub_20C6F4B90(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      sub_20BDDF694();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

void sub_20C6F4C38(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-v7] >> 2) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 12 * a2;
      do
      {
        *(_QWORD *)v7 = 0xFFFFFFFF00000000;
        *(_DWORD *)(v7 + 8) = -1;
        v7 += 12;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = (char *)v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)*a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555)
      sub_20BDDF694();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_20C152228(v4, v11);
    else
      v12 = 0;
    v14 = &v12[12 * v8];
    v15 = &v14[12 * a2];
    v16 = v14;
    do
    {
      *(_QWORD *)v16 = 0xFFFFFFFF00000000;
      *((_DWORD *)v16 + 2) = -1;
      v16 += 12;
    }
    while (v16 != v15);
    v17 = &v12[12 * v11];
    v19 = *a1;
    v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_QWORD *)(v18 - 12);
        v18 -= 12;
        v21 = *((_DWORD *)v18 + 2);
        *(_QWORD *)(v14 - 12) = v20;
        v14 -= 12;
        *((_DWORD *)v14 + 2) = v21;
      }
      while (v18 != v19);
      v18 = *a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
}

_QWORD *sub_20C6F4D94(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BDDF654(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20C6F4DF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C6F4E0C(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_20BDDF694();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_20BDEA2F0(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t sub_20C6F4F18(uint64_t a1, int a2)
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _BOOL4 v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!sub_20C6E81C0((unsigned int *)a1, (_WORD *)(a1 + 3496)))
    return sub_20C6E87E0((unsigned int *)a1, 0, (_WORD *)(a1 + 3530), (_WORD *)(a1 + 3532)) + a2;
  v4 = a1 + 3536;
  v5 = sub_20C6E81C0((unsigned int *)a1, (_WORD *)(a1 + 3536));
  if (v5)
    v6 = 4;
  else
    v6 = 2;
  if (sub_20C6E81C0((unsigned int *)a1, (_WORD *)(v4 + v6)))
    v7 = 2;
  else
    v7 = 0;
  v8 = v7 | v5;
  if (sub_20C6E81C0((unsigned int *)a1, (_WORD *)(v4 + 2 * (v8 + 3))))
    v9 = 4;
  else
    v9 = 0;
  v10 = v8 | v9;
  if (sub_20C6E81C0((unsigned int *)a1, (_WORD *)(v4 + 2 * (v10 + 7))))
    v11 = 8;
  else
    v11 = 0;
  v12 = v10 | v11;
  if (sub_20C6E81C0((unsigned int *)a1, (_WORD *)(v4 + 2 * (v12 + 15))))
    v13 = 16;
  else
    v13 = 0;
  v14 = v12 | v13;
  if (sub_20C6E81C0((unsigned int *)a1, (_WORD *)(v4 + 2 * ((v12 | v13) + 31))))
    v15 = 32;
  else
    v15 = 0;
  v16 = sub_20C6E81C0((unsigned int *)a1, (_WORD *)(a1 + 3664));
  if (v16)
    v17 = 4;
  else
    v17 = 2;
  if (sub_20C6E81C0((unsigned int *)a1, (_WORD *)(a1 + 3664 + v17)))
    v18 = 2;
  else
    v18 = 0;
  v19 = v18 | v16;
  if (v19 != 3)
    goto LABEL_29;
  v20 = sub_20C6E82B0((unsigned int *)a1, 0, (_WORD *)(a1 + 3670));
  if (v20 >= -3)
  {
    v19 = v20 + 3;
LABEL_29:
    v21 = a1 + 24 * (v14 | v15);
    v22 = *(_QWORD *)(v21 + 1512);
    v23 = *(_QWORD *)(v21 + 1504);
    if (v19 < (int)((unint64_t)(v22 - v23) >> 3))
    {
      v24 = *(_QWORD *)(v23 + 8 * v19);
      if (v24)
        return -1431655765 * ((unint64_t)(v24 - *(_QWORD *)(a1 + 1472)) >> 2);
    }
  }
  *(_DWORD *)(a1 + 4384) = 3;
  return 0xFFFFFFFFLL;
}

_QWORD *sub_20C6F50D8(_QWORD *result, int a2, unsigned int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t i;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  _DWORD *v16;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  _DWORD *v22;

  v4 = (a4 - 2);
  if (a3 > 2)
  {
    if (a3 == 3 || a3 == 5)
    {
      if (a4 >= 2)
      {
        v12 = (int *)(result[181] + 16 * a2);
        v13 = v12[3];
        v14 = *v12;
        do
        {
          v15 = v14;
          v14 = *(_DWORD *)(result[166] + 4 * v4);
          if (*(_BYTE *)(result[169] + v4))
          {
            v16 = (_DWORD *)(result[157] + 12 * v14);
            *v16 = a2;
            v16[1] = v15;
            v16[2] = v13;
          }
          v13 = v15;
        }
        while (v4-- > 0);
      }
    }
    else if (a4 >= 1)
    {
      v18 = 0;
      v19 = -1;
      v20 = -1;
      do
      {
        v21 = v19;
        v19 = *(_DWORD *)(result[166] + 4 * v18);
        if (*(_BYTE *)(result[169] + v18))
        {
          v22 = (_DWORD *)(result[157] + 12 * v19);
          *v22 = a2;
          v22[1] = v21;
          v22[2] = v20;
        }
        ++v18;
        v20 = v21;
      }
      while (a4 != v18);
    }
  }
  else
  {
    v5 = result[181];
    if (a4 >= 2)
    {
      v6 = *(_DWORD *)(v5 + 16 * a2 + 4);
      v7 = *(_DWORD *)(v5 + 16 * a2 + 8);
      for (i = 1; i != a4; ++i)
      {
        v9 = *(_DWORD *)(result[166] + 4 * i);
        if (*(_BYTE *)(result[169] + i))
        {
          v10 = (_DWORD *)(result[157] + 12 * v9);
          *v10 = a2;
          v10[1] = v6;
          v10[2] = v7;
        }
        v7 = v6;
        v6 = v9;
      }
    }
    if (!a3)
    {
      if (*(_BYTE *)(result[169] + (int)v4))
      {
        v11 = (_DWORD *)(result[160] + 12 * *(int *)(result[166] + 4 * (int)v4));
        *v11 = a2;
        v11[1] = *(_DWORD *)(v5 + 16 * a2);
        v11[2] = *(_DWORD *)(v5 + 16 * a2 + 12);
      }
    }
  }
  return result;
}

uint64_t sub_20C6F5258(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 1140) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_BYTE *)(a1 + 1136) = 0;
  *(_BYTE *)(a1 + 1144) = 4;
  *(_QWORD *)(a1 + 1148) = 0x101010100000002;
  *(_BYTE *)(a1 + 1156) = 1;
  *(_DWORD *)(a1 + 1496) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_DWORD *)(a1 + 1500) = -1;
  bzero((void *)(a1 + 1504), 0x700uLL);
  memset_pattern16((void *)(a1 + 3296), &unk_20CAF8CE0, 0xAuLL);
  *(_WORD *)(a1 + 3306) = 0x8000;
  memset_pattern16((void *)(a1 + 3308), &unk_20CAF8CE0, 0x60uLL);
  *(_WORD *)(a1 + 3404) = 0x8000;
  memset_pattern16((void *)(a1 + 3406), &unk_20CAF8CE0, 6uLL);
  *(_WORD *)(a1 + 3412) = 0x8000;
  memset_pattern16((void *)(a1 + 3414), &unk_20CAF8CE0, 0x50uLL);
  *(_DWORD *)(a1 + 3494) = -2147450880;
  memset_pattern16((void *)(a1 + 3498), &unk_20CAF8CE0, 0x20uLL);
  *(_DWORD *)(a1 + 3530) = -2147450880;
  *(_WORD *)(a1 + 3534) = 0x8000;
  memset_pattern16((void *)(a1 + 3536), &unk_20CAF8CE0, 0x80uLL);
  memset_pattern16((void *)(a1 + 3664), &unk_20CAF8CE0, 6uLL);
  *(_WORD *)(a1 + 3670) = 0x8000;
  memset_pattern16((void *)(a1 + 3672), &unk_20CAF8CE0, 6uLL);
  *(_OWORD *)(a1 + 4028) = 0u;
  *(_OWORD *)(a1 + 4016) = 0u;
  *(_OWORD *)(a1 + 4000) = 0u;
  *(_OWORD *)(a1 + 3984) = 0u;
  *(_OWORD *)(a1 + 3968) = 0u;
  *(_OWORD *)(a1 + 3952) = 0u;
  *(_OWORD *)(a1 + 3936) = 0u;
  *(_OWORD *)(a1 + 3920) = 0u;
  *(_OWORD *)(a1 + 3904) = 0u;
  *(_OWORD *)(a1 + 3888) = 0u;
  *(_OWORD *)(a1 + 3872) = 0u;
  *(_OWORD *)(a1 + 3856) = 0u;
  *(_OWORD *)(a1 + 3840) = 0u;
  *(_OWORD *)(a1 + 3824) = 0u;
  *(_OWORD *)(a1 + 3808) = 0u;
  *(_OWORD *)(a1 + 3792) = 0u;
  *(_OWORD *)(a1 + 3776) = 0u;
  *(_OWORD *)(a1 + 3760) = 0u;
  *(_OWORD *)(a1 + 3744) = 0u;
  *(_OWORD *)(a1 + 3728) = 0u;
  *(_OWORD *)(a1 + 3712) = 0u;
  *(_OWORD *)(a1 + 3696) = 0u;
  *(_OWORD *)(a1 + 3680) = 0u;
  *(_BYTE *)(a1 + 4044) = 4;
  *(_DWORD *)(a1 + 4048) = 2;
  *(_OWORD *)(a1 + 4356) = 0u;
  *(_OWORD *)(a1 + 4056) = 0u;
  *(_OWORD *)(a1 + 4072) = 0u;
  *(_OWORD *)(a1 + 4088) = 0u;
  *(_OWORD *)(a1 + 4104) = 0u;
  *(_OWORD *)(a1 + 4120) = 0u;
  *(_OWORD *)(a1 + 4136) = 0u;
  *(_OWORD *)(a1 + 4152) = 0u;
  *(_OWORD *)(a1 + 4168) = 0u;
  *(_OWORD *)(a1 + 4184) = 0u;
  *(_OWORD *)(a1 + 4200) = 0u;
  *(_OWORD *)(a1 + 4216) = 0u;
  *(_OWORD *)(a1 + 4232) = 0u;
  *(_OWORD *)(a1 + 4248) = 0u;
  *(_OWORD *)(a1 + 4264) = 0u;
  *(_OWORD *)(a1 + 4280) = 0u;
  *(_OWORD *)(a1 + 4296) = 0u;
  *(_OWORD *)(a1 + 4312) = 0u;
  *(_OWORD *)(a1 + 4328) = 0u;
  *(_OWORD *)(a1 + 4344) = 0u;
  *(_BYTE *)(a1 + 4372) = 4;
  *(_DWORD *)(a1 + 4376) = 2;
  *(_DWORD *)(a1 + 4384) = 6;
  return a1;
}

uint64_t sub_20C6F548C(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a2 + 8);
  if ((v2 & 0x80000000) != 0)
    return 0;
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_QWORD *)&a1[6 * v3 + 2];
  v5 = ((unint64_t)(*(_QWORD *)&a1[6 * v3 + 4] - v4) >> 3) - 1;
  if ((_DWORD)v2 != v5)
  {
    v6 = *(_QWORD *)(v4 + 8 * v2);
    *(_QWORD *)(v4 + 8 * v2) = *(_QWORD *)(v4 + 8 * v5);
    *(_QWORD *)(v4 + 8 * v5) = v6;
    *(_DWORD *)(*(_QWORD *)(v4 + 8 * v2) + 8) = v2;
    *(_DWORD *)(v6 + 8) = v5;
  }
  return sub_20C6F54E0(a1, v3);
}

uint64_t sub_20C6F54E0(_DWORD *a1, int a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;

  v2 = &a1[6 * a2];
  v3 = *((_QWORD *)v2 + 2);
  v4 = *(_QWORD *)(v3 - 8);
  *((_QWORD *)v2 + 2) = v3 - 8;
  *(_DWORD *)(v4 + 8) = -1;
  if ((*a1)-- == 1)
  {
    a1[1] = -1;
  }
  else
  {
    v6 = a1[1];
    if ((v6 & 0x80000000) == 0)
    {
      do
      {
        if (*(_QWORD *)&a1[6 * v6 + 2] != *(_QWORD *)&a1[6 * v6 + 4])
          break;
        a1[1] = v6 - 1;
      }
      while (v6-- > 0);
    }
  }
  return v4;
}

_QWORD *sub_20C6F554C(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20C137E74(a1, a2);
    v4 = a1[1];
    v5 = v4 + 20 * a2;
    v6 = 20 * a2;
    v7 = (_QWORD *)(v4 + 4);
    do
    {
      *v7 = 0;
      v7[1] = 0;
      *((_DWORD *)v7 - 1) = 4;
      v7 = (_QWORD *)((char *)v7 + 20);
      v6 -= 20;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C6F55B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C6F55D0(_QWORD **a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = sub_20C6F55FC(v3);
    operator delete(v4);
  }
}

_QWORD *sub_20C6F55FC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  sub_20C6E8E3C((uint64_t)(a1 + 531));
  sub_20C6E8E3C((uint64_t)(a1 + 522));
  v2 = (void *)a1[519];
  if (v2)
  {
    a1[520] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[516];
  if (v3)
  {
    a1[517] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[513];
  if (v4)
  {
    a1[514] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[510];
  if (v5)
  {
    a1[511] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[507];
  if (v6)
  {
    a1[508] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[496];
  if (v7)
  {
    a1[497] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[493];
  if (v8)
  {
    a1[494] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[490];
  if (v9)
  {
    a1[491] = v9;
    operator delete(v9);
  }
  sub_20C6F571C((uint64_t)(a1 + 163));
  v10 = (void *)a1[160];
  if (v10)
  {
    a1[161] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[157];
  if (v11)
  {
    a1[158] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[154];
  if (v12)
  {
    a1[155] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[151];
  if (v13)
  {
    a1[152] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[148];
  if (v14)
  {
    a1[149] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[145];
  if (v15)
  {
    a1[146] = v15;
    operator delete(v15);
  }
  return a1;
}

uint64_t sub_20C6F571C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  for (i = 2600; i != 2360; i -= 120)
  {
    v3 = a1 + i;
    v4 = *(void **)(a1 + i - 8);
    if (v4)
    {
      *(_QWORD *)(a1 + i) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v3 - 32);
    if (v5)
    {
      *(_QWORD *)(a1 + i - 24) = v5;
      operator delete(v5);
    }
    v6 = a1 + i;
    v7 = *(void **)(a1 + i - 56);
    if (v7)
    {
      *(_QWORD *)(v6 - 48) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(v6 - 80);
    if (v8)
    {
      *(_QWORD *)(a1 + i - 72) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(v3 - 104);
    if (v9)
    {
      *(_QWORD *)(a1 + i - 96) = v9;
      operator delete(v9);
    }
  }
  v10 = 1536;
  do
  {
    v11 = *(void **)(a1 + v10 + 176);
    if (v11)
    {
      *(_QWORD *)(a1 + v10 + 184) = v11;
      operator delete(v11);
    }
    v10 -= 24;
  }
  while (v10);
  v12 = *(void **)(a1 + 168);
  if (v12)
  {
    *(_QWORD *)(a1 + 176) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 144);
  if (v13)
  {
    *(_QWORD *)(a1 + 152) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 120);
  if (v14)
  {
    *(_QWORD *)(a1 + 128) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 96);
  if (v15)
  {
    *(_QWORD *)(a1 + 104) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 72);
  if (v16)
  {
    *(_QWORD *)(a1 + 80) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 48);
  if (v17)
  {
    *(_QWORD *)(a1 + 56) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 24);
  if (v18)
  {
    *(_QWORD *)(a1 + 32) = v18;
    operator delete(v18);
  }
  v19 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v19;
    operator delete(v19);
  }
  return a1;
}

uint64_t sub_20C6F5858(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, const void *a5, unint64_t a6, int *a7, uint64_t a8, int *a9, unint64_t *a10, uint64_t *a11)
{
  int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;

  v18 = a9;
  v19 = 4 * a4;
  if (!*(_BYTE *)(a8 + 16))
    v19 = 0;
  v20 = 12 * a2 + 4 * a4 + 4 * a6 + v19 + 1024;
  v21 = *a10;
  v22 = a10[1] - *a10;
  if (v20 <= v22)
  {
    if (v20 < v22)
      a10[1] = v21 + v20;
  }
  else
  {
    v24 = a8;
    sub_20C6BBBDC(a10, v20 - v22);
    v18 = a9;
    a8 = v24;
    v21 = *a10;
  }
  *a11 = 0;
  return sub_20C6F59A0(v18, a1, a2, a3, a4, a5, a6, a7, v21, v20, a11, 0, 0, 0, a8);
}

uint64_t sub_20C6F594C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = 4 * a4;
  if (!*(_BYTE *)(a8 + 16))
    v8 = 0;
  return 12 * a2 + 4 * a4 + 4 * a6 + v8 + 1024;
}

void sub_20C6F5978(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  size_t v4;

  v2 = a1[1] - *a1;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_20C6BBBDC(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

uint64_t sub_20C6F59A0(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, const void *a6, unint64_t a7, int *a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v22;
  uint8x8_t v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  int *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  char v54;
  int v55;
  char v56;
  int v57;
  int v58;
  char v59;
  _BYTE *v60;
  uint64_t v61;
  _QWORD v62[13];
  char v63;
  uint64_t v64;
  int v65[6];
  uint64_t v66;
  int v67[3];

  v67[0] = 0;
  sub_20BDDBD68((uint64_t)v62);
  v45 = a2;
  v22 = sub_20C6F69B0(a2, a3, a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a9, a10, v67, (uint64_t)&v66, v65, (uint64_t)v62, a15);
  if (!(_DWORD)v22)
  {
    v60 = (_BYTE *)a9;
    v61 = a10;
    v47 = 0;
    v55 = 0;
    v48 = 0;
    v49 = a3;
    v50 = a5;
    v51 = a7;
    v24 = v67[0];
    v52 = *(_DWORD *)(a15 + 4);
    v53 = v67[0];
    v54 = *(_BYTE *)(a15 + 16);
    v56 = *(_BYTE *)(a15 + 8);
    v57 = *(_DWORD *)(a15 + 12);
    v58 = *(_DWORD *)(a15 + 17);
    v59 = *(_BYTE *)(a15 + 21);
    v25 = (_DWORD *)sub_20C6F746C(a9, a10, (uint64_t)&v47, v23);
    if (v26 > 3)
    {
      *v25 = v65[0];
      v29 = (int *)a4;
      v30 = (uint64_t)v45;
      if ((v26 & 0xFFFFFFFFFFFFFFFCLL) == 4 || (v25[1] = v65[1], (v26 & 0xFFFFFFFFFFFFFFFCLL) == 8))
      {
        v27 = 0;
        v28 = 0;
      }
      else
      {
        v27 = v26 - 12;
        v28 = v25 + 3;
        v25[2] = v65[2];
      }
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v60 = 0;
      v61 = 0;
      v29 = (int *)a4;
      v30 = (uint64_t)v45;
    }
    if (*(_BYTE *)(a15 + 21))
    {
      v31 = 0;
      v32 = 1;
      do
      {
        v33 = v67[v31 - 1];
        v34 = 32 - __clz(v33);
        if (v33)
          v35 = v34;
        else
          v35 = 0;
        v67[v31 - 1] = v35;
        if (v27-- < 1)
        {
          v27 = 0;
          v28 = 0;
        }
        else
        {
          *v28++ = v35;
          v32 = *(unsigned __int8 *)(a15 + 21);
        }
        if (v31 > 1)
          break;
        ++v31;
      }
      while (v32);
    }
    v60 = v28;
    v61 = v27;
    sub_20C6F7588((uint64_t)a1, v30, a3, v29, a5, a6, a7, v24, &v66, (uint64_t)v65);
    sub_20C6F77D0((uint64_t)(a1 + 70), a1, a15);
    v22 = sub_20C6F79E4((uint64_t)a1, a15, (uint64_t)&v60);
    if (!(_DWORD)v22)
    {
      if (!*(_BYTE *)(a15 + 16)
        || (v22 = sub_20C6F7A9C((uint64_t)a1, (uint64_t)a8, a15, (uint64_t)&v60), !(_DWORD)v22)
        && (v22 = sub_20C6F7F50((uint64_t)a1, a8), !(_DWORD)v22))
      {
        v22 = 1;
        if (v60)
        {
          if ((v61 & 0x8000000000000000) == 0)
          {
            v39 = (a10 & ~(a10 >> 63)) - v61;
            if (a10 - v39 >= 0)
              v40 = (a10 & ~(a10 >> 63)) - v61;
            else
              v40 = 0;
            if (a10 - v39 >= 0)
              v41 = a9;
            else
              v41 = 0;
            v42 = v40 & ~(v40 >> 63);
            *a11 = v42;
            if (v40 >= 16)
              *(_DWORD *)(v41 + 12) = v42;
            v43 = 8;
            if (v40 > 8)
              v43 = v40;
            v44 = sub_20C6E7D1C(v41 + 8, v43 - 8);
            if (v40 >= 8)
              *(_DWORD *)(v41 + 4) = v44;
            sub_20C6F7358((unsigned int *)a1, a12, a13, a14);
            v22 = 0;
          }
        }
      }
    }
  }
  v62[0] = *MEMORY[0x24BEDB7F0];
  v37 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v62 + *(_QWORD *)(v62[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v62[2] = v37;
  v62[3] = MEMORY[0x24BEDB848] + 16;
  if (v63 < 0)
    operator delete((void *)v62[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212B92EB0](&v64);
  return v22;
}

void sub_20C6F5D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20BDDBE98((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6F5D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int *v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  const void *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 *v24;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  void *__p;
  void *v34;
  uint64_t v35;
  int v36[1228];

  MEMORY[0x24BDAC7A8](a1, a2, a3);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  sub_20C706F6C((uint64_t)v36);
  __p = 0;
  v34 = 0;
  v35 = 0;
  v32 = 0;
  v23 = sub_20C6F5858(v22, v20, v18, v16, v14, v12, v10, a9, v36, (unint64_t *)&__p, (uint64_t *)&v32);
  if (!(_DWORD)v23)
  {
    v31 = *(_QWORD *)(a9 + 16);
    v30 = *(_OWORD *)a9;
    v28 = *(_OWORD *)a9;
    v29 = *(_QWORD *)(a9 + 16);
    BYTE1(v31) = 0;
    BYTE3(v31) = 0;
    v27 = 0;
    v23 = sub_20C6F5858(v22, v20, v18, v16, v14, v12, v10, (uint64_t)&v30, v36, (unint64_t *)&__p, (uint64_t *)&v27);
    if (!(_DWORD)v23)
    {
      BYTE1(v29) = 1;
      BYTE3(v29) = 0;
      v26 = 0;
      v23 = sub_20C6F5858(v22, v20, v18, v16, v14, v12, v10, (uint64_t)&v28, v36, (unint64_t *)&__p, (uint64_t *)&v26);
      if (!(_DWORD)v23 && (v32 > v27 || v32 > v26))
      {
        v24 = &v30;
        if (v27 > v26)
          v24 = &v28;
        *(_OWORD *)a9 = *v24;
        *(_QWORD *)(a9 + 14) = *(_QWORD *)((char *)v24 + 14);
      }
    }
  }
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  sub_20C707484((uint64_t)v36);
  return v23;
}

void sub_20C6F5F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27)
{
  if (__p)
    operator delete(__p);
  sub_20C707484((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6F5F34(uint64_t a1, _BYTE *a2, unsigned int a3, uint64_t a4, unint64_t a5, uint64_t a6, unsigned int *a7, unint64_t *a8, uint64_t *a9)
{
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  if (*(_DWORD *)(a6 + 16))
    v16 = a4;
  else
    v16 = 0;
  v17 = v16 + 4 * a4 * a5 + 1024;
  v18 = *a8;
  v19 = a8[1] - *a8;
  if (v17 <= v19)
  {
    if (v17 < v19)
      a8[1] = v18 + v17;
  }
  else
  {
    sub_20C6BBBDC(a8, v17 - v19);
    v18 = *a8;
  }
  *a9 = 0;
  return sub_20C6F601C(a7, a1, a2, a3, 0, a5, v18, v17, a9, a6);
}

uint64_t sub_20C6F6000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  if (*(_DWORD *)(a6 + 16))
    v6 = a4;
  else
    v6 = 0;
  return v6 + 4 * a4 * a5 + 1024;
}

uint64_t sub_20C6F601C(unsigned int *a1, uint64_t a2, _BYTE *a3, unsigned int a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  uint64_t result;
  uint64_t v15;
  unsigned int v16;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int *v26;
  int *v27;
  int v28;
  uint64_t v29;
  int *v30;
  int *v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  int *v55;
  unint64_t v56;
  int v57;
  void **v58;
  uint64_t i;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  int **v70;
  int **v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  char v76;
  int v77;
  _DWORD *v78;
  uint64_t v79;

  result = 5;
  if (a5 <= 0xFF)
  {
    if (a2)
    {
      if (a6 - 256 >= 0xFFFFFFFFFFFFFF01 && (*(unsigned __int8 *)(a10 + 8) | 2) != 3 && !*(_DWORD *)(a10 + 20))
      {
        v15 = a7;
        v16 = a5;
        if (a3 || !*(_DWORD *)(a10 + 16))
        {
          v19 = *(_DWORD *)(a10 + 4);
          if (v19 <= 0x1B)
          {
            if ((*(_DWORD *)(a10 + 12) - 5) > 1)
            {
              if (!a7)
                return result;
            }
            else if (!a7 || a6 != 2 || !v19)
            {
              return result;
            }
            if ((unint64_t)a8 >= 0x21)
            {
              v68 = *(_DWORD *)(a10 + 12) - 5;
              v20 = *a1;
              v67 = (int)v20;
              v21 = a1 + 750;
              a1[780] = a6;
              a1[781] = v20;
              a1[782] = a4;
              v71 = (int **)(a1 + 762);
              v69 = v20;
              v70 = (int **)(a1 + 756);
              sub_20BE81ACC((uint64_t)(a1 + 756), a6);
              sub_20BE81ACC((uint64_t)(a1 + 762), a6);
              sub_20BE81ACC((uint64_t)(a1 + 750), a6);
              v22 = 0;
              v23 = *((_QWORD *)a1 + 378);
              v24 = *((_QWORD *)a1 + 381);
              do
              {
                v25 = *(_DWORD *)(a2 + 4 * v22);
                *(_DWORD *)(v23 + 4 * v22) = v25;
                *(_DWORD *)(v24 + 4 * v22++) = v25;
              }
              while (a6 != v22);
              if ((int)v69 >= 2)
              {
                v26 = *v70;
                v27 = *v71;
                v28 = 1;
                LODWORD(v29) = a6;
                do
                {
                  v29 = (int)v29;
                  v30 = v27;
                  v31 = v26;
                  v32 = a6;
                  do
                  {
                    v33 = *(_DWORD *)(a2 + 4 * v29);
                    if (v33 >= *v31)
                      v33 = *v31;
                    *v31++ = v33;
                    v34 = *v30;
                    if (*v30 <= *(_DWORD *)(a2 + 4 * v29))
                      v34 = *(_DWORD *)(a2 + 4 * v29);
                    *v30++ = v34;
                    ++v29;
                    --v32;
                  }
                  while (v32);
                  ++v28;
                }
                while (v28 != (_DWORD)v69);
              }
              v35 = 0;
              v36 = *v71;
              v37 = *v70;
              result = 5;
              do
              {
                v38 = v36[v35];
                v39 = v37[v35];
                if (v38 - v39 > 0xFFFFFFF)
                  return 5;
                v40 = *(_DWORD *)(a10 + 4);
                if (v40 && ((v39 & 0x80000000) != 0 || (int)v38 >= 1 << v40))
                  return result;
                if (v68 > 1)
                {
                  *(_DWORD *)(*v21 + 4 * v35) = v38 - v39;
                }
                else
                {
                  *(_DWORD *)(*v21 + 4 * v35) = v38;
                  v37[v35] = 0;
                }
                ++v35;
              }
              while (a6 != v35);
              v78 = (_DWORD *)v15;
              v79 = a8;
              v72 = 0u;
              v73 = 0u;
              v74 = 0u;
              v75 = 0;
              HIDWORD(v72) = v69;
              LODWORD(v73) = a6;
              *((_QWORD *)&v73 + 1) = __PAIR64__(*(_DWORD *)(a10 + 4), v16);
              v42 = *(_DWORD *)(a10 + 12);
              v41 = *(_DWORD *)(a10 + 16);
              LODWORD(v74) = a4;
              DWORD2(v74) = v41;
              v76 = *(_BYTE *)(a10 + 8);
              v77 = v42;
              v43 = (_DWORD *)sub_20C6F80A8(v15, a8, (uint64_t)&v72);
              v45 = 0;
              do
              {
                v46 = v44 < 4;
                v44 -= 4;
                if (v46)
                {
                  v44 = 0;
                  v43 = 0;
                }
                else
                {
                  *v43++ = (*v70)[v45];
                }
                v47 = *(_DWORD *)(*v21 + 4 * v45);
                v48 = 32 - __clz(v47);
                if (v47)
                  v49 = v48;
                else
                  v49 = 0;
                *(_DWORD *)(*v21 + 4 * v45++) = v49;
              }
              while (a6 != v45);
              v50 = 0;
              do
              {
                v46 = v44-- < 1;
                if (v46)
                {
                  v44 = 0;
                  v43 = 0;
                }
                else
                {
                  *(_BYTE *)v43 = *(_DWORD *)(*v21 + 4 * v50);
                  v43 = (_DWORD *)((char *)v43 + 1);
                }
                ++v50;
              }
              while (a6 != v50);
              v78 = v43;
              v79 = v44;
              sub_20BE81ACC((uint64_t)(a1 + 768), v67 * a6);
              if ((int)v69 >= 1)
              {
                v51 = 0;
                LODWORD(v52) = 0;
                v53 = *v70;
                v54 = *((_QWORD *)a1 + 384);
                do
                {
                  v52 = (int)v52;
                  v55 = v53;
                  v56 = a6;
                  do
                  {
                    v57 = *v55++;
                    *(_DWORD *)(v54 + 4 * v52) = *(_DWORD *)(a2 + 4 * v52) - v57;
                    ++v52;
                    --v56;
                  }
                  while (v56);
                  ++v51;
                }
                while (v51 != (_DWORD)v69);
              }
              v58 = (void **)(a1 + 774);
              if (a3 && *(_DWORD *)(a10 + 16))
              {
                sub_20C6F5978((unint64_t *)a1 + 387, v67);
                if ((int)v69 >= 1)
                {
                  for (i = 0; i != v69; ++i)
                    *((_BYTE *)*v58 + i) = a3[i];
                }
                if ((_DWORD)v69)
                  memmove(*v58, a3, v67);
              }
              else
              {
                sub_20C6F5978((unint64_t *)a1 + 387, 0);
              }
              result = sub_20C6F81C0((uint64_t)a1, a10, (uint64_t)&v78);
              if (!(_DWORD)result)
              {
                result = 1;
                if (v78)
                {
                  if ((v79 & 0x8000000000000000) == 0)
                  {
                    v60 = (a8 & ~(a8 >> 63)) - v79;
                    v61 = a8 - v60 < 0;
                    if (a8 - v60 >= 0)
                      v62 = (a8 & ~(a8 >> 63)) - v79;
                    else
                      v62 = 0;
                    if (v61)
                      v15 = 0;
                    v63 = v62 & ~(v62 >> 63);
                    *a9 = v63;
                    if (v62 >= 16)
                      *(_DWORD *)(v15 + 12) = v63;
                    v64 = 8;
                    if (v62 > 8)
                      v64 = v62;
                    v65 = sub_20C6E7D1C(v15 + 8, v64 - 8);
                    if (v62 >= 8)
                    {
                      v66 = v65;
                      result = 0;
                      *(_DWORD *)(v15 + 4) = v66;
                    }
                    else
                    {
                      return 0;
                    }
                  }
                }
              }
            }
            else
            {
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_20C6F6498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  char v24;
  unint64_t v26;
  unint64_t v27;
  _BYTE v28[28];
  unint64_t v29;
  void *__p;
  void *v31;
  uint64_t v32;
  unsigned int v33[1228];

  v3 = MEMORY[0x24BDAC7A8](a1, a2, a3);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = (uint64_t *)v3;
  sub_20C706F6C((uint64_t)v33);
  sub_20C6F66D4((uint64_t)v33, v16);
  __p = 0;
  v31 = 0;
  v32 = 0;
  v29 = 0;
  v17 = sub_20C6F5F34(v15, v13, v11, v9, v7, v5, v33, (unint64_t *)&__p, (uint64_t *)&v29);
  if (!(_DWORD)v17)
  {
    *(_OWORD *)v28 = *(_OWORD *)v5;
    *(_OWORD *)&v28[12] = *(_OWORD *)(v5 + 12);
    if (v11 == 1 && v7 == 2)
    {
      v18 = *(_DWORD *)(v5 + 12) == 4;
      v19 = 3;
    }
    else
    {
      v20 = *(_DWORD *)(v5 + 12);
      if (v11 == 2 && v7 == 2)
      {
        v18 = v20 == 6;
        v19 = 5;
      }
      else
      {
        v18 = v20 == 2;
        v19 = 1;
      }
    }
    if (!v18)
      ++v19;
    *(_DWORD *)&v28[12] = v19;
    v27 = 0;
    v17 = sub_20C6F5F34(v15, v13, v11, v9, v7, (uint64_t)v28, v33, (unint64_t *)&__p, (uint64_t *)&v27);
    if (!(_DWORD)v17)
    {
      v21 = v29;
      v22 = v27;
      if (v29 <= v27)
      {
        v23 = *(_DWORD *)(v5 + 12);
      }
      else
      {
        v23 = *(_DWORD *)&v28[12];
        *(_DWORD *)(v5 + 12) = *(_DWORD *)&v28[12];
        v21 = v22;
      }
      v24 = v28[8] == 4 ? 2 : 4;
      v28[8] = v24;
      *(_DWORD *)&v28[12] = v23;
      v26 = 0;
      v17 = sub_20C6F5F34(v15, v13, v11, v9, v7, (uint64_t)v28, v33, (unint64_t *)&__p, (uint64_t *)&v26);
      if (!(_DWORD)v17 && v21 > v26)
        *(_BYTE *)(v5 + 8) = v28[8];
    }
  }
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  sub_20C707484((uint64_t)v33);
  return v17;
}

void sub_20C6F66A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (__p)
    operator delete(__p);
  sub_20C707484((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6F66D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v3;
  v4 = *(uint64_t *)((char *)a2 + 12);
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_QWORD *)(a1 + 12) = v4;
  v5 = a2[3];
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_QWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  if ((uint64_t *)a1 != a2)
  {
    sub_20BE8B37C((char *)(a1 + 40), (char *)a2[5], a2[6], (a2[6] - a2[5]) >> 2);
    sub_20BE8B37C((char *)(a1 + 64), (char *)a2[8], a2[9], (a2[9] - a2[8]) >> 2);
    sub_20BE8B37C((char *)(a1 + 88), (char *)a2[11], a2[12], (a2[12] - a2[11]) >> 2);
    sub_20BE8B37C((char *)(a1 + 112), (char *)a2[14], a2[15], (a2[15] - a2[14]) >> 2);
    sub_20C6E8E8C((_QWORD *)(a1 + 136), (_DWORD *)a2[17], (_DWORD *)a2[18], 0xAAAAAAAAAAAAAAABLL * ((a2[18] - a2[17]) >> 2));
    sub_20C6E8E8C((_QWORD *)(a1 + 160), (_DWORD *)a2[20], (_DWORD *)a2[21], 0xAAAAAAAAAAAAAAABLL * ((a2[21] - a2[20]) >> 2));
    sub_20C6E8E8C((_QWORD *)(a1 + 184), (_DWORD *)a2[23], (_DWORD *)a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 2));
    sub_20BE8B37C((char *)(a1 + 208), (char *)a2[26], a2[27], (a2[27] - a2[26]) >> 2);
    sub_20BE8B37C((char *)(a1 + 232), (char *)a2[29], a2[30], (a2[30] - a2[29]) >> 2);
    sub_20BE8B37C((char *)(a1 + 256), (char *)a2[32], a2[33], (a2[33] - a2[32]) >> 2);
  }
  return a1;
}

double sub_20C6F6820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  double result;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;

  if (a4 || 3 * a5 == a7)
  {
    v15 = v10;
    v16 = v11;
    *(_QWORD *)&v14[16] = *(_QWORD *)(a10 + 16);
    *(_OWORD *)v14 = *(_OWORD *)a10;
    v14[16] = a8 != 0;
    v14[21] = 1;
    v14[8] = 4;
    v12 = *a9;
    if (*a9 - 3 < 4)
    {
      *(_DWORD *)&v14[12] = 1;
      *(_DWORD *)&v14[17] = 1;
    }
    else if (v12 >= 3)
    {
      if (v12 == 10)
      {
        if (sub_20C6F5D2C(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v14))
          return result;
      }
      else
      {
        *(_DWORD *)&v14[12] = 2;
        *(_DWORD *)&v14[17] = 16843009;
      }
    }
    else
    {
      *(_DWORD *)&v14[12] = 1;
      *(_DWORD *)&v14[17] = 0;
    }
    result = *(double *)v14;
    *(_OWORD *)a10 = *(_OWORD *)v14;
    *(_QWORD *)(a10 + 14) = *(_QWORD *)&v14[14];
  }
  return result;
}

uint64_t sub_20C6F68FC(int *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int *a6, uint64_t a7)
{
  int v7;
  char v8;
  unsigned int v9;
  char v10;
  int v11;
  uint64_t result;

  v7 = *a1;
  *(_DWORD *)(a7 + 16) = a3 != 0;
  if (a4 == 1 && v7 <= 79)
    v8 = 2;
  else
    v8 = 4;
  *(_BYTE *)(a7 + 8) = v8;
  v9 = *a6;
  if (*a6 - 3 < 4)
  {
    v10 = 0;
    if (a4 == 1)
      v11 = 3;
    else
      v11 = 1;
    goto LABEL_11;
  }
  if (v9 < 3)
  {
    v10 = 0;
    v11 = 1;
LABEL_11:
    *(_DWORD *)(a7 + 12) = v11;
    *(_BYTE *)(a7 + 24) = v10;
    return 0;
  }
  if (v9 != 10)
  {
    if (a4 == 1)
      v11 = 4;
    else
      v11 = 2;
    v10 = 1;
    goto LABEL_11;
  }
  result = sub_20C6F6498((uint64_t)a1, a2, a3);
  if (!(_DWORD)result)
    return 0;
  return result;
}

uint64_t sub_20C6F69B0(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, int *a10, uint64_t a11, int *a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  const std::locale::facet *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  uint64_t v28;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  const char *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v44;
  int v46;
  int v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int *v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  int *v77;
  int v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t i;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  std::locale v110;

  if (!a1)
  {
    v16 = sub_20BDDC1C8((_QWORD *)(a13 + 16), (uint64_t)"[Error] coordinates == nullptr", 30);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
    v17 = std::locale::use_facet(&v110, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    goto LABEL_17;
  }
  if (!a2)
  {
    v18 = sub_20BDDC1C8((_QWORD *)(a13 + 16), (uint64_t)"[Error] mesh has 0 vertices ", 28);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
    v19 = std::locale::use_facet(&v110, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    goto LABEL_17;
  }
  if (!a4)
  {
    v20 = sub_20BDDC1C8((_QWORD *)(a13 + 16), (uint64_t)"[Error] mesh has 0 faces ", 25);
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
    v21 = std::locale::use_facet(&v110, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    goto LABEL_17;
  }
  if (!a5)
  {
    v22 = sub_20BDDC1C8((_QWORD *)(a13 + 16), (uint64_t)"[Error] faceVertexCounts == nullptr", 35);
    std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
    v23 = std::locale::use_facet(&v110, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
    goto LABEL_17;
  }
  if (!a6)
  {
    v24 = sub_20BDDC1C8((_QWORD *)(a13 + 16), (uint64_t)"[Error] mesh has 0 indices ", 27);
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
    v25 = std::locale::use_facet(&v110, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    goto LABEL_17;
  }
  if (!a3 && 3 * a4 != a6)
  {
    v14 = sub_20BDDC1C8((_QWORD *)(a13 + 16), (uint64_t)"[Error] triangular mesh has invalid indexCount ", 47);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
    v15 = std::locale::use_facet(&v110, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
LABEL_17:
    std::locale::~locale(&v110);
    std::ostream::put();
    std::ostream::flush();
    return 5;
  }
  if (!a7 && *(_BYTE *)(a14 + 16))
  {
    v26 = sub_20BDDC1C8((_QWORD *)(a13 + 16), (uint64_t)"[Error] faceGroupIndices == nullptr", 35);
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
    v27 = std::locale::use_facet(&v110, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    goto LABEL_17;
  }
  if (!a8)
  {
    v34 = (_QWORD *)(a13 + 16);
    v35 = "[Error] outputBuffer == nullptr";
    v36 = 31;
LABEL_58:
    v59 = sub_20BDDC1C8(v34, (uint64_t)v35, v36);
LABEL_59:
    sub_20BE01468(v59);
    return 5;
  }
  if (a9 <= 0x20)
  {
    sub_20BDDC1C8((_QWORD *)(a13 + 16), (uint64_t)"[Error] output buffer size is ", 30);
    v30 = (_QWORD *)std::ostream::operator<<();
    v31 = sub_20BDDC1C8(v30, (uint64_t)" bytes", 6);
    sub_20BDDC1C8(v31, (uint64_t)"It should at least ", 19);
    v32 = (_QWORD *)std::ostream::operator<<();
    v33 = sub_20BDDC1C8(v32, (uint64_t)" bytes ", 7);
    sub_20BE01468(v33);
    return 1;
  }
  if (*(_DWORD *)(a14 + 4) >= 0x1Cu)
  {
    v34 = (_QWORD *)(a13 + 16);
    v35 = "[Error] bit depth should be between 0 and 28";
    v36 = 44;
    goto LABEL_58;
  }
  if (*(_DWORD *)(a14 + 12) >= 3u)
  {
    sub_20BDDC1C8((_QWORD *)(a13 + 16), (uint64_t)"[Error] geometry precition mode ", 32);
    v50 = (_QWORD *)std::ostream::operator<<();
    v51 = sub_20BDDC1C8(v50, (uint64_t)" not supported. Only the following modes are supported : ", 57);
    sub_20BDDC1C8(v51, (uint64_t)"(", 1);
    v52 = (_QWORD *)std::ostream::operator<<();
    v53 = sub_20BDDC1C8(v52, (uint64_t)") ", 2);
    v54 = sub_20BDDC1C8(v53, (uint64_t)" DELTA,", 7);
    sub_20BDDC1C8(v54, (uint64_t)"(", 1);
    v55 = (_QWORD *)std::ostream::operator<<();
    v56 = sub_20BDDC1C8(v55, (uint64_t)") ", 2);
    v57 = sub_20BDDC1C8(v56, (uint64_t)" PARALLELOGRAM, and", 19);
    sub_20BDDC1C8(v57, (uint64_t)"(", 1);
    v58 = (_QWORD *)std::ostream::operator<<();
    v34 = sub_20BDDC1C8(v58, (uint64_t)") ", 2);
    v35 = " ADAPTIVE_PARALLELOGRAM.";
    v36 = 24;
    goto LABEL_58;
  }
  v37 = *(unsigned __int8 *)(a14 + 8);
  if (v37 > 4 || ((1 << v37) & 0x15) == 0)
  {
    sub_20BDDC1C8((_QWORD *)(a13 + 16), (uint64_t)"[Error] geometry binarization mode ", 35);
    v79 = (_QWORD *)std::ostream::operator<<();
    v80 = sub_20BDDC1C8(v79, (uint64_t)" not supported. Only the following modes are supported : ", 57);
    sub_20BDDC1C8(v80, (uint64_t)"(", 1);
    v81 = (_QWORD *)std::ostream::operator<<();
    v82 = sub_20BDDC1C8(v81, (uint64_t)") ", 2);
    v83 = sub_20BDDC1C8(v82, (uint64_t)" AC,", 4);
    sub_20BDDC1C8(v83, (uint64_t)"(", 1);
    v84 = (_QWORD *)std::ostream::operator<<();
    v85 = sub_20BDDC1C8(v84, (uint64_t)") ", 2);
    v86 = sub_20BDDC1C8(v85, (uint64_t)" EGK, and", 9);
    sub_20BDDC1C8(v86, (uint64_t)"(", 1);
    v87 = (_QWORD *)std::ostream::operator<<();
    v88 = sub_20BDDC1C8(v87, (uint64_t)") ", 2);
    v28 = 5;
    v89 = sub_20BDDC1C8(v88, (uint64_t)" AC2.", 5);
    sub_20BE01468(v89);
    return v28;
  }
  if (a3)
  {
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0x10000;
    do
    {
      v42 = *(unsigned int *)(a3 + 4 * v38);
      if ((v42 - 3) >= 0xFFFD)
      {
        sub_20BDDC1C8((_QWORD *)(a13 + 16), (uint64_t)"[Error] faceVertexCounts[", 25);
        v90 = (_QWORD *)std::ostream::operator<<();
        v28 = 5;
        sub_20BDDC1C8(v90, (uint64_t)"] == ", 5);
        v91 = (_QWORD *)std::ostream::operator<<();
        sub_20BDDC1C8(v91, (uint64_t)" is not the range 3 to ", 23);
LABEL_90:
        v92 = (_QWORD *)std::ostream::operator<<();
        sub_20BE01468(v92);
        return v28;
      }
      if ((int)v42 < v41)
        v41 = *(_DWORD *)(a3 + 4 * v38);
      if (v40 <= (int)v42)
        v40 = *(_DWORD *)(a3 + 4 * v38);
      v39 += v42;
      ++v38;
    }
    while (a4 != v38);
    if (v40 == 4 && v41 == 3)
      v44 = 2;
    else
      v44 = 3;
    if (v41 == 4 && v40 == 4)
      v46 = 1;
    else
      v46 = v44;
    if (v41 == 3 && v40 == 3)
      v48 = 0;
    else
      v48 = v46;
    *a10 = v48;
    if (v39 != a6)
    {
      sub_20BDDC1C8((_QWORD *)(a13 + 16), (uint64_t)"[Error] indexCount == ", 22);
      v49 = (_QWORD *)std::ostream::operator<<();
      sub_20BDDC1C8(v49, (uint64_t)" is different from expected value of ", 37);
      v34 = (_QWORD *)std::ostream::operator<<();
      v35 = " computed based on faceVertexCounts";
      v36 = 35;
      goto LABEL_58;
    }
  }
  else
  {
    *a10 = 0;
  }
  v60 = 0;
  if (a6 <= 1)
    v61 = 1;
  else
    v61 = a6;
  do
  {
    v62 = *(_DWORD *)(a5 + 4 * v60);
    if (v62 < 0 || v62 >= (int)a2)
    {
      sub_20BDDC1C8((_QWORD *)(a13 + 16), (uint64_t)"[Error] indices[", 16);
      v93 = (_QWORD *)std::ostream::operator<<();
      sub_20BDDC1C8(v93, (uint64_t)"] == ", 5);
      v94 = (_QWORD *)std::ostream::operator<<();
      sub_20BDDC1C8(v94, (uint64_t)" is not the range 0 to ", 23);
      v95 = (_QWORD *)std::ostream::operator<<();
      sub_20BE01468(v95);
      return 5;
    }
    ++v60;
  }
  while (v61 != v60);
  v63 = *a1;
  a12[2] = *((_DWORD *)a1 + 2);
  *(_QWORD *)a12 = v63;
  v64 = *a1;
  a12[5] = *((_DWORD *)a1 + 2);
  *(_QWORD *)(a12 + 3) = v64;
  if ((int)a2 >= 2)
  {
    v65 = *a12;
    v66 = a12[1];
    v68 = a12[2];
    v67 = a12[3];
    v69 = (int *)a1 + 5;
    v70 = a2 - 1;
    v72 = a12[4];
    v71 = a12[5];
    do
    {
      if (*(v69 - 2) < v65)
        v65 = *(v69 - 2);
      *a12 = v65;
      if (v67 <= *(v69 - 2))
        v67 = *(v69 - 2);
      a12[3] = v67;
      if (*(v69 - 1) < v66)
        v66 = *(v69 - 1);
      a12[1] = v66;
      if (v72 <= *(v69 - 1))
        v72 = *(v69 - 1);
      a12[4] = v72;
      if (*v69 < v68)
        v68 = *v69;
      a12[2] = v68;
      v74 = *v69;
      v69 += 3;
      v73 = v74;
      if (v71 <= v74)
        v71 = v73;
      a12[5] = v71;
      --v70;
    }
    while (v70);
  }
  v75 = *(_DWORD *)(a14 + 4);
  if (v75)
  {
    v76 = 0;
    while (1)
    {
      v77 = &a12[v76];
      if (*v77 < 0)
        break;
      v78 = v77[3];
      if (v78 >= 1 << v75)
        break;
      *(_DWORD *)(a11 + 4 * v76++) = v78 - *v77;
      if (v76 == 3)
        goto LABEL_95;
    }
    sub_20BDDC1C8((_QWORD *)(a13 + 16), (uint64_t)"[Error] boundingBox[", 20);
    v101 = (_QWORD *)std::ostream::operator<<();
    sub_20BDDC1C8(v101, (uint64_t)"] == [", 6);
    v102 = (_QWORD *)std::ostream::operator<<();
    sub_20BDDC1C8(v102, (uint64_t)", ", 2);
    v103 = (_QWORD *)std::ostream::operator<<();
    sub_20BDDC1C8(v103, (uint64_t)"] is not in the range 0 to ", 27);
    goto LABEL_108;
  }
  for (i = 0; i != 3; ++i)
  {
    v97 = a12[i + 3] - (uint64_t)a12[i];
    if (v97 > 0xFFFFFFF)
    {
      sub_20BDDC1C8((_QWORD *)(a13 + 16), (uint64_t)"[Error] boundingBox.max[", 24);
      v104 = (_QWORD *)std::ostream::operator<<();
      v105 = sub_20BDDC1C8(v104, (uint64_t)"] - ", 4);
      sub_20BDDC1C8(v105, (uint64_t)"boundingBox.min[", 16);
      v106 = (_QWORD *)std::ostream::operator<<();
      v28 = 5;
      sub_20BDDC1C8(v106, (uint64_t)"] == ", 5);
      v107 = (_QWORD *)std::ostream::operator<<();
      sub_20BDDC1C8(v107, (uint64_t)" is larger than ", 16);
      goto LABEL_90;
    }
    *(_DWORD *)(a11 + 4 * i) = v97;
  }
LABEL_95:
  v28 = 0;
  if (a7 && *(_BYTE *)(a14 + 16))
  {
    v98 = 0;
    if (a4 <= 1)
      v99 = 1;
    else
      v99 = a4;
    while (1)
    {
      v100 = *(_DWORD *)(a7 + 4 * v98);
      if (v100 < 0)
        v100 = -v100;
      if (v100 >> 28)
        break;
      v28 = 0;
      if (v99 == ++v98)
        return v28;
    }
    sub_20BDDC1C8((_QWORD *)(a13 + 16), (uint64_t)"[Error] abs(faceGroupIndices[", 29);
    v108 = (_QWORD *)std::ostream::operator<<();
    sub_20BDDC1C8(v108, (uint64_t)"]) == ", 6);
    v109 = (_QWORD *)std::ostream::operator<<();
    sub_20BDDC1C8(v109, (uint64_t)" is not in the range 0 to ", 26);
LABEL_108:
    v59 = (_QWORD *)std::ostream::operator<<();
    goto LABEL_59;
  }
  return v28;
}

void sub_20C6F732C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C6F7358(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int32x2_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  __int32 v11;
  int32x2_t *v12;
  uint64_t v13;
  int *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;

  if (a2)
  {
    v4 = *a1;
    if ((int)v4 >= 1)
    {
      v5 = 0;
      v6 = *(int32x2_t *)(a1 + 6);
      v7 = a1[8];
      v8 = 4 * v4;
      v9 = 8;
      do
      {
        v10 = (_DWORD *)(*((_QWORD *)a1 + 23) + v9);
        v11 = *v10 + v7;
        v12 = (int32x2_t *)(a2 + 12 * *(int *)(*((_QWORD *)a1 + 8) + v5));
        *v12 = vadd_s32(*(int32x2_t *)(v10 - 2), v6);
        v12[1].i32[0] = v11;
        v9 += 12;
        v5 += 4;
      }
      while (v8 != v5);
    }
  }
  if (a3)
  {
    v13 = a1[1];
    if ((int)v13 >= 1)
    {
      v14 = (int *)*((_QWORD *)a1 + 5);
      v15 = (_DWORD *)(*((_QWORD *)a1 + 29) + 4);
      do
      {
        v16 = *v14++;
        *(_DWORD *)(a3 + 4 * v16) = *v15 - *(v15 - 1);
        ++v15;
        --v13;
      }
      while (v13);
    }
  }
  if (a4)
  {
    v17 = a1[1];
    if ((int)v17 >= 1)
    {
      v18 = 0;
      v19 = 0;
      v20 = *((_QWORD *)a1 + 14);
      v21 = *((_QWORD *)a1 + 29);
      do
      {
        v22 = (int *)(v21 + 4 * *(int *)(v20 + 4 * v18));
        v24 = *v22;
        v23 = v22[1];
        if ((int)v24 < (int)v23)
        {
          v25 = *((_QWORD *)a1 + 8);
          v26 = (_DWORD *)(a4 + 4 * v19);
          v27 = (int *)(*((_QWORD *)a1 + 26) + 4 * v24);
          v28 = v23 - v24;
          v19 = v19 + v23 - v24;
          do
          {
            v29 = *v27++;
            *v26++ = *(_DWORD *)(v25 + 4 * v29);
            --v28;
          }
          while (v28);
        }
        ++v18;
      }
      while (v18 != v17);
    }
  }
  return 0;
}

uint64_t sub_20C6F746C(uint64_t a1, uint64_t a2, uint64_t a3, uint8x8_t a4)
{
  uint64_t v4;
  uint16x4_t v5;

  if (a2 < 4)
    return 0;
  *(_DWORD *)a1 = -90009999;
  if (a2 < 9)
    return 0;
  *(_BYTE *)(a1 + 8) = 0;
  if (a2 == 9)
    return 0;
  *(_BYTE *)(a1 + 9) = 8;
  if (((a2 - 8) & 0xFFFFFFFFFFFFFFFELL) == 2)
    return 0;
  *(_WORD *)(a1 + 10) = 0;
  if (a2 < 20)
    return 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a3 + 12);
  if (((a2 - 16) & 0xFFFFFFFFFFFFFFFCLL) == 4)
    return 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a3 + 16);
  if (a2 == 24)
    return 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a3 + 40);
  if (a2 == 25)
    return 0;
  *(_BYTE *)(a1 + 25) = *(_DWORD *)(a3 + 44);
  v4 = a2 - 26;
  if (a2 == 26)
    return v4;
  a4.i32[0] = *(_DWORD *)(a3 + 48);
  v5 = vshl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4), (uint16x4_t)0x4000300020001);
  *(_BYTE *)(a1 + 26) = v5.i8[0] | v5.i8[4] | ((v5.i32[0] | v5.i32[1]) >> 16) | (*(_BYTE *)(a3 + 28) << 6) | *(_BYTE *)(a3 + 32) | (32 * *(_BYTE *)(a3 + 52));
  if (a2 == 27)
    return 0;
  *(_BYTE *)(a1 + 27) = *(_DWORD *)(a3 + 24);
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 0x1C)
    return 0;
  v4 = a1 + 32;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a3 + 20);
  return v4;
}

void sub_20C6F7588(uint64_t a1, uint64_t a2, int a3, int *a4, int a5, const void *a6, int a7, int a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int32x2_t *v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  void **v29;
  uint64_t v31;
  int v32;

  *(_DWORD *)a1 = a3;
  *(_DWORD *)(a1 + 4) = a5;
  *(_DWORD *)(a1 + 8) = a7;
  v16 = *a9;
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a9 + 2);
  *(_QWORD *)(a1 + 12) = v16;
  v17 = *(_DWORD *)(a10 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)a10;
  *(_DWORD *)(a1 + 32) = v17;
  *(_DWORD *)(a1 + 36) = a8;
  v18 = a1 + 64;
  sub_20BE81ACC(a1 + 64, 0);
  LODWORD(v31) = -1;
  sub_20BE86740(v18, a3, &v31);
  sub_20BE81ACC(a1 + 40, 0);
  LODWORD(v31) = -1;
  sub_20BE86740(a1 + 40, a5, &v31);
  sub_20BE81ACC(a1 + 112, a5);
  sub_20BE81ACC(a1 + 88, a3);
  sub_20BE81ACC(a1 + 256, a5);
  sub_20C6E8374((uint64_t *)(a1 + 136), 0);
  v32 = -1;
  v31 = -1;
  sub_20C6E83B0((uint64_t *)(a1 + 136), a3, &v31);
  sub_20C6E8374((uint64_t *)(a1 + 160), 0);
  v32 = -1;
  v31 = -1;
  sub_20C6E83B0((uint64_t *)(a1 + 160), a3, &v31);
  sub_20C6E8374((uint64_t *)(a1 + 184), a3);
  if (a3 >= 1)
  {
    v19 = 0;
    do
    {
      v20 = *(_DWORD *)(a2 + v19 + 8) - *(_DWORD *)(a1 + 32);
      v21 = (int32x2_t *)(*(_QWORD *)(a1 + 184) + v19);
      *v21 = vsub_s32(*(int32x2_t *)(a2 + v19), *(int32x2_t *)(a1 + 24));
      v21[1].i32[0] = v20;
      v19 += 12;
    }
    while (12 * a3 != v19);
  }
  sub_20BE81ACC(a1 + 232, a5 + 1);
  v22 = *(_DWORD **)(a1 + 232);
  *v22 = 0;
  if (a4)
  {
    if (a5 >= 1)
    {
      v23 = 0;
      v24 = a5;
      v25 = v22 + 1;
      do
      {
        v26 = *a4++;
        v23 += v26;
        *v25++ = v23;
        --v24;
      }
      while (v24);
    }
  }
  else if (a5 >= 1)
  {
    v27 = v22 + 1;
    v28 = 3;
    do
    {
      *v27++ = v28;
      v28 += 3;
    }
    while (3 * (a5 + 1) != v28);
  }
  v29 = (void **)(a1 + 208);
  sub_20BE81ACC((uint64_t)v29, a7);
  if (a7)
    memmove(*v29, a6, 4 * a7);
}

void sub_20C6F77D0(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v5;
  BOOL v6;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  int v13;

  v5 = *a2;
  if (*(_BYTE *)(a3 + 18))
    v6 = *(_BYTE *)(a3 + 17) == 0;
  else
    v6 = 1;
  if (!v6 || (sub_20BE81ACC(a1 + 224, 0), v13 = 0, sub_20BE86740(a1 + 224, v5, &v13), *(_BYTE *)(a3 + 17)))
  {
    sub_20C6F4A90(a1 + 272, v5);
    sub_20C6F4ACC(a1 + 296, 64);
  }
  sub_20C6F4B60(a1 + 248, v5);
  v8 = *(_BYTE **)(a1 + 248);
  v9 = *(_BYTE **)(a1 + 256);
  if (v8 != v9)
    memset(v8, 255, ((v9 - v8 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
  *(_QWORD *)a1 = 0;
  sub_20BE857FC((void **)(a1 + 80), 0x100uLL);
  sub_20C150ED4((char **)(a1 + 200), 0x40uLL);
  sub_20BE857FC((void **)(a1 + 176), 0x40uLL);
  sub_20BE857FC((void **)(a1 + 152), 0x40uLL);
  sub_20BE857FC((void **)(a1 + 104), 0x20uLL);
  sub_20C6F4B90((unint64_t *)(a1 + 128), 0x20uLL);
  memset_pattern16((void *)(a1 + 2096), &unk_20CAF8CE0, 0xAuLL);
  *(_WORD *)(a1 + 2106) = 0x8000;
  for (i = 2108; i != 2204; i += 6)
    memset_pattern16((void *)(a1 + i), &unk_20CAF8CE0, 6uLL);
  *(_WORD *)(a1 + 2204) = 0x8000;
  memset_pattern16((void *)(a1 + 2206), &unk_20CAF8CE0, 6uLL);
  *(_WORD *)(a1 + 2212) = 0x8000;
  for (j = 2214; j != 2294; j += 16)
    memset_pattern16((void *)(a1 + j), &unk_20CAF8CE0, 0x10uLL);
  memset_pattern16((void *)(a1 + 2298), &unk_20CAF8CE0, 0x20uLL);
  memset_pattern16((void *)(a1 + 2336), &unk_20CAF8CE0, 0x80uLL);
  *(_WORD *)(a1 + 2334) = 0x8000;
  *(_DWORD *)(a1 + 2294) = -2147450880;
  *(_DWORD *)(a1 + 2330) = -2147450880;
  memset_pattern16((void *)(a1 + 2472), &unk_20CAF8CE0, 6uLL);
  for (k = 2480; k != 2720; k += 120)
    sub_20C6EC678(a1 + k, 3);
  sub_20C707580((_QWORD *)a1, (uint64_t)a2);
}

uint64_t sub_20C6F79E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(unsigned int **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  v8 = *(_QWORD *)a3 + 4;
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v7 - 4;
  v9 = (unsigned int *)(a1 + 3560);
  *(_DWORD *)(a1 + 3564) = (v7 - 4) & ~((v7 - 4) >> 63);
  *(_QWORD *)(a1 + 3568) = v8;
  sub_20C6E7C30(a1 + 3560);
  if (*(_BYTE *)(a2 + 17))
    sub_20C6FD2FC((unsigned int *)a1, a2);
  else
    sub_20C6FD52C((unsigned int *)a1, a2);
  v10 = sub_20C6E8BF4((uint64_t)v9);
  if (v7 >= 4)
    *v6 = v10;
  v11 = v10;
  if (*(_QWORD *)a3)
    v11 = *(_QWORD *)a3 + v10;
  v12 = *(_QWORD *)(a3 + 8) - v10;
  *(_QWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v12;
  return *v9;
}

uint64_t sub_20C6F7A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  _WORD __b[2];
  _WORD v38[4];
  _WORD v39[8];
  _WORD v40[16];
  _WORD v41[32];
  _WORD v42[2];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v7 = *(unsigned int *)(a1 + 4);
  v30 = *(unsigned int **)a4;
  v31 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)a4 += 4;
  *(_QWORD *)(a4 + 8) = v31 - 4;
  v8 = (unsigned int *)(a1 + 3560);
  *(_DWORD *)(a1 + 3564) = (v31 - 4) & ~((v31 - 4) >> 63);
  *(_QWORD *)(a1 + 3568) = v30 + 1;
  sub_20C6E7C30(a1 + 3560);
  if (!*(_BYTE *)(a3 + 8))
  {
    v36 = 0x8000;
    v35 = 0x8000;
    memset_pattern16(__b, &unk_20CAF8CE0, 0x80uLL);
    v34 = 0x8000;
    if ((int)v7 < 1)
      goto LABEL_31;
    v17 = 0;
    v18 = 0;
    v19 = 4 * v7;
    while (1)
    {
      v20 = v18;
      v18 = *(_DWORD *)(a2 + 4 * *(int *)(*(_QWORD *)(a1 + 112) + v17));
      v21 = &v36;
      v22 = (uint64_t)v8;
      v23 = v18 - v20;
      if (v18 == v20)
      {
        v24 = 0;
      }
      else
      {
        sub_20C6E8A80((uint64_t)v8, 1, &v36);
        if ((v23 & 0x80000000) != 0)
        {
          sub_20C6E8A80((uint64_t)v8, 0, &v35);
          v23 = -v23;
        }
        else
        {
          sub_20C6E8A80((uint64_t)v8, 1, &v35);
        }
        if (v23 > 0x3F)
        {
          sub_20C6E8A80((uint64_t)v8, 1, __b);
          sub_20C6E8A80((uint64_t)v8, 1, v38);
          sub_20C6E8A80((uint64_t)v8, 1, v39);
          sub_20C6E8A80((uint64_t)v8, 1, v40);
          sub_20C6E8A80((uint64_t)v8, 1, v41);
          sub_20C6E8A80((uint64_t)v8, 1, v42);
          sub_20C6E90B8((uint64_t)v8, v23 - 64, 6, &v34);
          goto LABEL_30;
        }
        v25 = v23 - 1;
        sub_20C6E8A80((uint64_t)v8, (v23 - 1) & 1, __b);
        sub_20C6E8A80((uint64_t)v8, (v25 >> 1) & 1, &__b[(v25 & 1) + 1]);
        sub_20C6E8A80((uint64_t)v8, (v25 >> 2) & 1, &__b[(v25 & 3) + 3]);
        sub_20C6E8A80((uint64_t)v8, (v25 >> 3) & 1, &__b[(v25 & 7) + 7]);
        sub_20C6E8A80((uint64_t)v8, (v25 >> 4) & 1, &__b[(v25 & 0xF) + 15]);
        v24 = ((v23 - 1) >> 5) & 1;
        v21 = &__b[((v23 - 1) & 0x1F) + 31];
        v22 = (uint64_t)v8;
      }
      sub_20C6E8A80(v22, v24, v21);
LABEL_30:
      v17 += 4;
      if (v19 == v17)
        goto LABEL_31;
    }
  }
  v36 = 0x8000;
  v35 = 0x8000;
  memset_pattern16(__b, &unk_20CAF8CE0, 0x80uLL);
  v34 = 0x8000;
  if ((int)v7 >= 1)
  {
    v9 = 0;
    v10 = 0;
    v11 = 4 * v7;
    v12 = 6;
    v33 = a2;
    do
    {
      v13 = v10;
      v10 = *(_DWORD *)(a2 + 4 * *(int *)(*(_QWORD *)(a1 + 112) + v9));
      v14 = v10 - v13;
      if (v10 == v13)
      {
        sub_20C6E8A80((uint64_t)v8, 0, &v36);
      }
      else
      {
        sub_20C6E8A80((uint64_t)v8, 1, &v36);
        if ((v14 & 0x80000000) != 0)
        {
          sub_20C6E8A80((uint64_t)v8, 0, &v35);
          v14 = -v14;
        }
        else
        {
          sub_20C6E8A80((uint64_t)v8, 1, &v35);
        }
        v15 = v14 - 1;
        if (v14 > 0x3F)
        {
          sub_20C6E8A80((uint64_t)v8, 1, __b);
          sub_20C6E8A80((uint64_t)v8, 1, v38);
          sub_20C6E8A80((uint64_t)v8, 1, v39);
          sub_20C6E8A80((uint64_t)v8, 1, v40);
          sub_20C6E8A80((uint64_t)v8, 1, v41);
          sub_20C6E8A80((uint64_t)v8, 1, v42);
          sub_20C6E90B8((uint64_t)v8, v14 - 64, v12, &v34);
          v16 = v15 >> v12;
          if (!v12 || v16)
          {
            if (v16 > 1)
              ++v12;
          }
          else
          {
            --v12;
          }
        }
        else
        {
          sub_20C6E8A80((uint64_t)v8, (v15 >> 5) & 1, __b);
          sub_20C6E8A80((uint64_t)v8, (v15 >> 4) & 1, &__b[(v15 >> 5) + 1]);
          sub_20C6E8A80((uint64_t)v8, (v15 >> 3) & 1, &__b[(v15 >> 4) + 3]);
          sub_20C6E8A80((uint64_t)v8, (v15 >> 2) & 1, &__b[(v15 >> 3) + 7]);
          sub_20C6E8A80((uint64_t)v8, (v15 >> 1) & 1, &__b[(v15 >> 2) + 15]);
          sub_20C6E8A80((uint64_t)v8, v15 & 1, &__b[(v15 >> 1) + 31]);
        }
        a2 = v33;
      }
      v9 += 4;
    }
    while (v11 != v9);
  }
LABEL_31:
  v26 = sub_20C6E8BF4((uint64_t)v8);
  if (v31 >= 4)
    *v30 = v26;
  v27 = v26;
  v28 = *(_QWORD *)(a4 + 8);
  if (*(_QWORD *)a4)
    v27 = *(_QWORD *)a4 + v26;
  *(_QWORD *)a4 = v27;
  *(_QWORD *)(a4 + 8) = v28 - v26;
  return *v8;
}

uint64_t sub_20C6F7F50(uint64_t a1, int *a2)
{
  uint64_t result;
  uint64_t v4;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int *v12;
  int v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  int *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void *__p[3];

  result = 5;
  if (a2)
  {
    v4 = *(unsigned int *)(a1 + 4);
    if ((int)v4 >= 1)
    {
      LOBYTE(v27) = 0;
      v7 = (int)*sub_20C6CC340(a2, &a2[v4]);
      if ((v7 & 0x80000000) != 0)
        return 5;
      v8 = *v6;
      v9 = v8 - v7;
      if ((int)v8 - (int)v7 > (int)v4)
      {
        return 5;
      }
      else
      {
        v27 = 0;
        sub_20C6E8A00(__p, v9 + 2, &v27);
        v10 = __p[0];
        v11 = v4;
        v12 = a2;
        do
        {
          v13 = *v12++;
          ++v10[v13 - (int)v7 + 1];
          --v11;
        }
        while (v11);
        if ((v9 & 0x80000000) == 0)
        {
          v14 = (char *)__p[0] + 4;
          v15 = *(_DWORD *)__p[0];
          v16 = (v9 + 2) - 1;
          do
          {
            v15 += *v14;
            *v14++ = v15;
            --v16;
          }
          while (v16);
        }
        v17 = *(int **)(a1 + 112);
        v18 = __p[0];
        v19 = v4;
        v20 = *(_QWORD *)(a1 + 40);
        do
        {
          v21 = *v17++;
          v22 = a2[v21] - v7;
          v23 = v18[v22];
          v18[v22] = v23 + 1;
          *(_DWORD *)(v20 + 4 * v21) = v23;
          --v19;
        }
        while (v19);
        v24 = 0;
        v25 = *(_QWORD *)(a1 + 40);
        v26 = *(_QWORD *)(a1 + 112);
        do
        {
          *(_DWORD *)(v26 + 4 * *(int *)(v25 + 4 * v24)) = v24;
          ++v24;
        }
        while (v4 != v24);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_20C6F80A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2 < 4)
    return 0;
  *(_DWORD *)a1 = -290009985;
  if (a2 < 9)
    return 0;
  *(_BYTE *)(a1 + 8) = 0;
  if (a2 == 9)
    return 0;
  *(_BYTE *)(a1 + 9) = 8;
  if (((a2 - 8) & 0xFFFFFFFFFFFFFFFELL) == 2)
    return 0;
  *(_WORD *)(a1 + 10) = 0;
  if (a2 < 20)
    return 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a3 + 12);
  if (a2 == 20)
    return 0;
  *(_BYTE *)(a1 + 20) = *(_DWORD *)(a3 + 32);
  if (a2 == 21)
    return 0;
  *(_BYTE *)(a1 + 21) = *(_DWORD *)(a3 + 24);
  if (a2 == 22)
    return 0;
  *(_BYTE *)(a1 + 22) = *(_DWORD *)(a3 + 16);
  if (a2 == 23)
    return 0;
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a3 + 52);
  if (a2 == 24)
    return 0;
  *(_BYTE *)(a1 + 24) = *(_DWORD *)(a3 + 56);
  v3 = a2 - 25;
  if (a2 == 25)
    return v3;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a3 + 36) | (16 * *(_DWORD *)(a3 + 44));
  if (a2 == 26)
    return 0;
  *(_BYTE *)(a1 + 26) = *(_DWORD *)(a3 + 40);
  if (a2 == 27)
    return 0;
  *(_BYTE *)(a1 + 27) = *(_DWORD *)(a3 + 28);
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 0x1C)
    return 0;
  v3 = a1 + 32;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a3 + 20);
  return v3;
}

uint64_t sub_20C6F81C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(unsigned int **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  v8 = *(_QWORD *)a3 + 4;
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v7 - 4;
  v9 = (unsigned int *)(a1 + 3560);
  *(_DWORD *)(a1 + 3564) = (v7 - 4) & ~((v7 - 4) >> 63);
  *(_QWORD *)(a1 + 3568) = v8;
  sub_20C6E7C30(a1 + 3560);
  result = sub_20C6FD0F4((unsigned int *)a1, a2);
  if (!(_DWORD)result)
  {
    v11 = sub_20C6E8BF4((uint64_t)v9);
    if (v7 >= 4)
      *v6 = v11;
    v12 = v11;
    if (*(_QWORD *)a3)
      v12 = *(_QWORD *)a3 + v11;
    v13 = *(_QWORD *)(a3 + 8) - v11;
    *(_QWORD *)a3 = v12;
    *(_QWORD *)(a3 + 8) = v13;
    return *v9;
  }
  return result;
}

uint64_t sub_20C6F8264(unsigned int *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  _DWORD *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  _DWORD *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  _DWORD *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  _DWORD *v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  _DWORD *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  BOOL v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  BOOL v107;
  int v108;
  int v109;
  int v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  int v114;
  int v115;
  int *v116;
  int *v117;
  int v118;
  int v119;
  uint64_t v120;
  _DWORD *v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  _DWORD *v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  _DWORD *v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int *v171;
  int *v172;
  int v173;
  uint64_t v174;
  _DWORD *v175;
  _DWORD *v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int *v205;
  int *v206;
  int v207;
  _DWORD *v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  uint64_t v218;
  int v219;
  int v220;
  int v221;
  int v223;
  int v224;
  unint64_t v225;
  int v226;
  int v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  int *v232;
  int *v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int *v242;
  int *v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  int *v278;
  int *v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  int *v292;
  int *v293;
  int v294;
  int v295;
  int v296;
  int v297;
  unsigned int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  unint64_t v303;
  int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  int v308;
  int *v309;
  int *v310;
  int v311;
  unsigned int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  uint64_t v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  int v337;
  int v338;
  uint64_t v339;
  int v340;
  unsigned int v341;
  int v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  int *v346;
  int *v347;
  int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  unsigned int v358;
  unsigned int v359;
  unsigned int v360;
  int *v361;
  int *v362;
  int v363;
  int v364;
  int v365;
  int v366;
  int v367;
  int v368;
  int v369;
  int v370;
  int v371;
  int v372;
  unsigned int v373;
  unsigned int v374;
  unsigned int v375;
  int *v376;
  int *v377;
  int v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  uint64_t v389;
  int v390;
  int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  uint64_t v403;
  int v404;
  int v405;
  int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  int *v411;
  int *v412;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  int v426;
  int v427;
  int v428;
  unsigned int v429;
  unsigned int v430;
  int *v432;
  int *v433;
  int v434;
  int v435;
  int v436;
  signed int v437;
  signed int v438;
  _BOOL4 v439;
  uint64_t v440;
  char *v441;
  void *v442;
  void *v443;
  char *v444;
  void *v445;
  void *v446;
  void *v447;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  unsigned int v458;
  int v459;
  int v460;
  int v461;
  int v462;
  unsigned int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  int v480;
  int v481;
  int v482;
  unsigned int v483;
  unsigned int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  unsigned int v489;
  int v490;
  unsigned int v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  int v501;
  int v502;
  int v503;
  int v504;
  int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  int v514;
  int v515;
  int v516;
  unsigned __int8 *v517;
  _QWORD *v518;
  uint64_t v520;
  unsigned int v521;
  uint64_t v522;
  _QWORD *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  int v528;
  int v529;
  unsigned int v530;
  int v531;
  int v532;
  unsigned int v533;
  int v534;
  int v535;
  unsigned int v536;
  int v537;
  int v538;
  int v539;
  int v540;
  int v541;
  int v542;
  int v543;
  int v544;
  int v545;
  int v546;
  int v547;
  int v548;
  int v549;
  int v550;
  int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  int v556;
  int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  __int16 v562;
  unsigned __int16 v563;
  unsigned __int16 v564;
  unsigned __int16 v565;
  unsigned __int16 v566;
  unsigned __int16 __b;
  unsigned __int16 v568;
  unsigned __int16 v569;
  void *__p;
  void *v571;
  uint64_t v572;
  _OWORD v573[15];
  _OWORD v574[7];
  uint64_t v575;
  uint64_t v576;

  v2 = a1;
  v576 = *MEMORY[0x24BDAC8D0];
  v524 = *a1;
  v3 = a1[780];
  v520 = *((_QWORD *)a1 + 384);
  v5 = a1 + 46;
  v4 = *((_QWORD *)a1 + 23);
  v6 = ~(-1 << (*(_DWORD *)(a2 + 4) - 1));
  __p = 0;
  v571 = 0;
  v572 = 0;
  sub_20C6F1AD8((_QWORD *)a1 + 23, (_QWORD *)a1 + 29, (_QWORD *)a1 + 26, (uint64_t *)a1 + 26, -1431655765 * ((unint64_t)(*((_QWORD *)a1 + 24) - v4) >> 2), (uint64_t *)&__p, v6);
  v7 = 0;
  v575 = 0;
  v523 = v5 + 704;
  memset(v574, 0, sizeof(v574));
  memset(v573, 0, sizeof(v573));
  do
  {
    sub_20C6EC678((uint64_t)v573 + v7, v3);
    v7 += 120;
  }
  while (v7 != 360);
  memset_pattern16(&__b, &unk_20CAF8CE0, 6uLL);
  memset_pattern16(&v564, &unk_20CAF8CE0, 6uLL);
  v563 = 0x8000;
  v562 = 0x8000;
  v8 = v520;
  if ((int)v524 > 0)
  {
    v9 = 0;
    v10 = *(_DWORD *)(a2 + 16);
    v11 = (_BYTE *)(a2 + 8);
    v522 = (uint64_t)(v2 + 445);
    v517 = (unsigned __int8 *)(a2 + 8);
    v518 = v2;
    v521 = v3;
    v507 = v6;
    v508 = v10;
    do
    {
      v12 = *(int *)(v2[11] + 4 * v9);
      if (v10 && !*(_BYTE *)(v2[387] + v12))
        goto LABEL_742;
      v13 = (_DWORD *)(v8 + 4 * (int)v12 * (int)v3);
      v14 = *v13 - v6;
      v15 = v13[1] - v6;
      if (v14 >= 0)
        v16 = *v13 - v6;
      else
        v16 = v6 - *v13;
      if (v15 >= 0)
        v17 = v15;
      else
        v17 = -v15;
      v18 = v6 - v16;
      v19 = v17 - v6;
      if (v14 >= 0)
        v19 = v6 - v17;
      v20 = v16 - v6;
      if (v15 >= 0)
        v21 = v18;
      else
        v21 = v20;
      v22 = v18 - v17;
      v561 = v22;
      if (v22 < 0)
        v23 = v19;
      else
        v23 = v14;
      if (v22 < 0)
        v24 = v21;
      else
        v24 = v15;
      v559 = v23;
      v560 = v24;
      v25 = 3 * v12;
      v26 = (int *)((char *)__p + 12 * v12);
      v27 = *v26;
      v556 = *v26;
      v28 = v26[1];
      v557 = v28;
      v29 = v26[2];
      v558 = v29;
      v30 = (int *)(v2[17] + 4 * v25);
      v31 = *v30;
      v32 = v30[1];
      v33 = v30[2];
      v34 = (int *)(v2[20] + 4 * v25);
      v35 = v34[2];
      if ((_DWORD)v35 == -1
        || (v36 = *v34, v37 = v34[1], v10)
        && ((v38 = v2[387], !*(_BYTE *)(v38 + v31))
         || !*(_BYTE *)(v38 + v32)
         || !*(_BYTE *)(v38 + v33)
         || !*(_BYTE *)(v38 + v36)
         || !*(_BYTE *)(v38 + v37)
         || !*(_BYTE *)(v38 + v35)))
      {
        if ((_DWORD)v33 == -1
          || v10 && ((v120 = v2[387], !*(_BYTE *)(v120 + v31)) || !*(_BYTE *)(v120 + v32) || !*(_BYTE *)(v120 + v33)))
        {
          if ((_DWORD)v32 != -1)
          {
            if (!v10 || (v174 = v2[387], *(_BYTE *)(v174 + v31)) && *(_BYTE *)(v174 + v32))
            {
              v175 = (_DWORD *)(v8 + 4 * (int)v31 * (int)v3);
              v176 = (_DWORD *)(v8 + 4 * (int)v32 * (int)v3);
              v177 = *v175 - v6;
              v178 = v175[1] - v6;
              if (v177 >= 0)
                v179 = v177;
              else
                v179 = -v177;
              if (v178 >= 0)
                v180 = v178;
              else
                v180 = -v178;
              v181 = v6 - v179;
              v182 = v180 - v6;
              if (v177 >= 0)
                v182 = v6 - v180;
              v183 = v179 - v6;
              if (v178 >= 0)
                v183 = v181;
              v184 = v181 - v180;
              if (v181 - v180 < 0)
              {
                v177 = v182;
                v178 = v183;
              }
              v185 = *v176 - v6;
              v186 = v176[1] - v6;
              if (v185 >= 0)
                v187 = v185;
              else
                v187 = -v185;
              if (v186 >= 0)
                v188 = v186;
              else
                v188 = -v186;
              v189 = v6 - v187;
              v190 = v188 - v6;
              if (v185 >= 0)
                v190 = v6 - v188;
              v191 = v187 - v6;
              if (v186 >= 0)
                v191 = v189;
              v192 = v189 - v188;
              if (v192 < 0)
                v186 = v191;
              else
                v190 = v185;
              v193 = v29 * (uint64_t)v184 + v27 * (uint64_t)v177 + v28 * (uint64_t)v178;
              if (v193 >= 0)
                v194 = v27;
              else
                v194 = -v27;
              if (v193 >= 0)
                v195 = v28;
              else
                v195 = -v28;
              if (v193 >= 0)
                v196 = v29;
              else
                v196 = -v29;
              v531 = v194;
              v528 = v195;
              v197 = v177 + v190;
              v198 = v178 + v186;
              v199 = v184 + v192;
              v200 = v197 + 2;
              if (v197 + 1 >= 0)
                v200 = v197 + 1;
              v201 = v200 >> 1;
              if (v198 + 1 >= 0)
                v202 = v198 + 1;
              else
                v202 = v198 + 2;
              v203 = v202 >> 1;
              v204 = v199 + 2;
              if (v199 + 1 >= 0)
                v204 = v199 + 1;
              v555 = v201;
              v554 = v203;
              v553 = v23;
              v552 = v24;
              v551 = v23;
              v550 = v24;
              if (v27 < 0)
                v27 = -v27;
              if (v28 < 0)
                v28 = -v28;
              if (v29 < 0)
                v29 = -v29;
              if (v27 >= v28 && v27 >= v29)
              {
                v205 = &v531;
                v206 = &v553;
                v207 = v23;
                goto LABEL_371;
              }
              if (v28 >= v29)
              {
                v205 = &v528;
                v206 = &v552;
                v207 = v24;
                v194 = v195;
LABEL_371:
                *v206 = v22;
                *v205 = v196;
                v237 = v553;
                v196 = v194;
              }
              else
              {
                v237 = v23;
                v207 = v22;
              }
              if (v196 >= 0)
                v262 = v196;
              else
                v262 = -v196;
              if (v196 >= 0)
                v263 = v207;
              else
                v263 = -v207;
              v264 = v552;
              if (v263 < 0)
              {
                if (v552 >= 0)
                  v266 = v552;
                else
                  v266 = -v552;
                v267 = v266 - v6;
                v268 = v6 - v266;
                if (v237 >= 0)
                  v265 = v268;
                else
                  v265 = v267;
                if (v237 >= 0)
                  v269 = v237;
                else
                  v269 = -v237;
                if (v552 < 0)
                  v264 = v269 - v6;
                else
                  v264 = v6 - v269;
              }
              else
              {
                v265 = v237;
              }
              v406 = v204 >> 1;
              if (v201 >= 0)
                v407 = v201;
              else
                v407 = -v201;
              if (v203 >= 0)
                v408 = v203;
              else
                v408 = -v203;
              if (v406 >= 0)
                v409 = v406;
              else
                v409 = -v406;
              if (v407 >= v408 && v407 >= v409)
              {
                v411 = &v555;
                v412 = &v551;
                v409 = v407;
LABEL_673:
                *v412 = v22;
                v22 = v23;
                *v411 = v406;
                v23 = v551;
                v406 = v201;
              }
              else if (v408 >= v409)
              {
                v411 = &v554;
                v412 = &v550;
                v409 = v408;
                v23 = v24;
                v201 = v203;
                goto LABEL_673;
              }
              if (v406 >= 0)
                v413 = v22;
              else
                v413 = -v22;
              v414 = v550;
              v527 = v9;
              if (v413 < 0)
              {
                if (v550 >= 0)
                  v416 = v550;
                else
                  v416 = -v550;
                v417 = v416 - v6;
                v418 = v6 - v416;
                if (v23 >= 0)
                  v415 = v418;
                else
                  v415 = v417;
                if (v23 < 0)
                  v23 = -v23;
                if (v550 < 0)
                  v414 = v23 - v6;
                else
                  v414 = v6 - v23;
              }
              else
              {
                v415 = v23;
              }
              v419 = v531;
              v420 = v265 - v531;
              v421 = v528;
              v537 = v265 - v531;
              v538 = v264 - v528;
              v539 = v263 - v262;
              v422 = v555;
              v423 = v415 - v555;
              v424 = v554;
              v534 = v415 - v555;
              v535 = v414 - v554;
              v536 = v413 - v409;
              if (*(_BYTE *)(a2 + 24))
              {
                v493 = v554;
                v496 = v555;
                v499 = v415;
                v502 = v414;
                v506 = v413;
                v512 = v528;
                v516 = v531;
                v425 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v563 + 2048) >> 10) & 0x7CLL));
                v426 = sub_20C70767C(&v537, v521, *v517, (unsigned __int16 **)v573);
                v427 = *(_DWORD *)((char *)&unk_20CAF8E3C
                                 + (((67584 - (unint64_t)v563) >> 10) & 0x3FFFFFFFFFFFFCLL));
                v428 = sub_20C70767C(&v534, v521, *v517, (unsigned __int16 **)v573);
                goto LABEL_730;
              }
LABEL_731:
              if ((int)v521 >= 1)
              {
                if (v420 < 0)
                  v420 = -v420;
                v437 = -(v521 * __clz(v420 + 1));
                if (v423 < 0)
                  v423 = -v423;
                v438 = -(v521 * __clz(v423 + 1));
                v2 = v518;
                v9 = v527;
                goto LABEL_737;
              }
              v439 = 0;
              v2 = v518;
              v9 = v527;
LABEL_740:
              v556 = v419;
              v557 = v421;
              v558 = v262;
              v559 = v265;
              v560 = v264;
              v561 = v263;
              sub_20C6E8A80(v522, v439, &v563);
              v341 = 0;
              v3 = v521;
              v8 = v520;
              v11 = (_BYTE *)(a2 + 8);
              goto LABEL_741;
            }
          }
          if ((_DWORD)v31 == -1 || v10 && !*(_BYTE *)(v2[387] + v31))
          {
            v225 = v27 * (uint64_t)v23 + v28 * (uint64_t)v24 + v29 * (uint64_t)v22;
            if ((v225 & 0x8000000000000000) != 0)
            {
              v556 = -v27;
              v557 = -v28;
              v558 = -v29;
            }
            sub_20C6E8A80(v522, v225 >> 63, &v562);
            v226 = v561;
            v227 = v557;
            v228 = v558;
            if (v556 >= 0)
              v229 = v556;
            else
              v229 = -v556;
            if (v557 >= 0)
              v230 = v557;
            else
              v230 = -v557;
            if (v558 >= 0)
              v231 = v558;
            else
              v231 = -v558;
            if (v229 >= v230 && v229 >= v231)
            {
              v232 = &v556;
              v233 = &v559;
              v227 = v556;
              goto LABEL_315;
            }
            v232 = &v557;
            v233 = &v560;
            if (v230 >= v231)
            {
LABEL_315:
              v238 = *v233;
              *v233 = v561;
              v561 = v238;
              *v232 = v228;
              v558 = v227;
              v226 = v238;
              v228 = v227;
            }
            if (v228 < 0)
            {
              v558 = -v228;
              v226 = -v226;
              v561 = v226;
            }
            v239 = v559;
            v240 = v560;
            if (v226 < 0)
            {
              if (v560 >= 0)
                v260 = v560;
              else
                v260 = -v560;
              v261 = v260 - v6;
              v241 = v6 - v260;
              if (v559 < 0)
              {
                v241 = v261;
                v239 = -v559;
              }
              if (v560 < 0)
                v240 = v239 - v6;
              else
                v240 = v6 - v239;
            }
            else
            {
              v241 = v559;
            }
            v341 = 0;
            v559 = v241;
            v560 = v240;
            goto LABEL_741;
          }
          v208 = (_DWORD *)(v8 + 4 * (int)v31 * (int)v3);
          v209 = *v208 - v6;
          v210 = v208[1] - v6;
          if (v209 >= 0)
            v211 = *v208 - v6;
          else
            v211 = v6 - *v208;
          if (v210 >= 0)
            v212 = v210;
          else
            v212 = -v210;
          v213 = v6 - v211;
          v214 = v212 - v6;
          if (v209 >= 0)
            v214 = v6 - v212;
          v215 = v211 - v6;
          if (v210 >= 0)
            v216 = v213;
          else
            v216 = v215;
          v217 = v213 - v212;
          if (v213 - v212 < 0)
          {
            v209 = v214;
            v210 = v216;
          }
          v531 = v209;
          v528 = v210;
          v218 = v29 * (uint64_t)v217 + v27 * (uint64_t)v209 + v28 * (uint64_t)v210;
          if (v218 >= 0)
            v219 = v27;
          else
            v219 = -v27;
          if (v218 >= 0)
            v220 = v28;
          else
            v220 = -v28;
          if (v218 >= 0)
            v221 = v29;
          else
            v221 = -v29;
          v555 = v219;
          v554 = v220;
          v553 = v23;
          v552 = v24;
          v551 = v23;
          v550 = v24;
          if (v27 < 0)
            v27 = -v27;
          if (v28 < 0)
            v28 = -v28;
          if (v29 < 0)
            v29 = -v29;
          if (v27 >= v28 && v27 >= v29)
          {
            v242 = &v555;
            v243 = &v553;
            v224 = v23;
          }
          else
          {
            if (v28 < v29)
            {
              v223 = v23;
              v224 = v22;
              goto LABEL_393;
            }
            v242 = &v554;
            v243 = &v552;
            v224 = v24;
            v219 = v220;
          }
          *v243 = v22;
          *v242 = v221;
          v223 = v553;
          v221 = v219;
LABEL_393:
          if (v221 >= 0)
            v262 = v221;
          else
            v262 = -v221;
          if (v221 >= 0)
            v263 = v224;
          else
            v263 = -v224;
          v264 = v552;
          if (v263 < 0)
          {
            if (v552 >= 0)
              v270 = v552;
            else
              v270 = -v552;
            v271 = v270 - v6;
            v272 = v6 - v270;
            if (v223 >= 0)
              v265 = v272;
            else
              v265 = v271;
            if (v223 >= 0)
              v273 = v223;
            else
              v273 = -v223;
            if (v552 < 0)
              v264 = v273 - v6;
            else
              v264 = v6 - v273;
          }
          else
          {
            v265 = v223;
          }
          if (v209 >= 0)
            v429 = v209;
          else
            v429 = -v209;
          if (v210 >= 0)
            v430 = v210;
          else
            v430 = -v210;
          if (v217 >= 0)
            v409 = v217;
          else
            v409 = -v217;
          if (v429 >= v430 && v429 >= v409)
          {
            v432 = &v531;
            v433 = &v551;
            v409 = v429;
LABEL_711:
            *v433 = v22;
            v22 = v23;
            *v432 = v217;
            v23 = v551;
            v217 = v209;
          }
          else if (v430 >= v409)
          {
            v432 = &v528;
            v433 = &v550;
            v409 = v430;
            v23 = v24;
            v209 = v210;
            goto LABEL_711;
          }
          if (v217 >= 0)
            v413 = v22;
          else
            v413 = -v22;
          v414 = v550;
          v527 = v9;
          if (v413 < 0)
          {
            if (v550 >= 0)
              v434 = v550;
            else
              v434 = -v550;
            v435 = v434 - v6;
            v436 = v6 - v434;
            if (v23 >= 0)
              v415 = v436;
            else
              v415 = v435;
            if (v23 < 0)
              v23 = -v23;
            if (v550 < 0)
              v414 = v23 - v6;
            else
              v414 = v6 - v23;
          }
          else
          {
            v415 = v23;
          }
          v419 = v555;
          v420 = v265 - v555;
          v421 = v554;
          v537 = v265 - v555;
          v538 = v264 - v554;
          v539 = v263 - v262;
          v422 = v531;
          v423 = v415 - v531;
          v424 = v528;
          v534 = v415 - v531;
          v535 = v414 - v528;
          v536 = v413 - v409;
          if (!*(_BYTE *)(a2 + 24))
            goto LABEL_731;
          v493 = v528;
          v496 = v531;
          v499 = v415;
          v502 = v414;
          v506 = v413;
          v512 = v554;
          v516 = v555;
          v425 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v563 + 2048) >> 10) & 0x7CLL));
          v426 = sub_20C70767C(&v537, v521, *v517, (unsigned __int16 **)v573);
          v427 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v563) >> 10) & 0x3FFFFFFFFFFFFCLL));
          v428 = sub_20C70767C(&v534, v521, *v517, (unsigned __int16 **)v573);
LABEL_730:
          v437 = v426 + v425;
          v438 = v428 + v427;
          v2 = v518;
          v9 = v527;
          v6 = v507;
          v10 = v508;
          v421 = v512;
          v419 = v516;
          v414 = v502;
          v413 = v506;
          v422 = v496;
          v415 = v499;
          v424 = v493;
LABEL_737:
          if (v437 > v438)
          {
            v419 = v422;
            v421 = v424;
            v262 = v409;
            v265 = v415;
            v264 = v414;
            v263 = v413;
          }
          v439 = v437 > v438;
          goto LABEL_740;
        }
        v121 = (_DWORD *)(v8 + 4 * (int)v31 * (int)v3);
        v122 = v121[1];
        v123 = *v121 - v6;
        v124 = v122 - v6;
        if (v123 >= 0)
          v125 = v123;
        else
          v125 = -v123;
        if (v124 >= 0)
          v126 = v122 - v6;
        else
          v126 = v6 - v122;
        v127 = v6 - v125;
        v128 = v6 - v125 - v126;
        if (v128 < 0)
        {
          v129 = v126 - v6;
          v130 = v6 - v126;
          if (v123 >= 0)
            v123 = v130;
          else
            v123 = v129;
          v131 = v125 - v6;
          if (v124 >= 0)
            v124 = v127;
          else
            v124 = v131;
        }
        v132 = (_DWORD *)(v8 + 4 * (int)v32 * (int)v3);
        v133 = *v132 - v6;
        v134 = v132[1] - v6;
        if (v133 >= 0)
          v135 = *v132 - v6;
        else
          v135 = v6 - *v132;
        if (v134 >= 0)
          v136 = v134;
        else
          v136 = -v134;
        v137 = v6 - v135;
        v138 = v6 - v135 - v136;
        if (v138 < 0)
        {
          v139 = v136 - v6;
          v140 = v6 - v136;
          if (v133 >= 0)
            v133 = v140;
          else
            v133 = v139;
          v141 = v135 - v6;
          if (v134 >= 0)
            v134 = v137;
          else
            v134 = v141;
        }
        v142 = (_DWORD *)(v8 + 4 * (int)v33 * (int)v3);
        v143 = *v142 - v6;
        v144 = v142[1] - v6;
        if (v143 >= 0)
          v145 = *v142 - v6;
        else
          v145 = v6 - *v142;
        if (v144 >= 0)
          v146 = v142[1] - v6;
        else
          v146 = v6 - v142[1];
        v147 = v6 - v145;
        v148 = v6 - v145 - v146;
        if (v148 < 0)
        {
          v149 = v146 - v6;
          v150 = v6 - v146;
          if (v143 >= 0)
            v143 = v150;
          else
            v143 = v149;
          v151 = v145 - v6;
          if (v144 >= 0)
            v144 = v147;
          else
            v144 = v151;
        }
        v152 = v29 * (uint64_t)v128 + v27 * (uint64_t)v123 + v28 * (uint64_t)v124;
        if (v152 >= 0)
          v153 = v27;
        else
          v153 = -v27;
        if (v152 >= 0)
          v154 = v28;
        else
          v154 = -v28;
        if (v152 >= 0)
          v155 = v29;
        else
          v155 = -v29;
        v555 = v153;
        v554 = v154;
        v156 = v133 + v123;
        v157 = v134 + v124;
        v158 = v138 + v128;
        v159 = v156 - v143;
        v160 = v134 + v124 - v144;
        v553 = v156 - v143;
        v552 = v160;
        v161 = v156 + 1;
        v162 = v157 + 1;
        v163 = v158 + 1;
        if (v156 + 1 >= 0)
          v164 = v156 + 1;
        else
          v164 = v156 + 2;
        v165 = v164 >> 1;
        v166 = v157 + 2;
        if (v162 >= 0)
          v166 = v157 + 1;
        v167 = v166 >> 1;
        v551 = v165;
        v550 = v166 >> 1;
        v168 = (v161 + v143) / 3;
        v169 = (v162 + v144) / 3;
        v549 = v168;
        v548 = v169;
        if (v163 >= 0)
          v170 = v158 + 1;
        else
          v170 = v158 + 2;
        v547 = v23;
        v546 = v24;
        v545 = v23;
        v544 = v24;
        v543 = v23;
        v542 = v24;
        v541 = v23;
        v540 = v24;
        if (v27 < 0)
          v27 = -v27;
        if (v28 < 0)
          v28 = -v28;
        if (v29 < 0)
          v29 = -v29;
        if (v27 >= v28 && v27 >= v29)
        {
          v171 = &v555;
          v172 = &v547;
          v173 = v23;
          goto LABEL_343;
        }
        if (v28 >= v29)
        {
          v171 = &v554;
          v172 = &v546;
          v173 = v24;
          v153 = v154;
LABEL_343:
          *v172 = v22;
          *v171 = v155;
          v236 = v547;
          v155 = v153;
        }
        else
        {
          v236 = v23;
          v173 = v22;
        }
        if (v155 >= 0)
          v252 = v173;
        else
          v252 = -v173;
        if (v155 >= 0)
          v253 = v155;
        else
          v253 = -v155;
        v254 = v546;
        if (v252 < 0)
        {
          if (v546 >= 0)
            v256 = v546;
          else
            v256 = -v546;
          v257 = v256 - v6;
          v258 = v6 - v256;
          if (v236 >= 0)
            v255 = v258;
          else
            v255 = v257;
          if (v236 >= 0)
            v259 = v236;
          else
            v259 = -v236;
          if (v546 < 0)
            v254 = v259 - v6;
          else
            v254 = v6 - v259;
        }
        else
        {
          v255 = v236;
        }
        v342 = v158 - v148;
        v547 = v255;
        v546 = v254;
        if (v159 >= 0)
          v343 = v159;
        else
          v343 = -v159;
        if (v160 >= 0)
          v344 = v160;
        else
          v344 = -v160;
        if (v342 >= 0)
          v345 = v158 - v148;
        else
          v345 = v148 - v158;
        if (v343 >= v344 && v343 >= v345)
        {
          v346 = &v553;
          v347 = &v545;
          v345 = v343;
          v348 = v23;
          goto LABEL_547;
        }
        if (v344 >= v345)
        {
          v346 = &v552;
          v347 = &v544;
          v345 = v344;
          v348 = v24;
          v159 = v160;
LABEL_547:
          *v347 = v22;
          *v346 = v342;
          v349 = v545;
          v342 = v159;
        }
        else
        {
          v349 = v23;
          v348 = v22;
        }
        if (v342 >= 0)
          v350 = v348;
        else
          v350 = -v348;
        v351 = v544;
        if (v350 < 0)
        {
          if (v544 >= 0)
            v353 = v544;
          else
            v353 = -v544;
          v354 = v353 - v6;
          v355 = v6 - v353;
          if (v349 >= 0)
            v352 = v355;
          else
            v352 = v354;
          if (v349 >= 0)
            v356 = v349;
          else
            v356 = -v349;
          if (v544 < 0)
            v351 = v356 - v6;
          else
            v351 = v6 - v356;
        }
        else
        {
          v352 = v349;
        }
        v357 = v170 >> 1;
        v545 = v352;
        v544 = v351;
        if (v165 >= 0)
          v358 = v165;
        else
          v358 = -v165;
        if (v167 >= 0)
          v359 = v167;
        else
          v359 = -v167;
        if (v357 >= 0)
          v360 = v170 >> 1;
        else
          v360 = -v357;
        if (v358 >= v359 && v358 >= v360)
        {
          v361 = &v551;
          v362 = &v543;
          v363 = v23;
          goto LABEL_580;
        }
        if (v359 >= v360)
        {
          v361 = &v550;
          v362 = &v542;
          v358 = v359;
          v363 = v24;
          v165 = v167;
LABEL_580:
          *v362 = v22;
          *v361 = v357;
          v364 = v543;
          v357 = v165;
          v360 = v358;
        }
        else
        {
          v364 = v23;
          v363 = v22;
        }
        if (v357 >= 0)
          v365 = v363;
        else
          v365 = -v363;
        v366 = v542;
        if (v365 < 0)
        {
          if (v542 >= 0)
            v368 = v542;
          else
            v368 = -v542;
          v369 = v368 - v6;
          v370 = v6 - v368;
          if (v364 >= 0)
            v367 = v370;
          else
            v367 = v369;
          if (v364 >= 0)
            v371 = v364;
          else
            v371 = -v364;
          if (v542 < 0)
            v366 = v371 - v6;
          else
            v366 = v6 - v371;
        }
        else
        {
          v367 = v364;
        }
        v372 = (v163 + v148) / 3;
        v543 = v367;
        v542 = v366;
        if (v168 >= 0)
          v373 = v168;
        else
          v373 = -v168;
        if (v169 >= 0)
          v374 = v169;
        else
          v374 = -v169;
        if (v372 >= 0)
          v375 = v372;
        else
          v375 = -v372;
        if (v373 >= v374 && v373 >= v375)
        {
          v376 = &v549;
          v377 = &v541;
          v375 = v373;
          goto LABEL_612;
        }
        if (v374 >= v375)
        {
          v376 = &v548;
          v377 = &v540;
          v375 = v374;
          v23 = v24;
          v168 = v169;
LABEL_612:
          *v377 = v22;
          v22 = v23;
          *v376 = v372;
          v23 = v541;
          v372 = v168;
        }
        if (v372 >= 0)
          v378 = v22;
        else
          v378 = -v22;
        v379 = v540;
        v526 = v9;
        if (v378 < 0)
        {
          if (v540 >= 0)
            v381 = v540;
          else
            v381 = -v540;
          v382 = v381 - v6;
          v383 = v6 - v381;
          if (v23 >= 0)
            v380 = v383;
          else
            v380 = v382;
          if (v23 < 0)
            v23 = -v23;
          if (v540 < 0)
            v379 = v23 - v6;
          else
            v379 = v6 - v23;
        }
        else
        {
          v380 = v23;
        }
        v541 = v380;
        v540 = v379;
        v384 = v555;
        v385 = v255 - v555;
        v515 = v554;
        v537 = v255 - v555;
        v538 = v254 - v554;
        v539 = v252 - v253;
        v511 = v553;
        v386 = v352 - v553;
        v505 = v552;
        v534 = v352 - v553;
        v535 = v351 - v552;
        v536 = v350 - v345;
        v456 = v551;
        v387 = v367 - v551;
        v454 = v550;
        v531 = v367 - v551;
        v532 = v366 - v550;
        v533 = v365 - v360;
        v452 = v549;
        v388 = v380 - v549;
        v450 = v548;
        v528 = v380 - v549;
        v529 = v379 - v548;
        v530 = v378 - v375;
        v458 = v375;
        if (*(_BYTE *)(a2 + 24))
        {
          v470 = v555;
          v472 = v380;
          v474 = v379;
          v476 = v378;
          v478 = v367;
          v480 = v366;
          v482 = v365;
          v484 = v360;
          v486 = v352;
          v488 = v351;
          v490 = v350;
          v491 = v345;
          v495 = v253;
          v498 = v254;
          v501 = v252;
          v466 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v568 + 2048) >> 10) & 0x7CLL));
          v468 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((__b + 2048) >> 10) & 0x7CLL));
          v464 = sub_20C70767C(&v537, v3, *v11, (unsigned __int16 **)&v573[7] + 1);
          v389 = v3;
          v460 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v569 + 2048) >> 10) & 0x7CLL));
          v462 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)__b) >> 10) & 0x3FFFFFFFFFFFFCLL));
          v390 = sub_20C70767C(&v534, v3, *v11, (unsigned __int16 **)&v573[7] + 1);
          v391 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((__b + 2048) >> 10) & 0x7CLL));
          v392 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v568) >> 10) & 0x3FFFFFFFFFFFFCLL));
          v393 = sub_20C70767C(&v531, v3, *v11, (unsigned __int16 **)&v573[7] + 1);
          v394 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)__b) >> 10) & 0x3FFFFFFFFFFFFCLL));
          v395 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v569) >> 10) & 0x3FFFFFFFFFFFFCLL));
          v396 = sub_20C70767C(&v528, v389, *v11, (unsigned __int16 **)&v573[7] + 1);
          v397 = v466 + v468 + v464;
          v398 = v460 + v462 + v390;
          v399 = v392 + v391 + v393;
          v400 = v395 + v394 + v396;
          v2 = v518;
          v3 = v389;
          v8 = v520;
          v9 = v526;
          v6 = v507;
          v254 = v498;
          v252 = v501;
          v253 = v495;
          v350 = v490;
          v345 = v491;
          v352 = v486;
          v351 = v488;
          v365 = v482;
          v360 = v484;
          v367 = v478;
          v366 = v480;
          v379 = v474;
          v378 = v476;
          v384 = v470;
          v380 = v472;
        }
        else
        {
          if ((int)v3 < 1)
          {
            v397 = 0;
            v398 = 0;
            v399 = 0;
            v400 = 0;
          }
          else
          {
            if (v385 < 0)
              v385 = v555 - v255;
            v397 = -(v3 * __clz(v385 + 1));
            if (v386 < 0)
              v386 = v553 - v352;
            v398 = -(v3 * __clz(v386 + 1));
            if (v387 < 0)
              v387 = v551 - v367;
            v399 = -(v3 * __clz(v387 + 1));
            if (v388 < 0)
              v388 = v549 - v380;
            v400 = -(v3 * __clz(v388 + 1));
          }
          v2 = v518;
          v8 = v520;
        }
        if (v397 > v398 || v397 > v399 || v397 > v400)
        {
          if (v398 > v399 || v398 > v400)
          {
            if (v399 <= v400)
            {
              v405 = v367;
              v402 = 0;
              v556 = v456;
              v557 = v454;
              v401 = 1;
              v558 = v360;
              v254 = v366;
              v252 = v365;
              v403 = 1;
              v559 = v405;
            }
            else
            {
              v556 = v452;
              v557 = v450;
              v401 = 1;
              v254 = v379;
              v558 = v458;
              v252 = v378;
              v402 = 1;
              v403 = 2;
              v559 = v380;
            }
          }
          else
          {
            v404 = v345;
            v401 = 0;
            v556 = v511;
            v557 = v505;
            v402 = 1;
            v558 = v404;
            v254 = v351;
            v252 = v350;
            v403 = 2;
            v559 = v352;
          }
        }
        else
        {
          v401 = 0;
          v402 = 0;
          v556 = v384;
          v557 = v515;
          v558 = v253;
          v403 = 1;
          v559 = v255;
        }
        v560 = v254;
        v561 = v252;
        sub_20C6E8A80(v522, v402, &__b);
        sub_20C6E8A80(v522, v401, &__b + v403);
        v341 = 1;
        goto LABEL_655;
      }
      v39 = (_DWORD *)(v8 + 4 * (int)v31 * (int)v3);
      v40 = v39[1];
      v41 = *v39 - v6;
      v42 = v40 - v6;
      if (v41 >= 0)
        v43 = v41;
      else
        v43 = -v41;
      if (v42 >= 0)
        v44 = v40 - v6;
      else
        v44 = v6 - v40;
      v45 = v6 - v43;
      v46 = v6 - v43 - v44;
      if (v46 < 0)
      {
        v47 = v44 - v6;
        v48 = v6 - v44;
        if (v41 >= 0)
          v41 = v48;
        else
          v41 = v47;
        v49 = v43 - v6;
        if (v42 >= 0)
          v42 = v45;
        else
          v42 = v49;
      }
      v50 = (_DWORD *)(v8 + 4 * (int)v32 * (int)v3);
      v51 = *v50 - v6;
      v52 = v50[1] - v6;
      if (v51 >= 0)
        v53 = *v50 - v6;
      else
        v53 = v6 - *v50;
      if (v52 >= 0)
        v54 = v52;
      else
        v54 = -v52;
      v55 = v6 - v53;
      v56 = v6 - v53 - v54;
      if (v56 < 0)
      {
        v57 = v54 - v6;
        v58 = v6 - v54;
        if (v51 >= 0)
          v51 = v58;
        else
          v51 = v57;
        v59 = v53 - v6;
        if (v52 >= 0)
          v52 = v55;
        else
          v52 = v59;
      }
      v60 = (_DWORD *)(v8 + 4 * (int)v33 * (int)v3);
      v61 = *v60 - v6;
      v62 = v60[1] - v6;
      if (v61 >= 0)
        v63 = *v60 - v6;
      else
        v63 = v6 - *v60;
      if (v62 >= 0)
        v64 = v62;
      else
        v64 = -v62;
      v65 = v6 - v63;
      v503 = v6 - v63 - v64;
      if (v503 < 0)
      {
        v66 = v64 - v6;
        v67 = v6 - v64;
        if (v61 >= 0)
          v61 = v67;
        else
          v61 = v66;
        v68 = v63 - v6;
        if (v62 >= 0)
          v62 = v65;
        else
          v62 = v68;
      }
      v69 = (_DWORD *)(v8 + 4 * (int)v36 * (int)v3);
      v70 = *v69 - v6;
      v71 = v69[1] - v6;
      if (v70 >= 0)
        v72 = *v69 - v6;
      else
        v72 = v6 - *v69;
      if (v71 >= 0)
        v73 = v71;
      else
        v73 = -v71;
      v74 = v6 - v72;
      v509 = v6 - v72 - v73;
      v525 = v9;
      v75 = v56;
      if (v509 < 0)
      {
        v76 = v73 - v6;
        v77 = v6 - v73;
        if (v70 >= 0)
          v70 = v77;
        else
          v70 = v76;
        v78 = v72 - v6;
        if (v71 >= 0)
          v71 = v74;
        else
          v71 = v78;
      }
      v79 = (_DWORD *)(v8 + 4 * (int)v37 * (int)v3);
      v80 = *v79 - v6;
      v81 = v79[1] - v6;
      if (v80 >= 0)
        v82 = *v79 - v6;
      else
        v82 = v6 - *v79;
      if (v81 >= 0)
        v83 = v81;
      else
        v83 = -v81;
      v84 = v6 - v82;
      v513 = v6 - v82 - v83;
      if (v513 < 0)
      {
        v85 = v83 - v6;
        v86 = v6 - v83;
        if (v80 >= 0)
          v80 = v86;
        else
          v80 = v85;
        v87 = v82 - v6;
        if (v81 >= 0)
          v81 = v84;
        else
          v81 = v87;
      }
      v88 = (_DWORD *)(v8 + 4 * (int)v35 * (int)v3);
      v89 = *v88 - v6;
      v90 = v88[1] - v6;
      if (v89 >= 0)
        v91 = *v88 - v6;
      else
        v91 = v6 - *v88;
      if (v90 >= 0)
        v92 = v90;
      else
        v92 = -v90;
      v93 = v6 - v91;
      v94 = v6 - v91 - v92;
      if (v94 < 0)
      {
        v95 = v92 - v6;
        v96 = v6 - v92;
        if (v89 >= 0)
          v89 = v96;
        else
          v89 = v95;
        v97 = v91 - v6;
        if (v90 >= 0)
          v90 = v93;
        else
          v90 = v97;
      }
      v98 = v29 * (uint64_t)v46 + v27 * (uint64_t)v41 + v28 * (uint64_t)v42;
      v99 = v98 < 0;
      if (v98 >= 0)
        v100 = v27;
      else
        v100 = -v27;
      if (v98 >= 0)
        v101 = v28;
      else
        v101 = -v28;
      if (v99)
        v102 = -v29;
      else
        v102 = v29;
      v555 = v100;
      v554 = v101;
      v103 = v51 + v41 - v61;
      v104 = v52 + v42 - v62;
      v553 = v103;
      v552 = v104;
      v105 = v80 + v70 - v89;
      v106 = v81 + v71 - v90;
      v551 = v105;
      v550 = v106;
      v107 = __OFADD__(v70, v41);
      v108 = v70 + v41;
      v109 = v71 + v42;
      v110 = v509 + v46;
      if (v108 < 0 != v107)
        ++v108;
      v111 = 1431655766 * ((v108 >> 1) + 2 * (v80 + v51) - (v61 + v89));
      v112 = HIDWORD(v111) + (v111 >> 63);
      v113 = 1431655766 * (v109 / 2 + 2 * (v81 + v52) - (v62 + v90));
      v114 = HIDWORD(v113) + (v113 >> 63);
      v549 = v112;
      v548 = v114;
      if (v110 >= 0)
        v115 = v509 + v46;
      else
        v115 = v110 + 1;
      v547 = v23;
      v546 = v24;
      v545 = v23;
      v544 = v24;
      v543 = v23;
      v542 = v24;
      v541 = v23;
      v540 = v24;
      if (v27 < 0)
        v27 = -v27;
      if (v28 < 0)
        v28 = -v28;
      if (v29 < 0)
        v29 = -v29;
      if (v27 < v28 || v27 < v29)
      {
        v11 = (_BYTE *)(a2 + 8);
        v119 = v75;
        if (v28 < v29)
        {
          v234 = v23;
          v118 = v22;
          v235 = v503;
          goto LABEL_323;
        }
        v116 = &v554;
        v117 = &v546;
        v118 = v24;
        v100 = v101;
      }
      else
      {
        v116 = &v555;
        v117 = &v547;
        v118 = v23;
        v11 = (_BYTE *)(a2 + 8);
        v119 = v75;
      }
      v235 = v503;
      *v117 = v22;
      *v116 = v102;
      v234 = v547;
      v102 = v100;
LABEL_323:
      if (v102 >= 0)
        v244 = v118;
      else
        v244 = -v118;
      if (v102 >= 0)
        v245 = v102;
      else
        v245 = -v102;
      v246 = v546;
      if (v244 < 0)
      {
        if (v546 >= 0)
          v248 = v546;
        else
          v248 = -v546;
        v249 = v248 - v6;
        v250 = v6 - v248;
        if (v234 >= 0)
          v247 = v250;
        else
          v247 = v249;
        if (v234 >= 0)
          v251 = v234;
        else
          v251 = -v234;
        v3 = v521;
        if (v546 < 0)
          v246 = v251 - v6;
        else
          v246 = v6 - v251;
      }
      else
      {
        v247 = v234;
        v3 = v521;
      }
      v274 = v119 + v46 - v235;
      v547 = v247;
      v546 = v246;
      if (v103 >= 0)
        v275 = v103;
      else
        v275 = -v103;
      if (v104 >= 0)
        v276 = v104;
      else
        v276 = -v104;
      if (v274 >= 0)
        v277 = v119 + v46 - v235;
      else
        v277 = v235 - (v119 + v46);
      if (v275 < v276 || v275 < v277)
      {
        if (v276 < v277)
        {
          v281 = v23;
          v280 = v22;
          goto LABEL_429;
        }
        v278 = &v552;
        v279 = &v544;
        v277 = v276;
        v280 = v24;
        v103 = v104;
      }
      else
      {
        v278 = &v553;
        v279 = &v545;
        v277 = v275;
        v280 = v23;
      }
      *v279 = v22;
      *v278 = v274;
      v281 = v545;
      v274 = v103;
LABEL_429:
      if (v274 >= 0)
        v282 = v280;
      else
        v282 = -v280;
      v283 = v544;
      if (v282 < 0)
      {
        if (v544 >= 0)
          v285 = v544;
        else
          v285 = -v544;
        v284 = v285 - v6;
        v286 = v6 - v285;
        if (v281 < 0)
        {
          v287 = -v281;
        }
        else
        {
          v284 = v286;
          v287 = v281;
        }
        if (v544 < 0)
          v283 = v287 - v6;
        else
          v283 = v6 - v287;
      }
      else
      {
        v284 = v281;
      }
      v288 = v513 + v509 - v94;
      v510 = v284;
      v545 = v284;
      v544 = v283;
      if (v105 >= 0)
        v289 = v105;
      else
        v289 = -v105;
      if (v106 >= 0)
        v290 = v106;
      else
        v290 = -v106;
      if (v288 >= 0)
        v291 = v288;
      else
        v291 = -v288;
      if (v289 < v290 || v289 < v291)
      {
        if (v290 < v291)
        {
          v295 = v23;
          v294 = v22;
          goto LABEL_459;
        }
        v292 = &v550;
        v293 = &v542;
        v289 = v290;
        v294 = v24;
        v105 = v106;
      }
      else
      {
        v292 = &v551;
        v293 = &v543;
        v294 = v23;
      }
      *v293 = v22;
      *v292 = v288;
      v295 = v543;
      v288 = v105;
      v291 = v289;
LABEL_459:
      if (v288 >= 0)
        v296 = v294;
      else
        v296 = -v294;
      v297 = v542;
      if (v296 < 0)
      {
        if (v542 >= 0)
          v299 = v542;
        else
          v299 = -v542;
        v300 = v299 - v6;
        v301 = v6 - v299;
        if (v295 < 0)
        {
          v302 = -v295;
        }
        else
        {
          v300 = v301;
          v302 = v295;
        }
        v298 = v291;
        if (v542 < 0)
          v297 = v302 - v6;
        else
          v297 = v6 - v302;
        v295 = v300;
      }
      else
      {
        v298 = v291;
      }
      v303 = 1431655766 * ((v115 >> 1) + 2 * (v513 + v119) - (v235 + v94));
      v304 = HIDWORD(v303) + (v303 >> 63);
      v543 = v295;
      v514 = v297;
      v542 = v297;
      if (v112 >= 0)
        v305 = v112;
      else
        v305 = -v112;
      if (v114 >= 0)
        v306 = v114;
      else
        v306 = -v114;
      if (v304 >= 0)
        v307 = v304;
      else
        v307 = -v304;
      v308 = v295;
      if (v305 < v306 || v305 < v307)
      {
        v311 = v510;
        if (v306 < v307)
        {
          v312 = v298;
          goto LABEL_490;
        }
        v309 = &v548;
        v310 = &v540;
        v307 = v306;
        v23 = v24;
        v112 = v114;
      }
      else
      {
        v309 = &v549;
        v310 = &v541;
        v307 = v305;
        v311 = v510;
      }
      v312 = v298;
      *v310 = v22;
      v22 = v23;
      *v309 = v304;
      v23 = v541;
      v304 = v112;
LABEL_490:
      if (v304 >= 0)
        v313 = v22;
      else
        v313 = -v22;
      v314 = v540;
      if (v313 < 0)
      {
        if (v540 >= 0)
          v316 = v540;
        else
          v316 = -v540;
        v317 = v316 - v6;
        v318 = v6 - v316;
        if (v23 >= 0)
          v315 = v318;
        else
          v315 = v317;
        if (v23 < 0)
          v23 = -v23;
        if (v540 < 0)
          v314 = v23 - v6;
        else
          v314 = v6 - v23;
      }
      else
      {
        v315 = v23;
      }
      v541 = v315;
      v540 = v314;
      v319 = v555;
      v320 = v247 - v555;
      v321 = v554;
      v537 = v247 - v555;
      v538 = v246 - v554;
      v539 = v244 - v245;
      v322 = v311 - v553;
      v497 = v552;
      v534 = v311 - v553;
      v535 = v283 - v552;
      v536 = v282 - v277;
      v455 = v551;
      v323 = v308 - v551;
      v453 = v550;
      v531 = v308 - v551;
      v532 = v514 - v550;
      v533 = v296 - v312;
      v451 = v549;
      v324 = v315 - v549;
      v449 = v548;
      v528 = v315 - v549;
      v529 = v314 - v548;
      v530 = v313 - v307;
      v500 = v553;
      v504 = v247;
      v463 = v307;
      v465 = v308;
      v459 = v314;
      v461 = v313;
      v457 = v315;
      if (*(_BYTE *)(a2 + 24))
      {
        v477 = v554;
        v479 = v555;
        v481 = v296;
        v483 = v312;
        v485 = v283;
        v487 = v282;
        v489 = v277;
        v492 = v246;
        v494 = v244;
        v473 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v565 + 2048) >> 10) & 0x7CLL));
        v475 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v564 + 2048) >> 10) & 0x7CLL));
        v471 = sub_20C70767C(&v537, v3, *v11, (unsigned __int16 **)v574);
        v325 = v3;
        v467 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v566 + 2048) >> 10) & 0x7CLL));
        v469 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v564) >> 10) & 0x3FFFFFFFFFFFFCLL));
        v326 = sub_20C70767C(&v534, v3, *v11, (unsigned __int16 **)v574);
        v327 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v564 + 2048) >> 10) & 0x7CLL));
        v328 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v565) >> 10) & 0x3FFFFFFFFFFFFCLL));
        v329 = sub_20C70767C(&v531, v3, *v11, (unsigned __int16 **)v574);
        v330 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v564) >> 10) & 0x3FFFFFFFFFFFFCLL));
        v331 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v566) >> 10) & 0x3FFFFFFFFFFFFCLL));
        v332 = sub_20C70767C(&v528, v325, *v11, (unsigned __int16 **)v574);
        v333 = v473 + v475 + v471;
        v334 = v467 + v469 + v326;
        v335 = v328 + v327 + v329;
        v336 = v331 + v330 + v332;
        v2 = v518;
        v3 = v325;
        v8 = v520;
        v9 = v525;
        v6 = v507;
        v246 = v492;
        v244 = v494;
        v277 = v489;
        v283 = v485;
        v282 = v487;
        v311 = v510;
        v296 = v481;
        v312 = v483;
        v321 = v477;
        v319 = v479;
      }
      else
      {
        if ((int)v3 < 1)
        {
          v333 = 0;
          v334 = 0;
          v335 = 0;
          v336 = 0;
        }
        else
        {
          if (v320 < 0)
            v320 = v555 - v247;
          v333 = -(v3 * __clz(v320 + 1));
          if (v322 < 0)
            v322 = v553 - v311;
          v334 = -(v3 * __clz(v322 + 1));
          if (v323 < 0)
            v323 = v551 - v308;
          v335 = -(v3 * __clz(v323 + 1));
          if (v324 < 0)
            v324 = v549 - v315;
          v336 = -(v3 * __clz(v324 + 1));
        }
        v2 = v518;
        v8 = v520;
        v9 = v525;
      }
      if (v333 > v334 || v333 > v335 || v333 > v336)
      {
        if (v334 <= v335 && v334 <= v336)
        {
          v246 = v283;
          v337 = 0;
          v556 = v500;
          v557 = v497;
          v338 = 1;
          v558 = v277;
          v244 = v282;
          v339 = 2;
          v559 = v311;
          goto LABEL_528;
        }
        if (v335 <= v336)
        {
          v338 = 0;
          v556 = v455;
          v557 = v453;
          v337 = 1;
          v558 = v312;
          v246 = v514;
          v244 = v296;
          v339 = 1;
          v340 = v465;
        }
        else
        {
          v556 = v451;
          v557 = v449;
          v337 = 1;
          v246 = v459;
          v244 = v461;
          v558 = v463;
          v338 = 1;
          v339 = 2;
          v340 = v457;
        }
      }
      else
      {
        v337 = 0;
        v338 = 0;
        v556 = v319;
        v557 = v321;
        v558 = v245;
        v339 = 1;
        v340 = v504;
      }
      v559 = v340;
LABEL_528:
      v560 = v246;
      v561 = v244;
      sub_20C6E8A80(v522, v338, &v564);
      sub_20C6E8A80(v522, v337, &v564 + v339);
      v341 = 2;
LABEL_655:
      v10 = v508;
LABEL_741:
      sub_20C6FA124((uint64_t)v2, v9, (uint64_t)&v559, (uint64_t)&v556, v3, v523, v11, (_QWORD *)v573 + 15 * v341);
LABEL_742:
      ++v9;
    }
    while (v524 != v9);
  }
  v440 = 360;
  do
  {
    v441 = (char *)v573 + v440;
    v442 = *(void **)((char *)&__p + v440);
    if (v442)
    {
      *((_QWORD *)v441 - 2) = v442;
      operator delete(v442);
    }
    v443 = (void *)*((_QWORD *)v441 - 6);
    if (v443)
    {
      *(_QWORD *)((char *)&v562 + v440) = v443;
      operator delete(v443);
    }
    v444 = (char *)v573 + v440;
    v445 = *(void **)((char *)&v554 + v440);
    if (v445)
    {
      *((_QWORD *)v444 - 8) = v445;
      operator delete(v445);
    }
    v446 = (void *)*((_QWORD *)v444 - 12);
    if (v446)
    {
      *(_QWORD *)((char *)&v550 + v440) = v446;
      operator delete(v446);
    }
    v447 = (void *)*((_QWORD *)v441 - 15);
    if (v447)
    {
      *(_QWORD *)((char *)&v544 + v440) = v447;
      operator delete(v447);
    }
    v440 -= 120;
  }
  while (v440);
  if (__p)
  {
    v571 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_20C6FA0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,uint64_t a60,char a61)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C6FA124(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _QWORD *a6, _BYTE *a7, _QWORD *a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _WORD *v16;
  uint64_t v17;
  unsigned int v18;
  _WORD *v19;
  unsigned int v20;
  uint64_t v21;
  _WORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  signed int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  _WORD *v43;
  uint64_t v44;
  unsigned int v45;
  _WORD *v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  _WORD *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  int v54;
  __int16 v55;

  v11 = result + 3560;
  switch(*a7)
  {
    case 0:
      if (a5 < 1)
        return result;
      v12 = 0;
      v13 = a5;
      while (1)
      {
        v14 = *(_DWORD *)(a3 + 4 * v12);
        v15 = *(_DWORD *)(a4 + 4 * v12);
        v16 = (_WORD *)(*a8 + 2 * v12);
        v17 = v11;
        v18 = v14 - v15;
        if (v14 == v15)
        {
          v20 = 0;
        }
        else
        {
          sub_20C6E8A80(v11, 1, v16);
          v19 = (_WORD *)(a8[3] + 2 * v12);
          if ((v18 & 0x80000000) != 0)
          {
            sub_20C6E8A80(v11, 0, v19);
            v18 = -v18;
          }
          else
          {
            sub_20C6E8A80(v11, 1, v19);
          }
          v21 = a8[6];
          v22 = (_WORD *)(v21 + 2 * (int)((_DWORD)v12 << 6));
          if (v18 > 0x3F)
          {
            sub_20C6E8A80(v11, 1, (_WORD *)(v21 + 2 * (int)((_DWORD)v12 << 6)));
            sub_20C6E8A80(v11, 1, v22 + 2);
            sub_20C6E8A80(v11, 1, v22 + 6);
            sub_20C6E8A80(v11, 1, v22 + 14);
            sub_20C6E8A80(v11, 1, v22 + 30);
            sub_20C6E8A80(v11, 1, v22 + 62);
            result = sub_20C6E90B8(v11, v18 - 64, *(_DWORD *)(a8[12] + 4 * v12), (_WORD *)(a8[9] + 2 * v12));
            goto LABEL_13;
          }
          v23 = v18 - 1;
          sub_20C6E8A80(v11, (v18 - 1) & 1, (_WORD *)(v21 + 2 * (int)((_DWORD)v12 << 6)));
          sub_20C6E8A80(v11, (v23 >> 1) & 1, &v22[(v23 & 1) + 1]);
          sub_20C6E8A80(v11, (v23 >> 2) & 1, &v22[(v23 & 3) + 3]);
          sub_20C6E8A80(v11, (v23 >> 3) & 1, &v22[(v23 & 7) + 7]);
          sub_20C6E8A80(v11, (v23 >> 4) & 1, &v22[(v23 & 0xF) + 15]);
          v20 = ((v18 - 1) >> 5) & 1;
          v16 = &v22[((v18 - 1) & 0x1F) + 31];
          v17 = v11;
        }
        result = sub_20C6E8A80(v17, v20, v16);
LABEL_13:
        if (++v12 == v13)
          return result;
      }
    case 2:
      if (a5 < 1)
        return result;
      v24 = 0;
      v25 = a5;
      while (1)
      {
        v26 = *(_DWORD *)(a3 + 4 * v24) - *(_DWORD *)(a4 + 4 * v24);
        v27 = a8[12];
        result = sub_20C6E9058(v11, v26, *(_DWORD *)(v27 + 4 * v24), (_WORD *)(a8[3] + 2 * v24), (_WORD *)(a8[9] + 2 * v24));
        v28 = v26 >= 0 ? v26 : -v26;
        v29 = *(_DWORD *)(v27 + 4 * v24);
        v30 = v28 >> v29;
        if (v29 && v30 == 0)
          break;
        if (v30 >= 2)
        {
          v32 = 1;
LABEL_27:
          *(_DWORD *)(v27 + 4 * v24) = v29 + v32;
        }
        if (++v24 == v25)
          return result;
      }
      v32 = -1;
      goto LABEL_27;
    case 3:
      if (a5 >= 1)
      {
        v34 = 0;
        v35 = a5;
        do
        {
          v36 = *(_DWORD *)(*a6 + 4 * v34);
          if (v36 >= 1)
          {
            v37 = 0;
            v38 = *(_DWORD *)(a3 + 4 * v34) - *(_DWORD *)(a4 + 4 * v34);
            do
            {
              v55 = 0x8000;
              result = sub_20C6E8A80(v11, (v38 >> v37++) & 1, &v55);
            }
            while (v36 != v37);
          }
          ++v34;
        }
        while (v34 != v35);
      }
      return result;
    case 4:
      if (a5 < 1)
        return result;
      v39 = 0;
      v40 = a5;
      break;
    default:
      return result;
  }
  do
  {
    v41 = *(_DWORD *)(a3 + 4 * v39);
    v42 = *(_DWORD *)(a4 + 4 * v39);
    v43 = (_WORD *)(*a8 + 2 * v39);
    v44 = v11;
    v45 = v41 - v42;
    if (v41 == v42)
    {
      v47 = 0;
LABEL_46:
      result = sub_20C6E8A80(v44, v47, v43);
      goto LABEL_53;
    }
    sub_20C6E8A80(v11, 1, v43);
    v46 = (_WORD *)(a8[3] + 2 * v39);
    if ((v45 & 0x80000000) != 0)
    {
      sub_20C6E8A80(v11, 0, v46);
      v45 = -v45;
    }
    else
    {
      sub_20C6E8A80(v11, 1, v46);
    }
    v48 = v45 - 1;
    v49 = a8[6];
    v50 = (_WORD *)(v49 + 2 * (int)((_DWORD)v39 << 6));
    if (v45 <= 0x3F)
    {
      sub_20C6E8A80(v11, (v48 >> 5) & 1, (_WORD *)(v49 + 2 * (int)((_DWORD)v39 << 6)));
      sub_20C6E8A80(v11, (v48 >> 4) & 1, &v50[(v48 >> 5) + 1]);
      sub_20C6E8A80(v11, (v48 >> 3) & 1, &v50[(v48 >> 4) + 3]);
      sub_20C6E8A80(v11, (v48 >> 2) & 1, &v50[(v48 >> 3) + 7]);
      sub_20C6E8A80(v11, (v48 >> 1) & 1, &v50[(v48 >> 2) + 15]);
      v47 = v48 & 1;
      v43 = &v50[(v48 >> 1) + 31];
      v44 = v11;
      goto LABEL_46;
    }
    sub_20C6E8A80(v11, 1, (_WORD *)(v49 + 2 * (int)((_DWORD)v39 << 6)));
    sub_20C6E8A80(v11, 1, v50 + 2);
    sub_20C6E8A80(v11, 1, v50 + 6);
    sub_20C6E8A80(v11, 1, v50 + 14);
    sub_20C6E8A80(v11, 1, v50 + 30);
    sub_20C6E8A80(v11, 1, v50 + 62);
    v51 = a8[12];
    result = sub_20C6E90B8(v11, v45 - 64, *(_DWORD *)(v51 + 4 * v39), (_WORD *)(a8[9] + 2 * v39));
    v52 = *(_DWORD *)(v51 + 4 * v39);
    v53 = v48 >> v52;
    if (!v52 || v53)
    {
      if (v53 < 2)
        goto LABEL_53;
      v54 = v52 + 1;
    }
    else
    {
      v54 = v52 - 1;
    }
    *(_DWORD *)(v51 + 4 * v39) = v54;
LABEL_53:
    ++v39;
  }
  while (v39 != v40);
  return result;
}

uint64_t sub_20C6FA5D8(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int *v46;
  int *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  __int16 v61;
  void *v62[2];
  void *v63[2];
  __int128 v64;
  void *v65[2];
  void *v66[2];
  __int128 v67;
  void *__p[2];
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;

  v4 = *a1;
  v5 = a1[780];
  v6 = *((_QWORD *)a1 + 384);
  v8 = a1 + 46;
  v7 = *((_QWORD *)a1 + 23);
  v9 = ~(-1 << (*(_DWORD *)(a2 + 4) - 1));
  v70 = 0;
  v71 = 0;
  v72 = 0;
  sub_20C6F1AD8((_QWORD *)a1 + 23, (_QWORD *)a1 + 29, (_QWORD *)a1 + 26, (uint64_t *)a1 + 26, -1431655765 * ((unint64_t)(*((_QWORD *)a1 + 24) - v7) >> 2), (uint64_t *)&v70, v9);
  v69 = 0;
  v67 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v65 = 0u;
  *(_OWORD *)v66 = 0u;
  *(_OWORD *)v63 = 0u;
  v64 = 0u;
  *(_OWORD *)v62 = 0u;
  sub_20C6EC678((uint64_t)v62, v5);
  v61 = 0x8000;
  if ((int)v4 >= 1)
  {
    v10 = 0;
    v11 = v8 + 704;
    v12 = *(_DWORD *)(a2 + 16);
    v13 = (_BYTE *)(a2 + 8);
    while (1)
    {
      v14 = *(int *)(*((_QWORD *)a1 + 11) + 4 * v10);
      if (!v12 || *(_BYTE *)(*((_QWORD *)a1 + 387) + v14))
        break;
LABEL_68:
      if (v4 == ++v10)
        goto LABEL_69;
    }
    v15 = (_DWORD *)(v6 + 4 * (int)v14 * v5);
    v16 = *v15 - v9;
    v17 = v15[1] - v9;
    if (v16 >= 0)
      v18 = *v15 - v9;
    else
      v18 = v9 - *v15;
    if (v17 >= 0)
      v19 = v17;
    else
      v19 = -v17;
    v20 = v9 - v18;
    v21 = v19 - v9;
    if (v16 >= 0)
      v21 = v9 - v19;
    v22 = v18 - v9;
    if (v17 >= 0)
      v23 = v20;
    else
      v23 = v22;
    v24 = v20 - v19;
    if (v20 - v19 < 0)
      v25 = v21;
    else
      v25 = v16;
    if (v20 - v19 >= 0)
      v23 = v17;
    v58 = v25;
    v59 = v23;
    v60 = v20 - v19;
    v26 = 3 * v14;
    v27 = (int *)&v70[12 * v14];
    v28 = *v27;
    v29 = *v27;
    v55 = *v27;
    v30 = v27[1];
    v56 = v30;
    v31 = v27[2];
    v57 = v31;
    v32 = *(int *)(*((_QWORD *)a1 + 17) + 4 * v26);
    if ((_DWORD)v32 == -1 || v12 && !*(_BYTE *)(*((_QWORD *)a1 + 387) + v32))
    {
      v42 = v29 * (uint64_t)v25 + v30 * (uint64_t)v23 + v31 * (uint64_t)v24;
      if ((v42 & 0x8000000000000000) != 0)
      {
        v55 = -v28;
        v56 = -v30;
        v57 = -v31;
      }
      sub_20C6E8A80((uint64_t)(a1 + 890), v42 >> 63, &v61);
      v24 = v60;
      v28 = v55;
      v30 = v56;
      v31 = v57;
    }
    else
    {
      v33 = (_DWORD *)(v6 + 4 * (int)v32 * v5);
      v34 = *v33 - v9;
      v35 = v33[1] - v9;
      if (v34 >= 0)
        v36 = v34;
      else
        v36 = -v34;
      if (v35 >= 0)
        v37 = v35;
      else
        v37 = -v35;
      v38 = v9 - v36;
      v39 = v37 - v9;
      if (v34 >= 0)
        v39 = v9 - v37;
      v40 = v36 - v9;
      if (v35 >= 0)
        v40 = v38;
      v41 = v38 - v37;
      if (v41 < 0)
      {
        v34 = v39;
        v35 = v40;
      }
      if (v31 * (uint64_t)v41 + v29 * (uint64_t)v34 + v30 * (uint64_t)v35 < 0)
      {
        v28 = -v28;
        v30 = -v30;
        v31 = -v31;
        v55 = v28;
        v56 = v30;
        v57 = v31;
      }
    }
    if (v28 >= 0)
      v43 = v28;
    else
      v43 = -v28;
    if (v30 >= 0)
      v44 = v30;
    else
      v44 = -v30;
    if (v31 >= 0)
      v45 = v31;
    else
      v45 = -v31;
    if (v43 < v44 || v43 < v45)
    {
      v46 = &v56;
      v47 = &v59;
      if (v44 < v45)
      {
LABEL_55:
        if (v31 < 0)
        {
          v57 = -v31;
          v24 = -v24;
          v60 = v24;
        }
        v50 = v58;
        v49 = v59;
        if (v24 < 0)
        {
          if (v59 >= 0)
            v52 = v59;
          else
            v52 = -v59;
          v53 = v52 - v9;
          v51 = v9 - v52;
          if (v58 < 0)
          {
            v51 = v53;
            v50 = -v58;
          }
          if (v59 < 0)
            v49 = v50 - v9;
          else
            v49 = v9 - v50;
        }
        else
        {
          v51 = v58;
        }
        v58 = v51;
        v59 = v49;
        sub_20C6FA124((uint64_t)a1, v10, (uint64_t)&v58, (uint64_t)&v55, v5, v11, v13, v62);
        goto LABEL_68;
      }
    }
    else
    {
      v46 = &v55;
      v47 = &v58;
      v30 = v28;
    }
    v48 = *v47;
    *v47 = v24;
    v60 = v48;
    *v46 = v31;
    v57 = v30;
    v24 = v48;
    v31 = v30;
    goto LABEL_55;
  }
LABEL_69:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v66[1])
  {
    *(void **)&v67 = v66[1];
    operator delete(v66[1]);
  }
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
  if (v63[1])
  {
    *(void **)&v64 = v63[1];
    operator delete(v63[1]);
  }
  if (v62[0])
  {
    v62[1] = v62[0];
    operator delete(v62[0]);
  }
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
  return 0;
}

void sub_20C6FA9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  va_list va;

  va_start(va, a9);
  sub_20C6EC7C0((uint64_t)va);
  v11 = *(void **)(v9 + 120);
  if (v11)
  {
    *(_QWORD *)(v9 + 128) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C6FA9DC(unsigned int *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int *v22;
  int *v23;
  _QWORD *v24;
  int *v25;
  int *v26;
  int *v27;
  uint64_t v28;
  int *v29;
  int *v30;
  uint64_t v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int *v46;
  int v47;
  int *v48;
  int *v49;
  int v50;
  int v51;
  uint64_t v52;
  char *v53;
  int v54;
  _BYTE *v55;
  uint64_t v56;
  char *v57;
  _DWORD *v58;
  uint64_t v59;
  int *v60;
  int *v61;
  int *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  _DWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  _DWORD *v72;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  signed int v87;
  signed int v88;
  signed int v89;
  signed int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  unint64_t v100;
  char *v101;
  int v102;
  int v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  _DWORD *v108;
  _DWORD *v109;
  _DWORD *v110;
  _DWORD *v111;
  _DWORD *v112;
  _DWORD *v113;
  _DWORD *v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  signed int v122;
  signed int v123;
  signed int v124;
  signed int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  unsigned __int16 *p_b;
  uint64_t v136;
  _BYTE *v137;
  void *v138;
  void *v139;
  _BYTE *v140;
  void *v141;
  void *v142;
  void *v143;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  _QWORD *v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  uint64_t v161;
  uint64_t v162;
  unsigned __int8 *v163;
  int v164;
  uint64_t v165;
  int v166;
  _QWORD *v167;
  uint64_t v168;
  size_t v169;
  char *v170;
  uint64_t v171;
  int v172;
  void *__p[3];
  void *v174[3];
  void *v175[3];
  void *v176[3];
  void *v177[3];
  void *v178[3];
  void *v179[3];
  void *v180[3];
  unsigned __int16 v181;
  unsigned __int16 v182;
  unsigned __int16 v183;
  unsigned __int16 __b;
  unsigned __int16 v185;
  unsigned __int16 v186;
  __int16 v187;
  _QWORD v188[30];
  unsigned __int16 *v189[18];

  v2 = a1;
  v3 = 0;
  v189[15] = *(unsigned __int16 **)MEMORY[0x24BDAC8D0];
  v171 = *a1;
  v4 = (int)a1[780];
  v167 = a1 + 750;
  v5 = *((_QWORD *)a1 + 384);
  memset(v189, 0, 120);
  memset(v188, 0, sizeof(v188));
  do
  {
    sub_20C6EC678((uint64_t)&v188[v3], v4);
    v3 += 15;
  }
  while (v3 != 45);
  v187 = 0x8000;
  memset_pattern16(&__b, &unk_20CAF8CE0, 6uLL);
  memset_pattern16(&v181, &unk_20CAF8CE0, 6uLL);
  LODWORD(v179[0]) = 0;
  sub_20C6E8A00(v180, v4, v179);
  LODWORD(v178[0]) = 0;
  sub_20C6E8A00(v179, v4, v178);
  LODWORD(v177[0]) = 0;
  sub_20C6E8A00(v178, v4, v177);
  LODWORD(v176[0]) = 0;
  sub_20C6E8A00(v177, v4, v176);
  LODWORD(v175[0]) = 0;
  sub_20C6E8A00(v176, v4, v175);
  LODWORD(v174[0]) = 0;
  sub_20C6E8A00(v175, v4, v174);
  LODWORD(__p[0]) = 0;
  sub_20C6E8A00(v174, v4, __p);
  v172 = 0;
  sub_20C6E8A00(__p, v4, &v172);
  if ((int)v171 >= 1)
  {
    v6 = 0;
    v7 = *(_DWORD *)(a2 + 16);
    v153 = v2;
    v163 = (unsigned __int8 *)(a2 + 8);
    v164 = v4;
    v161 = (uint64_t)(v2 + 445);
    v162 = v5;
    v8 = 4 * v4;
    v166 = v7;
    v168 = v4;
    v169 = v8;
    while (1)
    {
      v9 = *(int *)(v2[11] + 4 * v6);
      if (v7 && !*(_BYTE *)(v2[387] + v9))
        goto LABEL_126;
      v10 = (int *)(v5 + 4 * (int)v9 * (int)v4);
      v11 = (int *)(v2[17] + 12 * v9);
      v12 = *v11;
      v13 = v11[1];
      v14 = v11[2];
      v15 = (char *)v180[0];
      v16 = (int *)(v2[20] + 12 * v9);
      v17 = v16[2];
      if ((_DWORD)v17 != -1)
      {
        v19 = *v16;
        v18 = v16[1];
        if (!v7
          || (v20 = v2[387], *(_BYTE *)(v20 + v12))
          && *(_BYTE *)(v20 + v13)
          && *(_BYTE *)(v20 + v14)
          && *(_BYTE *)(v20 + v19)
          && *(_BYTE *)(v20 + v18)
          && *(_BYTE *)(v20 + v17))
        {
          v154 = v19;
          v157 = v18;
          v165 = v6;
          v21 = (int *)(v5 + 4 * (int)v12 * (int)v4);
          v22 = (int *)(v5 + 4 * (int)v13 * (int)v4);
          v23 = (int *)(v5 + 4 * (int)v14 * (int)v4);
          v147 = v13;
          v150 = v12;
          v170 = (char *)v180[0];
          sub_20C6E916C(v21, v22, v23, v4, (int *)(v2[23] + 12 * (int)v12), (int *)(v2[23] + 12 * (int)v13), (int *)(v2[23] + 12 * (int)v14), (int *)(v2[23] + 12 * (int)v9), (_DWORD *)v180[0]);
          v24 = v2;
          v25 = (int *)(v162 + 4 * v154 * (int)v4);
          v26 = (int *)(v162 + 4 * v157 * (int)v4);
          v27 = (int *)(v162 + 4 * (int)v17 * (int)v4);
          sub_20C6E916C(v25, v26, v27, v4, (int *)(v24[23] + 12 * v154), (int *)(v24[23] + 12 * v157), (int *)(v24[23] + 12 * (int)v17), (int *)(v24[23] + 12 * (int)v9), (_DWORD *)v179[0]);
          v28 = v168;
          if ((int)v4 >= 1)
          {
            v29 = (int *)v180[0];
            v30 = (int *)v179[0];
            v31 = v168;
            v32 = (int *)v178[0];
            do
            {
              v34 = *v29++;
              v33 = v34;
              v35 = *v30++;
              v36 = __OFADD__(v35, v33);
              v37 = v35 + v33;
              if (v37 < 0 != v36)
                ++v37;
              *v32++ = v37 >> 1;
              --v31;
            }
            while (v31);
            if (v164 == 2)
            {
              sub_20C6E9868((unint64_t)v21, v22, v23, (_DWORD *)(v153[23] + 12 * v150), (_DWORD *)(v153[23] + 12 * v147), (int *)(v153[23] + 12 * (int)v9), (int *)v180[0]);
              sub_20C6E9868((unint64_t)v25, v26, v27, (_DWORD *)(v153[23] + 12 * v154), (_DWORD *)(v153[23] + 12 * v157), (int *)(v153[23] + 12 * (int)v9), (int *)v179[0]);
              v38 = v180[0];
              v39 = v179[0];
              v40 = v177[0];
              v41 = *(_DWORD *)v179[0] + *(_DWORD *)v180[0];
              if (*(_DWORD *)v179[0] + *v38 < 0 != __OFADD__(*(_DWORD *)v179[0], *v38))
                ++v41;
              *(_DWORD *)v177[0] = v41 >> 1;
              v42 = v38[1];
              v43 = v39[1];
              v36 = __OFADD__(v43, v42);
              v44 = v43 + v42;
              if (v44 < 0 != v36)
                ++v44;
              v40[1] = v44 >> 1;
              v28 = v168;
            }
            else
            {
              v100 = 0;
              v101 = (char *)v177[0];
              do
              {
                v102 = v21[v100 / 4];
                v103 = v25[v100 / 4];
                v36 = __OFADD__(v103, v102);
                v104 = v103 + v102;
                if (v104 < 0 != v36)
                  ++v104;
                v105 = 1431655766
                     * ((v104 >> 1) - (v23[v100 / 4] + v27[v100 / 4]) + 2 * (v26[v100 / 4] + v22[v100 / 4]));
                *(_DWORD *)&v101[v100] = HIDWORD(v105) + (v105 >> 63);
                v100 += 4;
              }
              while (v169 != v100);
            }
            v106 = 0;
            v107 = v180[0];
            v108 = v179[0];
            v109 = v176[0];
            v110 = v175[0];
            v111 = v178[0];
            v112 = v174[0];
            v113 = v177[0];
            v114 = __p[0];
            do
            {
              v107[v106] = v22[v106] + v21[v106] - v23[v106];
              v108[v106] = v26[v106] + v25[v106] - v27[v106];
              v109[v106] = v10[v106] - v107[v106];
              v110[v106] = v10[v106] - v108[v106];
              v112[v106] = v10[v106] - v111[v106];
              v114[v106] = v10[v106] - v113[v106];
              ++v106;
            }
            while (v28 != v106);
          }
          if (*(_BYTE *)(a2 + 24))
          {
            LODWORD(v4) = v164;
            v159 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v181 + 2048) >> 10) & 0x7CLL));
            v156 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v182 + 2048) >> 10) & 0x7CLL));
            v152 = sub_20C70767C((int *)v176[0], v164, *v163, v189);
            v146 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v183 + 2048) >> 10) & 0x7CLL));
            v149 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v181) >> 10) & 0x3FFFFFFFFFFFFCLL));
            v115 = sub_20C70767C((int *)v175[0], v164, *v163, v189);
            v116 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v181 + 2048) >> 10) & 0x7CLL));
            v117 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v182) >> 10) & 0x3FFFFFFFFFFFFCLL));
            v118 = sub_20C70767C((int *)v174[0], v164, *v163, v189);
            v119 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v181) >> 10) & 0x3FFFFFFFFFFFFCLL));
            v120 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v183) >> 10) & 0x3FFFFFFFFFFFFCLL));
            v121 = sub_20C70767C((int *)__p[0], v164, *v163, v189);
            v122 = v156 + v159 + v152;
            v123 = v146 + v149 + v115;
            v124 = v117 + v116 + v118;
            v125 = v120 + v119 + v121;
            v2 = v153;
            v5 = v162;
            v55 = (_BYTE *)(a2 + 8);
          }
          else
          {
            v55 = (_BYTE *)(a2 + 8);
            LODWORD(v4) = v164;
            if (v164 < 1)
            {
              v122 = 0;
              v123 = 0;
              v124 = 0;
              v125 = 0;
            }
            else
            {
              v126 = *(_DWORD *)v176[0];
              if (*(int *)v176[0] < 0)
                v126 = -v126;
              v122 = -(v164 * __clz(v126 + 1));
              v127 = *(_DWORD *)v175[0];
              if (*(int *)v175[0] < 0)
                v127 = -v127;
              v123 = -(v164 * __clz(v127 + 1));
              v128 = *(_DWORD *)v174[0];
              if (*(int *)v174[0] < 0)
                v128 = -v128;
              v124 = -(v164 * __clz(v128 + 1));
              v129 = *(_DWORD *)__p[0];
              if (*(int *)__p[0] < 0)
                v129 = -v129;
              v125 = -(v164 * __clz(v129 + 1));
            }
            v2 = v153;
            v5 = v162;
          }
          if (v122 <= v123 && v122 <= v124 && v122 <= v125)
          {
            v130 = 0;
            v131 = 0;
            goto LABEL_122;
          }
          if (v123 <= v124 && v123 <= v125)
          {
            v130 = 0;
            v131 = 1;
            v170 = (char *)v179[0];
            goto LABEL_104;
          }
          if (v124 <= v125)
          {
            v131 = 0;
            v130 = 1;
            v170 = (char *)v178[0];
LABEL_122:
            v132 = 1;
          }
          else
          {
            v130 = 1;
            v170 = (char *)v177[0];
            v131 = 1;
LABEL_104:
            v132 = 2;
          }
          v134 = v161;
          sub_20C6E8A80(v161, v131, &v181);
          p_b = &v181;
          goto LABEL_124;
        }
      }
      if ((_DWORD)v14 != -1)
      {
        if (!v7 || (v45 = v2[387], *(_BYTE *)(v45 + v12)) && *(_BYTE *)(v45 + v13) && *(_BYTE *)(v45 + v14))
        {
          v170 = (char *)v180[0];
          v165 = v6;
          v46 = (int *)(v5 + 4 * (int)v12 * (int)v4);
          v47 = v4;
          v48 = (int *)(v5 + 4 * (int)v13 * (int)v4);
          v49 = (int *)(v5 + 4 * (int)v14 * v47);
          v50 = v12;
          v51 = v13;
          sub_20C6E916C(v46, v48, v49, v47, (int *)(v2[23] + 12 * (int)v12), (int *)(v2[23] + 12 * (int)v13), (int *)(v2[23] + 12 * (int)v14), (int *)(v2[23] + 12 * (int)v9), (_DWORD *)v179[0]);
          if (v164 == 2)
          {
            sub_20C6E9868((unint64_t)v46, v48, v49, (_DWORD *)(v2[23] + 12 * v50), (_DWORD *)(v2[23] + 12 * v51), (int *)(v2[23] + 12 * (int)v9), (int *)v177[0]);
LABEL_52:
            v68 = 0;
            v69 = v180[0];
            v70 = v179[0];
            v71 = v178[0];
            v72 = v176[0];
            v73 = v175[0];
            v74 = v174[0];
            v75 = v177[0];
            v76 = __p[0];
            do
            {
              v77 = v48[v68] + v46[v68] - v49[v68];
              v69[v68] = v77;
              v78 = v70[v68];
              v36 = __OFADD__(v78, v77);
              v79 = v78 + v77;
              if (v79 < 0 != v36)
                ++v79;
              v71[v68] = v79 >> 1;
              v72[v68] = v10[v68] - v69[v68];
              v73[v68] = v10[v68] - v70[v68];
              v74[v68] = v10[v68] - v71[v68];
              v76[v68] = v10[v68] - v75[v68];
              ++v68;
            }
            while (v168 != v68);
          }
          else if (v164 >= 1)
          {
            v58 = v177[0];
            v59 = v168;
            v60 = v46;
            v61 = v48;
            v62 = v49;
            do
            {
              v64 = *v60++;
              v63 = v64;
              v65 = *v61++;
              v66 = v65 + v63;
              v67 = *v62++;
              *v58++ = v66 - v67;
              --v59;
            }
            while (v59);
            goto LABEL_52;
          }
          if (*(_BYTE *)(a2 + 24))
          {
            LODWORD(v4) = v164;
            v158 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((__b + 2048) >> 10) & 0x7CLL));
            v155 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v185 + 2048) >> 10) & 0x7CLL));
            v151 = sub_20C70767C((int *)v176[0], v164, *v163, v189);
            v145 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v186 + 2048) >> 10) & 0x7CLL));
            v148 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)__b) >> 10) & 0x3FFFFFFFFFFFFCLL));
            v80 = sub_20C70767C((int *)v175[0], v164, *v163, v189);
            v81 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((__b + 2048) >> 10) & 0x7CLL));
            v82 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v185) >> 10) & 0x3FFFFFFFFFFFFCLL));
            v83 = sub_20C70767C((int *)v174[0], v164, *v163, v189);
            v84 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)__b) >> 10) & 0x3FFFFFFFFFFFFCLL));
            v85 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v186) >> 10) & 0x3FFFFFFFFFFFFCLL));
            v86 = sub_20C70767C((int *)__p[0], v164, *v163, v189);
            v87 = v155 + v158 + v151;
            v88 = v145 + v148 + v80;
            v89 = v82 + v81 + v83;
            v90 = v85 + v84 + v86;
            v2 = v153;
            v5 = v162;
            v55 = (_BYTE *)(a2 + 8);
          }
          else
          {
            v55 = (_BYTE *)(a2 + 8);
            LODWORD(v4) = v164;
            if (v164 < 1)
            {
              v87 = 0;
              v88 = 0;
              v89 = 0;
              v90 = 0;
            }
            else
            {
              v96 = *(_DWORD *)v176[0];
              if (*(int *)v176[0] < 0)
                v96 = -v96;
              v87 = -(v164 * __clz(v96 + 1));
              v97 = *(_DWORD *)v175[0];
              if (*(int *)v175[0] < 0)
                v97 = -v97;
              v88 = -(v164 * __clz(v97 + 1));
              v98 = *(_DWORD *)v174[0];
              if (*(int *)v174[0] < 0)
                v98 = -v98;
              v89 = -(v164 * __clz(v98 + 1));
              v99 = *(_DWORD *)__p[0];
              if (*(int *)__p[0] < 0)
                v99 = -v99;
              v90 = -(v164 * __clz(v99 + 1));
            }
            v5 = v162;
          }
          if (v87 <= v88 && v87 <= v89 && v87 <= v90)
          {
            v130 = 0;
            v133 = 0;
            goto LABEL_113;
          }
          if (v88 <= v89 && v88 <= v90)
          {
            v130 = 0;
            v133 = 1;
            v170 = (char *)v179[0];
            goto LABEL_119;
          }
          if (v89 <= v90)
          {
            v133 = 0;
            v130 = 1;
            v170 = (char *)v178[0];
LABEL_113:
            v132 = 1;
          }
          else
          {
            v130 = 1;
            v170 = (char *)v177[0];
            v133 = 1;
LABEL_119:
            v132 = 2;
          }
          v134 = v161;
          sub_20C6E8A80(v161, v133, &__b);
          p_b = &__b;
LABEL_124:
          sub_20C6E8A80(v134, v130, &p_b[v132]);
          v54 = 2;
          v6 = v165;
          v15 = v170;
          goto LABEL_125;
        }
      }
      if ((_DWORD)v13 == -1)
        break;
      if (v7)
      {
        v52 = v2[387];
        if (!*(_BYTE *)(v52 + v12) || !*(_BYTE *)(v52 + v13))
          break;
      }
      if ((_DWORD)v4 != 2)
      {
        if ((int)v4 >= 1)
        {
          v91 = 0;
          v92 = v5 + 4 * (int)v12 * (int)v4;
          v55 = (_BYTE *)(a2 + 8);
          do
          {
            v93 = *(_DWORD *)(v92 + v91);
            v94 = *(_DWORD *)(v5 + 4 * (int)v13 * (int)v4 + v91);
            v36 = __OFADD__(v94, v93);
            v95 = v94 + v93;
            if (v95 < 0 != v36)
              ++v95;
            *(_DWORD *)&v15[v91] = v95 >> 1;
            v91 += 4;
          }
          while (v8 != v91);
          v54 = 1;
          goto LABEL_125;
        }
        v54 = 1;
LABEL_106:
        v55 = (_BYTE *)(a2 + 8);
        goto LABEL_125;
      }
      v172 = 0;
      v53 = (char *)v180[0];
      sub_20C6E940C((int *)(v5 + 8 * v12), (int *)(v5 + 8 * (_DWORD)v13), v10, (_DWORD *)(v2[23] + 12 * (int)v12), (_DWORD *)(v2[23] + 12 * (int)v13), (int *)(v2[23] + 12 * (int)v9), (int *)v180[0], &v172);
      sub_20C6E8A80(v161, v172 != 0, &v187);
      v54 = 1;
      v55 = (_BYTE *)(a2 + 8);
      v15 = v53;
LABEL_125:
      sub_20C6FA124((uint64_t)v2, v6, (uint64_t)v10, (uint64_t)v15, v4, v167, v55, &v188[15 * v54]);
      v7 = v166;
      v8 = v169;
LABEL_126:
      if (++v6 == v171)
        goto LABEL_129;
    }
    if ((_DWORD)v12 == -1 || v7 && !*(_BYTE *)(v2[387] + v12))
    {
      if ((int)v4 >= 1)
      {
        v57 = (char *)v180[0];
        bzero(v180[0], v169);
        v15 = v57;
      }
      LOBYTE(v172) = 3;
      sub_20C6FA124((uint64_t)v2, v6, (uint64_t)v10, (uint64_t)v15, v4, v167, &v172, 0);
      v7 = v166;
      v8 = v169;
      goto LABEL_126;
    }
    if ((int)v4 >= 1)
    {
      v56 = 0;
      v55 = (_BYTE *)(a2 + 8);
      do
      {
        *(_DWORD *)&v15[v56] = *(_DWORD *)(v5 + 4 * (int)v12 * (int)v4 + v56);
        v56 += 4;
      }
      while (v8 != v56);
      v54 = 0;
      goto LABEL_125;
    }
    v54 = 0;
    goto LABEL_106;
  }
LABEL_129:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v174[0])
  {
    v174[1] = v174[0];
    operator delete(v174[0]);
  }
  if (v175[0])
  {
    v175[1] = v175[0];
    operator delete(v175[0]);
  }
  if (v176[0])
  {
    v176[1] = v176[0];
    operator delete(v176[0]);
  }
  if (v177[0])
  {
    v177[1] = v177[0];
    operator delete(v177[0]);
  }
  if (v178[0])
  {
    v178[1] = v178[0];
    operator delete(v178[0]);
  }
  if (v179[0])
  {
    v179[1] = v179[0];
    operator delete(v179[0]);
  }
  if (v180[0])
  {
    v180[1] = v180[0];
    operator delete(v180[0]);
  }
  v136 = 45;
  do
  {
    v137 = &v188[v136];
    v138 = v180[v136 + 2];
    if (v138)
    {
      *((_QWORD *)v137 - 2) = v138;
      operator delete(v138);
    }
    v139 = (void *)*((_QWORD *)v137 - 6);
    if (v139)
    {
      v180[v136] = v139;
      operator delete(v139);
    }
    v140 = &v188[v136];
    v141 = v178[v136 + 2];
    if (v141)
    {
      *((_QWORD *)v140 - 8) = v141;
      operator delete(v141);
    }
    v142 = (void *)*((_QWORD *)v140 - 12);
    if (v142)
    {
      v178[v136] = v142;
      operator delete(v142);
    }
    v143 = (void *)*((_QWORD *)v137 - 15);
    if (v143)
    {
      v177[v136] = v143;
      operator delete(v143);
    }
    v136 -= 15;
  }
  while (v136 * 8);
  return 0;
}

void sub_20C6FB8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t i;

  if (__p)
    operator delete(__p);
  if (a37)
    operator delete(a37);
  if (a40)
    operator delete(a40);
  if (a43)
    operator delete(a43);
  if (a46)
    operator delete(a46);
  if (a49)
    operator delete(a49);
  if (a52)
    operator delete(a52);
  for (i = 240; i != -120; i -= 120)
    sub_20C6EC7C0((uint64_t)(&a57 + i));
  _Unwind_Resume(a1);
}

uint64_t sub_20C6FBA04(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  int *v32;
  int *v33;
  uint64_t v34;
  int *v35;
  int v36;
  int v37;
  int v38;
  BOOL v39;
  int v40;
  unint64_t v41;
  char *v42;
  void *v43;
  void *v44;
  char *v45;
  void *v46;
  void *v47;
  void *v48;
  _BYTE *v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  void *__p[3];
  void *v56;
  _QWORD v57[2];
  __int16 v58;
  _OWORD v59[22];
  uint64_t v60;
  uint64_t v61;

  v4 = 0;
  v61 = *MEMORY[0x24BDAC8D0];
  v52 = *a1;
  v5 = (int)a1[780];
  v51 = a1 + 750;
  v6 = *((_QWORD *)a1 + 384);
  v60 = 0;
  memset(v59, 0, sizeof(v59));
  do
  {
    sub_20C6EC678((uint64_t)v59 + v4, v5);
    v4 += 120;
  }
  while (v4 != 360);
  v58 = 0x8000;
  LODWORD(__p[0]) = 0;
  sub_20C6E8A00(&v56, v5, __p);
  v54 = 0;
  sub_20C6E8A00(__p, v5, &v54);
  if ((int)v52 >= 1)
  {
    v7 = 0;
    v53 = *(_DWORD *)(a2 + 16);
    v50 = (_BYTE *)(a2 + 8);
    do
    {
      v8 = *(int *)(*((_QWORD *)a1 + 11) + 4 * v7);
      if (!v53 || *(_BYTE *)(*((_QWORD *)a1 + 387) + v8))
      {
        v9 = (int *)(v6 + 4 * (int)v8 * (int)v5);
        v10 = (int *)(*((_QWORD *)a1 + 17) + 12 * v8);
        v11 = *v10;
        v12 = v10[1];
        v13 = v10[2];
        v14 = v56;
        v15 = (int *)(*((_QWORD *)a1 + 20) + 12 * v8);
        v16 = v15[2];
        if ((_DWORD)v16 != -1
          && ((v17 = *v15, v18 = v15[1], !v53)
           || (v19 = *((_QWORD *)a1 + 387), *(_BYTE *)(v19 + v11))
           && *(_BYTE *)(v19 + v12)
           && *(_BYTE *)(v19 + v13)
           && *(_BYTE *)(v19 + v17)
           && *(_BYTE *)(v19 + v18)
           && *(_BYTE *)(v19 + v16)))
        {
          sub_20C6E916C((int *)(v6 + 4 * (int)v11 * (int)v5), (int *)(v6 + 4 * (int)v12 * (int)v5), (int *)(v6 + 4 * (int)v13 * (int)v5), v5, (int *)(*((_QWORD *)a1 + 23) + 12 * (int)v11), (int *)(*((_QWORD *)a1 + 23) + 12 * (int)v12), (int *)(*((_QWORD *)a1 + 23) + 12 * (int)v13), (int *)(*((_QWORD *)a1 + 23) + 12 * (int)v8), v56);
          sub_20C6E916C((int *)(v6 + 4 * (int)v17 * (int)v5), (int *)(v6 + 4 * (int)v18 * (int)v5), (int *)(v6 + 4 * (int)v16 * (int)v5), v5, (int *)(*((_QWORD *)a1 + 23) + 12 * (int)v17), (int *)(*((_QWORD *)a1 + 23) + 12 * (int)v18), (int *)(*((_QWORD *)a1 + 23) + 12 * (int)v16), (int *)(*((_QWORD *)a1 + 23) + 12 * (int)v8), (_DWORD *)__p[0]);
          v9 = (int *)(v6 + 4 * (int)v8 * (int)v5);
          if ((int)v5 >= 1)
          {
            v20 = (int *)v56;
            v21 = (int *)__p[0];
            v22 = v5;
            do
            {
              v23 = *v21++;
              v24 = v23 + *v20;
              if (v24 < 0 != __OFADD__(v23, *v20))
                ++v24;
              *v20++ = v24 >> 1;
              --v22;
            }
            while (v22);
          }
          v25 = 2;
        }
        else if ((_DWORD)v13 != -1
               && (!v53
                || (v26 = *((_QWORD *)a1 + 387), *(_BYTE *)(v26 + v11))
                && *(_BYTE *)(v26 + v12)
                && *(_BYTE *)(v26 + v13)))
        {
          sub_20C6E916C((int *)(v6 + 4 * (int)v11 * (int)v5), (int *)(v6 + 4 * (int)v12 * (int)v5), (int *)(v6 + 4 * (int)v13 * (int)v5), v5, (int *)(*((_QWORD *)a1 + 23) + 12 * (int)v11), (int *)(*((_QWORD *)a1 + 23) + 12 * (int)v12), (int *)(*((_QWORD *)a1 + 23) + 12 * (int)v13), (int *)(*((_QWORD *)a1 + 23) + 12 * (int)v8), v56);
          v25 = 2;
          v9 = (int *)(v6 + 4 * (int)v8 * (int)v5);
        }
        else if ((_DWORD)v12 == -1
               || v53 && ((v27 = *((_QWORD *)a1 + 387), !*(_BYTE *)(v27 + v11)) || !*(_BYTE *)(v27 + v12)))
        {
          if ((_DWORD)v11 == -1 || v53 && !*(_BYTE *)(*((_QWORD *)a1 + 387) + v11))
          {
            if ((int)v5 >= 1)
            {
              bzero(v56, 4 * v5);
              v9 = (int *)(v6 + 4 * (int)v8 * (int)v5);
            }
            LOBYTE(v54) = 3;
            sub_20C6FA124((uint64_t)a1, v7, (uint64_t)v9, (uint64_t)v14, v5, v51, &v54, 0);
            goto LABEL_50;
          }
          if ((int)v5 >= 1)
          {
            v28 = (int *)(v6 + 4 * (int)v11 * (int)v5);
            v29 = v5;
            v30 = v56;
            do
            {
              v31 = *v28++;
              *v30++ = v31;
              --v29;
            }
            while (v29);
          }
          v25 = 0;
        }
        else if ((_DWORD)v5 == 2)
        {
          v54 = 0;
          sub_20C6E940C((int *)(v6 + 8 * v11), (int *)(v6 + 8 * (_DWORD)v12), v9, (_DWORD *)(*((_QWORD *)a1 + 23) + 12 * (int)v11), (_DWORD *)(*((_QWORD *)a1 + 23) + 12 * (int)v12), (int *)(*((_QWORD *)a1 + 23) + 12 * (int)v8), (int *)v56, &v54);
          sub_20C6E8A80((uint64_t)(a1 + 890), v54 != 0, &v58);
          v25 = 1;
          v9 = (int *)(v6 + 8 * (_DWORD)v8);
        }
        else
        {
          if ((int)v5 >= 1)
          {
            v32 = (int *)(v6 + 4 * (int)v11 * (int)v5);
            v33 = (int *)(v6 + 4 * (int)v12 * (int)v5);
            v34 = v5;
            v35 = (int *)v56;
            do
            {
              v37 = *v32++;
              v36 = v37;
              v38 = *v33++;
              v39 = __OFADD__(v38, v36);
              v40 = v38 + v36;
              if (v40 < 0 != v39)
                ++v40;
              *v35++ = v40 >> 1;
              --v34;
            }
            while (v34);
          }
          v25 = 1;
        }
        sub_20C6FA124((uint64_t)a1, v7, (uint64_t)v9, (uint64_t)v14, v5, v51, v50, (_QWORD *)v59 + 15 * v25);
      }
LABEL_50:
      ++v7;
    }
    while (v7 != v52);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v56)
  {
    v57[0] = v56;
    operator delete(v56);
  }
  v41 = 360;
  do
  {
    v42 = (char *)v59 + v41;
    v43 = (void *)v57[v41 / 8];
    if (v43)
    {
      *((_QWORD *)v42 - 2) = v43;
      operator delete(v43);
    }
    v44 = (void *)*((_QWORD *)v42 - 6);
    if (v44)
    {
      __p[v41 / 8 + 2] = v44;
      operator delete(v44);
    }
    v45 = (char *)v59 + v41;
    v46 = *(void **)((char *)&v59[-4] + v41 - 8);
    if (v46)
    {
      *((_QWORD *)v45 - 8) = v46;
      operator delete(v46);
    }
    v47 = (void *)*((_QWORD *)v45 - 12);
    if (v47)
    {
      *(_QWORD *)((char *)&v59[-5] + v41 - 8) = v47;
      operator delete(v47);
    }
    v48 = (void *)*((_QWORD *)v42 - 15);
    if (v48)
    {
      *(_QWORD *)((char *)&v59[-7] + v41) = v48;
      operator delete(v48);
    }
    v41 -= 120;
  }
  while (v41);
  return 0;
}

void sub_20C6FBF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t i;

  if (__p)
    operator delete(__p);
  for (i = 240; i != -120; i -= 120)
    sub_20C6EC7C0((uint64_t)(&a25 + i));
  _Unwind_Resume(a1);
}

uint64_t sub_20C6FBF9C(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int *v14;
  int *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int *v25;
  int *v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  int *v36;
  uint64_t v37;
  char *v38;
  int v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  unsigned __int16 **v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  void *v87;
  void *v88;
  _BYTE *v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  int v104;
  int v105;
  _BYTE *v106;
  _QWORD *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  void *__p[3];
  void *v113[3];
  void *v114[3];
  void *v115[3];
  void *v116[3];
  void *v117;
  _QWORD v118[2];
  void *v119[3];
  char *v120;
  _QWORD v121[2];
  unsigned __int16 __b;
  unsigned __int16 v123;
  unsigned __int16 v124;
  _QWORD v125[44];
  uint64_t v126;
  uint64_t v127;

  v2 = 0;
  v127 = *MEMORY[0x24BDAC8D0];
  v109 = *a1;
  v3 = (int)a1[780];
  v107 = a1 + 750;
  v110 = *((_QWORD *)a1 + 384);
  v126 = 0;
  memset(v125, 0, sizeof(v125));
  do
  {
    sub_20C6EC678((uint64_t)&v125[v2], v3);
    v2 += 15;
  }
  while (v2 != 45);
  memset_pattern16(&__b, &unk_20CAF8CE0, 6uLL);
  LODWORD(v119[0]) = 0;
  sub_20C6E8A00(&v120, v3, v119);
  LODWORD(v117) = 0;
  sub_20C6E8A00(v119, v3, &v117);
  v4 = a1;
  LODWORD(v116[0]) = 0;
  sub_20C6E8A00(&v117, v3, v116);
  LODWORD(v115[0]) = 0;
  sub_20C6E8A00(v116, v3, v115);
  LODWORD(v114[0]) = 0;
  sub_20C6E8A00(v115, v3, v114);
  LODWORD(v113[0]) = 0;
  sub_20C6E8A00(v114, v3, v113);
  LODWORD(__p[0]) = 0;
  sub_20C6E8A00(v113, v3, __p);
  v111 = 0;
  sub_20C6E8A00(__p, v3, &v111);
  if ((int)v109 >= 1)
  {
    v5 = 0;
    v6 = *(_DWORD *)(a2 + 16);
    v94 = (uint64_t)(a1 + 890);
    v106 = (_BYTE *)(a2 + 8);
    v108 = v6;
    v101 = 4 * v3;
    while (1)
    {
      v7 = *(int *)(v4[11] + 4 * v5);
      if (!v6 || *(_BYTE *)(v4[387] + v7))
        break;
LABEL_81:
      if (++v5 == v109)
        goto LABEL_85;
    }
    v8 = (int *)(v4[17] + 12 * (int)v7);
    v10 = *v8;
    v9 = v8[1];
    v11 = v8[2];
    v12 = v120;
    if ((_DWORD)v11 != -1
      && (!v6 || (v13 = v4[387], *(_BYTE *)(v13 + v10)) && *(_BYTE *)(v13 + v9) && *(_BYTE *)(v13 + v11)))
    {
      if ((int)v3 < 1)
      {
        LODWORD(v17) = 0;
      }
      else
      {
        v14 = (int *)(v110 + 4 * (int)v10 * (int)v3);
        v15 = (int *)(v110 + 4 * (int)v9 * (int)v3);
        v16 = (int *)(v110 + 4 * (int)v11 * (int)v3);
        v17 = v3;
        v18 = v120;
        do
        {
          v20 = *v14++;
          v19 = v20;
          v21 = *v15++;
          v22 = v21 + v19;
          v23 = *v16++;
          *(_DWORD *)v18 = v22 - v23;
          v18 += 4;
          --v17;
        }
        while (v17);
      }
      v34 = 2;
      v35 = 2;
    }
    else if ((_DWORD)v9 == -1 || v6 && ((v24 = v4[387], !*(_BYTE *)(v24 + v10)) || !*(_BYTE *)(v24 + v9)))
    {
      if ((_DWORD)v10 == -1 || v6 && !*(_BYTE *)(v4[387] + v10))
      {
        if ((int)v3 >= 1)
        {
          bzero(v120, v101);
          v6 = v108;
        }
        v34 = 0;
        v35 = -1;
        LODWORD(v17) = 1;
      }
      else
      {
        if ((int)v3 >= 1)
        {
          v36 = (int *)(v110 + 4 * (int)v10 * (int)v3);
          v37 = v3;
          v38 = v120;
          do
          {
            v39 = *v36++;
            *(_DWORD *)v38 = v39;
            v38 += 4;
            --v37;
          }
          while (v37);
        }
        v34 = 0;
        LODWORD(v17) = 0;
        v35 = 0;
      }
    }
    else
    {
      if ((int)v3 >= 1)
      {
        v25 = (int *)(v110 + 4 * (int)v10 * (int)v3);
        v26 = (int *)(v110 + 4 * (int)v9 * (int)v3);
        v27 = v3;
        v28 = (int *)v120;
        do
        {
          v30 = *v25++;
          v29 = v30;
          v31 = *v26++;
          v32 = __OFADD__(v31, v29);
          v33 = v31 + v29;
          if (v33 < 0 != v32)
            ++v33;
          *v28++ = v33 >> 1;
          --v27;
        }
        while (v27);
      }
      LODWORD(v17) = 0;
      v34 = 1;
      v35 = 1;
    }
    v40 = v110 + 4 * (int)v7 * (int)v3;
    v41 = (int *)(v4[20] + 12 * (int)v7);
    v42 = v41[2];
    if ((_DWORD)v42 == -1
      || (v43 = *v41, v44 = v41[1], v6)
      && ((v45 = v4[387], !*(_BYTE *)(v45 + v10))
       || !*(_BYTE *)(v45 + v9)
       || !*(_BYTE *)(v45 + v11)
       || !*(_BYTE *)(v45 + v43)
       || !*(_BYTE *)(v45 + v44)
       || !*(_BYTE *)(v45 + v42)))
    {
LABEL_77:
      if ((_DWORD)v17)
      {
        LOBYTE(v111) = 3;
        sub_20C6FA124((uint64_t)v4, v5, v40, (uint64_t)v12, v3, v107, &v111, 0);
      }
      else
      {
        sub_20C6FA124((uint64_t)v4, v5, v40, (uint64_t)v12, v3, v107, v106, &v125[15 * v35]);
      }
      v6 = v108;
      goto LABEL_81;
    }
    v104 = v35;
    v105 = v17;
    if ((int)v3 < 1)
    {
      v70 = *(unsigned __int8 *)(a2 + 24);
      if (!*(_BYTE *)(a2 + 24))
      {
        v68 = 0;
        v72 = 0;
        v74 = 0;
        goto LABEL_65;
      }
    }
    else
    {
      v46 = 0;
      v47 = v110 + 4 * (int)v10 * (int)v3;
      v48 = v110 + 4 * (int)v9 * (int)v3;
      v49 = v110 + 4 * (int)v11 * (int)v3;
      v50 = v110 + 4 * (int)v43 * (int)v3;
      v51 = v110 + 4 * (int)v44 * (int)v3;
      v52 = v110 + 4 * (int)v42 * (int)v3;
      v53 = (char *)v119[0];
      v54 = (char *)v117;
      v55 = (char *)v116[0];
      v56 = (char *)v115[0];
      v57 = (char *)v114[0];
      v58 = (char *)v113[0];
      v59 = (char *)__p[0];
      do
      {
        *(_DWORD *)&v53[v46] = *(_DWORD *)(v51 + v46) + *(_DWORD *)(v50 + v46) - *(_DWORD *)(v52 + v46);
        v60 = *(_DWORD *)(v47 + v46);
        v61 = *(_DWORD *)(v50 + v46);
        v62 = v61 + v60;
        if (v61 + v60 < 0 != __OFADD__(v61, v60))
          ++v62;
        *(_DWORD *)&v54[v46] = *(_DWORD *)(v51 + v46) + *(_DWORD *)(v48 + v46) - (v62 >> 1);
        v63 = *(_DWORD *)(v47 + v46);
        v64 = *(_DWORD *)(v50 + v46);
        v32 = __OFADD__(v64, v63);
        v65 = v64 + v63;
        if (v65 < 0 != v32)
          ++v65;
        v66 = 1431655766
            * ((v65 >> 1)
             - (*(_DWORD *)(v49 + v46)
              + *(_DWORD *)(v52 + v46))
             + 2 * (*(_DWORD *)(v51 + v46) + *(_DWORD *)(v48 + v46)));
        *(_DWORD *)&v55[v46] = HIDWORD(v66) + (v66 >> 63);
        *(_DWORD *)&v56[v46] = *(_DWORD *)(v40 + v46) - *(_DWORD *)&v12[v46];
        *(_DWORD *)&v57[v46] = *(_DWORD *)(v40 + v46) - *(_DWORD *)&v53[v46];
        *(_DWORD *)&v58[v46] = *(_DWORD *)(v40 + v46) - *(_DWORD *)&v54[v46];
        *(_DWORD *)&v59[v46] = *(_DWORD *)(v40 + v46) - *(_DWORD *)&v55[v46];
        v46 += 4;
      }
      while (v101 != v46);
      if (!*(_BYTE *)(a2 + 24))
      {
        v67 = *(_DWORD *)v115[0];
        if (*(int *)v115[0] < 0)
          v67 = -v67;
        v68 = -(v3 * __clz(v67 + 1));
        v69 = *(_DWORD *)v114[0];
        if (*(int *)v114[0] < 0)
          v69 = -v69;
        v70 = -(v3 * __clz(v69 + 1));
        v71 = *(_DWORD *)v113[0];
        if (*(int *)v113[0] < 0)
          v71 = -v71;
        v72 = -(v3 * __clz(v71 + 1));
        v73 = *(_DWORD *)__p[0];
        if (*(int *)__p[0] < 0)
          v73 = -v73;
        v74 = -(v3 * __clz(v73 + 1));
LABEL_65:
        if (v68 <= v70 && v68 <= v72 && v68 <= v74)
        {
          v82 = 0;
          v83 = 0;
LABEL_69:
          v84 = 1;
LABEL_76:
          sub_20C6E8A80(v94, v83, &__b);
          sub_20C6E8A80(v94, v82, &__b + v84);
          v4 = a1;
          v35 = v104;
          LODWORD(v17) = v105;
          goto LABEL_77;
        }
        if (v70 > v72 || v70 > v74)
        {
          if (v72 <= v74)
          {
            v83 = 0;
            v82 = 1;
            v12 = (char *)v117;
            goto LABEL_69;
          }
          v82 = 1;
          v12 = (char *)v116[0];
          v83 = 1;
        }
        else
        {
          v82 = 0;
          v83 = 1;
          v12 = (char *)v119[0];
        }
        v84 = 2;
        goto LABEL_76;
      }
    }
    v75 = (unsigned __int16 **)&v125[15 * v34];
    v99 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v123 + 2048) >> 10) & 0x7CLL));
    v100 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((__b + 2048) >> 10) & 0x7CLL));
    v98 = sub_20C70767C((int *)v115[0], v3, *v106, v75);
    v96 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v124 + 2048) >> 10) & 0x7CLL));
    v97 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)__b) >> 10) & 0x3FFFFFFFFFFFFCLL));
    v95 = sub_20C70767C((int *)v114[0], v3, *v106, v75);
    v76 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((__b + 2048) >> 10) & 0x7CLL));
    v77 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v123) >> 10) & 0x3FFFFFFFFFFFFCLL));
    v78 = sub_20C70767C((int *)v113[0], v3, *v106, v75);
    v79 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)__b) >> 10) & 0x3FFFFFFFFFFFFCLL));
    v80 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v124) >> 10) & 0x3FFFFFFFFFFFFCLL));
    v81 = sub_20C70767C((int *)__p[0], v3, *v106, v75);
    v68 = v99 + v100 + v98;
    v70 = v96 + v97 + v95;
    v72 = v77 + v76 + v78;
    v74 = v80 + v79 + v81;
    goto LABEL_65;
  }
LABEL_85:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v113[0])
  {
    v113[1] = v113[0];
    operator delete(v113[0]);
  }
  if (v114[0])
  {
    v114[1] = v114[0];
    operator delete(v114[0]);
  }
  if (v115[0])
  {
    v115[1] = v115[0];
    operator delete(v115[0]);
  }
  if (v116[0])
  {
    v116[1] = v116[0];
    operator delete(v116[0]);
  }
  if (v117)
  {
    v118[0] = v117;
    operator delete(v117);
  }
  if (v119[0])
  {
    v119[1] = v119[0];
    operator delete(v119[0]);
  }
  if (v120)
  {
    v121[0] = v120;
    operator delete(v120);
  }
  v85 = 45;
  do
  {
    v86 = &v125[v85];
    v87 = (void *)v121[v85];
    if (v87)
    {
      *((_QWORD *)v86 - 2) = v87;
      operator delete(v87);
    }
    v88 = (void *)*((_QWORD *)v86 - 6);
    if (v88)
    {
      v119[v85 + 2] = v88;
      operator delete(v88);
    }
    v89 = &v125[v85];
    v90 = (void *)v118[v85];
    if (v90)
    {
      *((_QWORD *)v89 - 8) = v90;
      operator delete(v90);
    }
    v91 = (void *)*((_QWORD *)v89 - 12);
    if (v91)
    {
      v116[v85 + 2] = v91;
      operator delete(v91);
    }
    v92 = (void *)*((_QWORD *)v86 - 15);
    if (v92)
    {
      v115[v85 + 2] = v92;
      operator delete(v92);
    }
    v85 -= 15;
  }
  while (v85 * 8);
  return 0;
}

void sub_20C6FC8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t i;

  if (__p)
    operator delete(__p);
  if (a32)
    operator delete(a32);
  if (a35)
    operator delete(a35);
  if (a38)
    operator delete(a38);
  if (a41)
    operator delete(a41);
  if (a44)
    operator delete(a44);
  if (a47)
    operator delete(a47);
  for (i = 240; i != -120; i -= 120)
    sub_20C6EC7C0((uint64_t)(&a51 + i));
  _Unwind_Resume(a1);
}

uint64_t sub_20C6FC9C8(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  void *v38;
  unint64_t v39;
  char *v40;
  void *v41;
  void *v42;
  char *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v48;
  int v49;
  void *__p[3];
  _OWORD v51[22];
  uint64_t v52;
  uint64_t v53;

  v4 = 0;
  v53 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = (int)a1[780];
  v7 = a1 + 750;
  v8 = *((_QWORD *)a1 + 384);
  v52 = 0;
  memset(v51, 0, sizeof(v51));
  do
  {
    sub_20C6EC678((uint64_t)v51 + v4, v6);
    v4 += 120;
  }
  while (v4 != 360);
  v49 = 0;
  sub_20C6E8A00(__p, v6, &v49);
  if ((int)v5 >= 1)
  {
    v9 = 0;
    v10 = *(_DWORD *)(a2 + 16);
    v11 = (_BYTE *)(a2 + 8);
    v12 = 4 * v6;
    v48 = v8;
    do
    {
      v13 = *(int *)(*((_QWORD *)a1 + 11) + 4 * v9);
      if (!v10 || *(_BYTE *)(*((_QWORD *)a1 + 387) + v13))
      {
        v14 = v8 + 4 * (int)v13 * (int)v6;
        v15 = (int *)(*((_QWORD *)a1 + 17) + 12 * (int)v13);
        v16 = *v15;
        v17 = v15[1];
        v18 = v15[2];
        if ((_DWORD)v18 != -1
          && (!v10
           || (v19 = *((_QWORD *)a1 + 387), *(_BYTE *)(v19 + v16)) && *(_BYTE *)(v19 + v17) && *(_BYTE *)(v19 + v18)))
        {
          v20 = (char *)__p[0];
          if ((int)v6 >= 1)
          {
            v21 = 0;
            v22 = v8 + 4 * (int)v16 * (int)v6;
            v23 = v8 + 4 * (int)v17 * (int)v6;
            v24 = v8 + 4 * (int)v18 * (int)v6;
            do
            {
              *(_DWORD *)&v20[v21] = *(_DWORD *)(v23 + v21) + *(_DWORD *)(v22 + v21) - *(_DWORD *)(v24 + v21);
              v21 += 4;
            }
            while (v12 != v21);
          }
          v25 = 2;
        }
        else if ((_DWORD)v17 == -1
               || v10 && ((v26 = *((_QWORD *)a1 + 387), !*(_BYTE *)(v26 + v16)) || !*(_BYTE *)(v26 + v17)))
        {
          if ((_DWORD)v16 == -1 || v10 && !*(_BYTE *)(*((_QWORD *)a1 + 387) + v16))
          {
            v36 = v5;
            v37 = v11;
            v38 = __p[0];
            if ((int)v6 >= 1)
              bzero(__p[0], 4 * v6);
            LOBYTE(v49) = 3;
            sub_20C6FA124((uint64_t)a1, v9, v14, (uint64_t)v38, v6, v7, &v49, 0);
            v11 = v37;
            v5 = v36;
            v8 = v48;
            goto LABEL_37;
          }
          v20 = (char *)__p[0];
          if ((int)v6 >= 1)
          {
            v34 = 0;
            v35 = v8 + 4 * (int)v16 * (int)v6;
            do
            {
              *(_DWORD *)&v20[v34] = *(_DWORD *)(v35 + v34);
              v34 += 4;
            }
            while (v12 != v34);
          }
          v25 = 0;
        }
        else
        {
          v20 = (char *)__p[0];
          if ((int)v6 >= 1)
          {
            v27 = 0;
            v28 = v8 + 4 * (int)v16 * (int)v6;
            v29 = v8 + 4 * (int)v17 * (int)v6;
            do
            {
              v30 = *(_DWORD *)(v28 + v27);
              v31 = *(_DWORD *)(v29 + v27);
              v32 = __OFADD__(v31, v30);
              v33 = v31 + v30;
              if (v33 < 0 != v32)
                ++v33;
              *(_DWORD *)&v20[v27] = v33 >> 1;
              v27 += 4;
            }
            while (v12 != v27);
          }
          v25 = 1;
        }
        sub_20C6FA124((uint64_t)a1, v9, v14, (uint64_t)v20, v6, v7, v11, (_QWORD *)v51 + 15 * v25);
      }
LABEL_37:
      ++v9;
    }
    while (v9 != v5);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v39 = 360;
  do
  {
    v40 = (char *)v51 + v39;
    v41 = __p[v39 / 8];
    if (v41)
    {
      *((_QWORD *)v40 - 2) = v41;
      operator delete(v41);
    }
    v42 = (void *)*((_QWORD *)v40 - 6);
    if (v42)
    {
      *(_QWORD *)((char *)&v51[-2] + v39 - 8) = v42;
      operator delete(v42);
    }
    v43 = (char *)v51 + v39;
    v44 = *(void **)((char *)&v51[-4] + v39 - 8);
    if (v44)
    {
      *((_QWORD *)v43 - 8) = v44;
      operator delete(v44);
    }
    v45 = (void *)*((_QWORD *)v43 - 12);
    if (v45)
    {
      *(_QWORD *)((char *)&v51[-5] + v39 - 8) = v45;
      operator delete(v45);
    }
    v46 = (void *)*((_QWORD *)v40 - 15);
    if (v46)
    {
      *(_QWORD *)((char *)&v51[-7] + v39) = v46;
      operator delete(v46);
    }
    v39 -= 120;
  }
  while (v39);
  return 0;
}

void sub_20C6FCD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t i;

  for (i = 240; i != -120; i -= 120)
    sub_20C6EC7C0((uint64_t)(&a15 + i));
  _Unwind_Resume(a1);
}

uint64_t sub_20C6FCD9C(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  _BYTE *v30;
  void *v31;
  uint64_t i;
  _QWORD *v33;
  void *v34;
  void *v35;
  char *v36;
  void *v37;
  void *v38;
  void *v39;
  _QWORD *v41;
  int v42;
  void *__p[3];
  _OWORD v44[15];
  uint64_t v45;

  v4 = 0;
  v45 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = (int)a1[780];
  v41 = a1 + 750;
  v7 = *((_QWORD *)a1 + 384);
  memset(v44, 0, sizeof(v44));
  do
  {
    sub_20C6EC678((uint64_t)v44 + v4, v6);
    v4 += 120;
  }
  while (v4 != 240);
  v42 = 0;
  sub_20C6E8A00(__p, v6, &v42);
  if ((int)v5 >= 1)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a2 + 16);
    v10 = (_BYTE *)(a2 + 8);
    v11 = 4 * v6;
    while (1)
    {
      v12 = *(int *)(*((_QWORD *)a1 + 11) + 4 * v8);
      if (!v9)
        break;
      v13 = *((_QWORD *)a1 + 387);
      if (*(_BYTE *)(v13 + v12))
      {
        v14 = v7 + 4 * (int)v12 * (int)v6;
        v15 = (int *)(*((_QWORD *)a1 + 17) + 12 * (int)v12);
        v16 = *v15;
        v17 = v15[1];
        if (v17 == -1 || !*(_BYTE *)(v13 + v16) || !*(_BYTE *)(v13 + v17))
        {
          if (v16 == -1 || !*(_BYTE *)(v13 + v16))
          {
LABEL_25:
            v30 = v10;
            v31 = __p[0];
            if ((int)v6 >= 1)
              bzero(__p[0], 4 * v6);
            LOBYTE(v42) = 3;
            sub_20C6FA124((uint64_t)a1, v8, v14, (uint64_t)v31, v6, v41, &v42, 0);
            v10 = v30;
            goto LABEL_28;
          }
LABEL_12:
          v18 = (char *)__p[0];
          if ((int)v6 >= 1)
          {
            v19 = 0;
            v20 = v7 + 4 * v16 * (int)v6;
            do
            {
              *(_DWORD *)&v18[v19] = *(_DWORD *)(v20 + v19);
              v19 += 4;
            }
            while (v11 != v19);
          }
          v21 = 0;
LABEL_23:
          sub_20C6FA124((uint64_t)a1, v8, v14, (uint64_t)v18, v6, v41, v10, (_QWORD *)v44 + 15 * v21);
          goto LABEL_28;
        }
LABEL_17:
        v18 = (char *)__p[0];
        if ((int)v6 >= 1)
        {
          v23 = 0;
          v24 = v7 + 4 * v16 * (int)v6;
          v25 = v7 + 4 * v17 * (int)v6;
          do
          {
            v26 = *(_DWORD *)(v24 + v23);
            v27 = *(_DWORD *)(v25 + v23);
            v28 = __OFADD__(v27, v26);
            v29 = v27 + v26;
            if (v29 < 0 != v28)
              ++v29;
            *(_DWORD *)&v18[v23] = v29 >> 1;
            v23 += 4;
          }
          while (v11 != v23);
        }
        v21 = 1;
        goto LABEL_23;
      }
LABEL_28:
      if (++v8 == v5)
        goto LABEL_29;
    }
    v14 = v7 + 4 * (int)v12 * (int)v6;
    v22 = (int *)(*((_QWORD *)a1 + 17) + 12 * (int)v12);
    v16 = *v22;
    v17 = v22[1];
    if (v17 == -1)
    {
      if (v16 == -1)
        goto LABEL_25;
      goto LABEL_12;
    }
    goto LABEL_17;
  }
LABEL_29:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  for (i = 0; i != -240; i -= 120)
  {
    v33 = (_QWORD *)((char *)v44 + i);
    v34 = *(void **)((char *)&v44[13] + i + 8);
    if (v34)
    {
      v33[28] = v34;
      operator delete(v34);
    }
    v35 = (void *)v33[24];
    if (v35)
    {
      *(_QWORD *)((char *)&v44[12] + i + 8) = v35;
      operator delete(v35);
    }
    v36 = (char *)v44 + i;
    v37 = *(void **)((char *)&v44[10] + i + 8);
    if (v37)
    {
      *((_QWORD *)v36 + 22) = v37;
      operator delete(v37);
    }
    v38 = (void *)*((_QWORD *)v36 + 18);
    if (v38)
    {
      *(_QWORD *)((char *)&v44[9] + i + 8) = v38;
      operator delete(v38);
    }
    v39 = (void *)v33[15];
    if (v39)
    {
      *(_QWORD *)((char *)&v44[8] + i) = v39;
      operator delete(v39);
    }
  }
  return 0;
}

void sub_20C6FD0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t i;

  for (i = 120; i != -120; i -= 120)
    sub_20C6EC7C0((uint64_t)(&a15 + i));
  _Unwind_Resume(a1);
}

uint64_t sub_20C6FD0F4(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t result;
  _WORD __b[2];

  if (*(_DWORD *)(a2 + 16) == 1)
  {
    v4 = *a1;
    memset_pattern16(__b, &unk_20CAF8CE0, 4uLL);
    if ((int)v4 >= 1)
    {
      v5 = 0;
      v6 = 4 * v4;
      do
      {
        v7 = *(int *)(*((_QWORD *)a1 + 11) + v5);
        v8 = (int *)(*((_QWORD *)a1 + 17) + 12 * v7);
        v9 = *v8;
        v10 = v8[1];
        v11 = v8[2];
        v12 = (int *)(*((_QWORD *)a1 + 20) + 12 * v7);
        v13 = v12[2];
        if ((_DWORD)v13 == -1)
        {
          v14 = *((_QWORD *)a1 + 387);
          if ((_DWORD)v11 == -1)
          {
            if ((_DWORD)v10 == -1)
            {
              if ((_DWORD)v9 == -1)
                v9 = 0;
              else
                v9 = *(unsigned __int8 *)(v14 + v9);
            }
            else
            {
              LODWORD(v9) = *(unsigned __int8 *)(v14 + v9);
              if ((_DWORD)v9)
                LODWORD(v9) = *(_BYTE *)(v14 + v10) != 0;
              v9 = v9;
            }
            goto LABEL_11;
          }
          v15 = *(unsigned __int8 *)(v14 + v10)
              + *(unsigned __int8 *)(v14 + v9)
              + *(unsigned __int8 *)(v14 + v11) > 1;
        }
        else
        {
          v14 = *((_QWORD *)a1 + 387);
          v15 = *(unsigned __int8 *)(v14 + v10)
              + *(unsigned __int8 *)(v14 + v9)
              + *(unsigned __int8 *)(v14 + v11)
              + *(unsigned __int8 *)(v14 + *v12)
              + *(unsigned __int8 *)(v14 + v12[1])
              + *(unsigned __int8 *)(v14 + v13) > 2;
        }
        v9 = v15;
LABEL_11:
        v5 += 4;
        sub_20C6E8A80((uint64_t)(a1 + 890), *(unsigned __int8 *)(v14 + v7) != 0, &__b[v9]);
      }
      while (v6 != v5);
    }
  }
  switch(*(_DWORD *)(a2 + 12))
  {
    case 0:
      sub_20C6FCD9C(a1, a2);
      goto LABEL_29;
    case 1:
      sub_20C6FC9C8(a1, a2);
      goto LABEL_29;
    case 2:
      sub_20C6FBF9C(a1, a2);
      goto LABEL_29;
    case 3:
      sub_20C6FBA04(a1, a2);
      goto LABEL_29;
    case 4:
      sub_20C6FA9DC(a1, a2);
      goto LABEL_29;
    case 5:
      sub_20C6FA5D8(a1, a2);
      goto LABEL_29;
    case 6:
      sub_20C6F8264(a1, a2);
LABEL_29:
      result = 0;
      break;
    default:
      result = 5;
      break;
  }
  return result;
}

void sub_20C6FD2FC(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  _BOOL4 v17;
  _BOOL4 v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _BOOL4 v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;

  v26 = *a1;
  if ((int)v26 >= 1)
  {
    v4 = 0;
    v28 = a1 + 144;
    v5 = (uint64_t)(a1 + 890);
    v6 = (_WORD *)a1 + 1193;
    v7 = -1;
    do
    {
      v8 = *((_QWORD *)a1 + 8);
      v27 = v4;
      if (*(_DWORD *)(v8 + 4 * v4) == -1)
      {
        *(_DWORD *)(v8 + 4 * v4) = a1[70];
        v9 = (int)a1[70];
        a1[70] = v9 + 1;
        *(_DWORD *)(*((_QWORD *)a1 + 11) + 4 * v9) = v4;
        v10 = *(_BYTE *)(a2 + 21) ? -1 : v7;
        v11 = 3 * v4;
        *(_DWORD *)(*((_QWORD *)a1 + 17) + 12 * v4) = v10;
        sub_20C6FE774((uint64_t)a1, v4, a2);
        sub_20C6EF550(v28, (int *)(*((_QWORD *)a1 + 69) + 4 * v11));
        if (a1[144])
        {
          do
          {
            v12 = a1[145];
            if (v12 < 0)
              v13 = 0;
            else
              v13 = sub_20C6F54E0(v28, v12);
            v7 = -1431655765 * ((v13 - *((_QWORD *)a1 + 69)) >> 2);
            sub_20C6FD904((uint64_t)a1, v7);
            v14 = (*((_QWORD *)a1 + 58) - *((_QWORD *)a1 + 57)) >> 2;
            v15 = *(_DWORD *)(*((_QWORD *)a1 + 66) + 16 * v7);
            v16 = *(_DWORD *)(*((_QWORD *)a1 + 66) + 16 * v7 + 4);
            v17 = v15 != -1;
            v18 = v16 == v15 && v15 != -1;
            v19 = (v17 | (2 * (v16 != -1))) + v18;
            sub_20C6E8A80(v5, (int)v14 > 1, (_WORD *)a1 + v19 + 1188);
            if ((int)v14 >= 2)
            {
              v20 = 1;
              do
              {
                v29 = 0;
                v21 = sub_20C6FF2D8((uint64_t)a1, v7, v20 - 1, v19, (unsigned int *)&v29, a2);
                sub_20C6FFB98((uint64_t)a1, v29, v21, a2);
                sub_20C6FFC50(a1, v7, v21, a2);
                v22 = *(_DWORD *)(*((_QWORD *)a1 + 66) + 16 * v7);
                v23 = *(_DWORD *)(*((_QWORD *)a1 + 66) + 16 * v7 + 4);
                v24 = v22 != -1;
                v25 = v23 == v22 && v22 != -1;
                v19 = (v24 | (2 * (v23 != -1))) + v25;
                sub_20C6E8A80(v5, v20++ < (int)v14 - 1, v6);
              }
              while ((_DWORD)v14 != v20);
            }
          }
          while (*v28);
        }
      }
      v4 = v27 + 1;
    }
    while (v27 + 1 != v26);
  }
}

unsigned int *sub_20C6FD52C(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v2 = *result;
  if ((int)v2 >= 1)
  {
    v4 = (uint64_t)result;
    v5 = 0;
    LODWORD(v6) = 0;
    v7 = (uint64_t)(result + 890);
    v8 = (_WORD *)result + 1193;
    v9 = -1;
    v25 = *result;
    do
    {
      v10 = *(_QWORD *)(v4 + 64);
      if (*(_DWORD *)(v10 + 4 * v5) == -1)
      {
        *(_DWORD *)(v10 + 4 * v5) = *(_DWORD *)(v4 + 280);
        v11 = *(int *)(v4 + 280);
        *(_DWORD *)(v4 + 280) = v11 + 1;
        *(_DWORD *)(*(_QWORD *)(v4 + 88) + 4 * v11) = v5;
        v12 = *(_BYTE *)(a2 + 21) ? -1 : v9;
        *(_DWORD *)(*(_QWORD *)(v4 + 136) + 12 * v5) = v12;
        result = (unsigned int *)sub_20C6FE774(v4, v5, a2);
        if ((int)v6 < *(_DWORD *)(v4 + 280))
        {
          v26 = v5;
          v6 = (int)v6;
          do
          {
            v27 = v6;
            v9 = *(_DWORD *)(*(_QWORD *)(v4 + 88) + 4 * v6);
            sub_20C6FD904(v4, v9);
            v13 = (*(_QWORD *)(v4 + 464) - *(_QWORD *)(v4 + 456)) >> 2;
            v14 = *(_DWORD *)(*(_QWORD *)(v4 + 528) + 16 * v9);
            v15 = *(_DWORD *)(*(_QWORD *)(v4 + 528) + 16 * v9 + 4);
            v16 = v14 != -1;
            v17 = v15 == v14 && v14 != -1;
            v18 = (v16 | (2 * (v15 != -1))) + v17;
            result = (unsigned int *)sub_20C6E8A80(v7, (int)v13 > 1, (_WORD *)(v4 + 2 * v18 + 2376));
            if ((int)v13 >= 2)
            {
              v19 = 1;
              do
              {
                v28 = 0;
                v20 = sub_20C6FF2D8(v4, v9, v19 - 1, v18, (unsigned int *)&v28, a2);
                sub_20C6FFB98(v4, v28, v20, a2);
                v21 = *(_DWORD *)(*(_QWORD *)(v4 + 528) + 16 * v9);
                v22 = *(_DWORD *)(*(_QWORD *)(v4 + 528) + 16 * v9 + 4);
                v23 = v21 != -1;
                v24 = v22 == v21 && v21 != -1;
                v18 = (v23 | (2 * (v22 != -1))) + v24;
                result = (unsigned int *)sub_20C6E8A80(v7, v19++ < (int)v13 - 1, v8);
              }
              while ((_DWORD)v13 != v19);
            }
            ++v6;
          }
          while (v27 + 1 < *(int *)(v4 + 280));
          v2 = v25;
          v5 = v26;
        }
      }
      ++v5;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t sub_20C6FD724(uint64_t a1, int a2, int a3)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  signed int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  _WORD *v16;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * a2);
  v5 = *(_DWORD *)(a1 + 576);
  v6 = 38 - __clz(v5);
  if (v5)
    v7 = v6;
  else
    v7 = 6;
  v8 = v4 - a3;
  if (v4 == a3)
  {
    v9 = 1;
  }
  else
  {
    if (v8 >= 0)
      v10 = v4 - a3;
    else
      v10 = a3 - v4;
    v9 = 64 - 2 * __clz(v10 + 1);
  }
  v11 = a1 + 3560;
  v12 = (_WORD *)(a1 + 2576);
  if (v9 < v7 || (v13 = *(_QWORD *)(a1 + 552) + 12 * a2, v14 = *(_DWORD *)(v13 + 8), (v14 & 0x80000000) != 0))
  {
    sub_20C6E8A80(a1 + 3560, 0, v12);
    return sub_20C6E9058(a1 + 3560, v8, 0, (_WORD *)(a1 + 2610), (_WORD *)(a1 + 2612));
  }
  else
  {
    v15 = *(_DWORD *)(v13 + 4);
    sub_20C6E8A80(a1 + 3560, 1, v12);
    sub_20C6E8A80(a1 + 3560, v15 & 1, (_WORD *)(a1 + 2616));
    sub_20C6E8A80(a1 + 3560, (v15 >> 1) & 1, (_WORD *)(a1 + 2616 + 2 * (v15 & 1) + 2));
    sub_20C6E8A80(a1 + 3560, (v15 >> 2) & 1, (_WORD *)(a1 + 2616 + 2 * (v15 & 3) + 6));
    sub_20C6E8A80(a1 + 3560, (v15 >> 3) & 1, (_WORD *)(a1 + 2616 + 2 * (v15 & 7) + 14));
    sub_20C6E8A80(a1 + 3560, (v15 >> 4) & 1, (_WORD *)(a1 + 2616 + 2 * (v15 & 0xF) + 30));
    sub_20C6E8A80(a1 + 3560, (v15 >> 5) & 1, (_WORD *)(a1 + 2616 + 2 * (v15 & 0x1F) + 62));
    if (v14 > 2)
    {
      sub_20C6E8A80(a1 + 3560, 1, (_WORD *)(a1 + 2744));
      sub_20C6E8A80(a1 + 3560, 1, (_WORD *)(a1 + 2748));
      return sub_20C6E90B8(a1 + 3560, v14 - 3, 0, (_WORD *)(a1 + 2750));
    }
    else
    {
      v16 = (_WORD *)(a1 + 2744);
      sub_20C6E8A80(v11, v14 & 1, v16);
      return sub_20C6E8A80(v11, (v14 >> 1) & 1, &v16[(v14 & 1) + 1]);
    }
  }
}

void sub_20C6FD904(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void **v30;
  int v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _DWORD *v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  _DWORD *v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  char *v61;
  _DWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;

  v4 = *(int *)(*(_QWORD *)(a1 + 288) + 4 * a2);
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 312) + 4 * a2);
  v73 = *(_QWORD *)(a1 + 336);
  v6 = (uint64_t *)(a1 + 480);
  sub_20C6FDDA4((_QWORD *)(a1 + 480), v5);
  if (v5 < 1)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = v5 + (int)v4;
    v9 = v73;
    v71 = v8;
    v72 = (_QWORD *)(a1 + 360);
    do
    {
      v10 = *(_DWORD *)(v9 + 4 * v4);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v10) == -1)
      {
        v11 = v10;
        v12 = *(_QWORD *)(a1 + 480);
        *(_DWORD *)(v12 + 12 * v7) = v10;
        v13 = *(_QWORD *)(a1 + 232);
        v14 = *(_DWORD *)(v13 + 4 * v10);
        v15 = *(_DWORD *)(v13 + 4 * (v10 + 1));
        v16 = v15 - v14;
        if (v15 <= v14)
        {
          v20 = 0;
        }
        else
        {
          v17 = (int *)(*(_QWORD *)(a1 + 208) + 4 * v14);
          v18 = v14;
          while (1)
          {
            v19 = *v17++;
            if (v19 == a2)
              break;
            if (v15 == ++v18)
            {
              v18 = v15;
              break;
            }
          }
          v20 = v18 - v14;
          if (v18 != v14)
          {
            v74 = v11;
            sub_20BE81ACC((uint64_t)v72, v16);
            v21 = (_DWORD *)*v72;
            if (v16 >= 1)
            {
              v22 = *(_QWORD *)(a1 + 208);
              v23 = (v15 - v14);
              v24 = (_DWORD *)*v72;
              v25 = v20;
              do
              {
                *v24++ = *(_DWORD *)(v22 + 4 * (v25 % v16 + v14));
                ++v25;
                --v23;
              }
              while (v23);
            }
            v26 = *(_BYTE **)(a1 + 368);
            if (v26 != (_BYTE *)v21)
              memmove((void *)(*(_QWORD *)(a1 + 208) + 4 * v14), v21, v26 - (_BYTE *)v21);
            v9 = v73;
            v11 = v74;
            v8 = v71;
          }
        }
        v27 = *(_QWORD *)(a1 + 208);
        v28 = v12 + 12 * v7;
        *(_DWORD *)(v28 + 8) = *(_DWORD *)(v27 + 4 * (v15 - 1));
        *(_DWORD *)(v28 + 4) = *(_DWORD *)(v27 + 4 * (v14 + 1));
        *(_DWORD *)(*(_QWORD *)(a1 + 256) + 4 * v11) = v20;
        ++v7;
      }
      ++v4;
    }
    while (v4 < v8);
  }
  sub_20C6FDDA4(v6, v7);
  v29 = (_QWORD *)(a1 + 432);
  v30 = (void **)(a1 + 456);
  sub_20BE81ACC(a1 + 432, v7);
  sub_20BE81ACC(a1 + 456, 1uLL);
  **(_DWORD **)(a1 + 456) = 0;
  if (v7 >= 1)
  {
    v31 = 0;
    do
    {
      v32 = (int *)(*(_QWORD *)(a1 + 480) + 12 * (v7 - 1));
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * *v32) = -2;
      v33 = v32[1];
      v34 = v32[2];
      v35 = *v32;
      v36 = v31 + 1;
      *(_DWORD *)(*(_QWORD *)(a1 + 432) + 4 * v31) = v35;
      v37 = v7 - 2;
      if (v7 < 2)
      {
        v7 = 0;
      }
      else
      {
        --v7;
        do
        {
          v38 = *v6;
          if (*(_DWORD *)(*v6 + 12 * v37 + 4) == v34)
          {
            v39 = (int *)(v38 + 12 * v37);
            v40 = *v39;
            *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v40) = -2;
            *(_DWORD *)(*(_QWORD *)(a1 + 432) + 4 * v36++) = v40;
            v34 = v39[2];
            v37 = v7 - 1;
            v41 = v38 + 12 * (v7 - 1);
            v42 = *(_QWORD *)v39;
            v43 = *(_DWORD *)(v41 + 8);
            *(_QWORD *)v39 = *(_QWORD *)v41;
            v39[2] = v43;
            *(_QWORD *)v41 = v42;
            *(_DWORD *)(v41 + 8) = v34;
            --v7;
          }
        }
        while ((int)v37-- > 0);
        if (v7 > 0)
        {
          if (v31 != v36)
          {
            v45 = (_DWORD *)(*v29 + 4 * v36 - 4);
            if ((unint64_t)v45 > *v29 + 4 * v31)
            {
              v46 = *v29 + 4 * v31 + 4;
              do
              {
                v47 = *(_DWORD *)(v46 - 4);
                *(_DWORD *)(v46 - 4) = *v45;
                *v45-- = v47;
                v48 = v46 >= (unint64_t)v45;
                v46 += 4;
              }
              while (!v48);
            }
          }
          v49 = v7;
          do
          {
            --v49;
            v50 = *v6;
            if (*(_DWORD *)(*v6 + 12 * v49 + 8) == v33)
            {
              v51 = (int *)(v50 + 12 * v49);
              v52 = *v51;
              *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v52) = -2;
              *(_DWORD *)(*(_QWORD *)(a1 + 432) + 4 * v36++) = v52;
              v49 = v7 - 1;
              v53 = v50 + 12 * (v7 - 1);
              v33 = v51[1];
              v54 = v51[2];
              v55 = *(_QWORD *)v51;
              v56 = *(_DWORD *)(v53 + 8);
              *(_QWORD *)v51 = *(_QWORD *)v53;
              v51[2] = v56;
              *(_QWORD *)v53 = v55;
              *(_DWORD *)(v53 + 8) = v54;
              --v7;
            }
          }
          while (v49 > 0);
          if (v31 != v36)
          {
            v57 = (_DWORD *)(*v29 + 4 * v36 - 4);
            if ((unint64_t)v57 > *v29 + 4 * v31)
            {
              v58 = *v29 + 4 * v31 + 4;
              do
              {
                v59 = *(_DWORD *)(v58 - 4);
                *(_DWORD *)(v58 - 4) = *v57;
                *v57-- = v59;
                v48 = v58 >= (unint64_t)v57;
                v58 += 4;
              }
              while (!v48);
            }
          }
        }
      }
      v31 = v36;
      v61 = *(char **)(a1 + 464);
      v60 = *(_QWORD *)(a1 + 472);
      if ((unint64_t)v61 >= v60)
      {
        v63 = (char *)*v30;
        v64 = (v61 - (_BYTE *)*v30) >> 2;
        v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 62)
          sub_20BDDF694();
        v66 = v60 - (_QWORD)v63;
        if (v66 >> 1 > v65)
          v65 = v66 >> 1;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
          v67 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v67 = v65;
        if (v67)
        {
          v68 = (char *)sub_20BDE1330(a1 + 472, v67);
          v63 = *(char **)(a1 + 456);
          v61 = *(char **)(a1 + 464);
        }
        else
        {
          v68 = 0;
        }
        v69 = &v68[4 * v64];
        *(_DWORD *)v69 = v31;
        v62 = v69 + 4;
        while (v61 != v63)
        {
          v70 = *((_DWORD *)v61 - 1);
          v61 -= 4;
          *((_DWORD *)v69 - 1) = v70;
          v69 -= 4;
        }
        *(_QWORD *)(a1 + 456) = v69;
        *(_QWORD *)(a1 + 464) = v62;
        *(_QWORD *)(a1 + 472) = &v68[4 * v67];
        if (v63)
          operator delete(v63);
      }
      else
      {
        *(_DWORD *)v61 = v31;
        v62 = v61 + 4;
      }
      *(_QWORD *)(a1 + 464) = v62;
    }
    while (v7 > 0);
  }
}

void sub_20C6FDDA4(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_20C707C34((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 12 * a2;
  }
}

_QWORD *sub_20C6FDDE0(_QWORD *result, int a2, unsigned int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t i;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  _DWORD *v16;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  _DWORD *v22;

  v4 = (a4 - 2);
  if (a3 > 2)
  {
    if (a3 == 3 || a3 == 5)
    {
      if (a4 >= 2)
      {
        v12 = (int *)(result[66] + 16 * a2);
        v13 = v12[3];
        v14 = *v12;
        do
        {
          v15 = v14;
          v14 = *(_DWORD *)(result[48] + 4 * v4);
          if (*(_BYTE *)(result[51] + v4))
          {
            v16 = (_DWORD *)(result[17] + 12 * v14);
            *v16 = a2;
            v16[1] = v15;
            v16[2] = v13;
          }
          v13 = v15;
        }
        while (v4-- > 0);
      }
    }
    else if (a4 >= 1)
    {
      v18 = 0;
      v19 = -1;
      v20 = -1;
      do
      {
        v21 = v19;
        v19 = *(_DWORD *)(result[48] + 4 * v18);
        if (*(_BYTE *)(result[51] + v18))
        {
          v22 = (_DWORD *)(result[17] + 12 * v19);
          *v22 = a2;
          v22[1] = v21;
          v22[2] = v20;
        }
        ++v18;
        v20 = v21;
      }
      while (a4 != v18);
    }
  }
  else
  {
    v5 = result[66];
    if (a4 >= 2)
    {
      v6 = *(_DWORD *)(v5 + 16 * a2 + 4);
      v7 = *(_DWORD *)(v5 + 16 * a2 + 8);
      for (i = 1; i != a4; ++i)
      {
        v9 = *(_DWORD *)(result[48] + 4 * i);
        if (*(_BYTE *)(result[51] + i))
        {
          v10 = (_DWORD *)(result[17] + 12 * v9);
          *v10 = a2;
          v10[1] = v6;
          v10[2] = v7;
        }
        v7 = v6;
        v6 = v9;
      }
    }
    if (!a3)
    {
      if (*(_BYTE *)(result[51] + (int)v4))
      {
        v11 = (_DWORD *)(result[20] + 12 * *(int *)(result[48] + 4 * (int)v4));
        *v11 = a2;
        v11[1] = *(_DWORD *)(v5 + 16 * a2);
        v11[2] = *(_DWORD *)(v5 + 16 * a2 + 12);
      }
    }
  }
  return result;
}

uint64_t sub_20C6FDF60(int a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned __int16 *v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  char v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;

  if (!a3)
  {
    v4 = *(unsigned __int16 *)(*a4 + 2 * a2);
    if (a1)
    {
      v5 = a2;
      v25 = *(unsigned __int16 *)(a4[3] + 2 * a2);
      if (a1 >= 0)
        v25 = 0x10000 - v25;
      v26 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v25 + 2048) >> 10) & 0xFCLL));
      if (a1 >= 0)
        v8 = a1;
      else
        v8 = -a1;
      v9 = v26 + *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - v4) >> 10) & 0x7CLL));
      v10 = (unsigned __int16 *)(a4[6] + 2 * (a2 << 6));
      if (v8 <= 0x3F)
      {
        v27 = v8 - 1;
        v28 = *v10;
        if ((((_BYTE)v8 - 1) & 1) != 0)
          v28 = 0x10000 - v28;
        v13 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v28 + 2048) >> 10) & 0xFCLL));
        v29 = v10[(v27 & 1) + 1];
        if ((v27 & 2) != 0)
          v29 = 0x10000 - v29;
        v15 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v29 + 2048) >> 10) & 0xFCLL));
        v30 = v10[(v27 & 3) + 3];
        if ((v27 & 4) != 0)
          v30 = 0x10000 - v30;
        v17 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v30 + 2048) >> 10) & 0xFCLL));
        v31 = v10[(v27 & 7) + 7];
        if ((v27 & 8) != 0)
          v31 = 0x10000 - v31;
        v19 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v31 + 2048) >> 10) & 0xFCLL));
        v32 = v10[(v27 & 0xF) + 15];
        if ((v27 & 0x10) != 0)
          v32 = 0x10000 - v32;
        v21 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v32 + 2048) >> 10) & 0xFCLL));
        v22 = v10[(v27 & 0x1F) + 31];
        v23 = 0x10000 - v22;
        v24 = (v27 & 0x20) == 0;
        goto LABEL_40;
      }
LABEL_48:
      v37 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)*v10) >> 10) & 0x3FFFFFFFFFFFFCLL));
      v38 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v10[2]) >> 10) & 0x3FFFFFFFFFFFFCLL));
      v39 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v10[6]) >> 10) & 0x3FFFFFFFFFFFFCLL));
      v40 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v10[14]) >> 10) & 0x3FFFFFFFFFFFFCLL));
      v41 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v10[30]) >> 10) & 0x3FFFFFFFFFFFFCLL));
      v42 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v10[62]) >> 10) & 0x3FFFFFFFFFFFFCLL));
      v43 = *(_DWORD *)(a4[12] + 4 * v5);
      return v9 + v37 + v38 + v39 + v40 + v41 + v42 + (v43 << 10) + 66560 - (__clz(((v8 - 64) >> v43) + 1) << 11);
    }
    return *(unsigned int *)((char *)&unk_20CAF8E3C + (((v4 + 2048) >> 10) & 0x7CLL));
  }
  if (a3 != 2)
  {
    if (a3 != 4)
      return 0;
    v4 = *(unsigned __int16 *)(*a4 + 2 * a2);
    if (a1)
    {
      v5 = a2;
      v6 = *(unsigned __int16 *)(a4[3] + 2 * a2);
      if (a1 >= 0)
        v6 = 0x10000 - v6;
      v7 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v6 + 2048) >> 10) & 0xFCLL));
      if (a1 >= 0)
        v8 = a1;
      else
        v8 = -a1;
      v9 = v7 + *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - v4) >> 10) & 0x7CLL));
      v10 = (unsigned __int16 *)(a4[6] + 2 * (a2 << 6));
      if (v8 <= 0x3F)
      {
        v11 = v8 - 1;
        v12 = *v10;
        if (((v8 - 1) & 0x20) != 0)
          v12 = 0x10000 - v12;
        v13 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v12 + 2048) >> 10) & 0xFCLL));
        v14 = v10[(v11 >> 5) + 1];
        if ((v11 & 0x10) != 0)
          v14 = 0x10000 - v14;
        v15 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v14 + 2048) >> 10) & 0xFCLL));
        v16 = v10[(v11 >> 4) + 3];
        if ((v11 & 8) != 0)
          v16 = 0x10000 - v16;
        v17 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v16 + 2048) >> 10) & 0xFCLL));
        v18 = v10[(v11 >> 3) + 7];
        if ((v11 & 4) != 0)
          v18 = 0x10000 - v18;
        v19 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v18 + 2048) >> 10) & 0xFCLL));
        v20 = v10[(v11 >> 2) + 15];
        if ((v11 & 2) != 0)
          v20 = 0x10000 - v20;
        v21 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v20 + 2048) >> 10) & 0xFCLL));
        v22 = v10[(v11 >> 1) + 31];
        v23 = 0x10000 - v22;
        v24 = (v11 & 1) == 0;
LABEL_40:
        if (!v24)
          v22 = v23;
        return (v13
                            + v9
                            + v15
                            + v17
                            + v19
                            + v21
                            + *(_DWORD *)((char *)&unk_20CAF8E3C + (((v22 + 2048) >> 10) & 0xFCLL)));
      }
      goto LABEL_48;
    }
    return *(unsigned int *)((char *)&unk_20CAF8E3C + (((v4 + 2048) >> 10) & 0x7CLL));
  }
  if (a1 < 1)
  {
    if ((a1 & 0x80000000) == 0)
    {
      v36 = 0;
      v34 = a2;
      goto LABEL_51;
    }
    v34 = a2;
    v35 = *(unsigned __int16 *)(a4[3] + 2 * a2) + 2048;
  }
  else
  {
    v34 = a2;
    v35 = 67584 - *(unsigned __int16 *)(a4[3] + 2 * a2);
  }
  v36 = *(_DWORD *)((char *)&unk_20CAF8E3C + ((v35 >> 10) & 0x7CLL));
LABEL_51:
  v44 = *(_DWORD *)(a4[12] + 4 * v34);
  if (a1 >= 0)
    v45 = a1;
  else
    v45 = -a1;
  return v36 + (v44 << 10) + 66560 - (__clz((v45 >> v44) + 1) << 11);
}

uint64_t sub_20C6FE3B0(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v4;
  _DWORD *v5;
  int *v7;
  int *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _BOOL4 v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t result;
  int v58;
  int v59;
  unsigned int v60;
  _BOOL4 v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;

  v4 = *(_QWORD *)(a1 + 184);
  v5 = (_DWORD *)(v4 + 12 * a2);
  v7 = (int *)(v4 + 12 * a3);
  v9 = (int *)(v4 + 12 * a4);
  v10 = *v9;
  v11 = v9[1];
  v13 = *v7;
  v12 = v7[1];
  v14 = *v9 - *v7;
  v15 = v11 - v12;
  v16 = v9[2];
  LODWORD(v9) = v7[2];
  v17 = v16 - (_DWORD)v9;
  v18 = v5[1];
  v19 = *v5 - v13;
  v20 = v18 - v12;
  v21 = v5[2];
  v22 = v21 - (_DWORD)v9;
  v23 = *v5 - v10;
  v24 = v18 - v11;
  v25 = v21 - v16;
  if (v14 >= 0)
    v26 = v14;
  else
    v26 = -v14;
  if (v15 >= 0)
    v27 = v15;
  else
    v27 = -v15;
  if (v17 >= 0)
    v28 = v17;
  else
    v28 = -v17;
  v31 = v26 < 0x1000 && v27 < 0x1000 && v28 < 0x1000;
  if (v19 >= 0)
    v32 = v19;
  else
    v32 = -v19;
  if (v20 >= 0)
    v33 = v20;
  else
    v33 = -v20;
  if (v22 >= 0)
    v34 = v22;
  else
    v34 = -v22;
  if (v31 && v32 <= 0xFFF && v33 <= 0xFFF && v34 <= 0xFFF)
  {
    v35 = v19 * v14 + v20 * v15 + v22 * v17;
    if (v35)
    {
      v36 = v22 * v15 - v20 * v17;
      if (v36 < 0)
        v36 = v20 * v17 - v22 * v15;
      v37 = v19 * v17 - v22 * v14;
      if (v37 < 0)
        v37 = -v37;
      v38 = v20 * v14 - v19 * v15;
      if (v38 < 0)
        v38 = -v38;
      v39 = v36 + v37;
      if (v37 < v38)
      {
        v40 = v38;
      }
      else
      {
        v39 = v36 + v38;
        v40 = v37;
      }
      v41 = v36 >= v37 && v36 >= v38;
      if (v41)
        v42 = v37 + v38;
      else
        v42 = v39;
      if (v41)
        v43 = v36;
      else
        v43 = v40;
      v44 = v43 + (v42 >> 2);
      if (v35 < 0)
        LODWORD(v45) = -16 * v35 / (int)(v44 - v35) + 16;
      else
        LODWORD(v45) = (int)(16 * v44) / (int)(v44 + v35);
      goto LABEL_77;
    }
LABEL_74:
    LODWORD(v45) = 16;
    goto LABEL_77;
  }
  v46 = v20 * (uint64_t)v15 + v19 * (uint64_t)v14 + v22 * (uint64_t)v17;
  if (!v46)
    goto LABEL_74;
  v47 = v22 * (uint64_t)v15 - v20 * (uint64_t)v17;
  if (v47 < 0)
    v47 = v20 * (uint64_t)v17 - v22 * (uint64_t)v15;
  v48 = v19 * (uint64_t)v17 - v22 * (uint64_t)v14;
  if (v48 < 0)
    v48 = -v48;
  v49 = v20 * (uint64_t)v14 - v19 * (uint64_t)v15;
  if (v49 < 0)
    v49 = -v49;
  v50 = v47 + v48;
  if (v48 < (unint64_t)v49)
  {
    v51 = v49;
  }
  else
  {
    v50 = v47 + v49;
    v51 = v48;
  }
  v52 = v47 >= (unint64_t)v48 && v47 >= (unint64_t)v49;
  if (v52)
    v53 = v48 + v49;
  else
    v53 = v50;
  if (v52)
    v54 = v47;
  else
    v54 = v51;
  v55 = v54 + (v53 >> 2);
  if (v46 < 0)
    LODWORD(v45) = -16 * v46 / (uint64_t)(v55 - v46) + 16;
  else
    v45 = (uint64_t)(16 * v55) / (uint64_t)(v55 + v46);
LABEL_77:
  v56 = *(_QWORD *)(a1 + 552);
  *(_DWORD *)(v56 + 12 * a3) += v45;
  result = -v14;
  v58 = -v15;
  v59 = -v17;
  if (v23 >= 0)
    v60 = v23;
  else
    v60 = -v23;
  v61 = v60 < 0x1000 && v31;
  if (v24 >= 0)
    v62 = v24;
  else
    v62 = -v24;
  if (v25 >= 0)
    v63 = v25;
  else
    v63 = -v25;
  if (v61 && v62 <= 0xFFF && v63 <= 0xFFF)
  {
    v64 = v23 * result + v24 * v58 + v25 * v59;
    if (v64)
    {
      v65 = v24 * v17 + v25 * v58;
      if (v65 < 0)
        v65 = -v65;
      v66 = v23 * v59 + v25 * v14;
      if (v66 < 0)
        v66 = -v66;
      v67 = v23 * v15 + v24 * result;
      if (v67 < 0)
        v67 = -v67;
      if (v65 < v66 || v65 < v67)
      {
        v68 = v65 + v66;
        if (v66 < v67)
        {
          v65 = v67;
        }
        else
        {
          v68 = v65 + v67;
          v65 = v66;
        }
      }
      else
      {
        v68 = v66 + v67;
      }
      v79 = v65 + (v68 >> 2);
      if (v64 < 0)
        LODWORD(v78) = -16 * v64 / (v79 - v64) + 16;
      else
        LODWORD(v78) = 16 * v79 / (v79 + v64);
      goto LABEL_131;
    }
LABEL_123:
    LODWORD(v78) = 16;
    goto LABEL_131;
  }
  v69 = v24 * (uint64_t)v58 + v23 * (uint64_t)(int)result + v25 * (uint64_t)v59;
  if (!v69)
    goto LABEL_123;
  v70 = v25 * (uint64_t)v58 - v24 * (uint64_t)v59;
  if (v70 < 0)
    v70 = v24 * (uint64_t)v59 - v25 * (uint64_t)v58;
  v71 = v23 * (uint64_t)v59 - v25 * (uint64_t)(int)result;
  if (v71 < 0)
    v71 = -v71;
  v72 = v24 * (uint64_t)(int)result - v23 * (uint64_t)v58;
  if (v72 < 0)
    v72 = -v72;
  v73 = v70 + v71;
  if (v71 < (unint64_t)v72)
  {
    v74 = v72;
  }
  else
  {
    v73 = v70 + v72;
    v74 = v71;
  }
  v75 = v70 >= (unint64_t)v71 && v70 >= (unint64_t)v72;
  if (v75)
    v76 = v71 + v72;
  else
    v76 = v73;
  if (v75)
    v77 = v70;
  else
    v77 = v74;
  v78 = v77 + (v76 >> 2);
  if (v69 < 0)
    LODWORD(v78) = -16 * v69 / (v78 - v69) + 16;
  else
    v78 = 16 * v78 / (v78 + v69);
LABEL_131:
  *(_DWORD *)(v56 + 12 * a4) += v78;
  return result;
}

uint64_t sub_20C6FE774(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  int32x2_t *v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int32x2_t *v13;
  int32x2_t *v14;
  int32x2_t *v15;
  int32x2_t v16;
  int v17;
  int32x2_t *v18;
  int32x2_t *v19;
  int32x2_t *v20;
  int32x2_t *v21;
  int32x2_t *v22;
  uint32x2_t v23;
  BOOL v24;
  int v25;
  int32x2_t *v26;
  int32x2_t *v27;
  int32x2_t *v28;
  uint32x2_t v29;
  int v30;
  int32x2_t *v31;
  int *v32;
  int v33;
  int32x2_t *v34;
  int32x2_t *v35;
  __int32 v36;
  const float *v37;
  int32x2_t *v38;
  int32x2_t *v39;
  int32x2_t *v40;
  __int32 v41;
  int v42;
  int32x2_t v43;
  int32x2_t v44;
  int32x2_t v45;
  int v46;
  int32x2_t *v47;
  int32x2_t v48;
  int32x2_t v49;
  int v50;
  int32x2_t v51;
  int32x2_t v52;
  uint32x2_t v53;
  int32x2_t v54;
  int32x2_t v55;
  int64x2_t v56;
  int32x2_t v57;
  unint64_t v58;
  int v59;
  _WORD *v60;
  __int32 v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  int32x2_t v67;
  int32x2_t v68;
  int v69;
  int32x2_t v70;
  unsigned int v71;
  int32x2_t v72;
  int32x2_t v73;
  const float *v74;
  int32x2_t v75;
  const float *v76;
  int32x2_t v77;
  int32x2_t v78;
  int32x2_t v79;
  int v80;
  int v81;
  uint64_t v82;
  int32x2_t v83;
  __int32 v84;
  char *v85;
  _QWORD *v86;
  uint64_t v87;
  int32x2_t v89;
  int32x2_t v90;
  __int32 *v91;
  unsigned int v92;
  __int32 *v93;
  int32x2_t v94;
  char v95;
  int32x2_t v96;
  int v97;

  v5 = *(_QWORD *)(a1 + 184);
  v6 = (int32x2_t *)(v5 + 12 * a2);
  v7 = (int *)(*(_QWORD *)(a1 + 136) + 12 * a2);
  v8 = *v7;
  v9 = v7[1];
  v10 = v7[2];
  v11 = *(_DWORD *)(a3 + 12);
  if (v11 == 1)
  {
    if (v10 != -1)
    {
      v12 = 0;
      v18 = (int32x2_t *)(v5 + 12 * v8);
      v19 = (int32x2_t *)(v5 + 12 * v9);
      v20 = (int32x2_t *)(v5 + 12 * v10);
      v16 = vsub_s32(vadd_s32(*v19, *v18), *v20);
      v17 = v19[1].i32[0] + v18[1].i32[0] - v20[1].i32[0];
      goto LABEL_38;
    }
  }
  else if (v11 == 2)
  {
    if (v10 == -1)
    {
      if (v9 == -1)
      {
        if (v8 == -1)
        {
          v17 = 0;
          v12 = -*(char *)(a3 + 21);
          v16 = 0;
        }
        else
        {
          v12 = 0;
          v31 = (int32x2_t *)(v5 + 12 * v8);
          v16 = *v31;
          v17 = v31[1].i32[0];
        }
      }
      else
      {
        v12 = 0;
        v27 = (int32x2_t *)(v5 + 12 * v8);
        v28 = (int32x2_t *)(v5 + 12 * v9);
        v29 = (uint32x2_t)vadd_s32(*v28, *v27);
        LODWORD(v27) = v27[1].i32[0];
        LODWORD(v28) = v28[1].i32[0];
        v24 = __OFADD__((_DWORD)v28, (_DWORD)v27);
        v30 = (_DWORD)v28 + (_DWORD)v27;
        v16 = vshr_n_s32((int32x2_t)vsra_n_u32(v29, v29, 0x1FuLL), 1uLL);
        if (v30 < 0 != v24)
          ++v30;
        v17 = v30 >> 1;
      }
    }
    else
    {
      v12 = 0;
      v13 = (int32x2_t *)(v5 + 12 * v8);
      v14 = (int32x2_t *)(v5 + 12 * v9);
      v15 = (int32x2_t *)(v5 + 12 * v10);
      v16 = vsub_s32(vadd_s32(*v14, *v13), *v15);
      v17 = v14[1].i32[0] + v13[1].i32[0] - v15[1].i32[0];
    }
    v32 = (int *)(*(_QWORD *)(a1 + 160) + 12 * a2);
    v33 = v32[2];
    if (v33 != -1)
    {
      v34 = (int32x2_t *)(v5 + 12 * *v32);
      v35 = (int32x2_t *)(v5 + 12 * v32[1]);
      v36 = v34[1].i32[0];
      v37 = (const float *)&v35[1];
      v38 = (int32x2_t *)(v5 + 12 * v33);
      v39 = (int32x2_t *)(v5 + 12 * v9);
      v40 = (int32x2_t *)(v5 + 12 * v8);
      v41 = v40[1].i32[0];
      v24 = __OFADD__(v41, v36);
      v42 = v41 + v36;
      v43.i32[0] = v36;
      v43.i32[1] = v39[1].i32[0];
      v44 = (int32x2_t)vld1_dup_f32(v37);
      v45 = vadd_s32(v43, v44);
      if (v42 < 0 != v24)
        v46 = v42 + 1;
      else
        v46 = v42;
      v47 = (int32x2_t *)(v5 + 12 * v10);
      v48.i32[0] = v38[1].i32[0];
      v48.i32[1] = v46 >> 1;
      v49 = vsub_s32(v45, v48);
      v50 = 2 * v45.i32[1];
      v51 = vsub_s32(vadd_s32(*v35, *v34), *v38);
      v52 = vadd_s32(*v39, *v35);
      v53 = (uint32x2_t)vadd_s32(*v40, *v34);
      v54 = (int32x2_t)vsra_n_u32(v53, v53, 0x1FuLL);
      v55 = vsub_s32(v52, vshr_n_s32(v54, 1uLL));
      v56 = vmull_s32(vsub_s32(vsra_n_s32(vadd_s32(v52, v52), v54, 1uLL), vadd_s32(*v38, *v47)), vdup_n_s32(0x55555556u));
      v57 = vadd_s32(vshrn_n_s64(v56, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v56, 0x3FuLL)));
      v58 = 1431655766 * (v50 + (v46 >> 1) - (v38[1].i32[0] + v47[1].i32[0]));
      v59 = HIDWORD(v58) + (v58 >> 63);
      v60 = (_WORD *)(a1 + 2752);
      v89 = v16;
      v94 = v49;
      if (*(_BYTE *)(a3 + 20))
      {
        v61 = v6[1].i32[0] - v17;
        v96 = vsub_s32(*v6, v16);
        v97 = v61;
        v93 = (__int32 *)((char *)&unk_20CAF8E3C
                        + (((*(unsigned __int16 *)(a1 + 2752) + 2048) >> 10) & 0x7CLL));
        v91 = (__int32 *)((char *)&unk_20CAF8E3C
                        + (((*(unsigned __int16 *)(a1 + 2754) + 2048) >> 10) & 0x7CLL));
        v92 = sub_20C70767C((int *)&v96, 3, *(unsigned __int8 *)(a3 + 8), (unsigned __int16 **)(a1 + 2880));
        v62 = v6[1].i32[0] - v94.i32[0];
        v96 = vsub_s32(*v6, v51);
        v97 = v62;
        v63 = ((67584 - *(unsigned __int16 *)(a1 + 2752)) >> 10) & 0x7CLL;
        v64 = ((*(unsigned __int16 *)(a1 + 2756) + 2048) >> 10) & 0x7CLL;
        v65 = sub_20C70767C((int *)&v96, 3, *(unsigned __int8 *)(a3 + 8), (unsigned __int16 **)(a1 + 2880));
        v66 = v6[1].i32[0] - v94.i32[1];
        v96 = vsub_s32(*v6, v55);
        v97 = v66;
        v67.i32[0] = *(_DWORD *)((char *)&unk_20CAF8E3C + v64);
        v67.i32[1] = *(_DWORD *)((char *)&unk_20CAF8E3C
                               + (((67584 - *(unsigned __int16 *)(a1 + 2754)) >> 10) & 0x7CLL));
        v68.i32[0] = *(_DWORD *)((char *)&unk_20CAF8E3C + v63);
        v68.i32[1] = *(_DWORD *)((char *)&unk_20CAF8E3C
                               + (((*(unsigned __int16 *)(a1 + 2752) + 2048) >> 10) & 0x7CLL));
        v90 = vadd_s32(vadd_s32(v67, v68), (int32x2_t)__PAIR64__(sub_20C70767C((int *)&v96, 3, *(unsigned __int8 *)(a3 + 8), (unsigned __int16 **)(a1 + 2880)), v65));
        v69 = v6[1].i32[0] - v59;
        v96 = vsub_s32(*v6, v57);
        v97 = v69;
        v67.i32[0] = *(_DWORD *)((char *)&unk_20CAF8E3C
                               + (((67584 - *(unsigned __int16 *)(a1 + 2756)) >> 10) & 0x7CLL));
        v67.i32[1] = *v91;
        v68.i32[0] = *(_DWORD *)((char *)&unk_20CAF8E3C
                               + (((67584 - *(unsigned __int16 *)(a1 + 2752)) >> 10) & 0x7CLL));
        v68.i32[1] = *v93;
        v70 = vadd_s32(v67, v68);
        v71 = sub_20C70767C((int *)&v96, 3, *(unsigned __int8 *)(a3 + 8), (unsigned __int16 **)(a1 + 2880));
        v72 = v90;
        v60 = (_WORD *)(a1 + 2752);
        v73 = vadd_s32(v70, (int32x2_t)__PAIR64__(v92, v71));
      }
      else
      {
        v74 = (const float *)v6;
        v75 = (int32x2_t)vld1_dup_f32(v74++);
        v76 = (const float *)&v6[1];
        v77 = (int32x2_t)vld1_dup_f32(v74);
        v78 = (int32x2_t)vld1_dup_f32(v76);
        v72 = vneg_s32(vadd_s32(vadd_s32(vclz_s32(vaba_s32((int32x2_t)0x100000001, v75, vzip1_s32(v51, v55))), vclz_s32(vaba_s32((int32x2_t)0x100000001, v77, vzip2_s32(v51, v55)))), vclz_s32(vaba_s32((int32x2_t)0x100000001, v78, v49))));
        v73 = vneg_s32(vadd_s32(vadd_s32(vclz_s32(vaba_s32((int32x2_t)0x100000001, v75, vzip1_s32(v57, v16))), vclz_s32(vaba_s32((int32x2_t)0x100000001, v77, vzip2_s32(v57, v16)))), vclz_s32(vaba_s32((int32x2_t)0x100000001, v78, (int32x2_t)__PAIR64__(v17, v59)))));
      }
      if (v72.i32[0] < v73.i32[1]
        && (v79 = vcgt_s32((int32x2_t)__PAIR64__(v72.u32[1], v73.u32[0]), vdup_lane_s32(v72, 0)), (v79.i8[4] & 1) != 0)
        && (v79.i8[0] & 1) != 0)
      {
        v80 = 0;
        v17 = v94.i32[0];
        v81 = 1;
        v82 = 2;
      }
      else
      {
        v83 = vcgt_s32(v73, vdup_lane_s32(v72, 1));
        if ((v83.i8[4] & v83.i8[0] & 1) != 0)
        {
          v81 = 0;
          v17 = v94.i32[1];
          v80 = 1;
          v82 = 1;
          v51 = v55;
        }
        else if (v73.i32[0] >= v73.i32[1])
        {
          v80 = 0;
          v81 = 0;
          v82 = 1;
          v51 = v89;
        }
        else
        {
          v80 = 1;
          v82 = 2;
          v17 = v59;
          v81 = 1;
          v51 = v57;
        }
      }
      sub_20C6E8A80(a1 + 3560, v81, v60);
      sub_20C6E8A80(a1 + 3560, v80, (_WORD *)(a1 + 2 * v82 + 2752));
      v12 = 1;
      v16 = v51;
    }
    goto LABEL_38;
  }
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      v17 = 0;
      v12 = -*(char *)(a3 + 21);
      v16 = 0;
    }
    else
    {
      v12 = 0;
      v26 = (int32x2_t *)(v5 + 12 * v8);
      v16 = *v26;
      v17 = v26[1].i32[0];
    }
  }
  else
  {
    v12 = 0;
    v21 = (int32x2_t *)(v5 + 12 * v8);
    v22 = (int32x2_t *)(v5 + 12 * v9);
    v23 = (uint32x2_t)vadd_s32(*v22, *v21);
    LODWORD(v21) = v21[1].i32[0];
    LODWORD(v22) = v22[1].i32[0];
    v24 = __OFADD__((_DWORD)v22, (_DWORD)v21);
    v25 = (_DWORD)v22 + (_DWORD)v21;
    v16 = vshr_n_s32((int32x2_t)vsra_n_u32(v23, v23, 0x1FuLL), 1uLL);
    if (v25 < 0 != v24)
      ++v25;
    v17 = v25 >> 1;
  }
LABEL_38:
  v84 = v6[1].i32[0] - v17;
  v96 = vsub_s32(*v6, v16);
  v97 = v84;
  if ((v12 & 0x80000000) != 0)
  {
    v95 = 3;
    v85 = &v95;
    v87 = a1;
    v86 = 0;
  }
  else
  {
    v85 = (char *)(a3 + 8);
    v86 = (_QWORD *)(a1 + 120 * v12 + 2760);
    v87 = a1;
  }
  return sub_20C6FEE34(v87, (uint64_t)&v96, v85, v86);
}

uint64_t sub_20C6FEE34(uint64_t result, uint64_t a2, _BYTE *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _WORD *v11;
  uint64_t v12;
  _WORD *v13;
  unsigned int v14;
  uint64_t v15;
  _WORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t i;
  signed int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _WORD *v36;
  uint64_t v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  _WORD *v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  int v46;
  __int16 v47;

  v6 = result + 3560;
  switch(*a3)
  {
    case 0:
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *(_DWORD *)(a2 + v7);
        v11 = (_WORD *)(*a4 + v8);
        v12 = v6;
        if (v10)
        {
          sub_20C6E8A80(v6, 1, v11);
          v13 = (_WORD *)(a4[3] + v8);
          if ((v10 & 0x80000000) != 0)
          {
            sub_20C6E8A80(v6, 0, v13);
            v10 = -v10;
          }
          else
          {
            sub_20C6E8A80(v6, 1, v13);
          }
          v15 = a4[6];
          v16 = (_WORD *)(v15 + v9);
          if (v10 > 0x3F)
          {
            sub_20C6E8A80(v6, 1, (_WORD *)(v15 + v9));
            sub_20C6E8A80(v6, 1, v16 + 2);
            sub_20C6E8A80(v6, 1, v16 + 6);
            sub_20C6E8A80(v6, 1, v16 + 14);
            sub_20C6E8A80(v6, 1, v16 + 30);
            sub_20C6E8A80(v6, 1, v16 + 62);
            result = sub_20C6E90B8(v6, v10 - 64, *(_DWORD *)(a4[12] + v7), (_WORD *)(a4[9] + v8));
            goto LABEL_12;
          }
          v17 = v10 - 1;
          sub_20C6E8A80(v6, (v10 - 1) & 1, (_WORD *)(v15 + v9));
          sub_20C6E8A80(v6, ((v10 - 1) >> 1) & 1, (_WORD *)(v15 + 2 * (((_BYTE)v10 + 1) & 1) + v9 + 2));
          sub_20C6E8A80(v6, (v17 >> 2) & 1, (_WORD *)(v15 + 2 * (v17 & 3) + v9 + 6));
          sub_20C6E8A80(v6, (v17 >> 3) & 1, (_WORD *)(v15 + 2 * (v17 & 7) + v9 + 14));
          sub_20C6E8A80(v6, (v17 >> 4) & 1, (_WORD *)(v15 + 2 * (v17 & 0xF) + v9 + 30));
          v14 = ((v10 - 1) >> 5) & 1;
          v11 = (_WORD *)(v15 + 2 * ((v10 - 1) & 0x1FLL) + v9 + 62);
          v12 = v6;
        }
        else
        {
          v14 = 0;
        }
        result = sub_20C6E8A80(v12, v14, v11);
LABEL_12:
        v9 += 128;
        v8 += 2;
        v7 += 4;
        if (v9 == 384)
          return result;
      }
    case 2:
      v18 = 0;
      for (i = 0; ; i += 4)
      {
        v20 = *(_DWORD *)(a2 + i);
        v21 = a4[12];
        result = sub_20C6E9058(v6, v20, *(_DWORD *)(v21 + i), (_WORD *)(a4[3] + v18), (_WORD *)(a4[9] + v18));
        v22 = v20 >= 0 ? v20 : -v20;
        v23 = *(_DWORD *)(v21 + i);
        v24 = v22 >> v23;
        if (v23 && v24 == 0)
          break;
        if (v24 >= 2)
        {
          v26 = 1;
LABEL_25:
          *(_DWORD *)(v21 + i) = v23 + v26;
        }
        v18 += 2;
        if (v18 == 6)
          return result;
      }
      v26 = -1;
      goto LABEL_25;
    case 3:
      v27 = 0;
      v28 = result + 12;
      do
      {
        v29 = *(_DWORD *)(v28 + 4 * v27);
        if (v29 >= 1)
        {
          v30 = 0;
          v31 = *(_DWORD *)(a2 + 4 * v27);
          do
          {
            v47 = 0x8000;
            result = sub_20C6E8A80(v6, (v31 >> v30++) & 1, &v47);
          }
          while (v29 != v30);
        }
        ++v27;
      }
      while (v27 != 3);
      return result;
    case 4:
      v32 = 0;
      v33 = 0;
      v34 = 0;
      break;
    default:
      return result;
  }
  do
  {
    v35 = *(_DWORD *)(a2 + v32);
    v36 = (_WORD *)(*a4 + v33);
    v37 = v6;
    if (!v35)
    {
      v39 = 0;
LABEL_42:
      result = sub_20C6E8A80(v37, v39, v36);
      goto LABEL_49;
    }
    sub_20C6E8A80(v6, 1, v36);
    v38 = (_WORD *)(a4[3] + v33);
    if ((v35 & 0x80000000) != 0)
    {
      sub_20C6E8A80(v6, 0, v38);
      v35 = -v35;
    }
    else
    {
      sub_20C6E8A80(v6, 1, v38);
    }
    v40 = v35 - 1;
    v41 = a4[6];
    v42 = (_WORD *)(v41 + v34);
    if (v35 <= 0x3F)
    {
      sub_20C6E8A80(v6, (v40 >> 5) & 1, (_WORD *)(v41 + v34));
      sub_20C6E8A80(v6, (v40 >> 4) & 1, (_WORD *)((char *)v42 + ((v40 >> 4) & 0xFFFFFFE) + 2));
      sub_20C6E8A80(v6, (v40 >> 3) & 1, (_WORD *)((char *)v42 + ((v40 >> 3) & 0x1FFFFFFE) + 6));
      sub_20C6E8A80(v6, (v40 >> 2) & 1, (_WORD *)((char *)v42 + ((v40 >> 2) & 0x3FFFFFFE) + 14));
      sub_20C6E8A80(v6, (v40 >> 1) & 1, (_WORD *)((char *)v42 + ((v40 >> 1) & 0x7FFFFFFE) + 30));
      v39 = ((_BYTE)v35 - 1) & 1;
      v36 = (_WORD *)((char *)v42 + (v40 & 0xFFFFFFFE) + 62);
      v37 = v6;
      goto LABEL_42;
    }
    sub_20C6E8A80(v6, 1, (_WORD *)(v41 + v34));
    sub_20C6E8A80(v6, 1, v42 + 2);
    sub_20C6E8A80(v6, 1, v42 + 6);
    sub_20C6E8A80(v6, 1, v42 + 14);
    sub_20C6E8A80(v6, 1, v42 + 30);
    sub_20C6E8A80(v6, 1, v42 + 62);
    v43 = a4[12];
    result = sub_20C6E90B8(v6, v35 - 64, *(_DWORD *)(v43 + v32), (_WORD *)(a4[9] + v33));
    v44 = *(_DWORD *)(v43 + v32);
    v45 = v40 >> v44;
    if (!v44 || v45)
    {
      if (v45 < 2)
        goto LABEL_49;
      v46 = v44 + 1;
    }
    else
    {
      v46 = v44 - 1;
    }
    *(_DWORD *)(v43 + v32) = v46;
LABEL_49:
    v34 += 128;
    v33 += 2;
    v32 += 4;
  }
  while (v34 != 384);
  return result;
}

uint64_t sub_20C6FF2D8(uint64_t a1, int a2, int a3, int a4, unsigned int *a5, uint64_t a6)
{
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  _BOOL4 v54;
  int v55;
  _BOOL4 v56;
  _BOOL4 v57;
  _BOOL4 v58;
  int v59;
  int v60;
  int v61;
  char v62;
  BOOL v63;
  BOOL v64;
  BOOL v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  BOOL v71;
  int *v72;
  int v73;
  int v74;
  _WORD *v75;
  int v76;
  uint64_t v77;
  int v78;
  _DWORD *v79;
  uint64_t v80;
  int v81;
  _DWORD *v82;
  int v83;
  char v84;
  uint64_t v85;
  char v86;
  int v87;
  uint64_t v89;
  uint64_t i;
  int v91;
  uint64_t v92;
  char v93;
  BOOL v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  char v108;
  int v109;
  int v110;
  int v111;
  uint64_t v113;
  unsigned int v115;
  int v116;
  int v117;

  v9 = (int *)(*(_QWORD *)(a1 + 528) + 16 * a2);
  v10 = (int *)(*(_QWORD *)(a1 + 456) + 4 * a3);
  v12 = *v10;
  v11 = v10[1];
  v13 = *(_DWORD *)(a1 + 36);
  if (v13)
  {
    if (v13 == 1)
    {
      v14 = 2 * (v11 - v12);
    }
    else if ((int)v11 <= (int)v12)
    {
      v14 = 0;
    }
    else
    {
      v14 = 0;
      v15 = (int *)(*(_QWORD *)(a1 + 432) + 4 * v12);
      v16 = v11 - v12;
      do
      {
        v17 = *v15++;
        v14 = v14 - *(_DWORD *)(*(_QWORD *)(a1 + 232) + 4 * v17) + *(_DWORD *)(*(_QWORD *)(a1 + 232) + 4 * v17 + 4) - 2;
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    v14 = v11 - v12;
  }
  v111 = *(_DWORD *)a1;
  v18 = *v9;
  v19 = v9[1];
  v20 = (_QWORD *)(a1 + 408);
  v21 = v14 + 1;
  v113 = a1 + 384;
  sub_20BE81ACC(a1 + 384, v21);
  v22 = *(_QWORD *)(a1 + 408);
  v23 = *(_QWORD *)(a1 + 416) - v22;
  if (v21 <= v23)
  {
    if (v21 < v23)
      *(_QWORD *)(a1 + 416) = v22 + v21;
  }
  else
  {
    sub_20C6BBBDC((unint64_t *)(a1 + 408), v21 - v23);
  }
  if ((int)v12 < (int)v11)
  {
    v24 = 0;
    v25 = *(_QWORD *)(a1 + 432);
    v26 = *(_QWORD *)(a1 + 112);
    v27 = *(_QWORD *)(a1 + 40);
    v28 = v12;
    v29 = *(_QWORD *)(a1 + 232);
    do
    {
      v30 = *(int *)(v25 + 4 * v28);
      *(_DWORD *)(v26 + 4 * *(int *)(a1 + 284)) = v30;
      v31 = *(_DWORD *)(a1 + 284);
      *(_DWORD *)(a1 + 284) = v31 + 1;
      *(_DWORD *)(v27 + 4 * v30) = v31;
      v32 = *(_DWORD *)(v29 + 4 * v30);
      if (v28 == v12)
        v33 = 1;
      else
        v33 = 2;
      v34 = v33 + v32;
      v35 = *(int *)(v29 + 4 * ((int)v30 + 1));
      if (v33 + v32 < (int)v35)
      {
        v36 = *(_QWORD *)(a1 + 208);
        v37 = v34;
        v38 = (_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v24);
        v24 = v24 + v35 - v34;
        do
          *v38++ = *(_DWORD *)(v36 + 4 * v37++);
        while (v37 < v35);
      }
      ++v28;
    }
    while (v28 != v11);
  }
  if (**(_DWORD **)v113 == v19 || *(_DWORD *)(*(_QWORD *)v113 + 4 * v14) != v18)
  {
    if ((v14 & 0x80000000) == 0)
    {
      v45 = 0;
      do
      {
        v46 = *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v45);
        v47 = *(_QWORD *)(a1 + 64);
        v48 = *(_DWORD *)(v47 + 4 * v46);
        if (v48 == -1)
        {
          *(_DWORD *)(v47 + 4 * v46) = *(_DWORD *)(a1 + 280);
          v49 = *(int *)(a1 + 280);
          *(_DWORD *)(a1 + 280) = v49 + 1;
          *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * v49) = v46;
        }
        *(_BYTE *)(*v20 + v45++) = v48 == -1;
      }
      while (v21 != v45);
    }
  }
  else if ((v14 & 0x80000000) == 0)
  {
    v39 = v14;
    do
    {
      v40 = *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v39);
      v41 = *(_QWORD *)(a1 + 64);
      v42 = *(_DWORD *)(v41 + 4 * v40);
      if (v42 == -1)
      {
        *(_DWORD *)(v41 + 4 * v40) = *(_DWORD *)(a1 + 280);
        v43 = *(int *)(a1 + 280);
        *(_DWORD *)(a1 + 280) = v43 + 1;
        *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * v43) = v40;
      }
      *(_BYTE *)(*v20 + v39) = v42 == -1;
    }
    while (v39-- > 0);
  }
  v50 = *(int **)(a1 + 384);
  v51 = *v50;
  v52 = v50[v14];
  v53 = *(unsigned __int8 **)(a1 + 408);
  v110 = *v53;
  v54 = v110 == 0;
  v55 = v53[v14];
  v56 = v53[v14] == 0;
  v57 = (_DWORD)v51 == v19 && v110 == 0;
  v58 = (_DWORD)v52 == v18 && v56;
  v107 = v57;
  v108 = v58;
  v59 = !v57;
  v60 = !v58;
  v105 = v51;
  v106 = v52;
  v109 = v55;
  if ((v59 & 1) != 0 || v60)
  {
    if ((v56 | v59) == 1)
    {
      v62 = v59 ^ 1;
      if (v55)
        v62 = 0;
      if ((v62 & 1) != 0)
      {
        v61 = 2;
      }
      else if ((v54 | v60) == 1)
      {
        v63 = v110 != 0;
        if (v55)
          v63 = 0;
        if (v63)
        {
          v61 = 4;
        }
        else
        {
          v64 = v58;
          if (v110)
            v64 = 0;
          if (v64)
          {
            v61 = 5;
          }
          else
          {
            v65 = !v56;
            if (v110)
              v65 = 0;
            if (v65)
            {
              v61 = 6;
            }
            else if (v54 || v56)
            {
              v61 = 8;
            }
            else
            {
              v61 = 7;
            }
          }
        }
      }
      else
      {
        v61 = 3;
      }
    }
    else
    {
      v61 = 1;
    }
  }
  else
  {
    v61 = 0;
  }
  *a5 = v61;
  sub_20C6E8A80(a1 + 3560, v61 == 0, (_WORD *)(a1 + 16 * a4 + 2494));
  if (*a5)
  {
    v66 = *a5 - 1;
    v67 = a1 + 16 * a4;
    v68 = v67 + 2494;
    sub_20C6E8A80(a1 + 3560, v66 & 1, (_WORD *)(v67 + 2496));
    sub_20C6E8A80(a1 + 3560, (v66 >> 1) & 1, (_WORD *)(v68 + 2 * (v66 & 1 | 2)));
    sub_20C6E8A80(a1 + 3560, (v66 >> 2) & 1, (_WORD *)(v68 + 2 * (v66 & 3 | 4)));
  }
  if (*(_BYTE *)(a6 + 18) && *(_BYTE *)(a6 + 17))
  {
    v69 = *(_DWORD *)(*(_QWORD *)(a1 + 552) + 12 * a2);
    if (v69 <= 19)
      v69 = 19;
    v70 = v69 - 19;
    v115 = v70 >> 1;
    v116 = 15;
    v71 = v70 >= 0x1E;
    v72 = &v116;
    if (!v71)
      v72 = (int *)&v115;
  }
  else
  {
    v117 = 7;
    v72 = (int *)(*(_QWORD *)(a1 + 504) + 4 * a2);
    if (*v72 >= 7)
      v72 = &v117;
  }
  v73 = *v72;
  v74 = v11 + ~(_DWORD)v12;
  v75 = (_WORD *)(a1 + 6 * *v72 + 2388);
  if (v74 > 2)
  {
    sub_20C6E8A80(a1 + 3560, 1, v75);
    sub_20C6E8A80(a1 + 3560, 1, (_WORD *)(a1 + 6 * v73 + 2392));
    sub_20C6E90B8(a1 + 3560, v74 - 3, 0, (_WORD *)(a1 + 2484));
  }
  else
  {
    sub_20C6E8A80(a1 + 3560, v74 & 1, v75);
    sub_20C6E8A80(a1 + 3560, (v74 >> 1) & 1, (_WORD *)(a1 + 6 * v73 + 2 * ((v74 & 1u) + 1) + 2388));
  }
  v76 = *(_DWORD *)(a1 + 36);
  if (v76 == 3)
  {
    if ((int)v12 < (int)v11)
    {
      v80 = 4 * v12;
      v81 = v11 - v12;
      do
      {
        v82 = (_DWORD *)(*(_QWORD *)(a1 + 232) + 4 * *(int *)(*(_QWORD *)(a1 + 432) + v80));
        v83 = v82[1] - *v82;
        if (v83 > 5)
        {
          sub_20C6E8A80(a1 + 3560, 1, (_WORD *)(a1 + 2486));
          sub_20C6E8A80(a1 + 3560, 1, (_WORD *)(a1 + 2490));
          sub_20C6E90B8(a1 + 3560, v83 - 6, 0, (_WORD *)(a1 + 2492));
        }
        else
        {
          sub_20C6E8A80(a1 + 3560, (v83 - 3) & 1, (_WORD *)(a1 + 2486));
          sub_20C6E8A80(a1 + 3560, ((v83 - 3) >> 1) & 1, (_WORD *)(a1 + 2 * (((v83 - 3) & 1u) + 1) + 2486));
        }
        v80 += 4;
        --v81;
      }
      while (v81);
    }
  }
  else if (v76 == 2 && (int)v11 > (int)v12)
  {
    v77 = 4 * v12;
    v78 = v11 - v12;
    do
    {
      v79 = (_DWORD *)(*(_QWORD *)(a1 + 232) + 4 * *(int *)(*(_QWORD *)(a1 + 432) + v77));
      sub_20C6E8A80(a1 + 3560, v79[1] - *v79 != 3, (_WORD *)(a1 + 2486));
      v77 += 4;
      --v78;
    }
    while (v78);
  }
  v84 = v107;
  if (v110)
    v84 = 1;
  if ((v84 & 1) == 0)
  {
    if (*(_BYTE *)(a6 + 17))
      sub_20C6FD724(a1, v105, *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * a2) - 1);
    else
      sub_20C6E9058(a1 + 3560, *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v105) - *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * a2) + 1, 0, (_WORD *)(a1 + 2610), (_WORD *)(a1 + 2612));
  }
  if (v14 >= 2)
  {
    v85 = 1;
    do
    {
      v86 = *(_BYTE *)(*v20 + v85);
      v87 = v86 & 1;
    }
    while (++v85 < v14 && v87 != 0);
    sub_20C6E8A80(a1 + 3560, v87, (_WORD *)(a1 + 2614));
    if ((v86 & 1) == 0)
    {
      if ((_DWORD)v21 == 3)
      {
        v89 = *(int *)(*(_QWORD *)v113 + 4);
        if (*(_BYTE *)(a6 + 17))
          sub_20C6FD724(a1, v89, v111);
        else
          sub_20C6E90B8(a1 + 3560, v111 - *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v89), 0, (_WORD *)(a1 + 2612));
      }
      else
      {
        for (i = 1; i != v14; ++i)
        {
          v91 = *(unsigned __int8 *)(*v20 + i);
          sub_20C6E8A80(a1 + 3560, *(_BYTE *)(*v20 + i) != 0, (_WORD *)(a1 + 2574));
          if (!v91)
          {
            v92 = *(int *)(*(_QWORD *)v113 + 4 * i);
            if (*(_BYTE *)(a6 + 17))
              sub_20C6FD724(a1, v92, v111);
            else
              sub_20C6E90B8(a1 + 3560, v111 - *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v92), 0, (_WORD *)(a1 + 2612));
          }
        }
      }
    }
  }
  v93 = v108;
  if (v109)
    v93 = 1;
  if ((v93 & 1) == 0)
  {
    if (*(_BYTE *)(a6 + 17))
      sub_20C6FD724(a1, v106, *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * a2) + 1);
    else
      sub_20C6E9058(a1 + 3560, *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v106) + ~*(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * a2), 0, (_WORD *)(a1 + 2610), (_WORD *)(a1 + 2612));
  }
  sub_20C6FDDE0((_QWORD *)a1, a2, *a5, v21);
  if (*(_BYTE *)(a6 + 17))
    v94 = *(_BYTE *)(a6 + 18) == 0;
  else
    v94 = 1;
  v95 = v94;
  if (v14 >= 1)
  {
    v96 = *(_QWORD *)(a1 + 528);
    v97 = v14;
    v98 = (int *)(*(_QWORD *)(a1 + 384) + 4);
    do
    {
      v100 = *(v98 - 1);
      v99 = *v98;
      v101 = v96 + 16 * v99;
      *(_DWORD *)(v101 + 4) = v100;
      *(_DWORD *)(v101 + 8) = a2;
      v102 = (_DWORD *)(v96 + 16 * v100);
      *v102 = v99;
      v102[3] = a2;
      if (v95)
      {
        v103 = *(_QWORD *)(a1 + 504);
        ++*(_DWORD *)(v103 + 4 * v100);
        ++*(_DWORD *)(v103 + 4 * v99);
      }
      ++v98;
      --v97;
    }
    while (v97);
  }
  return v14 + 1;
}

uint64_t sub_20C6FFB98(uint64_t result, int a2, int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = result;
  if (a2 == 3 || a2 == 5)
  {
    if (a3 >= 1)
    {
      v6 = a3 + 1;
      do
      {
        v7 = (v6 - 2);
        if (*(_BYTE *)(*(_QWORD *)(v5 + 408) + v7))
          result = sub_20C6FE774(v5, *(_DWORD *)(*(_QWORD *)(v5 + 384) + 4 * v7), a4);
        --v6;
      }
      while (v6 > 1);
    }
  }
  else if (a3 >= 1)
  {
    v8 = 0;
    v9 = a3;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(v5 + 408) + v8))
        result = sub_20C6FE774(v5, *(_DWORD *)(*(_QWORD *)(v5 + 384) + 4 * v8), a4);
      ++v8;
    }
    while (v9 != v8);
  }
  return result;
}

void sub_20C6FFC50(_QWORD *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _DWORD *v16;

  if (a3 > 1)
  {
    v8 = 0;
    v9 = 4 * a3 - 4;
    do
    {
      v10 = (int *)(a1[48] + v8);
      v11 = *v10;
      v12 = v10[1];
      if (*(_BYTE *)(a4 + 19))
      {
        sub_20C6FE3B0((uint64_t)a1, a2, v11, v12);
      }
      else
      {
        v13 = a1[69];
        *(_DWORD *)(v13 + 12 * v11) += 8;
        *(_DWORD *)(v13 + 12 * v12) += 8;
      }
      v8 += 4;
    }
    while (v9 != v8);
  }
  if (a3 >= 1)
  {
    v14 = 0;
    do
    {
      v15 = (int *)(a1[69] + 12 * *(int *)(a1[48] + 4 * v14));
      v16 = a1 + 72;
      if (*(_BYTE *)(a1[51] + v14))
        sub_20C6EF550(v16, v15);
      else
        sub_20C6EF6A4(v16, v15);
      ++v14;
    }
    while (a3 != v14);
  }
}

uint64_t sub_20C6FFD4C(uint64_t a1, int *a2, _BYTE *a3, int a4, unint64_t a5, uint64_t a6, unint64_t a7, int *a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  uint64_t result;
  int v14;
  uint64_t v17;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int **v33;
  int **v34;
  int *v35;
  _DWORD *v36;
  int *v37;
  unint64_t v38;
  int v39;
  int v40;
  int v41;
  int *v42;
  int *v43;
  int *v44;
  unint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  int v65;
  int *v66;
  int *v67;
  _DWORD *v68;
  unint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  int **v93;
  _QWORD *v94;
  __int128 v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  char v104;
  int v105;
  _DWORD *v106;
  uint64_t v107;

  result = 5;
  if (a7 - 255 < 0xFFFFFFFFFFFFFF02)
    return result;
  v14 = a5;
  if (a5 > 0xFE)
    return result;
  if (!a6)
    return result;
  if (!a2)
    return result;
  v17 = a9;
  if (!a9)
    return result;
  if ((*(unsigned __int8 *)(a12 + 8) | 2) == 3)
    return result;
  v22 = *(_DWORD *)(a12 + 12);
  v23 = *(_DWORD *)(a12 + 20);
  if (!a8)
  {
    if (v23)
      return result;
  }
  if (!a3 && *(_DWORD *)(a12 + 16))
    return result;
  v24 = *(_DWORD *)(a12 + 4);
  if (v24 > 0x1B || (v22 - 5) <= 1 && (a7 != 2 || !v24))
    return result;
  if ((unint64_t)a10 < 0x21)
    return 1;
  v25 = *(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208);
  v26 = v25 >> 2;
  if (!v23)
  {
    v31 = *(_QWORD *)(a1 + 3256);
    v32 = *(_QWORD *)(a1 + 3264);
    if (v31 == v32 || v26 != (v32 - v31) >> 2)
      return result;
    goto LABEL_27;
  }
  if ((int)v26 < 1)
  {
LABEL_27:
    v91 = v22 - 5;
    v92 = v26;
    *(_DWORD *)(a1 + 3544) = a7;
    *(_DWORD *)(a1 + 3548) = a6;
    v93 = (int **)(a1 + 3160);
    v94 = (_QWORD *)(a1 + 3136);
    *(_DWORD *)(a1 + 3552) = a4;
    sub_20BE81ACC(a1 + 3160, a7);
    sub_20BE81ACC(a1 + 3184, a7);
    sub_20BE81ACC(a1 + 3136, a7);
    v34 = (int **)(a1 + 3160);
    v33 = (int **)(a1 + 3184);
    if (a7)
    {
      v35 = *v93;
      v36 = *(_DWORD **)(a1 + 3184);
      v37 = a2;
      v38 = a7;
      do
      {
        v39 = *v37++;
        *v35++ = v39;
        *v36++ = v39;
        --v38;
      }
      while (v38);
    }
    if ((int)a6 >= 2)
    {
      v40 = 1;
      v41 = a7;
      do
      {
        if (a7)
        {
          v42 = *v34;
          v43 = *v33;
          v44 = &a2[v41];
          v41 += a7;
          v45 = a7;
          do
          {
            v46 = *v44;
            if (*v44 >= *v42)
              v46 = *v42;
            *v42++ = v46;
            v48 = *v44++;
            v47 = v48;
            if (*v43 > v48)
              v47 = *v43;
            *v43++ = v47;
            --v45;
          }
          while (v45);
        }
        ++v40;
      }
      while (v40 != (_DWORD)a6);
    }
    v49 = *(_DWORD *)(a12 + 4);
    if (a7)
    {
      v50 = 0;
      v51 = 1 << v49;
      v52 = *v33;
      v53 = *v34;
      result = 5;
      while (1)
      {
        v54 = v52[v50];
        v55 = v53[v50];
        if (v54 - v55 > 0xFFFFFFF)
          return 5;
        if (*(_DWORD *)(a12 + 4) && ((v55 & 0x80000000) != 0 || (int)v54 >= v51))
          return result;
        if (v91 > 1)
        {
          *(_DWORD *)(*v94 + 4 * v50) = v54 - v55;
        }
        else
        {
          *(_DWORD *)(*v94 + 4 * v50) = v54;
          v53[v50] = 0;
        }
        if (a7 == ++v50)
        {
          v49 = *(_DWORD *)(a12 + 4);
          goto LABEL_51;
        }
      }
    }
    else
    {
LABEL_51:
      v106 = (_DWORD *)a9;
      v107 = a10;
      v95 = 0u;
      v102 = 0;
      v103 = 0;
      HIDWORD(v95) = a6;
      v96 = a7;
      v97 = v92;
      v98 = v14;
      v99 = v49;
      v100 = a4;
      v101 = 3;
      v102 = *(_QWORD *)(a12 + 16);
      v104 = *(_BYTE *)(a12 + 8);
      v105 = *(_DWORD *)(a12 + 12);
      v56 = (_DWORD *)sub_20C6F80A8(a9, a10, (uint64_t)&v95);
      if (a7)
      {
        v58 = 0;
        do
        {
          v59 = v57 < 4;
          v57 -= 4;
          if (v59)
          {
            v57 = 0;
            v56 = 0;
          }
          else
          {
            *v56++ = (*v93)[v58];
          }
          v60 = *(_DWORD *)(*v94 + 4 * v58);
          v61 = 32 - __clz(v60);
          if (v60)
            v62 = v61;
          else
            v62 = 0;
          *(_DWORD *)(*v94 + 4 * v58++) = v62;
        }
        while (a7 != v58);
        v63 = 0;
        do
        {
          v59 = v57-- < 1;
          if (v59)
          {
            v57 = 0;
            v56 = 0;
          }
          else
          {
            *(_BYTE *)v56 = *(_DWORD *)(*v94 + 4 * v63);
            v56 = (_DWORD *)((char *)v56 + 1);
          }
          ++v63;
        }
        while (a7 != v63);
      }
      v106 = v56;
      v107 = v57;
      sub_20BE81ACC(a1 + 3208, a7 * a6);
      if ((int)a6 >= 1)
      {
        v64 = 0;
        v65 = 0;
        do
        {
          if (a7)
          {
            v66 = *v93;
            v67 = &a2[v65];
            v68 = (_DWORD *)(*(_QWORD *)(a1 + 3208) + 4 * v65);
            v65 += a7;
            v69 = a7;
            do
            {
              v71 = *v67++;
              v70 = v71;
              v72 = *v66++;
              *v68++ = v70 - v72;
              --v69;
            }
            while (v69);
          }
          ++v64;
        }
        while (v64 != (_DWORD)a6);
      }
      if (*(_DWORD *)(a12 + 20))
      {
        v73 = *(unsigned int *)(a1 + 4);
        sub_20BE81ACC(a1 + 3256, (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 2);
        if ((int)v73 >= 1)
        {
          v74 = 0;
          v75 = *(_QWORD *)(a1 + 256);
          v76 = *(_QWORD *)(a1 + 232);
          do
          {
            v77 = *(int *)(v76 + 4 * v74);
            v78 = v74 + 1;
            v79 = *(int *)(v76 + 4 * (v74 + 1));
            v80 = v79 - v77;
            if ((int)v79 > (int)v77)
            {
              v81 = *(_DWORD *)(v75 + 4 * v74);
              v82 = (_DWORD *)(*(_QWORD *)(a1 + 3256) + 4 * v77);
              v83 = v79 - v77;
              do
              {
                *v82++ = a8[v81 % v80 + (int)v77];
                ++v81;
                --v83;
              }
              while (v83);
            }
            v74 = v78;
          }
          while (v78 != v73);
        }
      }
      if (a3 && *(_DWORD *)(a12 + 16))
      {
        sub_20C6F5978((unint64_t *)(a1 + 3232), (int)a6);
        if ((int)a6 >= 1)
        {
          v84 = 0;
          do
          {
            *(_BYTE *)(*(_QWORD *)(a1 + 3232) + v84) = a3[v84];
            ++v84;
          }
          while (a6 != v84);
        }
        sub_20C6F5978((unint64_t *)(a1 + 3096), (int)a6);
        if (a6 << 32)
          memmove(*(void **)(a1 + 3096), a3, (int)a6);
      }
      else
      {
        sub_20C6F5978((unint64_t *)(a1 + 3232), 0);
      }
      result = sub_20C7002DC(a1, a12, (uint64_t)&v106);
      if (!(_DWORD)result)
      {
        result = 1;
        if (v106)
        {
          if ((v107 & 0x8000000000000000) == 0)
          {
            v85 = (a10 & ~(a10 >> 63)) - v107;
            if (a10 - v85 >= 0)
              v86 = (a10 & ~(a10 >> 63)) - v107;
            else
              v86 = 0;
            if (a10 - v85 < 0)
              v17 = 0;
            v87 = v86 & ~(v86 >> 63);
            *a11 = v87;
            if (v86 >= 16)
              *(_DWORD *)(v17 + 12) = v87;
            v88 = 8;
            if (v86 > 8)
              v88 = v86;
            v89 = sub_20C6E7D1C(v17 + 8, v88 - 8);
            if (v86 >= 8)
            {
              v90 = v89;
              result = 0;
              *(_DWORD *)(v17 + 4) = v90;
            }
            else
            {
              return 0;
            }
          }
        }
      }
    }
    return result;
  }
  v27 = ((unint64_t)v25 >> 2);
  v28 = a8;
  while (1)
  {
    v30 = *v28++;
    v29 = v30;
    if (v30 < 0 || v29 >= (int)a6)
      return result;
    if (!--v27)
      goto LABEL_27;
  }
}

uint64_t sub_20C7002DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(unsigned int **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  v8 = *(_QWORD *)a3 + 4;
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v7 - 4;
  v9 = (unsigned int *)(a1 + 3560);
  *(_DWORD *)(a1 + 3564) = (v7 - 4) & ~((v7 - 4) >> 63);
  *(_QWORD *)(a1 + 3568) = v8;
  sub_20C6E7C30(a1 + 3560);
  if (*(_DWORD *)(a2 + 20))
    sub_20C700848((unsigned int *)a1);
  result = sub_20C706AE0(a1, a2);
  if (!(_DWORD)result)
  {
    v11 = sub_20C6E8BF4((uint64_t)v9);
    if (v7 >= 4)
      *v6 = v11;
    v12 = v11;
    if (*(_QWORD *)a3)
      v12 = *(_QWORD *)a3 + v11;
    v13 = *(_QWORD *)(a3 + 8) - v11;
    *(_QWORD *)a3 = v12;
    *(_QWORD *)(a3 + 8) = v13;
    return *v9;
  }
  return result;
}

uint64_t sub_20C700390(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int **v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(unsigned int *)(a1 + 4);
  v3 = *(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208);
  v4 = (int **)(a1 + 3472);
  sub_20C6E8D90(a1 + 3472, *(_DWORD *)a1);
  if ((int)(v3 >> 2) >= 1)
  {
    v5 = *(int **)(a1 + 208);
    v6 = *(_QWORD *)(a1 + 3472);
    v7 = (v3 >> 2);
    do
    {
      v8 = *v5++;
      ++*(_DWORD *)(v6 + 4 * v8 + 4);
      --v7;
    }
    while (v7);
  }
  sub_20C6E8DFC(v4);
  if ((int)v2 >= 1)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 3520);
    v11 = *(_QWORD *)(a1 + 112);
    v12 = *(_QWORD *)(a1 + 232);
    do
    {
      v13 = (int *)(v12 + 4 * *(int *)(v11 + 4 * v9));
      v14 = *v13;
      v15 = v13[1];
      if ((int)v14 < (int)v15)
      {
        v16 = *(_QWORD *)(a1 + 208);
        v17 = *(_QWORD *)(a1 + 3256);
        v18 = *(_QWORD *)(a1 + 3472);
        v19 = *(_QWORD *)(a1 + 3496);
        do
        {
          v20 = *(int *)(v16 + 4 * v14);
          v21 = *(_DWORD *)(v17 + 4 * v14);
          v22 = *(int *)(v18 + 4 * v20);
          v23 = *(int *)(v19 + 4 * v20);
          v24 = v23 + v22;
          if ((int)v23 <= 0)
          {
LABEL_12:
            *(_DWORD *)(v19 + 4 * v20) = v23 + 1;
            *(_DWORD *)(v10 + 4 * v24) = v21;
          }
          else
          {
            v24 = (int)v24;
            while (*(_DWORD *)(v10 + 4 * v22) != v21)
            {
              if (++v22 >= (int)v24)
                goto LABEL_12;
            }
          }
          ++v14;
        }
        while (v14 != v15);
      }
      ++v9;
    }
    while (v9 != v2);
  }
  return 0;
}

_QWORD *sub_20C7004AC(_QWORD *result, unsigned int a2, int a3, unsigned int *a4, _DWORD *a5)
{
  uint64_t v5;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v17;
  int v18;
  int v19;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *a4;
  *(_QWORD *)a5 = -1;
  a5[2] = -1;
  if ((a2 & 0x80000000) == 0 && (v5 & 0x80000000) == 0)
  {
    v7 = result;
    v8 = a5 + 1;
    v32 = result[440];
    v9 = result[437];
    v10 = *(_DWORD *)(v9 + 4 * a2);
    v11 = a4[2];
    v12 = (int)a4[1];
    if ((v11 & 0x80000000) != 0)
    {
      if ((v12 & 0x80000000) == 0)
      {
        v18 = *(_DWORD *)(v9 + 4 * v5);
        v19 = *(_DWORD *)(v9 + 4 * v12);
        if (v10 == 1 && v18 == 1 && v19 == 1)
        {
          v31 = result[434];
          *a5 = *(_DWORD *)(v32 + 4 * *(int *)(v31 + 4 * v5));
          a5[1] = *(_DWORD *)(v32 + 4 * *(int *)(v31 + 4 * v12));
        }
        else
        {
          return (_QWORD *)sub_20C7006B4(result, a3, a2, v5, v12, a5, v8);
        }
      }
    }
    else
    {
      v13 = *(_DWORD *)(v9 + 4 * v5);
      v14 = *(_DWORD *)(v9 + 4 * v12);
      if (v10 == 1 && v13 == 1 && v14 == 1)
      {
        v22 = result[434];
        v17 = *(_DWORD *)(v32 + 4 * *(int *)(v22 + 4 * v5));
        *a5 = v17;
        a5[1] = *(_DWORD *)(v32 + 4 * *(int *)(v22 + 4 * v12));
        if (v17 < 0)
          return result;
      }
      else
      {
        result = (_QWORD *)sub_20C7006B4(result, a3, a2, v5, v12, a5, v8);
        v17 = *a5;
        if ((*a5 & 0x80000000) != 0)
          return result;
      }
      v23 = *v8;
      if ((v23 & 0x80000000) == 0)
      {
        v24 = *(int *)(v7[437] + 4 * v11);
        if ((_DWORD)v24 == 1 && v13 == 1 && v14 == 1)
        {
          a5[2] = *(_DWORD *)(v32 + 4 * *(int *)(v7[434] + 4 * v11));
        }
        else if ((int)v24 >= 1)
        {
          v27 = *(int *)(v7[434] + 4 * v11);
          v28 = v27 + v24;
          do
          {
            v29 = *(_DWORD *)(v32 + 4 * v27);
            v33 = 0;
            result = (_QWORD *)sub_20C7006B4(v7, v29, v11, v5, v12, (_DWORD *)&v33 + 1, &v33);
            if (HIDWORD(v33) == v17 && (_DWORD)v33 == v23)
              a5[2] = v29;
            ++v27;
          }
          while (v27 < v28);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20C7006B4(_QWORD *a1, int a2, int a3, int a4, int a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  v7 = *(int *)(a1[428] + 4 * a2);
  if ((int)v7 >= 1)
  {
    v8 = *(int *)(a1[425] + 4 * a2);
    v9 = v7 + v8;
    v10 = a1[26];
    while (2)
    {
      v11 = (int *)(a1[29] + 4 * *(int *)(a1[431] + 4 * v8));
      v12 = *v11;
      v13 = v11[1];
      v14 = *(_DWORD *)(v10 + 4 * v12);
      v15 = (int)v12 + 1;
      v16 = 4 * v15 - 4;
      v17 = v15 + 1;
      while (v17 < v13)
      {
        v18 = *(_DWORD *)(v10 + v16 + 4);
        v19 = *(_DWORD *)(v10 + v16 + 8);
        if (v14 == a3 && v18 == a4 && v19 == a5)
        {
          v27 = a1[407] + v16;
          *a6 = *(_DWORD *)(v27 + 4);
          goto LABEL_41;
        }
        if (v14 == a3 && v19 == a4 && v18 == a5)
        {
          v28 = a1[407] + v16;
          *a7 = *(_DWORD *)(v28 + 4);
          goto LABEL_43;
        }
        if (v18 == a3 && v14 == a4 && v19 == a5)
        {
          v29 = a1[407];
          *a6 = *(_DWORD *)(v29 + 4 * v12);
          v27 = v29 + v16;
LABEL_41:
          v30 = *(_DWORD *)(v27 + 8);
LABEL_45:
          *a7 = v30;
          return 1;
        }
        if (v18 == a3 && v19 == a4 && v14 == a5)
        {
          v31 = a1[407];
          *a7 = *(_DWORD *)(v31 + 4 * v12);
          v28 = v31 + v16;
LABEL_43:
          v34 = *(_DWORD *)(v28 + 8);
LABEL_46:
          *a6 = v34;
          return 1;
        }
        if (v19 == a3 && v14 == a4 && v18 == a5)
        {
          v32 = a1[407];
          *a6 = *(_DWORD *)(v32 + 4 * v12);
          v30 = *(_DWORD *)(v32 + v16 + 4);
          goto LABEL_45;
        }
        v16 += 4;
        ++v17;
        if (v19 == a3 && v18 == a4 && v14 == a5)
        {
          v33 = a1[407];
          *a7 = *(_DWORD *)(v33 + 4 * v12);
          v34 = *(_DWORD *)(v33 + v16);
          goto LABEL_46;
        }
      }
      if (++v8 < v9)
        continue;
      break;
    }
  }
  result = 0;
  *a6 = -1;
  *a7 = -1;
  return result;
}

uint64_t sub_20C700848(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  void *__p[3];
  __int16 v66;
  __int16 v67;
  __int16 v68;
  __int16 v69;
  _WORD __b[3];
  _DWORD v71[10];
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v2 = a1[1];
  v4 = (int)a1[887];
  sub_20C700390((uint64_t)a1);
  memset_pattern16(__b, &unk_20CAF8CE0, 6uLL);
  v69 = 0x8000;
  v68 = 0x8000;
  v5 = (uint64_t *)(a1 + 820);
  sub_20BE81ACC((uint64_t)(a1 + 832), 0);
  sub_20BE81ACC((uint64_t)(a1 + 820), 0);
  v63 = a1 + 826;
  sub_20BE81ACC((uint64_t)(a1 + 826), 0);
  v71[0] = -1;
  sub_20BE86740((uint64_t)(a1 + 832), v4, v71);
  v71[0] = -1;
  sub_20BE86740((uint64_t)(a1 + 820), v4, v71);
  v71[0] = -1;
  sub_20BE86740((uint64_t)(a1 + 826), v4, v71);
  v64 = *((_QWORD *)a1 + 440);
  v61 = v4;
  if ((int)v3 <= 0)
  {
    v24 = 0;
    v67 = 0x8000;
    v66 = 0x8000;
  }
  else
  {
    v6 = 0;
    v62 = v3;
    v7 = 4 * v3;
    do
    {
      v8 = *(int *)(*((_QWORD *)a1 + 11) + v6);
      v9 = *((_QWORD *)a1 + 437);
      v10 = (unsigned int *)(*((_QWORD *)a1 + 17) + 12 * v8);
      v11 = *v10;
      if ((v11 & 0x80000000) != 0)
        v12 = 0;
      else
        v12 = *(_DWORD *)(v9 + 4 * v11);
      v13 = v10[1];
      if ((v13 & 0x80000000) != 0)
        v14 = 0;
      else
        v14 = *(_DWORD *)(v9 + 4 * v13);
      v15 = (unsigned int *)(*((_QWORD *)a1 + 20) + 12 * v8);
      v16 = *v15;
      if ((v16 & 0x80000000) != 0)
        v17 = 0;
      else
        v17 = *(_DWORD *)(v9 + 4 * v16);
      v18 = v15[1];
      if ((v18 & 0x80000000) != 0)
        v19 = 0;
      else
        v19 = *(_DWORD *)(v9 + 4 * v18);
      v20 = *(_DWORD *)(v9 + 4 * v8);
      v21 = v17 == v19;
      if (v12 == v14)
        ++v21;
      sub_20C6E8A80((uint64_t)(a1 + 890), v20 == 1, &__b[v21]);
      if (v20 != 1)
      {
        v22 = (uint64_t)(a1 + 890);
        if (v20)
        {
          sub_20C6E8A80(v22, 0, &v69);
          sub_20C6E90B8((uint64_t)(a1 + 890), v20 - 2, 0, &v68);
        }
        else
        {
          sub_20C6E8A80(v22, 1, &v69);
        }
      }
      v6 += 4;
    }
    while (v7 != v6);
    v23 = 0;
    v24 = 0;
    v67 = 0x8000;
    v66 = 0x8000;
    do
    {
      v25 = *(_DWORD *)(*((_QWORD *)a1 + 11) + 4 * v23);
      v26 = *(int *)(*((_QWORD *)a1 + 437) + 4 * v25);
      if ((int)v26 >= 1)
      {
        v27 = *(int *)(*((_QWORD *)a1 + 434) + 4 * v25);
        v28 = v26 + v27;
        do
        {
          v29 = *(_DWORD *)(v64 + 4 * v27);
          v30 = (uint64_t)(a1 + 890);
          if (*(_DWORD *)(*v5 + 4 * v29) == -1)
          {
            sub_20C6E8A80(v30, 1, &v67);
            *(_DWORD *)(*v5 + 4 * v29) = v24;
            *(_DWORD *)(*v63 + 4 * v24) = v29;
            *(_DWORD *)(*((_QWORD *)a1 + 416) + 4 * v29) = v25;
            ++v24;
          }
          else
          {
            sub_20C6E8A80(v30, 0, &v67);
            sub_20C6E90B8((uint64_t)(a1 + 890), v24 + ~*(_DWORD *)(*v5 + 4 * v29), 0, &v66);
          }
          ++v27;
        }
        while (v27 < v28);
      }
      ++v23;
      LODWORD(v3) = v62;
    }
    while (v23 != v62);
  }
  if ((int)v61 >= 1)
  {
    v31 = 0;
    v32 = *v5;
    do
    {
      if (*(_DWORD *)(v32 + 4 * v31) == -1)
      {
        *(_DWORD *)(v32 + 4 * v31) = v24;
        *(_DWORD *)(*v63 + 4 * v24++) = v31;
      }
      ++v31;
    }
    while (v61 != v31);
  }
  sub_20C6E8D90((uint64_t)(a1 + 850), v61);
  if ((int)v2 < 1)
  {
    sub_20C6E8DFC((int **)a1 + 425);
    v71[0] = 0;
    sub_20C6E8A00(__p, (int)v3, v71);
    memset_pattern16(v71, &unk_20CAF8CE0, 0x28uLL);
  }
  else
  {
    v33 = 0;
    v34 = *((_QWORD *)a1 + 29);
    do
    {
      v35 = *(int *)(v34 + 4 * v33++);
      v36 = *(int *)(v34 + 4 * v33);
      if ((int)v35 < (int)v36)
      {
        v37 = *((_QWORD *)a1 + 425);
        v38 = (int *)(*((_QWORD *)a1 + 407) + 4 * v35);
        v39 = v36 - v35;
        do
        {
          v40 = *v38++;
          ++*(_DWORD *)(v37 + 4 * v40 + 4);
          --v39;
        }
        while (v39);
      }
    }
    while (v33 != v2);
    sub_20C6E8DFC((int **)a1 + 425);
    v71[0] = 0;
    sub_20C6E8A00(__p, (int)v3, v71);
    memset_pattern16(v71, &unk_20CAF8CE0, 0x28uLL);
    v41 = 0;
    v42 = 0;
    do
    {
      v43 = *(int *)(*((_QWORD *)a1 + 14) + 4 * v41);
      v44 = *((_QWORD *)a1 + 29);
      v45 = *(int *)(v44 + 4 * v43);
      v46 = *(_DWORD *)(v44 + 4 * ((int)v43 + 1));
      if ((int)v45 < v46)
      {
        do
        {
          v47 = *(int *)(*((_QWORD *)a1 + 26) + 4 * v45);
          v48 = *(int *)(*((_QWORD *)a1 + 407) + 4 * v45);
          v49 = *((_QWORD *)a1 + 437);
          v50 = *(_DWORD *)(v49 + 4 * v47);
          v51 = *(_DWORD *)(*((_QWORD *)a1 + 425) + 4 * v48);
          v52 = *((_QWORD *)a1 + 428);
          v53 = *(_DWORD *)(v52 + 4 * v48);
          *(_DWORD *)(v52 + 4 * v48) = v53 + 1;
          *(_DWORD *)(*((_QWORD *)a1 + 431) + 4 * (v53 + v51)) = v43;
          if (v50 >= 2)
          {
            v54 = *(_DWORD *)(v49 + 4 * v47);
            if (v54 < 1)
            {
LABEL_50:
              LODWORD(v55) = 0;
            }
            else
            {
              v55 = 0;
              v56 = *(int *)(*((_QWORD *)a1 + 434) + 4 * v47);
              v57 = v54 + (int)v56;
              while ((_DWORD)v48 != *(_DWORD *)(v64 + 4 * v56 + 4 * v55))
              {
                ++v55;
                if (v56 + v55 >= v57)
                  goto LABEL_50;
              }
            }
            v58 = *((_DWORD *)__p[0] + v47);
            *((_DWORD *)__p[0] + v47) = v58 + 1;
            if (v42 >= 1)
              v42 = 1;
            if (v58 >= 4)
              v59 = 4;
            else
              v59 = v58;
            sub_20C700DB0((uint64_t)(a1 + 890), v55, v50 - 1, &v71[2 * v59 + v42]);
            v42 = v55;
          }
          ++v45;
        }
        while (v46 != (_DWORD)v45);
      }
      ++v41;
    }
    while (v41 != v2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 0;
}

void sub_20C700D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C700DB0(uint64_t result, int a2, int a3, _WORD *a4)
{
  uint64_t v7;
  int v8;

  if (a3)
  {
    v7 = result;
    result = sub_20C6E8A80(result, a2 != 0, a4);
    if (a2)
    {
      v8 = a2 - 1;
      if (a2 != 1)
      {
        do
        {
          result = sub_20C6E8A80(v7, 1, a4 + 1);
          --v8;
        }
        while (v8);
      }
      if (a3 > a2)
        return sub_20C6E8A80(v7, 0, a4 + 1);
    }
  }
  return result;
}

uint64_t sub_20C700E4C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unint64_t v24;
  _DWORD *v25;
  int v26;
  unint64_t i;

  v5 = *(_QWORD *)(a1 + 3208);
  v6 = *(unsigned int *)(a1 + 3544);
  v7 = *(_QWORD *)(a1 + 3280);
  v8 = *(_DWORD *)(v7 + 4 * a2);
  v9 = *(_DWORD *)(a4 + 16);
  v10 = *(_QWORD *)(a1 + 3448);
  v11 = *(int *)(*(_QWORD *)(a1 + 3400) + 4 * a2);
  v12 = *(int *)(*(_QWORD *)(a1 + 3424) + 4 * a2);
  v13 = *(_DWORD **)a3;
  v14 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v14 >= 1)
    bzero(*(void **)a3, 4 * (((unint64_t)v14 >> 2) - ((unint64_t)v14 > 3)) + 4);
  if ((int)v12 < 1)
    return 0;
  result = 0;
  v16 = v12 + v11;
  v17 = *(_QWORD *)(a1 + 232);
  do
  {
    v18 = (int *)(v17 + 4 * *(int *)(v10 + 4 * v11));
    v19 = *v18;
    v20 = v18[1];
    if ((int)v19 < (int)v20)
    {
      v21 = *(_QWORD *)(a1 + 3256);
      do
      {
        v22 = *(int *)(v21 + 4 * v19);
        if (*(_DWORD *)(v7 + 4 * v22) < v8 && (!v9 || *(_BYTE *)(*(_QWORD *)(a1 + 3232) + v22)))
        {
          if ((int)v6 >= 1)
          {
            v23 = (int *)(v5 + 4 * (int)v22 * (int)v6);
            v24 = v6;
            v25 = v13;
            do
            {
              v26 = *v23++;
              *v25++ += v26;
              --v24;
            }
            while (v24);
          }
          result = (result + 1);
        }
        ++v19;
      }
      while (v19 < v20 && (int)result < 4);
    }
    ++v11;
  }
  while (v11 < v16 && (int)result < 4);
  if ((int)v6 >= 1 && (int)result >= 2)
  {
    for (i = 0; i < v6; ++i)
      v13[i] /= (int)result;
  }
  return result;
}

uint64_t sub_20C700FBC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  int32x2_t v27;
  unint64_t i;

  v4 = *(_QWORD *)(a1 + 3208);
  v5 = *(unsigned int *)(a1 + 3544);
  v6 = *(_DWORD *)(a4 + 16);
  v7 = *(_QWORD *)(a1 + 3280);
  v8 = *(_DWORD *)(v7 + 4 * a2);
  v9 = *(int *)(*(_QWORD *)(a1 + 3400) + 4 * a2);
  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 3424) + 4 * a2);
  v11 = *(_QWORD *)(a1 + 3448);
  v12 = *(_DWORD *)(a4 + 4);
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  if (v10 < 1)
    return 0;
  result = 0;
  v15 = 0;
  v16 = ~(-1 << (v12 - 1));
  v17 = v10 + v9;
  v18 = *(_QWORD *)(a1 + 232);
  v19 = 0;
  v20 = vdup_n_s32(v16);
  do
  {
    v21 = (int *)(v18 + 4 * *(int *)(v11 + 4 * v9));
    v22 = *v21;
    v23 = v21[1];
    if ((int)v22 < (int)v23)
    {
      v24 = *(_QWORD *)(a1 + 3256);
      do
      {
        v25 = *(int *)(v24 + 4 * v22);
        if (*(_DWORD *)(v7 + 4 * v25) < v8 && (!v6 || *(_BYTE *)(*(_QWORD *)(a1 + 3232) + v25)))
        {
          v26 = vsub_s32(*(int32x2_t *)(v4 + 4 * (int)v25 * (int)v5), v20);
          v27 = vabs_s32(vrev64_s32(v26));
          if ((int)(v16 - v27.i32[1] - v27.i32[0]) < 0)
            v26 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v26), (int8x8_t)vsub_s32(v27, v20), (int8x8_t)__PAIR64__(v16 - v27.i32[1], v16 - v27.i32[0]));
          v19 = vadd_s32(v19, v26);
          *(int32x2_t *)a3 = v19;
          v15 += v16 - v27.i32[1] - v27.i32[0];
          *(_DWORD *)(a3 + 8) = v15;
          result = (result + 1);
        }
        ++v22;
      }
      while (v22 < v23 && (int)result < 4);
    }
    ++v9;
  }
  while (v9 < v17 && (int)result < 4);
  if ((int)v5 >= 1 && (int)result >= 2)
  {
    for (i = 0; i < v5; ++i)
      *(int *)(a3 + 4 * i) /= (int)result;
  }
  return result;
}

uint64_t sub_20C701120(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  _DWORD *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  _DWORD *v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _DWORD *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  _DWORD *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  _DWORD *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  BOOL v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  BOOL v101;
  int v102;
  int v103;
  int v104;
  unint64_t v105;
  int v106;
  unint64_t v107;
  int v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  int *v113;
  int *v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  _DWORD *v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  _DWORD *v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  _DWORD *v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  int *v172;
  int *v173;
  int v174;
  int v175;
  uint64_t v176;
  _DWORD *v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  _DWORD *v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  uint64_t v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  int *v212;
  int *v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  uint64_t v219;
  int v220;
  int v221;
  int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  BOOL v226;
  uint64_t v227;
  int v228;
  int v229;
  int v230;
  unint64_t v231;
  int v232;
  int v233;
  int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  _BYTE *v238;
  int64_t *v239;
  int *v240;
  int *v241;
  int *v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  uint64_t *v257;
  int *v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  signed int v279;
  signed int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  unsigned int v307;
  int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  int *v312;
  int *v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  int *v327;
  int *v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  int v337;
  unint64_t v338;
  int v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  int *v343;
  int *v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  signed int v366;
  signed int v367;
  signed int v368;
  signed int v369;
  int v370;
  int v371;
  uint64_t v372;
  int v373;
  int v374;
  unsigned int v375;
  unsigned int v376;
  unsigned int v377;
  int *v378;
  int *v379;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  int v389;
  unsigned int v390;
  unsigned int v391;
  unsigned int v392;
  int *v393;
  int *v394;
  int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  int *v407;
  int *v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  int v426;
  int v427;
  int v428;
  signed int v429;
  signed int v430;
  signed int v431;
  signed int v432;
  int v433;
  int v434;
  uint64_t v435;
  int v436;
  int v437;
  unsigned int v438;
  int v439;
  unsigned int v440;
  unsigned int v441;
  unsigned int v442;
  int *v443;
  int *v444;
  int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  unsigned int v458;
  int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  int v464;
  signed int v465;
  signed int v466;
  int v467;
  unint64_t v468;
  char *v469;
  void *v470;
  void *v471;
  char *v472;
  void *v473;
  void *v474;
  void *v475;
  int v477;
  int v478;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  int v501;
  int v502;
  int v503;
  int v504;
  unsigned int v505;
  unsigned int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  int v519;
  int v520;
  int v521;
  int v522;
  int v523;
  int v524;
  int v525;
  int v526;
  int v527;
  int v528;
  int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  int v534;
  int v535;
  int v536;
  int v537;
  int v538;
  int v539;
  unsigned int v540;
  int v541;
  uint64_t v542;
  _QWORD *v543;
  uint64_t v544;
  _QWORD *v545;
  unsigned __int8 *v546;
  uint64_t v547;
  int v549;
  int v550;
  uint64_t v551;
  int v552;
  int v553;
  unsigned int v554;
  int v555;
  int v556;
  int v557;
  int v558;
  int v559;
  unsigned int v560;
  int v561;
  int v562;
  unsigned int v563;
  int v564;
  int v565;
  unsigned int v566;
  int v567;
  int v568;
  int v569;
  int v570;
  int v571;
  int v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  int v580;
  int v581;
  int v582;
  int v583;
  int v584;
  int v585;
  uint64_t v586;
  _DWORD v587[2];
  uint64_t v588;
  _DWORD v589[2];
  int64_t v590;
  int v591;
  int v592;
  int v593;
  int v594;
  __int16 v595;
  unsigned __int16 v596;
  unsigned __int16 v597;
  unsigned __int16 v598;
  unsigned __int16 v599;
  unsigned __int16 __b;
  unsigned __int16 v601;
  unsigned __int16 v602;
  void *__p;
  void *v604;
  uint64_t v605;
  _OWORD v606[15];
  _OWORD v607[7];
  uint64_t v608;
  uint64_t v609;

  v2 = (_QWORD *)a1;
  v609 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 3548);
  v4 = *(_DWORD *)(a1 + 3544);
  v5 = *(_QWORD *)(a1 + 3208);
  v547 = v3;
  v6 = ~(-1 << (*(_DWORD *)(a2 + 4) - 1));
  __p = 0;
  v604 = 0;
  v605 = 0;
  v550 = v6;
  sub_20C6F1AD8((_QWORD *)(a1 + 184), v2 + 29, v2 + 26, v2 + 407, v3, (uint64_t *)&__p, v6);
  v7 = 0;
  v608 = 0;
  v545 = v2 + 392;
  memset(v607, 0, sizeof(v607));
  memset(v606, 0, sizeof(v606));
  do
  {
    sub_20C6EC678((uint64_t)v606 + v7, v4);
    v7 += 120;
  }
  while (v7 != 360);
  v549 = v4;
  memset_pattern16(&__b, &unk_20CAF8CE0, 6uLL);
  v8 = v4;
  memset_pattern16(&v597, &unk_20CAF8CE0, 6uLL);
  v596 = 0x8000;
  v595 = 0x8000;
  v9 = v550;
  if ((int)v547 > 0)
  {
    v10 = 0;
    v557 = *(_DWORD *)(a2 + 16);
    v543 = v2;
    v544 = (uint64_t)(v2 + 445);
    v542 = v5;
    v546 = (unsigned __int8 *)(a2 + 8);
    do
    {
      v11 = *(int *)(v2[413] + 4 * v10);
      if (v557 && !*(_BYTE *)(v2[404] + v11))
        goto LABEL_758;
      v551 = v10;
      v12 = v11 * v8;
      v13 = *(unsigned int *)(v2[416] + 4 * v11);
      v14 = (_DWORD *)(v5 + 4 * v12);
      v15 = *v14 - v9;
      v16 = v14[1] - v9;
      if (v15 >= 0)
        v17 = v15;
      else
        v17 = -v15;
      if (v16 >= 0)
        v18 = v16;
      else
        v18 = -v16;
      v19 = v9 - v17;
      v20 = v18 - v9;
      if (v15 >= 0)
        v20 = v9 - v18;
      v21 = v17 - v9;
      if (v16 >= 0)
        v21 = v19;
      v22 = v19 - v18;
      v552 = v22;
      v594 = v22;
      if (v22 < 0)
        v23 = v20;
      else
        v23 = v15;
      if (v22 < 0)
        v24 = v21;
      else
        v24 = v16;
      v592 = v23;
      v593 = v24;
      v25 = (int *)((char *)__p + 12 * (int)v11);
      v26 = *v25;
      LODWORD(v590) = *v25;
      v27 = v25[1];
      HIDWORD(v590) = v27;
      v28 = v25[2];
      v591 = v28;
      if ((v13 & 0x80000000) == 0)
      {
        v589[0] = -1;
        v588 = -1;
        v587[0] = -1;
        v586 = -1;
        sub_20C7004AC(v2, v13, v11, (unsigned int *)(v2[17] + 12 * v13), &v588);
        sub_20C7004AC(v2, v13, v11, (unsigned int *)(v2[20] + 12 * v13), &v586);
        v29 = v589[0];
        if ((v589[0] & 0x80000000) != 0)
        {
          v8 = v549;
          if ((v587[0] & 0x80000000) != 0)
          {
            v31 = v589[0];
            v29 = v587[0];
          }
          else
          {
            v30 = v588;
            v588 = v586;
            v31 = v587[0];
            v589[0] = v587[0];
            v586 = v30;
            v587[0] = v29;
          }
        }
        else
        {
          v31 = v589[0];
          v29 = v587[0];
          v8 = v549;
        }
        v9 = v550;
        if (v29 != -1)
        {
          if (!v557
            || (v32 = v2[404], *(_BYTE *)(v32 + (int)v588))
            && *(_BYTE *)(v32 + SHIDWORD(v588))
            && *(_BYTE *)(v32 + v31)
            && *(_BYTE *)(v32 + (int)v586)
            && *(_BYTE *)(v32 + SHIDWORD(v586))
            && *(_BYTE *)(v32 + v29))
          {
            v33 = (_DWORD *)(v5 + 4 * (int)v588 * v8);
            v34 = v33[1];
            v35 = *v33 - v550;
            v36 = v34 - v550;
            if (v35 >= 0)
              v37 = v35;
            else
              v37 = -v35;
            if (v36 >= 0)
              v38 = v34 - v550;
            else
              v38 = v550 - v34;
            v39 = v550 - v37;
            v40 = v550 - v37 - v38;
            if (v40 < 0)
            {
              v41 = v38 - v550;
              v42 = v550 - v38;
              if (v35 >= 0)
                v35 = v42;
              else
                v35 = v41;
              v43 = v37 - v550;
              if (v36 >= 0)
                v36 = v39;
              else
                v36 = v43;
            }
            v44 = (_DWORD *)(v5 + 4 * HIDWORD(v588) * v8);
            v45 = *v44 - v550;
            v46 = v44[1] - v550;
            if (v45 >= 0)
              v47 = *v44 - v550;
            else
              v47 = v550 - *v44;
            if (v46 >= 0)
              v48 = v46;
            else
              v48 = -v46;
            v49 = v550 - v47;
            v50 = v550 - v47 - v48;
            if (v50 < 0)
            {
              v51 = v48 - v550;
              v52 = v550 - v48;
              if (v45 >= 0)
                v45 = v52;
              else
                v45 = v51;
              v53 = v47 - v550;
              if (v46 >= 0)
                v46 = v49;
              else
                v46 = v53;
            }
            v54 = (_DWORD *)(v5 + 4 * v31 * v8);
            v55 = *v54 - v550;
            v56 = v54[1] - v550;
            if (v55 >= 0)
              v57 = *v54 - v550;
            else
              v57 = v550 - *v54;
            if (v56 >= 0)
              v58 = v56;
            else
              v58 = -v56;
            v59 = v550 - v57;
            v537 = v550 - v57 - v58;
            if (v537 < 0)
            {
              v60 = v58 - v550;
              v61 = v550 - v58;
              if (v55 >= 0)
                v55 = v61;
              else
                v55 = v60;
              v62 = v57 - v550;
              if (v56 >= 0)
                v56 = v59;
              else
                v56 = v62;
            }
            v63 = (_DWORD *)(v5 + 4 * (int)v586 * v8);
            v64 = *v63 - v550;
            v65 = v63[1] - v550;
            if (v64 >= 0)
              v66 = *v63 - v550;
            else
              v66 = v550 - *v63;
            if (v65 >= 0)
              v67 = v65;
            else
              v67 = -v65;
            v68 = v550 - v66;
            v69 = v550 - v66 - v67;
            if (v69 < 0)
            {
              v70 = v67 - v550;
              v71 = v550 - v67;
              if (v64 >= 0)
                v64 = v71;
              else
                v64 = v70;
              v72 = v66 - v550;
              if (v65 >= 0)
                v65 = v68;
              else
                v65 = v72;
            }
            v73 = (_DWORD *)(v5 + 4 * HIDWORD(v586) * v8);
            v74 = *v73 - v550;
            v75 = v73[1] - v550;
            if (v74 >= 0)
              v76 = *v73 - v550;
            else
              v76 = v550 - *v73;
            if (v75 >= 0)
              v77 = v75;
            else
              v77 = -v75;
            v78 = v550 - v76;
            v532 = v550 - v76 - v77;
            if (v532 < 0)
            {
              v79 = v77 - v550;
              v80 = v550 - v77;
              if (v74 >= 0)
                v74 = v80;
              else
                v74 = v79;
              v81 = v76 - v550;
              if (v75 >= 0)
                v75 = v78;
              else
                v75 = v81;
            }
            v82 = (_DWORD *)(v5 + 4 * v29 * v8);
            v83 = *v82 - v550;
            v84 = v82[1] - v550;
            if (v83 >= 0)
              v85 = *v82 - v550;
            else
              v85 = v550 - *v82;
            if (v84 >= 0)
              v86 = v84;
            else
              v86 = -v84;
            v87 = v550 - v85;
            v88 = v550 - v85 - v86;
            if (v88 < 0)
            {
              v89 = v86 - v550;
              v90 = v550 - v86;
              if (v83 >= 0)
                v83 = v90;
              else
                v83 = v89;
              v91 = v85 - v550;
              if (v84 >= 0)
                v84 = v87;
              else
                v84 = v91;
            }
            v92 = v28 * (uint64_t)v40 + v26 * (uint64_t)v35 + v27 * (uint64_t)v36;
            v93 = v92 < 0;
            if (v92 >= 0)
              v94 = v26;
            else
              v94 = -v26;
            if (v92 >= 0)
              v95 = v27;
            else
              v95 = -v27;
            if (v93)
              v96 = -v28;
            else
              v96 = v28;
            v585 = v94;
            v584 = v95;
            v97 = v45 + v35 - v55;
            v98 = v46 + v36 - v56;
            v583 = v97;
            v582 = v98;
            v99 = v74 + v64 - v83;
            v100 = v75 + v65 - v84;
            v581 = v99;
            v580 = v100;
            v101 = __OFADD__(v64, v35);
            v102 = v64 + v35;
            v103 = v65 + v36;
            v104 = v69 + v40;
            if (v102 < 0 != v101)
              ++v102;
            v105 = 1431655766 * ((v102 >> 1) + 2 * (v74 + v45) - (v55 + v83));
            v106 = HIDWORD(v105) + (v105 >> 63);
            v107 = 1431655766 * (v103 / 2 + 2 * (v75 + v46) - (v56 + v84));
            v108 = HIDWORD(v107) + (v107 >> 63);
            v579 = v106;
            v578 = v108;
            if (v104 >= 0)
              v109 = v69 + v40;
            else
              v109 = v104 + 1;
            v577 = v23;
            v576 = v24;
            v575 = v23;
            v574 = v24;
            v573 = v23;
            v572 = v24;
            v571 = v23;
            v570 = v24;
            if (v26 >= 0)
              v110 = v26;
            else
              v110 = -v26;
            if (v27 >= 0)
              v111 = v27;
            else
              v111 = -v27;
            if (v28 >= 0)
              v112 = v28;
            else
              v112 = -v28;
            if (v110 >= v111 && v110 >= v112)
            {
              v113 = &v585;
              v114 = &v577;
              v115 = v23;
              v116 = v552;
              v117 = v50;
              goto LABEL_398;
            }
            v116 = v552;
            v117 = v50;
            if (v111 >= v112)
            {
              v113 = &v584;
              v114 = &v576;
              v115 = v24;
              v94 = v95;
LABEL_398:
              *v114 = v116;
              *v113 = v96;
              v265 = v577;
              v96 = v94;
            }
            else
            {
              v265 = v23;
              v115 = v552;
            }
            if (v96 >= 0)
              v284 = v115;
            else
              v284 = -v115;
            if (v96 >= 0)
              v285 = v96;
            else
              v285 = -v96;
            v286 = v576;
            if (v284 < 0)
            {
              if (v576 >= 0)
                v288 = v576;
              else
                v288 = -v576;
              v289 = v288 - v550;
              v290 = v550 - v288;
              if (v265 >= 0)
                v287 = v290;
              else
                v287 = v289;
              if (v265 < 0)
                v265 = -v265;
              v8 = v549;
              if (v576 < 0)
                v286 = v265 - v550;
              else
                v286 = v550 - v265;
            }
            else
            {
              v287 = v265;
              v8 = v549;
            }
            v308 = v117 + v40 - v537;
            v577 = v287;
            v576 = v286;
            if (v97 >= 0)
              v309 = v97;
            else
              v309 = -v97;
            if (v98 >= 0)
              v310 = v98;
            else
              v310 = -v98;
            if (v308 >= 0)
              v311 = v117 + v40 - v537;
            else
              v311 = v537 - (v117 + v40);
            if (v309 >= v310 && v309 >= v311)
            {
              v312 = &v583;
              v313 = &v575;
              v311 = v309;
              v314 = v23;
              goto LABEL_478;
            }
            if (v310 >= v311)
            {
              v312 = &v582;
              v313 = &v574;
              v311 = v310;
              v314 = v24;
              v97 = v98;
LABEL_478:
              *v313 = v116;
              *v312 = v308;
              v315 = v575;
              v308 = v97;
            }
            else
            {
              v315 = v23;
              v314 = v116;
            }
            if (v308 >= 0)
              v316 = v314;
            else
              v316 = -v314;
            v317 = v574;
            if (v316 < 0)
            {
              if (v574 >= 0)
                v319 = v574;
              else
                v319 = -v574;
              v320 = v319 - v550;
              v321 = v550 - v319;
              if (v315 >= 0)
                v318 = v321;
              else
                v318 = v320;
              if (v315 >= 0)
                v322 = v315;
              else
                v322 = -v315;
              if (v574 < 0)
                v317 = v322 - v550;
              else
                v317 = v550 - v322;
            }
            else
            {
              v318 = v315;
            }
            v323 = v532 + v69 - v88;
            v575 = v318;
            v574 = v317;
            if (v99 >= 0)
              v324 = v99;
            else
              v324 = -v99;
            if (v100 >= 0)
              v325 = v100;
            else
              v325 = -v100;
            if (v323 >= 0)
              v326 = v532 + v69 - v88;
            else
              v326 = v88 - (v532 + v69);
            if (v324 >= v325 && v324 >= v326)
            {
              v327 = &v581;
              v328 = &v573;
              v554 = v324;
              v329 = v23;
              goto LABEL_511;
            }
            if (v325 >= v326)
            {
              v327 = &v580;
              v328 = &v572;
              v554 = v325;
              v329 = v24;
              v99 = v100;
LABEL_511:
              *v328 = v116;
              *v327 = v323;
              v330 = v573;
              v323 = v99;
            }
            else
            {
              v554 = v326;
              v330 = v23;
              v329 = v116;
            }
            if (v323 >= 0)
              v331 = v329;
            else
              v331 = -v329;
            v332 = v572;
            if (v331 < 0)
            {
              if (v572 >= 0)
                v334 = v572;
              else
                v334 = -v572;
              v335 = v334 - v550;
              v336 = v550 - v334;
              if (v330 >= 0)
                v333 = v336;
              else
                v333 = v335;
              if (v330 >= 0)
                v337 = v330;
              else
                v337 = -v330;
              if (v572 < 0)
                v332 = v337 - v550;
              else
                v332 = v550 - v337;
            }
            else
            {
              v333 = v330;
            }
            v338 = 1431655766 * ((v109 >> 1) + 2 * (v532 + v117) - (v537 + v88));
            v339 = HIDWORD(v338) + (v338 >> 63);
            v573 = v333;
            v572 = v332;
            if (v106 >= 0)
              v340 = v106;
            else
              v340 = -v106;
            if (v108 >= 0)
              v341 = v108;
            else
              v341 = -v108;
            if (v339 >= 0)
              v342 = v339;
            else
              v342 = -v339;
            if (v340 >= v341 && v340 >= v342)
            {
              v343 = &v579;
              v344 = &v571;
              v342 = v340;
              goto LABEL_543;
            }
            if (v341 >= v342)
            {
              v343 = &v578;
              v344 = &v570;
              v342 = v341;
              v23 = v24;
              v106 = v108;
LABEL_543:
              *v344 = v116;
              *v343 = v339;
              v116 = v23;
              v23 = v571;
              v339 = v106;
            }
            if (v339 >= 0)
              v345 = v116;
            else
              v345 = -v116;
            v346 = v570;
            if (v345 < 0)
            {
              if (v570 >= 0)
                v348 = v570;
              else
                v348 = -v570;
              v349 = v348 - v550;
              v350 = v550 - v348;
              if (v23 >= 0)
                v347 = v350;
              else
                v347 = v349;
              if (v23 >= 0)
                v351 = v23;
              else
                v351 = -v23;
              if (v570 < 0)
                v346 = v351 - v550;
              else
                v346 = v550 - v351;
            }
            else
            {
              v347 = v23;
            }
            v238 = (_BYTE *)(a2 + 8);
            v571 = v347;
            v570 = v346;
            v352 = v585;
            v353 = v287 - v585;
            v354 = v584;
            v567 = v287 - v585;
            v568 = v286 - v584;
            v569 = v284 - v285;
            v355 = v583;
            v356 = v318 - v583;
            v539 = v582;
            v564 = v318 - v583;
            v565 = v317 - v582;
            v566 = v316 - v311;
            v483 = v581;
            v357 = v333 - v581;
            v481 = v580;
            v561 = v333 - v581;
            v562 = v332 - v580;
            v563 = v331 - v554;
            v479 = v579;
            v358 = v347 - v579;
            v477 = v578;
            v558 = v347 - v579;
            v559 = v346 - v578;
            v560 = v345 - v342;
            v529 = v311;
            v487 = v346;
            v489 = v345;
            v485 = v347;
            if (*(_BYTE *)(a2 + 24))
            {
              v502 = v584;
              v504 = v585;
              v506 = v342;
              v508 = v333;
              v510 = v332;
              v512 = v331;
              v513 = v318;
              v515 = v317;
              v517 = v316;
              v519 = v287;
              v521 = v285;
              v525 = v286;
              v534 = v284;
              v497 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v598 + 2048) >> 10) & 0x7CLL));
              v499 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v597 + 2048) >> 10) & 0x7CLL));
              v495 = sub_20C70767C(&v567, v8, *v546, (unsigned __int16 **)v607);
              v491 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v599 + 2048) >> 10) & 0x7CLL));
              v493 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v597) >> 10) & 0x3FFFFFFFFFFFFCLL));
              v359 = sub_20C70767C(&v564, v8, *v546, (unsigned __int16 **)v607);
              v360 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v597 + 2048) >> 10) & 0x7CLL));
              v361 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v598) >> 10) & 0x3FFFFFFFFFFFFCLL));
              v362 = sub_20C70767C(&v561, v8, *v546, (unsigned __int16 **)v607);
              v363 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v597) >> 10) & 0x3FFFFFFFFFFFFCLL));
              v364 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v599) >> 10) & 0x3FFFFFFFFFFFFCLL));
              v365 = sub_20C70767C(&v558, v8, *v546, (unsigned __int16 **)v607);
              v366 = v497 + v499 + v495;
              v367 = v491 + v493 + v359;
              v368 = v361 + v360 + v362;
              v369 = v364 + v363 + v365;
              v5 = v542;
              v2 = v543;
              v10 = v551;
              v238 = (_BYTE *)(a2 + 8);
              v284 = v534;
              v286 = v525;
              v287 = v519;
              v285 = v521;
              v317 = v515;
              v316 = v517;
              v331 = v512;
              v318 = v513;
              v333 = v508;
              v332 = v510;
              v352 = v504;
              v342 = v506;
              v354 = v502;
            }
            else
            {
              if (v8 < 1)
              {
                v366 = 0;
                v367 = 0;
                v368 = 0;
                v369 = 0;
              }
              else
              {
                if (v353 < 0)
                  v353 = v585 - v287;
                v366 = -(v8 * __clz(v353 + 1));
                if (v356 < 0)
                  v356 = v583 - v318;
                v367 = -(v8 * __clz(v356 + 1));
                if (v357 < 0)
                  v357 = v581 - v333;
                v368 = -(v8 * __clz(v357 + 1));
                if (v358 < 0)
                  v358 = v579 - v347;
                v369 = -(v8 * __clz(v358 + 1));
              }
              v5 = v542;
              v2 = v543;
              v10 = v551;
            }
            if (v366 > v367 || v366 > v368 || v366 > v369)
            {
              if (v367 > v368 || v367 > v369)
              {
                if (v368 <= v369)
                {
                  v371 = 0;
                  v590 = __PAIR64__(v481, v483);
                  v370 = 1;
                  v591 = v554;
                  v286 = v332;
                  v284 = v331;
                  v372 = 1;
                  v592 = v333;
                }
                else
                {
                  v590 = __PAIR64__(v477, v479);
                  v370 = 1;
                  v286 = v487;
                  v284 = v489;
                  v591 = v342;
                  v371 = 1;
                  v372 = 2;
                  v592 = v485;
                }
              }
              else
              {
                v370 = 0;
                v590 = __PAIR64__(v539, v355);
                v373 = v318;
                v371 = 1;
                v591 = v529;
                v286 = v317;
                v284 = v316;
                v372 = 2;
                v592 = v373;
              }
            }
            else
            {
              v370 = 0;
              v371 = 0;
              v590 = __PAIR64__(v354, v352);
              v591 = v285;
              v372 = 1;
              v592 = v287;
            }
            v593 = v286;
            v594 = v284;
            sub_20C6E8A80(v544, v371, &v597);
            sub_20C6E8A80(v544, v370, &v597 + v372);
            v307 = 2;
LABEL_709:
            v9 = v550;
            goto LABEL_757;
          }
        }
        if (v31 != -1)
        {
          if (!v557
            || (v118 = v2[404], *(_BYTE *)(v118 + (int)v588))
            && *(_BYTE *)(v118 + SHIDWORD(v588))
            && *(_BYTE *)(v118 + v31))
          {
            v119 = (_DWORD *)(v5 + 4 * (int)v588 * v8);
            v120 = v119[1];
            v121 = *v119 - v550;
            v122 = v120 - v550;
            if (v121 >= 0)
              v123 = v121;
            else
              v123 = -v121;
            if (v122 >= 0)
              v124 = v120 - v550;
            else
              v124 = v550 - v120;
            v125 = v550 - v123;
            v126 = v550 - v123 - v124;
            if (v126 < 0)
            {
              v127 = v124 - v550;
              v128 = v550 - v124;
              if (v121 >= 0)
                v121 = v128;
              else
                v121 = v127;
              v129 = v123 - v550;
              if (v122 >= 0)
                v122 = v125;
              else
                v122 = v129;
            }
            v130 = (_DWORD *)(v5 + 4 * HIDWORD(v588) * v8);
            v131 = *v130 - v550;
            v132 = v130[1] - v550;
            if (v131 >= 0)
              v133 = *v130 - v550;
            else
              v133 = v550 - *v130;
            if (v132 >= 0)
              v134 = v132;
            else
              v134 = -v132;
            v135 = v550 - v133;
            v136 = v550 - v133 - v134;
            if (v136 < 0)
            {
              v137 = v134 - v550;
              v138 = v550 - v134;
              if (v131 >= 0)
                v131 = v138;
              else
                v131 = v137;
              v139 = v133 - v550;
              if (v132 >= 0)
                v132 = v135;
              else
                v132 = v139;
            }
            v140 = (_DWORD *)(v5 + 4 * v31 * v8);
            v141 = *v140 - v550;
            v142 = v140[1] - v550;
            if (v141 >= 0)
              v143 = *v140 - v550;
            else
              v143 = v550 - *v140;
            if (v142 >= 0)
              v144 = v140[1] - v550;
            else
              v144 = v550 - v140[1];
            v145 = v550 - v143;
            v146 = v550 - v143 - v144;
            if (v146 < 0)
            {
              v147 = v144 - v550;
              v148 = v550 - v144;
              if (v141 >= 0)
                v141 = v148;
              else
                v141 = v147;
              v149 = v143 - v550;
              if (v142 >= 0)
                v142 = v145;
              else
                v142 = v149;
            }
            v150 = v28 * (uint64_t)v126 + v26 * (uint64_t)v121 + v27 * (uint64_t)v122;
            if (v150 >= 0)
              v151 = v26;
            else
              v151 = -v26;
            if (v150 >= 0)
              v152 = v27;
            else
              v152 = -v27;
            if (v150 >= 0)
              v153 = v28;
            else
              v153 = -v28;
            v585 = v151;
            v584 = v152;
            v154 = v131 + v121;
            v155 = v132 + v122;
            v156 = v136 + v126;
            v157 = v154 - v141;
            v158 = v132 + v122 - v142;
            v583 = v154 - v141;
            v582 = v158;
            v159 = v154 + 1;
            v160 = v155 + 1;
            v161 = v156 + 1;
            if (v154 + 1 >= 0)
              v162 = v154 + 1;
            else
              v162 = v154 + 2;
            v163 = v162 >> 1;
            v164 = v155 + 2;
            if (v160 >= 0)
              v164 = v155 + 1;
            v165 = v164 >> 1;
            v581 = v163;
            v580 = v164 >> 1;
            v166 = (v159 + v141) / 3;
            v167 = (v160 + v142) / 3;
            v579 = v166;
            v578 = v167;
            if (v161 >= 0)
              v168 = v156 + 1;
            else
              v168 = v156 + 2;
            v577 = v23;
            v576 = v24;
            v575 = v23;
            v574 = v24;
            v573 = v23;
            v572 = v24;
            v571 = v23;
            v570 = v24;
            if (v26 >= 0)
              v169 = v26;
            else
              v169 = -v26;
            if (v27 >= 0)
              v170 = v27;
            else
              v170 = -v27;
            if (v28 >= 0)
              v171 = v28;
            else
              v171 = -v28;
            if (v169 >= v170 && v169 >= v171)
            {
              v172 = &v585;
              v173 = &v577;
              v174 = v23;
              v175 = v552;
              goto LABEL_418;
            }
            v175 = v552;
            if (v170 >= v171)
            {
              v172 = &v584;
              v173 = &v576;
              v174 = v24;
              v151 = v152;
LABEL_418:
              *v173 = v175;
              *v172 = v153;
              v268 = v577;
              v153 = v151;
            }
            else
            {
              v268 = v23;
              v174 = v552;
            }
            if (v153 >= 0)
              v291 = v174;
            else
              v291 = -v174;
            if (v153 >= 0)
              v292 = v153;
            else
              v292 = -v153;
            v293 = v576;
            if (v291 < 0)
            {
              if (v576 >= 0)
                v295 = v576;
              else
                v295 = -v576;
              v296 = v295 - v550;
              v297 = v550 - v295;
              if (v268 >= 0)
                v294 = v297;
              else
                v294 = v296;
              if (v268 >= 0)
                v298 = v268;
              else
                v298 = -v268;
              if (v576 < 0)
                v293 = v298 - v550;
              else
                v293 = v550 - v298;
            }
            else
            {
              v294 = v268;
            }
            v374 = v156 - v146;
            v577 = v294;
            v576 = v293;
            if (v157 >= 0)
              v375 = v157;
            else
              v375 = -v157;
            if (v158 >= 0)
              v376 = v158;
            else
              v376 = -v158;
            if (v374 >= 0)
              v377 = v374;
            else
              v377 = -v374;
            if (v375 >= v376 && v375 >= v377)
            {
              v378 = &v583;
              v379 = &v575;
              v377 = v375;
              v380 = v23;
              goto LABEL_600;
            }
            if (v376 >= v377)
            {
              v378 = &v582;
              v379 = &v574;
              v377 = v376;
              v380 = v24;
              v157 = v158;
LABEL_600:
              *v379 = v175;
              *v378 = v374;
              v381 = v575;
              v374 = v157;
            }
            else
            {
              v381 = v23;
              v380 = v175;
            }
            if (v374 >= 0)
              v382 = v380;
            else
              v382 = -v380;
            v383 = v574;
            if (v382 < 0)
            {
              if (v574 >= 0)
                v385 = v574;
              else
                v385 = -v574;
              v386 = v385 - v550;
              v387 = v550 - v385;
              if (v381 >= 0)
                v384 = v387;
              else
                v384 = v386;
              if (v381 >= 0)
                v388 = v381;
              else
                v388 = -v381;
              if (v574 < 0)
                v383 = v388 - v550;
              else
                v383 = v550 - v388;
            }
            else
            {
              v384 = v381;
            }
            v389 = v168 >> 1;
            v575 = v384;
            v574 = v383;
            if (v163 >= 0)
              v390 = v163;
            else
              v390 = -v163;
            if (v165 >= 0)
              v391 = v165;
            else
              v391 = -v165;
            if (v389 >= 0)
              v392 = v389;
            else
              v392 = -v389;
            if (v390 >= v391 && v390 >= v392)
            {
              v393 = &v581;
              v394 = &v573;
              v392 = v390;
              v395 = v23;
              goto LABEL_633;
            }
            if (v391 >= v392)
            {
              v393 = &v580;
              v394 = &v572;
              v392 = v391;
              v395 = v24;
              v163 = v165;
LABEL_633:
              *v394 = v175;
              *v393 = v389;
              v396 = v573;
              v389 = v163;
            }
            else
            {
              v396 = v23;
              v395 = v175;
            }
            if (v389 < 0)
              v395 = -v395;
            v397 = v572;
            if (v395 < 0)
            {
              if (v572 >= 0)
                v399 = v572;
              else
                v399 = -v572;
              v400 = v399 - v550;
              v401 = v550 - v399;
              if (v396 >= 0)
                v398 = v401;
              else
                v398 = v400;
              if (v396 >= 0)
                v402 = v396;
              else
                v402 = -v396;
              if (v572 < 0)
                v397 = v402 - v550;
              else
                v397 = v550 - v402;
            }
            else
            {
              v398 = v396;
            }
            v403 = (v161 + v146) / 3;
            v573 = v398;
            v572 = v397;
            if (v166 >= 0)
              v404 = v166;
            else
              v404 = -v166;
            if (v167 >= 0)
              v405 = v167;
            else
              v405 = -v167;
            if (v403 >= 0)
              v406 = v403;
            else
              v406 = -v403;
            if (v404 >= v405 && v404 >= v406)
            {
              v407 = &v579;
              v408 = &v571;
              v406 = v404;
              goto LABEL_664;
            }
            if (v405 >= v406)
            {
              v407 = &v578;
              v408 = &v570;
              v406 = v405;
              v23 = v24;
              v166 = v167;
LABEL_664:
              *v408 = v175;
              *v407 = v403;
              v175 = v23;
              v23 = v571;
              v403 = v166;
            }
            if (v403 >= 0)
              v409 = v175;
            else
              v409 = -v175;
            v410 = v570;
            if (v409 < 0)
            {
              if (v570 >= 0)
                v412 = v570;
              else
                v412 = -v570;
              v413 = v412 - v550;
              v414 = v550 - v412;
              if (v23 >= 0)
                v411 = v414;
              else
                v411 = v413;
              if (v23 >= 0)
                v415 = v23;
              else
                v415 = -v23;
              if (v570 < 0)
                v410 = v415 - v550;
              else
                v410 = v550 - v415;
            }
            else
            {
              v411 = v23;
            }
            v238 = (_BYTE *)(a2 + 8);
            v571 = v411;
            v570 = v410;
            v416 = v585;
            v417 = v294 - v585;
            v418 = v584;
            v567 = v294 - v585;
            v568 = v293 - v584;
            v569 = v291 - v292;
            v535 = v583;
            v419 = v384 - v583;
            v530 = v582;
            v564 = v384 - v583;
            v565 = v383 - v582;
            v566 = v382 - v377;
            v484 = v581;
            v420 = v398 - v581;
            v482 = v580;
            v561 = v398 - v581;
            v562 = v397 - v580;
            v563 = v395 - v392;
            v480 = v579;
            v421 = v411 - v579;
            v478 = v578;
            v558 = v411 - v579;
            v559 = v410 - v578;
            v560 = v409 - v406;
            v555 = v294;
            v540 = v377;
            v488 = v410;
            v490 = v409;
            v486 = v411;
            if (*(_BYTE *)(a2 + 24))
            {
              v501 = v584;
              v503 = v585;
              v505 = v406;
              v507 = v398;
              v509 = v397;
              v511 = v395;
              v514 = v384;
              v516 = v383;
              v518 = v382;
              v522 = v293;
              v526 = v291;
              v498 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v601 + 2048) >> 10) & 0x7CLL));
              v500 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((__b + 2048) >> 10) & 0x7CLL));
              v496 = sub_20C70767C(&v567, v8, *v546, (unsigned __int16 **)&v606[7] + 1);
              v492 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v602 + 2048) >> 10) & 0x7CLL));
              v494 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)__b) >> 10) & 0x3FFFFFFFFFFFFCLL));
              v422 = sub_20C70767C(&v564, v8, *v546, (unsigned __int16 **)&v606[7] + 1);
              v423 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((__b + 2048) >> 10) & 0x7CLL));
              v424 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v601) >> 10) & 0x3FFFFFFFFFFFFCLL));
              v425 = sub_20C70767C(&v561, v8, *v546, (unsigned __int16 **)&v606[7] + 1);
              v426 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)__b) >> 10) & 0x3FFFFFFFFFFFFCLL));
              v427 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v602) >> 10) & 0x3FFFFFFFFFFFFCLL));
              v428 = sub_20C70767C(&v558, v8, *v546, (unsigned __int16 **)&v606[7] + 1);
              v429 = v498 + v500 + v496;
              v430 = v492 + v494 + v422;
              v431 = v424 + v423 + v425;
              v432 = v427 + v426 + v428;
              v5 = v542;
              v2 = v543;
              v10 = v551;
              v238 = (_BYTE *)(a2 + 8);
              v291 = v526;
              v293 = v522;
              v383 = v516;
              v382 = v518;
              v384 = v514;
              v397 = v509;
              v395 = v511;
              v406 = v505;
              v398 = v507;
              v418 = v501;
              v416 = v503;
            }
            else
            {
              if (v8 < 1)
              {
                v429 = 0;
                v430 = 0;
                v431 = 0;
                v432 = 0;
              }
              else
              {
                if (v417 < 0)
                  v417 = v585 - v294;
                v429 = -(v8 * __clz(v417 + 1));
                if (v419 < 0)
                  v419 = v583 - v384;
                v430 = -(v8 * __clz(v419 + 1));
                if (v420 < 0)
                  v420 = v581 - v398;
                v431 = -(v8 * __clz(v420 + 1));
                if (v421 < 0)
                  v421 = v579 - v411;
                v432 = -(v8 * __clz(v421 + 1));
              }
              v5 = v542;
              v2 = v543;
              v10 = v551;
            }
            if (v429 <= v430 && v429 <= v431 && v429 <= v432)
            {
              v433 = 0;
              v434 = 0;
              v590 = __PAIR64__(v418, v416);
              v591 = v292;
              v435 = 1;
              v436 = v555;
              goto LABEL_705;
            }
            if (v430 > v431 || v430 > v432)
            {
              if (v431 <= v432)
              {
                v434 = 0;
                v590 = __PAIR64__(v482, v484);
                v438 = v392;
                v433 = 1;
                v591 = v438;
                v293 = v397;
                v291 = v395;
                v435 = 1;
                v592 = v398;
              }
              else
              {
                v590 = __PAIR64__(v478, v480);
                v433 = 1;
                v293 = v488;
                v291 = v490;
                v591 = v406;
                v434 = 1;
                v435 = 2;
                v436 = v486;
LABEL_705:
                v592 = v436;
              }
            }
            else
            {
              v433 = 0;
              v590 = __PAIR64__(v530, v535);
              v437 = v384;
              v434 = 1;
              v591 = v540;
              v293 = v383;
              v291 = v382;
              v435 = 2;
              v592 = v437;
            }
            v593 = v293;
            v594 = v291;
            sub_20C6E8A80(v544, v434, &__b);
            sub_20C6E8A80(v544, v433, &__b + v435);
            v307 = 1;
            goto LABEL_709;
          }
        }
        if (HIDWORD(v588) != -1)
        {
          if (!v557 || (v176 = v2[404], *(_BYTE *)(v176 + (int)v588)) && *(_BYTE *)(v176 + SHIDWORD(v588)))
          {
            v177 = (_DWORD *)(v5 + 4 * (int)v588 * v8);
            v178 = *v177 - v550;
            v179 = v177[1] - v550;
            if (v178 >= 0)
              v180 = v178;
            else
              v180 = -v178;
            if (v179 >= 0)
              v181 = v179;
            else
              v181 = -v179;
            v182 = v550 - v180;
            v183 = v550 - v180 - v181;
            if (v183 < 0)
            {
              v184 = v181 - v550;
              v185 = v550 - v181;
              if (v178 >= 0)
                v178 = v185;
              else
                v178 = v184;
              v186 = v180 - v550;
              if (v179 >= 0)
                v179 = v182;
              else
                v179 = v186;
            }
            v187 = (_DWORD *)(v5 + 4 * HIDWORD(v588) * v8);
            v188 = *v187 - v550;
            v189 = v187[1] - v550;
            if (v188 >= 0)
              v190 = v188;
            else
              v190 = -v188;
            if (v189 >= 0)
              v191 = v189;
            else
              v191 = -v189;
            v192 = v550 - v190;
            v193 = v550 - v190 - v191;
            if (v193 < 0)
            {
              v194 = v191 - v550;
              v195 = v550 - v191;
              if (v188 >= 0)
                v188 = v195;
              else
                v188 = v194;
              v196 = v190 - v550;
              if (v189 >= 0)
                v189 = v192;
              else
                v189 = v196;
            }
            v197 = v28 * (uint64_t)v183 + v26 * (uint64_t)v178 + v27 * (uint64_t)v179;
            if (v197 >= 0)
              v198 = v26;
            else
              v198 = -v26;
            if (v197 >= 0)
              v199 = v27;
            else
              v199 = -v27;
            if (v197 >= 0)
              v200 = v28;
            else
              v200 = -v28;
            v561 = v198;
            v558 = v199;
            v201 = v178 + v188;
            v202 = v179 + v189;
            v203 = v183 + v193;
            v204 = v201 + 2;
            if (v201 + 1 >= 0)
              v204 = v201 + 1;
            v205 = v204 >> 1;
            if (v202 + 1 >= 0)
              v206 = v202 + 1;
            else
              v206 = v202 + 2;
            v207 = v206 >> 1;
            v208 = v203 + 2;
            if (v203 + 1 >= 0)
              v208 = v203 + 1;
            v585 = v205;
            v584 = v207;
            v583 = v23;
            v582 = v24;
            v581 = v23;
            v580 = v24;
            if (v26 >= 0)
              v209 = v26;
            else
              v209 = -v26;
            if (v27 >= 0)
              v210 = v27;
            else
              v210 = -v27;
            if (v28 >= 0)
              v211 = v28;
            else
              v211 = -v28;
            if (v209 >= v210 && v209 >= v211)
            {
              v212 = &v561;
              v213 = &v583;
              v214 = v23;
              v215 = v552;
              goto LABEL_439;
            }
            v215 = v552;
            if (v210 >= v211)
            {
              v212 = &v558;
              v213 = &v582;
              v214 = v24;
              v198 = v199;
LABEL_439:
              *v213 = v215;
              *v212 = v200;
              v269 = v583;
              v200 = v198;
            }
            else
            {
              v269 = v23;
              v214 = v552;
            }
            if (v200 >= 0)
              v299 = v200;
            else
              v299 = -v200;
            if (v200 >= 0)
              v300 = v214;
            else
              v300 = -v214;
            v301 = v582;
            if (v300 < 0)
            {
              if (v582 >= 0)
                v303 = v582;
              else
                v303 = -v582;
              v304 = v303 - v550;
              v305 = v550 - v303;
              if (v269 >= 0)
                v302 = v305;
              else
                v302 = v304;
              if (v269 >= 0)
                v306 = v269;
              else
                v306 = -v269;
              if (v582 < 0)
                v301 = v306 - v550;
              else
                v301 = v550 - v306;
            }
            else
            {
              v302 = v269;
            }
            v439 = v208 >> 1;
            if (v205 >= 0)
              v440 = v205;
            else
              v440 = -v205;
            if (v207 >= 0)
              v441 = v207;
            else
              v441 = -v207;
            if (v439 >= 0)
              v442 = v439;
            else
              v442 = -v439;
            if (v440 >= v441 && v440 >= v442)
            {
              v443 = &v585;
              v444 = &v581;
              v442 = v440;
              goto LABEL_726;
            }
            if (v441 >= v442)
            {
              v443 = &v584;
              v444 = &v580;
              v442 = v441;
              v23 = v24;
              v205 = v207;
LABEL_726:
              *v444 = v215;
              *v443 = v439;
              v215 = v23;
              v23 = v581;
              v439 = v205;
            }
            if (v439 >= 0)
              v445 = v215;
            else
              v445 = -v215;
            v446 = v580;
            if (v445 < 0)
            {
              if (v580 >= 0)
                v448 = v580;
              else
                v448 = -v580;
              v449 = v448 - v550;
              v450 = v550 - v448;
              if (v23 >= 0)
                v447 = v450;
              else
                v447 = v449;
              if (v23 >= 0)
                v451 = v23;
              else
                v451 = -v23;
              if (v580 < 0)
                v446 = v451 - v550;
              else
                v446 = v550 - v451;
            }
            else
            {
              v447 = v23;
            }
            v452 = v561;
            v453 = v302 - v561;
            v454 = v558;
            v567 = v302 - v561;
            v568 = v301 - v558;
            v569 = v300 - v299;
            v455 = v585;
            v456 = v447 - v585;
            v457 = v584;
            v564 = v447 - v585;
            v565 = v446 - v584;
            v566 = v445 - v442;
            if (*(_BYTE *)(a2 + 24))
            {
              v520 = v584;
              v523 = v585;
              v527 = v447;
              v531 = v558;
              v536 = v561;
              v541 = v446;
              v556 = v445;
              v458 = v442;
              v459 = v301;
              v460 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v596 + 2048) >> 10) & 0x7CLL));
              v461 = v8;
              v462 = sub_20C70767C(&v567, v8, *v546, (unsigned __int16 **)v606);
              v463 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v596) >> 10) & 0x3FFFFFFFFFFFFCLL));
              v464 = sub_20C70767C(&v564, v461, *v546, (unsigned __int16 **)v606);
              v465 = v462 + v460;
              v466 = v464 + v463;
              v8 = v461;
              v5 = v542;
              v2 = v543;
              v9 = v550;
              v301 = v459;
              v442 = v458;
              v445 = v556;
              v452 = v536;
              v446 = v541;
              v447 = v527;
              v454 = v531;
              v457 = v520;
              v455 = v523;
              goto LABEL_752;
            }
            if (v8 < 1)
            {
              v467 = 0;
              v5 = v542;
              v2 = v543;
            }
            else
            {
              if (v453 < 0)
                v453 = v561 - v302;
              v465 = -(v8 * __clz(v453 + 1));
              if (v456 < 0)
                v456 = v585 - v447;
              v466 = -(v8 * __clz(v456 + 1));
              v5 = v542;
              v2 = v543;
LABEL_752:
              if (v465 <= v466)
              {
                v467 = 0;
              }
              else
              {
                v467 = 1;
                v452 = v455;
                v454 = v457;
                v299 = v442;
                v302 = v447;
                v301 = v446;
                v300 = v445;
              }
            }
            v590 = __PAIR64__(v454, v452);
            v591 = v299;
            v592 = v302;
            v593 = v301;
            v594 = v300;
            sub_20C6E8A80(v544, v467, &v596);
            v307 = 0;
            v10 = v551;
            v238 = (_BYTE *)(a2 + 8);
            goto LABEL_757;
          }
        }
      }
      if (!sub_20C700FBC((uint64_t)v2, v11, (uint64_t)&v588, a2))
      {
        v231 = v26 * (uint64_t)v23 + v27 * (uint64_t)v24 + v28 * (uint64_t)v552;
        v8 = v549;
        if ((v231 & 0x8000000000000000) != 0)
        {
          LODWORD(v590) = -v26;
          HIDWORD(v590) = -v27;
          v591 = -v28;
        }
        sub_20C6E8A80(v544, v231 >> 63, &v595);
        v232 = v594;
        v233 = HIDWORD(v590);
        v234 = v591;
        if ((int)v590 >= 0)
          v235 = v590;
        else
          v235 = -(int)v590;
        if (v590 >= 0)
          v236 = HIDWORD(v590);
        else
          v236 = -HIDWORD(v590);
        if (v591 >= 0)
          v237 = v591;
        else
          v237 = -v591;
        v238 = (_BYTE *)(a2 + 8);
        if (v235 >= v236 && v235 >= v237)
        {
          v239 = &v590;
          v240 = &v592;
          v233 = v590;
          v10 = v551;
          goto LABEL_313;
        }
        v239 = (int64_t *)((char *)&v590 + 4);
        v240 = &v593;
        v10 = v551;
        if (v236 >= v237)
        {
LABEL_313:
          v243 = *v240;
          *v240 = v594;
          v594 = v243;
          *(_DWORD *)v239 = v234;
          v591 = v233;
          v232 = v243;
          v234 = v233;
        }
        if (v234 < 0)
        {
          v591 = -v234;
          v232 = -v232;
          v594 = v232;
        }
        v244 = v592;
        v245 = v593;
        if (v232 < 0)
        {
          if (v593 >= 0)
            v266 = v593;
          else
            v266 = -v593;
          v267 = v266 - v9;
          v246 = v9 - v266;
          if (v592 < 0)
          {
            v246 = v267;
            v244 = -v592;
          }
          if (v593 < 0)
            v245 = v244 - v9;
          else
            v245 = v9 - v244;
        }
        else
        {
          v246 = v592;
        }
        v592 = v246;
        v593 = v245;
        goto LABEL_461;
      }
      v216 = v588;
      v217 = HIDWORD(v588);
      v218 = v589[0];
      v219 = v26 * (uint64_t)(int)v588 + v27 * (uint64_t)SHIDWORD(v588) + v28 * (uint64_t)v589[0];
      if (v219 >= 0)
        v220 = v26;
      else
        v220 = -v26;
      if (v219 >= 0)
        v221 = v27;
      else
        v221 = -v27;
      if (v219 >= 0)
        v222 = v28;
      else
        v222 = -v28;
      v564 = v220;
      v561 = v221;
      v558 = v23;
      v585 = v24;
      v584 = v23;
      v583 = v24;
      if (v26 >= 0)
        v223 = v26;
      else
        v223 = -v26;
      if (v27 >= 0)
        v224 = v27;
      else
        v224 = -v27;
      if (v28 >= 0)
        v225 = v28;
      else
        v225 = -v28;
      v226 = v223 >= v224 && v223 >= v225;
      v8 = v549;
      if (v226)
      {
        v241 = &v564;
        v242 = &v558;
        v230 = v23;
        v227 = a2;
        v228 = v552;
      }
      else
      {
        v227 = a2;
        v228 = v552;
        if (v224 < v225)
        {
          v229 = v23;
          v230 = v552;
          goto LABEL_320;
        }
        v241 = &v561;
        v242 = &v585;
        v230 = v24;
        v220 = v221;
      }
      *v242 = v228;
      *v241 = v222;
      v229 = v558;
      v222 = v220;
LABEL_320:
      if (v222 >= 0)
        v247 = v222;
      else
        v247 = -v222;
      if (v222 >= 0)
        v248 = v230;
      else
        v248 = -v230;
      v249 = v585;
      if (v248 < 0)
      {
        if (v585 >= 0)
          v250 = v585;
        else
          v250 = -v585;
        v251 = v250 - v9;
        v252 = v9 - v250;
        if (v229 >= 0)
          v253 = v229;
        else
          v253 = -v229;
        if (v229 >= 0)
          v229 = v252;
        else
          v229 = v251;
        if (v585 >= 0)
          v249 = v9 - v253;
        else
          v249 = v253 - v9;
        v228 = v552;
      }
      v558 = v229;
      v585 = v249;
      if (v216 >= 0)
        v254 = v216;
      else
        v254 = -v216;
      if (v217 >= 0)
        v255 = v217;
      else
        v255 = -v217;
      if (v218 >= 0)
        v256 = v218;
      else
        v256 = -v218;
      if (v254 < v255 || v254 < v256)
      {
        if (v255 < v256)
          goto LABEL_355;
        v258 = &v583;
        v23 = v24;
        v257 = (uint64_t *)((char *)&v588 + 4);
        v216 = v217;
      }
      else
      {
        v257 = &v588;
        v258 = &v584;
      }
      *v258 = v228;
      *(_DWORD *)v257 = v218;
      v228 = v23;
      v218 = v216;
      v589[0] = v216;
LABEL_355:
      v238 = (_BYTE *)(a2 + 8);
      if (v218 < 0)
      {
        v218 = -v218;
        v589[0] = v218;
        v228 = -v228;
      }
      v259 = v584;
      v260 = v583;
      if (v228 < 0)
      {
        if (v583 >= 0)
          v262 = v583;
        else
          v262 = -v583;
        v263 = v262 - v9;
        v264 = v9 - v262;
        if (v584 >= 0)
          v261 = v264;
        else
          v261 = v263;
        if (v584 < 0)
          v259 = -v584;
        if (v583 < 0)
          v260 = v259 - v9;
        else
          v260 = v9 - v259;
      }
      else
      {
        v261 = v584;
      }
      v270 = v564;
      v271 = v561;
      LODWORD(v586) = v229 - v564;
      HIDWORD(v586) = v249 - v561;
      v587[0] = v248 - v247;
      v567 = v261 - v588;
      v568 = v260 - HIDWORD(v588);
      v569 = v228 - v218;
      if (*(_BYTE *)(v227 + 24))
      {
        v524 = v561;
        v528 = v564;
        v533 = v261;
        v538 = v260;
        v553 = v248;
        v272 = v249;
        v273 = v229;
        v274 = v228;
        v275 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v596 + 2048) >> 10) & 0x7CLL));
        v276 = sub_20C70767C((int *)&v586, v549, *v546, (unsigned __int16 **)v606);
        v277 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v596) >> 10) & 0x3FFFFFFFFFFFFCLL));
        v278 = sub_20C70767C(&v567, v549, *v546, (unsigned __int16 **)v606);
        v279 = v276 + v275;
        v280 = v278 + v277;
        v5 = v542;
        v2 = v543;
        v228 = v274;
        v229 = v273;
        v249 = v272;
        v248 = v553;
        v261 = v533;
        v260 = v538;
        v271 = v524;
        v270 = v528;
      }
      else
      {
        v5 = v542;
        v2 = v543;
        if (v549 < 1)
          goto LABEL_395;
        if (v229 - v564 >= 0)
          v281 = v229 - v564;
        else
          v281 = v564 - v229;
        v279 = -(v549 * __clz(v281 + 1));
        if (v261 - (int)v588 >= 0)
          v282 = v261 - v588;
        else
          v282 = v588 - v261;
        v280 = -(v549 * __clz(v282 + 1));
      }
      if (v279 <= v280)
      {
LABEL_395:
        v283 = 0;
        v590 = __PAIR64__(v271, v270);
        v228 = v248;
        v591 = v247;
        goto LABEL_396;
      }
      v590 = v588;
      v591 = v589[0];
      v283 = 1;
      v229 = v261;
      v249 = v260;
LABEL_396:
      v9 = v550;
      v10 = v551;
      v592 = v229;
      v593 = v249;
      v594 = v228;
      sub_20C6E8A80(v544, v283, &v596);
LABEL_461:
      v307 = 0;
LABEL_757:
      sub_20C6FA124((uint64_t)v2, v10, (uint64_t)&v592, (uint64_t)&v590, v8, v545, v238, (_QWORD *)v606 + 15 * v307);
LABEL_758:
      ++v10;
    }
    while (v547 != v10);
  }
  v468 = 360;
  do
  {
    v469 = (char *)v606 + v468;
    v470 = *(void **)((char *)&__p + v468);
    if (v470)
    {
      *((_QWORD *)v469 - 2) = v470;
      operator delete(v470);
    }
    v471 = (void *)*((_QWORD *)v469 - 6);
    if (v471)
    {
      *(_QWORD *)((char *)&v595 + v468) = v471;
      operator delete(v471);
    }
    v472 = (char *)v606 + v468;
    v473 = *(void **)&v589[v468 / 4];
    if (v473)
    {
      *((_QWORD *)v472 - 8) = v473;
      operator delete(v473);
    }
    v474 = (void *)*((_QWORD *)v472 - 12);
    if (v474)
    {
      *(_QWORD *)&v587[v468 / 4] = v474;
      operator delete(v474);
    }
    v475 = (void *)*((_QWORD *)v469 - 15);
    if (v475)
    {
      *(_QWORD *)((char *)&v582 + v468) = v475;
      operator delete(v475);
    }
    v468 -= 120;
  }
  while (v468);
  if (__p)
  {
    v604 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_20C703090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7030E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  _BYTE *v46;
  int64_t *v47;
  int *v48;
  int *v49;
  int *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int *v65;
  int *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  _QWORD *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  unsigned __int8 *v101;
  uint64_t v102;
  int v103;
  int v104[3];
  int v105[3];
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int64_t v112;
  int v113;
  int64_t v114;
  int v115;
  int v116;
  int v117;
  int v118;
  __int16 v119;
  unsigned __int16 v120;
  void *v121[2];
  void *__p[2];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;

  v2 = a2;
  v3 = (_QWORD *)a1;
  v4 = *(unsigned int *)(a1 + 3548);
  v5 = *(unsigned int *)(a1 + 3544);
  v98 = *(_QWORD *)(a1 + 3208);
  v6 = ~(-1 << (*(_DWORD *)(a2 + 4) - 1));
  v100 = *(_DWORD *)(a2 + 16);
  v129 = 0;
  v130 = 0;
  v131 = 0;
  v102 = v4;
  sub_20C6F1AD8((_QWORD *)(a1 + 184), v3 + 29, v3 + 26, v3 + 407, v4, (uint64_t *)&v129, v6);
  v128 = 0;
  v126 = 0u;
  v127 = 0u;
  v124 = 0u;
  v125 = 0u;
  *(_OWORD *)__p = 0u;
  v123 = 0u;
  *(_OWORD *)v121 = 0u;
  sub_20C6EC678((uint64_t)v121, v5);
  v120 = 0x8000;
  v119 = 0x8000;
  if ((int)v102 >= 1)
  {
    v7 = 0;
    v96 = (uint64_t)(v3 + 445);
    v97 = v3 + 392;
    v91 = v3;
    v103 = v6;
    v101 = (unsigned __int8 *)(v2 + 8);
    do
    {
      v8 = *(int *)(v3[413] + 4 * v7);
      if (v100 && !*(_BYTE *)(v3[404] + v8))
        goto LABEL_143;
      v9 = v5;
      v10 = (_DWORD *)(v98 + 4 * (int)v8 * (int)v5);
      v11 = *v10 - v6;
      v12 = v10[1] - v6;
      if (v11 >= 0)
        v13 = v11;
      else
        v13 = -v11;
      if (v12 >= 0)
        v14 = v12;
      else
        v14 = -v12;
      v15 = v6 - v13;
      v16 = v14 - v6;
      if (v11 >= 0)
        v16 = v6 - v14;
      v17 = v13 - v6;
      if (v12 >= 0)
        v17 = v15;
      v18 = v15 - v14;
      if (v15 - v14 < 0)
        v19 = v16;
      else
        v19 = v11;
      if (v15 - v14 < 0)
        v20 = v17;
      else
        v20 = v12;
      v116 = v19;
      v117 = v20;
      v118 = v15 - v14;
      v21 = (int *)&v129[12 * (int)v8];
      v22 = *v21;
      LODWORD(v114) = *v21;
      v23 = v21[1];
      HIDWORD(v114) = v23;
      v24 = v21[2];
      v115 = v24;
      if (!sub_20C700FBC((uint64_t)v3, v8, (uint64_t)&v112, v2))
      {
        v39 = v22 * (uint64_t)v19 + v23 * (uint64_t)v20 + v24 * (uint64_t)v18;
        if ((v39 & 0x8000000000000000) != 0)
        {
          LODWORD(v114) = -v22;
          HIDWORD(v114) = -v23;
          v115 = -v24;
        }
        sub_20C6E8A80(v96, v39 >> 63, &v119);
        v40 = v118;
        v41 = HIDWORD(v114);
        v42 = v115;
        if ((int)v114 >= 0)
          v43 = v114;
        else
          v43 = -(int)v114;
        if (v114 >= 0)
          v44 = HIDWORD(v114);
        else
          v44 = -HIDWORD(v114);
        if (v115 >= 0)
          v45 = v115;
        else
          v45 = -v115;
        v5 = v9;
        v46 = v101;
        if (v43 >= v44 && v43 >= v45)
        {
          v47 = &v114;
          v48 = &v116;
          v41 = v114;
          v6 = v103;
          goto LABEL_62;
        }
        v47 = (int64_t *)((char *)&v114 + 4);
        v48 = &v117;
        v6 = v103;
        if (v44 >= v45)
        {
LABEL_62:
          v51 = *v48;
          *v48 = v118;
          v118 = v51;
          *(_DWORD *)v47 = v42;
          v115 = v41;
          v40 = v51;
          v42 = v41;
        }
        if (v42 < 0)
        {
          v115 = -v42;
          v40 = -v40;
          v118 = v40;
        }
        v53 = v116;
        v52 = v117;
        if (v40 < 0)
        {
          if (v117 >= 0)
            v73 = v117;
          else
            v73 = -v117;
          v74 = v73 - v6;
          v54 = v6 - v73;
          if (v116 < 0)
          {
            v54 = v74;
            v53 = -v116;
          }
          if (v117 < 0)
            v52 = v53 - v6;
          else
            v52 = v6 - v53;
        }
        else
        {
          v54 = v116;
        }
        v116 = v54;
        v117 = v52;
        goto LABEL_142;
      }
      v25 = v112;
      v26 = HIDWORD(v112);
      v27 = v113;
      v28 = (int)v112 * (uint64_t)v22 + SHIDWORD(v112) * (uint64_t)v23 + v113 * (uint64_t)v24;
      if (v28 >= 0)
        v29 = v22;
      else
        v29 = -v22;
      if (v28 >= 0)
        v30 = v23;
      else
        v30 = -v23;
      if (v28 >= 0)
        v31 = v24;
      else
        v31 = -v24;
      v110 = v30;
      v111 = v29;
      v108 = v20;
      v109 = v19;
      v106 = v20;
      v107 = v19;
      if (v22 >= 0)
        v32 = v22;
      else
        v32 = -v22;
      if (v23 >= 0)
        v33 = v23;
      else
        v33 = -v23;
      if (v24 >= 0)
        v34 = v24;
      else
        v34 = -v24;
      if (v32 >= v33 && v32 >= v34)
      {
        v49 = &v111;
        v50 = &v109;
        v38 = v19;
        v36 = v103;
      }
      else
      {
        v36 = v103;
        if (v33 < v34)
        {
          v37 = v19;
          v38 = v18;
          goto LABEL_69;
        }
        v49 = &v110;
        v50 = &v108;
        v38 = v20;
        v29 = v30;
      }
      *v50 = v18;
      *v49 = v31;
      v37 = v109;
      v31 = v29;
LABEL_69:
      if (v31 >= 0)
        v55 = v38;
      else
        v55 = -v38;
      if (v31 >= 0)
        v56 = v31;
      else
        v56 = -v31;
      v57 = v108;
      if (v55 < 0)
      {
        if (v108 >= 0)
          v58 = v108;
        else
          v58 = -v108;
        v59 = v58 - v36;
        v60 = v36 - v58;
        if (v37 >= 0)
          v61 = v37;
        else
          v61 = -v37;
        if (v37 >= 0)
          v37 = v60;
        else
          v37 = v59;
        if (v108 >= 0)
          v57 = v36 - v61;
        else
          v57 = v61 - v36;
        v3 = v91;
      }
      v108 = v57;
      v109 = v37;
      if (v25 >= 0)
        v62 = v25;
      else
        v62 = -v25;
      if (v26 >= 0)
        v63 = v26;
      else
        v63 = -v26;
      if (v27 >= 0)
        v64 = v27;
      else
        v64 = -v27;
      if (v62 < v63 || v62 < v64)
      {
        if (v63 < v64)
          goto LABEL_104;
        v66 = &v106;
        v19 = v20;
        v65 = (int *)&v112 + 1;
        v25 = v26;
      }
      else
      {
        v65 = (int *)&v112;
        v66 = &v107;
      }
      *v66 = v18;
      *v65 = v27;
      v18 = v19;
      v27 = v25;
      v113 = v25;
LABEL_104:
      v5 = v9;
      if (v27 < 0)
      {
        v27 = -v27;
        v113 = v27;
        v18 = -v18;
      }
      v68 = v106;
      v67 = v107;
      v99 = v7;
      if (v18 < 0)
      {
        if (v106 >= 0)
          v70 = v106;
        else
          v70 = -v106;
        v71 = v70 - v36;
        v72 = v36 - v70;
        if (v107 >= 0)
          v69 = v72;
        else
          v69 = v71;
        if (v107 < 0)
          v67 = -v107;
        if (v106 < 0)
          v68 = v67 - v36;
        else
          v68 = v36 - v67;
      }
      else
      {
        v69 = v107;
      }
      v75 = v110;
      v76 = v111;
      v105[0] = v37 - v111;
      v105[1] = v57 - v110;
      v105[2] = v55 - v56;
      v104[0] = v69 - v112;
      v104[1] = v68 - HIDWORD(v112);
      v104[2] = v18 - v27;
      if (*(_BYTE *)(v2 + 24))
      {
        v92 = v110;
        v93 = v111;
        v94 = v69;
        v95 = v68;
        v77 = v18;
        v78 = v55;
        v79 = v57;
        v80 = v2;
        v81 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v120 + 2048) >> 10) & 0x7CLL));
        v82 = sub_20C70767C(v105, v9, *v101, (unsigned __int16 **)v121);
        v83 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - v120) >> 10) & 0x7CLL));
        v84 = sub_20C70767C(v104, v5, *v101, (unsigned __int16 **)v121);
        v85 = v82 + v81;
        v86 = v84 + v83;
        v2 = v80;
        v3 = v91;
        v57 = v79;
        v55 = v78;
        v18 = v77;
        v7 = v99;
        v69 = v94;
        v68 = v95;
        v75 = v92;
        v76 = v93;
      }
      else
      {
        if ((int)v9 < 1)
          goto LABEL_138;
        if (v37 - v111 >= 0)
          v87 = v37 - v111;
        else
          v87 = v111 - v37;
        v85 = -(v9 * __clz(v87 + 1));
        if (v69 - (int)v112 >= 0)
          v88 = v69 - v112;
        else
          v88 = v112 - v69;
        v86 = -(v9 * __clz(v88 + 1));
      }
      if (v85 <= v86)
      {
LABEL_138:
        v89 = 0;
        v114 = __PAIR64__(v75, v76);
        v18 = v55;
        v115 = v56;
        goto LABEL_139;
      }
      v114 = v112;
      v115 = v113;
      v89 = 1;
      v37 = v69;
      v57 = v68;
LABEL_139:
      v6 = v103;
      v46 = v101;
      v116 = v37;
      v117 = v57;
      v118 = v18;
      sub_20C6E8A80(v96, v89, &v120);
LABEL_142:
      sub_20C6FA124((uint64_t)v3, v7, (uint64_t)&v116, (uint64_t)&v114, v5, v97, v46, v121);
LABEL_143:
      ++v7;
    }
    while (v102 != v7);
  }
  if ((_QWORD)v127)
  {
    *((_QWORD *)&v127 + 1) = v127;
    operator delete((void *)v127);
  }
  if (*((_QWORD *)&v125 + 1))
  {
    *(_QWORD *)&v126 = *((_QWORD *)&v125 + 1);
    operator delete(*((void **)&v125 + 1));
  }
  if ((_QWORD)v124)
  {
    *((_QWORD *)&v124 + 1) = v124;
    operator delete((void *)v124);
  }
  if (__p[1])
  {
    *(void **)&v123 = __p[1];
    operator delete(__p[1]);
  }
  if (v121[0])
  {
    v121[1] = v121[0];
    operator delete(v121[0]);
  }
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  return 0;
}

void sub_20C703774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,void *a51)
{
  sub_20C6EC7C0((uint64_t)&a35);
  if (a50)
  {
    a51 = a50;
    operator delete(a50);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C7037B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int *v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  int *v33;
  int *v34;
  int *v35;
  int *v36;
  int *v37;
  uint64_t v38;
  int *v39;
  int *v40;
  int *v41;
  int *v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  int *v48;
  _DWORD *v49;
  int *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  int *v58;
  int *v59;
  int v60;
  int v61;
  uint64_t v62;
  BOOL v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  _DWORD *v67;
  _DWORD *v68;
  int v69;
  char v70;
  unsigned int v71;
  int v72;
  int v73;
  signed int v74;
  int v75;
  int *v76;
  uint64_t v77;
  int *v78;
  int *v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  int *v85;
  _DWORD *v86;
  int *v87;
  _DWORD *v88;
  _DWORD *v89;
  _DWORD *v90;
  int *v91;
  _DWORD *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  signed int v103;
  signed int v104;
  signed int v105;
  signed int v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  unint64_t v117;
  int *v118;
  int v119;
  int v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  int *v124;
  _DWORD *v125;
  _DWORD *v126;
  _DWORD *v127;
  int *v128;
  _DWORD *v129;
  int *v130;
  _DWORD *v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int16 *v151;
  int v152;
  char *v153;
  uint64_t v154;
  int *v155;
  int v156;
  int v157;
  int v158;
  unint64_t v159;
  _QWORD *v160;
  void *v161;
  void *v162;
  _QWORD *v163;
  void *v164;
  void *v165;
  void *v166;
  uint64_t v168;
  int v169;
  int v170;
  int *v171;
  int v172;
  int v173;
  unsigned int v174;
  _QWORD *v175;
  _QWORD *v176;
  unsigned int v177;
  int v178;
  int v179;
  unsigned int v180;
  int v181;
  int v182;
  int v183;
  unsigned int v184;
  int v185;
  int v186;
  unsigned int v187;
  int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int *v193;
  uint64_t v194;
  uint64_t v195;
  unsigned __int8 *v196;
  int v198;
  unint64_t v199;
  int v200;
  uint64_t v201;
  int v202;
  unint64_t v203;
  unsigned int v204;
  unint64_t v205;
  unsigned int v206;
  void *__p[3];
  void *v208[3];
  void *v209[3];
  void *v210[3];
  void *v211[3];
  int *v212;
  _QWORD v213[2];
  int *v214;
  _QWORD v215[2];
  void *v216[3];
  int *v217;
  _DWORD v218[5];
  unsigned __int16 v219;
  unsigned __int16 v220;
  unsigned __int16 v221;
  unsigned __int16 v222;
  unsigned __int16 v223;
  unsigned __int16 v224;
  unsigned __int16 __b[3];
  __int16 v226;
  _QWORD v227[30];
  unsigned __int16 *v228[18];

  v2 = (_QWORD *)a1;
  v3 = 0;
  v228[15] = *(unsigned __int16 **)MEMORY[0x24BDAC8D0];
  v190 = *(unsigned int *)(a1 + 3548);
  v4 = *(int *)(a1 + 3544);
  v176 = (_QWORD *)(a1 + 3136);
  v191 = *(_QWORD *)(a1 + 3208);
  memset(v228, 0, 120);
  memset(v227, 0, sizeof(v227));
  do
  {
    sub_20C6EC678((uint64_t)&v227[v3], v4);
    v3 += 15;
  }
  while (v3 != 45);
  v226 = 0x8000;
  memset_pattern16(__b, &unk_20CAF8CE0, 6uLL);
  memset_pattern16(&v222, &unk_20CAF8CE0, 6uLL);
  memset_pattern16(&v219, &unk_20CAF8CE0, 6uLL);
  LODWORD(v216[0]) = 0;
  sub_20C6E8A00(&v217, v4, v216);
  LODWORD(v214) = 0;
  sub_20C6E8A00(v216, v4, &v214);
  LODWORD(v212) = 0;
  sub_20C6E8A00(&v214, v4, &v212);
  LODWORD(v211[0]) = 0;
  sub_20C6E8A00(&v212, v4, v211);
  LODWORD(v210[0]) = 0;
  sub_20C6E8A00(v211, v4, v210);
  LODWORD(v209[0]) = 0;
  sub_20C6E8A00(v210, v4, v209);
  LODWORD(v208[0]) = 0;
  sub_20C6E8A00(v209, v4, v208);
  LODWORD(__p[0]) = 0;
  sub_20C6E8A00(v208, v4, __p);
  v5 = *(unsigned int *)(a2 + 16);
  sub_20C6F554C(__p, v4);
  if ((int)v190 >= 1)
  {
    v6 = 0;
    v7 = (_BYTE *)(a2 + 8);
    v8 = v4;
    v168 = 4 * v4;
    v175 = v2;
    v183 = v4;
    v174 = v5;
    v196 = (unsigned __int8 *)(a2 + 8);
    v194 = (uint64_t)(v2 + 445);
    v195 = v4;
    while (1)
    {
      v9 = *(int *)(v2[413] + 4 * v6);
      if (!(_DWORD)v5 || *(_BYTE *)(v2[404] + v9))
        break;
LABEL_144:
      if (++v6 == v190)
        goto LABEL_145;
    }
    v10 = (int *)(v191 + 4 * (int)v9 * (int)v4);
    v11 = *(unsigned int *)(v2[416] + 4 * v9);
    v12 = v217;
    v192 = v6;
    v193 = v217;
    if ((v11 & 0x80000000) == 0)
    {
      v13 = v5;
      v14 = *(_DWORD *)(v2[416] + 4 * v9);
      v15 = 3 * v11;
      v16 = (unsigned int *)(v2[17] + 4 * v15);
      v17 = v16[1];
      v18 = *v16;
      LODWORD(v205) = *v16;
      HIDWORD(v205) = v17;
      v19 = v17;
      v20 = v16[2];
      v206 = v20;
      v21 = (int *)(v2[20] + 4 * v15);
      v184 = *v21;
      v187 = v21[1];
      LODWORD(v203) = *v21;
      HIDWORD(v203) = v187;
      v177 = v21[2];
      v204 = v177;
      v202 = -1;
      v201 = -1;
      v200 = -1;
      v199 = -1;
      sub_20C7004AC(v2, v14, v9, (unsigned int *)&v205, &v201);
      v180 = v14;
      sub_20C7004AC(v2, v14, v9, (unsigned int *)&v203, &v199);
      v22 = v202;
      v23 = v200;
      if ((v202 & 0x80000000) == 0 || v200 < 0)
      {
        v26 = v199;
        v25 = HIDWORD(v199);
        LODWORD(v28) = v19;
        v29 = v18;
      }
      else
      {
        v205 = v203;
        v24 = v204;
        v206 = v204;
        v203 = __PAIR64__(v19, v18);
        v204 = v20;
        v26 = v201;
        v25 = HIDWORD(v201);
        v201 = v199;
        v27 = v200;
        v202 = v200;
        v199 = __PAIR64__(v25, v26);
        v200 = v22;
        v23 = v22;
        v22 = v27;
        v177 = v20;
        v184 = v18;
        v187 = v19;
        v20 = v24;
        v28 = HIDWORD(v205);
        v29 = v205;
      }
      v5 = v13;
      if (v23 != -1)
      {
        if (!(_DWORD)v13
          || (v30 = v2[404], *(_BYTE *)(v30 + (int)v201))
          && *(_BYTE *)(v30 + SHIDWORD(v201))
          && *(_BYTE *)(v30 + v22)
          && *(_BYTE *)(v30 + (int)v26)
          && *(_BYTE *)(v30 + (int)v25)
          && *(_BYTE *)(v30 + v23))
        {
          v31 = v2;
          v32 = v25;
          LODWORD(v4) = v183;
          v33 = (int *)(v191 + 4 * HIDWORD(v201) * v183);
          v34 = (int *)(v191 + 4 * v22 * v183);
          v169 = v29;
          v170 = v28;
          v171 = (int *)(v191 + 4 * (int)v201 * v183);
          sub_20C6E916C(v171, v33, v34, v183, (int *)(v31[23] + 12 * v29), (int *)(v31[23] + 12 * (int)v28), (int *)(v31[23] + 12 * (int)v20), (int *)(v31[23] + 12 * v180), v193);
          v35 = (int *)(v191 + 4 * (int)(v26 * v183));
          v36 = (int *)(v191 + 4 * (int)(v32 * v183));
          v37 = (int *)(v191 + 4 * v23 * v183);
          sub_20C6E916C(v35, (int *)(v191 + 4 * (int)(v32 * v4)), v37, v4, (int *)(v175[23] + 12 * (int)v184), (int *)(v175[23] + 12 * (int)v187), (int *)(v175[23] + 12 * (int)v177), (int *)(v175[23] + 12 * v180), (_DWORD *)v216[0]);
          v38 = v195;
          v39 = v171;
          v2 = v175;
          if (v183 >= 1)
          {
            v40 = v217;
            v41 = (int *)v216[0];
            v42 = v214;
            do
            {
              v44 = *v40++;
              v43 = v44;
              v45 = *v41++;
              v46 = __OFADD__(v45, v43);
              v47 = v45 + v43;
              if (v47 < 0 != v46)
                ++v47;
              *v42++ = v47 >> 1;
              --v38;
            }
            while (v38);
            if (v183 == 2)
            {
              sub_20C6E9868((unint64_t)v171, v33, v34, (_DWORD *)(v175[23] + 12 * v169), (_DWORD *)(v175[23] + 12 * v170), (int *)(v175[23] + 12 * v180), v217);
              sub_20C6E9868((unint64_t)v35, v36, v37, (_DWORD *)(v175[23] + 12 * (int)v184), (_DWORD *)(v175[23] + 12 * (int)v187), (int *)(v175[23] + 12 * v180), (int *)v216[0]);
              v48 = v217;
              v49 = v216[0];
              v50 = v212;
              v51 = *(_DWORD *)v216[0] + *v217;
              if (*(_DWORD *)v216[0] + *v48 < 0 != __OFADD__(*(_DWORD *)v216[0], *v48))
                ++v51;
              *v212 = v51 >> 1;
              v52 = v48[1];
              v53 = v49[1];
              v46 = __OFADD__(v53, v52);
              v54 = v53 + v52;
              if (v54 < 0 != v46)
                ++v54;
              v50[1] = v54 >> 1;
              v55 = v195;
              v39 = v171;
            }
            else
            {
              v117 = 0;
              v118 = v212;
              v55 = v195;
              do
              {
                v119 = v171[v117 / 4];
                v120 = v35[v117 / 4];
                v46 = __OFADD__(v120, v119);
                v121 = v120 + v119;
                if (v121 < 0 != v46)
                  ++v121;
                v122 = 1431655766
                     * ((v121 >> 1) - (v34[v117 / 4] + v37[v117 / 4]) + 2 * (v36[v117 / 4] + v33[v117 / 4]));
                v118[v117 / 4] = HIDWORD(v122) + (v122 >> 63);
                v117 += 4;
              }
              while (v168 != v117);
            }
            v123 = 0;
            v124 = v217;
            v125 = v216[0];
            v126 = v211[0];
            v127 = v210[0];
            v128 = v214;
            v129 = v209[0];
            v130 = v212;
            v131 = v208[0];
            LODWORD(v4) = v183;
            do
            {
              v124[v123] = v33[v123] + v39[v123] - v34[v123];
              v125[v123] = v36[v123] + v35[v123] - v37[v123];
              v126[v123] = v10[v123] - v124[v123];
              v127[v123] = v10[v123] - v125[v123];
              v129[v123] = v10[v123] - v128[v123];
              v131[v123] = v10[v123] - v130[v123];
              ++v123;
            }
            while (v55 != v123);
          }
          if (*(_BYTE *)(a2 + 24))
          {
            v189 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v219 + 2048) >> 10) & 0x7CLL));
            v186 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v220 + 2048) >> 10) & 0x7CLL));
            v182 = sub_20C70767C((int *)v211[0], v4, *v196, v228);
            v179 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v219) >> 10) & 0x3FFFFFFFFFFFFCLL));
            v173 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v221 + 2048) >> 10) & 0x7CLL));
            v132 = sub_20C70767C((int *)v210[0], v4, *v196, v228);
            v133 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v219 + 2048) >> 10) & 0x7CLL));
            v134 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v220) >> 10) & 0x3FFFFFFFFFFFFCLL));
            v135 = sub_20C70767C((int *)v209[0], v4, *v196, v228);
            v136 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v219) >> 10) & 0x3FFFFFFFFFFFFCLL));
            v137 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v221) >> 10) & 0x3FFFFFFFFFFFFCLL));
            v138 = sub_20C70767C((int *)v208[0], v4, *v196, v228);
            v139 = v186 + v189 + v182;
            v140 = v173 + v179 + v132;
            v141 = v134 + v133 + v135;
            v142 = v137 + v136 + v138;
            v2 = v175;
            v5 = v174;
            v6 = v192;
            v7 = (_BYTE *)(a2 + 8);
          }
          else
          {
            v7 = (_BYTE *)(a2 + 8);
            if ((int)v4 < 1)
            {
              v139 = 0;
              v140 = 0;
              v141 = 0;
              v142 = 0;
            }
            else
            {
              v143 = *(_DWORD *)v211[0];
              if (*(int *)v211[0] < 0)
                v143 = -v143;
              v139 = -(v4 * __clz(v143 + 1));
              v144 = *(_DWORD *)v210[0];
              if (*(int *)v210[0] < 0)
                v144 = -v144;
              v140 = -(v4 * __clz(v144 + 1));
              v145 = *(_DWORD *)v209[0];
              if (*(int *)v209[0] < 0)
                v145 = -v145;
              v141 = -(v4 * __clz(v145 + 1));
              v146 = *(_DWORD *)v208[0];
              if (*(int *)v208[0] < 0)
                v146 = -v146;
              v142 = -(v4 * __clz(v146 + 1));
            }
            v5 = v174;
            v6 = v192;
          }
          if (v139 <= v140 && v139 <= v141 && v139 <= v142)
          {
            v147 = 0;
            v148 = 0;
LABEL_114:
            v149 = 1;
LABEL_121:
            v150 = v194;
            sub_20C6E8A80(v194, v148, &v219);
            v151 = &v219;
LABEL_137:
            sub_20C6E8A80(v150, v147, &v151[v149]);
            v64 = 2;
            v8 = v195;
            v12 = v193;
LABEL_138:
            if ((int)v4 >= 1)
            {
              v153 = (char *)__p[0] + 4;
              v154 = v8;
              v155 = v10;
              do
              {
                v157 = *v155++;
                v156 = v157;
                v158 = *((_DWORD *)v153 - 1);
                if (*(_DWORD *)&v153[4 * (((_BYTE)v158 - 1) & 3)] != v157)
                {
                  *((_DWORD *)v153 - 1) = v158 + 1;
                  *(_DWORD *)&v153[4 * (v158 & 3)] = v156;
                }
                v153 += 20;
                --v154;
              }
              while (v154);
            }
            sub_20C6FA124((uint64_t)v2, v6, (uint64_t)v10, (uint64_t)v12, v4, v176, v7, &v227[15 * v64]);
            goto LABEL_144;
          }
          if (v140 > v141 || v140 > v142)
          {
            if (v141 <= v142)
            {
              v148 = 0;
              v147 = 1;
              v193 = v214;
              goto LABEL_114;
            }
            v147 = 1;
            v193 = v212;
            v148 = 1;
          }
          else
          {
            v147 = 0;
            v148 = 1;
            v193 = (int *)v216[0];
          }
          v149 = 2;
          goto LABEL_121;
        }
      }
      LODWORD(v4) = v183;
      if (v22 != -1)
      {
        if (!(_DWORD)v5
          || (v56 = v2[404], *(_BYTE *)(v56 + (int)v201)) && *(_BYTE *)(v56 + SHIDWORD(v201)) && *(_BYTE *)(v56 + v22))
        {
          v57 = (int *)(v191 + 4 * (int)v201 * v183);
          v58 = (int *)(v191 + 4 * HIDWORD(v201) * v183);
          v59 = (int *)(v191 + 4 * v22 * v183);
          v60 = v29;
          v61 = v28;
          sub_20C6E916C(v57, v58, v59, v183, (int *)(v2[23] + 12 * v29), (int *)(v2[23] + 12 * (int)v28), (int *)(v2[23] + 12 * (int)v20), (int *)(v2[23] + 12 * v180), (_DWORD *)v216[0]);
          if (v183 == 2)
          {
            sub_20C6E9868((unint64_t)v57, v58, v59, (_DWORD *)(v2[23] + 12 * v60), (_DWORD *)(v2[23] + 12 * v61), (int *)(v2[23] + 12 * v180), v212);
          }
          else
          {
            if (v183 < 1)
              goto LABEL_72;
            v76 = v212;
            v77 = v8;
            v78 = v57;
            v79 = v58;
            do
            {
              v81 = *v78++;
              v80 = v81;
              v82 = *v79++;
              v46 = __OFADD__(v82, v80);
              v83 = v82 + v80;
              if (v83 < 0 != v46)
                ++v83;
              *v76++ = v83 >> 1;
              --v77;
            }
            while (v77);
          }
          v84 = 0;
          v85 = v217;
          v86 = v216[0];
          v87 = v214;
          v88 = v211[0];
          v89 = v210[0];
          v90 = v209[0];
          v91 = v212;
          v92 = v208[0];
          do
          {
            v93 = v58[v84] + v57[v84] - v59[v84];
            v85[v84] = v93;
            v94 = v86[v84];
            v46 = __OFADD__(v94, v93);
            v95 = v94 + v93;
            if (v95 < 0 != v46)
              ++v95;
            v87[v84] = v95 >> 1;
            v88[v84] = v10[v84] - v85[v84];
            v89[v84] = v10[v84] - v86[v84];
            v90[v84] = v10[v84] - v87[v84];
            v92[v84] = v10[v84] - v91[v84];
            ++v84;
          }
          while (v8 != v84);
LABEL_72:
          if (*(_BYTE *)(a2 + 24))
          {
            v7 = (_BYTE *)(a2 + 8);
            v188 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v222 + 2048) >> 10) & 0x7CLL));
            v185 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v223 + 2048) >> 10) & 0x7CLL));
            v181 = sub_20C70767C((int *)v211[0], v183, *v196, v228);
            v178 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v222) >> 10) & 0x3FFFFFFFFFFFFCLL));
            v172 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v224 + 2048) >> 10) & 0x7CLL));
            v96 = sub_20C70767C((int *)v210[0], v183, *v196, v228);
            v97 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v222 + 2048) >> 10) & 0x7CLL));
            v98 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v223) >> 10) & 0x3FFFFFFFFFFFFCLL));
            v99 = sub_20C70767C((int *)v209[0], v183, *v196, v228);
            v100 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v222) >> 10) & 0x3FFFFFFFFFFFFCLL));
            v101 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v224) >> 10) & 0x3FFFFFFFFFFFFCLL));
            v102 = sub_20C70767C((int *)v208[0], v183, *v196, v228);
            v103 = v185 + v188 + v181;
            v104 = v172 + v178 + v96;
            v105 = v98 + v97 + v99;
            v106 = v101 + v100 + v102;
            v2 = v175;
          }
          else
          {
            v7 = (_BYTE *)(a2 + 8);
            if (v183 < 1)
            {
              v103 = 0;
              v104 = 0;
              v105 = 0;
              v106 = 0;
            }
            else
            {
              v113 = *(_DWORD *)v211[0];
              if (*(int *)v211[0] < 0)
                v113 = -v113;
              v103 = -(v183 * __clz(v113 + 1));
              v114 = *(_DWORD *)v210[0];
              if (*(int *)v210[0] < 0)
                v114 = -v114;
              v104 = -(v183 * __clz(v114 + 1));
              v115 = *(_DWORD *)v209[0];
              if (*(int *)v209[0] < 0)
                v115 = -v115;
              v105 = -(v183 * __clz(v115 + 1));
              v116 = *(_DWORD *)v208[0];
              if (*(int *)v208[0] < 0)
                v116 = -v116;
              v106 = -(v183 * __clz(v116 + 1));
            }
          }
          v5 = v174;
          v6 = v192;
          if (v103 <= v104 && v103 <= v105 && v103 <= v106)
          {
            v147 = 0;
            v152 = 0;
LABEL_135:
            v149 = 1;
            goto LABEL_136;
          }
          if (v104 > v105 || v104 > v106)
          {
            if (v105 <= v106)
            {
              v152 = 0;
              v147 = 1;
              v193 = v214;
              goto LABEL_135;
            }
            v147 = 1;
            v193 = v212;
            v152 = 1;
          }
          else
          {
            v147 = 0;
            v152 = 1;
            v193 = (int *)v216[0];
          }
          v149 = 2;
LABEL_136:
          v150 = v194;
          sub_20C6E8A80(v194, v152, &v222);
          v151 = &v222;
          goto LABEL_137;
        }
      }
      v7 = (_BYTE *)(a2 + 8);
      if (HIDWORD(v201) != -1)
      {
        if (!(_DWORD)v5 || (v62 = v2[404], *(_BYTE *)(v62 + (int)v201)) && *(_BYTE *)(v62 + SHIDWORD(v201)))
        {
          v6 = v192;
          v12 = v193;
          if (v183 == 2)
          {
            v198 = 0;
            sub_20C6E940C((int *)(v191 + 8 * (_DWORD)v201), (int *)(v191 + 8 * HIDWORD(v201)), v10, (_DWORD *)(v2[23] + 12 * v29), (_DWORD *)(v2[23] + 12 * (int)v28), (int *)(v2[23] + 12 * v180), v193, &v198);
            sub_20C6E8A80(v194, v198 != 0, &v226);
          }
          else if (v183 >= 1)
          {
            v107 = 0;
            v108 = v191 + 4 * (int)v201 * v183;
            v109 = v191 + 4 * HIDWORD(v201) * v183;
            do
            {
              v110 = *(_DWORD *)(v108 + v107);
              v111 = *(_DWORD *)(v109 + v107);
              v46 = __OFADD__(v111, v110);
              v112 = v111 + v110;
              if (v112 < 0 != v46)
                ++v112;
              v193[v107 / 4] = v112 >> 1;
              v107 += 4;
            }
            while (v168 != v107);
          }
          v64 = 1;
          goto LABEL_138;
        }
      }
      v6 = v192;
      v12 = v193;
    }
    if (sub_20C700E4C((uint64_t)v2, v9, (uint64_t)&v217, a2))
      v63 = 1;
    else
      v63 = (int)v4 < 1;
    if (v63)
    {
      v64 = 0;
    }
    else
    {
      v65 = 0;
      do
      {
        v66 = 0;
        v67 = __p[0];
        v68 = (char *)__p[0] + 20 * v65;
        v69 = 0x7FFFFFFF;
        v70 = -1;
        v71 = -1;
        do
        {
          v72 = v67[5 * v65 + 1 + ((v70 + *v68) & 3)];
          v73 = v10[v65] - v72;
          if (*(_BYTE *)(a2 + 24))
          {
            v74 = sub_20C704AA0(v73, v65, v66, __b, *v196, v227);
          }
          else
          {
            if (v73 >= 0)
              v75 = v10[v65] - v72;
            else
              v75 = v72 - v10[v65];
            v74 = -__clz(v75 + 1);
          }
          if (v74 < v69)
          {
            v217[v65] = v72;
            v69 = v74;
            v71 = v66;
          }
          ++v66;
          --v70;
        }
        while (v66 != 4);
        sub_20C6E8A80(v194, v71 & 1, __b);
        sub_20C6E8A80(v194, (v71 >> 1) & 1, &__b[(v71 & 1) + 1]);
        ++v65;
        v8 = v195;
      }
      while (v65 != v195);
      v64 = 0;
      v2 = v175;
      LODWORD(v4) = v183;
      v5 = v174;
      v6 = v192;
      v12 = v193;
      v7 = (_BYTE *)(a2 + 8);
    }
    goto LABEL_138;
  }
LABEL_145:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v208[0])
  {
    v208[1] = v208[0];
    operator delete(v208[0]);
  }
  if (v209[0])
  {
    v209[1] = v209[0];
    operator delete(v209[0]);
  }
  if (v210[0])
  {
    v210[1] = v210[0];
    operator delete(v210[0]);
  }
  if (v211[0])
  {
    v211[1] = v211[0];
    operator delete(v211[0]);
  }
  if (v212)
  {
    v213[0] = v212;
    operator delete(v212);
  }
  if (v214)
  {
    v215[0] = v214;
    operator delete(v214);
  }
  if (v216[0])
  {
    v216[1] = v216[0];
    operator delete(v216[0]);
  }
  if (v217)
  {
    *(_QWORD *)v218 = v217;
    operator delete(v217);
  }
  v159 = 360;
  do
  {
    v160 = &v227[v159 / 8];
    v161 = *(void **)&v218[v159 / 4 + 4];
    if (v161)
    {
      *(v160 - 2) = v161;
      operator delete(v161);
    }
    v162 = (void *)*(v160 - 6);
    if (v162)
    {
      *(_QWORD *)&v218[v159 / 4] = v162;
      operator delete(v162);
    }
    v163 = &v227[v159 / 8];
    v164 = v216[v159 / 8];
    if (v164)
    {
      *(v163 - 8) = v164;
      operator delete(v164);
    }
    v165 = (void *)*(v163 - 12);
    if (v165)
    {
      v215[v159 / 8] = v165;
      operator delete(v165);
    }
    v166 = (void *)*(v160 - 15);
    if (v166)
    {
      v213[v159 / 8] = v166;
      operator delete(v166);
    }
    v159 -= 120;
  }
  while (v159);
  return 0;
}

void sub_20C704928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a69;
  uint64_t v70;
  char *v71;
  void *v72;
  void *v73;
  char *v74;
  void *v75;
  void *v76;
  void *v77;

  if (__p)
    operator delete(__p);
  if (a42)
    operator delete(a42);
  if (a45)
    operator delete(a45);
  if (a48)
    operator delete(a48);
  if (a51)
    operator delete(a51);
  if (a54)
    operator delete(a54);
  if (a57)
    operator delete(a57);
  if (a60)
    operator delete(a60);
  if (a63)
    operator delete(a63);
  v70 = 360;
  while (1)
  {
    v71 = &a69 + v70;
    v72 = *(void **)(&a69 + v70 - 24);
    if (v72)
    {
      *((_QWORD *)v71 - 2) = v72;
      operator delete(v72);
    }
    v73 = (void *)*((_QWORD *)v71 - 6);
    if (v73)
    {
      *(_QWORD *)(&a69 + v70 - 40) = v73;
      operator delete(v73);
    }
    v74 = &a69 + v70;
    v75 = *(void **)(&a69 + v70 - 72);
    if (v75)
    {
      *((_QWORD *)v74 - 8) = v75;
      operator delete(v75);
    }
    v76 = (void *)*((_QWORD *)v74 - 12);
    if (v76)
    {
      *(_QWORD *)(&a69 + v70 - 88) = v76;
      operator delete(v76);
    }
    v77 = (void *)*((_QWORD *)v71 - 15);
    if (v77)
    {
      *(_QWORD *)(&a69 + v70 - 112) = v77;
      operator delete(v77);
    }
    v70 -= 120;
    if (!v70)
      _Unwind_Resume(a1);
  }
}

uint64_t sub_20C704AA0(int a1, int a2, char a3, unsigned __int16 *a4, int a5, _QWORD *a6)
{
  int v6;
  int v7;
  int v8;
  int v9;

  v6 = *a4;
  if ((a3 & 1) != 0)
    v6 = 0x10000 - v6;
  v7 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v6 + 2048) >> 10) & 0xFCLL));
  v8 = a4[(a3 & 1) + 1];
  if ((a3 & 2) != 0)
    v8 = 0x10000 - v8;
  v9 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v8 + 2048) >> 10) & 0xFCLL));
  return v9 + v7 + sub_20C6FDF60(a1, a2, a5, a6);
}

uint64_t sub_20C704B1C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int *v29;
  int *v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  unsigned int v39;
  _DWORD *v40;
  _DWORD *v41;
  int v42;
  char v43;
  unsigned int v44;
  int v45;
  int v46;
  signed int v47;
  int v48;
  int *v49;
  int *v50;
  int *v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  BOOL v56;
  int v57;
  char *v58;
  uint64_t v59;
  int *v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  _QWORD *v65;
  void *v66;
  void *v67;
  _QWORD *v68;
  void *v69;
  void *v70;
  void *v71;
  int v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  _DWORD v96[2];
  void *__p;
  _QWORD v98[2];
  void *v99[3];
  void *v100;
  _QWORD v101[2];
  __int16 v102;
  unsigned __int16 __b[3];
  _QWORD v104[48];

  v3 = (_QWORD *)a1;
  v104[45] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a1 + 3136);
  v5 = *(unsigned int *)(a1 + 3548);
  v6 = *(int *)(a1 + 3544);
  v77 = *(_QWORD *)(a1 + 3208);
  memset_pattern16(__b, &unk_20CAF8CE0, 6uLL);
  v7 = 0;
  memset(v104, 0, 360);
  do
  {
    sub_20C6EC678((uint64_t)&v104[v7], v6);
    v7 += 15;
  }
  while (v7 != 45);
  v102 = 0x8000;
  LODWORD(v99[0]) = 0;
  sub_20C6E8A00(&v100, v6, v99);
  LODWORD(__p) = 0;
  sub_20C6E8A00(v99, v6, &__p);
  v8 = v77;
  v84 = *(_DWORD *)(a2 + 16);
  sub_20C6F554C(&__p, v6);
  if ((int)v5 >= 1)
  {
    v9 = 0;
    v87 = (_BYTE *)(a2 + 8);
    v85 = (uint64_t)(v3 + 445);
    v86 = v6;
    v74 = v3;
    v75 = v5;
    v76 = v4;
    v73 = v6;
    while (1)
    {
      v10 = *(int *)(v3[413] + 4 * v9);
      if (!v84 || *(_BYTE *)(v3[404] + v10))
        break;
LABEL_71:
      if (++v9 == v5)
        goto LABEL_72;
    }
    v11 = (int *)(v8 + 4 * (int)v10 * (int)v6);
    v12 = *(unsigned int *)(v3[416] + 4 * v10);
    v83 = v9;
    if ((v12 & 0x80000000) == 0)
    {
      v13 = (int *)(v3[17] + 12 * v12);
      v79 = *v13;
      v81 = v13[1];
      LODWORD(v95) = *v13;
      HIDWORD(v95) = v81;
      v14 = v13[2];
      v96[0] = v14;
      v15 = (int *)(v3[20] + 12 * v12);
      v16 = v15[1];
      v17 = *v15;
      LODWORD(v93) = *v15;
      HIDWORD(v93) = v16;
      v78 = v16;
      v18 = v15[2];
      v94 = v18;
      v92 = -1;
      v91 = -1;
      v90 = -1;
      v89 = -1;
      sub_20C7004AC(v3, v12, v10, (unsigned int *)&v95, &v91);
      sub_20C7004AC(v3, v12, v10, (unsigned int *)&v93, &v89);
      v19 = v92;
      v20 = v90;
      if ((v92 & 0x80000000) == 0 || v90 < 0)
      {
        v21 = v89;
        v22 = HIDWORD(v89);
        v25 = v79;
        LODWORD(v23) = v81;
        v24 = v14;
      }
      else
      {
        v95 = v93;
        v18 = v14;
        v96[0] = v94;
        v21 = v91;
        v22 = HIDWORD(v91);
        v91 = v89;
        v20 = v92;
        v19 = v90;
        v92 = v90;
        v17 = v79;
        v78 = v81;
        v23 = HIDWORD(v93);
        v24 = v94;
        v25 = v93;
      }
      v8 = v77;
      if (v20 != -1)
      {
        if (!v84
          || (v26 = v3[404], *(_BYTE *)(v26 + (int)v91))
          && *(_BYTE *)(v26 + SHIDWORD(v91))
          && *(_BYTE *)(v26 + v19)
          && *(_BYTE *)(v26 + v21)
          && *(_BYTE *)(v26 + v22)
          && *(_BYTE *)(v26 + v20))
        {
          v80 = v18;
          v82 = v17;
          v27 = v22;
          v28 = v21;
          sub_20C6E916C((int *)(v77 + 4 * (int)v91 * (int)v6), (int *)(v77 + 4 * HIDWORD(v91) * (int)v6), (int *)(v77 + 4 * v19 * (int)v6), v6, (int *)(v3[23] + 12 * v25), (int *)(v3[23] + 12 * (int)v23), (int *)(v3[23] + 12 * v24), (int *)(v3[23] + 12 * v12), v100);
          sub_20C6E916C((int *)(v77 + 4 * v28 * (int)v6), (int *)(v77 + 4 * v27 * (int)v6), (int *)(v77 + 4 * v20 * (int)v6), v6, (int *)(v3[23] + 12 * v82), (int *)(v3[23] + 12 * v78), (int *)(v3[23] + 12 * v80), (int *)(v3[23] + 12 * v12), (_DWORD *)v99[0]);
          if ((int)v6 >= 1)
          {
            v29 = (int *)v100;
            v30 = (int *)v99[0];
            v31 = v86;
            v9 = v83;
            do
            {
              v32 = *v30++;
              v33 = v32 + *v29;
              if (v33 < 0 != __OFADD__(v32, *v29))
                ++v33;
              *v29++ = v33 >> 1;
              --v31;
            }
            while (v31);
            v34 = 2;
            goto LABEL_33;
          }
LABEL_32:
          v34 = 2;
          v9 = v83;
LABEL_33:
          v5 = v75;
          v4 = v76;
LABEL_65:
          if ((int)v6 >= 1)
          {
            v58 = (char *)__p + 4;
            v59 = v86;
            v60 = v11;
            do
            {
              v62 = *v60++;
              v61 = v62;
              v63 = *((_DWORD *)v58 - 1);
              if (*(_DWORD *)&v58[4 * (((_BYTE)v63 - 1) & 3)] != v62)
              {
                *((_DWORD *)v58 - 1) = v63 + 1;
                *(_DWORD *)&v58[4 * (v63 & 3)] = v61;
              }
              v58 += 20;
              --v59;
            }
            while (v59);
          }
          sub_20C6FA124((uint64_t)v3, v9, (uint64_t)v11, (uint64_t)v100, v6, v4, v87, &v104[15 * v34]);
          goto LABEL_71;
        }
      }
      if (v19 != -1)
      {
        if (!v84
          || (v35 = v3[404], *(_BYTE *)(v35 + (int)v91)) && *(_BYTE *)(v35 + SHIDWORD(v91)) && *(_BYTE *)(v35 + v19))
        {
          sub_20C6E916C((int *)(v77 + 4 * (int)v91 * (int)v6), (int *)(v77 + 4 * HIDWORD(v91) * (int)v6), (int *)(v77 + 4 * v19 * (int)v6), v6, (int *)(v3[23] + 12 * v25), (int *)(v3[23] + 12 * (int)v23), (int *)(v3[23] + 12 * v24), (int *)(v3[23] + 12 * v12), v100);
          goto LABEL_32;
        }
      }
      v9 = v83;
      if (HIDWORD(v91) != -1)
      {
        if (!v84 || (v36 = v3[404], *(_BYTE *)(v36 + (int)v91)) && *(_BYTE *)(v36 + SHIDWORD(v91)))
        {
          v4 = v76;
          if ((_DWORD)v6 == 2)
          {
            v88 = 0;
            sub_20C6E940C((int *)(v77 + 8 * (_DWORD)v91), (int *)(v77 + 8 * HIDWORD(v91)), v11, (_DWORD *)(v3[23] + 12 * v25), (_DWORD *)(v3[23] + 12 * (int)v23), (int *)(v3[23] + 12 * v12), (int *)v100, &v88);
            v5 = v75;
            sub_20C6E8A80(v85, v88 != 0, &v102);
          }
          else
          {
            v5 = v75;
            if ((int)v6 >= 1)
            {
              v49 = (int *)(v77 + 4 * (int)v91 * (int)v6);
              v50 = (int *)(v77 + 4 * HIDWORD(v91) * (int)v6);
              v51 = (int *)v100;
              v52 = v86;
              do
              {
                v54 = *v49++;
                v53 = v54;
                v55 = *v50++;
                v56 = __OFADD__(v55, v53);
                v57 = v55 + v53;
                if (v57 < 0 != v56)
                  ++v57;
                *v51++ = v57 >> 1;
                --v52;
              }
              while (v52);
            }
          }
          v34 = 1;
          goto LABEL_65;
        }
      }
      v5 = v75;
      v4 = v76;
    }
    if (sub_20C700E4C((uint64_t)v3, v10, (uint64_t)&v100, a2))
      v37 = 1;
    else
      v37 = (int)v6 < 1;
    if (v37)
    {
      v34 = 0;
    }
    else
    {
      v38 = 0;
      do
      {
        v39 = 0;
        v40 = __p;
        v41 = (char *)__p + 20 * v38;
        v42 = 0x7FFFFFFF;
        v43 = -1;
        v44 = -1;
        do
        {
          v45 = v40[5 * v38 + 1 + ((v43 + *v41) & 3)];
          v46 = v11[v38] - v45;
          if (*(_BYTE *)(a2 + 24))
          {
            v47 = sub_20C704AA0(v46, v38, v39, __b, *v87, v104);
          }
          else
          {
            if (v46 >= 0)
              v48 = v11[v38] - v45;
            else
              v48 = v45 - v11[v38];
            v47 = -__clz(v48 + 1);
          }
          if (v47 < v42)
          {
            *((_DWORD *)v100 + v38) = v45;
            v42 = v47;
            v44 = v39;
          }
          ++v39;
          --v43;
        }
        while (v39 != 4);
        sub_20C6E8A80(v85, v44 & 1, __b);
        sub_20C6E8A80(v85, (v44 >> 1) & 1, &__b[(v44 & 1) + 1]);
        ++v38;
      }
      while (v38 != v86);
      v34 = 0;
      v3 = v74;
      v5 = v75;
      v4 = v76;
      v8 = v77;
      LODWORD(v6) = v73;
      v9 = v83;
    }
    goto LABEL_65;
  }
LABEL_72:
  if (__p)
  {
    v98[0] = __p;
    operator delete(__p);
  }
  if (v99[0])
  {
    v99[1] = v99[0];
    operator delete(v99[0]);
  }
  if (v100)
  {
    v101[0] = v100;
    operator delete(v100);
  }
  v64 = 90;
  do
  {
    v65 = &v104[v64 / 2];
    v66 = (void *)v101[v64 / 2];
    if (v66)
    {
      *(v65 - 2) = v66;
      operator delete(v66);
    }
    v67 = (void *)*(v65 - 6);
    if (v67)
    {
      v99[v64 / 2 + 2] = v67;
      operator delete(v67);
    }
    v68 = &v104[v64 / 2];
    v69 = (void *)v98[v64 / 2];
    if (v69)
    {
      *(v68 - 8) = v69;
      operator delete(v69);
    }
    v70 = (void *)*(v68 - 12);
    if (v70)
    {
      *(_QWORD *)&v96[v64] = v70;
      operator delete(v70);
    }
    v71 = (void *)*(v65 - 15);
    if (v71)
    {
      *(_QWORD *)((char *)&v92 + v64 * 4) = v71;
      operator delete(v71);
    }
    v64 -= 30;
  }
  while (v64 * 4);
  return 0;
}

void sub_20C705270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v42;
  char *v43;
  void *v44;
  void *v45;
  char *v46;
  void *v47;
  void *v48;
  void *v49;

  if (__p)
    operator delete(__p);
  if (a34)
    operator delete(a34);
  if (a37)
    operator delete(a37);
  v42 = 360;
  while (1)
  {
    v43 = &a41 + v42;
    v44 = *(void **)(&a41 + v42 - 24);
    if (v44)
    {
      *((_QWORD *)v43 - 2) = v44;
      operator delete(v44);
    }
    v45 = (void *)*((_QWORD *)v43 - 6);
    if (v45)
    {
      *(_QWORD *)(&a41 + v42 - 40) = v45;
      operator delete(v45);
    }
    v46 = &a41 + v42;
    v47 = *(void **)(&a41 + v42 - 72);
    if (v47)
    {
      *((_QWORD *)v46 - 8) = v47;
      operator delete(v47);
    }
    v48 = (void *)*((_QWORD *)v46 - 12);
    if (v48)
    {
      *(_QWORD *)(&a41 + v42 - 88) = v48;
      operator delete(v48);
    }
    v49 = (void *)*((_QWORD *)v43 - 15);
    if (v49)
    {
      *(_QWORD *)(&a41 + v42 - 112) = v49;
      operator delete(v49);
    }
    v42 -= 120;
    if (!v42)
      _Unwind_Resume(exception_object);
  }
}

uint64_t sub_20C705348(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int *v20;
  int *v21;
  int *v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int *v33;
  int *v34;
  uint64_t v35;
  int *v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unsigned __int16 **v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  unsigned int v84;
  _DWORD *v85;
  _DWORD *v86;
  int v87;
  char v88;
  unsigned int v89;
  int v90;
  int v91;
  signed int v92;
  int v93;
  char *v94;
  uint64_t v95;
  int *v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  _QWORD *v101;
  void *v102;
  void *v103;
  _QWORD *v104;
  void *v105;
  void *v106;
  void *v107;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  int v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  void *__p[3];
  void *v135[3];
  void *v136[3];
  void *v137[3];
  void *v138[3];
  void *v139[3];
  void *v140[3];
  void *v141[3];
  void *v142[3];
  unsigned __int16 v143;
  unsigned __int16 v144;
  unsigned __int16 v145;
  unsigned __int16 __b[3];
  _QWORD v147[48];

  v3 = (_QWORD *)a1;
  v4 = 0;
  v147[45] = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned int *)(a1 + 3548);
  v6 = *(int *)(a1 + 3544);
  v121 = *(_QWORD *)(a1 + 3208);
  v122 = (_QWORD *)(a1 + 3136);
  memset(v147, 0, 360);
  do
  {
    sub_20C6EC678((uint64_t)&v147[v4], v6);
    v4 += 15;
  }
  while (v4 != 45);
  memset_pattern16(__b, &unk_20CAF8CE0, 6uLL);
  memset_pattern16(&v143, &unk_20CAF8CE0, 6uLL);
  LODWORD(v141[0]) = 0;
  sub_20C6E8A00(v142, v6, v141);
  LODWORD(v140[0]) = 0;
  sub_20C6E8A00(v141, v6, v140);
  v7 = v121;
  LODWORD(v139[0]) = 0;
  sub_20C6E8A00(v140, v6, v139);
  LODWORD(v138[0]) = 0;
  sub_20C6E8A00(v139, v6, v138);
  LODWORD(v137[0]) = 0;
  sub_20C6E8A00(v138, v6, v137);
  LODWORD(v136[0]) = 0;
  sub_20C6E8A00(v137, v6, v136);
  LODWORD(v135[0]) = 0;
  sub_20C6E8A00(v136, v6, v135);
  LODWORD(__p[0]) = 0;
  sub_20C6E8A00(v135, v6, __p);
  v8 = *(_DWORD *)(a2 + 16);
  sub_20C6F554C(__p, v6);
  if ((int)v5 >= 1)
  {
    v9 = 0;
    v127 = (uint64_t)(v3 + 445);
    v128 = v6;
    v109 = 4 * v6;
    v119 = v5;
    v120 = v3;
    v123 = v8;
    v117 = v6;
    v129 = (_BYTE *)(a2 + 8);
    while (1)
    {
      v10 = *(int *)(v3[413] + 4 * v9);
      if (!v8 || *(_BYTE *)(v3[404] + v10))
        break;
LABEL_100:
      if (++v9 == v5)
        goto LABEL_101;
    }
    v124 = v9;
    v11 = v7 + 4 * (int)v10 * (int)v6;
    v12 = *(unsigned int *)(v3[416] + 4 * v10);
    v13 = v142[0];
    if ((v12 & 0x80000000) != 0)
    {
      v9 = v124;
      goto LABEL_75;
    }
    v125 = v142[0];
    v133 = -1;
    v132 = -1;
    v131 = -1;
    v130 = -1;
    sub_20C7004AC(v3, v12, v10, (unsigned int *)(v3[17] + 12 * v12), &v132);
    sub_20C7004AC(v3, v12, v10, (unsigned int *)(v3[20] + 12 * v12), &v130);
    v14 = v133;
    if (v133 < 0)
    {
      v8 = v123;
      v9 = v124;
      if ((v131 & 0x80000000) == 0)
      {
        v17 = v132;
        v132 = v130;
        v18 = v131;
        v133 = v131;
        v130 = v17;
        v131 = v14;
        v14 = v18;
      }
      v13 = v125;
      v15 = v132;
      v16 = HIDWORD(v132);
      if (v14 == -1)
        goto LABEL_22;
    }
    else
    {
      v15 = v132;
      v16 = HIDWORD(v132);
      v8 = v123;
      v9 = v124;
      v13 = v125;
    }
    if (!v8 || (v19 = v3[404], *(_BYTE *)(v19 + v15)) && *(_BYTE *)(v19 + v16) && *(_BYTE *)(v19 + v14))
    {
      if ((int)v6 >= 1)
      {
        v20 = (int *)(v7 + 4 * v15 * (int)v6);
        v21 = (int *)(v7 + 4 * v16 * (int)v6);
        v22 = (int *)(v7 + 4 * v14 * (int)v6);
        v23 = v128;
        v24 = v13;
        do
        {
          v26 = *v20++;
          v25 = v26;
          v27 = *v21++;
          v28 = v27 + v25;
          v29 = *v22++;
          *v24++ = v28 - v29;
          --v23;
        }
        while (v23);
      }
      v30 = 0;
      v31 = 2;
      goto LABEL_33;
    }
LABEL_22:
    if (v16 == -1 || v8 && ((v32 = v3[404], !*(_BYTE *)(v32 + v15)) || !*(_BYTE *)(v32 + v16)))
    {
      v31 = 0;
      v30 = 1;
    }
    else
    {
      if ((int)v6 >= 1)
      {
        v33 = (int *)(v7 + 4 * v15 * (int)v6);
        v34 = (int *)(v7 + 4 * v16 * (int)v6);
        v35 = v128;
        v36 = v13;
        do
        {
          v38 = *v33++;
          v37 = v38;
          v39 = *v34++;
          v40 = __OFADD__(v39, v37);
          v41 = v39 + v37;
          if (v41 < 0 != v40)
            ++v41;
          *v36++ = v41 >> 1;
          --v35;
        }
        while (v35);
      }
      v30 = 0;
      v31 = 1;
    }
LABEL_33:
    if (v131 == -1
      || v8
      && ((v42 = v3[404], !*(_BYTE *)(v42 + v15))
       || !*(_BYTE *)(v42 + v16)
       || !*(_BYTE *)(v42 + v14)
       || !*(_BYTE *)(v42 + (int)v130)
       || !*(_BYTE *)(v42 + SHIDWORD(v130))
       || !*(_BYTE *)(v42 + v131)))
    {
LABEL_74:
      if (!v30)
      {
LABEL_94:
        if ((int)v6 >= 1)
        {
          v94 = (char *)__p[0] + 4;
          v95 = v128;
          v96 = (int *)v11;
          do
          {
            v98 = *v96++;
            v97 = v98;
            v99 = *((_DWORD *)v94 - 1);
            if (*(_DWORD *)&v94[4 * (((_BYTE)v99 - 1) & 3)] != v98)
            {
              *((_DWORD *)v94 - 1) = v99 + 1;
              *(_DWORD *)&v94[4 * (v99 & 3)] = v97;
            }
            v94 += 20;
            --v95;
          }
          while (v95);
        }
        sub_20C6FA124((uint64_t)v3, v9, v11, (uint64_t)v13, v6, v122, v129, &v147[15 * v31]);
        goto LABEL_100;
      }
LABEL_75:
      v126 = v13;
      if (sub_20C700E4C((uint64_t)v3, v10, (uint64_t)v142, a2))
        v82 = 1;
      else
        v82 = (int)v6 < 1;
      if (v82)
      {
        v31 = 0;
      }
      else
      {
        v83 = 0;
        do
        {
          v84 = 0;
          v85 = __p[0];
          v86 = (char *)__p[0] + 20 * v83;
          v87 = 0x7FFFFFFF;
          v88 = -1;
          v89 = -1;
          do
          {
            v90 = v85[5 * v83 + 1 + ((v88 + *v86) & 3)];
            v91 = *(_DWORD *)(v11 + 4 * v83) - v90;
            if (*(_BYTE *)(a2 + 24))
            {
              v92 = sub_20C704AA0(v91, v83, v84, __b, *v129, v147);
            }
            else
            {
              if (v91 >= 0)
                v93 = *(_DWORD *)(v11 + 4 * v83) - v90;
              else
                v93 = v90 - *(_DWORD *)(v11 + 4 * v83);
              v92 = -__clz(v93 + 1);
            }
            if (v92 < v87)
            {
              *((_DWORD *)v142[0] + v83) = v90;
              v87 = v92;
              v89 = v84;
            }
            ++v84;
            --v88;
          }
          while (v84 != 4);
          sub_20C6E8A80(v127, v89 & 1, __b);
          sub_20C6E8A80(v127, (v89 >> 1) & 1, &__b[(v89 & 1) + 1]);
          ++v83;
        }
        while (v83 != v128);
        v31 = 0;
        v5 = v119;
        v3 = v120;
        LODWORD(v6) = v117;
        v7 = v121;
        v8 = v123;
        v9 = v124;
      }
      v13 = v126;
      goto LABEL_94;
    }
    v116 = v30;
    v118 = v31;
    if ((int)v6 < 1)
    {
      v65 = *(unsigned __int8 *)(a2 + 24);
      if (!*(_BYTE *)(a2 + 24))
      {
        v67 = 0;
        v69 = 0;
        v71 = 0;
        goto LABEL_60;
      }
    }
    else
    {
      v43 = 0;
      v44 = v7 + 4 * v15 * (int)v6;
      v45 = v7 + 4 * v16 * (int)v6;
      v46 = v7 + 4 * v14 * (int)v6;
      v47 = v7 + 4 * (int)v130 * (int)v6;
      v48 = v7 + 4 * HIDWORD(v130) * (int)v6;
      v49 = v7 + 4 * v131 * (int)v6;
      v50 = (char *)v141[0];
      v51 = (char *)v140[0];
      v52 = (char *)v139[0];
      v53 = (char *)v138[0];
      v54 = (char *)v137[0];
      v55 = (char *)v136[0];
      v56 = (char *)v135[0];
      do
      {
        *(_DWORD *)&v50[v43] = *(_DWORD *)(v48 + v43) + *(_DWORD *)(v47 + v43) - *(_DWORD *)(v49 + v43);
        v57 = *(_DWORD *)(v44 + v43);
        v58 = *(_DWORD *)(v47 + v43);
        v59 = v58 + v57;
        if (v58 + v57 < 0 != __OFADD__(v58, v57))
          ++v59;
        *(_DWORD *)&v51[v43] = *(_DWORD *)(v48 + v43) + *(_DWORD *)(v45 + v43) - (v59 >> 1);
        v60 = *(_DWORD *)(v44 + v43);
        v61 = *(_DWORD *)(v47 + v43);
        v40 = __OFADD__(v61, v60);
        v62 = v61 + v60;
        if (v62 < 0 != v40)
          ++v62;
        v63 = 1431655766
            * ((v62 >> 1)
             - (*(_DWORD *)(v46 + v43)
              + *(_DWORD *)(v49 + v43))
             + 2 * (*(_DWORD *)(v48 + v43) + *(_DWORD *)(v45 + v43)));
        *(_DWORD *)&v52[v43] = HIDWORD(v63) + (v63 >> 63);
        *(_DWORD *)&v53[v43] = *(_DWORD *)(v11 + v43) - v13[v43 / 4];
        *(_DWORD *)&v54[v43] = *(_DWORD *)(v11 + v43) - *(_DWORD *)&v50[v43];
        *(_DWORD *)&v55[v43] = *(_DWORD *)(v11 + v43) - *(_DWORD *)&v51[v43];
        *(_DWORD *)&v56[v43] = *(_DWORD *)(v11 + v43) - *(_DWORD *)&v52[v43];
        v43 += 4;
      }
      while (v109 != v43);
      v31 = v118;
      if (!*(_BYTE *)(a2 + 24))
      {
        v64 = *(_DWORD *)v138[0];
        if (*(int *)v138[0] < 0)
          v64 = -v64;
        v65 = -(v6 * __clz(v64 + 1));
        v66 = *(_DWORD *)v137[0];
        if (*(int *)v137[0] < 0)
          v66 = -v66;
        v67 = -(v6 * __clz(v66 + 1));
        v68 = *(_DWORD *)v136[0];
        if (*(int *)v136[0] < 0)
          v68 = -v68;
        v69 = -(v6 * __clz(v68 + 1));
        v70 = *(_DWORD *)v135[0];
        if (*(int *)v135[0] < 0)
          v70 = -v70;
        v71 = -(v6 * __clz(v70 + 1));
LABEL_60:
        if (v65 <= v67 && v65 <= v69 && v65 <= v71)
        {
          v79 = 0;
          v80 = 0;
LABEL_72:
          v81 = 1;
          goto LABEL_73;
        }
        if (v67 > v69 || v67 > v71)
        {
          if (v69 <= v71)
          {
            v80 = 0;
            v79 = 1;
            v125 = v140[0];
            goto LABEL_72;
          }
          v79 = 1;
          v125 = v139[0];
          v80 = 1;
        }
        else
        {
          v79 = 0;
          v80 = 1;
          v125 = v141[0];
        }
        v81 = 2;
LABEL_73:
        sub_20C6E8A80(v127, v80, &v143);
        sub_20C6E8A80(v127, v79, &v143 + v81);
        v8 = v123;
        v9 = v124;
        v13 = v125;
        v31 = v118;
        v30 = v116;
        goto LABEL_74;
      }
    }
    v114 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v144 + 2048) >> 10) & 0x7CLL));
    v115 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v143 + 2048) >> 10) & 0x7CLL));
    v72 = (unsigned __int16 **)&v147[15 * v31];
    v113 = sub_20C70767C((int *)v138[0], v6, *v129, v72);
    v111 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v145 + 2048) >> 10) & 0x7CLL));
    v112 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v143) >> 10) & 0x3FFFFFFFFFFFFCLL));
    v110 = sub_20C70767C((int *)v137[0], v6, *v129, v72);
    v73 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v143 + 2048) >> 10) & 0x7CLL));
    v74 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v144) >> 10) & 0x3FFFFFFFFFFFFCLL));
    v75 = sub_20C70767C((int *)v136[0], v6, *v129, v72);
    v76 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v143) >> 10) & 0x3FFFFFFFFFFFFCLL));
    v77 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v145) >> 10) & 0x3FFFFFFFFFFFFCLL));
    v78 = sub_20C70767C((int *)v135[0], v6, *v129, v72);
    v65 = v114 + v115 + v113;
    v67 = v111 + v112 + v110;
    v69 = v74 + v73 + v75;
    v71 = v77 + v76 + v78;
    v5 = v119;
    v3 = v120;
    v7 = v121;
    goto LABEL_60;
  }
LABEL_101:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v135[0])
  {
    v135[1] = v135[0];
    operator delete(v135[0]);
  }
  if (v136[0])
  {
    v136[1] = v136[0];
    operator delete(v136[0]);
  }
  if (v137[0])
  {
    v137[1] = v137[0];
    operator delete(v137[0]);
  }
  if (v138[0])
  {
    v138[1] = v138[0];
    operator delete(v138[0]);
  }
  if (v139[0])
  {
    v139[1] = v139[0];
    operator delete(v139[0]);
  }
  if (v140[0])
  {
    v140[1] = v140[0];
    operator delete(v140[0]);
  }
  if (v141[0])
  {
    v141[1] = v141[0];
    operator delete(v141[0]);
  }
  if (v142[0])
  {
    v142[1] = v142[0];
    operator delete(v142[0]);
  }
  v100 = 45;
  do
  {
    v101 = &v147[v100];
    v102 = v142[v100 + 2];
    if (v102)
    {
      *(v101 - 2) = v102;
      operator delete(v102);
    }
    v103 = (void *)*(v101 - 6);
    if (v103)
    {
      v142[v100] = v103;
      operator delete(v103);
    }
    v104 = &v147[v100];
    v105 = v140[v100 + 2];
    if (v105)
    {
      *(v104 - 8) = v105;
      operator delete(v105);
    }
    v106 = (void *)*(v104 - 12);
    if (v106)
    {
      v140[v100] = v106;
      operator delete(v106);
    }
    v107 = (void *)*(v101 - 15);
    if (v107)
    {
      v139[v100] = v107;
      operator delete(v107);
    }
    v100 -= 15;
  }
  while (v100 * 8);
  return 0;
}

void sub_20C705E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v60;
  char *v61;
  void *v62;
  void *v63;
  char *v64;
  void *v65;
  void *v66;
  void *v67;

  if (__p)
    operator delete(__p);
  if (a36)
    operator delete(a36);
  if (a39)
    operator delete(a39);
  if (a42)
    operator delete(a42);
  if (a45)
    operator delete(a45);
  if (a48)
    operator delete(a48);
  if (a51)
    operator delete(a51);
  if (a54)
    operator delete(a54);
  v60 = 360;
  while (1)
  {
    v61 = &a59 + v60;
    v62 = *(void **)(&a59 + v60 - 24);
    if (v62)
    {
      *((_QWORD *)v61 - 2) = v62;
      operator delete(v62);
    }
    v63 = (void *)*((_QWORD *)v61 - 6);
    if (v63)
    {
      *(_QWORD *)(&a59 + v60 - 40) = v63;
      operator delete(v63);
    }
    v64 = &a59 + v60;
    v65 = *(void **)(&a59 + v60 - 72);
    if (v65)
    {
      *((_QWORD *)v64 - 8) = v65;
      operator delete(v65);
    }
    v66 = (void *)*((_QWORD *)v64 - 12);
    if (v66)
    {
      *(_QWORD *)(&a59 + v60 - 88) = v66;
      operator delete(v66);
    }
    v67 = (void *)*((_QWORD *)v61 - 15);
    if (v67)
    {
      *(_QWORD *)(&a59 + v60 - 112) = v67;
      operator delete(v67);
    }
    v60 -= 120;
    if (!v60)
      _Unwind_Resume(exception_object);
  }
}

uint64_t sub_20C705F74(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int *v17;
  int *v18;
  int *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int *v29;
  int *v30;
  int *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  _DWORD *v42;
  int v43;
  char v44;
  unsigned int v45;
  int v46;
  int v47;
  signed int v48;
  int v49;
  char *v50;
  uint64_t v51;
  int *v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  char *v57;
  void *v58;
  void *v59;
  char *v60;
  void *v61;
  void *v62;
  void *v63;
  int v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  int v76;
  void *__p[3];
  void *v78;
  _QWORD v79[2];
  unsigned __int16 __b[3];
  _OWORD v81[22];
  uint64_t v82;
  uint64_t v83;

  v3 = (_QWORD *)a1;
  v83 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a1 + 3136);
  v5 = *(unsigned int *)(a1 + 3548);
  v6 = *(int *)(a1 + 3544);
  v70 = *(_QWORD *)(a1 + 3208);
  memset_pattern16(__b, &unk_20CAF8CE0, 6uLL);
  v7 = 0;
  v82 = 0;
  memset(v81, 0, sizeof(v81));
  do
  {
    sub_20C6EC678((uint64_t)v81 + v7, v6);
    v7 += 120;
  }
  while (v7 != 360);
  LODWORD(__p[0]) = 0;
  sub_20C6E8A00(&v78, v6, __p);
  v71 = *(_DWORD *)(a2 + 16);
  sub_20C6F554C(__p, v6);
  if ((int)v5 >= 1)
  {
    v8 = 0;
    v72 = (uint64_t)(v3 + 445);
    v73 = v6;
    v74 = (_BYTE *)(a2 + 8);
    v65 = v6;
    v66 = v3;
    v68 = v5;
    v69 = v4;
    while (1)
    {
      v9 = *(int *)(v3[413] + 4 * v8);
      if (!v71 || *(_BYTE *)(v3[404] + v9))
        break;
LABEL_56:
      if (++v8 == v5)
        goto LABEL_57;
    }
    v10 = v70 + 4 * (int)v9 * (int)v6;
    v11 = *(_DWORD *)(v3[416] + 4 * v9);
    if ((v11 & 0x80000000) != 0)
      goto LABEL_32;
    v12 = v8;
    v76 = -1;
    v75 = -1;
    sub_20C7004AC(v3, v11, v9, (unsigned int *)(v3[17] + 12 * v11), &v75);
    v14 = v75;
    v13 = HIDWORD(v75);
    v15 = v76;
    if (v76 < 0)
    {
      sub_20C7004AC(v3, v11, v9, (unsigned int *)(v3[20] + 12 * v11), &v75);
      if (v76 < 0)
      {
        if (v15 == -1)
        {
LABEL_20:
          if (v13 != -1)
          {
            if (!v71 || (v28 = v3[404], *(_BYTE *)(v28 + v14)) && *(_BYTE *)(v28 + v13))
            {
              if ((int)v6 >= 1)
              {
                v29 = (int *)(v70 + 4 * v14 * (int)v6);
                v30 = (int *)(v70 + 4 * v13 * (int)v6);
                v31 = (int *)v78;
                v32 = v73;
                do
                {
                  v34 = *v29++;
                  v33 = v34;
                  v35 = *v30++;
                  v36 = __OFADD__(v35, v33);
                  v37 = v35 + v33;
                  if (v37 < 0 != v36)
                    ++v37;
                  *v31++ = v37 >> 1;
                  --v32;
                }
                while (v32);
              }
              v27 = 1;
              v8 = v12;
              goto LABEL_30;
            }
          }
          v8 = v12;
          v5 = v68;
          v4 = v69;
LABEL_32:
          if (sub_20C700E4C((uint64_t)v3, v9, (uint64_t)&v78, a2))
            v38 = 1;
          else
            v38 = (int)v6 < 1;
          if (v38)
          {
            v27 = 0;
          }
          else
          {
            v67 = v8;
            v39 = 0;
            do
            {
              v40 = 0;
              v41 = __p[0];
              v42 = (char *)__p[0] + 20 * v39;
              v43 = 0x7FFFFFFF;
              v44 = -1;
              v45 = -1;
              do
              {
                v46 = v41[5 * v39 + 1 + ((v44 + *v42) & 3)];
                v47 = *(_DWORD *)(v10 + 4 * v39) - v46;
                if (*(_BYTE *)(a2 + 24))
                {
                  v48 = sub_20C704AA0(v47, v39, v40, __b, *v74, v81);
                }
                else
                {
                  if (v47 >= 0)
                    v49 = *(_DWORD *)(v10 + 4 * v39) - v46;
                  else
                    v49 = v46 - *(_DWORD *)(v10 + 4 * v39);
                  v48 = -__clz(v49 + 1);
                }
                if (v48 < v43)
                {
                  *((_DWORD *)v78 + v39) = v46;
                  v43 = v48;
                  v45 = v40;
                }
                ++v40;
                --v44;
              }
              while (v40 != 4);
              sub_20C6E8A80(v72, v45 & 1, __b);
              sub_20C6E8A80(v72, (v45 >> 1) & 1, &__b[(v45 & 1) + 1]);
              ++v39;
            }
            while (v39 != v73);
            v27 = 0;
            LODWORD(v6) = v65;
            v3 = v66;
            v5 = v68;
            v4 = v69;
            v8 = v67;
          }
          goto LABEL_50;
        }
      }
      else
      {
        v14 = v75;
        v13 = HIDWORD(v75);
        v15 = v76;
      }
    }
    if (!v71 || (v16 = v3[404], *(_BYTE *)(v16 + v14)) && *(_BYTE *)(v16 + v13) && *(_BYTE *)(v16 + v15))
    {
      if ((int)v6 >= 1)
      {
        v17 = (int *)(v70 + 4 * v14 * (int)v6);
        v18 = (int *)(v70 + 4 * v13 * (int)v6);
        v19 = (int *)(v70 + 4 * v15 * (int)v6);
        v20 = v78;
        v21 = v73;
        do
        {
          v23 = *v17++;
          v22 = v23;
          v24 = *v18++;
          v25 = v24 + v22;
          v26 = *v19++;
          *v20++ = v25 - v26;
          --v21;
        }
        while (v21);
      }
      v27 = 2;
      v8 = v12;
LABEL_30:
      v5 = v68;
      v4 = v69;
LABEL_50:
      if ((int)v6 >= 1)
      {
        v50 = (char *)__p[0] + 4;
        v51 = v73;
        v52 = (int *)v10;
        do
        {
          v54 = *v52++;
          v53 = v54;
          v55 = *((_DWORD *)v50 - 1);
          if (*(_DWORD *)&v50[4 * (((_BYTE)v55 - 1) & 3)] != v54)
          {
            *((_DWORD *)v50 - 1) = v55 + 1;
            *(_DWORD *)&v50[4 * (v55 & 3)] = v53;
          }
          v50 += 20;
          --v51;
        }
        while (v51);
      }
      sub_20C6FA124((uint64_t)v3, v8, v10, (uint64_t)v78, v6, v4, v74, (_QWORD *)v81 + 15 * v27);
      goto LABEL_56;
    }
    goto LABEL_20;
  }
LABEL_57:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v78)
  {
    v79[0] = v78;
    operator delete(v78);
  }
  v56 = 360;
  do
  {
    v57 = (char *)v81 + v56;
    v58 = (void *)v79[v56 / 8];
    if (v58)
    {
      *((_QWORD *)v57 - 2) = v58;
      operator delete(v58);
    }
    v59 = (void *)*((_QWORD *)v57 - 6);
    if (v59)
    {
      __p[v56 / 8 + 2] = v59;
      operator delete(v59);
    }
    v60 = (char *)v81 + v56;
    v61 = *(void **)((char *)&v75 + v56);
    if (v61)
    {
      *((_QWORD *)v60 - 8) = v61;
      operator delete(v61);
    }
    v62 = (void *)*((_QWORD *)v60 - 12);
    if (v62)
    {
      *(_QWORD *)((char *)&v81[-5] + v56 - 8) = v62;
      operator delete(v62);
    }
    v63 = (void *)*((_QWORD *)v57 - 15);
    if (v63)
    {
      *(_QWORD *)((char *)&v81[-7] + v56) = v63;
      operator delete(v63);
    }
    v56 -= 120;
  }
  while (v56);
  return 0;
}

void sub_20C7064B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v30;
  char *v31;
  void *v32;
  void *v33;
  char *v34;
  void *v35;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v30 = 360;
  while (1)
  {
    v31 = &a29 + v30;
    v32 = *(void **)(&a29 + v30 - 24);
    if (v32)
    {
      *((_QWORD *)v31 - 2) = v32;
      operator delete(v32);
    }
    v33 = (void *)*((_QWORD *)v31 - 6);
    if (v33)
    {
      *(_QWORD *)(&a29 + v30 - 40) = v33;
      operator delete(v33);
    }
    v34 = &a29 + v30;
    v35 = *(void **)(&a29 + v30 - 72);
    if (v35)
    {
      *((_QWORD *)v34 - 8) = v35;
      operator delete(v35);
    }
    v36 = (void *)*((_QWORD *)v34 - 12);
    if (v36)
    {
      *(_QWORD *)(&a29 + v30 - 88) = v36;
      operator delete(v36);
    }
    v37 = (void *)*((_QWORD *)v31 - 15);
    if (v37)
    {
      *(_QWORD *)(&a29 + v30 - 112) = v37;
      operator delete(v37);
    }
    v30 -= 120;
    if (!v30)
      _Unwind_Resume(exception_object);
  }
}

uint64_t sub_20C70656C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int *v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  unsigned int v29;
  _DWORD *v30;
  _DWORD *v31;
  int v32;
  char v33;
  unsigned int v34;
  int v35;
  int v36;
  signed int v37;
  int v38;
  char *v39;
  uint64_t v40;
  int *v41;
  int v42;
  int v43;
  int v44;
  uint64_t i;
  _QWORD *v46;
  void *v47;
  void *v48;
  char *v49;
  void *v50;
  void *v51;
  void *v52;
  int v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  int v65;
  void *__p[3];
  void *v67[3];
  unsigned __int16 __b[3];
  _OWORD v69[15];
  uint64_t v70;

  v3 = (_QWORD *)a1;
  v70 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a1 + 3136);
  v5 = *(unsigned int *)(a1 + 3548);
  v6 = *(int *)(a1 + 3544);
  v59 = *(_QWORD *)(a1 + 3208);
  v60 = *(_DWORD *)(a2 + 16);
  memset_pattern16(__b, &unk_20CAF8CE0, 6uLL);
  v7 = 0;
  memset(v69, 0, sizeof(v69));
  do
  {
    sub_20C6EC678((uint64_t)v69 + v7, v6);
    v7 += 120;
  }
  while (v7 != 240);
  LODWORD(__p[0]) = 0;
  sub_20C6E8A00(v67, v6, __p);
  sub_20C6F554C(__p, v6);
  if ((int)v5 >= 1)
  {
    v8 = 0;
    v61 = (uint64_t)(v3 + 445);
    v62 = v6;
    v63 = (_BYTE *)(a2 + 8);
    v55 = v4;
    v56 = v3;
    v58 = v5;
    v54 = v6;
    while (1)
    {
      v9 = *(int *)(v3[413] + 4 * v8);
      if (!v60 || *(_BYTE *)(v3[404] + v9))
        break;
LABEL_46:
      if (++v8 == v5)
        goto LABEL_47;
    }
    v10 = v59 + 4 * (int)v9 * (int)v6;
    v11 = *(_DWORD *)(v3[416] + 4 * v9);
    if ((v11 & 0x80000000) != 0)
      goto LABEL_22;
    v12 = v4;
    v13 = v8;
    v65 = -1;
    v64 = -1;
    sub_20C7004AC(v3, v11, v9, (unsigned int *)(v3[17] + 12 * v11), &v64);
    v14 = v64;
    v15 = HIDWORD(v64);
    if (v64 < 0)
    {
      sub_20C7004AC(v3, v11, v9, (unsigned int *)(v3[20] + 12 * v11), &v64);
      if (v64 < 0)
      {
        if (v15 == -1)
        {
LABEL_21:
          v8 = v13;
          v4 = v12;
          v5 = v58;
LABEL_22:
          if (sub_20C700E4C((uint64_t)v3, v9, (uint64_t)v67, a2))
            v27 = 1;
          else
            v27 = (int)v6 < 1;
          if (v27)
          {
            v26 = 0;
          }
          else
          {
            v57 = v8;
            v28 = 0;
            do
            {
              v29 = 0;
              v30 = __p[0];
              v31 = (char *)__p[0] + 20 * v28;
              v32 = 0x7FFFFFFF;
              v33 = -1;
              v34 = -1;
              do
              {
                v35 = v30[5 * v28 + 1 + ((v33 + *v31) & 3)];
                v36 = *(_DWORD *)(v10 + 4 * v28) - v35;
                if (*(_BYTE *)(a2 + 24))
                {
                  v37 = sub_20C704AA0(v36, v28, v29, __b, *v63, v69);
                }
                else
                {
                  if (v36 >= 0)
                    v38 = *(_DWORD *)(v10 + 4 * v28) - v35;
                  else
                    v38 = v35 - *(_DWORD *)(v10 + 4 * v28);
                  v37 = -__clz(v38 + 1);
                }
                if (v37 < v32)
                {
                  *((_DWORD *)v67[0] + v28) = v35;
                  v32 = v37;
                  v34 = v29;
                }
                ++v29;
                --v33;
              }
              while (v29 != 4);
              sub_20C6E8A80(v61, v34 & 1, __b);
              sub_20C6E8A80(v61, (v34 >> 1) & 1, &__b[(v34 & 1) + 1]);
              ++v28;
            }
            while (v28 != v62);
            v26 = 0;
            v4 = v55;
            v3 = v56;
            v8 = v57;
            v5 = v58;
            LODWORD(v6) = v54;
          }
          goto LABEL_40;
        }
      }
      else
      {
        v14 = v64;
        v15 = HIDWORD(v64);
      }
    }
    if (!v60 || (v16 = v3[404], *(_BYTE *)(v16 + v14)) && *(_BYTE *)(v16 + v15))
    {
      if ((int)v6 >= 1)
      {
        v17 = (int *)(v59 + 4 * v14 * (int)v6);
        v18 = (int *)(v59 + 4 * v15 * (int)v6);
        v19 = (int *)v67[0];
        v20 = v62;
        do
        {
          v22 = *v17++;
          v21 = v22;
          v23 = *v18++;
          v24 = __OFADD__(v23, v21);
          v25 = v23 + v21;
          if (v25 < 0 != v24)
            ++v25;
          *v19++ = v25 >> 1;
          --v20;
        }
        while (v20);
      }
      v26 = 1;
      v8 = v13;
      v4 = v12;
      v5 = v58;
LABEL_40:
      if ((int)v6 >= 1)
      {
        v39 = (char *)__p[0] + 4;
        v40 = v62;
        v41 = (int *)v10;
        do
        {
          v43 = *v41++;
          v42 = v43;
          v44 = *((_DWORD *)v39 - 1);
          if (*(_DWORD *)&v39[4 * (((_BYTE)v44 - 1) & 3)] != v43)
          {
            *((_DWORD *)v39 - 1) = v44 + 1;
            *(_DWORD *)&v39[4 * (v44 & 3)] = v42;
          }
          v39 += 20;
          --v40;
        }
        while (v40);
      }
      sub_20C6FA124((uint64_t)v3, v8, v10, (uint64_t)v67[0], v6, v4, v63, (_QWORD *)v69 + 15 * v26);
      goto LABEL_46;
    }
    goto LABEL_21;
  }
LABEL_47:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v67[0])
  {
    v67[1] = v67[0];
    operator delete(v67[0]);
  }
  for (i = 0; i != -240; i -= 120)
  {
    v46 = (_QWORD *)((char *)v69 + i);
    v47 = *(void **)((char *)&v69[13] + i + 8);
    if (v47)
    {
      v46[28] = v47;
      operator delete(v47);
    }
    v48 = (void *)v46[24];
    if (v48)
    {
      *(_QWORD *)((char *)&v69[12] + i + 8) = v48;
      operator delete(v48);
    }
    v49 = (char *)v69 + i;
    v50 = *(void **)((char *)&v69[10] + i + 8);
    if (v50)
    {
      *((_QWORD *)v49 + 22) = v50;
      operator delete(v50);
    }
    v51 = (void *)*((_QWORD *)v49 + 18);
    if (v51)
    {
      *(_QWORD *)((char *)&v69[9] + i + 8) = v51;
      operator delete(v51);
    }
    v52 = (void *)v46[15];
    if (v52)
    {
      *(_QWORD *)((char *)&v69[8] + i) = v52;
      operator delete(v52);
    }
  }
  return 0;
}

void sub_20C706A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v30;
  char *v31;
  void *v32;
  void *v33;
  char *v34;
  void *v35;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v30 = 0;
  while (1)
  {
    v31 = &a29 + v30;
    v32 = *(void **)(&a29 + v30 + 216);
    if (v32)
    {
      *((_QWORD *)v31 + 28) = v32;
      operator delete(v32);
    }
    v33 = (void *)*((_QWORD *)v31 + 24);
    if (v33)
    {
      *(_QWORD *)(&a29 + v30 + 200) = v33;
      operator delete(v33);
    }
    v34 = &a29 + v30;
    v35 = *(void **)(&a29 + v30 + 168);
    if (v35)
    {
      *((_QWORD *)v34 + 22) = v35;
      operator delete(v35);
    }
    v36 = (void *)*((_QWORD *)v34 + 18);
    if (v36)
    {
      *(_QWORD *)(&a29 + v30 + 152) = v36;
      operator delete(v36);
    }
    v37 = (void *)*((_QWORD *)v31 + 15);
    if (v37)
    {
      *(_QWORD *)(&a29 + v30 + 128) = v37;
      operator delete(v37);
    }
    v30 -= 120;
    if (v30 == -240)
      _Unwind_Resume(exception_object);
  }
}

uint64_t sub_20C706AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  _WORD __b[2];

  if (*(_DWORD *)(a2 + 16) == 1)
  {
    v4 = *(unsigned int *)(a1 + 3548);
    memset_pattern16(__b, &unk_20CAF8CE0, 4uLL);
    if ((int)v4 >= 1)
    {
      v5 = 0;
      v6 = 4 * v4;
      do
      {
        v7 = *(int *)(*(_QWORD *)(a1 + 3304) + v5);
        v8 = *(unsigned int *)(*(_QWORD *)(a1 + 3328) + 4 * v7);
        v20 = -1;
        v19 = -1;
        v18 = -1;
        v17 = -1;
        if ((v8 & 0x80000000) != 0)
        {
          v13 = 0;
          v14 = *(_QWORD *)(a1 + 3096);
        }
        else
        {
          v9 = (unsigned int *)(*(_QWORD *)(a1 + 160) + 12 * v8);
          sub_20C7004AC((_QWORD *)a1, v8, v7, (unsigned int *)(*(_QWORD *)(a1 + 136) + 12 * v8), &v19);
          sub_20C7004AC((_QWORD *)a1, v8, v7, v9, &v17);
          v10 = v20;
          if ((v20 & 0x80000000) == 0 || v18 < 0)
          {
            v12 = v20;
            v10 = v18;
          }
          else
          {
            v11 = v19;
            v19 = v17;
            v12 = v18;
            v20 = v18;
            v17 = v11;
          }
          if (v10 == -1)
          {
            v14 = *(_QWORD *)(a1 + 3096);
            if (v12 == -1)
            {
              if (HIDWORD(v19) == -1)
              {
                if ((_DWORD)v19 == -1)
                  v13 = 0;
                else
                  v13 = *(unsigned __int8 *)(v14 + (int)v19);
              }
              else
              {
                LODWORD(v13) = *(unsigned __int8 *)(v14 + (int)v19);
                if (*(_BYTE *)(v14 + (int)v19))
                  LODWORD(v13) = *(_BYTE *)(v14 + SHIDWORD(v19)) != 0;
                v13 = v13;
              }
              goto LABEL_17;
            }
            v15 = *(unsigned __int8 *)(v14 + SHIDWORD(v19))
                + *(unsigned __int8 *)(v14 + (int)v19)
                + *(unsigned __int8 *)(v14 + v12) > 1;
          }
          else
          {
            v14 = *(_QWORD *)(a1 + 3096);
            v15 = *(unsigned __int8 *)(v14 + SHIDWORD(v19))
                + *(unsigned __int8 *)(v14 + (int)v19)
                + *(unsigned __int8 *)(v14 + v12)
                + *(unsigned __int8 *)(v14 + (int)v17)
                + *(unsigned __int8 *)(v14 + SHIDWORD(v17))
                + *(unsigned __int8 *)(v14 + v10) > 2;
          }
          v13 = v15;
        }
LABEL_17:
        v5 += 4;
        sub_20C6E8A80(a1 + 3560, *(unsigned __int8 *)(v14 + v7) != 0, &__b[v13]);
      }
      while (v6 != v5);
    }
  }
  switch(*(_DWORD *)(a2 + 12))
  {
    case 0:
      sub_20C70656C(a1, a2);
      goto LABEL_35;
    case 1:
      sub_20C705F74(a1, a2);
      goto LABEL_35;
    case 2:
      sub_20C705348(a1, a2);
      goto LABEL_35;
    case 3:
      sub_20C704B1C(a1, a2);
      goto LABEL_35;
    case 4:
      sub_20C7037B0(a1, a2);
      goto LABEL_35;
    case 5:
      sub_20C7030E4(a1, a2);
      goto LABEL_35;
    case 6:
      sub_20C701120(a1, a2);
LABEL_35:
      result = 0;
      break;
    default:
      result = 5;
      break;
  }
  return result;
}

_QWORD *sub_20C706D80(_QWORD *a1)
{
  void *v2;

  v2 = operator new(0x1330uLL);
  sub_20C706F6C((uint64_t)v2);
  *a1 = v2;
  return a1;
}

void sub_20C706DB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C706DCC(uint64_t *a1)
{
  sub_20C707DC0(a1, 0);
  return a1;
}

double sub_20C706DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10)
{
  return sub_20C6F6820(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_20C706E00(int **a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int *a6, uint64_t a7)
{
  return sub_20C6F68FC(*a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_20C706E08(int **a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, const void *a6, unint64_t a7, int *a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  return sub_20C6F59A0(*a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0, 0, 0, a12);
}

uint64_t sub_20C706E40(unsigned int **a1, uint64_t a2, _BYTE *a3, unsigned int a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  return sub_20C6F601C(*a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_20C706E50(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 64);
}

uint64_t sub_20C706E5C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 40);
}

uint64_t sub_20C706E68(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 256);
}

uint64_t sub_20C706E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if (*(_DWORD *)(a8 + 16))
    v8 = a4;
  else
    v8 = 0;
  if (*(_DWORD *)(a8 + 20))
    v9 = 4 * a7;
  else
    v9 = 0;
  return v8 + 4 * a4 * a5 + v9 + 1024;
}

uint64_t sub_20C706EA0(int **a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int *a8, uint64_t a9)
{
  int *v9;
  char v10;
  unsigned int v11;
  char v12;
  int v13;

  v9 = *a1;
  *(_DWORD *)(a9 + 16) = a3 != 0;
  *(_DWORD *)(a9 + 20) = a7 != 0;
  if (a4 == 1 && *v9 <= 79)
    v10 = 2;
  else
    v10 = 4;
  *(_BYTE *)(a9 + 8) = v10;
  v11 = *a8;
  if (*a8 - 3 < 4)
  {
    v12 = 0;
    if (a4 == 1)
      v13 = 3;
    else
      v13 = 1;
  }
  else if (v11 >= 3)
  {
    if (v11 == 11)
      return 0;
    if (a4 == 1)
      v13 = 4;
    else
      v13 = 2;
    v12 = 1;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  *(_DWORD *)(a9 + 12) = v13;
  *(_BYTE *)(a9 + 24) = v12;
  return 0;
}

uint64_t sub_20C706F44(uint64_t *a1, int *a2, _BYTE *a3, int a4, unint64_t a5, uint64_t a6, unint64_t a7, int *a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  return sub_20C6FFD4C(*a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_20C706F60(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 3280);
}

uint64_t sub_20C706F6C(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  bzero((void *)(a1 + 36), 0x220uLL);
  *(_DWORD *)(a1 + 580) = -1;
  bzero((void *)(a1 + 584), 0x700uLL);
  memset_pattern16((void *)(a1 + 2376), &unk_20CAF8CE0, 0xAuLL);
  *(_WORD *)(a1 + 2386) = 0x8000;
  memset_pattern16((void *)(a1 + 2388), &unk_20CAF8CE0, 0x60uLL);
  *(_WORD *)(a1 + 2484) = 0x8000;
  memset_pattern16((void *)(a1 + 2486), &unk_20CAF8CE0, 6uLL);
  *(_WORD *)(a1 + 2492) = 0x8000;
  memset_pattern16((void *)(a1 + 2494), &unk_20CAF8CE0, 0x50uLL);
  *(_DWORD *)(a1 + 2574) = -2147450880;
  memset_pattern16((void *)(a1 + 2578), &unk_20CAF8CE0, 0x20uLL);
  *(_DWORD *)(a1 + 2610) = -2147450880;
  *(_WORD *)(a1 + 2614) = 0x8000;
  memset_pattern16((void *)(a1 + 2616), &unk_20CAF8CE0, 0x80uLL);
  memset_pattern16((void *)(a1 + 2744), &unk_20CAF8CE0, 6uLL);
  *(_WORD *)(a1 + 2750) = 0x8000;
  memset_pattern16((void *)(a1 + 2752), &unk_20CAF8CE0, 6uLL);
  *(_DWORD *)(a1 + 3552) = 0;
  *(_OWORD *)(a1 + 3536) = 0u;
  *(_OWORD *)(a1 + 3520) = 0u;
  *(_OWORD *)(a1 + 3504) = 0u;
  *(_OWORD *)(a1 + 3488) = 0u;
  *(_OWORD *)(a1 + 3472) = 0u;
  *(_OWORD *)(a1 + 3456) = 0u;
  *(_OWORD *)(a1 + 3440) = 0u;
  *(_OWORD *)(a1 + 3424) = 0u;
  *(_OWORD *)(a1 + 3408) = 0u;
  *(_OWORD *)(a1 + 3392) = 0u;
  *(_OWORD *)(a1 + 3376) = 0u;
  *(_OWORD *)(a1 + 3360) = 0u;
  *(_OWORD *)(a1 + 3344) = 0u;
  *(_OWORD *)(a1 + 3328) = 0u;
  *(_OWORD *)(a1 + 3312) = 0u;
  *(_OWORD *)(a1 + 3296) = 0u;
  *(_OWORD *)(a1 + 3280) = 0u;
  *(_OWORD *)(a1 + 3264) = 0u;
  *(_OWORD *)(a1 + 3248) = 0u;
  *(_OWORD *)(a1 + 3232) = 0u;
  *(_OWORD *)(a1 + 3216) = 0u;
  *(_OWORD *)(a1 + 3200) = 0u;
  *(_OWORD *)(a1 + 3184) = 0u;
  *(_OWORD *)(a1 + 3168) = 0u;
  *(_OWORD *)(a1 + 3152) = 0u;
  *(_OWORD *)(a1 + 3136) = 0u;
  *(_QWORD *)(a1 + 3568) = 0;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_OWORD *)(a1 + 2792) = 0u;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_OWORD *)(a1 + 2824) = 0u;
  *(_OWORD *)(a1 + 2840) = 0u;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_OWORD *)(a1 + 2872) = 0u;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_OWORD *)(a1 + 2920) = 0u;
  *(_OWORD *)(a1 + 2936) = 0u;
  *(_OWORD *)(a1 + 2952) = 0u;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2984) = 0u;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_OWORD *)(a1 + 3016) = 0u;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(_OWORD *)(a1 + 3048) = 0u;
  *(_OWORD *)(a1 + 3064) = 0u;
  *(_OWORD *)(a1 + 3080) = 0u;
  *(_OWORD *)(a1 + 3096) = 0u;
  *(_OWORD *)(a1 + 3112) = 0u;
  *(_DWORD *)(a1 + 3128) = 0;
  sub_20BDDBD68(a1 + 4632);
  return a1;
}

void sub_20C707160(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  sub_20C707190(v3);
  sub_20C6EC7C0((uint64_t)(v1 + 375));
  sub_20C707270(v2);
  sub_20C7073C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C707190(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  sub_20C6E8E3C(a1 + 336);
  sub_20C6E8E3C(a1 + 264);
  v2 = *(void **)(a1 + 240);
  if (v2)
  {
    *(_QWORD *)(a1 + 248) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 216);
  if (v3)
  {
    *(_QWORD *)(a1 + 224) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 192);
  if (v4)
  {
    *(_QWORD *)(a1 + 200) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 168);
  if (v5)
  {
    *(_QWORD *)(a1 + 176) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 144);
  if (v6)
  {
    *(_QWORD *)(a1 + 152) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 120);
  if (v7)
  {
    *(_QWORD *)(a1 + 128) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 96);
  if (v8)
  {
    *(_QWORD *)(a1 + 104) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 72);
  if (v9)
  {
    *(_QWORD *)(a1 + 80) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 48);
  if (v10)
  {
    *(_QWORD *)(a1 + 56) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 24);
  if (v11)
  {
    *(_QWORD *)(a1 + 32) = v11;
    operator delete(v11);
  }
  v12 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v12;
    operator delete(v12);
  }
  return a1;
}

_QWORD *sub_20C707270(_QWORD *a1)
{
  uint64_t i;
  _QWORD *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  for (i = 338; i != 308; i -= 15)
  {
    v3 = &a1[i];
    v4 = (void *)a1[i - 1];
    if (v4)
    {
      a1[i] = v4;
      operator delete(v4);
    }
    v5 = (void *)*(v3 - 4);
    if (v5)
    {
      a1[i - 3] = v5;
      operator delete(v5);
    }
    v6 = &a1[i];
    v7 = (void *)a1[i - 7];
    if (v7)
    {
      *(v6 - 6) = v7;
      operator delete(v7);
    }
    v8 = (void *)*(v6 - 10);
    if (v8)
    {
      a1[i - 9] = v8;
      operator delete(v8);
    }
    v9 = (void *)*(v3 - 13);
    if (v9)
    {
      a1[i - 12] = v9;
      operator delete(v9);
    }
  }
  v10 = 192;
  do
  {
    v11 = (void *)a1[v10 + 35];
    if (v11)
    {
      a1[v10 + 36] = v11;
      operator delete(v11);
    }
    v10 -= 3;
  }
  while (v10 * 8);
  v12 = (void *)a1[34];
  if (v12)
  {
    a1[35] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[31];
  if (v13)
  {
    a1[32] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[28];
  if (v14)
  {
    a1[29] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[25];
  if (v15)
  {
    a1[26] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[22];
  if (v16)
  {
    a1[23] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[19];
  if (v17)
  {
    a1[20] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[16];
  if (v18)
  {
    a1[17] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[13];
  if (v19)
  {
    a1[14] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[10];
  if (v20)
  {
    a1[11] = v20;
    operator delete(v20);
  }
  sub_20C6E8E3C((uint64_t)(a1 + 1));
  return a1;
}

_QWORD *sub_20C7073C4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[26];
  if (v4)
  {
    a1[27] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[23];
  if (v5)
  {
    a1[24] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[20];
  if (v6)
  {
    a1[21] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[17];
  if (v7)
  {
    a1[18] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[14];
  if (v8)
  {
    a1[15] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[11];
  if (v9)
  {
    a1[12] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[8];
  if (v10)
  {
    a1[9] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[5];
  if (v11)
  {
    a1[6] = v11;
    operator delete(v11);
  }
  return a1;
}

_QWORD *sub_20C707484(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)(a1 + 4632) = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + 4632 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 4648) = v4;
  *(_QWORD *)(a1 + 4656) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 4743) < 0)
    operator delete(*(void **)(a1 + 4720));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212B92EB0](a1 + 4760);
  sub_20C707190(a1 + 3136);
  v5 = *(void **)(a1 + 3096);
  if (v5)
  {
    *(_QWORD *)(a1 + 3104) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 3072);
  if (v6)
  {
    *(_QWORD *)(a1 + 3080) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 3048);
  if (v7)
  {
    *(_QWORD *)(a1 + 3056) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 3024);
  if (v8)
  {
    *(_QWORD *)(a1 + 3032) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 3000);
  if (v9)
  {
    *(_QWORD *)(a1 + 3008) = v9;
    operator delete(v9);
  }
  sub_20C707270((_QWORD *)(a1 + 280));
  return sub_20C7073C4((_QWORD *)a1);
}

void sub_20C707580(_QWORD *a1, uint64_t a2)
{
  int **v4;
  int *v5;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = (int **)(a1 + 1);
  sub_20C6E8D90((uint64_t)(a1 + 1), *(_DWORD *)a2);
  v5 = *(int **)(a2 + 208);
  v6 = *(int **)(a2 + 216);
  if (v5 != v6)
  {
    v7 = *v4;
    do
    {
      v8 = *v5++;
      ++v7[v8 + 1];
    }
    while (v5 != v6);
  }
  sub_20C6E8DFC(v4);
  v9 = *(unsigned int *)(a2 + 4);
  if ((int)v9 >= 1)
  {
    v10 = 0;
    v11 = a1[7];
    v12 = *(_QWORD *)(a2 + 232);
    v13 = *(_QWORD *)(a2 + 208);
    do
    {
      v14 = *(int *)(v12 + 4 * v10);
      v15 = v10 + 1;
      v16 = *(int *)(v12 + 4 * (v10 + 1));
      if ((int)v14 < (int)v16)
      {
        v17 = a1[1];
        v18 = a1[4];
        do
        {
          v19 = *(int *)(v13 + 4 * v14);
          v20 = *(int *)(v17 + 4 * v19);
          v21 = *(int *)(v18 + 4 * v19);
          v22 = v21 + v20;
          if ((int)v21 <= 0)
          {
LABEL_12:
            *(_DWORD *)(v18 + 4 * v19) = v21 + 1;
            *(_DWORD *)(v11 + 4 * v22) = v10;
          }
          else
          {
            v22 = (int)v22;
            while (v10 != *(_DWORD *)(v11 + 4 * v20))
            {
              if (++v20 >= (int)v22)
                goto LABEL_12;
            }
          }
          ++v14;
        }
        while (v14 != v16);
      }
      ++v10;
    }
    while (v15 != v9);
  }
}

uint64_t sub_20C70767C(int *a1, int a2, int a3, unsigned __int16 **a4)
{
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned __int16 *v26;
  char v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned __int16 *v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;

  if (a3)
  {
    if (a3 != 4)
    {
      if (a3 == 2 && a2 >= 1)
      {
        LODWORD(v4) = 0;
        v5 = a4[3];
        v6 = a4[12];
        v7 = a2;
        while (1)
        {
          v9 = *a1++;
          v8 = v9;
          if (v9 < 1)
          {
            if ((v8 & 0x80000000) == 0)
              goto LABEL_10;
            v10 = *v5 + 2048;
          }
          else
          {
            v10 = 67584 - *v5;
          }
          LODWORD(v4) = *(_DWORD *)((char *)&unk_20CAF8E3C + ((v10 >> 10) & 0x3FFFFFFFFFFFFCLL)) + v4;
LABEL_10:
          v12 = *(_DWORD *)v6;
          v6 += 2;
          v11 = v12;
          if (v8 < 0)
            v8 = -v8;
          v4 = (_DWORD)v4 + 66560 + (v11 << 10) - (__clz((v8 >> v11) + 1) << 11);
          ++v5;
          if (!--v7)
            return v4;
        }
      }
      return 0;
    }
    if (a2 >= 1)
    {
      v40 = 0;
      LODWORD(v4) = 0;
      v41 = *a4;
      v42 = a4[3];
      v43 = a4[6];
      v44 = a4[12];
      do
      {
        v46 = *a1++;
        v45 = v46;
        v48 = *v41++;
        v47 = v48;
        if (v45)
        {
          v49 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((unint64_t)(67584 - v47) >> 10) & 0x3FFFFFFFFFFFFCLL))
              + v4;
          if (v45 >= 0)
            v50 = v45;
          else
            v50 = -v45;
          if (v45 >= 0)
            v51 = 0x10000 - *v42;
          else
            v51 = *v42;
          v52 = v49 + *(_DWORD *)((char *)&unk_20CAF8E3C + (((v51 + 2048) >> 10) & 0xFCLL));
          v53 = &v43[(int)v40];
          if (v50 > 0x3F)
          {
            v66 = *(_DWORD *)v44;
            v4 = v52
               + 66560
               + *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)*v53) >> 10) & 0x3FFFFFFFFFFFFCLL))
               + *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v53[2]) >> 10) & 0x3FFFFFFFFFFFFCLL))
               + *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v53[6]) >> 10) & 0x3FFFFFFFFFFFFCLL))
               + *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v53[14]) >> 10) & 0x3FFFFFFFFFFFFCLL))
               + *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v53[30]) >> 10) & 0x3FFFFFFFFFFFFCLL))
               + *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v53[62]) >> 10) & 0x3FFFFFFFFFFFFCLL))
               + (v66 << 10)
               - (__clz(((v50 - 64) >> v66) + 1) << 11);
          }
          else
          {
            v54 = v50 - 1;
            v55 = *v53;
            if ((v54 & 0x20) != 0)
              v55 = 0x10000 - v55;
            v56 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v55 + 2048) >> 10) & 0xFCLL));
            v57 = v53[(v54 >> 5) + 1];
            if ((v54 & 0x10) != 0)
              v57 = 0x10000 - v57;
            v58 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v57 + 2048) >> 10) & 0xFCLL));
            v59 = v53[(v54 >> 4) + 3];
            if ((v54 & 8) != 0)
              v59 = 0x10000 - v59;
            v60 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v59 + 2048) >> 10) & 0xFCLL));
            v61 = v53[(v54 >> 3) + 7];
            if ((v54 & 4) != 0)
              v61 = 0x10000 - v61;
            v62 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v61 + 2048) >> 10) & 0xFCLL));
            v63 = v53[(v54 >> 2) + 15];
            if ((v54 & 2) != 0)
              v63 = 0x10000 - v63;
            v64 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v63 + 2048) >> 10) & 0xFCLL));
            v65 = v53[(v54 >> 1) + 31];
            if ((v54 & 1) != 0)
              v65 = 0x10000 - v65;
            v4 = (v56
                              + v52
                              + v58
                              + v60
                              + v62
                              + v64
                              + *(_DWORD *)((char *)&unk_20CAF8E3C + (((v65 + 2048) >> 10) & 0xFCLL)));
          }
        }
        else
        {
          v4 = (*(_DWORD *)((char *)&unk_20CAF8E3C + (((v47 + 2048) >> 10) & 0x7CLL)) + v4);
        }
        v40 += 64;
        ++v42;
        v44 += 2;
      }
      while ((unint64_t)a2 << 6 != v40);
      return v4;
    }
    return 0;
  }
  if (a2 < 1)
    return 0;
  v13 = 0;
  LODWORD(v4) = 0;
  v14 = *a4;
  v15 = a4[3];
  v16 = a4[6];
  v17 = a4[12];
  do
  {
    v19 = *a1++;
    v18 = v19;
    v21 = *v14++;
    v20 = v21;
    if (v18)
    {
      v22 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((unint64_t)(67584 - v20) >> 10) & 0x3FFFFFFFFFFFFCLL)) + v4;
      if (v18 >= 0)
        v23 = v18;
      else
        v23 = -v18;
      if (v18 >= 0)
        v24 = 0x10000 - *v15;
      else
        v24 = *v15;
      v25 = v22 + *(_DWORD *)((char *)&unk_20CAF8E3C + (((v24 + 2048) >> 10) & 0xFCLL));
      v26 = &v16[(int)v13];
      if (v23 > 0x3F)
      {
        v39 = *(_DWORD *)v17;
        v4 = v25
           + 66560
           + *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)*v26) >> 10) & 0x3FFFFFFFFFFFFCLL))
           + *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v26[2]) >> 10) & 0x3FFFFFFFFFFFFCLL))
           + *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v26[6]) >> 10) & 0x3FFFFFFFFFFFFCLL))
           + *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v26[14]) >> 10) & 0x3FFFFFFFFFFFFCLL))
           + *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v26[30]) >> 10) & 0x3FFFFFFFFFFFFCLL))
           + *(_DWORD *)((char *)&unk_20CAF8E3C + (((67584 - (unint64_t)v26[62]) >> 10) & 0x3FFFFFFFFFFFFCLL))
           + (v39 << 10)
           - (__clz(((v23 - 64) >> v39) + 1) << 11);
      }
      else
      {
        v27 = v23 - 1;
        v28 = *v26;
        if ((v27 & 1) != 0)
          v28 = 0x10000 - v28;
        v29 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v28 + 2048) >> 10) & 0xFCLL));
        v30 = v26[(v27 & 1) + 1];
        if ((v27 & 2) != 0)
          v30 = 0x10000 - v30;
        v31 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v30 + 2048) >> 10) & 0xFCLL));
        v32 = v26[(v27 & 3) + 3];
        if ((v27 & 4) != 0)
          v32 = 0x10000 - v32;
        v33 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v32 + 2048) >> 10) & 0xFCLL));
        v34 = v26[(v27 & 7) + 7];
        if ((v27 & 8) != 0)
          v34 = 0x10000 - v34;
        v35 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v34 + 2048) >> 10) & 0xFCLL));
        v36 = v26[(v27 & 0xF) + 15];
        if ((v27 & 0x10) != 0)
          v36 = 0x10000 - v36;
        v37 = *(_DWORD *)((char *)&unk_20CAF8E3C + (((v36 + 2048) >> 10) & 0xFCLL));
        v38 = v26[(v27 & 0x1F) + 31];
        if ((v27 & 0x20) != 0)
          v38 = 0x10000 - v38;
        v4 = (v29
                          + v25
                          + v31
                          + v33
                          + v35
                          + v37
                          + *(_DWORD *)((char *)&unk_20CAF8E3C + (((v38 + 2048) >> 10) & 0xFCLL)));
      }
    }
    else
    {
      v4 = (*(_DWORD *)((char *)&unk_20CAF8E3C + (((v20 + 2048) >> 10) & 0x7CLL)) + v4);
    }
    v13 += 64;
    ++v15;
    v17 += 2;
  }
  while ((unint64_t)a2 << 6 != v13);
  return v4;
}

void sub_20C707C34(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  int v20;

  v6 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 16;
  v5 = v6;
  v7 = *(_DWORD **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v7) >> 2) >= a2)
  {
    if (a2)
    {
      v14 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      memset(*(void **)(v4 - 8), 255, v14);
      v7 = (_DWORD *)((char *)v7 + v14);
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
  else
  {
    v8 = *(_DWORD **)a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *(_QWORD *)a1) >> 2);
    v10 = v9 + a2;
    if (v9 + a2 > 0x1555555555555555)
      sub_20BDDF694();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (uint64_t)v8) >> 2);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_20C152228(v4, v12);
      v8 = *(_DWORD **)a1;
      v7 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v15 = &v13[12 * v9];
    v16 = &v13[12 * v12];
    v17 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    memset(v15, 255, v17);
    v18 = &v15[v17];
    if (v7 != v8)
    {
      do
      {
        v19 = *(_QWORD *)(v7 - 3);
        v7 -= 3;
        v20 = v7[2];
        *(_QWORD *)(v15 - 12) = v19;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v20;
      }
      while (v7 != v8);
      v8 = *(_DWORD **)a1;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v18;
    *(_QWORD *)(a1 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_20C707DC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = sub_20C707484(v3);
    operator delete(v4);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::~UsdInteractivePreliminary_Action(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542210;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "aaplUsdInteractive/preliminary_Action.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdInteractivePreliminary_Action pxrInternal__aapl__pxrReserved__::UsdInteractivePrel"
                            "iminary_Action::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542210;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C707F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C0B8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C0B8))
  {
    __cxa_guard_release(&qword_25498C0B8);
  }
  return &qword_25498C0B0;
}

void sub_20C708004(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C0B8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C0C8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *)__cxa_guard_acquire(&qword_25498C0C8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::_GetStaticTfType(v3);
      byte_25498C0C0 = sub_20C35BD7C((char *)&qword_25498C0B0, v4, v5);
      __cxa_guard_release(&qword_25498C0C8);
    }
  }
  return byte_25498C0C0;
}

void sub_20C708080(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C0C8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this)
{
  pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::_GetStaticTfType(this);
  return &qword_25498C0B0;
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::GetInfoIdAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 144), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C708158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::CreateInfoIdAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8)
    v8 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 144), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::GetMultiplePerformOperationAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 184), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C7082B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::CreateMultiplePerformOperationAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8)
    v8 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 184), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C0E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C0E8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v5)
      v5 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    v6 = *((_QWORD *)v5 + 18);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v9)
      v9 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 23);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498C0D0, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C0D0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C0E8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C108);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C108))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_20C7085C8((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C0F0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C108);
  }
  if (v1)
    return &qword_25498C0F0;
  else
    return &qword_25498C0D0;
}

void sub_20C708544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498C0E8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7085C8(uint64_t **a1)
{
  qword_25498C0F8 = 0;
  unk_25498C100 = 0;
  qword_25498C0F0 = 0;
  sub_20BFC9A6C((char **)&qword_25498C0F0, ((unk_25498C0D8 - qword_25498C0D0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C0F0, (_QWORD *)qword_25498C0F8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C0F0, (_QWORD *)qword_25498C0F8, (uint64_t *)qword_25498C0D0, unk_25498C0D8, (unk_25498C0D8 - qword_25498C0D0) >> 3);
}

void sub_20C70865C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C70867C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5647E8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C708750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *sub_20C7087A0(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *result;
  void *v4;

  result = sub_20C7087E8();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C708828((uint64_t)result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *sub_20C7087E8()
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)operator new(0x158uLL);
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType::AaplUsdInteractiveTokensType(v0);
  return v0;
}

void sub_20C708814(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C708828(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  void **v122;

  v122 = (void **)(a1 + 320);
  sub_20BEEB2B8(&v122);
  v2 = *(_QWORD *)(a1 + 312);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 304);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 296);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 288);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 280);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 272);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *(_QWORD *)(a1 + 264);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *(_QWORD *)(a1 + 256);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *(_QWORD *)(a1 + 248);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *(_QWORD *)(a1 + 240);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *(_QWORD *)(a1 + 232);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *(_QWORD *)(a1 + 224);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(a1 + 216);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *(_QWORD *)(a1 + 208);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *(_QWORD *)(a1 + 200);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *(_QWORD *)(a1 + 192);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *(_QWORD *)(a1 + 184);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *(_QWORD *)(a1 + 176);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *(_QWORD *)(a1 + 168);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *(_QWORD *)(a1 + 160);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *(_QWORD *)(a1 + 152);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *(_QWORD *)(a1 + 144);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *(_QWORD *)(a1 + 136);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *(_QWORD *)(a1 + 128);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *(_QWORD *)(a1 + 120);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *(_QWORD *)(a1 + 112);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *(_QWORD *)(a1 + 104);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *(_QWORD *)(a1 + 96);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *(_QWORD *)(a1 + 88);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *(_QWORD *)(a1 + 80);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *(_QWORD *)(a1 + 72);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = *(_QWORD *)(a1 + 64);
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = *(_QWORD *)(a1 + 56);
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  v101 = *(_QWORD *)(a1 + 48);
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  v104 = *(_QWORD *)(a1 + 40);
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  v107 = *(_QWORD *)(a1 + 32);
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  v110 = *(_QWORD *)(a1 + 24);
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  v113 = *(_QWORD *)(a1 + 16);
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stlxr(v115 - 2, v114));
  }
  v116 = *(_QWORD *)(a1 + 8);
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stlxr(v118 - 2, v117));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v119 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v120 = __ldxr(v119);
    while (__stlxr(v120 - 2, v119));
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::~UsdInteractivePreliminary_AnchoringAPI(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C542268;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "aaplUsdInteractive/preliminary_AnchoringAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdInteractivePreliminary_AnchoringAPI pxrInternal__aapl__pxrReserved__::UsdInteracti"
                            "vePreliminary_AnchoringAPI::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C542268;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C708EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this)
{
  return 5;
}

uint64_t sub_20C708F1C(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C110, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C7090D4(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C542268;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C542268;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C7090C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7090D4(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C110, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdInteractivePreliminary_AnchoringAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C118);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C118))
  {
    __cxa_guard_release(&qword_25498C118);
  }
  return &qword_25498C110;
}

void sub_20C7091F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C118);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C128);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *)__cxa_guard_acquire(&qword_25498C128);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::_GetStaticTfType(v3);
      byte_25498C120 = sub_20C35BD7C((char *)&qword_25498C110, v4, v5);
      __cxa_guard_release(&qword_25498C128);
    }
  }
  return byte_25498C120;
}

void sub_20C70926C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C128);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::_GetStaticTfType(this);
  return &qword_25498C110;
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::GetPreliminaryAnchoringTypeAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 224), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C709344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::CreatePreliminaryAnchoringTypeAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8)
    v8 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 224), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::GetPreliminaryPlaneAnchoringAlignmentAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 240), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70949C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::CreatePreliminaryPlaneAnchoringAlignmentAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8)
    v8 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 240), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::GetPreliminaryImageAnchoringReferenceImageRel(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 232), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C7095F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::CreatePreliminaryImageAnchoringReferenceImageRel(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 232), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C7096B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C148);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C148))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v5)
      v5 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    v6 = *((_QWORD *)v5 + 28);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v9)
      v9 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 30);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498C130, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C130, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C148);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C168);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C168))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C709930((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C150, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C168);
  }
  if (v1)
    return &qword_25498C150;
  else
    return &qword_25498C130;
}

void sub_20C7098AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498C148);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C709930(uint64_t **a1)
{
  qword_25498C158 = 0;
  unk_25498C160 = 0;
  qword_25498C150 = 0;
  sub_20BFC9A6C((char **)&qword_25498C150, ((unk_25498C138 - qword_25498C130) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C150, (_QWORD *)qword_25498C158, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C150, (_QWORD *)qword_25498C158, (uint64_t *)qword_25498C130, unk_25498C138, (unk_25498C138 - qword_25498C130) >> 3);
}

void sub_20C7099C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C7099E4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C709AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C709B08()
{
  void *__p[2];
  char v1;

  sub_20C70A71C();
  sub_20BDDC0E4(__p, "Preliminary_Behavior");
  sub_20C70A83C((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C709B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::~UsdInteractivePreliminary_Behavior(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C5422C0;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "aaplUsdInteractive/preliminary_Behavior.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdInteractivePreliminary_Behavior pxrInternal__aapl__pxrReserved__::UsdInteractivePr"
                            "eliminary_Behavior::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C5422C0;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C709CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498C178);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498C178))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498C170, "Preliminary_Behavior");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498C170, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C178);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498C170, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C5422C0;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "aaplUsdInteractive/preliminary_Behavior.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdInteractivePreliminary_Behavior pxrInternal__aapl__pxrReserved__::UsdInteractivePr"
                            "eliminary_Behavior::Define(const UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C5422C0;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C709EE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C178);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C188);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C188))
  {
    __cxa_guard_release(&qword_25498C188);
  }
  return &qword_25498C180;
}

void sub_20C709F8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C188);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C198);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *)__cxa_guard_acquire(&qword_25498C198);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::_GetStaticTfType(v3);
      byte_25498C190 = sub_20C35BD7C((char *)&qword_25498C180, v4, v5);
      __cxa_guard_release(&qword_25498C198);
    }
  }
  return byte_25498C190;
}

void sub_20C70A008(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C198);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this)
{
  pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::_GetStaticTfType(this);
  return &qword_25498C180;
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::GetExclusiveAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 64), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70A0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::CreateExclusiveAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8)
    v8 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 64), v9, 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::GetTriggersRel(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 280), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70A238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::CreateTriggersRel(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 280), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70A2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::GetActionsRel(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, v3, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70A3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::CreateActionsRel(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, v3, 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70A474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *SchemaAttributeNames;
  uint64_t v12[2];

  v1 = (int)this;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C1B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C1B8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v5)
      v5 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    v6 = *((_QWORD *)v5 + 8);
    v12[0] = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v12[0] = (uint64_t)v7;
    }
    sub_20C374970(&qword_25498C1A0, v12, 1uLL);
    if ((v12[0] & 7) != 0)
    {
      v9 = (unsigned int *)(v12[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C1A0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C1B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C1D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C1D8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_20C70A668((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C1C0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C1D8);
  }
  if (v1)
    return &qword_25498C1C0;
  else
    return &qword_25498C1A0;
}

void sub_20C70A618(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C1B8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C70A668(uint64_t **a1)
{
  qword_25498C1C8 = 0;
  unk_25498C1D0 = 0;
  qword_25498C1C0 = 0;
  sub_20BFC9A6C((char **)&qword_25498C1C0, ((unk_25498C1A8 - qword_25498C1A0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C1C0, (_QWORD *)qword_25498C1C8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C1C0, (_QWORD *)qword_25498C1C8, (uint64_t *)qword_25498C1A0, unk_25498C1A8, (unk_25498C1A8 - qword_25498C1A0) >> 3);
}

void sub_20C70A6FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C70A71C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5647E8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C70A7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C70A83C(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C70A8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C70A8F0()
{
  void *__p[2];
  char v1;

  sub_20C70B3EC();
  sub_20BDDC0E4(__p, "Preliminary_ReferenceImage");
  sub_20C70B50C((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C70A93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::~UsdInteractivePreliminary_ReferenceImage(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542318;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "aaplUsdInteractive/preliminary_ReferenceImage.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdInteractivePreliminary_ReferenceImage pxrInternal__aapl__pxrReserved__::UsdInterac"
                            "tivePreliminary_ReferenceImage::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542318;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C70AAE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498C1E8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498C1E8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498C1E0, "Preliminary_ReferenceImage");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498C1E0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C1E8);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498C1E0, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C542318;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "aaplUsdInteractive/preliminary_ReferenceImage.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdInteractivePreliminary_ReferenceImage pxrInternal__aapl__pxrReserved__::UsdInterac"
                            "tivePreliminary_ReferenceImage::Define(const UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C542318;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C70ACD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C1E8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C1F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C1F8))
  {
    __cxa_guard_release(&qword_25498C1F8);
  }
  return &qword_25498C1F0;
}

void sub_20C70AD74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C1F8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C208);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *)__cxa_guard_acquire(&qword_25498C208);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::_GetStaticTfType(v3);
      byte_25498C200 = sub_20C35BD7C((char *)&qword_25498C1F0, v4, v5);
      __cxa_guard_release(&qword_25498C208);
    }
  }
  return byte_25498C200;
}

void sub_20C70ADF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C208);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this)
{
  pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::_GetStaticTfType(this);
  return &qword_25498C1F0;
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::GetImageAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 136), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70AEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::CreateImageAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8)
    v8 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 136), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::GetPhysicalWidthAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 200), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70B020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::CreatePhysicalWidthAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8)
    v8 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 200), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C228);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C228))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v5)
      v5 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    v6 = *((_QWORD *)v5 + 17);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v9)
      v9 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 25);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498C210, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C210, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C228);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C248);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C248))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_20C70B338((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C230, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C248);
  }
  if (v1)
    return &qword_25498C230;
  else
    return &qword_25498C210;
}

void sub_20C70B2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498C228);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C70B338(uint64_t **a1)
{
  qword_25498C238 = 0;
  unk_25498C240 = 0;
  qword_25498C230 = 0;
  sub_20BFC9A6C((char **)&qword_25498C230, ((unk_25498C218 - qword_25498C210) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C230, (_QWORD *)qword_25498C238, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C230, (_QWORD *)qword_25498C238, (uint64_t *)qword_25498C210, unk_25498C218, (unk_25498C218 - qword_25498C210) >> 3);
}

void sub_20C70B3CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C70B3EC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5647E8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C70B4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C70B50C(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C70B59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C70B5C0()
{
  void *__p[2];
  char v1;

  sub_20C70CC9C();
  sub_20BDDC0E4(__p, "Preliminary_Text");
  sub_20C70CDBC((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C70B60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::~UsdInteractivePreliminary_Text(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542370;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "aaplUsdInteractive/preliminary_Text.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdInteractivePreliminary_Text pxrInternal__aapl__pxrReserved__::UsdInteractivePrelim"
                            "inary_Text::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542370;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C70B7B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498C258);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498C258))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498C250, "Preliminary_Text");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498C250, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C258);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498C250, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C542370;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "aaplUsdInteractive/preliminary_Text.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdInteractivePreliminary_Text pxrInternal__aapl__pxrReserved__::UsdInteractivePrelim"
                            "inary_Text::Define(const UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C542370;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C70B9A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C258);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C268);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C268))
  {
    __cxa_guard_release(&qword_25498C268);
  }
  return &qword_25498C260;
}

void sub_20C70BA44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C268);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C278);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *)__cxa_guard_acquire(&qword_25498C278);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::_GetStaticTfType(v3);
      byte_25498C270 = sub_20C35BD7C((char *)&qword_25498C260, v4, v5);
      __cxa_guard_release(&qword_25498C278);
    }
  }
  return byte_25498C270;
}

void sub_20C70BAC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C278);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this)
{
  pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::_GetStaticTfType(this);
  return &qword_25498C260;
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetContentAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 48), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70BB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreateContentAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8)
    v8 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 48), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 80), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetFontAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 88), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70BCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreateFontAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8)
    v8 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 88), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 536), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetPointSizeAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 216), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70BE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreatePointSizeAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8)
    v8 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 216), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetWidthAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 304), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70BFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreateWidthAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8)
    v8 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 304), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetHeightAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 104), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70C0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreateHeightAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8)
    v8 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 104), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetDepthAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 56), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70C250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreateDepthAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8)
    v8 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetWrapModeAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 312), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70C3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreateWrapModeAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8)
    v8 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 312), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetHorizontalAlignmentAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 120), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70C500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreateHorizontalAlignmentAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8)
    v8 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 120), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetVerticalAlignmentAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 296), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70C658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreateVerticalAlignmentAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8)
    v8 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 296), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t *SchemaAttributeNames;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v1 = (int)this;
  v56 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C298);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C298))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v5)
      v5 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    v6 = *((_QWORD *)v5 + 6);
    v47 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v47 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v9)
      v9 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    v10 = *((_QWORD *)v9 + 11);
    v48 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v48 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v13)
      v13 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    v14 = *((_QWORD *)v13 + 27);
    v49 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v49 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v17)
      v17 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    v18 = *((_QWORD *)v17 + 38);
    v50 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v50 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v21)
      v21 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    v22 = *((_QWORD *)v21 + 13);
    v51 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v25)
      v25 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    v26 = *((_QWORD *)v25 + 7);
    v52 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v52 &= 0xFFFFFFFFFFFFFFF8;
    }
    v29 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v29)
      v29 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    v30 = *((_QWORD *)v29 + 39);
    v53 = v30;
    if ((v30 & 7) != 0)
    {
      v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v53 &= 0xFFFFFFFFFFFFFFF8;
    }
    v33 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v33)
      v33 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    v34 = *((_QWORD *)v33 + 15);
    v54 = v34;
    if ((v34 & 7) != 0)
    {
      v35 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 2, v35));
      if ((v36 & 1) == 0)
        v54 &= 0xFFFFFFFFFFFFFFF8;
    }
    v37 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v37)
      v37 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    v38 = *((_QWORD *)v37 + 37);
    v55 = v38;
    if ((v38 & 7) != 0)
    {
      v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 2, v39));
      if ((v40 & 1) == 0)
        v55 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498C280, &v47, 9uLL);
    v41 = &v56;
    do
    {
      v43 = *--v41;
      v42 = v43;
      if ((v43 & 7) != 0)
      {
        v44 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
        do
          v45 = __ldxr(v44);
        while (__stlxr(v45 - 2, v44));
      }
    }
    while (v41 != &v47);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C280, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C298);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C2B8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C2B8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)1);
    sub_20C70CBE8((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C2A0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C2B8);
  }
  if (v1)
    return &qword_25498C2A0;
  else
    return &qword_25498C280;
}

void sub_20C70CB58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C298);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C70CBE8(uint64_t **a1)
{
  qword_25498C2A8 = 0;
  unk_25498C2B0 = 0;
  qword_25498C2A0 = 0;
  sub_20BFC9A6C((char **)&qword_25498C2A0, ((unk_25498C288 - qword_25498C280) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C2A0, (_QWORD *)qword_25498C2A8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C2A0, (_QWORD *)qword_25498C2A8, (uint64_t *)qword_25498C280, unk_25498C288, (unk_25498C288 - qword_25498C280) >> 3);
}

void sub_20C70CC7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C70CC9C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C556F18((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C70CD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C70CDBC(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C70CE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::~UsdInteractivePreliminary_Trigger(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C5423C8;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "aaplUsdInteractive/preliminary_Trigger.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdInteractivePreliminary_Trigger pxrInternal__aapl__pxrReserved__::UsdInteractivePre"
                            "liminary_Trigger::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C5423C8;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C70CFFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C2C8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C2C8))
  {
    __cxa_guard_release(&qword_25498C2C8);
  }
  return &qword_25498C2C0;
}

void sub_20C70D088(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C2C8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C2D8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *)__cxa_guard_acquire(&qword_25498C2D8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::_GetStaticTfType(v3);
      byte_25498C2D0 = sub_20C35BD7C((char *)&qword_25498C2C0, v4, v5);
      __cxa_guard_release(&qword_25498C2D8);
    }
  }
  return byte_25498C2D0;
}

void sub_20C70D104(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C2D8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *this)
{
  pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::_GetStaticTfType(this);
  return &qword_25498C2C0;
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::GetInfoIdAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3)
    v3 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 144), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70D1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::CreateInfoIdAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8)
    v8 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 144), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *SchemaAttributeNames;
  uint64_t v12[2];

  v1 = (int)this;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C2F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C2F8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v5)
      v5 = sub_20C7087A0(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    v6 = *((_QWORD *)v5 + 18);
    v12[0] = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v12[0] = (uint64_t)v7;
    }
    sub_20C374970(&qword_25498C2E0, v12, 1uLL);
    if ((v12[0] & 7) != 0)
    {
      v9 = (unsigned int *)(v12[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C2E0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C2F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C318);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C318))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_20C70D46C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C300, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C318);
  }
  if (v1)
    return &qword_25498C300;
  else
    return &qword_25498C2E0;
}

void sub_20C70D41C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C2F8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C70D46C(uint64_t **a1)
{
  qword_25498C308 = 0;
  unk_25498C310 = 0;
  qword_25498C300 = 0;
  sub_20BFC9A6C((char **)&qword_25498C300, ((unk_25498C2E8 - qword_25498C2E0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C300, (_QWORD *)qword_25498C308, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C300, (_QWORD *)qword_25498C308, (uint64_t *)qword_25498C2E0, unk_25498C2E8, (unk_25498C2E8 - qword_25498C2E0) >> 3);
}

void sub_20C70D500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C70D520()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5647E8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C70D5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType::AaplUsdInteractiveTokensType(pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;

  v174 = *MEMORY[0x24BDAC8D0];
  v133 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "actions", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v133, "allow", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "any", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "baseline", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "bottom", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "center", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "content", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "depth", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "exclusive", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "face", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "flowing", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "font", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "hardBreaks", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "height", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "horizontal", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "horizontalAlignment", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "ignore", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "image", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "info:id", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "justified", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "left", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "lowerMiddle", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "middle", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "multiplePerformOperation", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "none", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "physicalWidth", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "plane", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "pointSize", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "preliminary:anchoring:type", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "preliminary:imageAnchoring:referenceImage", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 240, "preliminary:planeAnchoring:alignment", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 248, "right", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 256, "singleLine", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 264, "stop", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 272, "top", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 280, "triggers", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 288, "vertical", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 296, "verticalAlignment", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 304, "width", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 312, "wrapMode", 0);
  v2 = *(_QWORD *)this;
  v134 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v134 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v133;
  v135 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v135 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v136 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v136 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v137 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v137 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v138 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v138 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v139 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v139 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v140 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v140 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v141 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v141 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v142 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v142 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v143 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v143 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v144 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v144 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v145 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v145 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v146 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v146 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v147 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v147 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v148 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v148 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v149 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v149 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v150 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v150 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v151 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v151 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v152 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v152 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v153 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v153 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v154 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v154 &= 0xFFFFFFFFFFFFFFF8;
  }
  v65 = *((_QWORD *)this + 21);
  v155 = v65;
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 2, v66));
    if ((v67 & 1) == 0)
      v155 &= 0xFFFFFFFFFFFFFFF8;
  }
  v68 = *((_QWORD *)this + 22);
  v156 = v68;
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 2, v69));
    if ((v70 & 1) == 0)
      v156 &= 0xFFFFFFFFFFFFFFF8;
  }
  v71 = *((_QWORD *)this + 23);
  v157 = v71;
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 2, v72));
    if ((v73 & 1) == 0)
      v157 &= 0xFFFFFFFFFFFFFFF8;
  }
  v74 = *((_QWORD *)this + 24);
  v158 = v74;
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 2, v75));
    if ((v76 & 1) == 0)
      v158 &= 0xFFFFFFFFFFFFFFF8;
  }
  v77 = *((_QWORD *)this + 25);
  v159 = v77;
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 2, v78));
    if ((v79 & 1) == 0)
      v159 &= 0xFFFFFFFFFFFFFFF8;
  }
  v80 = *((_QWORD *)this + 26);
  v160 = v80;
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 2, v81));
    if ((v82 & 1) == 0)
      v160 &= 0xFFFFFFFFFFFFFFF8;
  }
  v83 = *((_QWORD *)this + 27);
  v161 = v83;
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 2, v84));
    if ((v85 & 1) == 0)
      v161 &= 0xFFFFFFFFFFFFFFF8;
  }
  v86 = *((_QWORD *)this + 28);
  v162 = v86;
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 2, v87));
    if ((v88 & 1) == 0)
      v162 &= 0xFFFFFFFFFFFFFFF8;
  }
  v89 = *((_QWORD *)this + 29);
  v163 = v89;
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 2, v90));
    if ((v91 & 1) == 0)
      v163 &= 0xFFFFFFFFFFFFFFF8;
  }
  v92 = *((_QWORD *)this + 30);
  v164 = v92;
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 2, v93));
    if ((v94 & 1) == 0)
      v164 &= 0xFFFFFFFFFFFFFFF8;
  }
  v95 = *((_QWORD *)this + 31);
  v165 = v95;
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 2, v96));
    if ((v97 & 1) == 0)
      v165 &= 0xFFFFFFFFFFFFFFF8;
  }
  v98 = *((_QWORD *)this + 32);
  v166 = v98;
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 2, v99));
    if ((v100 & 1) == 0)
      v166 &= 0xFFFFFFFFFFFFFFF8;
  }
  v101 = *((_QWORD *)this + 33);
  v167 = v101;
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 2, v102));
    if ((v103 & 1) == 0)
      v167 &= 0xFFFFFFFFFFFFFFF8;
  }
  v104 = *((_QWORD *)this + 34);
  v168 = v104;
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 2, v105));
    if ((v106 & 1) == 0)
      v168 &= 0xFFFFFFFFFFFFFFF8;
  }
  v107 = *((_QWORD *)this + 35);
  v169 = v107;
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 2, v108));
    if ((v109 & 1) == 0)
      v169 &= 0xFFFFFFFFFFFFFFF8;
  }
  v110 = *((_QWORD *)this + 36);
  v170 = v110;
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 2, v111));
    if ((v112 & 1) == 0)
      v170 &= 0xFFFFFFFFFFFFFFF8;
  }
  v113 = *((_QWORD *)this + 37);
  v171 = v113;
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 2, v114));
    if ((v115 & 1) == 0)
      v171 &= 0xFFFFFFFFFFFFFFF8;
  }
  v116 = *((_QWORD *)this + 38);
  v172 = v116;
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 2, v117));
    if ((v118 & 1) == 0)
      v172 &= 0xFFFFFFFFFFFFFFF8;
  }
  v119 = *((_QWORD *)this + 39);
  v173 = v119;
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 2, v120));
    if ((v121 & 1) == 0)
      v173 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  v122 = operator new(0x140uLL);
  v123 = 0;
  *((_QWORD *)this + 40) = v122;
  *((_QWORD *)this + 41) = v122;
  *((_QWORD *)this + 42) = v122 + 40;
  do
  {
    v124 = *(&v134 + v123);
    *v122 = v124;
    if ((v124 & 7) != 0)
    {
      v125 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFFFF8);
      do
        v126 = __ldxr(v125);
      while (__stxr(v126 + 2, v125));
      if ((v126 & 1) == 0)
        *v122 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v123;
    ++v122;
  }
  while (v123 != 40);
  v127 = &v174;
  *((_QWORD *)this + 41) = v122;
  do
  {
    v129 = *--v127;
    v128 = v129;
    if ((v129 & 7) != 0)
    {
      v130 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
      do
        v131 = __ldxr(v130);
      while (__stlxr(v131 - 2, v130));
    }
  }
  while (v127 != &v134);
  return this;
}

void sub_20C70E3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,_QWORD *a33,_QWORD *a34,_QWORD *a35,_QWORD *a36,_QWORD *a37,_QWORD *a38,_QWORD *a39,_QWORD *a40,void **a41,uint64_t a42,char a43)
{
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;

  sub_20BEEB2B8(&a41);
  v53 = (char *)&STACK[0x250];
  while (1)
  {
    v55 = *((_QWORD *)v53 - 1);
    v53 -= 8;
    v54 = v55;
    if ((v55 & 7) != 0)
    {
      v56 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
      do
        v57 = __ldxr(v56);
      while (__stlxr(v57 - 2, v56));
    }
    if (v53 == &a43)
    {
      if ((*v46 & 7) != 0)
      {
        v58 = (unsigned int *)(*v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v59 = __ldxr(v58);
        while (__stlxr(v59 - 2, v58));
      }
      if ((*v45 & 7) != 0)
      {
        v60 = (unsigned int *)(*v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((*v44 & 7) != 0)
      {
        v62 = (unsigned int *)(*v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*v52 & 7) != 0)
      {
        v64 = (unsigned int *)(*v52 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*v51 & 7) != 0)
      {
        v66 = (unsigned int *)(*v51 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*v50 & 7) != 0)
      {
        v68 = (unsigned int *)(*v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*v49 & 7) != 0)
      {
        v70 = (unsigned int *)(*v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*v48 & 7) != 0)
      {
        v72 = (unsigned int *)(*v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if ((*v47 & 7) != 0)
      {
        v74 = (unsigned int *)(*v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      if ((*a11 & 7) != 0)
      {
        v76 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if ((*a12 & 7) != 0)
      {
        v78 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*a13 & 7) != 0)
      {
        v80 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*a14 & 7) != 0)
      {
        v82 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*a15 & 7) != 0)
      {
        v84 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*a16 & 7) != 0)
      {
        v86 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*a17 & 7) != 0)
      {
        v88 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*a18 & 7) != 0)
      {
        v90 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*a19 & 7) != 0)
      {
        v92 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      if ((*a20 & 7) != 0)
      {
        v94 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if ((*a21 & 7) != 0)
      {
        v96 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      if ((*a22 & 7) != 0)
      {
        v98 = (unsigned int *)(*a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      if ((*a23 & 7) != 0)
      {
        v100 = (unsigned int *)(*a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      if ((*a24 & 7) != 0)
      {
        v102 = (unsigned int *)(*a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v103 = __ldxr(v102);
        while (__stlxr(v103 - 2, v102));
      }
      if ((*a25 & 7) != 0)
      {
        v104 = (unsigned int *)(*a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v105 = __ldxr(v104);
        while (__stlxr(v105 - 2, v104));
      }
      if ((*a26 & 7) != 0)
      {
        v106 = (unsigned int *)(*a26 & 0xFFFFFFFFFFFFFFF8);
        do
          v107 = __ldxr(v106);
        while (__stlxr(v107 - 2, v106));
      }
      if ((*a27 & 7) != 0)
      {
        v108 = (unsigned int *)(*a27 & 0xFFFFFFFFFFFFFFF8);
        do
          v109 = __ldxr(v108);
        while (__stlxr(v109 - 2, v108));
      }
      if ((*a28 & 7) != 0)
      {
        v110 = (unsigned int *)(*a28 & 0xFFFFFFFFFFFFFFF8);
        do
          v111 = __ldxr(v110);
        while (__stlxr(v111 - 2, v110));
      }
      if ((*a29 & 7) != 0)
      {
        v112 = (unsigned int *)(*a29 & 0xFFFFFFFFFFFFFFF8);
        do
          v113 = __ldxr(v112);
        while (__stlxr(v113 - 2, v112));
      }
      if ((*a30 & 7) != 0)
      {
        v114 = (unsigned int *)(*a30 & 0xFFFFFFFFFFFFFFF8);
        do
          v115 = __ldxr(v114);
        while (__stlxr(v115 - 2, v114));
      }
      if ((*a31 & 7) != 0)
      {
        v116 = (unsigned int *)(*a31 & 0xFFFFFFFFFFFFFFF8);
        do
          v117 = __ldxr(v116);
        while (__stlxr(v117 - 2, v116));
      }
      if ((*a32 & 7) != 0)
      {
        v118 = (unsigned int *)(*a32 & 0xFFFFFFFFFFFFFFF8);
        do
          v119 = __ldxr(v118);
        while (__stlxr(v119 - 2, v118));
      }
      if ((*a33 & 7) != 0)
      {
        v120 = (unsigned int *)(*a33 & 0xFFFFFFFFFFFFFFF8);
        do
          v121 = __ldxr(v120);
        while (__stlxr(v121 - 2, v120));
      }
      if ((*a34 & 7) != 0)
      {
        v122 = (unsigned int *)(*a34 & 0xFFFFFFFFFFFFFFF8);
        do
          v123 = __ldxr(v122);
        while (__stlxr(v123 - 2, v122));
      }
      if ((*a35 & 7) != 0)
      {
        v124 = (unsigned int *)(*a35 & 0xFFFFFFFFFFFFFFF8);
        do
          v125 = __ldxr(v124);
        while (__stlxr(v125 - 2, v124));
      }
      if ((*a36 & 7) != 0)
      {
        v126 = (unsigned int *)(*a36 & 0xFFFFFFFFFFFFFFF8);
        do
          v127 = __ldxr(v126);
        while (__stlxr(v127 - 2, v126));
      }
      if ((*a37 & 7) != 0)
      {
        v128 = (unsigned int *)(*a37 & 0xFFFFFFFFFFFFFFF8);
        do
          v129 = __ldxr(v128);
        while (__stlxr(v129 - 2, v128));
      }
      if ((*a38 & 7) != 0)
      {
        v130 = (unsigned int *)(*a38 & 0xFFFFFFFFFFFFFFF8);
        do
          v131 = __ldxr(v130);
        while (__stlxr(v131 - 2, v130));
      }
      if ((*a39 & 7) != 0)
      {
        v132 = (unsigned int *)(*a39 & 0xFFFFFFFFFFFFFFF8);
        do
          v133 = __ldxr(v132);
        while (__stlxr(v133 - 2, v132));
      }
      if ((*a40 & 7) != 0)
      {
        v134 = (unsigned int *)(*a40 & 0xFFFFFFFFFFFFFFF8);
        do
          v135 = __ldxr(v134);
        while (__stlxr(v135 - 2, v134));
      }
      if ((*v43 & 7) != 0)
      {
        v136 = (unsigned int *)(*v43 & 0xFFFFFFFFFFFFFFF8);
        do
          v137 = __ldxr(v136);
        while (__stlxr(v137 - 2, v136));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C70E9AC()
{
  JUMPOUT(0x20C70E54CLL);
}

void sub_20C70E9B4()
{
  JUMPOUT(0x20C70E570);
}

void sub_20C70E9BC()
{
  JUMPOUT(0x20C70E594);
}

void sub_20C70E9C4()
{
  JUMPOUT(0x20C70E5B8);
}

void sub_20C70E9CC()
{
  JUMPOUT(0x20C70E5DCLL);
}

void sub_20C70E9D4()
{
  JUMPOUT(0x20C70E600);
}

void sub_20C70E9DC()
{
  JUMPOUT(0x20C70E624);
}

void sub_20C70E9E4()
{
  JUMPOUT(0x20C70E648);
}

void sub_20C70E9EC()
{
  JUMPOUT(0x20C70E66CLL);
}

void sub_20C70E9F4()
{
  JUMPOUT(0x20C70E690);
}

void sub_20C70E9FC()
{
  JUMPOUT(0x20C70E6B4);
}

void sub_20C70EA04()
{
  JUMPOUT(0x20C70E6D8);
}

void sub_20C70EA0C()
{
  JUMPOUT(0x20C70E6FCLL);
}

void sub_20C70EA14()
{
  JUMPOUT(0x20C70E720);
}

void sub_20C70EA1C()
{
  JUMPOUT(0x20C70E744);
}

void sub_20C70EA24()
{
  JUMPOUT(0x20C70E768);
}

void sub_20C70EA2C()
{
  JUMPOUT(0x20C70E78CLL);
}

void sub_20C70EA34()
{
  JUMPOUT(0x20C70E7B0);
}

void sub_20C70EA3C()
{
  JUMPOUT(0x20C70E7D4);
}

void sub_20C70EA44()
{
  JUMPOUT(0x20C70E7F8);
}

void sub_20C70EA4C()
{
  JUMPOUT(0x20C70E81CLL);
}

void sub_20C70EA54()
{
  JUMPOUT(0x20C70E840);
}

void sub_20C70EA5C()
{
  JUMPOUT(0x20C70E864);
}

void sub_20C70EA64()
{
  JUMPOUT(0x20C70E888);
}

void sub_20C70EA6C()
{
  JUMPOUT(0x20C70E8ACLL);
}

void sub_20C70EA74()
{
  JUMPOUT(0x20C70E8D0);
}

void sub_20C70EA7C()
{
  JUMPOUT(0x20C70E8F4);
}

void sub_20C70EA84()
{
  JUMPOUT(0x20C70E918);
}

void sub_20C70EA8C()
{
  JUMPOUT(0x20C70E93CLL);
}

void sub_20C70EA94()
{
  JUMPOUT(0x20C70E960);
}

void sub_20C70EA9C()
{
  JUMPOUT(0x20C70E984);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::~UsdPhysicsArticulationRootAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C542420;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdPhysics/articulationRootAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdPhysicsArticulationRootAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulatio"
                            "nRootAPI::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C542420;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C70EC3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *this)
{
  return 5;
}

uint64_t sub_20C70EC64(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C320, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdPhysicsArticulationRootAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C70EE1C(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C542420;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C542420;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C70EE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C70EE1C(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C320, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdPhysicsArticulationRootAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C328);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C328))
  {
    __cxa_guard_release(&qword_25498C328);
  }
  return &qword_25498C320;
}

void sub_20C70EF38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C328);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C338);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *)__cxa_guard_acquire(&qword_25498C338);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::_GetStaticTfType(v3);
      byte_25498C330 = sub_20C35BD7C((char *)&qword_25498C320, v4, v5);
      __cxa_guard_release(&qword_25498C338);
    }
  }
  return byte_25498C330;
}

void sub_20C70EFB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C338);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::_GetStaticTfType(this);
  return &qword_25498C320;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498C358);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C358))
  {
    qword_25498C340 = 0;
    *(_QWORD *)algn_25498C348 = 0;
    qword_25498C350 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C340, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C358);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C378);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C378))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_25498C360 = 0;
    *(_QWORD *)algn_25498C368 = 0;
    qword_25498C370 = 0;
    sub_20BFE538C(&qword_25498C360, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C360, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C378);
  }
  if (v1)
    return &qword_25498C360;
  else
    return &qword_25498C340;
}

void sub_20C70F0E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C378);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C70F0FC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C70F1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::~UsdPhysicsCollisionAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C542478;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdPhysics/collisionAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdPhysicsCollisionAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::Get("
                            "const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C542478;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C70F3B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this)
{
  return 5;
}

uint64_t sub_20C70F3DC(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C380, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdPhysicsCollisionAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C70F594(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C542478;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C542478;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C70F580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C70F594(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C380, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdPhysicsCollisionAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C388);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C388))
  {
    __cxa_guard_release(&qword_25498C388);
  }
  return &qword_25498C380;
}

void sub_20C70F6B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C388);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C398);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *)__cxa_guard_acquire(&qword_25498C398);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::_GetStaticTfType(v3);
      byte_25498C390 = sub_20C35BD7C((char *)&qword_25498C380, v4, v5);
      __cxa_guard_release(&qword_25498C398);
    }
  }
  return byte_25498C390;
}

void sub_20C70F72C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C398);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::_GetStaticTfType(this);
  return &qword_25498C380;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::GetCollisionEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 248), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70F804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::CreateCollisionEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 248), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::GetSimulationOwnerRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 456), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70F95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::CreateSimulationOwnerRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 456), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C70FA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *SchemaAttributeNames;
  uint64_t v12[2];

  v1 = (int)this;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C3B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C3B8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 31);
    v12[0] = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v12[0] = (uint64_t)v7;
    }
    sub_20C374970(&qword_25498C3A0, v12, 1uLL);
    if ((v12[0] & 7) != 0)
    {
      v9 = (unsigned int *)(v12[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C3A0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C3B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C3D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C3D8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C70FC10((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C3C0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C3D8);
  }
  if (v1)
    return &qword_25498C3C0;
  else
    return &qword_25498C3A0;
}

void sub_20C70FBC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C3B8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C70FC10(uint64_t **a1)
{
  qword_25498C3C8 = 0;
  unk_25498C3D0 = 0;
  qword_25498C3C0 = 0;
  sub_20BFC9A6C((char **)&qword_25498C3C0, ((unk_25498C3A8 - qword_25498C3A0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C3C0, (_QWORD *)qword_25498C3C8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C3C0, (_QWORD *)qword_25498C3C8, (uint64_t *)qword_25498C3A0, unk_25498C3A8, (unk_25498C3A8 - qword_25498C3A0) >> 3);
}

void sub_20C70FCA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C70FCC4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C70FD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *sub_20C70FDE8(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *result;
  void *v4;

  result = sub_20C70FE30();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C70FE70((uint64_t)result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *sub_20C70FE30()
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)operator new(0x2D8uLL);
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType::UsdPhysicsTokensType(v0);
  return v0;
}

void sub_20C70FE5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C70FE70(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int *v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int *v171;
  unsigned int v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  uint64_t v179;
  unsigned int *v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int v187;
  uint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  uint64_t v194;
  unsigned int *v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  uint64_t v200;
  unsigned int *v201;
  unsigned int v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  uint64_t v206;
  unsigned int *v207;
  unsigned int v208;
  uint64_t v209;
  unsigned int *v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int *v213;
  unsigned int v214;
  uint64_t v215;
  unsigned int *v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int *v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int *v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int *v225;
  unsigned int v226;
  uint64_t v227;
  unsigned int *v228;
  unsigned int v229;
  uint64_t v230;
  unsigned int *v231;
  unsigned int v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  uint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int *v240;
  unsigned int v241;
  uint64_t v242;
  unsigned int *v243;
  unsigned int v244;
  uint64_t v245;
  unsigned int *v246;
  unsigned int v247;
  uint64_t v248;
  unsigned int *v249;
  unsigned int v250;
  uint64_t v251;
  unsigned int *v252;
  unsigned int v253;
  uint64_t v254;
  unsigned int *v255;
  unsigned int v256;
  uint64_t v257;
  unsigned int *v258;
  unsigned int v259;
  uint64_t v260;
  unsigned int *v261;
  unsigned int v262;
  unsigned int *v263;
  unsigned int v264;
  void **v266;

  v266 = (void **)(a1 + 704);
  sub_20BEEB2B8(&v266);
  v2 = *(_QWORD *)(a1 + 696);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 688);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 680);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 672);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 664);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 656);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *(_QWORD *)(a1 + 648);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *(_QWORD *)(a1 + 640);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *(_QWORD *)(a1 + 632);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *(_QWORD *)(a1 + 624);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *(_QWORD *)(a1 + 616);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *(_QWORD *)(a1 + 608);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(a1 + 600);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *(_QWORD *)(a1 + 592);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *(_QWORD *)(a1 + 584);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *(_QWORD *)(a1 + 576);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *(_QWORD *)(a1 + 568);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *(_QWORD *)(a1 + 560);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *(_QWORD *)(a1 + 552);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *(_QWORD *)(a1 + 544);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *(_QWORD *)(a1 + 536);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *(_QWORD *)(a1 + 528);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *(_QWORD *)(a1 + 520);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *(_QWORD *)(a1 + 512);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *(_QWORD *)(a1 + 504);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *(_QWORD *)(a1 + 496);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *(_QWORD *)(a1 + 488);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *(_QWORD *)(a1 + 480);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *(_QWORD *)(a1 + 472);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *(_QWORD *)(a1 + 464);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *(_QWORD *)(a1 + 456);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = *(_QWORD *)(a1 + 448);
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = *(_QWORD *)(a1 + 440);
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  v101 = *(_QWORD *)(a1 + 432);
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  v104 = *(_QWORD *)(a1 + 424);
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  v107 = *(_QWORD *)(a1 + 416);
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  v110 = *(_QWORD *)(a1 + 408);
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  v113 = *(_QWORD *)(a1 + 400);
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stlxr(v115 - 2, v114));
  }
  v116 = *(_QWORD *)(a1 + 392);
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stlxr(v118 - 2, v117));
  }
  v119 = *(_QWORD *)(a1 + 384);
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stlxr(v121 - 2, v120));
  }
  v122 = *(_QWORD *)(a1 + 376);
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stlxr(v124 - 2, v123));
  }
  v125 = *(_QWORD *)(a1 + 368);
  if ((v125 & 7) != 0)
  {
    v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stlxr(v127 - 2, v126));
  }
  v128 = *(_QWORD *)(a1 + 360);
  if ((v128 & 7) != 0)
  {
    v129 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stlxr(v130 - 2, v129));
  }
  v131 = *(_QWORD *)(a1 + 352);
  if ((v131 & 7) != 0)
  {
    v132 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
    do
      v133 = __ldxr(v132);
    while (__stlxr(v133 - 2, v132));
  }
  v134 = *(_QWORD *)(a1 + 344);
  if ((v134 & 7) != 0)
  {
    v135 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
    do
      v136 = __ldxr(v135);
    while (__stlxr(v136 - 2, v135));
  }
  v137 = *(_QWORD *)(a1 + 336);
  if ((v137 & 7) != 0)
  {
    v138 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stlxr(v139 - 2, v138));
  }
  v140 = *(_QWORD *)(a1 + 328);
  if ((v140 & 7) != 0)
  {
    v141 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
    do
      v142 = __ldxr(v141);
    while (__stlxr(v142 - 2, v141));
  }
  v143 = *(_QWORD *)(a1 + 320);
  if ((v143 & 7) != 0)
  {
    v144 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
    do
      v145 = __ldxr(v144);
    while (__stlxr(v145 - 2, v144));
  }
  v146 = *(_QWORD *)(a1 + 312);
  if ((v146 & 7) != 0)
  {
    v147 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
    do
      v148 = __ldxr(v147);
    while (__stlxr(v148 - 2, v147));
  }
  v149 = *(_QWORD *)(a1 + 304);
  if ((v149 & 7) != 0)
  {
    v150 = (unsigned int *)(v149 & 0xFFFFFFFFFFFFFFF8);
    do
      v151 = __ldxr(v150);
    while (__stlxr(v151 - 2, v150));
  }
  v152 = *(_QWORD *)(a1 + 296);
  if ((v152 & 7) != 0)
  {
    v153 = (unsigned int *)(v152 & 0xFFFFFFFFFFFFFFF8);
    do
      v154 = __ldxr(v153);
    while (__stlxr(v154 - 2, v153));
  }
  v155 = *(_QWORD *)(a1 + 288);
  if ((v155 & 7) != 0)
  {
    v156 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
    do
      v157 = __ldxr(v156);
    while (__stlxr(v157 - 2, v156));
  }
  v158 = *(_QWORD *)(a1 + 280);
  if ((v158 & 7) != 0)
  {
    v159 = (unsigned int *)(v158 & 0xFFFFFFFFFFFFFFF8);
    do
      v160 = __ldxr(v159);
    while (__stlxr(v160 - 2, v159));
  }
  v161 = *(_QWORD *)(a1 + 272);
  if ((v161 & 7) != 0)
  {
    v162 = (unsigned int *)(v161 & 0xFFFFFFFFFFFFFFF8);
    do
      v163 = __ldxr(v162);
    while (__stlxr(v163 - 2, v162));
  }
  v164 = *(_QWORD *)(a1 + 264);
  if ((v164 & 7) != 0)
  {
    v165 = (unsigned int *)(v164 & 0xFFFFFFFFFFFFFFF8);
    do
      v166 = __ldxr(v165);
    while (__stlxr(v166 - 2, v165));
  }
  v167 = *(_QWORD *)(a1 + 256);
  if ((v167 & 7) != 0)
  {
    v168 = (unsigned int *)(v167 & 0xFFFFFFFFFFFFFFF8);
    do
      v169 = __ldxr(v168);
    while (__stlxr(v169 - 2, v168));
  }
  v170 = *(_QWORD *)(a1 + 248);
  if ((v170 & 7) != 0)
  {
    v171 = (unsigned int *)(v170 & 0xFFFFFFFFFFFFFFF8);
    do
      v172 = __ldxr(v171);
    while (__stlxr(v172 - 2, v171));
  }
  v173 = *(_QWORD *)(a1 + 240);
  if ((v173 & 7) != 0)
  {
    v174 = (unsigned int *)(v173 & 0xFFFFFFFFFFFFFFF8);
    do
      v175 = __ldxr(v174);
    while (__stlxr(v175 - 2, v174));
  }
  v176 = *(_QWORD *)(a1 + 232);
  if ((v176 & 7) != 0)
  {
    v177 = (unsigned int *)(v176 & 0xFFFFFFFFFFFFFFF8);
    do
      v178 = __ldxr(v177);
    while (__stlxr(v178 - 2, v177));
  }
  v179 = *(_QWORD *)(a1 + 224);
  if ((v179 & 7) != 0)
  {
    v180 = (unsigned int *)(v179 & 0xFFFFFFFFFFFFFFF8);
    do
      v181 = __ldxr(v180);
    while (__stlxr(v181 - 2, v180));
  }
  v182 = *(_QWORD *)(a1 + 216);
  if ((v182 & 7) != 0)
  {
    v183 = (unsigned int *)(v182 & 0xFFFFFFFFFFFFFFF8);
    do
      v184 = __ldxr(v183);
    while (__stlxr(v184 - 2, v183));
  }
  v185 = *(_QWORD *)(a1 + 208);
  if ((v185 & 7) != 0)
  {
    v186 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
    do
      v187 = __ldxr(v186);
    while (__stlxr(v187 - 2, v186));
  }
  v188 = *(_QWORD *)(a1 + 200);
  if ((v188 & 7) != 0)
  {
    v189 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFFFF8);
    do
      v190 = __ldxr(v189);
    while (__stlxr(v190 - 2, v189));
  }
  v191 = *(_QWORD *)(a1 + 192);
  if ((v191 & 7) != 0)
  {
    v192 = (unsigned int *)(v191 & 0xFFFFFFFFFFFFFFF8);
    do
      v193 = __ldxr(v192);
    while (__stlxr(v193 - 2, v192));
  }
  v194 = *(_QWORD *)(a1 + 184);
  if ((v194 & 7) != 0)
  {
    v195 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
    do
      v196 = __ldxr(v195);
    while (__stlxr(v196 - 2, v195));
  }
  v197 = *(_QWORD *)(a1 + 176);
  if ((v197 & 7) != 0)
  {
    v198 = (unsigned int *)(v197 & 0xFFFFFFFFFFFFFFF8);
    do
      v199 = __ldxr(v198);
    while (__stlxr(v199 - 2, v198));
  }
  v200 = *(_QWORD *)(a1 + 168);
  if ((v200 & 7) != 0)
  {
    v201 = (unsigned int *)(v200 & 0xFFFFFFFFFFFFFFF8);
    do
      v202 = __ldxr(v201);
    while (__stlxr(v202 - 2, v201));
  }
  v203 = *(_QWORD *)(a1 + 160);
  if ((v203 & 7) != 0)
  {
    v204 = (unsigned int *)(v203 & 0xFFFFFFFFFFFFFFF8);
    do
      v205 = __ldxr(v204);
    while (__stlxr(v205 - 2, v204));
  }
  v206 = *(_QWORD *)(a1 + 152);
  if ((v206 & 7) != 0)
  {
    v207 = (unsigned int *)(v206 & 0xFFFFFFFFFFFFFFF8);
    do
      v208 = __ldxr(v207);
    while (__stlxr(v208 - 2, v207));
  }
  v209 = *(_QWORD *)(a1 + 144);
  if ((v209 & 7) != 0)
  {
    v210 = (unsigned int *)(v209 & 0xFFFFFFFFFFFFFFF8);
    do
      v211 = __ldxr(v210);
    while (__stlxr(v211 - 2, v210));
  }
  v212 = *(_QWORD *)(a1 + 136);
  if ((v212 & 7) != 0)
  {
    v213 = (unsigned int *)(v212 & 0xFFFFFFFFFFFFFFF8);
    do
      v214 = __ldxr(v213);
    while (__stlxr(v214 - 2, v213));
  }
  v215 = *(_QWORD *)(a1 + 128);
  if ((v215 & 7) != 0)
  {
    v216 = (unsigned int *)(v215 & 0xFFFFFFFFFFFFFFF8);
    do
      v217 = __ldxr(v216);
    while (__stlxr(v217 - 2, v216));
  }
  v218 = *(_QWORD *)(a1 + 120);
  if ((v218 & 7) != 0)
  {
    v219 = (unsigned int *)(v218 & 0xFFFFFFFFFFFFFFF8);
    do
      v220 = __ldxr(v219);
    while (__stlxr(v220 - 2, v219));
  }
  v221 = *(_QWORD *)(a1 + 112);
  if ((v221 & 7) != 0)
  {
    v222 = (unsigned int *)(v221 & 0xFFFFFFFFFFFFFFF8);
    do
      v223 = __ldxr(v222);
    while (__stlxr(v223 - 2, v222));
  }
  v224 = *(_QWORD *)(a1 + 104);
  if ((v224 & 7) != 0)
  {
    v225 = (unsigned int *)(v224 & 0xFFFFFFFFFFFFFFF8);
    do
      v226 = __ldxr(v225);
    while (__stlxr(v226 - 2, v225));
  }
  v227 = *(_QWORD *)(a1 + 96);
  if ((v227 & 7) != 0)
  {
    v228 = (unsigned int *)(v227 & 0xFFFFFFFFFFFFFFF8);
    do
      v229 = __ldxr(v228);
    while (__stlxr(v229 - 2, v228));
  }
  v230 = *(_QWORD *)(a1 + 88);
  if ((v230 & 7) != 0)
  {
    v231 = (unsigned int *)(v230 & 0xFFFFFFFFFFFFFFF8);
    do
      v232 = __ldxr(v231);
    while (__stlxr(v232 - 2, v231));
  }
  v233 = *(_QWORD *)(a1 + 80);
  if ((v233 & 7) != 0)
  {
    v234 = (unsigned int *)(v233 & 0xFFFFFFFFFFFFFFF8);
    do
      v235 = __ldxr(v234);
    while (__stlxr(v235 - 2, v234));
  }
  v236 = *(_QWORD *)(a1 + 72);
  if ((v236 & 7) != 0)
  {
    v237 = (unsigned int *)(v236 & 0xFFFFFFFFFFFFFFF8);
    do
      v238 = __ldxr(v237);
    while (__stlxr(v238 - 2, v237));
  }
  v239 = *(_QWORD *)(a1 + 64);
  if ((v239 & 7) != 0)
  {
    v240 = (unsigned int *)(v239 & 0xFFFFFFFFFFFFFFF8);
    do
      v241 = __ldxr(v240);
    while (__stlxr(v241 - 2, v240));
  }
  v242 = *(_QWORD *)(a1 + 56);
  if ((v242 & 7) != 0)
  {
    v243 = (unsigned int *)(v242 & 0xFFFFFFFFFFFFFFF8);
    do
      v244 = __ldxr(v243);
    while (__stlxr(v244 - 2, v243));
  }
  v245 = *(_QWORD *)(a1 + 48);
  if ((v245 & 7) != 0)
  {
    v246 = (unsigned int *)(v245 & 0xFFFFFFFFFFFFFFF8);
    do
      v247 = __ldxr(v246);
    while (__stlxr(v247 - 2, v246));
  }
  v248 = *(_QWORD *)(a1 + 40);
  if ((v248 & 7) != 0)
  {
    v249 = (unsigned int *)(v248 & 0xFFFFFFFFFFFFFFF8);
    do
      v250 = __ldxr(v249);
    while (__stlxr(v250 - 2, v249));
  }
  v251 = *(_QWORD *)(a1 + 32);
  if ((v251 & 7) != 0)
  {
    v252 = (unsigned int *)(v251 & 0xFFFFFFFFFFFFFFF8);
    do
      v253 = __ldxr(v252);
    while (__stlxr(v253 - 2, v252));
  }
  v254 = *(_QWORD *)(a1 + 24);
  if ((v254 & 7) != 0)
  {
    v255 = (unsigned int *)(v254 & 0xFFFFFFFFFFFFFFF8);
    do
      v256 = __ldxr(v255);
    while (__stlxr(v256 - 2, v255));
  }
  v257 = *(_QWORD *)(a1 + 16);
  if ((v257 & 7) != 0)
  {
    v258 = (unsigned int *)(v257 & 0xFFFFFFFFFFFFFFF8);
    do
      v259 = __ldxr(v258);
    while (__stlxr(v259 - 2, v258));
  }
  v260 = *(_QWORD *)(a1 + 8);
  if ((v260 & 7) != 0)
  {
    v261 = (unsigned int *)(v260 & 0xFFFFFFFFFFFFFFF8);
    do
      v262 = __ldxr(v261);
    while (__stlxr(v262 - 2, v261));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v263 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v264 = __ldxr(v263);
    while (__stlxr(v264 - 2, v263));
  }
  return a1;
}

void sub_20C7109A8()
{
  void *__p[2];
  char v1;

  sub_20C7124C4();
  sub_20BDDC0E4(__p, "PhysicsCollisionGroup");
  sub_20C7125E4((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C7109F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::~UsdPhysicsCollisionGroup(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C5424D0;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdPhysics/collisionGroup.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdPhysicsCollisionGroup pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::"
                            "Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C5424D0;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C710B98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498C3E8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498C3E8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498C3E0, "PhysicsCollisionGroup");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498C3E0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C3E8);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498C3E0, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C5424D0;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdPhysics/collisionGroup.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdPhysicsCollisionGroup pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::"
                            "Define(const UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C5424D0;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C710D88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C3E8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C3F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C3F8))
  {
    __cxa_guard_release(&qword_25498C3F8);
  }
  return &qword_25498C3F0;
}

void sub_20C710E2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C3F8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C408);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *)__cxa_guard_acquire(&qword_25498C408);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::_GetStaticTfType(v3);
      byte_25498C400 = sub_20C35BD7C((char *)&qword_25498C3F0, v4, v5);
      __cxa_guard_release(&qword_25498C408);
    }
  }
  return byte_25498C400;
}

void sub_20C710EA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C408);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::_GetStaticTfType(this);
  return &qword_25498C3F0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::GetMergeGroupNameAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 416), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C710F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CreateMergeGroupNameAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 416), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 80), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::GetInvertFilteredGroupsAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 336), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C7110D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CreateInvertFilteredGroupsAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 336), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::GetFilteredGroupsRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 304), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C711230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CreateFilteredGroupsRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 304), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C7112F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C428);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C428))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 52);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v9)
      v9 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 42);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498C410, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C410, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C428);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C448);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C448))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_20C71156C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C430, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C448);
  }
  if (v1)
    return &qword_25498C430;
  else
    return &qword_25498C410;
}

void sub_20C7114E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498C428);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C71156C(uint64_t **a1)
{
  qword_25498C438 = 0;
  unk_25498C440 = 0;
  qword_25498C430 = 0;
  sub_20BFC9A6C((char **)&qword_25498C430, ((unk_25498C418 - qword_25498C410) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C430, (_QWORD *)qword_25498C438, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C430, (_QWORD *)qword_25498C438, (uint64_t *)qword_25498C410, unk_25498C418, (unk_25498C418 - qword_25498C410) >> 3);
}

void sub_20C711600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::GetCollidersCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  sub_20C37A850(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (uint64_t *)v3 + 4);
  *(_QWORD *)a2 = off_24C537740;
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C7116D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CollisionGroupTable::IsCollisionEnabled(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CollisionGroupTable *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;

  v3 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v3 >> 3 <= (unint64_t)a2 || v3 >> 3 <= (unint64_t)a3)
    return 1;
  v6 = (unint64_t)v3 >> 3;
  if (a3 >= a2)
    v7 = a2;
  else
    v7 = a3;
  if (a2 <= a3)
    v8 = a3;
  else
    v8 = a2;
  v9 = v8 - ((v7 + v7 * v7) >> 1) + v7 * (_DWORD)v6;
  return (*(_QWORD *)(*((_QWORD *)this + 3) + ((v9 >> 3) & 0x1FFFFFF8)) >> v9) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CollisionGroupTable::IsCollisionEnabled(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CollisionGroupTable *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = (_QWORD *)*((_QWORD *)a1 + 1);
  v4 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 == v3)
  {
    v5 = *(_QWORD **)a1;
  }
  else
  {
    v5 = *(_QWORD **)a1;
    do
    {
      if (*v5 == *a2)
        goto LABEL_6;
      ++v5;
    }
    while (v5 != v3);
    v5 = (_QWORD *)*((_QWORD *)a1 + 1);
LABEL_6:
    while (*v4 != *a3)
    {
      if (++v4 == v3)
      {
        v4 = (_QWORD *)*((_QWORD *)a1 + 1);
        return pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CollisionGroupTable::IsCollisionEnabled(a1, ((unint64_t)v5 - *(_QWORD *)a1) >> 3, ((unint64_t)v4 - *(_QWORD *)a1) >> 3);
      }
    }
  }
  return pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CollisionGroupTable::IsCollisionEnabled(a1, ((unint64_t)v5 - *(_QWORD *)a1) >> 3, ((unint64_t)v4 - *(_QWORD *)a1) >> 3);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::ComputeCollisionGroupTable(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *v5;
  const pxrInternal__aapl__pxrReserved__::TfType *v6;
  uint64_t *SchemaInfo;
  char *v8;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v9;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *v13;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *v19;
  char *v20;
  unsigned int v21;
  char *v22;
  _DWORD *v23;
  _DWORD *v24;
  unsigned int v25;
  char *v26;
  unsigned int *v27;
  char *v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  char IsAuthored;
  char v39;
  _QWORD *v40;
  unsigned int v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  unsigned int v54;
  unsigned int v55;
  BOOL v56;
  unsigned int v57;
  unint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v61;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v62;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *i;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v69;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v87;
  unsigned int v88;
  unsigned int v90;
  _DWORD *v91;
  _QWORD v92[2];
  void *p_p;
  char *v94;
  unint64_t v95;
  void *__p;
  uint64_t v97;
  uint64_t v98;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData **v99;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v100;
  uint64_t v101;
  uint64_t v102;
  void **v103;
  void ***v104;
  uint64_t v105;
  int v106;
  __int16 v107;
  void **p_p_p;
  void ***v109;
  uint64_t v110;
  uint64_t v111;
  void **v112[2];
  int v113;
  int v114[9];
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v115;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v116;
  unint64_t v117;
  _DWORD *v118;
  void **v119[2];

  v115 = 0;
  v116 = 0;
  v117 = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(this, (uint64_t)&p_p_p);
  sub_20C549A40((uint64_t)v112, (uint64_t)&p_p_p);
  if ((v111 & 7) != 0)
  {
    v3 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v110 + 1);
  sub_20BFD265C(&v110);
  if (v109)
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v109);
  sub_20C37ECB8((uint64_t *)v112, (uint64_t)&p_p_p);
  v103 = v112[1];
  v104 = v112;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v105);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v105 + 1);
  v106 = 0;
  v107 = 0;
  while (v109 != v104
       || p_p_p != v103
       || v110 != v105
       || (_DWORD)v111 != v106
       || BYTE4(v111) != v107
       || BYTE5(v111) != HIBYTE(v107))
  {
    sub_20C37ED84((uint64_t)&p_p_p, (uint64_t)&v99);
    pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::_GetStaticTfType(v5);
    SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C3F0, v6);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v99, SchemaInfo, v8))
    {
      v9 = v116;
      if ((unint64_t)v116 >= v117)
      {
        v10 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_20C712698((uint64_t *)&v115, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v99);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v116, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v99);
        *(_QWORD *)v9 = off_24C5424D0;
        v10 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v9 + 24);
      }
      v116 = v10;
    }
    if ((v102 & 7) != 0)
    {
      v11 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v101 + 1);
    sub_20BFD265C(&v101);
    if (v100)
      sub_20C35C614(v100);
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&p_p_p);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v105 + 1);
  sub_20BFD265C(&v105);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v110 + 1);
  sub_20BFD265C(&v110);
  v104 = 0;
  v105 = 0;
  v103 = (void **)&v104;
  v100 = 0;
  v101 = 0;
  v99 = &v100;
  v13 = v115;
  v14 = v116;
  if (v115 == v116)
  {
    v90 = 0;
  }
  else
  {
    v90 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::GetMergeGroupNameAttr(v13, (uint64_t)&p_p_p);
      if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsAuthored((pxrInternal__aapl__pxrReserved__::UsdProperty *)&p_p_p) & 1) != 0)
      {
        __p = 0;
        v97 = 0;
        v98 = 0;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>((uint64_t)&p_p_p, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&__p);
        v15 = sub_20BDEEBA4((uint64_t)&v99, (const void **)&__p);
        if (&v100 == (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v15)
        {
          p_p = &__p;
          sub_20BDEEA20((uint64_t **)&v99, (const void **)&__p, (uint64_t)&unk_20CAC184C, (__int128 **)&p_p)[7] = v90;
          sub_20C3630C0((uint64_t)v13, &v91);
          p_p = &v91;
          *((_QWORD *)sub_20C7128CC((uint64_t **)&v103, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v91, (uint64_t)&unk_20CAC184C, (_DWORD **)&p_p)+ 5) = v90;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v91 + 1);
          sub_20BFD265C(&v91);
          ++v90;
        }
        else
        {
          v16 = *(_QWORD *)(v15 + 56);
          sub_20C3630C0((uint64_t)v13, &v91);
          p_p = &v91;
          *((_QWORD *)sub_20C7128CC((uint64_t **)&v103, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v91, (uint64_t)&unk_20CAC184C, (_DWORD **)&p_p)+ 5) = v16;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v91 + 1);
          sub_20BFD265C(&v91);
        }
        if (SHIBYTE(v98) < 0)
          operator delete(__p);
      }
      else
      {
        sub_20C3630C0((uint64_t)v13, &p_p);
        __p = &p_p;
        *((_QWORD *)sub_20C7128CC((uint64_t **)&v103, (pxrInternal__aapl__pxrReserved__::SdfPath *)&p_p, (uint64_t)&unk_20CAC184C, (_DWORD **)&__p)+ 5) = v90;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&p_p + 1);
        sub_20BFD265C(&p_p);
        ++v90;
      }
      if ((v111 & 7) != 0)
      {
        v17 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v110 + 1);
      sub_20BFD265C(&v110);
      if (v109)
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v109);
      v13 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *)((char *)v13 + 24);
    }
    while (v13 != v14);
  }
  __p = 0;
  v97 = 0;
  v98 = 0;
  sub_20BE69C4C((uint64_t)&__p, (v90 + v90 * v90) >> 1, 1);
  v19 = v115;
  v87 = v116;
  if (v115 == v116)
  {
    v61 = v115;
  }
  else
  {
    v20 = (char *)&v110 + 4;
    do
    {
      sub_20C3630C0((uint64_t)v19, &p_p);
      p_p_p = &p_p;
      v21 = sub_20C7128CC((uint64_t **)&v103, (pxrInternal__aapl__pxrReserved__::SdfPath *)&p_p, (uint64_t)&unk_20CAC184C, (_DWORD **)&p_p_p)[10];
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&p_p + 1);
      sub_20BFD265C(&p_p);
      p_p = 0;
      v94 = 0;
      v95 = 0;
      pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::GetFilteredGroupsRel(v19, (uint64_t)&p_p_p);
      v22 = v20;
      v91 = 0;
      v92[0] = 0;
      v92[1] = 0;
      pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets((uint64_t)&p_p_p, (uint64_t *)&v91);
      sub_20BE857FC(&p_p, (uint64_t)(v92[0] - (_QWORD)v91) >> 3);
      v24 = v91;
      v23 = (_DWORD *)v92[0];
      while (v24 != v23)
      {
        v118 = v24;
        v25 = sub_20C688410((uint64_t **)&v103, (pxrInternal__aapl__pxrReserved__::SdfPath *)v24, (uint64_t)&unk_20CAC184C, &v118)[10];
        v26 = v94;
        if ((unint64_t)v94 >= v95)
        {
          v28 = (char *)p_p;
          v29 = (v94 - (_BYTE *)p_p) >> 2;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62)
            sub_20BDDF694();
          v31 = v95 - (_QWORD)p_p;
          if ((uint64_t)(v95 - (_QWORD)p_p) >> 1 > v30)
            v30 = v31 >> 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
            v32 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            v33 = (char *)sub_20BDE1330((uint64_t)&v95, v32);
            v28 = (char *)p_p;
            v26 = v94;
          }
          else
          {
            v33 = 0;
          }
          v34 = (unsigned int *)&v33[4 * v29];
          *v34 = v25;
          v27 = v34 + 1;
          while (v26 != v28)
          {
            v35 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *--v34 = v35;
          }
          p_p = v34;
          v94 = (char *)v27;
          v95 = (unint64_t)&v33[4 * v32];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *(_DWORD *)v94 = v25;
          v27 = (unsigned int *)(v26 + 4);
        }
        v94 = (char *)v27;
        v24 += 2;
      }
      v119[0] = (void **)&v91;
      sub_20BFD6F90(v119);
      if ((v111 & 7) != 0)
      {
        v36 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      v20 = v22;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v22);
      sub_20BFD265C(&v110);
      if (v109)
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v109);
      LOBYTE(v119[0]) = 0;
      pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::GetInvertFilteredGroupsAttr(v19, (uint64_t)&p_p_p);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<BOOL>((uint64_t)&p_p_p, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v119);
      IsAuthored = pxrInternal__aapl__pxrReserved__::UsdProperty::IsAuthored((pxrInternal__aapl__pxrReserved__::UsdProperty *)&p_p_p);
      if (LOBYTE(v119[0]))
        v39 = IsAuthored;
      else
        v39 = 0;
      if ((v39 & 1) != 0)
      {
        sub_20C71298C((uint64_t)&v91, (unsigned int *)p_p, (unsigned int *)v94);
        v40 = (_QWORD *)v92[0];
        if (v90)
        {
          v41 = 0;
          v42 = (char *)__p;
          do
          {
            if (!v40)
              goto LABEL_83;
            v43 = v92;
            v44 = v40;
            do
            {
              v45 = v44;
              v46 = v43;
              v47 = *((_DWORD *)v44 + 7);
              if (v47 >= v41)
                v43 = v44;
              else
                ++v44;
              v44 = (_QWORD *)*v44;
            }
            while (v44);
            if (v43 == v92)
              goto LABEL_83;
            if (v47 < v41)
              v45 = v46;
            if (v41 < *((_DWORD *)v45 + 7))
            {
LABEL_83:
              if (v41 >= v21)
                v48 = v21;
              else
                v48 = v41;
              if (v41 <= v21)
                v49 = v21;
              else
                v49 = v41;
              v50 = v49 + v48 * v90 - ((v48 + v48 * v48) >> 1);
              *(_QWORD *)&v42[(v50 >> 3) & 0x1FFFFFF8] &= ~(1 << v50);
            }
            ++v41;
          }
          while (v41 != v90);
        }
        sub_20BE6100C((uint64_t)&v91, v40);
      }
      else
      {
        v51 = (char *)p_p;
        v52 = v94;
        if (p_p != v94)
        {
          v53 = (char *)__p;
          do
          {
            v55 = *(_DWORD *)v51;
            v51 += 4;
            v54 = v55;
            v56 = v55 > v21;
            if (v55 >= v21)
              v57 = v21;
            else
              v57 = v54;
            if (!v56)
              v54 = v21;
            v58 = v54 + v57 * v90 - ((v57 + v57 * v57) >> 1);
            *(_QWORD *)&v53[(v58 >> 3) & 0x1FFFFFF8] &= ~(1 << v58);
          }
          while (v51 != v52);
        }
      }
      if ((v111 & 7) != 0)
      {
        v59 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
        do
          v60 = __ldxr(v59);
        while (__stlxr(v60 - 2, v59));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v22);
      sub_20BFD265C(&v110);
      if (v109)
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v109);
      if (p_p)
      {
        v94 = (char *)p_p;
        operator delete(p_p);
      }
      v19 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *)((char *)v19 + 24);
    }
    while (v19 != v87);
    v19 = v115;
    v61 = v116;
  }
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  sub_20C0B8D74((uint64_t *)a2, 0xAAAAAAAAAAAAAAABLL * ((v61 - v19) >> 3));
  v62 = v115;
  for (i = v116; v62 != i; v62 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v62 + 24))
  {
    sub_20C35C4F8((uint64_t)&p_p_p, (uint64_t *)v62 + 1, (_DWORD *)v62 + 4);
    v64 = sub_20C3734F4((uint64_t)&p_p_p);
    v65 = *(_QWORD *)(a2 + 8);
    if (v65 >= *(_QWORD *)(a2 + 16))
    {
      v66 = sub_20BFD7890((uint64_t *)a2, v64);
    }
    else
    {
      sub_20BFD6E54(*(_DWORD **)(a2 + 8), v64);
      sub_20BFD6EA4((_DWORD *)(v65 + 4), (_DWORD *)v64 + 1);
      v66 = v65 + 8;
    }
    *(_QWORD *)(a2 + 8) = v66;
    if ((v111 & 7) != 0)
    {
      v67 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
      do
        v68 = __ldxr(v67);
      while (__stlxr(v68 - 2, v67));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v110 + 1);
    sub_20BFD265C(&v110);
    if (v109)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v109);
  }
  sub_20BE69C4C(a2 + 24, (unint64_t)(((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3)* ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3)+ ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3)) >> 1, 1);
  v69 = v115;
  v70 = v116;
  if (v116 != v115)
  {
    v71 = 0;
    v72 = 0;
    v73 = 1;
    do
    {
      v74 = v72;
      v75 = 0xAAAAAAAAAAAAAAABLL * ((v70 - v69) >> 3);
      v88 = v73;
      v76 = v72;
      if (v75 > v72)
      {
        do
        {
          sub_20C3630C0((uint64_t)v69 + 24 * v71, &p_p);
          p_p_p = &p_p;
          v77 = sub_20C7128CC((uint64_t **)&v103, (pxrInternal__aapl__pxrReserved__::SdfPath *)&p_p, (uint64_t)&unk_20CAC184C, (_DWORD **)&p_p_p)[10];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&p_p + 1);
          sub_20BFD265C(&p_p);
          sub_20C3630C0((uint64_t)v115 + 24 * v76, &p_p);
          p_p_p = &p_p;
          v78 = *((_QWORD *)sub_20C7128CC((uint64_t **)&v103, (pxrInternal__aapl__pxrReserved__::SdfPath *)&p_p, (uint64_t)&unk_20CAC184C, (_DWORD **)&p_p_p)+ 5);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&p_p + 1);
          sub_20BFD265C(&p_p);
          if (v73 - 1 >= v74)
            v80 = v74;
          else
            v80 = v73 - 1;
          if (v74 <= v73 - 1)
            v81 = v73 - 1;
          else
            v81 = v74;
          v69 = v115;
          v70 = v116;
          v75 = 0xAAAAAAAAAAAAAAABLL * ((v116 - v115) >> 3);
          v82 = v81 - ((v80 + v80 * v80) >> 1) + v80 * (_DWORD)v75;
          v83 = *(_QWORD *)(a2 + 24);
          v84 = v82 >> 6;
          v85 = 1 << v82;
          v79 = v90 * v77 - ((v77 + v77 * v77) >> 1) + v78;
          if (((*(_QWORD *)((char *)__p + ((v79 >> 3) & 0x1FFFFFF8)) >> v79) & 1) != 0)
            v86 = *(_QWORD *)(v83 + 8 * v84) | v85;
          else
            v86 = *(_QWORD *)(v83 + 8 * v84) & ~v85;
          v76 = v73;
          v56 = v75 > v73++;
          *(_QWORD *)(v83 + 8 * v84) = v86;
        }
        while (v56);
      }
      v71 = v74 + 1;
      v73 = v88 + 1;
      v72 = v74 + 1;
    }
    while (v75 > v71);
  }
  if (__p)
    operator delete(__p);
  sub_20BDECAB8((uint64_t)&v99, (char *)v100);
  sub_20C6885D8((uint64_t)&v103, v104);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v114);
  sub_20BFD265C(&v113);
  v112[0] = (void **)&v115;
  sub_20C599B38(v112);
}

void sub_20C71229C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,char *a27,uint64_t a28,uint64_t a29,char a30,_QWORD *a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  if (__p)
    operator delete(__p);
  sub_20BDECAB8((uint64_t)&a26, a27);
  sub_20C6885D8((uint64_t)&a30, a31);
  sub_20C37EDFC(v34 - 192);
  *(_QWORD *)(v34 - 192) = v34 - 136;
  sub_20C599B38((void ***)(v34 - 192));
  _Unwind_Resume(a1);
}

uint64_t sub_20C712484(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 24);
  if (v2)
    operator delete(v2);
  v4 = (void **)a1;
  sub_20BFD6F90(&v4);
  return a1;
}

uint64_t *sub_20C7124C4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5647E8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C712598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C7125E4(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C712674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C712698(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v14;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v10[24 * v4];
  v15 = v14;
  v16 = &v10[24 * v9];
  *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v14, a2) = off_24C5424D0;
  v15 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v15 + 24);
  sub_20C7127A8(a1, &v13);
  v11 = a1[1];
  sub_20C599DF8((uint64_t)&v13);
  return v11;
}

void sub_20C712794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C599DF8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7127A8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C71281C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C71281C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a7 - 24 + v11), (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a3 + v11 - 24)) = off_24C5424D0;
      v11 -= 24;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_20C7128A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 24)
    (**(void (***)(uint64_t))(v1 + v2))(v1 + v2);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C7128CC(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  void **v6;
  _DWORD *v7;
  uint64_t **v8;
  _DWORD *v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v6 = (void **)sub_20C137858((uint64_t)a1, &v13, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x30uLL);
    v11[1] = a1 + 1;
    v9 = *a4;
    sub_20BFD38A4(v7 + 8, v9);
    sub_20BFD38DC(v7 + 9, v9 + 1);
    *((_QWORD *)v7 + 5) = 0;
    v12 = 1;
    sub_20BDDE1B4(a1, v13, v8, (uint64_t *)v7);
    v11[0] = 0;
    sub_20C6884D0((uint64_t)v11, 0);
  }
  return v7;
}

uint64_t sub_20C71298C(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t *v4;
  unsigned int *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20BE64C60((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_20C7129F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20C712A0C()
{
  void *__p[2];
  char v1;

  sub_20C713508();
  sub_20BDDC0E4(__p, "PhysicsDistanceJoint");
  sub_20C713628((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C712A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::~UsdPhysicsDistanceJoint(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::~UsdPhysicsJoint(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542528;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdPhysics/distanceJoint.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdPhysicsDistanceJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::Ge"
                            "t(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542528;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C712BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498C458);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498C458))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498C450, "PhysicsDistanceJoint");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498C450, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C458);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498C450, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C542528;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdPhysics/distanceJoint.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdPhysicsDistanceJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::De"
                            "fine(const UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C542528;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C712DEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C458);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C468);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C468))
  {
    __cxa_guard_release(&qword_25498C468);
  }
  return &qword_25498C460;
}

void sub_20C712E90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C468);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C478);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *)__cxa_guard_acquire(&qword_25498C478);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::_GetStaticTfType(v3);
      byte_25498C470 = sub_20C35BD7C((char *)&qword_25498C460, v4, v5);
      __cxa_guard_release(&qword_25498C478);
    }
  }
  return byte_25498C470;
}

void sub_20C712F0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C478);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::_GetStaticTfType(this);
  return &qword_25498C460;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::GetMinDistanceAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 424), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C712FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::CreateMinDistanceAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 424), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::GetMaxDistanceAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 408), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71313C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::CreateMaxDistanceAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 408), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C498);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C498))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 53);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v9)
      v9 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 51);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498C480, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C480, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C498);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C4B8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C4B8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *)1);
    sub_20C713454((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C4A0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C4B8);
  }
  if (v1)
    return &qword_25498C4A0;
  else
    return &qword_25498C480;
}

void sub_20C7133D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498C498);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C713454(uint64_t **a1)
{
  qword_25498C4A8 = 0;
  unk_25498C4B0 = 0;
  qword_25498C4A0 = 0;
  sub_20BFC9A6C((char **)&qword_25498C4A0, ((unk_25498C488 - qword_25498C480) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C4A0, (_QWORD *)qword_25498C4A8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C4A0, (_QWORD *)qword_25498C4A8, (uint64_t *)qword_25498C480, unk_25498C488, (unk_25498C488 - qword_25498C480) >> 3);
}

void sub_20C7134E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C713508()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C7136D8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C7135DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C713628(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C7136B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C7136D8(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C713744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::~UsdPhysicsDriveAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::Get(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  const char *Text;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v6 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v6)
  {
    v24 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::IsPhysicsDriveAPIPath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, v7) & 1) != 0)
    {
      v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v23);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, (uint64_t)&v25);
      sub_20C37A850(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25, &v24);
      *(_QWORD *)a3 = off_24C542580;
      if ((v28 & 7) != 0)
      {
        v10 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stlxr(v11 - 2, v10));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
      sub_20BFD265C(&v27);
      if (v26)
        sub_20C35C614(v26);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_20BFD265C(&v23);
    }
    else
    {
      v25 = "usdPhysics/driveAPI.cpp";
      v26 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
      v27 = 63;
      v28 = (unint64_t)"static UsdPhysicsDriveAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::Get(const "
                              "UsdStagePtr &, const SdfPath &)";
      v29 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid drive path <%s>.", Text);
      LODWORD(v25) = 1;
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v27 + 1);
      v28 = 0;
      v23 = 0;
      sub_20C37A850(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25, &v23);
      *(_QWORD *)a3 = off_24C542580;
      if ((v23 & 7) != 0)
      {
        v17 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
      if ((v28 & 7) != 0)
      {
        v19 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
      sub_20BFD265C(&v27);
      if (v26)
        sub_20C35C614(v26);
    }
    if ((v24 & 7) != 0)
    {
      v21 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
  }
  else
  {
    v25 = "usdPhysics/driveAPI.cpp";
    v26 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v27 = 58;
    v28 = (unint64_t)"static UsdPhysicsDriveAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v25) = 1;
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v27);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v27 + 1);
    v28 = 0;
    v24 = 0;
    sub_20C37A850(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25, &v24);
    *(_QWORD *)a3 = off_24C542580;
    if ((v24 & 7) != 0)
    {
      v12 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    if ((v28 & 7) != 0)
    {
      v14 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    sub_20BFD265C(&v27);
    if (v26)
      sub_20C35C614(v26);
  }
}

void sub_20C713A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  va_list va;

  va_start(va, a4);
  if ((a3 & 7) != 0)
  {
    v5 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  if ((a4 & 7) != 0)
  {
    v7 = (unsigned int *)(a4 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::IsPhysicsDriveAPIPath(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t *Name;
  __int128 v6;
  uint64_t v7;
  const pxrInternal__aapl__pxrReserved__::TfToken *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v16;
  uint64_t *EmptyString;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  std::string v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  std::string __p;
  char v31;

  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this))
    return 0;
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
  if (*((char *)Name + 23) < 0)
  {
    sub_20BDDBFAC(&__p, (void *)*Name, Name[1]);
  }
  else
  {
    v6 = *(_OWORD *)Name;
    __p.__r_.__value_.__r.__words[2] = Name[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens((unsigned __int8 *)&__p, (uint64_t *)&v28);
  v9 = *(_QWORD *)(v29 - 8);
  v27 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
    {
      v27 = v9 & 0xFFFFFFFFFFFFFFF8;
      v9 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (!pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::IsSchemaPropertyBaseName((pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *)&v27, v8)&& (v12 = v28, (unint64_t)(v29 - (_QWORD)v28) >= 9)&& (*v12 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)sub_20C714298() & 0xFFFFFFFFFFFFFFF8))
  {
    v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C714298();
    if ((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
    if (*((char *)EmptyString + 23) < 0)
      v18 = EmptyString[1];
    else
      v18 = *((unsigned __int8 *)EmptyString + 23);
    std::string::basic_string(&v25, &__p, v18 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v26);
    v19 = *(_QWORD *)a2;
    v20 = *(_QWORD *)a2 & 7;
    if (&v26 == (uint64_t *)a2)
    {
      if (v20)
      {
        v23 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
    }
    else
    {
      if (v20)
      {
        v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      *(_QWORD *)a2 = v26;
      v26 = 0;
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    v7 = 1;
    v9 = v27;
  }
  else
  {
    v7 = 0;
  }
  if ((v9 & 7) != 0)
  {
    v13 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  sub_20BEEB2B8((void ***)&v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_20C713D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  unsigned int *v27;
  unsigned int v28;

  if (a14 < 0)
    operator delete(__p);
  if ((v25 & 7) != 0)
  {
    v27 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  __p = &a17;
  sub_20BEEB2B8((void ***)&__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::Get@<X0>(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *result;

  result = sub_20C37A850(a3, this, (uint64_t *)a2);
  *(_QWORD *)result = off_24C542580;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetAll(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v7;
  uint64_t *v8;
  uint64_t *v9;
  void **v10;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::_GetStaticTfType(this);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetMultipleApplyInstanceNames(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&qword_25498C4E8, (uint64_t)&v8);
  v5 = v8;
  v6 = v9;
  if (v8 != v9)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a2[1];
    do
    {
      if ((unint64_t)v7 >= a2[2])
      {
        v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_20C7167BC(a2, this, v5);
      }
      else
      {
        sub_20C37A850(v7, this, v5);
        *(_QWORD *)v7 = off_24C542580;
        v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v7 + 32);
        a2[1] = (uint64_t)v7;
      }
      a2[1] = (uint64_t)v7;
      ++v5;
    }
    while (v5 != v6);
  }
  v10 = (void **)&v8;
  sub_20BEEB2B8(&v10);
}

void sub_20C713EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C37B438((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C4F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C4F0))
  {
    __cxa_guard_release(&qword_25498C4F0);
  }
  return &qword_25498C4E8;
}

void sub_20C713F44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C4F0);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::IsSchemaPropertyBaseName(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unsigned __int8 v2;
  _QWORD *v3;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *v5;
  int v6;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v7;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v9;
  uint64_t *v10;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v11;
  uint64_t *v12;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v13;
  uint64_t *v14;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v15;
  uint64_t *v16;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C4D8);
  if ((v2 & 1) == 0)
  {
    v5 = this;
    v6 = __cxa_guard_acquire(&qword_25498C4D8);
    this = v5;
    if (v6)
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if (!v7)
        v7 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if ((*((_QWORD *)v7 + 14) & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*((_QWORD *)v7 + 14) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)EmptyString, &v24);
      v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if (!v9)
        v9 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if ((*((_QWORD *)v9 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
        v10 = (uint64_t *)((*((_QWORD *)v9 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v10, &v25);
      v11 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if (!v11)
        v11 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if ((*((_QWORD *)v11 + 12) & 0xFFFFFFFFFFFFFFF8) != 0)
        v12 = (uint64_t *)((*((_QWORD *)v11 + 12) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v12 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v12, &v26);
      v13 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if (!v13)
        v13 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if ((*((_QWORD *)v13 + 13) & 0xFFFFFFFFFFFFFFF8) != 0)
        v14 = (uint64_t *)((*((_QWORD *)v13 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v14, &v27);
      v15 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if (!v15)
        v15 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if ((*((_QWORD *)v15 + 9) & 0xFFFFFFFFFFFFFFF8) != 0)
        v16 = (uint64_t *)((*((_QWORD *)v15 + 9) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v16, &v28);
      v17 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if (!v17)
        v17 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if ((*((_QWORD *)v17 + 11) & 0xFFFFFFFFFFFFFFF8) != 0)
        v18 = (uint64_t *)((*((_QWORD *)v17 + 11) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v18, &v29);
      sub_20C374970(qword_25498C4C0, &v24, 6uLL);
      v19 = &v30;
      do
      {
        v21 = *--v19;
        v20 = v21;
        if ((v21 & 7) != 0)
        {
          v22 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
          do
            v23 = __ldxr(v22);
          while (__stlxr(v23 - 2, v22));
        }
      }
      while (v19 != &v24);
      __cxa_atexit((void (*)(void *))sub_20C1984B4, qword_25498C4C0, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498C4D8);
      this = v5;
    }
  }
  v3 = (_QWORD *)qword_25498C4C0[0];
  if (qword_25498C4C0[0] != unk_25498C4C8)
  {
    while ((*v3 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v3 == (_QWORD *)unk_25498C4C8)
      {
        v3 = (_QWORD *)unk_25498C4C8;
        return v3 != (_QWORD *)unk_25498C4C8;
      }
    }
  }
  return v3 != (_QWORD *)unk_25498C4C8;
}

void sub_20C714218(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = v1 + 48;
  while (1)
  {
    v5 = *(_QWORD *)(v3 - 8);
    v3 -= 8;
    v4 = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    if (v3 == v1)
    {
      __cxa_guard_abort(&qword_25498C4D8);
      _Unwind_Resume(a1);
    }
  }
}

unint64_t sub_20C714298()
{
  char *v0;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;
  unsigned int v12;
  void **v13;
  char v14;

  v0 = (char *)atomic_load(&qword_25498C4E0);
  if (!v0)
  {
    v0 = (char *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "drive", 0);
    v2 = *(_QWORD *)v0;
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 2, v3));
      if ((v4 & 1) == 0)
        v2 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((_QWORD *)v0 + 1) = 0;
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    v13 = (void **)(v0 + 8);
    v14 = 0;
    v5 = operator new(8uLL);
    *((_QWORD *)v0 + 1) = v5;
    *((_QWORD *)v0 + 2) = v5;
    *v5 = v2;
    v6 = v5 + 1;
    *((_QWORD *)v0 + 3) = v5 + 1;
    if ((v2 & 7) != 0)
    {
      v7 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        *v5 &= 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v0 + 2) = v6;
      do
        v9 = __ldxr(v7);
      while (__stlxr(v9 - 2, v7));
    }
    else
    {
      *((_QWORD *)v0 + 2) = v6;
    }
    while (!__ldaxr(&qword_25498C4E0))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498C4E0))
        return (unint64_t)v0;
    }
    __clrex();
    v13 = (void **)(v0 + 8);
    sub_20BEEB2B8(&v13);
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v11 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    operator delete(v0);
    return atomic_load(&qword_25498C4E0);
  }
  return (unint64_t)v0;
}

void sub_20C7143E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  sub_20BEEB2B8(&a9);
  if ((v10 & 7) != 0)
  {
    v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((*v9 & 7) != 0)
  {
    v14 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this)
{
  return 6;
}

uint64_t sub_20C71444C(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v6;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v8;
  char *v9;
  pxrInternal__aapl__pxrReserved__::TfType *v11;
  uint64_t TypeName;
  const char *v13;
  _QWORD v14[4];
  char v15;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C4E8, v6);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(a1, SchemaInfo, a2, a3);
  v14[0] = "usd/prim.h";
  v14[1] = "CanApplyAPI";
  v14[2] = 1059;
  v14[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(const TfToken &, std::string *) const [SchemaType"
           " = pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI]";
  v15 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v11);
  if (*(char *)(TypeName + 23) >= 0)
    v13 = (const char *)TypeName;
  else
    v13 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v13);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  int v15;
  uint64_t v16;

  if (sub_20C714660(this, a2))
  {
    sub_20C37A850(a3, this, (uint64_t *)a2);
    *(_QWORD *)a3 = off_24C542580;
  }
  else
  {
    v12 = 1;
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v15);
    v16 = 0;
    v11 = 0;
    sub_20C37A850(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12, &v11);
    *(_QWORD *)a3 = off_24C542580;
    if ((v11 & 7) != 0)
    {
      v7 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_20BFD265C(&v14);
    if (v13)
      sub_20C35C614(v13);
  }
}

void sub_20C71462C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a3);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C714660(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C4E8, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI((pxrInternal__aapl__pxrReserved__ **)a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "ApplyAPI";
  v12[2] = 1188;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(const TfToken &) const [SchemaType = pxrInternal__aa"
           "pl__pxrReserved__::UsdPhysicsDriveAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C500);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *)__cxa_guard_acquire(&qword_25498C500);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::_GetStaticTfType(v3);
      byte_25498C4F8 = sub_20C35BD7C((char *)&qword_25498C4E8, v4, v5);
      __cxa_guard_release(&qword_25498C500);
    }
  }
  return byte_25498C4F8;
}

void sub_20C714780(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C500);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::_GetStaticTfType(this);
  return &qword_25498C4E8;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetTypeAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString)
    EmptyString = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v8 = *((_QWORD *)EmptyString + 14);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C714948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::CreateTypeAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v8 = *((_QWORD *)this + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString)
    EmptyString = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v12 = *((_QWORD *)EmptyString + 14);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v16 = (uint64_t)(v15 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v16 = (uint64_t)EmptyString;
  }
  v17 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    v18 = (uint64_t *)(v17 + 4);
  else
    v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v16, (uint64_t)v18, (uint64_t)&v24);
  v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19)
    v19 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v19 + 88), 0, 1, a2, a3, a4);
  if ((v24 & 7) != 0)
  {
    v20 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  if ((v12 & 7) != 0)
  {
    do
      v22 = __ldxr(v15);
    while (__stlxr(v22 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v23 = __ldxr(v17);
    while (__stlxr(v23 - 2, v17));
  }
}

void sub_20C714B54(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetMaxForceAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString)
    EmptyString = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v8 = *((_QWORD *)EmptyString + 10);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C714D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::CreateMaxForceAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v8 = *((_QWORD *)this + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString)
    EmptyString = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v12 = *((_QWORD *)EmptyString + 10);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v16 = (uint64_t)(v15 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v16 = (uint64_t)EmptyString;
  }
  v17 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    v18 = (uint64_t *)(v17 + 4);
  else
    v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v16, (uint64_t)v18, (uint64_t)&v24);
  v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19)
    v19 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v19 + 56), 0, 0, a2, a3, a4);
  if ((v24 & 7) != 0)
  {
    v20 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  if ((v12 & 7) != 0)
  {
    do
      v22 = __ldxr(v15);
    while (__stlxr(v22 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v23 = __ldxr(v17);
    while (__stlxr(v23 - 2, v17));
  }
}

void sub_20C714F54(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetTargetPositionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString)
    EmptyString = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v8 = *((_QWORD *)EmptyString + 12);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C715148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::CreateTargetPositionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v8 = *((_QWORD *)this + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString)
    EmptyString = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v12 = *((_QWORD *)EmptyString + 12);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v16 = (uint64_t)(v15 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v16 = (uint64_t)EmptyString;
  }
  v17 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    v18 = (uint64_t *)(v17 + 4);
  else
    v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v16, (uint64_t)v18, (uint64_t)&v24);
  v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19)
    v19 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v19 + 56), 0, 0, a2, a3, a4);
  if ((v24 & 7) != 0)
  {
    v20 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  if ((v12 & 7) != 0)
  {
    do
      v22 = __ldxr(v15);
    while (__stlxr(v22 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v23 = __ldxr(v17);
    while (__stlxr(v23 - 2, v17));
  }
}

void sub_20C715354(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetTargetVelocityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString)
    EmptyString = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v8 = *((_QWORD *)EmptyString + 13);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C715548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::CreateTargetVelocityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v8 = *((_QWORD *)this + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString)
    EmptyString = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v12 = *((_QWORD *)EmptyString + 13);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v16 = (uint64_t)(v15 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v16 = (uint64_t)EmptyString;
  }
  v17 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    v18 = (uint64_t *)(v17 + 4);
  else
    v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v16, (uint64_t)v18, (uint64_t)&v24);
  v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19)
    v19 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v19 + 56), 0, 0, a2, a3, a4);
  if ((v24 & 7) != 0)
  {
    v20 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  if ((v12 & 7) != 0)
  {
    do
      v22 = __ldxr(v15);
    while (__stlxr(v22 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v23 = __ldxr(v17);
    while (__stlxr(v23 - 2, v17));
  }
}

void sub_20C715754(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetDampingAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString)
    EmptyString = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v8 = *((_QWORD *)EmptyString + 9);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C715948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::CreateDampingAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v8 = *((_QWORD *)this + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString)
    EmptyString = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v12 = *((_QWORD *)EmptyString + 9);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v16 = (uint64_t)(v15 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v16 = (uint64_t)EmptyString;
  }
  v17 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    v18 = (uint64_t *)(v17 + 4);
  else
    v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v16, (uint64_t)v18, (uint64_t)&v24);
  v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19)
    v19 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v19 + 56), 0, 0, a2, a3, a4);
  if ((v24 & 7) != 0)
  {
    v20 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  if ((v12 & 7) != 0)
  {
    do
      v22 = __ldxr(v15);
    while (__stlxr(v22 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v23 = __ldxr(v17);
    while (__stlxr(v23 - 2, v17));
  }
}

void sub_20C715B54(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetStiffnessAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString)
    EmptyString = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v8 = *((_QWORD *)EmptyString + 11);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C715D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::CreateStiffnessAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v8 = *((_QWORD *)this + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString)
    EmptyString = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v12 = *((_QWORD *)EmptyString + 11);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v16 = (uint64_t)(v15 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v16 = (uint64_t)EmptyString;
  }
  v17 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    v18 = (uint64_t *)(v17 + 4);
  else
    v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v16, (uint64_t)v18, (uint64_t)&v24);
  v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19)
    v19 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v19 + 56), 0, 0, a2, a3, a4);
  if ((v24 & 7) != 0)
  {
    v20 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  if ((v12 & 7) != 0)
  {
    do
      v22 = __ldxr(v15);
    while (__stlxr(v22 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v23 = __ldxr(v17);
    while (__stlxr(v23 - 2, v17));
  }
}

void sub_20C715F54(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t *SchemaAttributeNames;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = (int)this;
  v41 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C520);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C520))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 14);
    v35 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v9)
      v9 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v10 = *((_QWORD *)v9 + 10);
    v36 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v36 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v13)
      v13 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v14 = *((_QWORD *)v13 + 12);
    v37 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v37 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v17)
      v17 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v18 = *((_QWORD *)v17 + 13);
    v38 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v38 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v21)
      v21 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v22 = *((_QWORD *)v21 + 9);
    v39 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v39 &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v25)
      v25 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v26 = *((_QWORD *)v25 + 11);
    v40 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v40 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498C508, &v35, 6uLL);
    v29 = &v41;
    do
    {
      v31 = *--v29;
      v30 = v31;
      if ((v31 & 7) != 0)
      {
        v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
    }
    while (v29 != &v35);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C508, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C520);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C540);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C540))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C716394((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C528, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C540);
  }
  if (v1)
    return &qword_25498C528;
  else
    return &qword_25498C508;
}

void sub_20C716304(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C520);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C716394(uint64_t **a1)
{
  qword_25498C530 = 0;
  unk_25498C538 = 0;
  qword_25498C528 = 0;
  sub_20BFC9A6C((char **)&qword_25498C528, ((*(_QWORD *)algn_25498C510 - qword_25498C508) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C528, (_QWORD *)qword_25498C530, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C528, (_QWORD *)qword_25498C530, (uint64_t *)qword_25498C508, *(uint64_t **)algn_25498C510, (*(_QWORD *)algn_25498C510 - qword_25498C508) >> 3);
}

void sub_20C716428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **SchemaAttributeNames;
  uint64_t **v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int64x2_t v28;
  char *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  int64x2_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetSchemaAttributeNames(this);
  v7 = SchemaAttributeNames;
  v8 = *a2;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  if (v8)
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFC9A6C((char **)a3, SchemaAttributeNames[1] - *SchemaAttributeNames);
    v10 = *v7;
    v11 = v7[1];
    if (*v7 != v11)
    {
      do
      {
        if ((*v10 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v12 = (*v10 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          v12 = (uint64_t)EmptyString;
        }
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
          v13 = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v13, (uint64_t)&v36);
        v15 = *(_QWORD **)(a3 + 8);
        v14 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v15 >= v14)
        {
          v18 = ((uint64_t)v15 - *(_QWORD *)a3) >> 3;
          if ((unint64_t)(v18 + 1) >> 61)
            sub_20BDDF694();
          v19 = v14 - *(_QWORD *)a3;
          v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1))
            v20 = v18 + 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          v35 = a3 + 16;
          if (v21)
            v22 = (char *)sub_20BDDF6A8(a3 + 16, v21);
          else
            v22 = 0;
          v23 = &v22[8 * v18];
          v24 = &v22[8 * v21];
          v34 = v24;
          *(_QWORD *)v23 = v36;
          v17 = v23 + 8;
          v36 = 0;
          v33.i64[1] = (uint64_t)(v23 + 8);
          v26 = *(char **)a3;
          v25 = *(char **)(a3 + 8);
          if (v25 == *(char **)a3)
          {
            v28 = vdupq_n_s64((unint64_t)v25);
          }
          else
          {
            do
            {
              v27 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *((_QWORD *)v23 - 1) = v27;
              v23 -= 8;
              *(_QWORD *)v25 = 0;
            }
            while (v25 != v26);
            v28 = *(int64x2_t *)a3;
            v17 = (_QWORD *)v33.i64[1];
            v24 = v34;
          }
          *(_QWORD *)a3 = v23;
          *(_QWORD *)(a3 + 8) = v17;
          v33 = v28;
          v29 = *(char **)(a3 + 16);
          *(_QWORD *)(a3 + 16) = v24;
          v34 = v29;
          v32 = v28.i64[0];
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF1EE98((uint64_t)&v32);
          v16 = v36;
        }
        else
        {
          v16 = 0;
          *v15 = v36;
          v17 = v15 + 1;
          v36 = 0;
        }
        *(_QWORD *)(a3 + 8) = v17;
        if ((v16 & 7) != 0)
        {
          v30 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
          do
            v31 = __ldxr(v30);
          while (__stlxr(v31 - 2, v30));
        }
        ++v10;
      }
      while (v10 != v11);
    }
  }
  else
  {
    sub_20BFE538C((_QWORD *)a3, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
  }
}

void sub_20C716650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C716698()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C71676C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7167BC(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v16;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20BED2F10(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v12[32 * v5];
  v17 = v16;
  v18 = &v12[32 * v11];
  *(_QWORD *)sub_20C37A850(v16, a2, a3) = off_24C542580;
  v17 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v17 + 32);
  sub_20C7168B4(a1, &v15);
  v13 = a1[1];
  sub_20C37B750((uint64_t)&v15);
  return v13;
}

void sub_20C7168A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C37B750((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7168B4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C716928((int)a1 + 16, a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C716928(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v13;

  v11 = 0;
  v12 = a7 - 32;
  while (a3 + v11 != a5)
  {
    v13 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v12 + v11);
    v11 -= 32;
    sub_20C7169D0(a1, v13, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v11 + a3));
  }
  return a6;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_20C7169D0(int a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, a3);
  *(_QWORD *)result = &unk_24C537498;
  v5 = *((_QWORD *)a3 + 3);
  *((_QWORD *)result + 3) = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *((_QWORD *)result + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)result = off_24C542580;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::~UsdPhysicsFilteredPairsAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C5425D8;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdPhysics/filteredPairsAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdPhysicsFilteredPairsAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsA"
                            "PI::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C5425D8;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C716BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this)
{
  return 5;
}

uint64_t sub_20C716C04(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C548, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdPhysicsFilteredPairsAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C716DBC(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C5425D8;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C5425D8;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C716DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C716DBC(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C548, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdPhysicsFilteredPairsAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C550);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C550))
  {
    __cxa_guard_release(&qword_25498C550);
  }
  return &qword_25498C548;
}

void sub_20C716ED8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C550);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C560);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *)__cxa_guard_acquire(&qword_25498C560);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::_GetStaticTfType(v3);
      byte_25498C558 = sub_20C35BD7C((char *)&qword_25498C548, v4, v5);
      __cxa_guard_release(&qword_25498C560);
    }
  }
  return byte_25498C558;
}

void sub_20C716F54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C560);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::_GetStaticTfType(this);
  return &qword_25498C548;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::GetFilteredPairsRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 312), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71702C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::CreateFilteredPairsRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 312), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C7170EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498C580);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C580))
  {
    qword_25498C568 = 0;
    unk_25498C570 = 0;
    qword_25498C578 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C568, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C580);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C5A0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C5A0))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_25498C588 = 0;
    unk_25498C590 = 0;
    qword_25498C598 = 0;
    sub_20BFE538C(&qword_25498C588, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C588, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C5A0);
  }
  if (v1)
    return &qword_25498C588;
  else
    return &qword_25498C568;
}

void sub_20C717200(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C5A0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C717218()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C7172EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C71733C()
{
  void *__p[2];
  char v1;

  sub_20C717984();
  sub_20BDDC0E4(__p, "PhysicsFixedJoint");
  sub_20C717AA4((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C717388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::~UsdPhysicsFixedJoint(pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::~UsdPhysicsJoint(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542630;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdPhysics/fixedJoint.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdPhysicsFixedJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::Get(cons"
                            "t UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542630;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C71752C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498C5B0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498C5B0))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498C5A8, "PhysicsFixedJoint");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498C5A8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C5B0);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498C5A8, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C542630;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdPhysics/fixedJoint.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdPhysicsFixedJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::Define(c"
                            "onst UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C542630;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C71771C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C5B0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C5C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C5C0))
  {
    __cxa_guard_release(&qword_25498C5C0);
  }
  return &qword_25498C5B8;
}

void sub_20C7177C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C5C0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C5D0);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint *)__cxa_guard_acquire(&qword_25498C5D0);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::_GetStaticTfType(v3);
      byte_25498C5C8 = sub_20C35BD7C((char *)&qword_25498C5B8, v4, v5);
      __cxa_guard_release(&qword_25498C5D0);
    }
  }
  return byte_25498C5C8;
}

void sub_20C71783C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C5D0);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::_GetStaticTfType(this);
  return &qword_25498C5B8;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_25498C5F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C5F0))
  {
    qword_25498C5D8 = 0;
    unk_25498C5E0 = 0;
    qword_25498C5E8 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C5D8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C5F0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C610);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C610))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *)1);
    qword_25498C5F8 = 0;
    unk_25498C600 = 0;
    qword_25498C608 = 0;
    sub_20BFE538C(&qword_25498C5F8, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C5F8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C610);
  }
  if (v1)
    return &qword_25498C5F8;
  else
    return &qword_25498C5D8;
}

void sub_20C71796C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C610);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C717984()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C7136D8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C717A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C717AA4(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C717B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C717B58()
{
  void *__p[2];
  char v1;

  sub_20C71952C();
  sub_20BDDC0E4(__p, "PhysicsJoint");
  sub_20C71964C((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C717BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::~UsdPhysicsJoint(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542688;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdPhysics/joint.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdPhysicsJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::Get(const UsdStage"
                            "Ptr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542688;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C717D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498C620);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498C620))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498C618, "PhysicsJoint");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498C618, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C620);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498C618, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C542688;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdPhysics/joint.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdPhysicsJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::Define(const UsdSt"
                            "agePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C542688;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C717F38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C620);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C630);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C630))
  {
    __cxa_guard_release(&qword_25498C630);
  }
  return &qword_25498C628;
}

void sub_20C717FDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C630);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C640);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *)__cxa_guard_acquire(&qword_25498C640);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::_GetStaticTfType(v3);
      byte_25498C638 = sub_20C35BD7C((char *)&qword_25498C628, v4, v5);
      __cxa_guard_release(&qword_25498C640);
    }
  }
  return byte_25498C638;
}

void sub_20C718058(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C640);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::_GetStaticTfType(this);
  return &qword_25498C628;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetLocalPos0Attr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 360), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C718130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateLocalPos0Attr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 360), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 208), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetLocalRot0Attr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 376), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C718288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateLocalRot0Attr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 376), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 328), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetLocalPos1Attr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 368), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C7183E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateLocalPos1Attr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 368), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 208), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetLocalRot1Attr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 384), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C718538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateLocalRot1Attr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 384), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 328), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetJointEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 344), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C718690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateJointEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 344), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetCollisionEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 248), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C7187E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateCollisionEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 248), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetExcludeFromArticulationAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 296), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C718940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateExcludeFromArticulationAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 296), v9, 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetBreakForceAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 224), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C718A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateBreakForceAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 224), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetBreakTorqueAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 232), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C718BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateBreakTorqueAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 232), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetBody0Rel(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 208), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C718D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateBody0Rel(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 208), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C718E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetBody1Rel(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 216), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C718EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateBody1Rel(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 216), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C718F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t *SchemaAttributeNames;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v1 = (int)this;
  v56 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C660);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C660))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 45);
    v47 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v47 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v9)
      v9 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v10 = *((_QWORD *)v9 + 47);
    v48 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v48 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v13)
      v13 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v14 = *((_QWORD *)v13 + 46);
    v49 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v49 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v17)
      v17 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v18 = *((_QWORD *)v17 + 48);
    v50 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v50 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v21)
      v21 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v22 = *((_QWORD *)v21 + 43);
    v51 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v25)
      v25 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v26 = *((_QWORD *)v25 + 31);
    v52 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v52 &= 0xFFFFFFFFFFFFFFF8;
    }
    v29 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v29)
      v29 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v30 = *((_QWORD *)v29 + 37);
    v53 = v30;
    if ((v30 & 7) != 0)
    {
      v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v53 &= 0xFFFFFFFFFFFFFFF8;
    }
    v33 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v33)
      v33 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v34 = *((_QWORD *)v33 + 28);
    v54 = v34;
    if ((v34 & 7) != 0)
    {
      v35 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 2, v35));
      if ((v36 & 1) == 0)
        v54 &= 0xFFFFFFFFFFFFFFF8;
    }
    v37 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v37)
      v37 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v38 = *((_QWORD *)v37 + 29);
    v55 = v38;
    if ((v38 & 7) != 0)
    {
      v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 2, v39));
      if ((v40 & 1) == 0)
        v55 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498C648, &v47, 9uLL);
    v41 = &v56;
    do
    {
      v43 = *--v41;
      v42 = v43;
      if ((v43 & 7) != 0)
      {
        v44 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
        do
          v45 = __ldxr(v44);
        while (__stlxr(v45 - 2, v44));
      }
    }
    while (v41 != &v47);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C648, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C660);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C680);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C680))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomImageable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)1);
    sub_20C719478((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C668, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C680);
  }
  if (v1)
    return &qword_25498C668;
  else
    return &qword_25498C648;
}

void sub_20C7193E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C660);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C719478(uint64_t **a1)
{
  qword_25498C670 = 0;
  unk_25498C678 = 0;
  qword_25498C668 = 0;
  sub_20BFC9A6C((char **)&qword_25498C668, ((*(_QWORD *)algn_25498C650 - qword_25498C648) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C668, (_QWORD *)qword_25498C670, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C668, (_QWORD *)qword_25498C670, (uint64_t *)qword_25498C648, *(uint64_t **)algn_25498C650, (*(_QWORD *)algn_25498C650 - qword_25498C648) >> 3);
}

void sub_20C71950C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C71952C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C591C74((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C719600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C71964C(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C7196DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::~UsdPhysicsLimitAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::Get(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  const char *Text;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v6 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v6)
  {
    v24 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::IsPhysicsLimitAPIPath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, v7) & 1) != 0)
    {
      v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v23);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, (uint64_t)&v25);
      sub_20C37A850(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25, &v24);
      *(_QWORD *)a3 = off_24C5426E0;
      if ((v28 & 7) != 0)
      {
        v10 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stlxr(v11 - 2, v10));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
      sub_20BFD265C(&v27);
      if (v26)
        sub_20C35C614(v26);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_20BFD265C(&v23);
    }
    else
    {
      v25 = "usdPhysics/limitAPI.cpp";
      v26 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
      v27 = 63;
      v28 = (unint64_t)"static UsdPhysicsLimitAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::Get(const "
                              "UsdStagePtr &, const SdfPath &)";
      v29 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid limit path <%s>.", Text);
      LODWORD(v25) = 1;
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v27 + 1);
      v28 = 0;
      v23 = 0;
      sub_20C37A850(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25, &v23);
      *(_QWORD *)a3 = off_24C5426E0;
      if ((v23 & 7) != 0)
      {
        v17 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
      if ((v28 & 7) != 0)
      {
        v19 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
      sub_20BFD265C(&v27);
      if (v26)
        sub_20C35C614(v26);
    }
    if ((v24 & 7) != 0)
    {
      v21 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
  }
  else
  {
    v25 = "usdPhysics/limitAPI.cpp";
    v26 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v27 = 58;
    v28 = (unint64_t)"static UsdPhysicsLimitAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v25) = 1;
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v27);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v27 + 1);
    v28 = 0;
    v24 = 0;
    sub_20C37A850(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25, &v24);
    *(_QWORD *)a3 = off_24C5426E0;
    if ((v24 & 7) != 0)
    {
      v12 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    if ((v28 & 7) != 0)
    {
      v14 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    sub_20BFD265C(&v27);
    if (v26)
      sub_20C35C614(v26);
  }
}

void sub_20C719A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  va_list va;

  va_start(va, a4);
  if ((a3 & 7) != 0)
  {
    v5 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  if ((a4 & 7) != 0)
  {
    v7 = (unsigned int *)(a4 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::IsPhysicsLimitAPIPath(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t *Name;
  __int128 v6;
  uint64_t v7;
  const pxrInternal__aapl__pxrReserved__::TfToken *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v16;
  uint64_t *EmptyString;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  std::string v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  std::string __p;
  char v31;

  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this))
    return 0;
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
  if (*((char *)Name + 23) < 0)
  {
    sub_20BDDBFAC(&__p, (void *)*Name, Name[1]);
  }
  else
  {
    v6 = *(_OWORD *)Name;
    __p.__r_.__value_.__r.__words[2] = Name[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens((unsigned __int8 *)&__p, (uint64_t *)&v28);
  v9 = *(_QWORD *)(v29 - 8);
  v27 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
    {
      v27 = v9 & 0xFFFFFFFFFFFFFFF8;
      v9 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (!pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::IsSchemaPropertyBaseName((pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *)&v27, v8)&& (v12 = v28, (unint64_t)(v29 - (_QWORD)v28) >= 9)&& (*v12 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)sub_20C71A120() & 0xFFFFFFFFFFFFFFF8))
  {
    v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C71A120();
    if ((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
    if (*((char *)EmptyString + 23) < 0)
      v18 = EmptyString[1];
    else
      v18 = *((unsigned __int8 *)EmptyString + 23);
    std::string::basic_string(&v25, &__p, v18 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v26);
    v19 = *(_QWORD *)a2;
    v20 = *(_QWORD *)a2 & 7;
    if (&v26 == (uint64_t *)a2)
    {
      if (v20)
      {
        v23 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
    }
    else
    {
      if (v20)
      {
        v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      *(_QWORD *)a2 = v26;
      v26 = 0;
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    v7 = 1;
    v9 = v27;
  }
  else
  {
    v7 = 0;
  }
  if ((v9 & 7) != 0)
  {
    v13 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  sub_20BEEB2B8((void ***)&v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_20C719CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  unsigned int *v27;
  unsigned int v28;

  if (a14 < 0)
    operator delete(__p);
  if ((v25 & 7) != 0)
  {
    v27 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  __p = &a17;
  sub_20BEEB2B8((void ***)&__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::Get@<X0>(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *result;

  result = sub_20C37A850(a3, this, (uint64_t *)a2);
  *(_QWORD *)result = off_24C5426E0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::GetAll(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v7;
  uint64_t *v8;
  uint64_t *v9;
  void **v10;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::_GetStaticTfType(this);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetMultipleApplyInstanceNames(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&qword_25498C6B0, (uint64_t)&v8);
  v5 = v8;
  v6 = v9;
  if (v8 != v9)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a2[1];
    do
    {
      if ((unint64_t)v7 >= a2[2])
      {
        v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_20C71B4C8(a2, this, v5);
      }
      else
      {
        sub_20C37A850(v7, this, v5);
        *(_QWORD *)v7 = off_24C5426E0;
        v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v7 + 32);
        a2[1] = (uint64_t)v7;
      }
      a2[1] = (uint64_t)v7;
      ++v5;
    }
    while (v5 != v6);
  }
  v10 = (void **)&v8;
  sub_20BEEB2B8(&v10);
}

void sub_20C719E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C37B438((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C6B8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C6B8))
  {
    __cxa_guard_release(&qword_25498C6B8);
  }
  return &qword_25498C6B0;
}

void sub_20C719EDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C6B8);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::IsSchemaPropertyBaseName(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unsigned __int8 v2;
  _QWORD *v3;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *v5;
  int v6;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v7;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C6A0);
  if ((v2 & 1) == 0)
  {
    v5 = this;
    v6 = __cxa_guard_acquire(&qword_25498C6A0);
    this = v5;
    if (v6)
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if (!v7)
        v7 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if ((*((_QWORD *)v7 + 19) & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*((_QWORD *)v7 + 19) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)EmptyString, &v16);
      v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if (!v9)
        v9 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if ((*((_QWORD *)v9 + 18) & 0xFFFFFFFFFFFFFFF8) != 0)
        v10 = (uint64_t *)((*((_QWORD *)v9 + 18) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v10, &v17);
      sub_20C374970(&qword_25498C688, &v16, 2uLL);
      v11 = &v18;
      do
      {
        v13 = *--v11;
        v12 = v13;
        if ((v13 & 7) != 0)
        {
          v14 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
          do
            v15 = __ldxr(v14);
          while (__stlxr(v15 - 2, v14));
        }
      }
      while (v11 != &v16);
      __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C688, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498C6A0);
      this = v5;
    }
  }
  v3 = (_QWORD *)qword_25498C688;
  if (qword_25498C688 != *(_QWORD *)algn_25498C690)
  {
    while ((*v3 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v3 == *(_QWORD **)algn_25498C690)
      {
        v3 = *(_QWORD **)algn_25498C690;
        return v3 != *(_QWORD **)algn_25498C690;
      }
    }
  }
  return v3 != *(_QWORD **)algn_25498C690;
}

void sub_20C71A0AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = v1 + 16;
  while (1)
  {
    v5 = *(_QWORD *)(v3 - 8);
    v3 -= 8;
    v4 = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    if (v3 == v1)
    {
      __cxa_guard_abort(&qword_25498C6A0);
      _Unwind_Resume(a1);
    }
  }
}

unint64_t sub_20C71A120()
{
  char *v0;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;
  unsigned int v12;
  void **v13;
  char v14;

  v0 = (char *)atomic_load(&qword_25498C6A8);
  if (!v0)
  {
    v0 = (char *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "limit", 0);
    v2 = *(_QWORD *)v0;
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 2, v3));
      if ((v4 & 1) == 0)
        v2 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((_QWORD *)v0 + 1) = 0;
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    v13 = (void **)(v0 + 8);
    v14 = 0;
    v5 = operator new(8uLL);
    *((_QWORD *)v0 + 1) = v5;
    *((_QWORD *)v0 + 2) = v5;
    *v5 = v2;
    v6 = v5 + 1;
    *((_QWORD *)v0 + 3) = v5 + 1;
    if ((v2 & 7) != 0)
    {
      v7 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        *v5 &= 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v0 + 2) = v6;
      do
        v9 = __ldxr(v7);
      while (__stlxr(v9 - 2, v7));
    }
    else
    {
      *((_QWORD *)v0 + 2) = v6;
    }
    while (!__ldaxr(&qword_25498C6A8))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498C6A8))
        return (unint64_t)v0;
    }
    __clrex();
    v13 = (void **)(v0 + 8);
    sub_20BEEB2B8(&v13);
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v11 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    operator delete(v0);
    return atomic_load(&qword_25498C6A8);
  }
  return (unint64_t)v0;
}

void sub_20C71A268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  sub_20BEEB2B8(&a9);
  if ((v10 & 7) != 0)
  {
    v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((*v9 & 7) != 0)
  {
    v14 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this)
{
  return 6;
}

uint64_t sub_20C71A2D4(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v6;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v8;
  char *v9;
  pxrInternal__aapl__pxrReserved__::TfType *v11;
  uint64_t TypeName;
  const char *v13;
  _QWORD v14[4];
  char v15;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C6B0, v6);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(a1, SchemaInfo, a2, a3);
  v14[0] = "usd/prim.h";
  v14[1] = "CanApplyAPI";
  v14[2] = 1059;
  v14[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(const TfToken &, std::string *) const [SchemaType"
           " = pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI]";
  v15 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v11);
  if (*(char *)(TypeName + 23) >= 0)
    v13 = (const char *)TypeName;
  else
    v13 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v13);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  int v15;
  uint64_t v16;

  if (sub_20C71A4E8(this, a2))
  {
    sub_20C37A850(a3, this, (uint64_t *)a2);
    *(_QWORD *)a3 = off_24C5426E0;
  }
  else
  {
    v12 = 1;
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v15);
    v16 = 0;
    v11 = 0;
    sub_20C37A850(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12, &v11);
    *(_QWORD *)a3 = off_24C5426E0;
    if ((v11 & 7) != 0)
    {
      v7 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_20BFD265C(&v14);
    if (v13)
      sub_20C35C614(v13);
  }
}

void sub_20C71A4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a3);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C71A4E8(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C6B0, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI((pxrInternal__aapl__pxrReserved__ **)a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "ApplyAPI";
  v12[2] = 1188;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(const TfToken &) const [SchemaType = pxrInternal__aa"
           "pl__pxrReserved__::UsdPhysicsLimitAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C6C8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *)__cxa_guard_acquire(&qword_25498C6C8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::_GetStaticTfType(v3);
      byte_25498C6C0 = sub_20C35BD7C((char *)&qword_25498C6B0, v4, v5);
      __cxa_guard_release(&qword_25498C6C8);
    }
  }
  return byte_25498C6C0;
}

void sub_20C71A608(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C6C8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::_GetStaticTfType(this);
  return &qword_25498C6B0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::GetLowAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString)
    EmptyString = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v8 = *((_QWORD *)EmptyString + 19);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C71A7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::CreateLowAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v8 = *((_QWORD *)this + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString)
    EmptyString = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v12 = *((_QWORD *)EmptyString + 19);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v16 = (uint64_t)(v15 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v16 = (uint64_t)EmptyString;
  }
  v17 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    v18 = (uint64_t *)(v17 + 4);
  else
    v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v16, (uint64_t)v18, (uint64_t)&v24);
  v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19)
    v19 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v19 + 56), 0, 0, a2, a3, a4);
  if ((v24 & 7) != 0)
  {
    v20 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  if ((v12 & 7) != 0)
  {
    do
      v22 = __ldxr(v15);
    while (__stlxr(v22 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v23 = __ldxr(v17);
    while (__stlxr(v23 - 2, v17));
  }
}

void sub_20C71A9DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::GetHighAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString)
    EmptyString = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v8 = *((_QWORD *)EmptyString + 18);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C71ABD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::CreateHighAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v8 = *((_QWORD *)this + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString)
    EmptyString = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v12 = *((_QWORD *)EmptyString + 18);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v16 = (uint64_t)(v15 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v16 = (uint64_t)EmptyString;
  }
  v17 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    v18 = (uint64_t *)(v17 + 4);
  else
    v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v16, (uint64_t)v18, (uint64_t)&v24);
  v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19)
    v19 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v19 + 56), 0, 0, a2, a3, a4);
  if ((v24 & 7) != 0)
  {
    v20 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  if ((v12 & 7) != 0)
  {
    do
      v22 = __ldxr(v15);
    while (__stlxr(v22 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v23 = __ldxr(v17);
    while (__stlxr(v23 - 2, v17));
  }
}

void sub_20C71ADDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C6E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C6E8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 19);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v9)
      v9 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 18);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498C6D0, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C6D0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C6E8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C708);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C708))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C71B0A0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C6F0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C708);
  }
  if (v1)
    return &qword_25498C6F0;
  else
    return &qword_25498C6D0;
}

void sub_20C71B01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498C6E8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C71B0A0(uint64_t **a1)
{
  qword_25498C6F8 = 0;
  unk_25498C700 = 0;
  qword_25498C6F0 = 0;
  sub_20BFC9A6C((char **)&qword_25498C6F0, ((unk_25498C6D8 - qword_25498C6D0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C6F0, (_QWORD *)qword_25498C6F8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C6F0, (_QWORD *)qword_25498C6F8, (uint64_t *)qword_25498C6D0, unk_25498C6D8, (unk_25498C6D8 - qword_25498C6D0) >> 3);
}

void sub_20C71B134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **SchemaAttributeNames;
  uint64_t **v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int64x2_t v28;
  char *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  int64x2_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::GetSchemaAttributeNames(this);
  v7 = SchemaAttributeNames;
  v8 = *a2;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  if (v8)
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFC9A6C((char **)a3, SchemaAttributeNames[1] - *SchemaAttributeNames);
    v10 = *v7;
    v11 = v7[1];
    if (*v7 != v11)
    {
      do
      {
        if ((*v10 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v12 = (*v10 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          v12 = (uint64_t)EmptyString;
        }
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
          v13 = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v13, (uint64_t)&v36);
        v15 = *(_QWORD **)(a3 + 8);
        v14 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v15 >= v14)
        {
          v18 = ((uint64_t)v15 - *(_QWORD *)a3) >> 3;
          if ((unint64_t)(v18 + 1) >> 61)
            sub_20BDDF694();
          v19 = v14 - *(_QWORD *)a3;
          v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1))
            v20 = v18 + 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          v35 = a3 + 16;
          if (v21)
            v22 = (char *)sub_20BDDF6A8(a3 + 16, v21);
          else
            v22 = 0;
          v23 = &v22[8 * v18];
          v24 = &v22[8 * v21];
          v34 = v24;
          *(_QWORD *)v23 = v36;
          v17 = v23 + 8;
          v36 = 0;
          v33.i64[1] = (uint64_t)(v23 + 8);
          v26 = *(char **)a3;
          v25 = *(char **)(a3 + 8);
          if (v25 == *(char **)a3)
          {
            v28 = vdupq_n_s64((unint64_t)v25);
          }
          else
          {
            do
            {
              v27 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *((_QWORD *)v23 - 1) = v27;
              v23 -= 8;
              *(_QWORD *)v25 = 0;
            }
            while (v25 != v26);
            v28 = *(int64x2_t *)a3;
            v17 = (_QWORD *)v33.i64[1];
            v24 = v34;
          }
          *(_QWORD *)a3 = v23;
          *(_QWORD *)(a3 + 8) = v17;
          v33 = v28;
          v29 = *(char **)(a3 + 16);
          *(_QWORD *)(a3 + 16) = v24;
          v34 = v29;
          v32 = v28.i64[0];
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF1EE98((uint64_t)&v32);
          v16 = v36;
        }
        else
        {
          v16 = 0;
          *v15 = v36;
          v17 = v15 + 1;
          v36 = 0;
        }
        *(_QWORD *)(a3 + 8) = v17;
        if ((v16 & 7) != 0)
        {
          v30 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
          do
            v31 = __ldxr(v30);
          while (__stlxr(v31 - 2, v30));
        }
        ++v10;
      }
      while (v10 != v11);
    }
  }
  else
  {
    sub_20BFE538C((_QWORD *)a3, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
  }
}

void sub_20C71B35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C71B3A4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C71B478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C71B4C8(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v16;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20BED2F10(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v12[32 * v5];
  v17 = v16;
  v18 = &v12[32 * v11];
  *(_QWORD *)sub_20C37A850(v16, a2, a3) = off_24C5426E0;
  v17 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v17 + 32);
  sub_20C71B5C0(a1, &v15);
  v13 = a1[1];
  sub_20C37B750((uint64_t)&v15);
  return v13;
}

void sub_20C71B5AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C37B750((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C71B5C0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C71B634((int)a1 + 16, a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C71B634(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v13;

  v11 = 0;
  v12 = a7 - 32;
  while (a3 + v11 != a5)
  {
    v13 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v12 + v11);
    v11 -= 32;
    sub_20C71B6DC(a1, v13, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v11 + a3));
  }
  return a6;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_20C71B6DC(int a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, a3);
  *(_QWORD *)result = &unk_24C537498;
  v5 = *((_QWORD *)a3 + 3);
  *((_QWORD *)result + 3) = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *((_QWORD *)result + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)result = off_24C5426E0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::~UsdPhysicsMassAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C542738;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdPhysics/massAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdPhysicsMassAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C542738;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C71B8E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this)
{
  return 5;
}

uint64_t sub_20C71B910(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C710, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdPhysicsMassAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C71BAC8(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C542738;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C542738;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C71BAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C71BAC8(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C710, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdPhysicsMassAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C718);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C718))
  {
    __cxa_guard_release(&qword_25498C718);
  }
  return &qword_25498C710;
}

void sub_20C71BBE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C718);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C728);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *)__cxa_guard_acquire(&qword_25498C728);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_GetStaticTfType(v3);
      byte_25498C720 = sub_20C35BD7C((char *)&qword_25498C710, v4, v5);
      __cxa_guard_release(&qword_25498C728);
    }
  }
  return byte_25498C720;
}

void sub_20C71BC60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C728);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_GetStaticTfType(this);
  return &qword_25498C710;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetMassAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 400), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71BD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::CreateMassAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 400), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetDensityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 272), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71BE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::CreateDensityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 272), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetCenterOfMassAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 240), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71BFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::CreateCenterOfMassAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 240), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 208), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetDiagonalInertiaAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 280), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71C140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::CreateDiagonalInertiaAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 280), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 160), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetPrincipalAxesAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 432), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71C298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::CreatePrincipalAxesAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 432), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 328), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t *SchemaAttributeNames;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = (int)this;
  v36 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C748);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C748))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 50);
    v31 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v31 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v9)
      v9 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v10 = *((_QWORD *)v9 + 34);
    v32 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v32 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v13)
      v13 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v14 = *((_QWORD *)v13 + 30);
    v33 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v17)
      v17 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v18 = *((_QWORD *)v17 + 35);
    v34 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v34 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v21)
      v21 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v22 = *((_QWORD *)v21 + 54);
    v35 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498C730, &v31, 5uLL);
    v25 = &v36;
    do
    {
      v27 = *--v25;
      v26 = v27;
      if ((v27 & 7) != 0)
      {
        v28 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
    }
    while (v25 != &v31);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C730, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C748);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C768);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C768))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C71C6D8((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C750, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C768);
  }
  if (v1)
    return &qword_25498C750;
  else
    return &qword_25498C730;
}

void sub_20C71C648(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C748);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C71C6D8(uint64_t **a1)
{
  qword_25498C758 = 0;
  unk_25498C760 = 0;
  qword_25498C750 = 0;
  sub_20BFC9A6C((char **)&qword_25498C750, ((unk_25498C738 - qword_25498C730) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C750, (_QWORD *)qword_25498C758, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C750, (_QWORD *)qword_25498C758, (uint64_t *)qword_25498C730, unk_25498C738, (unk_25498C738 - qword_25498C730) >> 3);
}

void sub_20C71C76C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C71C78C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C71C860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::~UsdPhysicsMaterialAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C542790;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdPhysics/materialAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdPhysicsMaterialAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::Get(co"
                            "nst UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C542790;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C71CA44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this)
{
  return 5;
}

uint64_t sub_20C71CA6C(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C770, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdPhysicsMaterialAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C71CC24(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C542790;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C542790;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C71CC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C71CC24(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C770, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdPhysicsMaterialAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C778);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C778))
  {
    __cxa_guard_release(&qword_25498C778);
  }
  return &qword_25498C770;
}

void sub_20C71CD40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C778);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C788);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *)__cxa_guard_acquire(&qword_25498C788);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::_GetStaticTfType(v3);
      byte_25498C780 = sub_20C35BD7C((char *)&qword_25498C770, v4, v5);
      __cxa_guard_release(&qword_25498C788);
    }
  }
  return byte_25498C780;
}

void sub_20C71CDBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C788);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::_GetStaticTfType(this);
  return &qword_25498C770;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::GetDynamicFrictionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 288), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71CE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::CreateDynamicFrictionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 288), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::GetStaticFrictionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 472), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71CFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::CreateStaticFrictionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 472), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::GetRestitutionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 440), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71D144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::CreateRestitutionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 440), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::GetDensityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 272), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71D29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::CreateDensityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 272), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t *SchemaAttributeNames;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = (int)this;
  v31 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C7A8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C7A8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 36);
    v27 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v9)
      v9 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v10 = *((_QWORD *)v9 + 59);
    v28 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v13)
      v13 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v14 = *((_QWORD *)v13 + 55);
    v29 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v29 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v17)
      v17 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v18 = *((_QWORD *)v17 + 34);
    v30 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498C790, &v27, 4uLL);
    v21 = &v31;
    do
    {
      v23 = *--v21;
      v22 = v23;
      if ((v23 & 7) != 0)
      {
        v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
    }
    while (v21 != &v27);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C790, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C7A8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C7C8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C7C8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C71D688((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C7B0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C7C8);
  }
  if (v1)
    return &qword_25498C7B0;
  else
    return &qword_25498C790;
}

void sub_20C71D5F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C7A8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C71D688(uint64_t **a1)
{
  qword_25498C7B8 = 0;
  unk_25498C7C0 = 0;
  qword_25498C7B0 = 0;
  sub_20BFC9A6C((char **)&qword_25498C7B0, ((unk_25498C798 - qword_25498C790) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C7B0, (_QWORD *)qword_25498C7B8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C7B0, (_QWORD *)qword_25498C7B8, (uint64_t *)qword_25498C790, unk_25498C798, (unk_25498C798 - qword_25498C790) >> 3);
}

void sub_20C71D71C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C71D73C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C71D810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::~UsdPhysicsMeshCollisionAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C5427E8;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdPhysics/meshCollisionAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdPhysicsMeshCollisionAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionA"
                            "PI::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C5427E8;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C71D9F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this)
{
  return 5;
}

uint64_t sub_20C71DA1C(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C7D0, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdPhysicsMeshCollisionAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C71DBD4(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C5427E8;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C5427E8;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C71DBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C71DBD4(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C7D0, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdPhysicsMeshCollisionAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C7D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C7D8))
  {
    __cxa_guard_release(&qword_25498C7D8);
  }
  return &qword_25498C7D0;
}

void sub_20C71DCF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C7D8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C7E8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *)__cxa_guard_acquire(&qword_25498C7E8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::_GetStaticTfType(v3);
      byte_25498C7E0 = sub_20C35BD7C((char *)&qword_25498C7D0, v4, v5);
      __cxa_guard_release(&qword_25498C7E8);
    }
  }
  return byte_25498C7E0;
}

void sub_20C71DD6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C7E8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::_GetStaticTfType(this);
  return &qword_25498C7D0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::GetApproximationAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 192), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71DE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::CreateApproximationAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 192), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *SchemaAttributeNames;
  uint64_t v12[2];

  v1 = (int)this;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C808);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C808))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 24);
    v12[0] = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v12[0] = (uint64_t)v7;
    }
    sub_20C374970(&qword_25498C7F0, v12, 1uLL);
    if ((v12[0] & 7) != 0)
    {
      v9 = (unsigned int *)(v12[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C7F0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C808);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C828);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C828))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C71E0D4((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C810, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C828);
  }
  if (v1)
    return &qword_25498C810;
  else
    return &qword_25498C7F0;
}

void sub_20C71E084(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C808);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C71E0D4(uint64_t **a1)
{
  qword_25498C818 = 0;
  unk_25498C820 = 0;
  qword_25498C810 = 0;
  sub_20BFC9A6C((char **)&qword_25498C810, ((unk_25498C7F8 - qword_25498C7F0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C810, (_QWORD *)qword_25498C818, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C810, (_QWORD *)qword_25498C818, (uint64_t *)qword_25498C7F0, unk_25498C7F8, (unk_25498C7F8 - qword_25498C7F0) >> 3);
}

void sub_20C71E168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C71E188()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C71E25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::UsdPhysicsGetStageKilogramsPerUnit(uint64_t *a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v5;
  _QWORD v7[4];
  char v8;
  double v9;

  v9 = 1.0;
  v2 = sub_20C369024(a1);
  if (v3 & 1 | (unint64_t)v2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a1);
    v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    sub_20C44ECEC(v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v5 + 128), &v9);
    return v9;
  }
  else
  {
    v7[0] = "usdPhysics/metrics.cpp";
    v7[1] = "UsdPhysicsGetStageKilogramsPerUnit";
    v7[2] = 47;
    v7[3] = "double pxrInternal__aapl__pxrReserved__::UsdPhysicsGetStageKilogramsPerUnit(const UsdStageWeakPtr &)";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid UsdStage");
    return 1.0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsStageHasAuthoredKilogramsPerUnit(uint64_t *a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v5;
  _QWORD v7[4];
  char v8;

  v2 = sub_20C369024(a1);
  if (v3 & 1 | (unint64_t)v2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a1);
    v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    return pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredMetadata(v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v5 + 128));
  }
  else
  {
    v7[0] = "usdPhysics/metrics.cpp";
    v7[1] = "UsdPhysicsStageHasAuthoredKilogramsPerUnit";
    v7[2] = 59;
    v7[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPhysicsStageHasAuthoredKilogramsPerUnit(const UsdStageWeakPtr &)";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid UsdStage");
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsSetStageKilogramsPerUnit(uint64_t *a1, double a2)
{
  uint64_t (*v3)(uint64_t *);
  char v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v6;
  _QWORD v8[4];
  char v9;
  double v10;

  v10 = a2;
  v3 = sub_20C369024(a1);
  if (v4 & 1 | (unint64_t)v3)
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a1);
    v6 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v6)
      v6 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    return sub_20C44E24C(v5, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v6 + 128), &v10);
  }
  else
  {
    v8[0] = "usdPhysics/metrics.cpp";
    v8[1] = "UsdPhysicsSetStageKilogramsPerUnit";
    v8[2] = 71;
    v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPhysicsSetStageKilogramsPerUnit(const UsdStageWeakPtr &, double)";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid UsdStage");
    return 0;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPhysicsMassUnitsAre(pxrInternal__aapl__pxrReserved__ *this, double a2, double a3, double a4)
{
  _BOOL8 result;
  double v5;

  result = 0;
  if (a2 > 0.0 && a3 > 0.0)
  {
    v5 = vabdd_f64(a2, a3);
    return v5 / a2 < a4 && v5 / a3 < a4;
  }
  return result;
}

void sub_20C71E518()
{
  void *__p[2];
  char v1;

  sub_20C71F1EC();
  sub_20BDDC0E4(__p, "PhysicsPrismaticJoint");
  sub_20C71F30C((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C71E564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::~UsdPhysicsPrismaticJoint(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::~UsdPhysicsJoint(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542840;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdPhysics/prismaticJoint.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdPhysicsPrismaticJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::"
                            "Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542840;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C71E708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498C838);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498C838))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498C830, "PhysicsPrismaticJoint");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498C830, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C838);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498C830, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C542840;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdPhysics/prismaticJoint.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdPhysicsPrismaticJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::"
                            "Define(const UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C542840;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C71E8F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C838);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C848);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C848))
  {
    __cxa_guard_release(&qword_25498C848);
  }
  return &qword_25498C840;
}

void sub_20C71E99C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C848);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C858);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *)__cxa_guard_acquire(&qword_25498C858);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::_GetStaticTfType(v3);
      byte_25498C850 = sub_20C35BD7C((char *)&qword_25498C840, v4, v5);
      __cxa_guard_release(&qword_25498C858);
    }
  }
  return byte_25498C850;
}

void sub_20C71EA18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C858);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::_GetStaticTfType(this);
  return &qword_25498C840;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::GetAxisAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 200), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71EAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::CreateAxisAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 200), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::GetLowerLimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 392), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71EC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::CreateLowerLimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 392), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::GetUpperLimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 480), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71EDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::CreateUpperLimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 480), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *SchemaAttributeNames;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int)this;
  v26 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C878);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C878))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 25);
    v23 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v9)
      v9 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v10 = *((_QWORD *)v9 + 49);
    v24 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v13)
      v13 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v14 = *((_QWORD *)v13 + 60);
    v25 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498C860, &v23, 3uLL);
    v17 = &v26;
    do
    {
      v19 = *--v17;
      v18 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    while (v17 != &v23);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C860, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C878);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C898);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C898))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *)1);
    sub_20C71F138((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C880, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C898);
  }
  if (v1)
    return &qword_25498C880;
  else
    return &qword_25498C860;
}

void sub_20C71F0A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C878);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C71F138(uint64_t **a1)
{
  qword_25498C888 = 0;
  unk_25498C890 = 0;
  qword_25498C880 = 0;
  sub_20BFC9A6C((char **)&qword_25498C880, ((unk_25498C868 - qword_25498C860) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C880, (_QWORD *)qword_25498C888, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C880, (_QWORD *)qword_25498C888, (uint64_t *)qword_25498C860, unk_25498C868, (unk_25498C868 - qword_25498C860) >> 3);
}

void sub_20C71F1CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C71F1EC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C7136D8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C71F2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C71F30C(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C71F39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C71F3C0()
{
  void *__p[2];
  char v1;

  sub_20C720094();
  sub_20BDDC0E4(__p, "PhysicsRevoluteJoint");
  sub_20C7201B4((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C71F40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::~UsdPhysicsRevoluteJoint(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::~UsdPhysicsJoint(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542898;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdPhysics/revoluteJoint.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdPhysicsRevoluteJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::Ge"
                            "t(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542898;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C71F5B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498C8A8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498C8A8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498C8A0, "PhysicsRevoluteJoint");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498C8A0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C8A8);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498C8A0, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C542898;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdPhysics/revoluteJoint.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdPhysicsRevoluteJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::De"
                            "fine(const UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C542898;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C71F7A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C8A8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C8B8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C8B8))
  {
    __cxa_guard_release(&qword_25498C8B8);
  }
  return &qword_25498C8B0;
}

void sub_20C71F844(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C8B8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C8C8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *)__cxa_guard_acquire(&qword_25498C8C8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::_GetStaticTfType(v3);
      byte_25498C8C0 = sub_20C35BD7C((char *)&qword_25498C8B0, v4, v5);
      __cxa_guard_release(&qword_25498C8C8);
    }
  }
  return byte_25498C8C0;
}

void sub_20C71F8C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C8C8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::_GetStaticTfType(this);
  return &qword_25498C8B0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::GetAxisAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 200), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71F998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::CreateAxisAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 200), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::GetLowerLimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 392), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71FAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::CreateLowerLimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 392), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::GetUpperLimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 480), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C71FC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::CreateUpperLimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 480), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *SchemaAttributeNames;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int)this;
  v26 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C8E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C8E8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 25);
    v23 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v9)
      v9 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v10 = *((_QWORD *)v9 + 49);
    v24 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v13)
      v13 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v14 = *((_QWORD *)v13 + 60);
    v25 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498C8D0, &v23, 3uLL);
    v17 = &v26;
    do
    {
      v19 = *--v17;
      v18 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    while (v17 != &v23);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C8D0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C8E8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C908);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C908))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *)1);
    sub_20C71FFE0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C8F0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C908);
  }
  if (v1)
    return &qword_25498C8F0;
  else
    return &qword_25498C8D0;
}

void sub_20C71FF50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C8E8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C71FFE0(uint64_t **a1)
{
  qword_25498C8F8 = 0;
  unk_25498C900 = 0;
  qword_25498C8F0 = 0;
  sub_20BFC9A6C((char **)&qword_25498C8F0, ((unk_25498C8D8 - qword_25498C8D0) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C8F0, (_QWORD *)qword_25498C8F8, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C8F0, (_QWORD *)qword_25498C8F8, (uint64_t *)qword_25498C8D0, unk_25498C8D8, (unk_25498C8D8 - qword_25498C8D0) >> 3);
}

void sub_20C720074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C720094()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C7136D8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C720168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C7201B4(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C720244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::~UsdPhysicsRigidBodyAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C5428F0;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdPhysics/rigidBodyAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdPhysicsRigidBodyAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::Get("
                            "const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C5428F0;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C7203FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this)
{
  return 5;
}

uint64_t sub_20C720424(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C910, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "CanApplyAPI";
  v12[2] = 1024;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal__a"
           "apl__pxrReserved__::UsdPhysicsRigidBodyAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (sub_20C7205DC(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C5428F0;
  }
  else
  {
    v7 = 1;
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = off_24C5428F0;
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if (v8)
      sub_20C35C614(v8);
  }
}

void sub_20C7205C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7205DC(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *a1)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  const std::type_info *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t TypeName;
  const char *v9;
  _QWORD v10[4];
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_25498C910, v2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  v10[0] = "usd/prim.h";
  v10[1] = "ApplyAPI";
  v10[2] = 1147;
  v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserved"
           "__::UsdPhysicsRigidBodyAPI]";
  v11 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
  if (*(char *)(TypeName + 23) >= 0)
    v9 = (const char *)TypeName;
  else
    v9 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C918);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C918))
  {
    __cxa_guard_release(&qword_25498C918);
  }
  return &qword_25498C910;
}

void sub_20C7206F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C918);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C928);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *)__cxa_guard_acquire(&qword_25498C928);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::_GetStaticTfType(v3);
      byte_25498C920 = sub_20C35BD7C((char *)&qword_25498C910, v4, v5);
      __cxa_guard_release(&qword_25498C928);
    }
  }
  return byte_25498C920;
}

void sub_20C720774(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C928);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::_GetStaticTfType(this);
  return &qword_25498C910;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::GetRigidBodyEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 448), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C72084C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::CreateRigidBodyEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 448), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::GetKinematicEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 352), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C7209A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::CreateKinematicEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 352), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::GetStartsAsleepAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 464), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C720AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::CreateStartsAsleepAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 464), v9, 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::GetVelocityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 488), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C720C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::CreateVelocityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 488), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 232), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::GetAngularVelocityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 184), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C720DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::CreateAngularVelocityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 184), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 232), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::GetSimulationOwnerRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 456), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C720F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::CreateSimulationOwnerRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 456), 0, a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C720FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t *SchemaAttributeNames;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = (int)this;
  v36 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C948);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C948))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 56);
    v31 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v31 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v9)
      v9 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v10 = *((_QWORD *)v9 + 44);
    v32 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v32 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v13)
      v13 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v14 = *((_QWORD *)v13 + 58);
    v33 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v17)
      v17 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v18 = *((_QWORD *)v17 + 61);
    v34 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v34 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v21)
      v21 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v22 = *((_QWORD *)v21 + 23);
    v35 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498C930, &v31, 5uLL);
    v25 = &v36;
    do
    {
      v27 = *--v25;
      v26 = v27;
      if ((v27 & 7) != 0)
      {
        v28 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
    }
    while (v25 != &v31);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C930, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C948);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C968);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C968))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C721368((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C950, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C968);
  }
  if (v1)
    return &qword_25498C950;
  else
    return &qword_25498C930;
}

void sub_20C7212D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C948);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C721368(uint64_t **a1)
{
  qword_25498C958 = 0;
  unk_25498C960 = 0;
  qword_25498C950 = 0;
  sub_20BFC9A6C((char **)&qword_25498C950, ((unk_25498C938 - qword_25498C930) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C950, (_QWORD *)qword_25498C958, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C950, (_QWORD *)qword_25498C958, (uint64_t *)qword_25498C930, unk_25498C938, (unk_25498C938 - qword_25498C930) >> 3);
}

void sub_20C7213FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::UsdPhysicsIndexedRotation(pxrInternal__aapl__pxrReserved__ *this, float a2, float a3)
{
  uint64_t v4;

  LODWORD(v4) = 0;
  *((float *)&v4 + this) = a2;
  return *(float *)&v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsGetNextIndex3(pxrInternal__aapl__pxrReserved__ *this)
{
  return ((_DWORD)this + (this >> 1) + 1) & 3;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDiagonalize(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3f *a2, pxrInternal__aapl__pxrReserved__::GfQuatf *a3)
{
  int v5;
  float v6;
  float v7;
  float v8;
  unsigned int v9;
  uint64_t v11;
  char *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  __int128 *v23;
  float v24[9];
  __int128 v25;
  __int128 v26;
  int v27;
  _OWORD v28[2];
  int v29;
  _OWORD v30[2];
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v32 = xmmword_20CA9B220;
  v5 = 24;
  do
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v28, (const pxrInternal__aapl__pxrReserved__::GfQuatf *)&v32);
    v25 = v28[0];
    v26 = v28[1];
    v27 = v29;
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float *)&v25, (float *)this);
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v28, (uint64_t)v24);
    v33 = v25;
    v34 = v26;
    v35 = v27;
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float *)&v33, v24);
    v30[0] = v33;
    v30[1] = v34;
    v31 = v35;
    v6 = fabsf(*((float *)&v34 + 1));
    v7 = fabsf(*((float *)&v33 + 2));
    v8 = fabsf(*((float *)&v33 + 1));
    if (v7 > v8)
      v9 = 1;
    else
      v9 = 2;
    if (v6 > v8 && v6 > v7)
      v9 = 0;
    v12 = (char *)v30 + 12 * ((v9 + (v9 >> 1) + 1) & 3);
    v13 = *(float *)&v12[4
                       * (((_BYTE)v9
                         + (v9 >> 1)
                         + 1
                         + (((v9 + (v9 >> 1) + 1) & 3) >> 1)
                         + 1) & 3)];
    if (v13 == 0.0)
      break;
    v14 = *(float *)&v12[4 * (((_BYTE)v9 + (v9 >> 1) + 1) & 3)];
    v11 = ((_BYTE)v9 + (v9 >> 1) + 1 + (((v9 + (v9 >> 1) + 1) & 3) >> 1) + 1) & 3;
    v15 = *((float *)v30 + (3 * v11) + v11);
    if (fabs(v13 + v13) * 2000000.0 < vabds_f32(v14, v15))
      break;
    v16 = (float)(v14 - v15) / (float)(v13 + v13);
    v17 = fabsf(v16);
    if (v17 <= 1000.0)
    {
      v20 = sqrtf((float)(v16 * v16) + 1.0);
      v21 = 1.0 / sqrtf((float)((float)(1.0 / (float)(v17 + v20)) * (float)(1.0 / (float)(v17 + v20))) + 1.0);
      v22 = sqrtf((float)(1.0 - v21) * 0.5);
      if (v16 < 0.0)
        v22 = -v22;
      v19 = sqrtf((float)(v21 + 1.0) * 0.5);
      DWORD2(v33) = 0;
      *(_QWORD *)&v33 = 0;
      *((float *)&v33 + v9) = v22;
    }
    else
    {
      v18 = v16 * 4.0;
      v19 = 1.0;
      DWORD2(v33) = 0;
      *(_QWORD *)&v33 = 0;
      *((float *)&v33 + v9) = 1.0 / v18;
    }
    *(_QWORD *)&v25 = v33;
    *((_QWORD *)&v25 + 1) = __PAIR64__(LODWORD(v19), DWORD2(v33));
    v33 = v32;
    pxrInternal__aapl__pxrReserved__::GfQuatf::operator*=((float *)&v33, (float *)&v25);
    v33 = *v23;
    pxrInternal__aapl__pxrReserved__::GfQuatf::Normalize((float32x2_t *)&v33, 1.0e-10);
    v32 = v33;
    --v5;
  }
  while (v5);
  *(_OWORD *)a2 = v32;
}

void pxrInternal__aapl__pxrReserved__::_ParseMassApi(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v11;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v13;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  __int128 v24;
  uint64_t v25;
  float v26;
  float v27;
  _BYTE v28[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  int v30;
  int v31;
  uint64_t v32;
  _BYTE v33[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v34;
  int v35;
  int v36;
  uint64_t v37;
  _BYTE v38[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v39;
  int v40;
  int v41;
  uint64_t v42;
  _BYTE v43[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v44;
  int v45;
  int v46;
  uint64_t v47;
  _QWORD v48[4];

  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)a3 = _D0;
  *(_BYTE *)(a3 + 8) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a3 + 12) = _D0;
  v11 = a3 + 12;
  *(_DWORD *)(a3 + 20) = 1065353216;
  *(_BYTE *)(a3 + 24) = 0;
  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_GetStaticTfType(this);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v13);
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)this, SchemaInfo))
  {
    v15 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v48, this);
    v48[3] = 0;
    v48[0] = off_24C542738;
    pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetDensityAttr(v15, (uint64_t)v43);
    pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetMassAttr((pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *)v48, (uint64_t)v38);
    pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetDiagonalInertiaAttr((pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *)v48, (uint64_t)v33);
    pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetPrincipalAxesAttr((pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *)v48, (uint64_t)v28);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>((uint64_t)v43, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(a3 + 4));
    v27 = 0.0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>((uint64_t)v38, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v27);
    if (v27 > 0.0)
      *(float *)a3 = v27;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>((uint64_t)v33, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v25);
    if ((float)((float)((float)(*(float *)&v25 * *(float *)&v25) + (float)(*((float *)&v25 + 1) * *((float *)&v25 + 1)))
               + (float)(v26 * v26)) > 9.99999949e-11)
    {
      *(_BYTE *)(a3 + 8) = 1;
      *(_QWORD *)v11 = v25;
      *(float *)(v11 + 8) = v26;
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfQuatf>((uint64_t)v28, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v24);
    if ((float)((float)((float)(*(float *)&v24 * *(float *)&v24) + (float)(*((float *)&v24 + 1) * *((float *)&v24 + 1)))
               + (float)(*((float *)&v24 + 2) * *((float *)&v24 + 2))) > 9.99999949e-11
      || fabsf(*((float *)&v24 + 3)) > 0.00001)
    {
      *(_BYTE *)(a3 + 24) = 1;
      *(_OWORD *)(a3 + 28) = v24;
    }
    if ((v32 & 7) != 0)
    {
      v16 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
    sub_20BFD265C(&v30);
    if (v29)
      sub_20C35C614(v29);
    if ((v37 & 7) != 0)
    {
      v18 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
    sub_20BFD265C(&v35);
    if (v34)
      sub_20C35C614(v34);
    if ((v42 & 7) != 0)
    {
      v20 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
    sub_20BFD265C(&v40);
    if (v39)
      sub_20C35C614(v39);
    if ((v47 & 7) != 0)
    {
      v22 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
    sub_20BFD265C(&v45);
    if (v44)
      sub_20C35C614(v44);
    pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::~UsdPhysicsMassAPI((pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *)v48);
  }
}

void sub_20C7219F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  sub_20C372B54((uint64_t)va);
  sub_20C372B54((uint64_t)va1);
  sub_20C372B54((uint64_t)va2);
  sub_20C372B54(v5 - 112);
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::~UsdPhysicsMassAPI((pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *)(v5 - 80));
  _Unwind_Resume(a1);
}

void sub_20C721A3C()
{
  JUMPOUT(0x20C721A1CLL);
}

void sub_20C721A44()
{
  JUMPOUT(0x20C721A24);
}

void sub_20C721A4C()
{
  JUMPOUT(0x20C721A2CLL);
}

uint64_t pxrInternal__aapl__pxrReserved__::_GetCoM(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *a1, float32x2_t *a2, pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *a3)
{
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v9;
  float v10;
  float32_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD v16[17];
  _BYTE v17[128];
  float32x2_t v18;
  float v19;
  _BYTE v20[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  int v22;
  int v23;
  uint64_t v24;
  _QWORD v25[4];

  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v7);
  if (!pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)a1, SchemaInfo))
    return 0;
  v9 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v25, a1);
  v25[3] = 0;
  v25[0] = off_24C542738;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetCenterOfMassAttr(v9, (uint64_t)v20);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>((uint64_t)v20, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v18);
  if ((v18.i32[0] & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (v18.i32[1] & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (LODWORD(v19) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    v12 = 0;
  }
  else
  {
    memset(v17, 0, sizeof(v17));
    pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalToWorldTransform(a3, a1, (uint64_t)v17);
    pxrInternal__aapl__pxrReserved__::GfTransform::SetIdentity((pxrInternal__aapl__pxrReserved__::GfTransform *)v16);
    pxrInternal__aapl__pxrReserved__::GfTransform::SetMatrix((float64x2_t *)v16, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v17);
    v10 = *(double *)&v16[9];
    v11 = v19 * v10;
    *a2 = vmul_f32(v18, vcvt_f32_f64(*(float64x2_t *)&v16[7]));
    a2[1].f32[0] = v11;
    v12 = 1;
  }
  if ((v24 & 7) != 0)
  {
    v13 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_20BFD265C(&v22);
  if (v21)
    sub_20C35C614(v21);
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::~UsdPhysicsMassAPI((pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *)v25);
  return v12;
}

void sub_20C721BD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C372B54(v1 - 96);
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::~UsdPhysicsMassAPI((pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *)(v1 - 64));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::_GetCollisionShapeMassAPIData(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *a2@<X1>, float a3@<S0>, float *a4@<X2>, uint64_t a5@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v10;
  unsigned int *v11;
  unsigned int v12;
  float v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int v21;
  int v22;
  uint64_t v23;
  void (**v24)(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *__hidden);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v25;
  int v26;
  int v27;
  uint64_t v28;

  sub_20C35C4F8((uint64_t)&v24, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::_ParseMassApi((pxrInternal__aapl__pxrReserved__ *)&v24, v10, a5);
  if ((v28 & 7) != 0)
  {
    v11 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
  sub_20BFD265C(&v26);
  if (v25)
    sub_20C35C614(v25);
  v13 = *(float *)(a5 + 4);
  if (v13 <= 0.0)
  {
    *(float *)(a5 + 4) = a3;
    v13 = a3;
  }
  *(float *)a2 = v13;
  if (v13 <= 0.0)
  {
    v14 = *((_QWORD *)a4 + 1);
    if (v14)
    {
      if ((*(_BYTE *)(v14 + 57) & 8) == 0 && (*(unsigned int (**)(float *))(*(_QWORD *)a4 + 32))(a4))
      {
        sub_20C35C4F8((uint64_t)&v19, (uint64_t *)a4 + 1, (_DWORD *)a4 + 4);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v24, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v19);
        v28 = 0;
        v24 = off_24C542790;
        if ((v23 & 7) != 0)
        {
          v15 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stlxr(v16 - 2, v15));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
        sub_20BFD265C(&v21);
        if (v20)
          sub_20C35C614(v20);
        if (v25
          && (*((_BYTE *)v25 + 57) & 8) == 0
          && ((unsigned int (*)(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *))v24[4])((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v24))
        {
          pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::GetDensityAttr((pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *)&v24, (uint64_t)&v19);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>((uint64_t)&v19, a2);
          if ((v23 & 7) != 0)
          {
            v17 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
            do
              v18 = __ldxr(v17);
            while (__stlxr(v18 - 2, v17));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
          sub_20BFD265C(&v21);
          if (v20)
            sub_20C35C614(v20);
        }
        pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::~UsdPhysicsMaterialAPI((pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *)&v24);
      }
    }
  }
}

void sub_20C721DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_20C372B54((uint64_t)&a9);
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::~UsdPhysicsMaterialAPI((pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *)&a13);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ParseCollisionShapeForMass@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, __int128 *a2@<X1>, pxrInternal__aapl__pxrReserved__::GfMatrix4f *a3@<X2>, pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, float a7@<S0>)
{
  __int128 v10;
  uint64_t v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t *v15;
  uint64_t *String;
  const char *v17;
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  double StageMetersPerUnit;
  float64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  float v25;
  float StageKilogramsPerUnit;
  float64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  int CoM;
  uint64_t v32;
  int v33;
  __int128 v34;
  int v35;
  __int128 v36;
  float64x2_t v37;
  __int128 v38;
  int v39;
  float32x2_t v40;
  float v41;
  int v42;
  float64x2_t v43;
  __int128 v44;
  int v45;
  float64x2_t v46;
  __int128 v47;
  int v48;
  __int128 v49;
  float32x2_t v50;
  float v51;
  float64x2_t v52;
  __int128 v53;
  int v54;
  float v55;
  float64x2_t v56;
  __int128 v57;
  int v58;
  float32x2_t v59;
  float v60;
  int v61;
  float32x2_t v62[2];
  __int128 v63;
  _OWORD v64[7];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v10 = a2[1];
  v63 = *a2;
  v64[0] = v10;
  *(_OWORD *)((char *)v64 + 12) = *(__int128 *)((char *)a2 + 28);
  v11 = *(_QWORD *)(a5 + 24);
  if (!v11)
    sub_20BE9E974();
  (*(void (**)(float *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::UsdObject *))(*(_QWORD *)v11 + 48))(&v55, v11, a1);
  if (v55 < 0.0)
  {
    *(_QWORD *)&v37.f64[0] = "usdPhysics/rigidBodyAPI.cpp";
    *(_QWORD *)&v37.f64[1] = "_ParseCollisionShapeForMass";
    *(_QWORD *)&v38 = 396;
    *((_QWORD *)&v38 + 1) = "UsdPhysicsMassProperties pxrInternal__aapl__pxrReserved__::_ParseCollisionShapeForMass(const"
                            " UsdPrim &, const _MassApiData &, float, GfMatrix4f *, UsdGeomXformCache *, const UsdPhysics"
                            "RigidBodyAPI::MassInformationFn &)";
    LOBYTE(v39) = 1;
    v40.i32[1] = 6;
    v15 = sub_20C3734F4((uint64_t)a1);
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v15);
    if (*((char *)String + 23) >= 0)
      v17 = (const char *)String;
    else
      v17 = (const char *)*String;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v37, (pxrInternal__aapl__pxrReserved__ *)"Provided mass information not valid for a prim %s.", v17);
    result = pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal(a6, 0.0);
    *(_DWORD *)(a6 + 48) = 1065353216;
    *(_DWORD *)a6 = 1065353216;
    *(_DWORD *)(a6 + 16) = 1065353216;
    *(_OWORD *)(a6 + 32) = xmmword_20CAF93B0;
    return result;
  }
  v52 = v56;
  v53 = v57;
  v54 = v58;
  if (a7 <= 0.0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v14, &v37);
    StageMetersPerUnit = pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit((uint64_t *)&v37);
    v21 = v37.f64[1];
    if (*(_QWORD *)&v37.f64[1])
    {
      v22 = (unsigned int *)(*(_QWORD *)&v37.f64[1] + 8);
      do
      {
        v23 = __ldxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
        (*(void (**)(float64_t))(**(_QWORD **)&v21 + 8))(COERCE_FLOAT64_T(*(_QWORD *)&v21));
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v19, &v37);
    v25 = StageMetersPerUnit;
    StageKilogramsPerUnit = pxrInternal__aapl__pxrReserved__::UsdPhysicsGetStageKilogramsPerUnit((uint64_t *)&v37);
    v27 = v37.f64[1];
    if (*(_QWORD *)&v37.f64[1])
    {
      v28 = (unsigned int *)(*(_QWORD *)&v37.f64[1] + 8);
      do
      {
        v29 = __ldxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
        (*(void (**)(float64_t))(**(_QWORD **)&v27 + 8))(COERCE_FLOAT64_T(*(_QWORD *)&v27));
    }
    a7 = (float)((float)((float)(v25 * 1000.0) * v25) * v25) / StageKilogramsPerUnit;
  }
  v51 = 0.0;
  v50 = 0;
  v49 = xmmword_20CA9B220;
  CoM = pxrInternal__aapl__pxrReserved__::_GetCoM(a1, &v50, a4);
  if (*(float *)&v63 > 0.0)
  {
    v37 = v52;
    v38 = v53;
    v39 = v54;
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float32x2_t *)&v37, (float)(*(float *)&v63 / v55));
LABEL_23:
    v33 = *(_DWORD *)(v32 + 32);
    v34 = *(_OWORD *)(v32 + 16);
    v52 = *(float64x2_t *)v32;
    v53 = v34;
    v54 = v33;
    goto LABEL_24;
  }
  if (v55 >= 0.0)
  {
    *(float *)&v63 = a7 * v55;
    v37 = v52;
    v38 = v53;
    v39 = v54;
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float32x2_t *)&v37, a7);
    goto LABEL_23;
  }
LABEL_24:
  if (BYTE8(v63))
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v37, (const pxrInternal__aapl__pxrReserved__::GfQuatf *)&v49);
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((uint64_t)&v46, 0.0);
    LODWORD(v46.f64[0]) = HIDWORD(v63);
    v48 = DWORD1(v64[0]);
    LODWORD(v47) = v64[0];
    v43 = v46;
    v44 = v47;
    v45 = DWORD1(v64[0]);
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float *)&v43, (float *)&v37);
    v52 = v43;
    v53 = v44;
    v54 = v45;
  }
  if (BYTE8(v64[0]))
  {
    sub_20C72227C((float *)&v52, (const pxrInternal__aapl__pxrReserved__::GfQuatf *)((char *)v64 + 12), (uint64_t)&v37);
    v52 = v37;
    v53 = v38;
    v54 = v39;
  }
  if (CoM)
  {
    if (!BYTE8(v63))
    {
      v37 = v52;
      v38 = v53;
      v39 = v54;
      v40 = v59;
      v41 = v60;
      v42 = v63;
      *(float32x2_t *)&v46.f64[0] = vsub_f32(v50, v59);
      *(float *)&v46.f64[1] = v51 - v60;
      sub_20C7222FC((uint64_t)&v37, (float *)&v46);
      v52 = v37;
      v53 = v38;
      v54 = v39;
    }
    v59 = v50;
    v60 = v51;
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslate((uint64_t)a3, (uint64_t)&v61);
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(&v46, v62);
  pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat((pxrInternal__aapl__pxrReserved__::GfRotation *)&v37, (const pxrInternal__aapl__pxrReserved__::GfQuatd *)&v46);
  result = (uint64_t)pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(a3, &v37);
  v35 = v63;
  v36 = v53;
  *(float64x2_t *)a6 = v52;
  *(_OWORD *)(a6 + 16) = v36;
  *(_DWORD *)(a6 + 32) = v54;
  *(float32x2_t *)(a6 + 36) = v59;
  *(float *)(a6 + 44) = v60;
  *(_DWORD *)(a6 + 48) = v35;
  return result;
}

void sub_20C722248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    sub_20C96B340(a12);
  _Unwind_Resume(exception_object);
}

float sub_20C72227C@<S0>(float *a1@<X0>, const pxrInternal__aapl__pxrReserved__::GfQuatf *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix3f *v5;
  __int128 v6;
  _OWORD v8[2];
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  float v13[9];

  v5 = pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v13, a2);
  *(_DWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetTranspose(v5, (uint64_t)v8);
  v10 = v8[0];
  v11 = v8[1];
  v12 = v9;
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float *)&v10, a1);
  v6 = v11;
  *(_OWORD *)a3 = v10;
  *(_OWORD *)(a3 + 16) = v6;
  *(_DWORD *)(a3 + 32) = v12;
  return pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float *)a3, v13);
}

float sub_20C7222FC(uint64_t a1, float *a2)
{
  __int128 v4;
  float v5;
  float result;
  _OWORD v7[2];
  int v8;

  sub_20C7233F0((float *)a1, a2, (uint64_t)v7, *(float *)(a1 + 48));
  v4 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = v8;
  v5 = *(float *)(a1 + 40);
  *(float *)(a1 + 36) = *a2 + *(float *)(a1 + 36);
  *(float *)(a1 + 40) = a2[1] + v5;
  result = a2[2] + *(float *)(a1 + 44);
  *(float *)(a1 + 44) = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::ComputeMassProperties(uint64_t a1, float *a2, float32x2_t *a3, _OWORD *a4, uint64_t a5)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v11;
  float v12;
  int v13;
  int CoM;
  char v15;
  float v16;
  float v17;
  float v18;
  float v19;
  BOOL v20;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *IsDefined;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v24;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;
  unsigned int *v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData **v32;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *v33;
  uint64_t *v34;
  const pxrInternal__aapl__pxrReserved__::TfType *v35;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  char HasAPI;
  unsigned int *v38;
  unsigned int v39;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v40;
  unint64_t *v41;
  unint64_t v42;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v48;
  _OWORD *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  _OWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char *v87;
  pxrInternal__aapl__pxrReserved__::GfQuatf *v88;
  float v89;
  double StageMetersPerUnit;
  uint64_t *v91;
  uint64_t *v92;
  const char *v93;
  float v94;
  __int128 *v95;
  int v96;
  __int128 v97;
  float v98;
  float v99;
  float v100;
  uint64_t *v101;
  uint64_t *String;
  const char *v103;
  const char *v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int v110;
  uint64_t v112;
  unsigned int *v113;
  unsigned int v114;
  _QWORD *v115;
  _QWORD *v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v121;
  unsigned int v122;
  char v123;
  int v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  int v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  float v133;
  _QWORD v134[4];
  uint64_t v135;
  uint64_t v136;
  uint64_t v137[2];
  int v138;
  int v139[9];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  char *v144;
  char *v145;
  void *__p;
  char *v147;
  char *v148;
  __int128 v149;
  float32x2_t v150;
  float v151;
  _DWORD v152[2];
  char v153;
  float v154;
  float v155;
  float v156;
  unsigned __int8 v157;
  __int128 v158;
  _BYTE v159[48];
  uint64_t v160;
  uint64_t v161;
  char v162[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v163;
  int v164;
  int v165;
  uint64_t v166;
  _DWORD v167[8];
  __int128 v168;
  int v169;
  __int128 v170[3];
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((uint64_t)v167, 0.0);
  v169 = 1065353216;
  v167[0] = 1065353216;
  v167[4] = 1065353216;
  v168 = xmmword_20CAF93B0;
  sub_20C35C4F8((uint64_t)v162, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v162, v10, &v160);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::UsdGeomXformCache((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)v159);
  pxrInternal__aapl__pxrReserved__::_ParseMassApi((pxrInternal__aapl__pxrReserved__ *)v162, v11, (uint64_t)v152);
  v12 = *(float *)v152;
  v151 = 0.0;
  v150 = 0;
  v13 = v157;
  v149 = v158;
  CoM = pxrInternal__aapl__pxrReserved__::_GetCoM((pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *)v162, &v150, (pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)v159);
  v15 = CoM;
  v16 = *(float *)v152;
  v17 = v154;
  v18 = v155;
  v19 = v156;
  if (v12 > 0.0 && v153 && CoM == 1)
    goto LABEL_108;
  __p = 0;
  v147 = 0;
  v148 = 0;
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  sub_20C549A40((uint64_t)v137, (uint64_t)v162);
  v123 = v15;
  v124 = v13;
  sub_20C37ECB8(v137, (uint64_t)&v129);
  while (1)
  {
    *(_QWORD *)&v125 = v137[1];
    *((_QWORD *)&v125 + 1) = v137;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v126);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v126 + 1);
    DWORD2(v126) = 0;
    WORD6(v126) = 0;
    if (v129 == v125)
    {
      v20 = 1;
      if ((_QWORD)v130 == (_QWORD)v126 && !DWORD2(v130) && !BYTE12(v130))
        v20 = BYTE13(v130) != 0;
    }
    else
    {
      v20 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v126 + 1);
    sub_20BFD265C(&v126);
    if (!v20)
      break;
    sub_20C37ED84((uint64_t)&v129, (uint64_t)&v125);
    IsDefined = (pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *)pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v125, v21);
    if ((_DWORD)IsDefined)
    {
      StaticTfType = pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::_GetStaticTfType(IsDefined);
      SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v24);
      if (pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)&v125, SchemaInfo))
        sub_20C439874(&v140, (uint64_t)&v125);
    }
    if ((BYTE8(v126) & 7) != 0)
    {
      v26 = (unsigned int *)(*((_QWORD *)&v126 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v126 + 1);
    sub_20BFD265C(&v126);
    if (*((_QWORD *)&v125 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v125 + 1));
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v129);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v130 + 1);
  sub_20BFD265C(&v130);
  v28 = (uint64_t *)atomic_load(&qword_25498C970);
  if (!v28)
  {
    v28 = (uint64_t *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v28, "physics", 0);
    v112 = *v28;
    if ((*v28 & 7) != 0)
    {
      v113 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
      do
        v114 = __ldxr(v113);
      while (__stxr(v114 + 2, v113));
      if ((v114 & 1) == 0)
        v112 &= 0xFFFFFFFFFFFFFFF8;
    }
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = 0;
    *(_QWORD *)&v129 = v28 + 1;
    BYTE8(v129) = 0;
    v115 = operator new(8uLL);
    v28[1] = (uint64_t)v115;
    v28[2] = (uint64_t)v115;
    *v115 = v112;
    v116 = v115 + 1;
    v28[3] = (uint64_t)(v115 + 1);
    if ((v112 & 7) != 0)
    {
      v117 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
      do
        v118 = __ldxr(v117);
      while (__stxr(v118 + 2, v117));
      if ((v118 & 1) == 0)
        *v115 &= 0xFFFFFFFFFFFFFFF8;
      v28[2] = (uint64_t)v116;
      do
        v119 = __ldxr(v117);
      while (__stlxr(v119 - 2, v117));
    }
    else
    {
      v28[2] = (uint64_t)v116;
    }
    while (!__ldaxr(&qword_25498C970))
    {
      if (!__stlxr((unint64_t)v28, &qword_25498C970))
        goto LABEL_22;
    }
    __clrex();
    *(_QWORD *)&v129 = v28 + 1;
    sub_20BEEB2B8((void ***)&v129);
    if ((*v28 & 7) != 0)
    {
      v121 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
      do
        v122 = __ldxr(v121);
      while (__stlxr(v122 - 2, v121));
    }
    operator delete(v28);
    v28 = (uint64_t *)atomic_load(&qword_25498C970);
  }
LABEL_22:
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterials(&v140, (uint64_t)v28, 0, 1, &v135);
  v30 = v135;
  for (i = v136; v30 != i; v30 += 24)
  {
    v32 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v30 + 8);
    v31 = *(_QWORD *)(v30 + 8);
    if (v31
      && (*(_BYTE *)(v31 + 57) & 8) == 0
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30))
    {
      v33 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *)sub_20C35C4F8((uint64_t)&v129, (uint64_t *)(v30 + 8), (_DWORD *)(v30 + 16));
      v34 = pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::_GetStaticTfType(v33);
      v36 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v34, v35);
      HasAPI = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)&v129, v36);
      if ((BYTE8(v130) & 7) != 0)
      {
        v38 = (unsigned int *)(*((_QWORD *)&v130 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v130 + 1);
      sub_20BFD265C(&v130);
      if (*((_QWORD *)&v129 + 1))
        sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v129 + 1));
      if ((HasAPI & 1) == 0)
      {
        LODWORD(v129) = 1;
        *((_QWORD *)&v129 + 1) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v130);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v130 + 1);
        *((_QWORD *)&v130 + 1) = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v125, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v129);
        *(_QWORD *)&v125 = off_24C53D820;
        v40 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)&v125 + 1);
        if (*((_QWORD *)&v125 + 1))
        {
          v41 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 48);
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        v43 = *v32;
        *v32 = v40;
        if (v43)
          sub_20C35C614(v43);
        sub_20C01A074((int *)(v30 + 16), &v126);
        sub_20C01A0C8((int *)(v30 + 20), (_DWORD *)&v126 + 1);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v125);
        if ((BYTE8(v130) & 7) != 0)
        {
          v44 = (unsigned int *)(*((_QWORD *)&v130 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v45 = __ldxr(v44);
          while (__stlxr(v45 - 2, v44));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v130 + 1);
        sub_20BFD265C(&v130);
        if (*((_QWORD *)&v129 + 1))
          sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v129 + 1));
      }
    }
  }
  v46 = v140;
  if (v141 != v140)
  {
    v47 = 0;
    do
    {
      v48 = (const pxrInternal__aapl__pxrReserved__::UsdPrim *)(v46 + 32 * v47);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v134, v48);
      v134[3] = 0;
      v134[0] = off_24C542478;
      v133 = 0.0;
      pxrInternal__aapl__pxrReserved__::_GetCollisionShapeMassAPIData((pxrInternal__aapl__pxrReserved__ *)v134, (const pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *)&v133, *(float *)&v152[1], (float *)(v135 + 24 * v47), (uint64_t)v170);
      pxrInternal__aapl__pxrReserved__::_ParseCollisionShapeForMass(v48, v170, (pxrInternal__aapl__pxrReserved__::GfMatrix4f *)&v129, (pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)v159, a5, (uint64_t)&v125, v133);
      v49 = v147;
      if (v147 >= v148)
      {
        v54 = __p;
        v55 = 0x4EC4EC4EC4EC4EC5 * ((v147 - (_BYTE *)__p) >> 2);
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) > 0x4EC4EC4EC4EC4ECLL)
          sub_20BDDF694();
        if (0x9D89D89D89D89D8ALL * ((v148 - (_BYTE *)__p) >> 2) > v56)
          v56 = 0x9D89D89D89D89D8ALL * ((v148 - (_BYTE *)__p) >> 2);
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v148 - (_BYTE *)__p) >> 2)) >= 0x276276276276276)
          v57 = 0x4EC4EC4EC4EC4ECLL;
        else
          v57 = v56;
        if (v57)
        {
          v58 = (char *)sub_20C723508((uint64_t)&v148, v57);
          v54 = __p;
          v49 = v147;
        }
        else
        {
          v58 = 0;
        }
        v59 = &v58[52 * v55];
        v60 = v125;
        v61 = v126;
        v62 = v127;
        *((_DWORD *)v59 + 12) = v128;
        *((_OWORD *)v59 + 1) = v61;
        *((_OWORD *)v59 + 2) = v62;
        *(_OWORD *)v59 = v60;
        if (v49 == v54)
        {
          v67 = &v58[52 * v55];
        }
        else
        {
          v63 = &v58[52 * v55];
          do
          {
            v64 = *(_OWORD *)((char *)v49 - 52);
            v65 = *(_OWORD *)((char *)v49 - 36);
            v66 = *(_OWORD *)((char *)v49 - 20);
            v67 = v63 - 52;
            *((_DWORD *)v63 - 1) = *((_DWORD *)v49 - 1);
            *(_OWORD *)(v63 - 20) = v66;
            *(_OWORD *)(v63 - 36) = v65;
            *(_OWORD *)(v63 - 52) = v64;
            v49 = (_OWORD *)((char *)v49 - 52);
            v63 -= 52;
          }
          while (v49 != v54);
        }
        v53 = v59 + 52;
        __p = v67;
        v147 = v59 + 52;
        v148 = &v58[52 * v57];
        if (v54)
          operator delete(v54);
      }
      else
      {
        v50 = v125;
        v51 = v126;
        v52 = v127;
        *((_DWORD *)v147 + 12) = v128;
        v49[1] = v51;
        v49[2] = v52;
        *v49 = v50;
        v53 = (char *)v49 + 52;
      }
      v147 = v53;
      v68 = v144;
      if (v144 >= v145)
      {
        v73 = (char *)v143;
        v74 = (v144 - (_BYTE *)v143) >> 6;
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 58)
          sub_20BDDF694();
        v76 = v145 - (_BYTE *)v143;
        if ((v145 - (_BYTE *)v143) >> 5 > v75)
          v75 = v76 >> 5;
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFC0)
          v77 = 0x3FFFFFFFFFFFFFFLL;
        else
          v77 = v75;
        if (v77)
        {
          v78 = (char *)sub_20C00D6F0((uint64_t)&v145, v77);
          v73 = (char *)v143;
          v68 = v144;
        }
        else
        {
          v78 = 0;
        }
        v79 = &v78[64 * v74];
        v80 = v129;
        v81 = v130;
        v82 = v132;
        *((_OWORD *)v79 + 2) = v131;
        *((_OWORD *)v79 + 3) = v82;
        *(_OWORD *)v79 = v80;
        *((_OWORD *)v79 + 1) = v81;
        if (v68 == v73)
        {
          v87 = &v78[64 * v74];
        }
        else
        {
          v83 = &v78[64 * v74];
          do
          {
            v84 = *((_OWORD *)v68 - 4);
            v85 = *((_OWORD *)v68 - 3);
            v86 = *((_OWORD *)v68 - 1);
            v87 = v83 - 64;
            *((_OWORD *)v83 - 2) = *((_OWORD *)v68 - 2);
            *((_OWORD *)v83 - 1) = v86;
            *((_OWORD *)v83 - 4) = v84;
            *((_OWORD *)v83 - 3) = v85;
            v68 -= 64;
            v83 -= 64;
          }
          while (v68 != v73);
        }
        v72 = v79 + 64;
        v143 = v87;
        v144 = v79 + 64;
        v145 = &v78[64 * v77];
        if (v73)
          operator delete(v73);
      }
      else
      {
        v69 = v129;
        v70 = v130;
        v71 = v132;
        *((_OWORD *)v144 + 2) = v131;
        *((_OWORD *)v68 + 3) = v71;
        *(_OWORD *)v68 = v69;
        *((_OWORD *)v68 + 1) = v70;
        v72 = v68 + 64;
      }
      v144 = v72;
      pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::~UsdPhysicsCollisionAPI((pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *)v134);
      ++v47;
      v46 = v140;
    }
    while (v47 < (v141 - v140) >> 5);
  }
  if (__p == v147)
  {
    if (!v153)
    {
      if (v16 <= 0.0)
      {
        *(_QWORD *)&v129 = "usdPhysics/rigidBodyAPI.cpp";
        *((_QWORD *)&v129 + 1) = "ComputeMassProperties";
        *(_QWORD *)&v130 = 610;
        *((_QWORD *)&v130 + 1) = "float pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::ComputeMassProperties(G"
                                 "fVec3f *, GfVec3f *, GfQuatf *, const MassInformationFn &) const";
        LOBYTE(v131) = 1;
        DWORD2(v131) = 6;
        v101 = sub_20C3734F4((uint64_t)v162);
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v101);
        if (*((char *)String + 23) >= 0)
          v103 = (const char *)String;
        else
          v103 = (const char *)*String;
        v104 = "";
        if (v16 < 0.0)
          v104 = " and a negative mass";
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v129, (pxrInternal__aapl__pxrReserved__ *)"The rigid body at %s has a possibly invalid inertia tensor of {1.0, 1.0, 1.0}%s. %s %s", v103, v104, "Either specify correct values in the mass properties, or add collider(s) to any shape(s) that you wish to automatically compute mass properties for.", "If you do not want the objects to collide, add colliders regardless then disable the 'enable collision' property.");
      }
      else
      {
        StageMetersPerUnit = pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit(&v160);
        *(_QWORD *)&v129 = "usdPhysics/rigidBodyAPI.cpp";
        *((_QWORD *)&v129 + 1) = "ComputeMassProperties";
        *(_QWORD *)&v130 = 602;
        *((_QWORD *)&v130 + 1) = "float pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::ComputeMassProperties(G"
                                 "fVec3f *, GfVec3f *, GfQuatf *, const MassInformationFn &) const";
        LOBYTE(v131) = 1;
        DWORD2(v131) = 6;
        v91 = sub_20C3734F4((uint64_t)v162);
        v92 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v91);
        if (*((char *)v92 + 23) >= 0)
          v93 = (const char *)v92;
        else
          v93 = (const char *)*v92;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v129, (pxrInternal__aapl__pxrReserved__ *)"The rigid body at %s has a possibly invalid inertia tensor of {1.0, 1.0, 1.0}, small sphere approximated inertia was used. %s %s", v93, "Either specify correct values in the mass properties, or add collider(s) to any shape(s) that you wish to automatically compute mass properties for.", "If you do not want the objects to collide, add colliders regardless then disable the 'enable collision' property.");
        v94 = StageMetersPerUnit;
        v17 = (float)(0.1 / v94) * (float)((float)(v16 * 0.4) * (float)(0.1 / v94));
        v18 = v17;
        v19 = v17;
      }
    }
    goto LABEL_104;
  }
  sub_20C7230EC((uint64_t)__p, (float32x2_t *)v143, -991146299 * ((unint64_t)(v147 - (_BYTE *)__p) >> 2), (uint64_t)&v129);
  v89 = *(float *)&v132;
  if (v12 > 0.0)
  {
    *(float *)&v132 = v16;
    v125 = v129;
    v126 = v130;
    LODWORD(v127) = v131;
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float32x2_t *)&v125, (float)(v16 / v89));
    v96 = *((_DWORD *)v95 + 8);
    v97 = v95[1];
    v129 = *v95;
    v130 = v97;
    LODWORD(v131) = v96;
    if ((v123 & 1) != 0)
      goto LABEL_85;
LABEL_93:
    v150 = *(float32x2_t *)((char *)&v131 + 4);
    v151 = *((float *)&v131 + 3);
    goto LABEL_94;
  }
  v16 = *(float *)&v132;
  if ((v123 & 1) == 0)
    goto LABEL_93;
LABEL_85:
  *(float32x2_t *)&v125 = vsub_f32(v150, *(float32x2_t *)((char *)&v131 + 4));
  *((float *)&v125 + 2) = v151 - *((float *)&v131 + 3);
  sub_20C7222FC((uint64_t)&v129, (float *)&v125);
LABEL_94:
  pxrInternal__aapl__pxrReserved__::UsdPhysicsDiagonalize((pxrInternal__aapl__pxrReserved__ *)&v129, (const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v125, v88);
  if (!v153)
  {
    v17 = v98;
    v18 = v99;
    v19 = v100;
  }
  if (!v124)
    v149 = v125;
LABEL_104:
  *(_QWORD *)&v129 = &v135;
  sub_20C599B38((void ***)&v129);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v139);
  sub_20BFD265C(&v138);
  *(_QWORD *)&v129 = &v140;
  sub_20C45FC78((void ***)&v129);
  if (v143)
  {
    v144 = (char *)v143;
    operator delete(v143);
  }
  if (__p)
  {
    v147 = (char *)__p;
    operator delete(__p);
  }
LABEL_108:
  if (a3)
  {
    *a3 = v150;
    a3[1].f32[0] = v151;
  }
  if (a2)
  {
    *a2 = v17;
    a2[1] = v18;
    a2[2] = v19;
  }
  if (a4)
    *a4 = v149;
  sub_20C543484((uint64_t)v159);
  v105 = v161;
  if (v161)
  {
    v106 = (unsigned int *)(v161 + 8);
    do
    {
      v107 = __ldxr(v106);
      v108 = v107 - 1;
    }
    while (__stlxr(v108, v106));
    if (!v108)
      (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  }
  if ((v166 & 7) != 0)
  {
    v109 = (unsigned int *)(v166 & 0xFFFFFFFFFFFFFFF8);
    do
      v110 = __ldxr(v109);
    while (__stlxr(v110 - 2, v109));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v165);
  sub_20BFD265C(&v164);
  if (v163)
    sub_20C35C614(v163);
  return v16;
}

void sub_20C722F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  uint64_t v68;
  _QWORD *v69;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;

  sub_20BEEB2B8((void ***)&a27);
  if ((v68 & 7) != 0)
  {
    v71 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v72 = __ldxr(v71);
    while (__stlxr(v72 - 2, v71));
  }
  if ((*v69 & 7) != 0)
  {
    v73 = (unsigned int *)(*v69 & 0xFFFFFFFFFFFFFFF8);
    do
      v74 = __ldxr(v73);
    while (__stlxr(v74 - 2, v73));
  }
  operator delete(v69);
  sub_20C37EDFC((uint64_t)&a43);
  a27 = (uint64_t)&a50;
  sub_20C45FC78((void ***)&a27);
  if (__p)
  {
    a54 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  sub_20C543484((uint64_t)&a68);
  v75 = STACK[0x210];
  if (STACK[0x210])
  {
    v76 = (unsigned int *)(v75 + 8);
    do
    {
      v77 = __ldxr(v76);
      v78 = v77 - 1;
    }
    while (__stlxr(v78, v76));
    if (!v78)
      (*(void (**)(unint64_t))(*(_QWORD *)v75 + 8))(v75);
  }
  sub_20C35C2E0((uint64_t)&STACK[0x218]);
  _Unwind_Resume(a1);
}

double sub_20C7230EC@<D0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float32x2_t *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  double v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  double result;
  __int128 v35;
  float v36[3];
  float64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float v44[9];
  float v45[9];
  __int128 v46;
  __int128 v47;
  int v48;

  v48 = 0;
  v46 = 0u;
  v47 = 0u;
  v8 = 0.0;
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((uint64_t)&v46, 0.0);
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  if (a3)
  {
    v12 = a3;
    v13 = (float *)(a1 + 36);
    v14 = v12;
    v15 = a2;
    do
    {
      v11 = v11 + v13[3];
      v16 = sub_20C6719E4(v15, v13).f32[0];
      v17 = v13[3];
      v8 = v8 + (float)(v17 * v16);
      v9 = v9 + (float)(v17 * v18);
      v10 = v10 + (float)(v17 * v19);
      v15 += 8;
      v13 += 13;
      --v14;
    }
    while (v14);
    if (v11 > 0.0)
    {
      v20 = 1.0 / v11;
      v8 = v20 * v8;
      v9 = v20 * v9;
      v10 = v20 * v10;
    }
    v21 = (float *)(a1 + 36);
    do
    {
      v22 = sub_20C6719E4(a2, v21).f32[0];
      v24 = v23;
      v26 = v25;
      v37.f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)a2);
      v37.f64[1] = v27;
      v38 = v28;
      v39 = v29;
      v40.n128_u64[0] = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(&v37);
      v40.n128_u64[1] = v30;
      v41 = v31;
      v42 = v32;
      pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(&v43, &v40);
      sub_20C72227C(v21 - 9, (const pxrInternal__aapl__pxrReserved__::GfQuatf *)&v43, (uint64_t)v44);
      v33 = v21[3];
      v36[0] = v8 - v22;
      v36[1] = v9 - v24;
      v36[2] = v10 - v26;
      sub_20C7233F0(v44, v36, (uint64_t)v45, v33);
      pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator+=((float *)&v46, v45);
      a2 += 8;
      v21 += 13;
      --v12;
    }
    while (v12);
  }
  result = *(double *)&v46;
  v35 = v47;
  *(_OWORD *)a4 = v46;
  *(_OWORD *)(a4 + 16) = v35;
  *(_DWORD *)(a4 + 32) = v48;
  *(float *)(a4 + 36) = v8;
  *(float *)(a4 + 40) = v9;
  *(float *)(a4 + 44) = v10;
  *(float *)(a4 + 48) = v11;
  return result;
}

uint64_t *sub_20C7232CC()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C7233A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C7233F0(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  float v7;
  float v8;
  float v9;
  __int128 *v10;
  int v11;
  __int128 v12;
  float v13[9];
  __int128 v14;
  __int128 v15;
  int v16;
  __int128 v17;
  __int128 v18;
  int v19;
  _OWORD v20[2];
  int v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v8 = a2[1];
  v7 = a2[2];
  v9 = *a2;
  LODWORD(v17) = 0;
  *((_QWORD *)&v17 + 1) = __PAIR64__(LODWORD(v7), LODWORD(v8));
  LODWORD(v18) = 0;
  *((float *)&v18 + 2) = -v8;
  *((float *)&v18 + 3) = v9;
  *((float *)&v17 + 1) = -v7;
  *((float *)&v18 + 1) = -v9;
  v19 = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v17, (uint64_t)v13);
  v14 = v17;
  v15 = v18;
  v16 = v19;
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float *)&v14, v13);
  v20[0] = v14;
  v20[1] = v15;
  v21 = v16;
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float32x2_t *)v20, a4);
  v24 = *((_DWORD *)v10 + 8);
  v11 = v24;
  v12 = v10[1];
  v22 = *v10;
  v23 = v12;
  *(_OWORD *)a3 = v22;
  *(_OWORD *)(a3 + 16) = v12;
  *(_DWORD *)(a3 + 32) = v11;
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator+=((float *)a3, a1);
}

void *sub_20C723508(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x4EC4EC4EC4EC4EDLL)
    sub_20BDDF5B4();
  return operator new(52 * a2);
}

void sub_20C723550()
{
  void *__p[2];
  char v1;

  sub_20C72404C();
  sub_20BDDC0E4(__p, "PhysicsScene");
  sub_20C72416C((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C72359C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::~UsdPhysicsScene(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542948;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdPhysics/scene.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdPhysicsScene pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::Get(const UsdStage"
                            "Ptr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C542948;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C723740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498C980);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498C980))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498C978, "PhysicsScene");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498C978, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C980);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498C978, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C542948;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdPhysics/scene.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdPhysicsScene pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::Define(const UsdSt"
                            "agePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C542948;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C723930(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C980);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C990);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498C990))
  {
    __cxa_guard_release(&qword_25498C990);
  }
  return &qword_25498C988;
}

void sub_20C7239D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C990);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498C9A0);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *)__cxa_guard_acquire(&qword_25498C9A0);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::_GetStaticTfType(v3);
      byte_25498C998 = sub_20C35BD7C((char *)&qword_25498C988, v4, v5);
      __cxa_guard_release(&qword_25498C9A0);
    }
  }
  return byte_25498C998;
}

void sub_20C723A50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C9A0);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::_GetStaticTfType(this);
  return &qword_25498C988;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::GetGravityDirectionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 320), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C723B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::CreateGravityDirectionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 320), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 232), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::GetGravityMagnitudeAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 328), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C723C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::CreateGravityMagnitudeAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 328), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *SchemaAttributeNames;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (int)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498C9C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498C9C0))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 40);
    v19 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v19 = (uint64_t)v7;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v9)
      v9 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v10 = (unsigned int *)*((_QWORD *)v9 + 41);
    v20 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v20 = v11;
    }
    sub_20C374970(&qword_25498C9A8, &v19, 2uLL);
    v13 = &v21;
    do
    {
      v15 = *--v13;
      v14 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    while (v13 != &v19);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C9A8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C9C0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498C9E0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498C9E0))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_20C723F98((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498C9C8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C9E0);
  }
  if (v1)
    return &qword_25498C9C8;
  else
    return &qword_25498C9A8;
}

void sub_20C723F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  __cxa_guard_abort(&qword_25498C9C0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C723F98(uint64_t **a1)
{
  qword_25498C9D0 = 0;
  unk_25498C9D8 = 0;
  qword_25498C9C8 = 0;
  sub_20BFC9A6C((char **)&qword_25498C9C8, ((*(_QWORD *)algn_25498C9B0 - qword_25498C9A8) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498C9C8, (_QWORD *)qword_25498C9D0, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498C9C8, (_QWORD *)qword_25498C9D0, (uint64_t *)qword_25498C9A8, *(uint64_t **)algn_25498C9B0, (*(_QWORD *)algn_25498C9B0 - qword_25498C9A8) >> 3);
}

void sub_20C72402C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C72404C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5647E8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C724120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C72416C(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C7241FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C724220()
{
  void *__p[2];
  char v1;

  sub_20C724EF4();
  sub_20BDDC0E4(__p, "PhysicsSphericalJoint");
  sub_20C725014((char *)__p);
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_20C72426C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::~UsdPhysicsSphericalJoint(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::~UsdPhysicsJoint(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C5429A0;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usdPhysics/sphericalJoint.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 57;
    v16 = (unint64_t)"static UsdPhysicsSphericalJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::"
                            "Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *(_QWORD *)a3 = off_24C5429A0;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C724410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = atomic_load((unsigned __int8 *)&qword_25498C9F0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498C9F0))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498C9E8, "PhysicsSphericalJoint");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498C9E8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498C9F0);
  }
  v7 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, a2, &qword_25498C9E8, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C5429A0;
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  else
  {
    v14 = "usdPhysics/sphericalJoint.cpp";
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Define";
    v16 = 70;
    v17 = (unint64_t)"static UsdPhysicsSphericalJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::"
                            "Define(const UsdStagePtr &, const SdfPath &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v14) = 1;
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
    *(_QWORD *)a3 = off_24C5429A0;
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
}

void sub_20C724600(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498C9F0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498CA00);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498CA00))
  {
    __cxa_guard_release(&qword_25498CA00);
  }
  return &qword_25498C9F8;
}

void sub_20C7246A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498CA00);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25498CA10);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *)__cxa_guard_acquire(&qword_25498CA10);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::_GetStaticTfType(v3);
      byte_25498CA08 = sub_20C35BD7C((char *)&qword_25498C9F8, v4, v5);
      __cxa_guard_release(&qword_25498CA10);
    }
  }
  return byte_25498CA08;
}

void sub_20C724720(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498CA10);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::_GetStaticTfType(this);
  return &qword_25498C9F8;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::GetAxisAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 200), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C7247F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::CreateAxisAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 200), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::GetConeAngle0LimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 256), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C724950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::CreateConeAngle0LimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 256), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::GetConeAngle1LimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  sub_20C35C4F8((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3)
    v3 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 264), a2);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C724AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::CreateConeAngle1LimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;

  v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8)
    v8 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 264), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *SchemaAttributeNames;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int)this;
  v26 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498CA30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498CA30))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5)
      v5 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v6 = *((_QWORD *)v5 + 25);
    v23 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v9)
      v9 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v10 = *((_QWORD *)v9 + 32);
    v24 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v13)
      v13 = sub_20C70FDE8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    v14 = *((_QWORD *)v13 + 33);
    v25 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_25498CA18, &v23, 3uLL);
    v17 = &v26;
    do
    {
      v19 = *--v17;
      v18 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    while (v17 != &v23);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498CA18, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CA30);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498CA50);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498CA50))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *)1);
    sub_20C724E40((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_25498CA38, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CA50);
  }
  if (v1)
    return &qword_25498CA38;
  else
    return &qword_25498CA18;
}

void sub_20C724DB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498CA30);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C724E40(uint64_t **a1)
{
  qword_25498CA40 = 0;
  unk_25498CA48 = 0;
  qword_25498CA38 = 0;
  sub_20BFC9A6C((char **)&qword_25498CA38, ((unk_25498CA20 - qword_25498CA18) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_25498CA38, (_QWORD *)qword_25498CA40, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_25498CA38, (_QWORD *)qword_25498CA40, (uint64_t *)qword_25498CA18, unk_25498CA20, (unk_25498CA20 - qword_25498CA18) >> 3);
}

void sub_20C724ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C724EF4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C7136D8((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C724FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C725014(char *a1)
{
  unint64_t v2;
  unint64_t v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_20C7250A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType::UsdPhysicsTokensType(pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int *v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int *v171;
  unsigned int v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  uint64_t v179;
  unsigned int *v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int v187;
  uint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  uint64_t v194;
  unsigned int *v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  uint64_t v200;
  unsigned int *v201;
  unsigned int v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  uint64_t v206;
  unsigned int *v207;
  unsigned int v208;
  uint64_t v209;
  unsigned int *v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int *v213;
  unsigned int v214;
  uint64_t v215;
  unsigned int *v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int *v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int *v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int *v225;
  unsigned int v226;
  uint64_t v227;
  unsigned int *v228;
  unsigned int v229;
  uint64_t v230;
  unsigned int *v231;
  unsigned int v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  uint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int *v240;
  unsigned int v241;
  uint64_t v242;
  unsigned int *v243;
  unsigned int v244;
  uint64_t v245;
  unsigned int *v246;
  unsigned int v247;
  uint64_t v248;
  unsigned int *v249;
  unsigned int v250;
  uint64_t v251;
  unsigned int *v252;
  unsigned int v253;
  uint64_t v254;
  unsigned int *v255;
  unsigned int v256;
  uint64_t v257;
  unsigned int *v258;
  unsigned int v259;
  uint64_t v260;
  unsigned int *v261;
  unsigned int v262;
  uint64_t v263;
  unsigned int *v264;
  unsigned int v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int *v269;
  unsigned int v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int *v274;
  unsigned int v275;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;

  v366 = *MEMORY[0x24BDAC8D0];
  v277 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "acceleration", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v277, "angular", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "boundingCube", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "boundingSphere", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "colliders", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "convexDecomposition", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "convexHull", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "distance", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "drive", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "drive:__INSTANCE_NAME__:physics:damping", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "drive:__INSTANCE_NAME__:physics:maxForce", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "drive:__INSTANCE_NAME__:physics:stiffness", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "drive:__INSTANCE_NAME__:physics:targetPosition", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "drive:__INSTANCE_NAME__:physics:targetVelocity", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "drive:__INSTANCE_NAME__:physics:type", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "force", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "kilogramsPerUnit", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "limit", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "limit:__INSTANCE_NAME__:physics:high", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "limit:__INSTANCE_NAME__:physics:low", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "linear", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "meshSimplification", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "none", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "physics:angularVelocity", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "physics:approximation", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "physics:axis", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "physics:body0", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "physics:body1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "physics:breakForce", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "physics:breakTorque", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 240, "physics:centerOfMass", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 248, "physics:collisionEnabled", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 256, "physics:coneAngle0Limit", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 264, "physics:coneAngle1Limit", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 272, "physics:density", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 280, "physics:diagonalInertia", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 288, "physics:dynamicFriction", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 296, "physics:excludeFromArticulation", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 304, "physics:filteredGroups", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 312, "physics:filteredPairs", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 320, "physics:gravityDirection", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 328, "physics:gravityMagnitude", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 336, "physics:invertFilteredGroups", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 344, "physics:jointEnabled", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 352, "physics:kinematicEnabled", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 360, "physics:localPos0", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 368, "physics:localPos1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 376, "physics:localRot0", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 384, "physics:localRot1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 392, "physics:lowerLimit", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 400, "physics:mass", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 408, "physics:maxDistance", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 416, "physics:mergeGroup", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 424, "physics:minDistance", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 432, "physics:principalAxes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 440, "physics:restitution", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 448, "physics:rigidBodyEnabled", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 456, "physics:simulationOwner", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 464, "physics:startsAsleep", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 472, "physics:staticFriction", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 480, "physics:upperLimit", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 488, "physics:velocity", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 496, "rotX", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 504, "rotY", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 512, "rotZ", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 520, "transX", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 528, "transY", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 536, "transZ", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 544, "X", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 552, "Y", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 560, "Z", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 568, "PhysicsArticulationRootAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 576, "PhysicsCollisionAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 584, "PhysicsCollisionGroup", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 592, "PhysicsDistanceJoint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 600, "PhysicsDriveAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 608, "PhysicsFilteredPairsAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 616, "PhysicsFixedJoint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 624, "PhysicsJoint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 632, "PhysicsLimitAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 640, "PhysicsMassAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 648, "PhysicsMaterialAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 656, "PhysicsMeshCollisionAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 664, "PhysicsPrismaticJoint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 672, "PhysicsRevoluteJoint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 680, "PhysicsRigidBodyAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 688, "PhysicsScene", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 696, "PhysicsSphericalJoint", 0);
  v2 = *(_QWORD *)this;
  v278 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v278 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v277;
  v279 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v279 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v280 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v280 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v281 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v281 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v282 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v282 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v283 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v283 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v284 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v284 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v285 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v285 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v286 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v286 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v287 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v287 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v288 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v288 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v289 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v289 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v290 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v290 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v291 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v291 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v292 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v292 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v293 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v293 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v294 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v294 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v295 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v295 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v296 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v296 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v297 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v297 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v298 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v298 &= 0xFFFFFFFFFFFFFFF8;
  }
  v65 = *((_QWORD *)this + 21);
  v299 = v65;
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 2, v66));
    if ((v67 & 1) == 0)
      v299 &= 0xFFFFFFFFFFFFFFF8;
  }
  v68 = *((_QWORD *)this + 22);
  v300 = v68;
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 2, v69));
    if ((v70 & 1) == 0)
      v300 &= 0xFFFFFFFFFFFFFFF8;
  }
  v71 = *((_QWORD *)this + 23);
  v301 = v71;
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 2, v72));
    if ((v73 & 1) == 0)
      v301 &= 0xFFFFFFFFFFFFFFF8;
  }
  v74 = *((_QWORD *)this + 24);
  v302 = v74;
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 2, v75));
    if ((v76 & 1) == 0)
      v302 &= 0xFFFFFFFFFFFFFFF8;
  }
  v77 = *((_QWORD *)this + 25);
  v303 = v77;
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 2, v78));
    if ((v79 & 1) == 0)
      v303 &= 0xFFFFFFFFFFFFFFF8;
  }
  v80 = *((_QWORD *)this + 26);
  v304 = v80;
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 2, v81));
    if ((v82 & 1) == 0)
      v304 &= 0xFFFFFFFFFFFFFFF8;
  }
  v83 = *((_QWORD *)this + 27);
  v305 = v83;
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 2, v84));
    if ((v85 & 1) == 0)
      v305 &= 0xFFFFFFFFFFFFFFF8;
  }
  v86 = *((_QWORD *)this + 28);
  v306 = v86;
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 2, v87));
    if ((v88 & 1) == 0)
      v306 &= 0xFFFFFFFFFFFFFFF8;
  }
  v89 = *((_QWORD *)this + 29);
  v307 = v89;
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 2, v90));
    if ((v91 & 1) == 0)
      v307 &= 0xFFFFFFFFFFFFFFF8;
  }
  v92 = *((_QWORD *)this + 30);
  v308 = v92;
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 2, v93));
    if ((v94 & 1) == 0)
      v308 &= 0xFFFFFFFFFFFFFFF8;
  }
  v95 = *((_QWORD *)this + 31);
  v309 = v95;
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 2, v96));
    if ((v97 & 1) == 0)
      v309 &= 0xFFFFFFFFFFFFFFF8;
  }
  v98 = *((_QWORD *)this + 32);
  v310 = v98;
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 2, v99));
    if ((v100 & 1) == 0)
      v310 &= 0xFFFFFFFFFFFFFFF8;
  }
  v101 = *((_QWORD *)this + 33);
  v311 = v101;
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 2, v102));
    if ((v103 & 1) == 0)
      v311 &= 0xFFFFFFFFFFFFFFF8;
  }
  v104 = *((_QWORD *)this + 34);
  v312 = v104;
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 2, v105));
    if ((v106 & 1) == 0)
      v312 &= 0xFFFFFFFFFFFFFFF8;
  }
  v107 = *((_QWORD *)this + 35);
  v313 = v107;
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 2, v108));
    if ((v109 & 1) == 0)
      v313 &= 0xFFFFFFFFFFFFFFF8;
  }
  v110 = *((_QWORD *)this + 36);
  v314 = v110;
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 2, v111));
    if ((v112 & 1) == 0)
      v314 &= 0xFFFFFFFFFFFFFFF8;
  }
  v113 = *((_QWORD *)this + 37);
  v315 = v113;
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 2, v114));
    if ((v115 & 1) == 0)
      v315 &= 0xFFFFFFFFFFFFFFF8;
  }
  v116 = *((_QWORD *)this + 38);
  v316 = v116;
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 2, v117));
    if ((v118 & 1) == 0)
      v316 &= 0xFFFFFFFFFFFFFFF8;
  }
  v119 = *((_QWORD *)this + 39);
  v317 = v119;
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 2, v120));
    if ((v121 & 1) == 0)
      v317 &= 0xFFFFFFFFFFFFFFF8;
  }
  v122 = *((_QWORD *)this + 40);
  v318 = v122;
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 2, v123));
    if ((v124 & 1) == 0)
      v318 &= 0xFFFFFFFFFFFFFFF8;
  }
  v125 = *((_QWORD *)this + 41);
  v319 = v125;
  if ((v125 & 7) != 0)
  {
    v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stxr(v127 + 2, v126));
    if ((v127 & 1) == 0)
      v319 &= 0xFFFFFFFFFFFFFFF8;
  }
  v128 = *((_QWORD *)this + 42);
  v320 = v128;
  if ((v128 & 7) != 0)
  {
    v129 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stxr(v130 + 2, v129));
    if ((v130 & 1) == 0)
      v320 &= 0xFFFFFFFFFFFFFFF8;
  }
  v131 = *((_QWORD *)this + 43);
  v321 = v131;
  if ((v131 & 7) != 0)
  {
    v132 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 2, v132));
    if ((v133 & 1) == 0)
      v321 &= 0xFFFFFFFFFFFFFFF8;
  }
  v134 = *((_QWORD *)this + 44);
  v322 = v134;
  if ((v134 & 7) != 0)
  {
    v135 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 2, v135));
    if ((v136 & 1) == 0)
      v322 &= 0xFFFFFFFFFFFFFFF8;
  }
  v137 = *((_QWORD *)this + 45);
  v323 = v137;
  if ((v137 & 7) != 0)
  {
    v138 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stxr(v139 + 2, v138));
    if ((v139 & 1) == 0)
      v323 &= 0xFFFFFFFFFFFFFFF8;
  }
  v140 = *((_QWORD *)this + 46);
  v324 = v140;
  if ((v140 & 7) != 0)
  {
    v141 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 2, v141));
    if ((v142 & 1) == 0)
      v324 &= 0xFFFFFFFFFFFFFFF8;
  }
  v143 = *((_QWORD *)this + 47);
  v325 = v143;
  if ((v143 & 7) != 0)
  {
    v144 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 2, v144));
    if ((v145 & 1) == 0)
      v325 &= 0xFFFFFFFFFFFFFFF8;
  }
  v146 = *((_QWORD *)this + 48);
  v326 = v146;
  if ((v146 & 7) != 0)
  {
    v147 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
    do
      v148 = __ldxr(v147);
    while (__stxr(v148 + 2, v147));
    if ((v148 & 1) == 0)
      v326 &= 0xFFFFFFFFFFFFFFF8;
  }
  v149 = *((_QWORD *)this + 49);
  v327 = v149;
  if ((v149 & 7) != 0)
  {
    v150 = (unsigned int *)(v149 & 0xFFFFFFFFFFFFFFF8);
    do
      v151 = __ldxr(v150);
    while (__stxr(v151 + 2, v150));
    if ((v151 & 1) == 0)
      v327 &= 0xFFFFFFFFFFFFFFF8;
  }
  v152 = *((_QWORD *)this + 50);
  v328 = v152;
  if ((v152 & 7) != 0)
  {
    v153 = (unsigned int *)(v152 & 0xFFFFFFFFFFFFFFF8);
    do
      v154 = __ldxr(v153);
    while (__stxr(v154 + 2, v153));
    if ((v154 & 1) == 0)
      v328 &= 0xFFFFFFFFFFFFFFF8;
  }
  v155 = *((_QWORD *)this + 51);
  v329 = v155;
  if ((v155 & 7) != 0)
  {
    v156 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
    do
      v157 = __ldxr(v156);
    while (__stxr(v157 + 2, v156));
    if ((v157 & 1) == 0)
      v329 &= 0xFFFFFFFFFFFFFFF8;
  }
  v158 = *((_QWORD *)this + 52);
  v330 = v158;
  if ((v158 & 7) != 0)
  {
    v159 = (unsigned int *)(v158 & 0xFFFFFFFFFFFFFFF8);
    do
      v160 = __ldxr(v159);
    while (__stxr(v160 + 2, v159));
    if ((v160 & 1) == 0)
      v330 &= 0xFFFFFFFFFFFFFFF8;
  }
  v161 = *((_QWORD *)this + 53);
  v331 = v161;
  if ((v161 & 7) != 0)
  {
    v162 = (unsigned int *)(v161 & 0xFFFFFFFFFFFFFFF8);
    do
      v163 = __ldxr(v162);
    while (__stxr(v163 + 2, v162));
    if ((v163 & 1) == 0)
      v331 &= 0xFFFFFFFFFFFFFFF8;
  }
  v164 = *((_QWORD *)this + 54);
  v332 = v164;
  if ((v164 & 7) != 0)
  {
    v165 = (unsigned int *)(v164 & 0xFFFFFFFFFFFFFFF8);
    do
      v166 = __ldxr(v165);
    while (__stxr(v166 + 2, v165));
    if ((v166 & 1) == 0)
      v332 &= 0xFFFFFFFFFFFFFFF8;
  }
  v167 = *((_QWORD *)this + 55);
  v333 = v167;
  if ((v167 & 7) != 0)
  {
    v168 = (unsigned int *)(v167 & 0xFFFFFFFFFFFFFFF8);
    do
      v169 = __ldxr(v168);
    while (__stxr(v169 + 2, v168));
    if ((v169 & 1) == 0)
      v333 &= 0xFFFFFFFFFFFFFFF8;
  }
  v170 = *((_QWORD *)this + 56);
  v334 = v170;
  if ((v170 & 7) != 0)
  {
    v171 = (unsigned int *)(v170 & 0xFFFFFFFFFFFFFFF8);
    do
      v172 = __ldxr(v171);
    while (__stxr(v172 + 2, v171));
    if ((v172 & 1) == 0)
      v334 &= 0xFFFFFFFFFFFFFFF8;
  }
  v173 = *((_QWORD *)this + 57);
  v335 = v173;
  if ((v173 & 7) != 0)
  {
    v174 = (unsigned int *)(v173 & 0xFFFFFFFFFFFFFFF8);
    do
      v175 = __ldxr(v174);
    while (__stxr(v175 + 2, v174));
    if ((v175 & 1) == 0)
      v335 &= 0xFFFFFFFFFFFFFFF8;
  }
  v176 = *((_QWORD *)this + 58);
  v336 = v176;
  if ((v176 & 7) != 0)
  {
    v177 = (unsigned int *)(v176 & 0xFFFFFFFFFFFFFFF8);
    do
      v178 = __ldxr(v177);
    while (__stxr(v178 + 2, v177));
    if ((v178 & 1) == 0)
      v336 &= 0xFFFFFFFFFFFFFFF8;
  }
  v179 = *((_QWORD *)this + 59);
  v337 = v179;
  if ((v179 & 7) != 0)
  {
    v180 = (unsigned int *)(v179 & 0xFFFFFFFFFFFFFFF8);
    do
      v181 = __ldxr(v180);
    while (__stxr(v181 + 2, v180));
    if ((v181 & 1) == 0)
      v337 &= 0xFFFFFFFFFFFFFFF8;
  }
  v182 = *((_QWORD *)this + 60);
  v338 = v182;
  if ((v182 & 7) != 0)
  {
    v183 = (unsigned int *)(v182 & 0xFFFFFFFFFFFFFFF8);
    do
      v184 = __ldxr(v183);
    while (__stxr(v184 + 2, v183));
    if ((v184 & 1) == 0)
      v338 &= 0xFFFFFFFFFFFFFFF8;
  }
  v185 = *((_QWORD *)this + 61);
  v339 = v185;
  if ((v185 & 7) != 0)
  {
    v186 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
    do
      v187 = __ldxr(v186);
    while (__stxr(v187 + 2, v186));
    if ((v187 & 1) == 0)
      v339 &= 0xFFFFFFFFFFFFFFF8;
  }
  v188 = *((_QWORD *)this + 62);
  v340 = v188;
  if ((v188 & 7) != 0)
  {
    v189 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFFFF8);
    do
      v190 = __ldxr(v189);
    while (__stxr(v190 + 2, v189));
    if ((v190 & 1) == 0)
      v340 &= 0xFFFFFFFFFFFFFFF8;
  }
  v191 = *((_QWORD *)this + 63);
  v341 = v191;
  if ((v191 & 7) != 0)
  {
    v192 = (unsigned int *)(v191 & 0xFFFFFFFFFFFFFFF8);
    do
      v193 = __ldxr(v192);
    while (__stxr(v193 + 2, v192));
    if ((v193 & 1) == 0)
      v341 &= 0xFFFFFFFFFFFFFFF8;
  }
  v194 = *((_QWORD *)this + 64);
  v342 = v194;
  if ((v194 & 7) != 0)
  {
    v195 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
    do
      v196 = __ldxr(v195);
    while (__stxr(v196 + 2, v195));
    if ((v196 & 1) == 0)
      v342 &= 0xFFFFFFFFFFFFFFF8;
  }
  v197 = *((_QWORD *)this + 65);
  v343 = v197;
  if ((v197 & 7) != 0)
  {
    v198 = (unsigned int *)(v197 & 0xFFFFFFFFFFFFFFF8);
    do
      v199 = __ldxr(v198);
    while (__stxr(v199 + 2, v198));
    if ((v199 & 1) == 0)
      v343 &= 0xFFFFFFFFFFFFFFF8;
  }
  v200 = *((_QWORD *)this + 66);
  v344 = v200;
  if ((v200 & 7) != 0)
  {
    v201 = (unsigned int *)(v200 & 0xFFFFFFFFFFFFFFF8);
    do
      v202 = __ldxr(v201);
    while (__stxr(v202 + 2, v201));
    if ((v202 & 1) == 0)
      v344 &= 0xFFFFFFFFFFFFFFF8;
  }
  v203 = *((_QWORD *)this + 67);
  v345 = v203;
  if ((v203 & 7) != 0)
  {
    v204 = (unsigned int *)(v203 & 0xFFFFFFFFFFFFFFF8);
    do
      v205 = __ldxr(v204);
    while (__stxr(v205 + 2, v204));
    if ((v205 & 1) == 0)
      v345 &= 0xFFFFFFFFFFFFFFF8;
  }
  v206 = *((_QWORD *)this + 68);
  v346 = v206;
  if ((v206 & 7) != 0)
  {
    v207 = (unsigned int *)(v206 & 0xFFFFFFFFFFFFFFF8);
    do
      v208 = __ldxr(v207);
    while (__stxr(v208 + 2, v207));
    if ((v208 & 1) == 0)
      v346 &= 0xFFFFFFFFFFFFFFF8;
  }
  v209 = *((_QWORD *)this + 69);
  v347 = v209;
  if ((v209 & 7) != 0)
  {
    v210 = (unsigned int *)(v209 & 0xFFFFFFFFFFFFFFF8);
    do
      v211 = __ldxr(v210);
    while (__stxr(v211 + 2, v210));
    if ((v211 & 1) == 0)
      v347 &= 0xFFFFFFFFFFFFFFF8;
  }
  v212 = *((_QWORD *)this + 70);
  v348 = v212;
  if ((v212 & 7) != 0)
  {
    v213 = (unsigned int *)(v212 & 0xFFFFFFFFFFFFFFF8);
    do
      v214 = __ldxr(v213);
    while (__stxr(v214 + 2, v213));
    if ((v214 & 1) == 0)
      v348 &= 0xFFFFFFFFFFFFFFF8;
  }
  v215 = *((_QWORD *)this + 71);
  v349 = v215;
  if ((v215 & 7) != 0)
  {
    v216 = (unsigned int *)(v215 & 0xFFFFFFFFFFFFFFF8);
    do
      v217 = __ldxr(v216);
    while (__stxr(v217 + 2, v216));
    if ((v217 & 1) == 0)
      v349 &= 0xFFFFFFFFFFFFFFF8;
  }
  v218 = *((_QWORD *)this + 72);
  v350 = v218;
  if ((v218 & 7) != 0)
  {
    v219 = (unsigned int *)(v218 & 0xFFFFFFFFFFFFFFF8);
    do
      v220 = __ldxr(v219);
    while (__stxr(v220 + 2, v219));
    if ((v220 & 1) == 0)
      v350 &= 0xFFFFFFFFFFFFFFF8;
  }
  v221 = *((_QWORD *)this + 73);
  v351 = v221;
  if ((v221 & 7) != 0)
  {
    v222 = (unsigned int *)(v221 & 0xFFFFFFFFFFFFFFF8);
    do
      v223 = __ldxr(v222);
    while (__stxr(v223 + 2, v222));
    if ((v223 & 1) == 0)
      v351 &= 0xFFFFFFFFFFFFFFF8;
  }
  v224 = *((_QWORD *)this + 74);
  v352 = v224;
  if ((v224 & 7) != 0)
  {
    v225 = (unsigned int *)(v224 & 0xFFFFFFFFFFFFFFF8);
    do
      v226 = __ldxr(v225);
    while (__stxr(v226 + 2, v225));
    if ((v226 & 1) == 0)
      v352 &= 0xFFFFFFFFFFFFFFF8;
  }
  v227 = *((_QWORD *)this + 75);
  v353 = v227;
  if ((v227 & 7) != 0)
  {
    v228 = (unsigned int *)(v227 & 0xFFFFFFFFFFFFFFF8);
    do
      v229 = __ldxr(v228);
    while (__stxr(v229 + 2, v228));
    if ((v229 & 1) == 0)
      v353 &= 0xFFFFFFFFFFFFFFF8;
  }
  v230 = *((_QWORD *)this + 76);
  v354 = v230;
  if ((v230 & 7) != 0)
  {
    v231 = (unsigned int *)(v230 & 0xFFFFFFFFFFFFFFF8);
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 2, v231));
    if ((v232 & 1) == 0)
      v354 &= 0xFFFFFFFFFFFFFFF8;
  }
  v233 = *((_QWORD *)this + 77);
  v355 = v233;
  if ((v233 & 7) != 0)
  {
    v234 = (unsigned int *)(v233 & 0xFFFFFFFFFFFFFFF8);
    do
      v235 = __ldxr(v234);
    while (__stxr(v235 + 2, v234));
    if ((v235 & 1) == 0)
      v355 &= 0xFFFFFFFFFFFFFFF8;
  }
  v236 = *((_QWORD *)this + 78);
  v356 = v236;
  if ((v236 & 7) != 0)
  {
    v237 = (unsigned int *)(v236 & 0xFFFFFFFFFFFFFFF8);
    do
      v238 = __ldxr(v237);
    while (__stxr(v238 + 2, v237));
    if ((v238 & 1) == 0)
      v356 &= 0xFFFFFFFFFFFFFFF8;
  }
  v239 = *((_QWORD *)this + 79);
  v357 = v239;
  if ((v239 & 7) != 0)
  {
    v240 = (unsigned int *)(v239 & 0xFFFFFFFFFFFFFFF8);
    do
      v241 = __ldxr(v240);
    while (__stxr(v241 + 2, v240));
    if ((v241 & 1) == 0)
      v357 &= 0xFFFFFFFFFFFFFFF8;
  }
  v242 = *((_QWORD *)this + 80);
  v358 = v242;
  if ((v242 & 7) != 0)
  {
    v243 = (unsigned int *)(v242 & 0xFFFFFFFFFFFFFFF8);
    do
      v244 = __ldxr(v243);
    while (__stxr(v244 + 2, v243));
    if ((v244 & 1) == 0)
      v358 &= 0xFFFFFFFFFFFFFFF8;
  }
  v245 = *((_QWORD *)this + 81);
  v359 = v245;
  if ((v245 & 7) != 0)
  {
    v246 = (unsigned int *)(v245 & 0xFFFFFFFFFFFFFFF8);
    do
      v247 = __ldxr(v246);
    while (__stxr(v247 + 2, v246));
    if ((v247 & 1) == 0)
      v359 &= 0xFFFFFFFFFFFFFFF8;
  }
  v248 = *((_QWORD *)this + 82);
  v360 = v248;
  if ((v248 & 7) != 0)
  {
    v249 = (unsigned int *)(v248 & 0xFFFFFFFFFFFFFFF8);
    do
      v250 = __ldxr(v249);
    while (__stxr(v250 + 2, v249));
    if ((v250 & 1) == 0)
      v360 &= 0xFFFFFFFFFFFFFFF8;
  }
  v251 = *((_QWORD *)this + 83);
  v361 = v251;
  if ((v251 & 7) != 0)
  {
    v252 = (unsigned int *)(v251 & 0xFFFFFFFFFFFFFFF8);
    do
      v253 = __ldxr(v252);
    while (__stxr(v253 + 2, v252));
    if ((v253 & 1) == 0)
      v361 &= 0xFFFFFFFFFFFFFFF8;
  }
  v254 = *((_QWORD *)this + 84);
  v362 = v254;
  if ((v254 & 7) != 0)
  {
    v255 = (unsigned int *)(v254 & 0xFFFFFFFFFFFFFFF8);
    do
      v256 = __ldxr(v255);
    while (__stxr(v256 + 2, v255));
    if ((v256 & 1) == 0)
      v362 &= 0xFFFFFFFFFFFFFFF8;
  }
  v257 = *((_QWORD *)this + 85);
  v363 = v257;
  if ((v257 & 7) != 0)
  {
    v258 = (unsigned int *)(v257 & 0xFFFFFFFFFFFFFFF8);
    do
      v259 = __ldxr(v258);
    while (__stxr(v259 + 2, v258));
    if ((v259 & 1) == 0)
      v363 &= 0xFFFFFFFFFFFFFFF8;
  }
  v260 = *((_QWORD *)this + 86);
  v364 = v260;
  if ((v260 & 7) != 0)
  {
    v261 = (unsigned int *)(v260 & 0xFFFFFFFFFFFFFFF8);
    do
      v262 = __ldxr(v261);
    while (__stxr(v262 + 2, v261));
    if ((v262 & 1) == 0)
      v364 &= 0xFFFFFFFFFFFFFFF8;
  }
  v263 = *((_QWORD *)this + 87);
  v365 = v263;
  if ((v263 & 7) != 0)
  {
    v264 = (unsigned int *)(v263 & 0xFFFFFFFFFFFFFFF8);
    do
      v265 = __ldxr(v264);
    while (__stxr(v265 + 2, v264));
    if ((v265 & 1) == 0)
      v365 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 90) = 0;
  v266 = operator new(0x2C0uLL);
  v267 = 0;
  *((_QWORD *)this + 88) = v266;
  *((_QWORD *)this + 89) = v266;
  *((_QWORD *)this + 90) = v266 + 88;
  do
  {
    v268 = *(&v278 + v267);
    *v266 = v268;
    if ((v268 & 7) != 0)
    {
      v269 = (unsigned int *)(v268 & 0xFFFFFFFFFFFFFFF8);
      do
        v270 = __ldxr(v269);
      while (__stxr(v270 + 2, v269));
      if ((v270 & 1) == 0)
        *v266 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v267;
    ++v266;
  }
  while (v267 != 88);
  v271 = &v366;
  *((_QWORD *)this + 89) = v266;
  do
  {
    v273 = *--v271;
    v272 = v273;
    if ((v273 & 7) != 0)
    {
      v274 = (unsigned int *)(v272 & 0xFFFFFFFFFFFFFFF8);
      do
        v275 = __ldxr(v274);
      while (__stlxr(v275 - 2, v274));
    }
  }
  while (v271 != &v278);
  return this;
}

void sub_20C726D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,_QWORD *a33,_QWORD *a34,_QWORD *a35,_QWORD *a36,_QWORD *a37,_QWORD *a38,_QWORD *a39,_QWORD *a40,_QWORD *a41,_QWORD *a42,_QWORD *a43,_QWORD *a44,_QWORD *a45,_QWORD *a46,_QWORD *a47,_QWORD *a48,_QWORD *a49,_QWORD *a50,_QWORD *a51,_QWORD *a52,_QWORD *a53,_QWORD *a54,_QWORD *a55,_QWORD *a56,_QWORD *a57,_QWORD *a58,_QWORD *a59,_QWORD *a60,_QWORD *a61,_QWORD *a62,_QWORD *a63)
{
  _QWORD *a64;
  _QWORD *a65;
  _QWORD *a66;
  _QWORD *a67;
  _QWORD *a68;
  _QWORD *a69;
  _QWORD *a70;
  _QWORD *a71;
  _QWORD *a72;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int *v153;
  unsigned int v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int *v163;
  unsigned int v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int *v171;
  unsigned int v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int *v175;
  unsigned int v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int *v179;
  unsigned int v180;
  unsigned int *v181;
  unsigned int v182;
  unsigned int *v183;
  unsigned int v184;
  unsigned int *v185;
  unsigned int v186;
  unsigned int *v187;
  unsigned int v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int *v191;
  unsigned int v192;
  unsigned int *v193;
  unsigned int v194;
  unsigned int *v195;
  unsigned int v196;
  unsigned int *v197;
  unsigned int v198;
  unsigned int *v199;
  unsigned int v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int *v205;
  unsigned int v206;
  unsigned int *v207;
  unsigned int v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int *v211;
  unsigned int v212;
  unsigned int *v213;
  unsigned int v214;
  unsigned int *v215;
  unsigned int v216;
  unsigned int *v217;
  unsigned int v218;
  unsigned int *v219;
  unsigned int v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int *v223;
  unsigned int v224;
  unsigned int *v225;
  unsigned int v226;
  unsigned int *v227;
  unsigned int v228;
  uint64_t v229;
  unsigned int *v230;
  unsigned int v231;
  uint64_t v232;
  unsigned int *v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int *v236;
  unsigned int v237;
  uint64_t v238;
  unsigned int *v239;
  unsigned int v240;
  uint64_t v241;
  unsigned int *v242;
  unsigned int v243;
  uint64_t v244;
  unsigned int *v245;
  unsigned int v246;
  uint64_t v247;
  unsigned int *v248;
  unsigned int v249;
  uint64_t v250;
  unsigned int *v251;
  unsigned int v252;
  uint64_t v253;
  unsigned int *v254;
  unsigned int v255;
  uint64_t v256;
  unsigned int *v257;
  unsigned int v258;
  uint64_t v259;
  unsigned int *v260;
  unsigned int v261;
  uint64_t v262;
  unsigned int *v263;
  unsigned int v264;
  uint64_t v265;
  unsigned int *v266;
  unsigned int v267;
  uint64_t v268;
  unsigned int *v269;
  unsigned int v270;
  uint64_t v271;
  unsigned int *v272;
  unsigned int v273;
  uint64_t v274;
  unsigned int *v275;
  unsigned int v276;
  unsigned int *v277;
  unsigned int v278;

  sub_20BEEB2B8((void ***)&STACK[0x280]);
  v82 = &STACK[0x550];
  while (1)
  {
    v84 = *--v82;
    v83 = v84;
    if ((v84 & 7) != 0)
    {
      v85 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
      do
        v86 = __ldxr(v85);
      while (__stlxr(v86 - 2, v85));
    }
    if (v82 == &STACK[0x290])
    {
      if ((*v78 & 7) != 0)
      {
        v87 = (unsigned int *)(*v78 & 0xFFFFFFFFFFFFFFF8);
        do
          v88 = __ldxr(v87);
        while (__stlxr(v88 - 2, v87));
      }
      if ((*v77 & 7) != 0)
      {
        v89 = (unsigned int *)(*v77 & 0xFFFFFFFFFFFFFFF8);
        do
          v90 = __ldxr(v89);
        while (__stlxr(v90 - 2, v89));
      }
      if ((*v76 & 7) != 0)
      {
        v91 = (unsigned int *)(*v76 & 0xFFFFFFFFFFFFFFF8);
        do
          v92 = __ldxr(v91);
        while (__stlxr(v92 - 2, v91));
      }
      if ((*v75 & 7) != 0)
      {
        v93 = (unsigned int *)(*v75 & 0xFFFFFFFFFFFFFFF8);
        do
          v94 = __ldxr(v93);
        while (__stlxr(v94 - 2, v93));
      }
      if ((*v74 & 7) != 0)
      {
        v95 = (unsigned int *)(*v74 & 0xFFFFFFFFFFFFFFF8);
        do
          v96 = __ldxr(v95);
        while (__stlxr(v96 - 2, v95));
      }
      if ((*v73 & 7) != 0)
      {
        v97 = (unsigned int *)(*v73 & 0xFFFFFFFFFFFFFFF8);
        do
          v98 = __ldxr(v97);
        while (__stlxr(v98 - 2, v97));
      }
      if ((*v81 & 7) != 0)
      {
        v99 = (unsigned int *)(*v81 & 0xFFFFFFFFFFFFFFF8);
        do
          v100 = __ldxr(v99);
        while (__stlxr(v100 - 2, v99));
      }
      if ((*v80 & 7) != 0)
      {
        v101 = (unsigned int *)(*v80 & 0xFFFFFFFFFFFFFFF8);
        do
          v102 = __ldxr(v101);
        while (__stlxr(v102 - 2, v101));
      }
      if ((*v79 & 7) != 0)
      {
        v103 = (unsigned int *)(*v79 & 0xFFFFFFFFFFFFFFF8);
        do
          v104 = __ldxr(v103);
        while (__stlxr(v104 - 2, v103));
      }
      if ((*a11 & 7) != 0)
      {
        v105 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v106 = __ldxr(v105);
        while (__stlxr(v106 - 2, v105));
      }
      if ((*a12 & 7) != 0)
      {
        v107 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v108 = __ldxr(v107);
        while (__stlxr(v108 - 2, v107));
      }
      if ((*a13 & 7) != 0)
      {
        v109 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v110 = __ldxr(v109);
        while (__stlxr(v110 - 2, v109));
      }
      if ((*a14 & 7) != 0)
      {
        v111 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v112 = __ldxr(v111);
        while (__stlxr(v112 - 2, v111));
      }
      if ((*a15 & 7) != 0)
      {
        v113 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v114 = __ldxr(v113);
        while (__stlxr(v114 - 2, v113));
      }
      if ((*a16 & 7) != 0)
      {
        v115 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v116 = __ldxr(v115);
        while (__stlxr(v116 - 2, v115));
      }
      if ((*a17 & 7) != 0)
      {
        v117 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v118 = __ldxr(v117);
        while (__stlxr(v118 - 2, v117));
      }
      if ((*a18 & 7) != 0)
      {
        v119 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v120 = __ldxr(v119);
        while (__stlxr(v120 - 2, v119));
      }
      if ((*a19 & 7) != 0)
      {
        v121 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v122 = __ldxr(v121);
        while (__stlxr(v122 - 2, v121));
      }
      if ((*a20 & 7) != 0)
      {
        v123 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v124 = __ldxr(v123);
        while (__stlxr(v124 - 2, v123));
      }
      if ((*a21 & 7) != 0)
      {
        v125 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v126 = __ldxr(v125);
        while (__stlxr(v126 - 2, v125));
      }
      if ((*a22 & 7) != 0)
      {
        v127 = (unsigned int *)(*a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v128 = __ldxr(v127);
        while (__stlxr(v128 - 2, v127));
      }
      if ((*a23 & 7) != 0)
      {
        v129 = (unsigned int *)(*a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v130 = __ldxr(v129);
        while (__stlxr(v130 - 2, v129));
      }
      if ((*a24 & 7) != 0)
      {
        v131 = (unsigned int *)(*a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v132 = __ldxr(v131);
        while (__stlxr(v132 - 2, v131));
      }
      if ((*a25 & 7) != 0)
      {
        v133 = (unsigned int *)(*a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v134 = __ldxr(v133);
        while (__stlxr(v134 - 2, v133));
      }
      if ((*a26 & 7) != 0)
      {
        v135 = (unsigned int *)(*a26 & 0xFFFFFFFFFFFFFFF8);
        do
          v136 = __ldxr(v135);
        while (__stlxr(v136 - 2, v135));
      }
      if ((*a27 & 7) != 0)
      {
        v137 = (unsigned int *)(*a27 & 0xFFFFFFFFFFFFFFF8);
        do
          v138 = __ldxr(v137);
        while (__stlxr(v138 - 2, v137));
      }
      if ((*a28 & 7) != 0)
      {
        v139 = (unsigned int *)(*a28 & 0xFFFFFFFFFFFFFFF8);
        do
          v140 = __ldxr(v139);
        while (__stlxr(v140 - 2, v139));
      }
      if ((*a29 & 7) != 0)
      {
        v141 = (unsigned int *)(*a29 & 0xFFFFFFFFFFFFFFF8);
        do
          v142 = __ldxr(v141);
        while (__stlxr(v142 - 2, v141));
      }
      if ((*a30 & 7) != 0)
      {
        v143 = (unsigned int *)(*a30 & 0xFFFFFFFFFFFFFFF8);
        do
          v144 = __ldxr(v143);
        while (__stlxr(v144 - 2, v143));
      }
      if ((*a31 & 7) != 0)
      {
        v145 = (unsigned int *)(*a31 & 0xFFFFFFFFFFFFFFF8);
        do
          v146 = __ldxr(v145);
        while (__stlxr(v146 - 2, v145));
      }
      if ((*a32 & 7) != 0)
      {
        v147 = (unsigned int *)(*a32 & 0xFFFFFFFFFFFFFFF8);
        do
          v148 = __ldxr(v147);
        while (__stlxr(v148 - 2, v147));
      }
      if ((*a33 & 7) != 0)
      {
        v149 = (unsigned int *)(*a33 & 0xFFFFFFFFFFFFFFF8);
        do
          v150 = __ldxr(v149);
        while (__stlxr(v150 - 2, v149));
      }
      if ((*a34 & 7) != 0)
      {
        v151 = (unsigned int *)(*a34 & 0xFFFFFFFFFFFFFFF8);
        do
          v152 = __ldxr(v151);
        while (__stlxr(v152 - 2, v151));
      }
      if ((*a35 & 7) != 0)
      {
        v153 = (unsigned int *)(*a35 & 0xFFFFFFFFFFFFFFF8);
        do
          v154 = __ldxr(v153);
        while (__stlxr(v154 - 2, v153));
      }
      if ((*a36 & 7) != 0)
      {
        v155 = (unsigned int *)(*a36 & 0xFFFFFFFFFFFFFFF8);
        do
          v156 = __ldxr(v155);
        while (__stlxr(v156 - 2, v155));
      }
      if ((*a37 & 7) != 0)
      {
        v157 = (unsigned int *)(*a37 & 0xFFFFFFFFFFFFFFF8);
        do
          v158 = __ldxr(v157);
        while (__stlxr(v158 - 2, v157));
      }
      if ((*a38 & 7) != 0)
      {
        v159 = (unsigned int *)(*a38 & 0xFFFFFFFFFFFFFFF8);
        do
          v160 = __ldxr(v159);
        while (__stlxr(v160 - 2, v159));
      }
      if ((*a39 & 7) != 0)
      {
        v161 = (unsigned int *)(*a39 & 0xFFFFFFFFFFFFFFF8);
        do
          v162 = __ldxr(v161);
        while (__stlxr(v162 - 2, v161));
      }
      if ((*a40 & 7) != 0)
      {
        v163 = (unsigned int *)(*a40 & 0xFFFFFFFFFFFFFFF8);
        do
          v164 = __ldxr(v163);
        while (__stlxr(v164 - 2, v163));
      }
      if ((*a41 & 7) != 0)
      {
        v165 = (unsigned int *)(*a41 & 0xFFFFFFFFFFFFFFF8);
        do
          v166 = __ldxr(v165);
        while (__stlxr(v166 - 2, v165));
      }
      if ((*a42 & 7) != 0)
      {
        v167 = (unsigned int *)(*a42 & 0xFFFFFFFFFFFFFFF8);
        do
          v168 = __ldxr(v167);
        while (__stlxr(v168 - 2, v167));
      }
      if ((*a43 & 7) != 0)
      {
        v169 = (unsigned int *)(*a43 & 0xFFFFFFFFFFFFFFF8);
        do
          v170 = __ldxr(v169);
        while (__stlxr(v170 - 2, v169));
      }
      if ((*a44 & 7) != 0)
      {
        v171 = (unsigned int *)(*a44 & 0xFFFFFFFFFFFFFFF8);
        do
          v172 = __ldxr(v171);
        while (__stlxr(v172 - 2, v171));
      }
      if ((*a45 & 7) != 0)
      {
        v173 = (unsigned int *)(*a45 & 0xFFFFFFFFFFFFFFF8);
        do
          v174 = __ldxr(v173);
        while (__stlxr(v174 - 2, v173));
      }
      if ((*a46 & 7) != 0)
      {
        v175 = (unsigned int *)(*a46 & 0xFFFFFFFFFFFFFFF8);
        do
          v176 = __ldxr(v175);
        while (__stlxr(v176 - 2, v175));
      }
      if ((*a47 & 7) != 0)
      {
        v177 = (unsigned int *)(*a47 & 0xFFFFFFFFFFFFFFF8);
        do
          v178 = __ldxr(v177);
        while (__stlxr(v178 - 2, v177));
      }
      if ((*a48 & 7) != 0)
      {
        v179 = (unsigned int *)(*a48 & 0xFFFFFFFFFFFFFFF8);
        do
          v180 = __ldxr(v179);
        while (__stlxr(v180 - 2, v179));
      }
      if ((*a49 & 7) != 0)
      {
        v181 = (unsigned int *)(*a49 & 0xFFFFFFFFFFFFFFF8);
        do
          v182 = __ldxr(v181);
        while (__stlxr(v182 - 2, v181));
      }
      if ((*a50 & 7) != 0)
      {
        v183 = (unsigned int *)(*a50 & 0xFFFFFFFFFFFFFFF8);
        do
          v184 = __ldxr(v183);
        while (__stlxr(v184 - 2, v183));
      }
      if ((*a51 & 7) != 0)
      {
        v185 = (unsigned int *)(*a51 & 0xFFFFFFFFFFFFFFF8);
        do
          v186 = __ldxr(v185);
        while (__stlxr(v186 - 2, v185));
      }
      if ((*a52 & 7) != 0)
      {
        v187 = (unsigned int *)(*a52 & 0xFFFFFFFFFFFFFFF8);
        do
          v188 = __ldxr(v187);
        while (__stlxr(v188 - 2, v187));
      }
      if ((*a53 & 7) != 0)
      {
        v189 = (unsigned int *)(*a53 & 0xFFFFFFFFFFFFFFF8);
        do
          v190 = __ldxr(v189);
        while (__stlxr(v190 - 2, v189));
      }
      if ((*a54 & 7) != 0)
      {
        v191 = (unsigned int *)(*a54 & 0xFFFFFFFFFFFFFFF8);
        do
          v192 = __ldxr(v191);
        while (__stlxr(v192 - 2, v191));
      }
      if ((*a55 & 7) != 0)
      {
        v193 = (unsigned int *)(*a55 & 0xFFFFFFFFFFFFFFF8);
        do
          v194 = __ldxr(v193);
        while (__stlxr(v194 - 2, v193));
      }
      if ((*a56 & 7) != 0)
      {
        v195 = (unsigned int *)(*a56 & 0xFFFFFFFFFFFFFFF8);
        do
          v196 = __ldxr(v195);
        while (__stlxr(v196 - 2, v195));
      }
      if ((*a57 & 7) != 0)
      {
        v197 = (unsigned int *)(*a57 & 0xFFFFFFFFFFFFFFF8);
        do
          v198 = __ldxr(v197);
        while (__stlxr(v198 - 2, v197));
      }
      if ((*a58 & 7) != 0)
      {
        v199 = (unsigned int *)(*a58 & 0xFFFFFFFFFFFFFFF8);
        do
          v200 = __ldxr(v199);
        while (__stlxr(v200 - 2, v199));
      }
      if ((*a59 & 7) != 0)
      {
        v201 = (unsigned int *)(*a59 & 0xFFFFFFFFFFFFFFF8);
        do
          v202 = __ldxr(v201);
        while (__stlxr(v202 - 2, v201));
      }
      if ((*a60 & 7) != 0)
      {
        v203 = (unsigned int *)(*a60 & 0xFFFFFFFFFFFFFFF8);
        do
          v204 = __ldxr(v203);
        while (__stlxr(v204 - 2, v203));
      }
      if ((*a61 & 7) != 0)
      {
        v205 = (unsigned int *)(*a61 & 0xFFFFFFFFFFFFFFF8);
        do
          v206 = __ldxr(v205);
        while (__stlxr(v206 - 2, v205));
      }
      if ((*a62 & 7) != 0)
      {
        v207 = (unsigned int *)(*a62 & 0xFFFFFFFFFFFFFFF8);
        do
          v208 = __ldxr(v207);
        while (__stlxr(v208 - 2, v207));
      }
      if ((*a63 & 7) != 0)
      {
        v209 = (unsigned int *)(*a63 & 0xFFFFFFFFFFFFFFF8);
        do
          v210 = __ldxr(v209);
        while (__stlxr(v210 - 2, v209));
      }
      if ((*a64 & 7) != 0)
      {
        v211 = (unsigned int *)(*a64 & 0xFFFFFFFFFFFFFFF8);
        do
          v212 = __ldxr(v211);
        while (__stlxr(v212 - 2, v211));
      }
      if ((*a65 & 7) != 0)
      {
        v213 = (unsigned int *)(*a65 & 0xFFFFFFFFFFFFFFF8);
        do
          v214 = __ldxr(v213);
        while (__stlxr(v214 - 2, v213));
      }
      if ((*a66 & 7) != 0)
      {
        v215 = (unsigned int *)(*a66 & 0xFFFFFFFFFFFFFFF8);
        do
          v216 = __ldxr(v215);
        while (__stlxr(v216 - 2, v215));
      }
      if ((*a67 & 7) != 0)
      {
        v217 = (unsigned int *)(*a67 & 0xFFFFFFFFFFFFFFF8);
        do
          v218 = __ldxr(v217);
        while (__stlxr(v218 - 2, v217));
      }
      if ((*a68 & 7) != 0)
      {
        v219 = (unsigned int *)(*a68 & 0xFFFFFFFFFFFFFFF8);
        do
          v220 = __ldxr(v219);
        while (__stlxr(v220 - 2, v219));
      }
      if ((*a69 & 7) != 0)
      {
        v221 = (unsigned int *)(*a69 & 0xFFFFFFFFFFFFFFF8);
        do
          v222 = __ldxr(v221);
        while (__stlxr(v222 - 2, v221));
      }
      if ((*a70 & 7) != 0)
      {
        v223 = (unsigned int *)(*a70 & 0xFFFFFFFFFFFFFFF8);
        do
          v224 = __ldxr(v223);
        while (__stlxr(v224 - 2, v223));
      }
      if ((*a71 & 7) != 0)
      {
        v225 = (unsigned int *)(*a71 & 0xFFFFFFFFFFFFFFF8);
        do
          v226 = __ldxr(v225);
        while (__stlxr(v226 - 2, v225));
      }
      if ((*a72 & 7) != 0)
      {
        v227 = (unsigned int *)(*a72 & 0xFFFFFFFFFFFFFFF8);
        do
          v228 = __ldxr(v227);
        while (__stlxr(v228 - 2, v227));
      }
      v229 = *(_QWORD *)STACK[0x200];
      if ((v229 & 7) != 0)
      {
        v230 = (unsigned int *)(v229 & 0xFFFFFFFFFFFFFFF8);
        do
          v231 = __ldxr(v230);
        while (__stlxr(v231 - 2, v230));
      }
      v232 = *(_QWORD *)STACK[0x208];
      if ((v232 & 7) != 0)
      {
        v233 = (unsigned int *)(v232 & 0xFFFFFFFFFFFFFFF8);
        do
          v234 = __ldxr(v233);
        while (__stlxr(v234 - 2, v233));
      }
      v235 = *(_QWORD *)STACK[0x210];
      if ((v235 & 7) != 0)
      {
        v236 = (unsigned int *)(v235 & 0xFFFFFFFFFFFFFFF8);
        do
          v237 = __ldxr(v236);
        while (__stlxr(v237 - 2, v236));
      }
      v238 = *(_QWORD *)STACK[0x218];
      if ((v238 & 7) != 0)
      {
        v239 = (unsigned int *)(v238 & 0xFFFFFFFFFFFFFFF8);
        do
          v240 = __ldxr(v239);
        while (__stlxr(v240 - 2, v239));
      }
      v241 = *(_QWORD *)STACK[0x220];
      if ((v241 & 7) != 0)
      {
        v242 = (unsigned int *)(v241 & 0xFFFFFFFFFFFFFFF8);
        do
          v243 = __ldxr(v242);
        while (__stlxr(v243 - 2, v242));
      }
      v244 = *(_QWORD *)STACK[0x228];
      if ((v244 & 7) != 0)
      {
        v245 = (unsigned int *)(v244 & 0xFFFFFFFFFFFFFFF8);
        do
          v246 = __ldxr(v245);
        while (__stlxr(v246 - 2, v245));
      }
      v247 = *(_QWORD *)STACK[0x230];
      if ((v247 & 7) != 0)
      {
        v248 = (unsigned int *)(v247 & 0xFFFFFFFFFFFFFFF8);
        do
          v249 = __ldxr(v248);
        while (__stlxr(v249 - 2, v248));
      }
      v250 = *(_QWORD *)STACK[0x238];
      if ((v250 & 7) != 0)
      {
        v251 = (unsigned int *)(v250 & 0xFFFFFFFFFFFFFFF8);
        do
          v252 = __ldxr(v251);
        while (__stlxr(v252 - 2, v251));
      }
      v253 = *(_QWORD *)STACK[0x240];
      if ((v253 & 7) != 0)
      {
        v254 = (unsigned int *)(v253 & 0xFFFFFFFFFFFFFFF8);
        do
          v255 = __ldxr(v254);
        while (__stlxr(v255 - 2, v254));
      }
      v256 = *(_QWORD *)STACK[0x248];
      if ((v256 & 7) != 0)
      {
        v257 = (unsigned int *)(v256 & 0xFFFFFFFFFFFFFFF8);
        do
          v258 = __ldxr(v257);
        while (__stlxr(v258 - 2, v257));
      }
      v259 = *(_QWORD *)STACK[0x250];
      if ((v259 & 7) != 0)
      {
        v260 = (unsigned int *)(v259 & 0xFFFFFFFFFFFFFFF8);
        do
          v261 = __ldxr(v260);
        while (__stlxr(v261 - 2, v260));
      }
      v262 = *(_QWORD *)STACK[0x258];
      if ((v262 & 7) != 0)
      {
        v263 = (unsigned int *)(v262 & 0xFFFFFFFFFFFFFFF8);
        do
          v264 = __ldxr(v263);
        while (__stlxr(v264 - 2, v263));
      }
      v265 = *(_QWORD *)STACK[0x260];
      if ((v265 & 7) != 0)
      {
        v266 = (unsigned int *)(v265 & 0xFFFFFFFFFFFFFFF8);
        do
          v267 = __ldxr(v266);
        while (__stlxr(v267 - 2, v266));
      }
      v268 = *(_QWORD *)STACK[0x268];
      if ((v268 & 7) != 0)
      {
        v269 = (unsigned int *)(v268 & 0xFFFFFFFFFFFFFFF8);
        do
          v270 = __ldxr(v269);
        while (__stlxr(v270 - 2, v269));
      }
      v271 = *(_QWORD *)STACK[0x270];
      if ((v271 & 7) != 0)
      {
        v272 = (unsigned int *)(v271 & 0xFFFFFFFFFFFFFFF8);
        do
          v273 = __ldxr(v272);
        while (__stlxr(v273 - 2, v272));
      }
      v274 = *(_QWORD *)STACK[0x278];
      if ((v274 & 7) != 0)
      {
        v275 = (unsigned int *)(v274 & 0xFFFFFFFFFFFFFFF8);
        do
          v276 = __ldxr(v275);
        while (__stlxr(v276 - 2, v275));
      }
      if ((*v72 & 7) != 0)
      {
        v277 = (unsigned int *)(*v72 & 0xFFFFFFFFFFFFFFF8);
        do
          v278 = __ldxr(v277);
        while (__stlxr(v278 - 2, v277));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C7279F4()
{
  JUMPOUT(0x20C726ED4);
}

void sub_20C7279FC()
{
  JUMPOUT(0x20C726EF8);
}

void sub_20C727A04()
{
  JUMPOUT(0x20C726F1CLL);
}

void sub_20C727A0C()
{
  JUMPOUT(0x20C726F40);
}

void sub_20C727A14()
{
  JUMPOUT(0x20C726F64);
}

void sub_20C727A1C()
{
  JUMPOUT(0x20C726F88);
}

void sub_20C727A24()
{
  JUMPOUT(0x20C726FACLL);
}

void sub_20C727A2C()
{
  JUMPOUT(0x20C726FD0);
}

void sub_20C727A34()
{
  JUMPOUT(0x20C726FF4);
}

void sub_20C727A3C()
{
  JUMPOUT(0x20C727018);
}

void sub_20C727A44()
{
  JUMPOUT(0x20C72703CLL);
}

void sub_20C727A4C()
{
  JUMPOUT(0x20C727060);
}

void sub_20C727A54()
{
  JUMPOUT(0x20C727084);
}

void sub_20C727A5C()
{
  JUMPOUT(0x20C7270A8);
}

void sub_20C727A64()
{
  JUMPOUT(0x20C7270CCLL);
}

void sub_20C727A6C()
{
  JUMPOUT(0x20C7270F0);
}

void sub_20C727A74()
{
  JUMPOUT(0x20C727114);
}

void sub_20C727A7C()
{
  JUMPOUT(0x20C727138);
}

void sub_20C727A84()
{
  JUMPOUT(0x20C72715CLL);
}

void sub_20C727A8C()
{
  JUMPOUT(0x20C727180);
}

void sub_20C727A94()
{
  JUMPOUT(0x20C7271A4);
}

void sub_20C727A9C()
{
  JUMPOUT(0x20C7271C8);
}

void sub_20C727AA4()
{
  JUMPOUT(0x20C7271ECLL);
}

void sub_20C727AAC()
{
  JUMPOUT(0x20C727210);
}

void sub_20C727AB4()
{
  JUMPOUT(0x20C727234);
}

void sub_20C727ABC()
{
  JUMPOUT(0x20C727258);
}

void sub_20C727AC4()
{
  JUMPOUT(0x20C72727CLL);
}

void sub_20C727ACC()
{
  JUMPOUT(0x20C7272A0);
}

void sub_20C727AD4()
{
  JUMPOUT(0x20C7272C4);
}

void sub_20C727ADC()
{
  JUMPOUT(0x20C7272E8);
}

void sub_20C727AE4()
{
  JUMPOUT(0x20C72730CLL);
}

void sub_20C727AEC()
{
  JUMPOUT(0x20C727330);
}

void sub_20C727AF4()
{
  JUMPOUT(0x20C727354);
}

void sub_20C727AFC()
{
  JUMPOUT(0x20C727378);
}

void sub_20C727B04()
{
  JUMPOUT(0x20C72739CLL);
}

void sub_20C727B0C()
{
  JUMPOUT(0x20C7273C0);
}

void sub_20C727B14()
{
  JUMPOUT(0x20C7273E4);
}

void sub_20C727B1C()
{
  JUMPOUT(0x20C727408);
}

void sub_20C727B24()
{
  JUMPOUT(0x20C72742CLL);
}

void sub_20C727B2C()
{
  JUMPOUT(0x20C727450);
}

void sub_20C727B34()
{
  JUMPOUT(0x20C727474);
}

void sub_20C727B3C()
{
  JUMPOUT(0x20C727498);
}

void sub_20C727B44()
{
  JUMPOUT(0x20C7274BCLL);
}

void sub_20C727B4C()
{
  JUMPOUT(0x20C7274E0);
}

void sub_20C727B54()
{
  JUMPOUT(0x20C727504);
}

void sub_20C727B5C()
{
  JUMPOUT(0x20C727528);
}

void sub_20C727B64()
{
  JUMPOUT(0x20C72754CLL);
}

void sub_20C727B6C()
{
  JUMPOUT(0x20C727570);
}

void sub_20C727B74()
{
  JUMPOUT(0x20C727594);
}

void sub_20C727B7C()
{
  JUMPOUT(0x20C7275B8);
}

void sub_20C727B84()
{
  JUMPOUT(0x20C7275DCLL);
}

void sub_20C727B8C()
{
  JUMPOUT(0x20C727600);
}

void sub_20C727B94()
{
  JUMPOUT(0x20C727624);
}

void sub_20C727B9C()
{
  JUMPOUT(0x20C727648);
}

void sub_20C727BA4()
{
  JUMPOUT(0x20C72766CLL);
}

void sub_20C727BAC()
{
  JUMPOUT(0x20C727690);
}

void sub_20C727BB4()
{
  JUMPOUT(0x20C7276B4);
}

void sub_20C727BBC()
{
  JUMPOUT(0x20C7276D8);
}

void sub_20C727BC4()
{
  JUMPOUT(0x20C7276FCLL);
}

void sub_20C727BCC()
{
  JUMPOUT(0x20C727720);
}

void sub_20C727BD4()
{
  JUMPOUT(0x20C727744);
}

void sub_20C727BDC()
{
  JUMPOUT(0x20C727768);
}

void sub_20C727BE4()
{
  JUMPOUT(0x20C72778CLL);
}

void sub_20C727BEC()
{
  JUMPOUT(0x20C7277B0);
}

void sub_20C727BF4()
{
  JUMPOUT(0x20C7277D4);
}

void sub_20C727BFC()
{
  JUMPOUT(0x20C7277F8);
}

void sub_20C727C04()
{
  JUMPOUT(0x20C72781CLL);
}

void sub_20C727C0C()
{
  JUMPOUT(0x20C727840);
}

void sub_20C727C14()
{
  JUMPOUT(0x20C727864);
}

void sub_20C727C1C()
{
  JUMPOUT(0x20C727888);
}

void sub_20C727C24()
{
  JUMPOUT(0x20C7278ACLL);
}

void sub_20C727C2C()
{
  JUMPOUT(0x20C7278D0);
}

void sub_20C727C34()
{
  JUMPOUT(0x20C7278F4);
}

void sub_20C727C3C()
{
  JUMPOUT(0x20C727918);
}

void sub_20C727C44()
{
  JUMPOUT(0x20C72793CLL);
}

void sub_20C727C4C()
{
  JUMPOUT(0x20C727960);
}

void sub_20C727C54()
{
  JUMPOUT(0x20C727984);
}

void sub_20C727C5C()
{
  JUMPOUT(0x20C7279A8);
}

void sub_20C727C64()
{
  JUMPOUT(0x20C7279CCLL);
}

void sub_20C727C70()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_EXPAND_INSTANCES))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_EXPAND_INSTANCES);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_EXPAND_INSTANCES);
  }
}

void sub_20C727CB4()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_DISABLE_INSTANCING))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_DISABLE_INSTANCING);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_DISABLE_INSTANCING);
  }
}

void sub_20C727CF8()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_PARENT_INSTANCES))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_PARENT_INSTANCES);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_PARENT_INSTANCES);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::UsdAbc_AlembicData(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_24C5429F8;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 40) = *a2;
  v2 = a2 + 1;
  v3 = a2[1];
  *(_QWORD *)(result + 48) = v3;
  v4 = result + 48;
  v5 = a2[2];
  *(_QWORD *)(result + 56) = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *a2 = v2;
    *v2 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)(result + 40) = v4;
  }
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_24C5429F8;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 40) = *a2;
  v2 = a2 + 1;
  v3 = a2[1];
  *(_QWORD *)(result + 48) = v3;
  v4 = result + 48;
  v5 = a2[2];
  *(_QWORD *)(result + 56) = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *a2 = v2;
    *v2 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)(result + 40) = v4;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::~UsdAbc_AlembicData(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this)
{
  const void *v2;

  *(_QWORD *)this = off_24C5429F8;
  sub_20BDE9D48((uint64_t)this + 40, *((_QWORD **)this + 6));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *)((char *)this + 24));
  pxrInternal__aapl__pxrReserved__::SdfAbstractData::~SdfAbstractData((unsigned int **)this, v2);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::~UsdAbc_AlembicData(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::New(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v4 = operator new(0x40uLL);
  v5 = (_QWORD *)*a1;
  v7 = a1 + 1;
  v6 = (_QWORD *)a1[1];
  v10 = (_QWORD *)*a1;
  v11 = v6;
  v8 = a1[2];
  v12 = v8;
  if (v8)
  {
    v6[2] = &v11;
    *a1 = v7;
    *v7 = 0;
    a1[2] = 0;
  }
  else
  {
    v10 = &v11;
    v5 = &v11;
  }
  v4[2] = 1;
  *(_QWORD *)v4 = off_24C5429F8;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 5) = v5;
  *((_QWORD *)v4 + 6) = v6;
  v9 = (char *)(v4 + 12);
  *((_QWORD *)v4 + 7) = v8;
  if (v8)
  {
    v6[2] = v9;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
    v6 = 0;
  }
  else
  {
    *((_QWORD *)v4 + 5) = v9;
  }
  *a2 = v4;
  sub_20BDE9D48((uint64_t)&v10, v6);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Open(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *v4;
  char **v5;
  _BYTE *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *v8;
  _BYTE *v9;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *v10;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *v11;
  _BYTE *v12;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *v13;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *v14;
  _BOOL8 v15;
  int v16;
  const char *v17;
  const char *v18;
  void **v19;
  void *__p[2];
  char v23;
  _QWORD v24[4];
  char v25;
  uint64_t v26;
  int v27;

  sub_20BEB59B0((uint64_t)&v26, (uint64_t)"UsdAbc_AlembicData", (uint64_t)"UsdAbc_AlembicData::Open");
  v4 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::UsdAbc_AlembicDataReader(v4);
  v5 = (char **)(a1 + 24);
  sub_20C728188((_QWORD *)(a1 + 24), (uint64_t)v4);
  v6 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_EXPAND_INSTANCES);
  if (!v6)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_EXPAND_INSTANCES);
    v6 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_EXPAND_INSTANCES);
  }
  if (*v6)
  {
    v7 = *v5;
    v8 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
    if (!v8)
      v8 = sub_20C728BBC(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
    pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::SetFlag((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)v7, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)((char *)v8 + 8), 1);
  }
  v9 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_DISABLE_INSTANCING);
  if (!v9)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_DISABLE_INSTANCING);
    v9 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_DISABLE_INSTANCING);
  }
  if (*v9)
  {
    v10 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*v5;
    v11 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
    if (!v11)
      v11 = sub_20C728BBC(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
    pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::SetFlag(v10, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)((char *)v11 + 16), 1);
  }
  v12 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_PARENT_INSTANCES);
  if (!v12)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_PARENT_INSTANCES);
    v12 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_PARENT_INSTANCES);
  }
  if (*v12)
  {
    v13 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*v5;
    v14 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
    if (!v14)
      v14 = sub_20C728BBC(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
    pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::SetFlag(v13, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)((char *)v14 + 24), 1);
  }
  v15 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::Open(*(_QWORD *)(a1 + 24), (__int128 *)a2, a1 + 40);
  if (!v15)
  {
    v24[0] = "usdAbc/alembicData.cpp";
    v24[1] = "Open";
    v24[2] = 157;
    v24[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Open(const std::string &)";
    v25 = 0;
    v16 = *(char *)(a2 + 23);
    v17 = *(const char **)a2;
    pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::GetErrors(*v5, (uint64_t)__p);
    if (v16 >= 0)
      v18 = (const char *)a2;
    else
      v18 = v17;
    if (v23 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to open Alembic archive \"%s\": %s", v18, (const char *)v19);
    if (v23 < 0)
      operator delete(__p[0]);
    sub_20BDEBF08(v5);
  }
  while (v27--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v26);
  return v15;
}

void sub_20C728148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  sub_20BEB24F4(v16 - 64);
  _Unwind_Resume(a1);
}

void sub_20C728188(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20C728ADC(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

