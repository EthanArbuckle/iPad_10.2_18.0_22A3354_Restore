unsigned int *sub_20BFB3404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16) + 24;
  *(_QWORD *)(a2 + 8) = &off_24C520700;
  return sub_20BF77444((unsigned int **)a2, v2);
}

uint64_t sub_20BFB3420(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  const std::string *v8;
  int v9;
  void **v10;
  void **v11;
  void **v12;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[4];
  char v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BFB4580(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v20, v4);
  if (v20[1])
  {
    v8 = (const std::string *)sub_20BFB2D9C(v5);
    std::string::operator=((std::string *)(a1[2] + 24), v8);
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
  }
  else
  {
    v18[0] = "ts/data.h";
    v18[1] = "SetValue";
    v18[2] = 667;
    v18[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetValue(VtValue) [T = std::string]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v16);
    v9 = v17;
    v10 = (void **)v16[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v11 = v16;
    if (v9 < 0)
      v11 = v10;
    if (v15 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v11, (const char *)v12);
    if (v15 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(v16[0]);
  }
  return sub_20BF4C2D8((uint64_t)v20);
}

void sub_20BFB3590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

unsigned int *sub_20BFB35E0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<std::string>::zero();
  *(_QWORD *)(a1 + 8) = &off_24C520700;
  return sub_20BF77444((unsigned int **)a1, (uint64_t)v2);
}

void sub_20BFB3614(uint64_t a1, int a2)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  if (a2)
  {
    v5[0] = "ts/data.h";
    v5[1] = "SetIsDualValued";
    v5[2] = 684;
    v5[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetIsDualValued(BOOL) [T = std::string]";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v4 >= 0)
      v2 = __p;
    else
      v2 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' cannot be dual-valued", (const char *)v2);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_BYTE *)(a1 + 68) = 0;
  }
}

void sub_20BFB36C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned int *sub_20BFB36DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 68))
    v2 = *(_QWORD *)(a1 + 16);
  else
    v2 = *(_QWORD *)(a1 + 16) + 24;
  *(_QWORD *)(a2 + 8) = &off_24C520700;
  return sub_20BF77444((unsigned int **)a2, v2);
}

void sub_20BFB3704()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftValue";
  v3[2] = 721;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetLeftValue(VtValue) [T = std::string]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' cannot be dual-valued", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB37A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned int *sub_20BFB37C0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<std::string>::zero();
  *(_QWORD *)(a1 + 8) = &off_24C520700;
  return sub_20BF77444((unsigned int **)a1, (uint64_t)v2);
}

_QWORD *sub_20BFB37F4@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20BF4C6D0(a2, a1);
}

void sub_20BFB37FC(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  v5[2] = 784;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::GetLeftTangentSlope() const [T = std::string]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFB38A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB38C0(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  v5[2] = 797;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::GetRightTangentSlope() const [T = std::string]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFB3968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFB3984()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::GetLeftTangentLength() const [T = std::string]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFB3A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFB3A44()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::GetRightTangentLength() const [T = std::string]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFB3AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB3B04()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetLeftTangentSlope(VtValue) [T = std::string]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB3BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB3BC0()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetRightTangentSlope(VtValue) [T = std::string]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB3C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB3C7C()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetLeftTangentLength(TsTime) [T = std::string]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB3D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB3D38()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetRightTangentLength(TsTime) [T = std::string]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB3DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFB3DF4()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::GetTangentSymmetryBroken() const [T = std::string]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20BFB3E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB3EB4()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetTangentSymmetryBroken(BOOL) [T = std::string]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB3F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20BFB3F70(char *__dst, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE *v12;
  __int128 v13;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(__dst + 24, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v10;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_20BDDBFAC(__dst + 48, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    *((_QWORD *)__dst + 8) = *((_QWORD *)a4 + 2);
    *((_OWORD *)__dst + 3) = v11;
  }
  v12 = __dst + 72;
  if (*((char *)a5 + 23) < 0)
  {
    sub_20BDDBFAC(v12, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v13 = *a5;
    *((_QWORD *)__dst + 11) = *((_QWORD *)a5 + 2);
    *(_OWORD *)v12 = v13;
  }
  return __dst;
}

void sub_20BFB4058(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20BFB40A4(int a1, void **__p)
{
  if (__p)
  {
    if (*((char *)__p + 95) < 0)
      operator delete(__p[9]);
    if (*((char *)__p + 71) < 0)
      operator delete(__p[6]);
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
    if (*((char *)__p + 23) < 0)
      operator delete(*__p);
    operator delete(__p);
  }
}

char **sub_20BFB410C(char **a1, __int128 **a2)
{
  char *v4;

  v4 = (char *)operator new(0x60uLL);
  sub_20BFB4164(v4, *a2);
  *a1 = v4;
  return a1;
}

void sub_20BFB4150(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20BFB4164(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_20BDDBFAC(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  v7 = __dst + 72;
  if (*((char *)a2 + 95) < 0)
  {
    sub_20BDDBFAC(v7, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)v7 = v8;
  }
  return __dst;
}

void sub_20BFB4244(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFB4290@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x38uLL);
  result = sub_20BFB42F0(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BFB42DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFB42F0(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C522F20;
  a1[1] = 0;
  sub_20BFB4394((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_20BFB4330(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFB4344(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C522F20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFB4358(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C522F20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BFB437C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

uint64_t sub_20BFB4394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[4];
  char v6;

  *(_QWORD *)a1 = &unk_24C522F70;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (a2 && a3)
  {
    std::string::operator=((std::string *)(a1 + 8), (const std::string *)(*(_QWORD *)(a2 + 16) + 24));
  }
  else
  {
    v5[0] = "ts/evalCache.h";
    v5[1] = "Ts_EvalCache";
    v5[2] = 417;
    v5[3] = "pxrInternal__aapl__pxrReserved__::Ts_EvalCache<std::string, false>::Ts_EvalCache(const Ts_TypedData<T> *, co"
            "nst Ts_TypedData<T> *) [T = std::string, INTERPOLATABLE = false]";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void sub_20BFB4438(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_20BFB4458(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  uint64_t v4;

  if (*(char *)(a1 + 31) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a2 + 8) = &off_24C520700;
  sub_20BF77444((unsigned int **)a2, (uint64_t)__p);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void sub_20BFB44D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB44EC(uint64_t a1@<X8>)
{
  void **v2;
  __int128 v3;
  void *__p[2];
  void *v5;

  v2 = (void **)pxrInternal__aapl__pxrReserved__::TsTraits<std::string>::zero();
  if (*((char *)v2 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *v2, (unint64_t)v2[1]);
  }
  else
  {
    v3 = *(_OWORD *)v2;
    v5 = v2[2];
    *(_OWORD *)__p = v3;
  }
  *(_QWORD *)(a1 + 8) = &off_24C520700;
  sub_20BF77444((unsigned int **)a1, (uint64_t)__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_20BFB4564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::type_info *sub_20BFB4580(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFB4608(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C516910, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20BFB4608(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 12)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C516910);
  else
    return 0;
}

_QWORD *sub_20BFB4640@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = operator new(0x18uLL);
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  *a1 = result;
  a1[1] = sub_20BFB4684;
  a1[2] = &stru_24C516910;
  return result;
}

void sub_20BFB4684(void **__p)
{
  if (__p)
  {
    if (*((char *)__p + 23) < 0)
      operator delete(*__p);
    operator delete(__p);
  }
}

uint64_t sub_20BFB46BC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)sub_20BFB46E8(a2);
  return sub_20BFB4750(a1, v3);
}

uint64_t sub_20BFB46E8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_20BFB5E50(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BFB5E88, (uint64_t)&stru_24C51BCE0);
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t sub_20BFB4750(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 v6;
  _OWORD v8[2];

  *(_QWORD *)a1 = &unk_24C522FA8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::TfToken>::zero();
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::TfToken>::zero();
  sub_20BFB58AC((uint64_t *)v8, a2, a2, v4, v5);
  v6 = v8[1];
  *(_OWORD *)(a1 + 16) = v8[0];
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 62) = 0;
  return a1;
}

_QWORD *sub_20BFB47C8(_QWORD *a1)
{
  *a1 = &unk_24C522FA8;
  sub_20BFB5980(a1 + 2);
  return a1;
}

void sub_20BFB47FC(_QWORD *a1)
{
  *a1 = &unk_24C522FA8;
  sub_20BFB5980(a1 + 2);
  operator delete(a1);
}

__n128 sub_20BFB4830(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C522FA8;
  sub_20BFB5A04((uint64_t *)(a2 + 16), (uint64_t *)(a1 + 16));
  result = *(__n128 *)(a1 + 48);
  *(_QWORD *)(a2 + 62) = *(_QWORD *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_20BFB4884@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BFB5AD8(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

_QWORD *sub_20BFB48CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  _QWORD *result;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;

  result = sub_20BFB5BEC(&v13, a1, a2);
  v5 = v14;
  if ((v14 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v5 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    *a3 = v5;
    a3[1] = (unsigned int *)((char *)&off_24C5207B8 + 1);
    if ((v5 & 7) != 0)
    {
      v8 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        *a3 = v8;
      do
        v10 = __ldxr(v8);
      while (__stlxr(v10 - 2, v8));
    }
  }
  else
  {
    *a3 = v14;
    a3[1] = (unsigned int *)((char *)&off_24C5207B8 + 1);
  }
  if ((v14 & 7) != 0)
  {
    v11 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  return result;
}

_QWORD *sub_20BFB49A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  _QWORD *result;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  sub_20BFB5BEC(&v13, a1, a2);
  result = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::TfToken>::zero();
  v5 = (unsigned int *)*result;
  if ((*result & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v5 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    *a3 = v5;
    a3[1] = (unsigned int *)((char *)&off_24C5207B8 + 1);
    if ((v5 & 7) != 0)
    {
      v8 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        *a3 = v8;
      do
        v10 = __ldxr(v8);
      while (__stlxr(v10 - 2, v8));
    }
  }
  else
  {
    *a3 = v5;
    a3[1] = (unsigned int *)((char *)&off_24C5207B8 + 1);
  }
  if ((v14 & 7) != 0)
  {
    v11 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  return result;
}

void sub_20BFB4A9C(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BFB4B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFB4B50(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  int v6;
  void **v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C521148, 2, (uint64_t)v15);
      v6 = v16;
      v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0)
        v10 = v15;
      else
        v10 = v7;
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    return 0;
  }
  return 1;
}

void sub_20BFB4C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFB4CB4@<X0>(uint64_t result@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(unsigned int **)(result + 24);
  *a2 = v2;
  a2[1] = (unsigned int *)((char *)&off_24C5207B8 + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *a2 = v3;
  }
  return result;
}

uint64_t sub_20BFB4CF0(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  _QWORD *v8;
  int v9;
  void **v10;
  void **v11;
  void **v12;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[4];
  char v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BFB5DC8(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v20, v4);
  if (v20[1])
  {
    v8 = (_QWORD *)sub_20BFB46E8(v5);
    sub_20BF32220(a1 + 3, v8);
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
  }
  else
  {
    v18[0] = "ts/data.h";
    v18[1] = "SetValue";
    v18[2] = 667;
    v18[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v16);
    v9 = v17;
    v10 = (void **)v16[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v11 = v16;
    if (v9 < 0)
      v11 = v10;
    if (v15 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v11, (const char *)v12);
    if (v15 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(v16[0]);
  }
  return sub_20BF4C2D8((uint64_t)v20);
}

void sub_20BFB4E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

unsigned int **sub_20BFB4EAC@<X0>(unsigned int **a1@<X8>)
{
  unsigned int **result;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;

  result = (unsigned int **)pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::TfToken>::zero();
  v3 = *result;
  *a1 = *result;
  a1[1] = (unsigned int *)((char *)&off_24C5207B8 + 1);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 = v4;
  }
  return result;
}

void sub_20BFB4F04(uint64_t a1, int a2)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  if (a2)
  {
    v5[0] = "ts/data.h";
    v5[1] = "SetIsDualValued";
    v5[2] = 684;
    v5[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::SetI"
            "sDualValued(BOOL) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v4 >= 0)
      v2 = __p;
    else
      v2 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' cannot be dual-valued", (const char *)v2);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_BYTE *)(a1 + 68) = 0;
  }
}

void sub_20BFB4FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFB4FCC@<X0>(uint64_t result@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;

  v2 = 16;
  if (!*(_BYTE *)(result + 68))
    v2 = 24;
  v3 = *(unsigned int **)(result + v2);
  *a2 = v3;
  a2[1] = (unsigned int *)((char *)&off_24C5207B8 + 1);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a2 = v4;
  }
  return result;
}

void sub_20BFB501C()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftValue";
  v3[2] = 721;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' cannot be dual-valued", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB50BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned int **sub_20BFB50D8@<X0>(unsigned int **a1@<X8>)
{
  unsigned int **result;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;

  result = (unsigned int **)pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::TfToken>::zero();
  v3 = *result;
  *a1 = *result;
  a1[1] = (unsigned int *)((char *)&off_24C5207B8 + 1);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 = v4;
  }
  return result;
}

_QWORD *sub_20BFB5130@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20BF4C6D0(a2, a1);
}

void sub_20BFB5138(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  v5[2] = 784;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFB51E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB51FC(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  v5[2] = 797;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFB52A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFB52C0()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFB5364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFB5380()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFB5424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB5440()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB54E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB54FC()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB559C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB55B8()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB5658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB5674()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB5714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFB5730()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20BFB57D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB57F0()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB5890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BFB58AC(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;

  v5 = *a2;
  *result = *a2;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *result &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *a3;
  result[1] = *a3;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      result[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *a4;
  result[2] = *a4;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *a5;
  result[3] = *a5;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      result[3] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

_QWORD *sub_20BFB5980(_QWORD *result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;

  v1 = result[3];
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  v4 = result[2];
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  v7 = result[1];
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  if ((*result & 7) != 0)
  {
    v10 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  return result;
}

uint64_t *sub_20BFB5A04(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  v2 = *a2;
  *result = *a2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *result &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = a2[1];
  result[1] = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      result[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = a2[2];
  result[2] = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = a2[3];
  result[3] = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      result[3] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

_QWORD *sub_20BFB5AD8@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x28uLL);
  result = sub_20BFB5B38(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BFB5B24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFB5B38(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C5230F0;
  a1[1] = 0;
  sub_20BFB5BEC(a1 + 3, *a2, *a3);
  return a1;
}

void sub_20BFB5B78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFB5B8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C5230F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFB5BA0(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C5230F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFB5BC4(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(result + 32);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  return result;
}

_QWORD *sub_20BFB5BEC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[4];
  char v6;

  *a1 = &unk_24C523140;
  a1[1] = 0;
  if (a2 && a3)
  {
    sub_20BF32220(a1 + 1, (_QWORD *)(a2 + 24));
  }
  else
  {
    v5[0] = "ts/evalCache.h";
    v5[1] = "Ts_EvalCache";
    v5[2] = 417;
    v5[3] = "pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::TfToken, false>::Ts_EvalCac"
            "he(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::TfToken, INTERPO"
            "LATABLE = false]";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

uint64_t sub_20BFB5CA4@<X0>(uint64_t result@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *(unsigned int **)(result + 8);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v2 = (unsigned int *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    *a2 = v2;
    a2[1] = (unsigned int *)((char *)&off_24C5207B8 + 1);
    if ((v2 & 7) != 0)
    {
      v5 = (unsigned int *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 2, v5));
      if ((v6 & 1) == 0)
        *a2 = v5;
      do
        v7 = __ldxr(v5);
      while (__stlxr(v7 - 2, v5));
    }
  }
  else
  {
    *a2 = v2;
    a2[1] = (unsigned int *)((char *)&off_24C5207B8 + 1);
  }
  return result;
}

_QWORD *sub_20BFB5D28@<X0>(unsigned int **a1@<X8>)
{
  _QWORD *result;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  result = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::TfToken>::zero();
  v3 = (unsigned int *)*result;
  if ((*result & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v3 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    *a1 = v3;
    a1[1] = (unsigned int *)((char *)&off_24C5207B8 + 1);
    if ((v3 & 7) != 0)
    {
      v6 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        *a1 = v6;
      do
        v8 = __ldxr(v6);
      while (__stlxr(v8 - 2, v6));
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = (unsigned int *)((char *)&off_24C5207B8 + 1);
  }
  return result;
}

std::type_info *sub_20BFB5DC8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFB5E50(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51BCE0, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20BFB5E50(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 13)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51BCE0);
  else
    return 0;
}

_QWORD *sub_20BFB5E88@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = operator new(8uLL);
  *result = 0;
  *a1 = result;
  a1[1] = sub_20BFB5EC8;
  a1[2] = &stru_24C51BCE0;
  return result;
}

void sub_20BFB5EC8(void *__p)
{
  unsigned int *v1;
  unsigned int v2;

  if (__p)
  {
    if ((*(_QWORD *)__p & 7) != 0)
    {
      v1 = (unsigned int *)(*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8);
      do
        v2 = __ldxr(v1);
      while (__stlxr(v2 - 2, v1));
    }
    operator delete(__p);
  }
}

void sub_20BFB5EF4()
{
  uint64_t v0;
  void *__p[2];
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "AR_RESOLVER_INIT");
  __p[0] = 0;
  __p[1] = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C523168, 0, (uint64_t)v3, (uint64_t)__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p[0]);
  if (v4 < 0)
    operator delete(v3[0]);
  v0 = sub_20BFB5FA8();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "AR_RESOLVER_INIT", "Print debug output during asset resolver initialization");
}

void sub_20BFB5F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFB5FA8()
{
  unsigned __int8 v0;
  _DWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25473B3A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473B3A8))
  {
    v2 = operator new(4uLL);
    *v2 = 0;
    qword_25473B3A0 = (uint64_t)v2;
    __cxa_guard_release(&qword_25473B3A8);
  }
  return qword_25473B3A0;
}

void sub_20BFB6008(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473B3A8);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArAsset::ArAsset(_QWORD *this)
{
  *this = off_24C523188;
  return this;
}

double pxrInternal__aapl__pxrReserved__::ArAsset::GetDetachedAsset@<D0>(pxrInternal__aapl__pxrReserved__::ArAsset *this@<X0>, const pxrInternal__aapl__pxrReserved__::ArAsset *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::FromAsset(this, a2, &v5);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const void **v20;
  unsigned __int8 *v21;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v9 = a1[47];
  if ((v9 & 0x80u) == 0)
    v10 = a1[47];
  else
    v10 = *((_QWORD *)a1 + 4);
  v11 = v6[47];
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)v6 + 4);
  if (v10 != v11)
    return 0;
  v13 = (const void **)(a1 + 24);
  if (v12 >= 0)
    v14 = v6 + 24;
  else
    v14 = (unsigned __int8 *)*((_QWORD *)v6 + 3);
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*v13, v14, *((_QWORD *)a1 + 4)))
      return 0;
  }
  else if (a1[47])
  {
    while (*(unsigned __int8 *)v13 == *v14)
    {
      v13 = (const void **)((char *)v13 + 1);
      ++v14;
      if (!--v9)
        goto LABEL_31;
    }
    return 0;
  }
LABEL_31:
  v15 = a1[71];
  v16 = (char *)*((_QWORD *)a1 + 7);
  if ((v15 & 0x80u) == 0)
    v17 = a1[71];
  else
    v17 = *((_QWORD *)a1 + 7);
  v18 = v6[71];
  v19 = (char)v18;
  if ((v18 & 0x80u) != 0)
    v18 = *((_QWORD *)v6 + 7);
  if (v17 != v18)
    return 0;
  v20 = (const void **)(a1 + 48);
  if (v19 >= 0)
    v21 = v6 + 48;
  else
    v21 = (unsigned __int8 *)*((_QWORD *)v6 + 6);
  if ((v15 & 0x80) != 0)
  {
    if (!memcmp(*v20, v21, (size_t)v16))
      return pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 72), (std::type_info *)(v6 + 72), v16);
    return 0;
  }
  if (a1[71])
  {
    while (*(unsigned __int8 *)v20 == *v21)
    {
      v20 = (const void **)((char *)v20 + 1);
      ++v21;
      if (!--v15)
        return pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 72), (std::type_info *)(v6 + 72), v16);
    }
    return 0;
  }
  return pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 72), (std::type_info *)(v6 + 72), v16);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  if (sub_20BF772F0(a1 + 24, v6 + 24)
    && pxrInternal__aapl__pxrReserved__::ArResolverContext::operator==((uint64_t *)a1 + 6, (uint64_t *)v6 + 6))
  {
    return pxrInternal__aapl__pxrReserved__::operator==(a1 + 72, v6 + 72);
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator==(a1, a2) ^ 1;
}

uint64_t sub_20BFB6230()
{
  uint64_t *v0;

  v0 = sub_20BFB714C();
  return sub_20BFB726C(v0);
}

pxrInternal__aapl__pxrReserved__::ArDefaultResolver *pxrInternal__aapl__pxrReserved__::ArDefaultResolver::ArDefaultResolver(pxrInternal__aapl__pxrReserved__::ArDefaultResolver *this)
{
  _QWORD *v2;
  uint64_t *v3;
  __int128 **v4;
  unint64_t v5;
  void *__p[2];
  char v8;
  void *v9[2];
  uint64_t v10;
  void *v11[2];
  unsigned __int8 v12;
  uint64_t v13;
  std::string *v14;
  uint64_t v15;

  v2 = pxrInternal__aapl__pxrReserved__::ArResolver::ArResolver(this);
  *(_OWORD *)(v2 + 1) = 0u;
  v3 = v2 + 1;
  *v2 = off_24C5231E0;
  *(_OWORD *)(v2 + 3) = 0u;
  *(_OWORD *)(v2 + 5) = 0u;
  v4 = (__int128 **)atomic_load(&qword_254985710);
  if (!v4)
    v4 = (__int128 **)sub_20BFB747C(&qword_254985710);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  sub_20BE78B98((char *)&v13, *v4, v4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v4[1] - (char *)*v4) >> 3));
  sub_20BDDC0E4(v9, "PXR_AR_DEFAULT_SEARCH_PATH");
  sub_20BDDC0E4(__p, "");
  pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)v9, (uint64_t)__p, (uint64_t)v11);
  if (v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  v5 = v12;
  if ((v12 & 0x80u) != 0)
    v5 = (unint64_t)v11[1];
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)v11, ":", v9);
    sub_20BFB74E8(&v13, v14, (std::string *)v9[0], (__int128 *)v9[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v9[1] - (char *)v9[0]) >> 3));
    __p[0] = v9;
    sub_20BDE5038((void ***)__p);
  }
  pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::ArDefaultResolverContext(v9, &v13);
  sub_20BE7598C(v3);
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)v9;
  *((_QWORD *)this + 3) = v10;
  v9[1] = 0;
  v10 = 0;
  v9[0] = 0;
  __p[0] = v9;
  sub_20BDE5038((void ***)__p);
  if ((char)v12 < 0)
    operator delete(v11[0]);
  v11[0] = &v13;
  sub_20BDE5038((void ***)v11);
  return this;
}

void sub_20BFB63EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  pxrInternal__aapl__pxrReserved__::ArResolver *v28;
  uint64_t v29;
  uint64_t v30;

  a10 = &a16;
  sub_20BDE5038((void ***)&a10);
  if (a28 < 0)
    operator delete(__p);
  __p = (void *)(v30 - 56);
  sub_20BDE5038((void ***)&__p);
  *(_QWORD *)(v30 - 56) = (char *)v28 + 32;
  sub_20BDE9EB0((void ***)(v30 - 56));
  *(_QWORD *)(v30 - 56) = v29;
  sub_20BDE5038((void ***)(v30 - 56));
  pxrInternal__aapl__pxrReserved__::ArResolver::~ArResolver(v28);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArDefaultResolver::~ArDefaultResolver(pxrInternal__aapl__pxrReserved__::ArDefaultResolver *this)
{
  void **v2;
  void **v3;

  *(_QWORD *)this = off_24C5231E0;
  v2 = (void **)((char *)this + 8);
  v3 = (void **)((char *)this + 32);
  sub_20BDE9EB0(&v3);
  v3 = v2;
  sub_20BDE5038(&v3);
  pxrInternal__aapl__pxrReserved__::ArResolver::~ArResolver(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::~ArDefaultResolver(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::ArDefaultResolver::SetDefaultSearchPath(uint64_t a1)
{
  unint64_t v2;

  v2 = atomic_load(&qword_254985710);
  if (!v2)
    v2 = sub_20BFB747C(&qword_254985710);
  if (v2 != a1)
    sub_20BE75818(v2, *(std::string **)a1, *(__int128 **)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
}

void pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_CreateIdentifier(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *__p;
  uint64_t v11;
  unsigned __int8 v12;
  void *v13[2];
  char v14;

  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
    {
      sub_20BDDBFAC((_BYTE *)a4, *(void **)a2, 0);
      return;
    }
  }
  else if (!*(_BYTE *)(a2 + 23))
  {
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a2 + 16);
    return;
  }
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  if (v7)
  {
    sub_20BFB66C0(a3, a2, v13);
    if (sub_20BFB6868(a2))
    {
      pxrInternal__aapl__pxrReserved__::ArResolver::Resolve(a1);
      if ((v12 & 0x80u) == 0)
        v8 = v12;
      else
        v8 = v11;
      if ((char)v12 < 0)
        operator delete(__p);
      if (v8)
        v9 = v13;
      else
        v9 = (void **)a2;
    }
    else
    {
      v9 = v13;
    }
    pxrInternal__aapl__pxrReserved__::TfNormPath((_QWORD *)a4, v9, 0);
    if (v14 < 0)
      operator delete(v13[0]);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfNormPath((_QWORD *)a4, a2, 0);
  }
}

void sub_20BFB66A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB66C0(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  char *v7;
  void **v8;
  std::string __p;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;

  if (pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a1))
    goto LABEL_8;
  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6 && pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20BDDBFAC(__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a1;
      v13 = *(_QWORD *)(a1 + 16);
    }
    v7 = (char *)HIBYTE(v13);
    v8 = __dst;
    if (v13 < 0)
    {
      v8 = (void **)__dst[0];
      v7 = (char *)__dst[1];
    }
    for (; v7; --v7)
    {
      if (*(_BYTE *)v8 == 92)
        *(_BYTE *)v8 = 47;
      v8 = (void **)((char *)v8 + 1);
    }
    pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix((uint64_t)__dst, 47, &__p);
    pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)&__p.__r_.__value_.__l.__data_, a2, v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    pxrInternal__aapl__pxrReserved__::TfNormPath(a3, v10, 0);
    if (v11 < 0)
      operator delete(v10[0]);
    if (SHIBYTE(v13) < 0)
      operator delete(__dst[0]);
  }
  else
  {
LABEL_8:
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20BDDBFAC(a3, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      a3[2] = *(_QWORD *)(a2 + 16);
    }
  }
}

void sub_20BFB6820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

BOOL sub_20BFB6868(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  _BOOL8 result;
  char v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = (char *)a1;
  result = pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a1);
  if (result)
  {
    v4 = v2[23];
    if (v4 >= 0)
      v5 = v2[23];
    else
      v5 = *((_QWORD *)v2 + 1);
    if (v4 < 0)
      v2 = *(char **)v2;
    v6 = &v2[v5];
    if (v5 >= 2)
    {
      v7 = v5;
      v8 = v2;
      do
      {
        v9 = (char *)memchr(v8, 46, v7 - 1);
        if (!v9)
          break;
        if (*(_WORD *)v9 == 12078)
        {
          if (v9 != v6 && v9 == v2)
            return 0;
          break;
        }
        v8 = v9 + 1;
        v7 = v6 - v8;
      }
      while (v6 - v8 >= 2);
      if (v5 > 2)
      {
        v10 = v2;
        do
        {
          v11 = (char *)memchr(v10, 46, v5 - 2);
          if (!v11)
            break;
          if (*(_WORD *)v11 == 11822 && v11[2] == 47)
            return v11 == v6 || v11 != v2;
          v10 = v11 + 1;
          v5 = v6 - v10;
        }
        while (v6 - v10 > 2);
      }
    }
    v11 = v6;
    return v11 == v6 || v11 != v2;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_CreateIdentifierForNewAsset(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;

  v6 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (!v7)
    {
      sub_20BDDBFAC((_BYTE *)a3, *(void **)a1, 0);
      return;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 23))
    {
      *(_OWORD *)a3 = *(_OWORD *)a1;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
      return;
    }
    v7 = *(_QWORD *)(a1 + 8);
  }
  if ((v6 & 0x80u) != 0)
    v6 = v7;
  if (v6 && pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a1))
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a2 + 8);
    if (v8)
      sub_20BFB66C0(a2, a1, __p);
    else
      pxrInternal__aapl__pxrReserved__::TfAbsPath(__p, a1);
    pxrInternal__aapl__pxrReserved__::TfNormPath((_QWORD *)a3, __p, 0);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfNormPath((_QWORD *)a3, a1, 0);
  }
}

void sub_20BFB6A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_Resolve(pxrInternal__aapl__pxrReserved__::ArResolver *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  void *v7;
  char v8;
  uint64_t InternallyManagedCurrentContext;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *__p[2];
  unint64_t v16;
  void *v17[2];
  uint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  if (!pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2))
  {
    v17[0] = 0;
    v17[1] = 0;
    v18 = 0;
    sub_20BFB6CC8((uint64_t)v17, a2, (uint64_t)a3);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      return;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::ArchGetCwd(__p);
  sub_20BFB6CC8((uint64_t)__p, a2, (uint64_t)v17);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  v7 = (void *)HIBYTE(v18);
  v8 = HIBYTE(v18);
  if (v18 < 0)
    v7 = v17[1];
  if (v7)
  {
LABEL_10:
    *(_OWORD *)a3 = *(_OWORD *)v17;
    a3[2] = v18;
    return;
  }
  if (sub_20BFB6868(a2))
  {
    InternallyManagedCurrentContext = pxrInternal__aapl__pxrReserved__::ArResolver::_GetInternallyManagedCurrentContext(a1);
    if (InternallyManagedCurrentContext)
      InternallyManagedCurrentContext = sub_20BFB7AD0(InternallyManagedCurrentContext);
    v10 = 0;
    v19[0] = InternallyManagedCurrentContext;
    v19[1] = (char *)a1 + 8;
    do
    {
      v11 = (uint64_t *)v19[v10];
      if (v11)
      {
        v12 = *v11;
        v13 = v11[1];
        while (v12 != v13)
        {
          sub_20BFB6CC8(v12, a2, (uint64_t)__p);
          if (v8 < 0)
            operator delete(v17[0]);
          v18 = v16;
          *(_OWORD *)v17 = *(_OWORD *)__p;
          v14 = (void *)HIBYTE(v16);
          v8 = HIBYTE(v16);
          if ((v16 & 0x8000000000000000) != 0)
            v14 = __p[1];
          if (v14)
            goto LABEL_10;
          v12 += 24;
        }
      }
      ++v10;
    }
    while (v10 != 2);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v8 < 0)
LABEL_13:
    operator delete(v17[0]);
}

void sub_20BFB6C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  char v21;

  if (v21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB6CC8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void *__p[2];
  uint64_t v10;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v10 = *(_QWORD *)(a2 + 16);
  }
  v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)a1, a2, &v7);
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = v7;
    v10 = v8;
  }
  if (pxrInternal__aapl__pxrReserved__::TfPathExists((const char *)__p, 0))
  {
    pxrInternal__aapl__pxrReserved__::TfAbsPath(&v7, __p);
    *(_OWORD *)a3 = v7;
    *(_QWORD *)(a3 + 16) = v8;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_20BFB6DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_GetCurrentContextPtr(pxrInternal__aapl__pxrReserved__::ArDefaultResolver *this)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::ArResolver::_GetInternallyManagedCurrentContext(this);
  if (result)
    return sub_20BFB7AD0(result);
  return result;
}

void pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_ResolveForNewAsset(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  void *__p[2];
  uint64_t v4;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 23))
    {
      *(_OWORD *)__p = *(_OWORD *)a1;
      v4 = *(_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (*(_QWORD *)(a1 + 8))
  {
LABEL_5:
    pxrInternal__aapl__pxrReserved__::TfAbsPath(__p, a1);
    goto LABEL_6;
  }
  sub_20BDDBFAC(__p, *(void **)a1, 0);
LABEL_6:
  if (SHIBYTE(v4) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, __p[0], (unint64_t)__p[1]);
    if (SHIBYTE(v4) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v4;
  }
}

void sub_20BFB6E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_GetModificationTimestamp(uint64_t a1, uint64_t a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::GetModificationTimestamp(a3, a2, (double *)a3);
}

double pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_OpenAsset@<D0>(const char *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::Open(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_OpenAssetForWrite@<D0>(uint64_t a1@<X1>, int a2@<W2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::Create(a1, a2, &v5);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_IsContextDependentPath(uint64_t a1, uint64_t a2)
{
  return sub_20BFB6868(a2);
}

char *pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_CreateDefaultContext@<X0>(pxrInternal__aapl__pxrReserved__::ArDefaultResolver *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return sub_20BFB73DC((char *)a2, *((_QWORD **)this + 4), *((_QWORD **)this + 5), (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 4);
}

void pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_CreateContextFromString(unsigned __int8 *a1@<X1>, uint64_t *a2@<X8>)
{
  _QWORD v3[3];
  __int128 *v4[3];
  __int128 **v5;

  pxrInternal__aapl__pxrReserved__::TfStringTokenize(a1, ":", v3);
  pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::ArDefaultResolverContext(v4, v3);
  sub_20BFB7764(a2, v4);
  v5 = v4;
  sub_20BDE5038((void ***)&v5);
  v5 = (__int128 **)v3;
  sub_20BDE5038((void ***)&v5);
}

void sub_20BFB6FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v11 - 24) = v10;
  sub_20BDE5038((void ***)(v11 - 24));
  *(_QWORD *)(v11 - 24) = &a10;
  sub_20BDE5038((void ***)(v11 - 24));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_CreateDefaultContextForAsset(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD v4[3];
  std::string __p;
  std::string v6;
  std::string *p_p;

  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::TfAbsPath(&__p, a1);
    pxrInternal__aapl__pxrReserved__::TfGetPathName(&__p, &v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_20BED7D38(v4, 1uLL, (__int128 *)&v6);
    pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::ArDefaultResolverContext(&__p, v4);
    sub_20BFB7764(a2, (__int128 **)&__p);
    p_p = &__p;
    sub_20BDE5038((void ***)&p_p);
    p_p = (std::string *)v4;
    sub_20BDE5038((void ***)&p_p);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  else
  {
    memset(&v6, 0, sizeof(v6));
    sub_20BFB7764(a2, (__int128 **)&v6);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v6;
    sub_20BDE5038((void ***)&__p);
  }
}

void sub_20BFB70DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BDE5038((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BFB714C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20BFB72F4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20BFB7220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFB726C(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C5232C0;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20BFB72D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20BFB72F4(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20BFB7360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB7388(pxrInternal__aapl__pxrReserved__::Ar_ResolverFactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::Ar_ResolverFactoryBase::~Ar_ResolverFactoryBase(a1);
  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::ArDefaultResolver *sub_20BFB739C()
{
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::ArDefaultResolver *)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::ArDefaultResolver(v0);
  return v0;
}

void sub_20BFB73C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20BFB73DC(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = sub_20BE90F0C(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20BFB7468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BDE9EB0(&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_20BFB747C(unint64_t *a1)
{
  _QWORD *v2;
  void *v3;
  void **v6;

  v2 = operator new(0x18uLL);
  v3 = v2;
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)v2, a1))
      return (unint64_t)v3;
  }
  __clrex();
  v6 = (void **)v2;
  sub_20BDE5038(&v6);
  operator delete(v3);
  return atomic_load(a1);
}

std::string *sub_20BFB74E8(uint64_t *a1, std::string *a2, std::string *a3, __int128 *a4, uint64_t a5)
{
  std::string *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = (__int128 *)&a3[a5];
      }
      else
      {
        v21 = (__int128 *)(&a3->__r_.__value_.__l.__data_ + ((uint64_t)(v12 - (_QWORD)a2) >> 3));
        a1[1] = (uint64_t)sub_20BFB76A8(v9, v21, a4, *(char **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_20BE752D4((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[a5]);
      sub_20BE75A80(a3, (std::string *)v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)sub_20BDE4FF4(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[24 * v15];
      v25 = v24;
      v26 = &v19[24 * v18];
      sub_20BEC8ECC(&v23, (__int128 *)a3, a5);
      v5 = (std::string *)sub_20BE753F0((uint64_t)a1, &v23, (__int128 *)v5);
      sub_20BDF3648((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_20BFB7688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

char *sub_20BFB76A8(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_20BDDBFAC(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20BE75618((uint64_t)v9);
  return v4;
}

void sub_20BFB7750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE75618((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BFB7764(uint64_t *a1, __int128 **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_20BFB77B0(a1, a2);
  return a1;
}

void sub_20BFB7798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDE9EB0((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20BFB77B0(uint64_t *a1, __int128 **a2)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __n128 v8;

  v4 = operator new(0x20uLL);
  sub_20BFB7868((uint64_t)v4, a2);
  sub_20BFB79F8(&v8, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::ArResolverContext::_Add(a1, &v8);
  v5 = (std::__shared_weak_count *)v8.n128_u64[1];
  if (v8.n128_u64[1])
  {
    v6 = (unint64_t *)(v8.n128_u64[1] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20BFB7844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFB7868(uint64_t a1, __int128 **a2)
{
  *(_QWORD *)a1 = &unk_24C523300;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_20BE78B98((char *)(a1 + 8), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  return a1;
}

void sub_20BFB78C0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::ArResolverContext::_Untyped *v1;

  pxrInternal__aapl__pxrReserved__::ArResolverContext::_Untyped::~_Untyped(v1);
  _Unwind_Resume(a1);
}

void sub_20BFB78D4(void **a1)
{
  void **v2;

  *a1 = &unk_24C523300;
  v2 = a1 + 1;
  sub_20BDE5038(&v2);
  pxrInternal__aapl__pxrReserved__::ArResolverContext::_Untyped::~_Untyped((pxrInternal__aapl__pxrReserved__::ArResolverContext::_Untyped *)a1);
}

void sub_20BFB7920(void **a1)
{
  void *v2;
  void **v3;

  *a1 = &unk_24C523300;
  v3 = a1 + 1;
  sub_20BDE5038(&v3);
  pxrInternal__aapl__pxrReserved__::ArResolverContext::_Untyped::~_Untyped((pxrInternal__aapl__pxrReserved__::ArResolverContext::_Untyped *)a1);
  operator delete(v2);
}

void *sub_20BFB7970(uint64_t a1)
{
  void *v2;

  v2 = operator new(0x20uLL);
  sub_20BFB7868((uint64_t)v2, (__int128 **)(a1 + 8));
  return v2;
}

void sub_20BFB79A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_20BFB79B8()
{
  return &unk_24C523360;
}

uint64_t sub_20BFB79C4(uint64_t a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::operator<((const void ***)(a1 + 8), (const void ***)(a2 + 8));
}

uint64_t sub_20BFB79D0(uint64_t a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::operator==((unsigned __int8 **)(a1 + 8), a2 + 8);
}

unint64_t sub_20BFB79DC(uint64_t a1, const pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext *a2)
{
  return pxrInternal__aapl__pxrReserved__::hash_value((uint64_t **)(a1 + 8), a2);
}

std::string *sub_20BFB79E4@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::GetAsString((std::string **)(a1 + 8), a2);
}

uint64_t sub_20BFB79EC()
{
  return 0;
}

_QWORD *sub_20BFB79F8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C523380;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BFB7A40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20BFB7A64(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFB7A78(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20BFB7A90(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5233D0))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20BFB7AD0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)a1;
  v2 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v2)
    return 0;
  while (1)
  {
    v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1);
    if (!strcmp((const char *)(0x800000020CAA1693 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v3 + 8) & 0x7FFFFFFFFFFFFFFFLL)))break;
    v1 += 2;
    if (v1 == v2)
      return 0;
  }
  return *v1 + 8;
}

uint64_t *pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::ArDefaultResolverContext(uint64_t *a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD v12[4];
  char v13;
  void *__p[2];
  uint64_t v15;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_20BE71C2C(a1, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      if (*((char *)v4 + 23) < 0)
      {
        if (v4[1])
        {
LABEL_6:
          pxrInternal__aapl__pxrReserved__::TfAbsPath(__p, v4);
          v6 = (void *)HIBYTE(v15);
          if (v15 < 0)
            v6 = __p[1];
          if (v6)
          {
            v7 = a1[1];
            if (v7 >= a1[2])
            {
              v10 = sub_20BE4EE50(a1, (__int128 *)__p);
            }
            else
            {
              if (SHIBYTE(v15) < 0)
              {
                sub_20BDDBFAC((_BYTE *)a1[1], __p[0], (unint64_t)__p[1]);
              }
              else
              {
                v8 = *(_OWORD *)__p;
                *(_QWORD *)(v7 + 16) = v15;
                *(_OWORD *)v7 = v8;
              }
              v10 = v7 + 24;
              a1[1] = v7 + 24;
            }
            a1[1] = v10;
          }
          else
          {
            v12[0] = "ar/defaultResolverContext.cpp";
            v12[1] = "ArDefaultResolverContext";
            v12[2] = 48;
            v12[3] = "pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::ArDefaultResolverContext(const std::vec"
                     "tor<std::string> &)";
            v13 = 0;
            v9 = v4;
            if (*((char *)v4 + 23) < 0)
              v9 = (uint64_t *)*v4;
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v12, (pxrInternal__aapl__pxrReserved__ *)"Could not determine absolute path for search path prefix '%s'", (char *)__p[1], v9);
          }
          if (SHIBYTE(v15) < 0)
            operator delete(__p[0]);
        }
      }
      else if (*((_BYTE *)v4 + 23))
      {
        goto LABEL_6;
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
  return a1;
}

void sub_20BFB7CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_20BDE5038((void ***)&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::operator<(const void ***a1, const void ***a2)
{
  char v3;

  return sub_20BFB7F28(*a1, a1[1], *a2, a2[1], (uint64_t)&v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::operator==(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t result;
  char v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = sub_20BEB4EF8((uint64_t)&v6, v2, v4);
    if (!(_DWORD)result)
      break;
    v2 += 24;
    v4 += 24;
  }
  while (v2 != v3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::operator!=(unsigned __int8 **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::operator==(a1, a2) ^ 1;
}

std::string *pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::GetAsString@<X0>(std::string **this@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  const std::string::value_type *v6;
  std::string __p;

  sub_20BDDC0E4(a2, "Search path: ");
  if (*this == this[1])
  {
    v6 = "[ ]";
  }
  else
  {
    std::string::append(a2, "[\n    ");
    pxrInternal__aapl__pxrReserved__::TfStringJoin("\n    ", this, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v6 = "\n]";
  }
  return std::string::append(a2, v6);
}

void sub_20BFB7E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::hash_value(uint64_t **this, const pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext *a2)
{
  uint64_t v3;
  char v4;

  v3 = 0;
  v4 = 0;
  sub_20BFB7FC4((unint64_t)&v3, *this, 0xAAAAAAAAAAAAAAABLL * (this[1] - *this));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

uint64_t sub_20BFB7F28(const void **a1, const void **a2, const void **a3, const void **a4, uint64_t a5)
{
  const void **v7;
  BOOL v10;
  uint64_t result;

  if (a3 == a4)
    return 0;
  v7 = a3;
  while (a1 != a2 && !sub_20BDDDF74(a5, a1, v7))
  {
    v10 = sub_20BDDDF74(a5, v7, a1);
    result = 0;
    if (!v10)
    {
      a1 += 3;
      v7 += 3;
      if (v7 != a4)
        continue;
    }
    return result;
  }
  return 1;
}

unint64_t sub_20BFB7FC4(unint64_t this, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::Tf_HashState *v4;
  uint64_t *v5;
  char *v6;
  char *v7;

  if (a3)
  {
    v3 = a3;
    v4 = (pxrInternal__aapl__pxrReserved__::Tf_HashState *)this;
    do
    {
      --v3;
      v5 = a2 + 3;
      v6 = (char *)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        v7 = (char *)*((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (uint64_t *)*a2;
        v7 = v6;
      }
      this = pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(v4, (pxrInternal__aapl__pxrReserved__ *)a2, v7);
      a2 = v5;
    }
    while (v3);
  }
  return this;
}

FILE *pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::Open@<X0>(const char *a1@<X0>, _QWORD *a2@<X8>)
{
  FILE *result;
  __sFILE *v4;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  result = pxrInternal__aapl__pxrReserved__::ArchOpenFile(a1, "rb");
  v4 = result;
  if (result)
    return (FILE *)sub_20BFB8504(&v4, a2);
  *a2 = 0;
  a2[1] = 0;
  return result;
}

double pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::GetModificationTimestamp(char *a1, uint64_t a2, double *a3)
{
  _BOOL4 ModificationTime;
  double result;
  char v5[8];

  *(_QWORD *)v5 = 0;
  if (a1[23] < 0)
    a1 = *(char **)a1;
  ModificationTime = pxrInternal__aapl__pxrReserved__::ArchGetModificationTime((pxrInternal__aapl__pxrReserved__ *)a1, (double *)v5, a3);
  result = *(double *)v5;
  if (!ModificationTime)
    return NAN;
  return result;
}

pxrInternal__aapl__pxrReserved__::ArFilesystemAsset *pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::ArFilesystemAsset(pxrInternal__aapl__pxrReserved__::ArFilesystemAsset *this, __sFILE *a2)
{
  _QWORD *v4;
  _QWORD v6[4];
  char v7;

  v4 = pxrInternal__aapl__pxrReserved__::ArAsset::ArAsset(this);
  *v4 = off_24C523478;
  v4[1] = a2;
  if (!a2)
  {
    v6[0] = "ar/filesystemAsset.cpp";
    v6[1] = "ArFilesystemAsset";
    v6[2] = 59;
    v6[3] = "pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::ArFilesystemAsset(FILE *)";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid file handle");
  }
  return this;
}

void sub_20BFB815C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::ArAsset *v1;

  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::~ArFilesystemAsset(FILE **this)
{
  *this = (FILE *)off_24C523478;
  fclose(this[1]);
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset((pxrInternal__aapl__pxrReserved__::ArAsset *)this);
}

{
  *this = (FILE *)off_24C523478;
  fclose(this[1]);
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset((pxrInternal__aapl__pxrReserved__::ArAsset *)this);
}

{
  void *v2;

  *this = (FILE *)off_24C523478;
  fclose(this[1]);
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset((pxrInternal__aapl__pxrReserved__::ArAsset *)this);
  operator delete(v2);
}

off_t pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::GetSize(FILE **this, __sFILE *a2)
{
  return pxrInternal__aapl__pxrReserved__::ArchGetFileLength(this[1], a2);
}

void *pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::GetBuffer@<X0>(pxrInternal__aapl__pxrReserved__::ArFilesystemAsset *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v9;
  _QWORD v10[2];

  pxrInternal__aapl__pxrReserved__::ArchMapFileReadOnly(v10, *((_QWORD *)this + 1), 0);
  v3 = v10[0];
  if (v10[0])
  {
    v4 = operator new(0x10uLL);
    v10[0] = 0;
    v5 = v10[1];
    *v4 = v3;
    v4[1] = v5;
    sub_20BFB83C4(&v9, (uint64_t)v4);
    *a2 = v3;
    v6 = operator new(0x30uLL);
    v7 = v9;
    v9 = 0uLL;
    *v6 = off_24C5235A0;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v3;
    *((_OWORD *)v6 + 2) = v7;
    a2[1] = v6;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return sub_20BE99858((uint64_t)v10, 0);
}

void sub_20BFB82B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_begin_catch(a1);
  sub_20BDEBF08(&a9);
  __cxa_rethrow();
}

void sub_20BFB82CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_end_catch();
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  sub_20BE99858((uint64_t)&a11, 0);
  _Unwind_Resume(a1);
}

ssize_t pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::Read(FILE **this, __sFILE *a2, char *a3, off_t a4)
{
  ssize_t result;
  void **v5;
  void *__p[2];
  char v7;
  _QWORD v8[4];
  char v9;

  result = pxrInternal__aapl__pxrReserved__::ArchPRead(this[1], a2, a3, a4);
  if (result == -1)
  {
    v8[0] = "ar/filesystemAsset.cpp";
    v8[1] = "Read";
    v8[2] = 105;
    v8[3] = "virtual size_t pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::Read(void *, size_t, size_t) const";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::ArchStrerror(__p);
    if (v7 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 3, (pxrInternal__aapl__pxrReserved__ *)"Error occurred reading file: %s", (const char *)v5);
    if (v7 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return result;
}

void sub_20BFB839C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::GetFileUnsafe(pxrInternal__aapl__pxrReserved__::ArFilesystemAsset *this)
{
  return *((_QWORD *)this + 1);
}

_QWORD *sub_20BFB83C4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C5234D8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BFB8418(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFB84C4((void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20BFB8434(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BFB8448(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
  {
    sub_20BE99858(*(_QWORD *)(a1 + 24), 0);
    operator delete(v1);
  }
}

uint64_t sub_20BFB8484(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C523528))
    return a1 + 24;
  else
    return 0;
}

void sub_20BFB84C4(void **a1, void *a2)
{
  void *v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_20BE99858((uint64_t)v2, 0);
    operator delete(v2);
  }
}

_QWORD *sub_20BFB8504@<X0>(__sFILE **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = sub_20BFB855C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_20BFB8548(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFB855C(_QWORD *a1, __sFILE **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_24C523550;
  pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::ArFilesystemAsset((pxrInternal__aapl__pxrReserved__::ArFilesystemAsset *)(a1 + 3), *a2);
  return a1;
}

void sub_20BFB8598(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFB85AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C523550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFB85C0(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C523550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFB85E4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20BFB85F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C5235A0;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a1[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(a1);
}

void sub_20BFB8624(std::__shared_weak_count *a1)
{
  void *v2;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C5235A0;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a1[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v2);
}

void sub_20BFB8658(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  v1 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 32);
  sub_20BDEBF08((_QWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
}

uint64_t sub_20BFB8680(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5235E0))
    return a1 + 32;
  else
    return 0;
}

void pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::Create(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  std::string::size_type size;
  unint64_t *Instance;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  const char *v11;
  _BYTE v12[56];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  std::string v18;

  pxrInternal__aapl__pxrReserved__::TfGetPathName((std::string *)a1, &v18);
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (!size
    || (pxrInternal__aapl__pxrReserved__::TfIsDir((const char *)&v18, 0) & 1) != 0
    || (pxrInternal__aapl__pxrReserved__::TfMakeDirs((uint64_t)&v18, 0xFFFFFFFFLL, 1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v17);
    v16 = 0;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    if (a2)
    {
      if (a2 != 1)
      {
LABEL_11:
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!Instance)
          Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        v8 = v17;
        v9 = atomic_load(Instance + 18);
        if (v8 >= v9
          || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v17, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
        {
          sub_20BFB8C1C((uint64_t)&v13, a3);
        }
        else
        {
          *a3 = 0;
          a3[1] = 0;
        }
        pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile((pxrInternal__aapl__pxrReserved__::TfSafeOutputFile *)&v13);
        pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v17);
        goto LABEL_18;
      }
      pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Replace(a1, (uint64_t)v12);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Update((std::string *)a1, (uint64_t)v12);
    }
    sub_20BFB88B4((uint64_t)&v13, (uint64_t)v12);
    pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile((pxrInternal__aapl__pxrReserved__::TfSafeOutputFile *)v12);
    goto LABEL_11;
  }
  *(_QWORD *)&v13 = "ar/filesystemWritableAsset.cpp";
  *((_QWORD *)&v13 + 1) = "Create";
  *(_QWORD *)&v14 = 48;
  *((_QWORD *)&v14 + 1) = "static std::shared_ptr<ArFilesystemWritableAsset> pxrInternal__aapl__pxrReserved__::ArFilesyst"
                          "emWritableAsset::Create(const ArResolvedPath &, ArResolver::WriteMode)";
  LOBYTE(v15) = 0;
  v10 = &v18;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if (*(char *)(a1 + 23) >= 0)
    v11 = (const char *)a1;
  else
    v11 = *(const char **)a1;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 3, (pxrInternal__aapl__pxrReserved__ *)"Could not create directory '%s' for asset '%s'", (const char *)v10, v11);
  *a3 = 0;
  a3[1] = 0;
LABEL_18:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_20BFB8870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 33) < 0)
    operator delete(*(void **)(v19 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFB88B4(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  __int128 v6;
  void **v7;
  __int128 v8;

  v4 = (__int128 *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v5);
  v6 = *v4;
  *(_QWORD *)(v5 + 16) = *((_QWORD *)v4 + 2);
  *(_OWORD *)v5 = v6;
  *(_BYTE *)(a2 + 31) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  v7 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v7);
  v8 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)v7 = v8;
  *(_BYTE *)(a2 + 55) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)a2 = 0;
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::ArFilesystemWritableAsset(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  _QWORD v8[4];
  char v9;

  v4 = pxrInternal__aapl__pxrReserved__::ArWritableAsset::ArWritableAsset(a1);
  *v4 = off_24C523600;
  v4[1] = *(_QWORD *)a2;
  v5 = *(_OWORD *)(a2 + 8);
  v4[4] = *(_QWORD *)(a2 + 24);
  *((_OWORD *)v4 + 1) = v5;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v6 = *(_OWORD *)(a2 + 32);
  v4[7] = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 5) = v6;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)a2 = 0;
  if (!v4[1])
  {
    v8[0] = "ar/filesystemWritableAsset.cpp";
    v8[1] = "ArFilesystemWritableAsset";
    v8[2] = 75;
    v8[3] = "pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::ArFilesystemWritableAsset(TfSafeOutputFile &&)";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid output file");
  }
  return a1;
}

void sub_20BFB8A10(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::ArWritableAsset *v1;
  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile *v2;

  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile(v2);
  pxrInternal__aapl__pxrReserved__::ArWritableAsset::~ArWritableAsset(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::~ArFilesystemWritableAsset(pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset *this)
{
  *(_QWORD *)this = off_24C523600;
  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile((pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset *)((char *)this + 8));
  pxrInternal__aapl__pxrReserved__::ArWritableAsset::~ArWritableAsset(this);
}

{
  *(_QWORD *)this = off_24C523600;
  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile((pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset *)((char *)this + 8));
  pxrInternal__aapl__pxrReserved__::ArWritableAsset::~ArWritableAsset(this);
}

{
  void *v2;

  *(_QWORD *)this = off_24C523600;
  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile((pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset *)((char *)this + 8));
  pxrInternal__aapl__pxrReserved__::ArWritableAsset::~ArWritableAsset(this);
  operator delete(v2);
}

BOOL pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::Close(pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset *this)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  _BOOL8 v5;
  unint64_t v7;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Close((pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset *)((char *)this + 8));
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v7;
  v4 = atomic_load(Instance + 18);
  v5 = v3 >= v4
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  return v5;
}

void sub_20BFB8B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::Write(FILE **this, __sFILE *a2, char *a3, off_t a4)
{
  char *result;
  void **v5;
  void *__p[2];
  char v7;
  _QWORD v8[4];
  char v9;

  result = pxrInternal__aapl__pxrReserved__::ArchPWrite(this[1], a2, a3, a4);
  if (result == (char *)-1)
  {
    v8[0] = "ar/filesystemWritableAsset.cpp";
    v8[1] = "Write";
    v8[2] = 96;
    v8[3] = "virtual size_t pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::Write(const void *, size_t, size_t)";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::ArchStrerror(__p);
    if (v7 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 3, (pxrInternal__aapl__pxrReserved__ *)"Error occurred writing file: %s", (const char *)v5);
    if (v7 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return result;
}

void sub_20BFB8C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFB8C1C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x58uLL);
  result = sub_20BFB8C74(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_20BFB8C60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFB8C74(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24C523648;
  a1[1] = 0;
  pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::ArFilesystemWritableAsset(a1 + 3, a2);
  return a1;
}

void sub_20BFB8CAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFB8CC0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C523648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFB8CD4(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C523648;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFB8CF8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::FromBuffer@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  v4 = a2;
  return sub_20BFB9138(a1, &v4, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::FromBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  v4 = a2;
  return sub_20BFB927C(a1, &v4, a3);
}

void pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::~ArInMemoryAsset(pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *this)
{
  *(_QWORD *)this = off_24C523698;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *)((char *)this + 8));
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset(this);
}

{
  *(_QWORD *)this = off_24C523698;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *)((char *)this + 8));
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset(this);
}

{
  void *v2;

  *(_QWORD *)this = off_24C523698;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *)((char *)this + 8));
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset(this);
  operator delete(v2);
}

void pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::FromAsset(pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *this@<X0>, const pxrInternal__aapl__pxrReserved__::ArAsset *a2@<X1>, _QWORD *a3@<X8>)
{
  size_t v5;
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  const char *v16;
  char v17;
  __int128 v18;
  size_t v19;

  v5 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *, const pxrInternal__aapl__pxrReserved__::ArAsset *))(*(_QWORD *)this + 16))(this, a2);
  v18 = 0uLL;
  v6 = operator new[](v5);
  sub_20BFB8FF8(&v18, (uint64_t)v6);
  v7 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *, _QWORD, size_t, _QWORD))(*(_QWORD *)this + 32))(this, v18, v5, 0);
  if (v7 == v5)
  {
    v14 = v18;
    v18 = 0uLL;
    v19 = v5;
    sub_20BFB927C((uint64_t)&v14, (uint64_t *)&v19, a3);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    *(_QWORD *)&v14 = "ar/inMemoryAsset.cpp";
    *((_QWORD *)&v14 + 1) = "FromAsset";
    v15 = 82;
    v16 = "static std::shared_ptr<ArInMemoryAsset> pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::FromAsset(const ArAsset &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read asset into memory. Expected %zu bytes, read %zu.", v5, v7);
    *a3 = 0;
    a3[1] = 0;
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_20BFB8F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20BFB8FF8(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20BFB9364(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::GetSize(pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::GetBuffer@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

size_t pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::Read(pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *this, void *__dst, size_t a3, uint64_t a4)
{
  size_t v4;

  if (a4 + a3 > *((_QWORD *)this + 3))
    return 0;
  v4 = a3;
  memcpy(__dst, (const void *)(*((_QWORD *)this + 1) + a4), a3);
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::GetFileUnsafe(pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *this)
{
  return 0;
}

double pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::GetDetachedAsset@<D0>(pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];
  uint64_t v5;

  v5 = *((_QWORD *)this + 3);
  sub_20BFB9138((uint64_t *)this + 1, &v5, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

_QWORD *sub_20BFB9138@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x38uLL);
  result = sub_20BFB91A8(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BFB9194(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFB91A8(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_24C5236F8;
  v5 = *a3;
  pxrInternal__aapl__pxrReserved__::ArAsset::ArAsset(a1 + 3);
  v7 = *a2;
  v6 = a2[1];
  a1[3] = off_24C523698;
  a1[4] = v7;
  a1[5] = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  a1[6] = v5;
  return a1;
}

void sub_20BFB9220(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFB9234(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C5236F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFB9248(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C5236F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFB926C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_20BFB927C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t result;

  v6 = (char *)operator new(0x38uLL);
  result = sub_20BFB92EC((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_20BFB92D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFB92EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24C5236F8;
  v5 = *a3;
  pxrInternal__aapl__pxrReserved__::ArAsset::ArAsset((_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = off_24C523698;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 48) = v5;
  return a1;
}

void sub_20BFB9350(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFB9364(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C523748;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BFB93AC(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    operator delete[](v1);
  __cxa_rethrow();
}

void sub_20BFB93C4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BFB93DC(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BFB93F0(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
    operator delete[](v1);
}

uint64_t sub_20BFB9400(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C523788))
    return a1 + 24;
  else
    return 0;
}

uint64_t *sub_20BFB9440()
{
  sub_20BFB9718();
  return sub_20BFB9838();
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArNotice::ResolverNotice::ResolverNotice(_QWORD *this)
{
  *this = off_24C5237A8;
  return this;
}

{
  *this = off_24C5237A8;
  return this;
}

void pxrInternal__aapl__pxrReserved__::ArNotice::ResolverNotice::~ResolverNotice(pxrInternal__aapl__pxrReserved__::ArNotice::ResolverNotice *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged *pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged::ResolverChanged(pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24C523818;
  v6 = v5;
  pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged::ResolverChanged(this, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return this;
}

{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24C523818;
  v6 = v5;
  pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged::ResolverChanged(this, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return this;
}

void sub_20BFB952C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged::ResolverChanged(_QWORD *a1, uint64_t a2)
{
  *a1 = off_24C5237C8;
  sub_20BE9E6E8((uint64_t)(a1 + 1), a2);
  return a1;
}

void sub_20BFB9594(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TfNotice *v1;

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(v1);
  _Unwind_Resume(a1);
}

void sub_20BFB9644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged::~ResolverChanged(pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24C5237C8;
  v2 = (char *)this + 8;
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged::~ResolverChanged(this);
  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged::AffectsContext(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    sub_20BE9E974();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t *sub_20BFB9718()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20BEB9D48((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20BFB97EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BFB9838()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20BFB995C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20BFB990C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20BFB995C(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20BFB99C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFB99F4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C523818;
  return result;
}

void sub_20BFB9A18(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C523818;
}

uint64_t sub_20BFB9A30()
{
  return 1;
}

uint64_t sub_20BFB9A38(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C523888))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BFB9A74()
{
  return &unk_24C523888;
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArPackageResolver::ArPackageResolver(_QWORD *this)
{
  *this = off_24C5238A8;
  return this;
}

uint64_t *sub_20BFB9AA0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BFB9B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (*(char *)(a1 + 23) < 0)
  {
    v1 = *(_QWORD *)(a1 + 8);
    if (v1)
    {
      v3 = *(_QWORD *)a1;
      v4 = *(_QWORD *)a1 + v1;
      v5 = *(unsigned __int8 *)(v4 - 1);
      v2 = (unsigned __int8 *)(v4 - 1);
      if (v5 == 93)
        return v3 + v1 != (_QWORD)sub_20BFB9C14(a1, v2);
    }
  }
  else
  {
    v1 = *(unsigned __int8 *)(a1 + 23);
    if (*(_BYTE *)(a1 + 23))
    {
      v2 = (unsigned __int8 *)(a1 + v1 - 1);
      if (*v2 == 93)
      {
        v3 = a1;
        return v3 + v1 != (_QWORD)sub_20BFB9C14(a1, v2);
      }
    }
  }
  return 0;
}

unsigned __int8 *sub_20BFB9C14(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;

  v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = (unsigned __int8 *)a1;
  else
    v3 = *(unsigned __int8 **)a1;
  if (v3 == a2)
  {
    if ((v2 & 0x80u) != 0)
      v2 = *(_QWORD *)(a1 + 8);
    return &v3[v2];
  }
  else
  {
    v4 = a2 - 1;
    v5 = 1;
    do
    {
      v6 = *v4;
      if ((v6 == 93 || v6 == 91) && (v4 == v3 || *(v4 - 1) != 92))
      {
        if (v6 == 91)
          --v5;
        else
          ++v5;
      }
      v7 = v4 - 1;
      if (v4 == v3)
        break;
      --v4;
    }
    while (v5);
    if ((v2 & 0x80u) != 0)
      v2 = *(_QWORD *)(a1 + 8);
    v8 = &v3[v2];
    if (v5)
      return v8;
    else
      return v7 + 1;
  }
}

void pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath(__int128 **a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  __int128 v5;
  uint64_t v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type size;
  int v10;
  std::string *v11;
  uint64_t i;
  std::string::const_iterator v13;
  std::string *v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string v17;
  std::string v18;
  std::string v19;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      if (*((char *)v3 + 23) < 0)
      {
        if (*((_QWORD *)v3 + 1))
          goto LABEL_8;
      }
      else if (*((_BYTE *)v3 + 23))
      {
        goto LABEL_8;
      }
      v3 = (__int128 *)((char *)v3 + 24);
    }
    while (v3 != v4);
    goto LABEL_11;
  }
LABEL_8:
  if (v3 == v4)
  {
LABEL_11:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  if (*((char *)v3 + 23) < 0)
  {
    sub_20BDDBFAC(a2, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v5 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
  }
  v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = a2->__r_.__value_.__r.__words[0];
    size = a2->__r_.__value_.__l.__size_;
    v7 = a2->__r_.__value_.__r.__words[0] + size;
    if (*(_BYTE *)(v7 - 1) == 93)
    {
LABEL_17:
      while (v7 != v8)
      {
        v10 = *(unsigned __int8 *)--v7;
        if (v10 != 93)
        {
          v8 = v7 + 1;
          break;
        }
      }
      if ((v6 & 0x80u) == 0)
        v11 = a2;
      else
        v11 = (std::string *)a2->__r_.__value_.__r.__words[0];
      size = v8 - (_QWORD)v11;
    }
  }
  else
  {
    v7 = (std::string::size_type)a2 + v6;
    v8 = (std::string::size_type)a2;
    if (a2->__r_.__value_.__s.__data_[v6 - 1] == 93)
      goto LABEL_17;
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  for (i = (uint64_t)v3 + 24; (__int128 *)i != v4; i += 24)
  {
    if (*(char *)(i + 23) < 0)
    {
      if (*(_QWORD *)(i + 8))
      {
LABEL_29:
        sub_20BFBA99C(i, (uint64_t)&v17);
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v13.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v17;
        else
          v13.__i_ = (std::__wrap_iter<const char *>::iterator_type)v17.__r_.__value_.__r.__words[0];
        std::string::insert(&v17, v13, 91);
        v18 = v17;
        memset(&v17, 0, sizeof(v17));
        std::string::push_back(&v18, 93);
        v19 = v18;
        memset(&v18, 0, sizeof(v18));
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v19;
        else
          v14 = (std::string *)v19.__r_.__value_.__r.__words[0];
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        else
          v15 = v19.__r_.__value_.__l.__size_;
        std::string::insert(a2, size, (const std::string::value_type *)v14, v15);
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        {
          v16 = v19.__r_.__value_.__l.__size_;
          operator delete(v19.__r_.__value_.__l.__data_);
        }
        else
        {
          v16 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        }
        size = size + v16 - 1;
      }
    }
    else if (*(_BYTE *)(i + 23))
    {
      goto LABEL_29;
    }
  }
}

void sub_20BFB9EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 + 23) < 0)
    operator delete(*(void **)v28);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v2[0] = a1;
  v2[1] = a1 + 24;
  sub_20BFB9F80(v2, &v3, a2);
}

void sub_20BFB9F80(uint64_t *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t *v5;
  __int128 *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string::size_type size;
  int v13;
  std::string *v14;
  uint64_t *v15;
  uint64_t v16;
  std::string::const_iterator v17;
  std::string *v18;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string v21;
  std::string v22;
  std::string v23;

  if (a1 == a2)
  {
LABEL_8:
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  v5 = a1;
  while (1)
  {
    v6 = (__int128 *)*v5;
    if (*(char *)(*v5 + 23) < 0)
      break;
    if (*(_BYTE *)(*v5 + 23))
    {
      v8 = *v6;
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v8;
      goto LABEL_10;
    }
LABEL_7:
    if (++v5 == a2)
      goto LABEL_8;
  }
  v7 = *((_QWORD *)v6 + 1);
  if (!v7)
    goto LABEL_7;
  sub_20BDDBFAC(a3, *(void **)v6, v7);
LABEL_10:
  v9 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
  {
    v11 = a3->__r_.__value_.__r.__words[0];
    size = a3->__r_.__value_.__l.__size_;
    v10 = a3->__r_.__value_.__r.__words[0] + size;
    if (*(_BYTE *)(v10 - 1) == 93)
    {
LABEL_14:
      while (v10 != v11)
      {
        v13 = *(unsigned __int8 *)--v10;
        if (v13 != 93)
        {
          v11 = v10 + 1;
          break;
        }
      }
      if ((v9 & 0x80u) == 0)
        v14 = a3;
      else
        v14 = (std::string *)a3->__r_.__value_.__r.__words[0];
      size = v11 - (_QWORD)v14;
    }
  }
  else
  {
    v10 = (std::string::size_type)a3 + v9;
    v11 = (std::string::size_type)a3;
    if (a3->__r_.__value_.__s.__data_[v9 - 1] == 93)
      goto LABEL_14;
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  v15 = v5 + 1;
  if (v15 != a2)
  {
    while (2)
    {
      v16 = *v15;
      if (*(char *)(*v15 + 23) < 0)
      {
        if (!*(_QWORD *)(v16 + 8))
          goto LABEL_41;
      }
      else if (!*(_BYTE *)(*v15 + 23))
      {
        goto LABEL_41;
      }
      sub_20BFBA99C(v16, (uint64_t)&v21);
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v21;
      else
        v17.__i_ = (std::__wrap_iter<const char *>::iterator_type)v21.__r_.__value_.__r.__words[0];
      std::string::insert(&v21, v17, 91);
      v22 = v21;
      memset(&v21, 0, sizeof(v21));
      std::string::push_back(&v22, 93);
      v23 = v22;
      memset(&v22, 0, sizeof(v22));
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v23;
      else
        v18 = (std::string *)v23.__r_.__value_.__r.__words[0];
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      else
        v19 = v23.__r_.__value_.__l.__size_;
      std::string::insert(a3, size, (const std::string::value_type *)v18, v19);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = v23.__r_.__value_.__l.__size_;
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      else
      {
        v20 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      }
      size = size + v20 - 1;
LABEL_41:
      if (++v15 == a2)
        return;
      continue;
    }
  }
}

void sub_20BFBA17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 + 23) < 0)
    operator delete(*(void **)v28);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v3[0] = a1;
  v3[1] = a2;
  sub_20BFB9F80(v3, &v4, a3);
}

void pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  char *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  char *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  char *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void *__p[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v2 = a1;
  v25 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    v6 = *(char **)a1;
    v7 = *(_QWORD *)(a1 + 8);
    if (!v7)
      goto LABEL_12;
    v5 = v6[v7 - 1];
  }
  else
  {
    if (!*(_BYTE *)(a1 + 23))
    {
      v7 = 0;
      v6 = (char *)a1;
LABEL_12:
      v8 = (unsigned __int8 *)&v6[v7];
      if ((v4 & 0x80) != 0)
        goto LABEL_8;
LABEL_13:
      v14 = (unsigned __int8 *)(a1 + v4);
      if (v8 != (unsigned __int8 *)(a1 + v4))
      {
        v15 = sub_20BFB9C14(a1, v8);
        if (v14 != v15)
        {
          v13 = (char *)v15;
          goto LABEL_16;
        }
      }
      *(_QWORD *)((char *)&v23 + 7) = 0;
      *(_QWORD *)&v23 = 0;
      *(_OWORD *)a2 = *(_OWORD *)v2;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(v2 + 16);
LABEL_21:
      v18 = v23;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = v18;
      *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v23 + 7);
      *(_BYTE *)(a2 + 47) = 0;
      return;
    }
    v5 = *(unsigned __int8 *)(a1 + v4 - 1);
    v6 = (char *)a1;
    v7 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v5 != 93)
    goto LABEL_12;
  v8 = (unsigned __int8 *)&v6[v7 - 1];
  if ((v4 & 0x80) == 0)
    goto LABEL_13;
LABEL_8:
  v9 = *(char **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (unsigned __int8 *)(*(_QWORD *)a1 + v10);
  if (v8 == v11 || (v12 = sub_20BFB9C14(a1, v8), v11 == v12))
  {
    *(_QWORD *)((char *)&v23 + 7) = 0;
    *(_QWORD *)&v23 = 0;
    sub_20BDDBFAC((_BYTE *)a2, v9, v10);
    goto LABEL_21;
  }
  v13 = (char *)v12;
  v2 = (uint64_t)v9;
LABEL_16:
  sub_20BE93368(&v23, (char *)v2, v13, (unint64_t)&v13[-v2]);
  sub_20BE93368(__p, v13 + 1, (char *)v8, v8 - (unsigned __int8 *)(v13 + 1));
  sub_20BFBA440((uint64_t)__p, (uint64_t)&v19);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  v16 = v19;
  *(_OWORD *)__p = v19;
  v17 = v20;
  v22 = v20;
  *(_OWORD *)a2 = v23;
  *(_QWORD *)(a2 + 16) = v24;
  *(_OWORD *)(a2 + 24) = v16;
  *(_QWORD *)(a2 + 40) = v17;
}

void sub_20BFBA404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_20BFBA440(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  unsigned __int8 *v6;
  int v7;
  char *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  char *v11;
  std::string *p_p;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  std::string v20;
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
  {
    v8 = *(char **)a1;
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
    {
      sub_20BDDBFAC((_BYTE *)a2, *(void **)a1, 0);
      return;
    }
    v5 = &v8[v4];
    v6 = (unsigned __int8 *)&v8[v4 - 1];
    v7 = *v6;
  }
  else
  {
    v4 = *(unsigned __int8 *)(a1 + 23);
    if (!*(_BYTE *)(a1 + 23))
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
      return;
    }
    v5 = (char *)(a1 + v4);
    v6 = (unsigned __int8 *)(a1 + v4 - 1);
    v7 = *v6;
    v8 = (char *)a1;
  }
  if (v7 == 93)
  {
    v9 = sub_20BFB9C14(a1, v6);
    if (&v8[v4] != (char *)v9)
      v5 = (char *)v9;
  }
  sub_20BE93368(&__p, v8, v5, v5 - v8);
  sub_20BDDC0E4(v18, "\\[");
  sub_20BDDC0E4(v16, "[");
  pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)&__p, (unsigned __int8 *)v18, (unsigned __int8 *)v16, &v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v20;
  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 0;
  v20.__r_.__value_.__s.__data_[0] = 0;
  if (v17 < 0)
    operator delete(v16[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  sub_20BDDC0E4(v18, "\\]");
  sub_20BDDC0E4(v16, "]");
  pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)&__p, (unsigned __int8 *)v18, (unsigned __int8 *)v16, &v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v20;
  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 0;
  v20.__r_.__value_.__s.__data_[0] = 0;
  if (v17 < 0)
    operator delete(v16[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = (char *)a1;
  else
    v11 = *(char **)a1;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  sub_20BE93368(&v20, v5, &v11[v10], &v11[v10] - v5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v14 = std::string::insert(&v20, 0, (const std::string::value_type *)p_p, size);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)&v14->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BFBA69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  void *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  char *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  std::string::size_type v22;
  __int128 v23;
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  std::string __dst;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  LODWORD(v4) = *(char *)(a1 + 23);
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80000000) != 0)
  {
    v6 = *(_QWORD *)a1;
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
    {
      v7 = *(_QWORD *)a1;
      if (*(_BYTE *)(v6 + v8 - 1) == 93)
        goto LABEL_7;
    }
LABEL_22:
    v12 = (unsigned __int8 *)(v6 + v8);
    if ((v4 & 0x80000000) != 0)
      goto LABEL_17;
LABEL_23:
    v17 = (unsigned __int8 *)(a1 + v5);
    if (v12 != (unsigned __int8 *)(a1 + v5))
    {
      v18 = sub_20BFB9C14(a1, v12);
      if (v17 != v18)
      {
        v16 = (char *)v18;
        __dst = *(std::string *)a1;
        goto LABEL_26;
      }
    }
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = 0;
    __dst.__r_.__value_.__r.__words[0] = 0;
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
LABEL_34:
    v22 = __dst.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = v22;
    *(_QWORD *)(a2 + 39) = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7);
    *(_BYTE *)(a2 + 47) = 0;
    return;
  }
  if (!*(_BYTE *)(a1 + 23))
  {
    v8 = 0;
    v6 = a1;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + v5 - 1) != 93)
  {
LABEL_20:
    v6 = a1;
    v8 = *(unsigned __int8 *)(a1 + 23);
    goto LABEL_22;
  }
  v6 = *(_QWORD *)a1;
  v7 = a1;
  v8 = *(unsigned __int8 *)(a1 + 23);
LABEL_7:
  v9 = v7 + v8;
  do
  {
    if ((v4 & 0x80000000) != 0)
    {
      if (v9 == v6)
      {
        v8 = *(_QWORD *)(a1 + 8);
        goto LABEL_22;
      }
    }
    else if (v9 == a1)
    {
      goto LABEL_20;
    }
    v11 = *(unsigned __int8 *)--v9;
    v10 = v11;
  }
  while (v11 == 93);
  if (v10 == 92)
    v12 = (unsigned __int8 *)(v9 + 2);
  else
    v12 = (unsigned __int8 *)(v9 + 1);
  if ((v4 & 0x80000000) == 0)
    goto LABEL_23;
LABEL_17:
  v13 = *(void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v14 = (unsigned __int8 *)(*(_QWORD *)a1 + v4);
  if (v12 == v14 || (v15 = sub_20BFB9C14(a1, v12), v14 == v15))
  {
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = 0;
    __dst.__r_.__value_.__r.__words[0] = 0;
    sub_20BDDBFAC((_BYTE *)a2, v13, v4);
    goto LABEL_34;
  }
  v16 = (char *)v15;
  sub_20BDDBFAC(&__dst, v13, v4);
  LOBYTE(v4) = *(_BYTE *)(a1 + 23);
LABEL_26:
  if ((v4 & 0x80u) == 0)
    v19 = a1;
  else
    v19 = *(_QWORD *)a1;
  std::string::erase(&__dst, (std::string::size_type)&v16[-v19], v12 - (unsigned __int8 *)v16 + 1);
  sub_20BE93368(__p, v16 + 1, (char *)v12, v12 - (unsigned __int8 *)(v16 + 1));
  sub_20BFBA440((uint64_t)__p, (uint64_t)&v23);
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
  v20 = v23;
  *(_OWORD *)__p = v23;
  v21 = v24;
  v26 = v24;
  *(std::string *)a2 = __dst;
  *(_OWORD *)(a2 + 24) = v20;
  *(_QWORD *)(a2 + 40) = v21;
}

void sub_20BFBA95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _Unwind_Resume(exception_object);
}

void sub_20BFBA99C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  unsigned __int8 *v6;
  int v7;
  char *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  char *v11;
  std::string *p_p;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  std::string v20;
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
  {
    v8 = *(char **)a1;
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
    {
      sub_20BDDBFAC((_BYTE *)a2, *(void **)a1, 0);
      return;
    }
    v5 = &v8[v4];
    v6 = (unsigned __int8 *)&v8[v4 - 1];
    v7 = *v6;
  }
  else
  {
    v4 = *(unsigned __int8 *)(a1 + 23);
    if (!*(_BYTE *)(a1 + 23))
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
      return;
    }
    v5 = (char *)(a1 + v4);
    v6 = (unsigned __int8 *)(a1 + v4 - 1);
    v7 = *v6;
    v8 = (char *)a1;
  }
  if (v7 == 93)
  {
    v9 = sub_20BFB9C14(a1, v6);
    if (&v8[v4] != (char *)v9)
      v5 = (char *)v9;
  }
  sub_20BE93368(&__p, v8, v5, v5 - v8);
  sub_20BDDC0E4(v18, "[");
  sub_20BDDC0E4(v16, "\\[");
  pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)&__p, (unsigned __int8 *)v18, (unsigned __int8 *)v16, &v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v20;
  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 0;
  v20.__r_.__value_.__s.__data_[0] = 0;
  if (v17 < 0)
    operator delete(v16[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  sub_20BDDC0E4(v18, "]");
  sub_20BDDC0E4(v16, "\\]");
  pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)&__p, (unsigned __int8 *)v18, (unsigned __int8 *)v16, &v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v20;
  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 0;
  v20.__r_.__value_.__s.__data_[0] = 0;
  if (v17 < 0)
    operator delete(v16[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = (char *)a1;
  else
    v11 = *(char **)a1;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  sub_20BE93368(&v20, v5, &v11[v10], &v11[v10] - v5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v14 = std::string::insert(&v20, 0, (const std::string::value_type *)p_p, size);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)&v14->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BFBABF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void sub_20BFBAC6C()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_RESOLVER))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_RESOLVER);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_RESOLVER);
  }
}

void sub_20BFBACB0()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_URI_RESOLVERS))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_URI_RESOLVERS);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_URI_RESOLVERS);
  }
}

void sub_20BFBACF4()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_STRICT_SCHEME_VALIDATION))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_STRICT_SCHEME_VALIDATION);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_STRICT_SCHEME_VALIDATION);
  }
}

std::string *pxrInternal__aapl__pxrReserved__::ArSetPreferredResolver(std::string *__str)
{
  std::string *v2;

  v2 = (std::string *)atomic_load(&qword_254985718);
  if (!v2)
    v2 = (std::string *)sub_20BF1C730(&qword_254985718);
  return std::string::operator=(v2, __str);
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArResolver::ArResolver(_QWORD *this)
{
  *this = off_24C5238F8;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifierForNewAsset(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::Resolve(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::ResolveForNewAsset(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::BindContext(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::UnbindContext(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContext(pxrInternal__aapl__pxrReserved__::ArResolver *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::ArResolver *))(*(_QWORD *)this + 64))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateContextFromString(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateContextFromString@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  sub_20BFBAE3C();
  return sub_20BFBAEC0(a1, a2, a3);
}

void sub_20BFBAE3C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254985860);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254985860))
    {
      sub_20BFBC670();
      __cxa_atexit((void (*)(void *))sub_20BFBE354, qword_254985740, &dword_20BDBC000);
      __cxa_guard_release(&qword_254985860);
    }
  }
}

void sub_20BFBAEA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985860);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFBAEC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    result = sub_20BFC1708((int8x8_t *)qword_254985740, (unsigned __int8 *)a1, 0);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 80))(result, a2);
  }
  else
  {
    result = sub_20BFC1858(qword_254985748);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 80))(result, a2);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::ArResolver::CreateContextFromStrings(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7[3];
  uint64_t v8[3];
  void ***v9;

  sub_20BFBAE3C();
  memset(v8, 0, sizeof(v8));
  sub_20BFC4020(v8, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4));
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      v6 = v4 + 24;
      sub_20BFBAEC0(v4, v4 + 24, v7);
      if (v7[0] != v7[1])
        sub_20BFC3404(v8, (uint64_t)v7);
      v9 = v7;
      sub_20BDE9EB0((void ***)&v9);
      v4 = v6 + 24;
    }
    while (v6 + 24 != v5);
  }
  pxrInternal__aapl__pxrReserved__::ArResolverContext::ArResolverContext(a2, v8);
  v7[0] = (void **)v8;
  sub_20BE104D4(v7);
}

void sub_20BFBB00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  sub_20BE104D4(&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::RefreshContext(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::GetCurrentContext(pxrInternal__aapl__pxrReserved__::ArResolver *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::ArResolver *))(*(_QWORD *)this + 96))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::GetAssetInfo(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::GetModificationTimestamp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::OpenAssetForWrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CanWriteAssetToPath(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::IsContextDependentPath(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::BeginCacheScope(pxrInternal__aapl__pxrReserved__::ArResolver *this, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::ArResolver *, pxrInternal__aapl__pxrReserved__::VtValue *))(*(_QWORD *)this + 160))(this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::EndCacheScope(pxrInternal__aapl__pxrReserved__::ArResolver *this, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::ArResolver *, pxrInternal__aapl__pxrReserved__::VtValue *))(*(_QWORD *)this + 168))(this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::IsRepositoryPath(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::ArResolver::IsRelativePath(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  return v2 && pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2);
}

void pxrInternal__aapl__pxrReserved__::ArResolver::_CreateDefaultContext(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void pxrInternal__aapl__pxrReserved__::ArResolver::_CreateDefaultContextForAsset(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void pxrInternal__aapl__pxrReserved__::ArResolver::_CreateContextFromString(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void pxrInternal__aapl__pxrReserved__::ArResolver::_GetCurrentContext(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void pxrInternal__aapl__pxrReserved__::ArResolver::_GetExtension(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfGetExtension(a1, a2);
}

double pxrInternal__aapl__pxrReserved__::ArResolver::_GetAssetInfo@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

double pxrInternal__aapl__pxrReserved__::ArResolver::_GetModificationTimestamp()
{
  return NAN;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::_CanWriteAssetToPath()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::_IsContextDependentPath()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::_IsRepositoryPath()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::_GetInternallyManagedCurrentContext(pxrInternal__aapl__pxrReserved__::ArResolver *this)
{
  _QWORD *v1;
  uint64_t v2;
  char v4;

  sub_20BFBAE3C();
  v4 = 0;
  v1 = (_QWORD *)sub_20BEB5B80(qword_2549857A0, &v4);
  v2 = v1[1];
  if (*v1 == v2)
    return 0;
  else
    return *(_QWORD *)(v2 - 8);
}

uint64_t *pxrInternal__aapl__pxrReserved__::ArGetResolver(pxrInternal__aapl__pxrReserved__ *this)
{
  sub_20BFBAE3C();
  return qword_254985740;
}

uint64_t *pxrInternal__aapl__pxrReserved__::ArGetRegisteredURISchemes(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254985738);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254985738))
  {
    sub_20BFBAE3C();
    sub_20BFBB274();
    __cxa_atexit((void (*)(void *))sub_20BFBB378, &qword_254985720, &dword_20BDBC000);
    __cxa_guard_release(&qword_254985738);
  }
  return &qword_254985720;
}

void sub_20BFBB25C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985738);
  _Unwind_Resume(a1);
}

void sub_20BFBB274()
{
  _QWORD *v0;
  const void **i;
  __int128 *v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE v5[9];

  qword_254985720 = 0;
  qword_254985728 = 0;
  qword_254985730 = 0;
  sub_20BE71C2C(&qword_254985720, *((unint64_t *)&xmmword_254985768 + 1));
  v0 = (_QWORD *)xmmword_254985768;
  for (i = (const void **)qword_254985728; v0; v0 = (_QWORD *)*v0)
  {
    v2 = (__int128 *)(v0 + 2);
    if ((unint64_t)i >= qword_254985730)
    {
      i = (const void **)sub_20BF3E2A4(&qword_254985720, v2);
    }
    else
    {
      sub_20BE4EDF4(&qword_254985720, v2);
      i += 3;
    }
    qword_254985728 = (uint64_t)i;
  }
  v3 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)i - qword_254985720) >> 3));
  if (i == (const void **)qword_254985720)
    v4 = 0;
  else
    v4 = v3;
  sub_20BEDAFAC(qword_254985720, i, (uint64_t)v5, v4, 1);
}

void sub_20BFBB35C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_20BFBB378(void **a1)
{
  void **v3;

  v3 = a1;
  sub_20BDE5038(&v3);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArGetUnderlyingResolver(pxrInternal__aapl__pxrReserved__ *this)
{
  sub_20BFBAE3C();
  return sub_20BFC1858(qword_254985748);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArGetAvailableResolvers@<X0>(const std::type_info *a1@<X1>, char *a2@<X2>, char **a3@<X8>)
{
  const std::type_info *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v21[3];
  uint64_t v22;
  uint64_t v23;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_20BFBB758(a1, a2, v21);
  sub_20BFBB54C(v21, v5, v6, &v22);
  sub_20BFBBFD4((uint64_t)v21);
  v7 = v22;
  v8 = v23;
  if (v22 != v23)
  {
    v9 = 0;
    v10 = a3 + 2;
    do
    {
      if ((unint64_t)v9 >= *v10)
      {
        v11 = (v9 - *a3) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          sub_20BDDF694();
        v12 = *v10 - (_QWORD)*a3;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)sub_20BDDF6A8((uint64_t)(a3 + 2), v14);
        else
          v15 = 0;
        v16 = &v15[8 * v11];
        *(_QWORD *)v16 = *(_QWORD *)(v7 + 16);
        v9 = v16 + 8;
        v18 = *a3;
        v17 = a3[1];
        if (v17 != *a3)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          v17 = *a3;
        }
        *a3 = v16;
        a3[1] = v9;
        a3[2] = &v15[8 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v9 = *(_QWORD *)(v7 + 16);
        v9 += 8;
      }
      a3[1] = v9;
      v7 += 56;
    }
    while (v7 != v8);
  }
  return sub_20BFBBFD4((uint64_t)&v22);
}

void sub_20BFBB50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BFBBFD4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFBB54C@<X0>(uint64_t *a1@<X0>, const std::type_info *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD **v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD v19[4];
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v7 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_RESOLVER);
  if (!v7)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_RESOLVER);
    v7 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_RESOLVER);
  }
  v8 = *v7 == 0;
  v9 = *a1;
  v10 = a1[1];
  if (v8)
    v11 = *a1;
  else
    v11 = v21;
  if (v8)
    v12 = a1[1];
  else
    v12 = v22;
  if (v11 != v12)
  {
    while (1)
    {
      if (*(_BYTE *)(v11 + 48) && *(_QWORD *)(v11 + 16) != v6)
      {
        v13 = (_QWORD **)atomic_load(&qword_254985870);
        if (!v13)
          v13 = (_QWORD **)sub_20BFC41F8(&qword_254985870);
        v14 = *v13;
        v15 = atomic_load(&qword_254985870);
        if (!v15)
          v15 = sub_20BFC41F8(&qword_254985870);
        v16 = *(_QWORD **)(v15 + 8);
        if (v14 != v16)
        {
          do
          {
            if (*v14 == *(_QWORD *)(v11 + 16))
              goto LABEL_20;
            ++v14;
          }
          while (v14 != v16);
          v14 = *(_QWORD **)(v15 + 8);
        }
LABEL_20:
        v17 = atomic_load(&qword_254985870);
        if (!v17)
          v17 = sub_20BFC41F8(&qword_254985870);
        if (v14 == *(_QWORD **)(v17 + 8))
          sub_20BFC40D0(a4, v11);
      }
      v11 += 56;
      if (v11 == v12)
      {
        v9 = *a1;
        v10 = a1[1];
        break;
      }
    }
  }
  while (v9 != v10)
  {
    if (*(_QWORD *)(v9 + 16) == v6)
    {
      sub_20BFC40D0(a4, v9);
      break;
    }
    v9 += 56;
  }
  if (*(_QWORD *)(a4[1] - 40) != v6)
  {
    v19[0] = "ar/resolver.cpp";
    v19[1] = "_GetAvailablePrimaryResolvers";
    v19[2] = 348;
    v19[3] = "std::vector<_ResolverInfo> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_GetAvailablePrimaryRes"
             "olvers(const std::vector<_ResolverInfo> &)";
    v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v19, "availablePrimaryResolvers.back().type == defaultResolverType", 0);
  }
  return sub_20BFBBFD4((uint64_t)&v21);
}

void sub_20BFBB728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_20BFBBFD4((uint64_t)va);
  sub_20BFBBFD4(v6);
  _Unwind_Resume(a1);
}

void sub_20BFBB758(const std::type_info *a1@<X1>, char *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  pxrInternal__aapl__pxrReserved__::PlugRegistry *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t *);
  char v11;
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  uint64_t *EmptyString;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t JsArray;
  pxrInternal__aapl__pxrReserved__::JsValue *v19;
  pxrInternal__aapl__pxrReserved__::JsValue *v20;
  unint64_t v21;
  const char *v22;
  pxrInternal__aapl__pxrReserved__::JsValue **v23;
  pxrInternal__aapl__pxrReserved__::JsValue *v24;
  pxrInternal__aapl__pxrReserved__::JsValue *v25;
  uint64_t v26;
  unint64_t String;
  __int128 v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _OWORD *v49;
  __int16 v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t TypeName;
  const char *v62;
  unint64_t *p_shared_owners;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  __int128 __dst;
  uint64_t v69;
  _BYTE v70[27];
  _BYTE v71[8];
  std::__shared_weak_count *v72;
  char v73;
  __int128 v74;
  uint64_t v75;
  _BYTE v76[24];
  __int128 v77;
  pxrInternal__aapl__pxrReserved__::TfType *v78;
  pxrInternal__aapl__pxrReserved__::TfType *v79;
  uint64_t v80;
  unint64_t *v81;
  std::__shared_weak_count *v82;
  _OWORD *v83;

  v78 = 0;
  v79 = 0;
  v80 = 0;
  *((_QWORD *)&__dst + 1) = 0;
  v69 = 0;
  *(_QWORD *)&__dst = (char *)&__dst + 8;
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(*v4, (uint64_t **)&__dst);
  sub_20BFC44D0(&v78, (_QWORD *)__dst, (_QWORD *)&__dst + 1);
  v5 = 126 - 2 * __clz((v79 - v78) >> 3);
  if (v79 == v78)
    v6 = 0;
  else
    v6 = v5;
  sub_20BFC4C1C((uint64_t)v78, v79, v6, 1);
  sub_20BE6100C((uint64_t)&__dst, *((_QWORD **)&__dst + 1));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v8 = v78;
  v7 = v79;
  v9 = v79 - v78;
  if (v79 != v78)
  {
    if ((unint64_t)v9 >= 0x2492492492492491)
      sub_20BDDF694();
    sub_20BFC42F8(&__dst, v9 >> 3, 0, (uint64_t)(a3 + 2));
    sub_20BFC4374(a3, &__dst);
    sub_20BFC4420((uint64_t)&__dst);
    v8 = v78;
    v7 = v79;
  }
  if (v8 != v7)
  {
    while (1)
    {
      sub_20BFC4528(v8, &v77);
      v10 = sub_20BF46110(&v77);
      if (!(v11 & 1 | (unint64_t)v10))
        goto LABEL_89;
      memset(v76, 0, sizeof(v76));
      v12 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_20BF444D8((uint64_t *)&v77);
      pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadataForType(v12, v8, (uint64_t *)&__dst);
      v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFC1030();
      if ((*((_QWORD *)v13 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*((_QWORD *)v13 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      LOBYTE(v74) = 0;
      LOBYTE(v75) = 0;
      pxrInternal__aapl__pxrReserved__::JsFindValue((uint64_t)&__dst, (uint64_t)EmptyString, (uint64_t)&v74, (uint64_t)&v81);
      if ((_BYTE)v75)
      {
        v15 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
        if (*((_QWORD *)&v74 + 1))
        {
          v16 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
      sub_20BE78E5C((uint64_t)&__dst, *((_QWORD **)&__dst + 1));
      if (!(_BYTE)v83)
        goto LABEL_41;
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)&v81))
        break;
LABEL_24:
      *(_QWORD *)&__dst = "ar/resolver.cpp";
      *((_QWORD *)&__dst + 1) = "_GetAvailableResolvers";
      v69 = 273;
      *(_QWORD *)v70 = "std::vector<_ResolverInfo> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_GetAvailableResolvers()";
      v70[8] = 0;
      v21 = *(_QWORD *)(sub_20BFC1030() + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v21)
      {
        v22 = (const char *)(v21 + 16);
        if (*(char *)(v21 + 39) < 0)
          v22 = *(const char **)v22;
      }
      else
      {
        v22 = "";
      }
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
      if (*(char *)(TypeName + 23) >= 0)
        v62 = (const char *)TypeName;
      else
        v62 = *(const char **)TypeName;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"'%s' metadata for %s must be a list of strings.", v22, v62);
      if (!(_BYTE)v83)
        goto LABEL_88;
      v58 = v82;
      if (!v82)
        goto LABEL_88;
      p_shared_owners = (unint64_t *)&v82->__shared_owners_;
      do
        v60 = __ldaxr(p_shared_owners);
      while (__stlxr(v60 - 1, p_shared_owners));
LABEL_86:
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
LABEL_88:
      *(_QWORD *)&__dst = v76;
      sub_20BDE5038((void ***)&__dst);
LABEL_89:
      v64 = *((_QWORD *)&v77 + 1);
      if (*((_QWORD *)&v77 + 1))
      {
        v65 = (unsigned int *)(*((_QWORD *)&v77 + 1) + 8);
        do
        {
          v66 = __ldxr(v65);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, v65));
        if (!v67)
          (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
      }
      v8 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)((char *)v8 + 8);
      if (v8 == v7)
      {
        v7 = v78;
        goto LABEL_96;
      }
    }
    JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(&v81);
    v19 = *(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray;
    v20 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(JsArray + 8);
    while (v19 != v20)
    {
      if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v19))
        goto LABEL_24;
      v19 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v19 + 16);
    }
    v23 = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(&v81);
    sub_20BDE4F04(&v74, (v23[1] - *v23) >> 4);
    v24 = *v23;
    v25 = v23[1];
    if (v24 != v25)
    {
      v26 = v74;
      do
      {
        String = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v24);
        if (*(char *)(String + 23) < 0)
        {
          sub_20BDDBFAC(&__dst, *(void **)String, *(_QWORD *)(String + 8));
        }
        else
        {
          v28 = *(_OWORD *)String;
          v69 = *(_QWORD *)(String + 16);
          __dst = v28;
        }
        if (*(char *)(v26 + 23) < 0)
          operator delete(*(void **)v26);
        v29 = __dst;
        *(_QWORD *)(v26 + 16) = v69;
        *(_OWORD *)v26 = v29;
        v26 += 24;
        v24 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v24 + 16);
      }
      while (v24 != v25);
    }
    sub_20BE7598C((uint64_t *)v76);
    *(_OWORD *)v76 = v74;
    *(_QWORD *)&v76[16] = v75;
    v75 = 0;
    v74 = 0uLL;
    *(_QWORD *)&__dst = &v74;
    sub_20BDE5038((void ***)&__dst);
    if ((_BYTE)v83)
    {
      v30 = v82;
      if (v82)
      {
        v31 = (unint64_t *)&v82->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
LABEL_41:
    v33 = sub_20BFC1030();
    sub_20BFC45E4((pxrInternal__aapl__pxrReserved__::TfType *)(v33 + 16), v8, &v74);
    v34 = sub_20BFC1030();
    sub_20BFC45E4((pxrInternal__aapl__pxrReserved__::TfType *)(v34 + 24), v8, v71);
    __dst = 0uLL;
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v69);
    *(_OWORD *)v70 = 0uLL;
    *(_DWORD *)&v70[23] = 0;
    *(_QWORD *)&v70[16] = 0;
    v35 = (unsigned int *)*((_QWORD *)&__dst + 1);
    __dst = v77;
    if (*((_QWORD *)&v77 + 1))
    {
      v36 = (unsigned int *)(*((_QWORD *)&v77 + 1) + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    if (v35)
    {
      v38 = v35 + 2;
      do
      {
        v39 = __ldxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
        (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
    }
    v69 = *(_QWORD *)v8;
    sub_20BE7598C((uint64_t *)v70);
    *(_QWORD *)v70 = *(_QWORD *)v76;
    *(_OWORD *)&v70[8] = *(_OWORD *)&v76[8];
    memset(v76, 0, sizeof(v76));
    v70[24] = *(_QWORD *)v70 == *(_QWORD *)&v70[8];
    if ((_BYTE)v75)
      v70[25] = pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)&v74);
    if (v73)
      v70[26] = pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)v71);
    v41 = a3[1];
    v42 = a3[2];
    if (v41 >= v42)
    {
      v45 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v41 - *a3) >> 3);
      v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) > 0x492492492492492)
        sub_20BDDF694();
      v47 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v42 - *a3) >> 3);
      if (2 * v47 > v46)
        v46 = 2 * v47;
      if (v47 >= 0x249249249249249)
        v48 = 0x492492492492492;
      else
        v48 = v46;
      sub_20BFC42F8(&v81, v48, v45, (uint64_t)(a3 + 2));
      v49 = v83;
      *v83 = __dst;
      __dst = 0uLL;
      *((_QWORD *)v49 + 2) = v69;
      *((_QWORD *)v49 + 3) = 0;
      *((_QWORD *)v49 + 4) = 0;
      *((_QWORD *)v49 + 5) = 0;
      *(_OWORD *)((char *)v49 + 24) = *(_OWORD *)v70;
      *((_QWORD *)v49 + 5) = *(_QWORD *)&v70[16];
      memset(v70, 0, 24);
      v50 = *(_WORD *)&v70[24];
      *((_BYTE *)v49 + 50) = v70[26];
      *((_WORD *)v49 + 24) = v50;
      v83 = (_OWORD *)((char *)v83 + 56);
      sub_20BFC4374(a3, &v81);
      v44 = a3[1];
      sub_20BFC4420((uint64_t)&v81);
    }
    else
    {
      *(_OWORD *)v41 = __dst;
      __dst = 0uLL;
      *(_QWORD *)(v41 + 16) = v69;
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0;
      *(_QWORD *)(v41 + 40) = 0;
      *(_OWORD *)(v41 + 24) = *(_OWORD *)v70;
      *(_QWORD *)(v41 + 40) = *(_QWORD *)&v70[16];
      memset(v70, 0, 24);
      v43 = *(_WORD *)&v70[24];
      *(_BYTE *)(v41 + 50) = v70[26];
      *(_WORD *)(v41 + 48) = v43;
      v44 = v41 + 56;
    }
    a3[1] = v44;
    v81 = (unint64_t *)v70;
    sub_20BDE5038((void ***)&v81);
    v51 = *((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v52 = (unsigned int *)(*((_QWORD *)&__dst + 1) + 8);
      do
      {
        v53 = __ldxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    }
    if (v73)
    {
      v55 = v72;
      if (v72)
      {
        v56 = (unint64_t *)&v72->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
    }
    if (!(_BYTE)v75)
      goto LABEL_88;
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
    if (!*((_QWORD *)&v74 + 1))
      goto LABEL_88;
    v59 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    goto LABEL_86;
  }
LABEL_96:
  if (v7)
  {
    v79 = v7;
    operator delete(v7);
  }
}

void sub_20BFBBE74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  sub_20BFBBFD4(v1);
  v4 = *(void **)(v2 - 152);
  if (v4)
  {
    *(_QWORD *)(v2 - 144) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20BFBBFD4(uint64_t a1)
{
  void *v2;
  uint64_t i;

  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    for (i = *(_QWORD *)(a1 + 8); (void *)i != v2; sub_20BFC4470(i))
      i -= 56;
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(*(void **)a1);
  }
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArCreateResolver@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, char *a2@<X2>, pxrInternal__aapl__pxrReserved__::ArDefaultResolver **a3@<X8>)
{
  return sub_20BFBC038(this, 0, a2, a3);
}

_QWORD *sub_20BFBC038@<X0>(pxrInternal__aapl__pxrReserved__::TfType *a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, pxrInternal__aapl__pxrReserved__::ArDefaultResolver **a4@<X8>)
{
  unint64_t v4;
  void **v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  const std::type_info *v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  uint64_t (*v25)(uint64_t *);
  char v26;
  unsigned int *v27;
  unsigned int v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  const char *v47;
  uint64_t TypeName;
  const char *v49;
  char *v50;
  uint64_t v51;
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver *v52;
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver *v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  _QWORD v66[5];

  v4 = a2;
  v66[4] = *MEMORY[0x24BDAC8D0];
  v7 = (void **)atomic_load(&qword_254985870);
  if (!v7)
    v7 = (void **)sub_20BFC41F8(&qword_254985870);
  v8 = (unint64_t)v7[2];
  v9 = v7[1];
  if ((unint64_t)v9 >= v8)
  {
    v11 = ((char *)v9 - (_BYTE *)*v7) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20BDDF694();
    v12 = v8 - (_QWORD)*v7;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      a2 = 0x1FFFFFFFFFFFFFFFLL;
    else
      a2 = v13;
    if (a2)
      v14 = (char *)sub_20BDDF6A8((uint64_t)(v7 + 2), a2);
    else
      v14 = 0;
    v15 = &v14[8 * v11];
    v16 = &v14[8 * a2];
    *(_QWORD *)v15 = *(_QWORD *)a1;
    v10 = v15 + 8;
    v18 = (char *)*v7;
    v17 = (char *)v7[1];
    if (v17 != *v7)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*v7;
    }
    *v7 = v15;
    v7[1] = v10;
    v7[2] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v9 = *(_QWORD *)a1;
    v10 = v9 + 1;
  }
  v7[1] = v10;
  v66[3] = v66;
  v66[0] = &off_24C524010;
  v56 = v20;
  *a4 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v57);
  if (*(_QWORD *)a1 == (_QWORD)v57)
  {
    *(_QWORD *)&v57 = "ar/resolver.cpp";
    *((_QWORD *)&v57 + 1) = "_CreateResolver";
    v58 = 430;
    v59 = "std::unique_ptr<ArResolver> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CreateResolver(const TfT"
          "ype &, std::string *)";
    LOBYTE(v60) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid resolver type");
LABEL_58:
    if (v4)
    {
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v56);
      if (*(char *)(TypeName + 23) >= 0)
        v51 = TypeName;
      else
        v51 = *(_QWORD *)TypeName;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Using default asset resolver %s", v49, v50, v51);
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      *(_OWORD *)v4 = v57;
      *(_QWORD *)(v4 + 16) = v58;
    }
    v52 = (pxrInternal__aapl__pxrReserved__::ArDefaultResolver *)operator new(0x38uLL);
    pxrInternal__aapl__pxrReserved__::ArDefaultResolver::ArDefaultResolver(v52);
    *a4 = v52;
    return sub_20BF49CE8(v66);
  }
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)a1, *v23, v24) & 1) == 0)
  {
    *(_QWORD *)&v57 = "ar/resolver.cpp";
    *((_QWORD *)&v57 + 1) = "_CreateResolver";
    v58 = 435;
    v59 = "std::unique_ptr<ArResolver> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CreateResolver(const TfT"
          "ype &, std::string *)";
    LOBYTE(v60) = 0;
    v46 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
    if (*(char *)(v46 + 23) >= 0)
      v47 = (const char *)v46;
    else
      v47 = *(const char **)v46;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"Given type %s does not derive from ArResolver", v47);
    goto LABEL_58;
  }
  if (*(_QWORD *)a1 == v20)
    goto LABEL_58;
  sub_20BFC4528(a1, &v55);
  v25 = sub_20BF46110(&v55);
  if (v26 & 1 | (unint64_t)v25)
  {
    v57 = v55;
    if (*((_QWORD *)&v55 + 1))
    {
      v27 = (unsigned int *)(*((_QWORD *)&v55 + 1) + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v58 = *(_QWORD *)a1;
    LOBYTE(v59) = 0;
    v60 = 850045863;
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v65 = 0;
    sub_20BFC1930((uint64_t *)&v57, (uint64_t *)&v54);
    *a4 = v54;
    v54 = 0;
    v29 = v65;
    if (v65)
    {
      p_shared_owners = (unint64_t *)&v65->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    std::mutex::~mutex((std::mutex *)&v60);
    v32 = *((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
    {
      v33 = (unsigned int *)(*((_QWORD *)&v57 + 1) + 8);
      do
      {
        v34 = __ldxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    }
    if (v4 && *a4)
    {
      v36 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
      if (*(char *)(v36 + 23) >= 0)
        v37 = v36;
      else
        v37 = *(_QWORD *)v36;
      v38 = sub_20BF444D8((uint64_t *)&v55);
      v41 = (_QWORD *)(v38 + 32);
      if (*(char *)(v38 + 55) < 0)
        v41 = (_QWORD *)*v41;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Using asset resolver %s from plugin %s", v39, v40, v37, v41);
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      *(_OWORD *)v4 = v57;
      *(_QWORD *)(v4 + 16) = v58;
    }
  }
  v42 = *((_QWORD *)&v55 + 1);
  if (*((_QWORD *)&v55 + 1))
  {
    v43 = (unsigned int *)(*((_QWORD *)&v55 + 1) + 8);
    do
    {
      v44 = __ldxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  if (!*a4)
    goto LABEL_58;
  return sub_20BF49CE8(v66);
}

uint64_t *sub_20BFBC570()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BFBC62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFBC670()
{
  std::string::size_type v0;
  _QWORD *v1;
  const std::type_info *v2;
  char *v3;
  uint64_t v4;
  const std::type_info *v5;
  char *v6;
  const std::type_info *v7;
  char *v8;
  char *v9;
  std::string::size_type i;
  std::string::size_type size;
  uint64_t TypeName;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  void **v18;
  _BYTE *v19;
  const char *v20;
  unint64_t v21;
  unint64_t v22;
  const std::type_info *v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  const char *v28;
  unint64_t v29;
  std::string::size_type v30;
  std::string::size_type v31;
  uint64_t v32;
  const char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  const char *v39;
  char *v40;
  _OWORD *v41;
  _BYTE *v42;
  const char *v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  const char *v47;
  char *v48;
  uint64_t v49;
  __int128 *v50;
  __int128 *v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint8x8_t v56;
  unint64_t v57;
  unsigned __int8 **v58;
  unsigned __int8 *j;
  unint64_t v60;
  std::string::size_type v61;
  std::string *v62;
  char *v63;
  std::string *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  unsigned int CodePoint;
  unsigned int v69;
  const char *v70;
  char *v71;
  __int128 *v72;
  unsigned __int8 v73;
  uint64_t v74;
  BOOL v75;
  _OWORD *v76;
  __int128 v77;
  _BYTE *v78;
  _OWORD *v79;
  __int128 v80;
  uint64_t v81;
  int v82;
  std::string::size_type v83;
  uint64_t v84;
  char *v85;
  std::string *v86;
  uint64_t v87;
  std::string *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  char *v95;
  std::string *p_dst;
  uint64_t v97;
  uint64_t v98;
  int v99;
  std::string::size_type v100;
  uint64_t v101;
  char *v102;
  std::string *v103;
  uint64_t v104;
  std::string *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  const char *v109;
  char *v110;
  uint64_t v111;
  std::string *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t *p_shared_owners;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  std::string::size_type v121;
  unint64_t v122;
  uint8x8_t v123;
  unint64_t v124;
  unsigned __int8 **v125;
  unsigned __int8 *k;
  unint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  float v131;
  _BOOL4 v132;
  unint64_t v133;
  unint64_t v134;
  int8x8_t prime;
  void *v136;
  void *v137;
  uint64_t v138;
  _QWORD **v139;
  unint64_t v140;
  uint8x8_t v141;
  unint64_t v142;
  uint8x8_t v143;
  uint64_t v144;
  _QWORD *m;
  unint64_t v146;
  _QWORD *v147;
  unint64_t v148;
  void *v149;
  unint64_t *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t *v159;
  pxrInternal__aapl__pxrReserved__::PlugRegistry *AllDerivedTypes;
  std::string::size_type v161;
  uint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  void *v165;
  uint64_t v166;
  char *v167;
  __int128 v168;
  int64x2_t v169;
  std::string::__raw *v170;
  uint64_t *v171;
  uint64_t v172;
  const char *v173;
  char *v174;
  uint64_t v175;
  uint64_t (*v176)(uint64_t *);
  char v177;
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v178;
  pxrInternal__aapl__pxrReserved__::TfToken *v179;
  uint64_t *EmptyString;
  uint64_t v181;
  const char *v182;
  char *v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t JsArray;
  pxrInternal__aapl__pxrReserved__::JsValue *v189;
  pxrInternal__aapl__pxrReserved__::JsValue *v190;
  unint64_t v191;
  const char *v192;
  unint64_t v193;
  const char *v194;
  pxrInternal__aapl__pxrReserved__::JsValue **v195;
  pxrInternal__aapl__pxrReserved__::JsValue *v196;
  pxrInternal__aapl__pxrReserved__::JsValue *v197;
  uint64_t v198;
  unint64_t String;
  __int128 v200;
  __int128 v201;
  __int128 *n;
  char *v203;
  char *v204;
  std::string::size_type v205;
  char *v206;
  unsigned int *v207;
  unsigned int v208;
  _BYTE *v209;
  __int128 v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  __int128 v221;
  int64x2_t v222;
  uint64_t v223;
  uint64_t v224;
  __int128 *v225;
  uint64_t v226;
  const char *v227;
  char *v228;
  _QWORD *v229;
  uint64_t v230;
  const char *v231;
  uint64_t v232;
  const char *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::string::size_type v237;
  unsigned int *v238;
  unsigned int v239;
  unsigned int v240;
  std::string *v241;
  std::string *v242;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  pxrInternal__aapl__pxrReserved__::TfType *v247;
  pxrInternal__aapl__pxrReserved__::TfType *v248;
  unint64_t v249;
  int v250[2];
  _QWORD *v251;
  _QWORD *v252;
  void *__p;
  std::string v254;
  std::string v255;
  const char *v256;
  char v257;
  std::string __dst;
  unsigned int v259;
  _QWORD v260[2];
  __int128 v261;
  unint64_t v262;
  __int128 v263;
  uint64_t v264;
  _OWORD v265[2];
  float v266[8];

  qword_254985740[0] = (uint64_t)off_24C5239D0;
  *(_OWORD *)&qword_254985748 = 0u;
  *(_OWORD *)&qword_254985758 = 0u;
  xmmword_254985768 = 0u;
  dword_254985778 = 1065353216;
  xmmword_254985780 = 0u;
  *(_OWORD *)&qword_254985790 = 0u;
  sub_20BFC0544(qword_2549857A0);
  qword_254985800 = (uint64_t)&unk_24C51AE78;
  __dmb(0xBu);
  qword_254985808 = 0;
  __dmb(0xBu);
  qword_254985810 = 0;
  qword_254985800 = (uint64_t)off_24C523BA8;
  v1 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  v4 = 0;
  *v1 = off_24C523C08;
  qword_254985818 = (uint64_t)v1;
  do
    qword_254985740[++v4 + 32] = 0;
  while (v4 != 3);
  qword_254985838 = 0;
  qword_254985830 = 0;
  qword_254985840 = (uint64_t)algn_254985848;
  qword_254985828 = (uint64_t)sub_20BFC092C;
  sub_20BFBB758(v2, v3, (uint64_t *)&v251);
  __dst.__r_.__value_.__r.__words[0] = v261;
  sub_20BFBB54C((uint64_t *)&v251, v7, v8, (uint64_t *)&v255);
  if (sub_20BFC09C8(0))
  {
    memset(v265, 0, 24);
    sub_20BE71C2C((uint64_t *)v265, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v255.__r_.__value_.__l.__size_ - v255.__r_.__value_.__r.__words[0]) >> 3));
    size = v255.__r_.__value_.__l.__size_;
    for (i = v255.__r_.__value_.__r.__words[0]; i != size; i += 56)
    {
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(i + 16));
      v13 = (__int128 *)*((_QWORD *)&v265[0] + 1);
      if (*((_QWORD *)&v265[0] + 1) >= *(_QWORD *)&v265[1])
      {
        v15 = sub_20BE4EE50((uint64_t *)v265, (__int128 *)TypeName);
      }
      else
      {
        if (*(char *)(TypeName + 23) < 0)
        {
          sub_20BDDBFAC(*((_BYTE **)&v265[0] + 1), *(void **)TypeName, *(_QWORD *)(TypeName + 8));
        }
        else
        {
          v14 = *(_OWORD *)TypeName;
          *(_QWORD *)(*((_QWORD *)&v265[0] + 1) + 16) = *(_QWORD *)(TypeName + 16);
          *v13 = v14;
        }
        v15 = (uint64_t)v13 + 24;
      }
      *((_QWORD *)&v265[0] + 1) = v15;
    }
    pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", (std::string **)v265, (std::string *)&__p);
    *(_QWORD *)&v263 = v265;
    sub_20BDE5038((void ***)&v263);
    v18 = v254.__r_.__value_.__s.__data_[15] >= 0 ? &__p : (void **)__p;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Found primary asset resolver types: [%s]\n", v16, v17, v18);
    if (v254.__r_.__value_.__s.__data_[15] < 0)
      operator delete(__p);
  }
  v19 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_RESOLVER);
  if (!v19)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_RESOLVER);
    v19 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_RESOLVER);
  }
  if (*v19)
  {
    if (sub_20BFC09C8(0))
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Plugin asset resolver disabled via PXR_AR_DISABLE_PLUGIN_RESOLVER.\n", v20, v9);
    goto LABEL_56;
  }
  v21 = atomic_load(&qword_254985718);
  if (!v21)
    v21 = sub_20BF1C730(&qword_254985718);
  if (*(char *)(v21 + 23) < 0)
  {
    if (*(_QWORD *)(v21 + 8))
      goto LABEL_27;
  }
  else if (*(_BYTE *)(v21 + 23))
  {
LABEL_27:
    v22 = atomic_load(&qword_254985718);
    if (!v22)
      v22 = sub_20BF1C730(&qword_254985718);
    __p = (void *)pxrInternal__aapl__pxrReserved__::PlugRegistry::FindTypeByName(v22);
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v265);
    if (__p == *(void **)&v265[0])
    {
      *(_QWORD *)&v265[0] = "ar/resolver.cpp";
      *((_QWORD *)&v265[0] + 1) = "_InitializePrimaryResolver";
      *(_QWORD *)&v265[1] = 1088;
      *((_QWORD *)&v265[1] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_I"
                                  "nitializePrimaryResolver(const std::vector<_ResolverInfo> &)";
      LOBYTE(v266[0]) = 0;
      v36 = atomic_load(&qword_254985718);
      if (!v36)
        v36 = sub_20BF1C730(&qword_254985718);
      if (*(char *)(v36 + 23) < 0)
        v36 = *(_QWORD *)v36;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v265, (pxrInternal__aapl__pxrReserved__ *)"ArGetResolver(): Preferred resolver %s not found. Using default resolver.", v24, v36);
    }
    else
    {
      if ((pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)&__p, *v25, v26) & 1) != 0)
      {
        if (sub_20BFC09C8(0))
        {
          v29 = atomic_load(&qword_254985718);
          if (!v29)
            v29 = sub_20BF1C730(&qword_254985718);
          if (*(char *)(v29 + 23) < 0)
            v29 = *(_QWORD *)v29;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Using preferred resolver %s\n", v28, v9, v29);
        }
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      }
      else
      {
        *(_QWORD *)&v265[0] = "ar/resolver.cpp";
        *((_QWORD *)&v265[0] + 1) = "_InitializePrimaryResolver";
        *(_QWORD *)&v265[1] = 1094;
        *((_QWORD *)&v265[1] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::"
                                    "_InitializePrimaryResolver(const std::vector<_ResolverInfo> &)";
        LOBYTE(v266[0]) = 0;
        v37 = atomic_load(&qword_254985718);
        if (!v37)
          v37 = sub_20BF1C730(&qword_254985718);
        if (*(char *)(v37 + 23) < 0)
          v37 = *(_QWORD *)v37;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v265, (pxrInternal__aapl__pxrReserved__ *)"ArGetResolver(): Preferred resolver %s does not derive from ArResolver. Using default resolver.\n", v27, v37);
      }
    }
    goto LABEL_56;
  }
  v31 = v255.__r_.__value_.__l.__size_;
  v30 = v255.__r_.__value_.__r.__words[0];
  if (v255.__r_.__value_.__r.__words[0] == v255.__r_.__value_.__l.__size_)
  {
    *(_QWORD *)&v265[0] = "ar/resolver.cpp";
    *((_QWORD *)&v265[0] + 1) = "_InitializePrimaryResolver";
    *(_QWORD *)&v265[1] = 1103;
    *((_QWORD *)&v265[1] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_Ini"
                                "tializePrimaryResolver(const std::vector<_ResolverInfo> &)";
    LOBYTE(v266[0]) = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v265, "!primaryResolvers.empty()", 0))goto LABEL_56;
    v31 = v255.__r_.__value_.__l.__size_;
    v30 = v255.__r_.__value_.__r.__words[0];
  }
  __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)(v30 + 16);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v31 - v30) >> 3)) >= 3 && sub_20BFC09C8(0))
  {
    v32 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&__dst);
    if (*(char *)(v32 + 23) >= 0)
      v35 = v32;
    else
      v35 = *(_QWORD *)v32;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Found multiple primary asset resolvers, using %s\n", v33, v34, v35);
  }
LABEL_56:
  memset(v265, 0, 24);
  __p = qword_254985740;
  v254.__r_.__value_.__r.__words[0] = (std::string::size_type)&v255;
  v254.__r_.__value_.__l.__size_ = (std::string::size_type)v265;
  if ((sub_20BFC0A24((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::TfType *)&__dst, v9) & 1) == 0)
    sub_20BFC0A24((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::TfType *)&v261, v38);
  if (sub_20BFC09C8(0))
  {
    v41 = v265;
    if (SBYTE7(v265[1]) < 0)
      v41 = *(_OWORD **)&v265[0];
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): %s for primary resolver\n", v39, v40, v41);
  }
  if (SBYTE7(v265[1]) < 0)
    operator delete(*(void **)&v265[0]);
  sub_20BFBBFD4((uint64_t)&v255);
  v42 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_URI_RESOLVERS);
  if (!v42)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_URI_RESOLVERS);
    v42 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_URI_RESOLVERS);
  }
  if (*v42)
  {
    if (sub_20BFC09C8(0))
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Plugin URI asset resolvers disabled via PXR_AR_DISABLE_PLUGIN_URI_RESOLVERS.\n", v43, v44);
    goto LABEL_303;
  }
  memset(v265, 0, sizeof(v265));
  v266[0] = 1.0;
  v45 = v251;
  v244 = v252;
  if (v251 != v252)
  {
    v249 = 0;
    while (1)
    {
      if (sub_20BFC09C8(0))
      {
        v46 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v45 + 2));
        if (*(char *)(v46 + 23) >= 0)
          v49 = v46;
        else
          v49 = *(_QWORD *)v46;
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Found URI resolver %s\n", v47, v48, v49);
      }
      v261 = 0uLL;
      v262 = 0;
      sub_20BE71C2C((uint64_t *)&v261, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45[4] - v45[3]) >> 3));
      v50 = (__int128 *)v45[3];
      v51 = (__int128 *)v45[4];
      v245 = (uint64_t)v45;
      if (v50 != v51)
      {
        v247 = (pxrInternal__aapl__pxrReserved__::TfType *)(v45 + 2);
        while (1)
        {
          if (*((char *)v50 + 23) < 0)
          {
            sub_20BDDBFAC(&__dst, *(void **)v50, *((_QWORD *)v50 + 1));
          }
          else
          {
            v52 = *v50;
            __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)v50 + 2);
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v52;
          }
          pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii((unsigned __int8 *)&__dst, (uint64_t)&v255);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          __dst = v255;
          v53 = sub_20BEF33B4((uint64_t)&v265[1] + 8, (uint64_t)&__dst);
          v54 = *((_QWORD *)&v265[0] + 1);
          if (*((_QWORD *)&v265[0] + 1))
          {
            v55 = v53;
            v56 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v265 + 8));
            v56.i16[0] = vaddlv_u8(v56);
            v57 = v56.u32[0];
            if (v56.u32[0] > 1uLL)
            {
              v0 = v53;
              if (v53 >= *((_QWORD *)&v265[0] + 1))
                v0 = v53 % *((_QWORD *)&v265[0] + 1);
            }
            else
            {
              v0 = (*((_QWORD *)&v265[0] + 1) - 1) & v53;
            }
            v58 = *(unsigned __int8 ***)(*(_QWORD *)&v265[0] + 8 * v0);
            if (v58)
            {
              for (j = *v58; j; j = *(unsigned __int8 **)j)
              {
                v60 = *((_QWORD *)j + 1);
                if (v60 == v55)
                {
                  if ((sub_20BEB4EF8((uint64_t)v266, j + 16, (unsigned __int8 *)&__dst) & 1) != 0)
                  {
                    v255.__r_.__value_.__r.__words[0] = (std::string::size_type)"ar/resolver.cpp";
                    v255.__r_.__value_.__l.__size_ = (std::string::size_type)"_InitializeURIResolvers";
                    v255.__r_.__value_.__r.__words[2] = 1180;
                    v256 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_Initiali"
                           "zeURIResolvers(const std::vector<_ResolverInfo> &)";
                    v257 = 0;
                    v90 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v247);
                    v91 = *(char *)(v90 + 23);
                    v92 = *(_QWORD *)v90;
                    v93 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
                    v0 = __dst.__r_.__value_.__r.__words[0];
                    v94 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(*((_QWORD *)j + 5) + 16));
                    p_dst = &__dst;
                    if (v93 < 0)
                      p_dst = (std::string *)v0;
                    if (v91 >= 0)
                      v97 = v90;
                    else
                      v97 = v92;
                    if (*(char *)(v94 + 23) >= 0)
                      v98 = v94;
                    else
                      v98 = *(_QWORD *)v94;
                    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v255, (pxrInternal__aapl__pxrReserved__ *)"ArGetResolver(): %s registered to handle scheme '%s' which is already handled by %s. Ignoring.\n", v95, v97, p_dst, v98);
                    goto LABEL_172;
                  }
                }
                else
                {
                  if (v57 > 1)
                  {
                    if (v60 >= v54)
                      v60 %= v54;
                  }
                  else
                  {
                    v60 &= v54 - 1;
                  }
                  if (v60 != v0)
                    break;
                }
              }
            }
          }
          v61 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          v62 = &__dst;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            v61 = __dst.__r_.__value_.__l.__size_;
            v62 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          if (!v61)
            break;
          if (v62->__r_.__value_.__s.__data_[0] - 123 <= 0xFFFFFFE5)
          {
            LOBYTE(__p) = 0;
            v63 = "Scheme must start with ASCII 'a-z'";
LABEL_127:
            sub_20BDDC0E4(&v254, v63);
            goto LABEL_128;
          }
          v64 = &__dst;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v64 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          v65 = (unsigned __int8 *)&v64->__r_.__value_.__s.__data_[1];
          v66 = (unsigned __int8 *)v62 + v61;
          if (v61 != 1)
          {
            while (1)
            {
              v73 = *v65;
              if ((*v65 - 58) <= 0xF5u && (v73 - 123) <= 0xE5u)
              {
                v74 = (1 << v73) & 0x680000000000;
                v75 = *v65 > 0x2Eu || v74 == 0;
                if (v75)
                  break;
              }
              if (++v65 == v66)
                goto LABEL_126;
            }
          }
          if (v65 == v66)
          {
LABEL_126:
            LOBYTE(__p) = 1;
            v63 = "";
            goto LABEL_127;
          }
          v260[0] = v65;
          v260[1] = v66;
          CodePoint = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)v260);
          if (CodePoint - 57344 >= 0xFFFFF800 || CodePoint >= 0x110000)
            v69 = 65533;
          else
            v69 = CodePoint;
          v259 = v69;
          sub_20BFC0EE8(&v259);
          v72 = &v263;
          if (v264 < 0)
            v72 = (__int128 *)v263;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' not allowed in scheme. Characters must be ASCII 'a-z', '-', '+', or '.'", v70, v71, v72);
          LOBYTE(__p) = 0;
          v254 = v255;
          memset(&v255, 0, sizeof(v255));
          if (SHIBYTE(v264) < 0)
            operator delete((void *)v263);
LABEL_128:
          if ((_BYTE)__p)
          {
            v76 = (_OWORD *)*((_QWORD *)&v261 + 1);
            if (*((_QWORD *)&v261 + 1) >= v262)
            {
              v81 = sub_20BE4EE50((uint64_t *)&v261, (__int128 *)&__dst);
            }
            else
            {
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              {
                sub_20BDDBFAC(*((_BYTE **)&v261 + 1), __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
              }
              else
              {
                v77 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                *(_QWORD *)(*((_QWORD *)&v261 + 1) + 16) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
                *v76 = v77;
              }
              v81 = (uint64_t)v76 + 24;
            }
            *((_QWORD *)&v261 + 1) = v81;
          }
          else
          {
            v78 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_STRICT_SCHEME_VALIDATION);
            if (!v78)
            {
              pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_STRICT_SCHEME_VALIDATION);
              v78 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_STRICT_SCHEME_VALIDATION);
            }
            if (*v78)
            {
              v79 = (_OWORD *)*((_QWORD *)&v261 + 1);
              if (*((_QWORD *)&v261 + 1) >= v262)
              {
                v89 = sub_20BE4EE50((uint64_t *)&v261, (__int128 *)&__dst);
              }
              else
              {
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_20BDDBFAC(*((_BYTE **)&v261 + 1), __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                }
                else
                {
                  v80 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                  *(_QWORD *)(*((_QWORD *)&v261 + 1) + 16) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
                  *v79 = v80;
                }
                v89 = (uint64_t)v79 + 24;
              }
              *((_QWORD *)&v261 + 1) = v89;
              v255.__r_.__value_.__r.__words[0] = (std::string::size_type)"ar/resolver.cpp";
              v255.__r_.__value_.__l.__size_ = (std::string::size_type)"_InitializeURIResolvers";
              v255.__r_.__value_.__r.__words[2] = 1196;
              v256 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_InitializeURIR"
                     "esolvers(const std::vector<_ResolverInfo> &)";
              v257 = 0;
              v99 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
              v100 = __dst.__r_.__value_.__r.__words[0];
              v101 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v247);
              v103 = &__dst;
              if (v99 < 0)
                v103 = (std::string *)v100;
              if (*(char *)(v101 + 23) >= 0)
                v104 = v101;
              else
                v104 = *(_QWORD *)v101;
              v105 = &v254;
              if ((v254.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v105 = (std::string *)v254.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v255, (pxrInternal__aapl__pxrReserved__ *)"'%s' for '%s' is not a valid resource identifier scheme and will be restricted in future releases: %s", v102, v103, v104, v105);
            }
            else
            {
              v255.__r_.__value_.__r.__words[0] = (std::string::size_type)"ar/resolver.cpp";
              v255.__r_.__value_.__l.__size_ = (std::string::size_type)"_InitializeURIResolvers";
              v255.__r_.__value_.__r.__words[2] = 1206;
              v256 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_InitializeURIR"
                     "esolvers(const std::vector<_ResolverInfo> &)";
              v257 = 0;
              v82 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
              v83 = __dst.__r_.__value_.__r.__words[0];
              v84 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v247);
              v86 = &__dst;
              if (v82 < 0)
                v86 = (std::string *)v83;
              if (*(char *)(v84 + 23) >= 0)
                v87 = v84;
              else
                v87 = *(_QWORD *)v84;
              v88 = &v254;
              if ((v254.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v88 = (std::string *)v254.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v255, (pxrInternal__aapl__pxrReserved__ *)"'%s' for '%s' is not a valid resource identifier scheme: %s. Paths with this prefix will be handled by other resolvers. Set PXR_AR_DISABLE_STRICT_SCHEME_VALIDATION to disable strict scheme validation.", v85, v86, v87, v88);
            }
          }
          if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v254.__r_.__value_.__l.__data_);
LABEL_172:
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          v50 = (__int128 *)((char *)v50 + 24);
          if (v50 == v51)
            goto LABEL_175;
        }
        LOBYTE(__p) = 0;
        v63 = "Scheme cannot be empty";
        goto LABEL_127;
      }
LABEL_175:
      if ((_QWORD)v261 == *((_QWORD *)&v261 + 1))
        goto LABEL_285;
      if (sub_20BFC09C8(0))
      {
        v106 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v245 + 16));
        v107 = *(char *)(v106 + 23);
        v108 = *(_QWORD *)v106;
        pxrInternal__aapl__pxrReserved__::TfStringJoin("\", \"", (std::string **)&v261, &v255);
        if (v107 >= 0)
          v111 = v106;
        else
          v111 = v108;
        v112 = &v255;
        if ((v255.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v112 = (std::string *)v255.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Using %s for URI scheme(s) [\"%s\"]\n", v109, v110, v111, v112);
        if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v255.__r_.__value_.__l.__data_);
      }
      if (*(_QWORD *)(v245 + 16) == *(_QWORD *)(qword_254985748 + 16))
      {
        v113 = (std::__shared_weak_count *)qword_254985750;
        v246 = qword_254985748;
        if (qword_254985750)
        {
          v114 = (unint64_t *)(qword_254985750 + 8);
          do
            v115 = __ldxr(v114);
          while (__stxr(v115 + 1, v114));
        }
      }
      else
      {
        v113 = (std::__shared_weak_count *)operator new(0xC0uLL);
        v113->__shared_owners_ = 0;
        v113->__shared_weak_owners_ = 0;
        v113->__vftable = (std::__shared_weak_count_vtbl *)off_24C523CA0;
        *(_OWORD *)&v255.__r_.__value_.__l.__data_ = 0uLL;
        v246 = sub_20BFC0C64((uint64_t)&v113[1], v245, &v255);
      }
      v248 = (pxrInternal__aapl__pxrReserved__::TfType *)*((_QWORD *)&v261 + 1);
      v116 = v261;
      if ((_QWORD)v261 != *((_QWORD *)&v261 + 1))
      {
        p_shared_owners = (unint64_t *)&v113->__shared_owners_;
        while (2)
        {
          if (*(char *)(v116 + 23) < 0)
            v118 = *(_QWORD *)(v116 + 8);
          else
            v118 = *(unsigned __int8 *)(v116 + 23);
          v119 = v249;
          if (v118 > v249)
            v119 = v118;
          v249 = v119;
          v120 = sub_20BEF33B4((uint64_t)&v265[1] + 8, v116);
          v121 = v120;
          v122 = *((_QWORD *)&v265[0] + 1);
          if (*((_QWORD *)&v265[0] + 1))
          {
            v123 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v265 + 8));
            v123.i16[0] = vaddlv_u8(v123);
            v124 = v123.u32[0];
            if (v123.u32[0] > 1uLL)
            {
              v0 = v120;
              if (v120 >= *((_QWORD *)&v265[0] + 1))
                v0 = v120 % *((_QWORD *)&v265[0] + 1);
            }
            else
            {
              v0 = (*((_QWORD *)&v265[0] + 1) - 1) & v120;
            }
            v125 = *(unsigned __int8 ***)(*(_QWORD *)&v265[0] + 8 * v0);
            if (v125)
            {
              for (k = *v125; k; k = *(unsigned __int8 **)k)
              {
                v127 = *((_QWORD *)k + 1);
                if (v127 == v121)
                {
                  if ((sub_20BEB4EF8((uint64_t)v266, k + 16, (unsigned __int8 *)v116) & 1) != 0)
                    goto LABEL_269;
                }
                else
                {
                  if (v124 > 1)
                  {
                    if (v127 >= v122)
                      v127 %= v122;
                  }
                  else
                  {
                    v127 &= v122 - 1;
                  }
                  if (v127 != v0)
                    break;
                }
              }
            }
          }
          v128 = operator new(0x38uLL);
          v255.__r_.__value_.__r.__words[0] = (std::string::size_type)v128;
          v255.__r_.__value_.__l.__size_ = (std::string::size_type)&v265[1];
          *v128 = 0;
          v128[1] = v121;
          v129 = *(_QWORD *)(v116 + 16);
          *((_OWORD *)v128 + 1) = *(_OWORD *)v116;
          v128[4] = v129;
          *(_QWORD *)(v116 + 8) = 0;
          *(_QWORD *)(v116 + 16) = 0;
          *(_QWORD *)v116 = 0;
          v128[5] = v246;
          v128[6] = v113;
          if (v113)
          {
            do
              v130 = __ldxr(p_shared_owners);
            while (__stxr(v130 + 1, p_shared_owners));
          }
          v255.__r_.__value_.__s.__data_[16] = 1;
          v131 = (float)(unint64_t)(*((_QWORD *)&v265[1] + 1) + 1);
          if (v122 && (float)(v266[0] * (float)v122) >= v131)
            goto LABEL_260;
          v132 = (v122 & (v122 - 1)) == 0;
          if (v122 < 3)
            v132 = 0;
          v133 = (2 * v122) | !v132;
          v134 = vcvtps_u32_f32(v131 / v266[0]);
          if (v133 <= v134)
            prime = (int8x8_t)v134;
          else
            prime = (int8x8_t)v133;
          if (*(_QWORD *)&prime == 1)
          {
            prime = (int8x8_t)2;
          }
          else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
          {
            prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          }
          v122 = *((_QWORD *)&v265[0] + 1);
          if (*(_QWORD *)&prime <= *((_QWORD *)&v265[0] + 1))
          {
            if (*(_QWORD *)&prime < *((_QWORD *)&v265[0] + 1))
            {
              v142 = vcvtps_u32_f32((float)*((unint64_t *)&v265[1] + 1) / v266[0]);
              if (*((_QWORD *)&v265[0] + 1) < 3uLL
                || (v143 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v265 + 8)),
                    v143.i16[0] = vaddlv_u8(v143),
                    v143.u32[0] > 1uLL))
              {
                v142 = std::__next_prime(v142);
              }
              else
              {
                v144 = 1 << -(char)__clz(v142 - 1);
                if (v142 >= 2)
                  v142 = v144;
              }
              if (*(_QWORD *)&prime <= v142)
                prime = (int8x8_t)v142;
              if (*(_QWORD *)&prime >= v122)
              {
                v122 = *((_QWORD *)&v265[0] + 1);
              }
              else
              {
                if (prime)
                  goto LABEL_226;
                v149 = *(void **)&v265[0];
                *(_QWORD *)&v265[0] = 0;
                if (v149)
                  operator delete(v149);
                v122 = 0;
                *((_QWORD *)&v265[0] + 1) = 0;
              }
            }
          }
          else
          {
LABEL_226:
            if (*(_QWORD *)&prime >> 61)
              sub_20BDDF5B4();
            v136 = operator new(8 * *(_QWORD *)&prime);
            v137 = *(void **)&v265[0];
            *(_QWORD *)&v265[0] = v136;
            if (v137)
              operator delete(v137);
            v138 = 0;
            *((int8x8_t *)&v265[0] + 1) = prime;
            do
              *(_QWORD *)(*(_QWORD *)&v265[0] + 8 * v138++) = 0;
            while (*(_QWORD *)&prime != v138);
            v139 = *(_QWORD ***)&v265[1];
            if (*(_QWORD *)&v265[1])
            {
              v140 = *(_QWORD *)(*(_QWORD *)&v265[1] + 8);
              v141 = (uint8x8_t)vcnt_s8(prime);
              v141.i16[0] = vaddlv_u8(v141);
              if (v141.u32[0] > 1uLL)
              {
                if (v140 >= *(_QWORD *)&prime)
                  v140 %= *(_QWORD *)&prime;
              }
              else
              {
                v140 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)&v265[0] + 8 * v140) = &v265[1];
              for (m = *v139; m; v140 = v146)
              {
                v146 = m[1];
                if (v141.u32[0] > 1uLL)
                {
                  if (v146 >= *(_QWORD *)&prime)
                    v146 %= *(_QWORD *)&prime;
                }
                else
                {
                  v146 &= *(_QWORD *)&prime - 1;
                }
                if (v146 != v140)
                {
                  if (!*(_QWORD *)(*(_QWORD *)&v265[0] + 8 * v146))
                  {
                    *(_QWORD *)(*(_QWORD *)&v265[0] + 8 * v146) = v139;
                    goto LABEL_251;
                  }
                  *v139 = (_QWORD *)*m;
                  *m = **(_QWORD **)(*(_QWORD *)&v265[0] + 8 * v146);
                  **(_QWORD **)(*(_QWORD *)&v265[0] + 8 * v146) = m;
                  m = v139;
                }
                v146 = v140;
LABEL_251:
                v139 = (_QWORD **)m;
                m = (_QWORD *)*m;
              }
            }
            v122 = (unint64_t)prime;
          }
          if ((v122 & (v122 - 1)) != 0)
          {
            if (v121 >= v122)
              v0 = v121 % v122;
            else
              v0 = v121;
          }
          else
          {
            v0 = (v122 - 1) & v121;
          }
LABEL_260:
          v147 = *(_QWORD **)(*(_QWORD *)&v265[0] + 8 * v0);
          if (v147)
          {
            *(_QWORD *)v255.__r_.__value_.__l.__data_ = *v147;
            *v147 = v255.__r_.__value_.__r.__words[0];
          }
          else
          {
            *(_QWORD *)v255.__r_.__value_.__l.__data_ = *(_QWORD *)&v265[1];
            *(_QWORD *)&v265[1] = v255.__r_.__value_.__r.__words[0];
            *(_QWORD *)(*(_QWORD *)&v265[0] + 8 * v0) = &v265[1];
            if (*(_QWORD *)v255.__r_.__value_.__l.__data_)
            {
              v148 = *(_QWORD *)(*(_QWORD *)v255.__r_.__value_.__l.__data_ + 8);
              if ((v122 & (v122 - 1)) != 0)
              {
                if (v148 >= v122)
                  v148 %= v122;
              }
              else
              {
                v148 &= v122 - 1;
              }
              *(_QWORD *)(*(_QWORD *)&v265[0] + 8 * v148) = v255.__r_.__value_.__r.__words[0];
            }
          }
          v255.__r_.__value_.__r.__words[0] = 0;
          ++*((_QWORD *)&v265[1] + 1);
          sub_20BFC0FB0((uint64_t)&v255);
LABEL_269:
          v116 += 24;
          if ((pxrInternal__aapl__pxrReserved__::TfType *)v116 == v248)
            break;
          continue;
        }
      }
      if (!v113)
      {
LABEL_285:
        v151 = v245;
      }
      else
      {
        v150 = (unint64_t *)&v113->__shared_owners_;
        v151 = v245;
        do
          v152 = __ldaxr(v150);
        while (__stlxr(v152 - 1, v150));
        if (!v152)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
      v255.__r_.__value_.__r.__words[0] = (std::string::size_type)&v261;
      sub_20BDE5038((void ***)&v255);
      v45 = (_QWORD *)(v151 + 56);
      if (v45 == v244)
        goto LABEL_289;
    }
  }
  v249 = 0;
LABEL_289:
  if (*((_QWORD *)&xmmword_254985768 + 1))
  {
    sub_20BFC0FF4((uint64_t)&qword_254985758, (_QWORD *)xmmword_254985768);
    *(_QWORD *)&xmmword_254985768 = 0;
    v153 = qword_254985760;
    if (qword_254985760)
    {
      v154 = 0;
      do
        *(_QWORD *)(qword_254985758 + 8 * v154++) = 0;
      while (v153 != v154);
    }
    *((_QWORD *)&xmmword_254985768 + 1) = 0;
  }
  v155 = *(_QWORD *)&v265[0];
  *(_QWORD *)&v265[0] = 0;
  v156 = (void *)qword_254985758;
  qword_254985758 = v155;
  if (v156)
    operator delete(v156);
  v157 = *((_QWORD *)&v265[0] + 1);
  *((_QWORD *)&v265[0] + 1) = 0;
  xmmword_254985768 = v265[1];
  dword_254985778 = LODWORD(v266[0]);
  qword_254985760 = v157;
  if (*((_QWORD *)&v265[1] + 1))
  {
    v158 = *(_QWORD *)(*(_QWORD *)&v265[1] + 8);
    if ((v157 & (v157 - 1)) != 0)
    {
      if (v158 >= v157)
        v158 %= v157;
    }
    else
    {
      v158 &= v157 - 1;
    }
    *(_QWORD *)(qword_254985758 + 8 * v158) = &xmmword_254985768;
    v265[1] = 0uLL;
  }
  *(_QWORD *)&xmmword_254985780 = v249;
  sub_20BFBE3F8((uint64_t)v265);
LABEL_303:
  *(_OWORD *)&v255.__r_.__value_.__r.__words[1] = 0uLL;
  v255.__r_.__value_.__r.__words[0] = (std::string::size_type)&v255.__r_.__value_.__l.__size_;
  AllDerivedTypes = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(*v159, (uint64_t **)&v255);
  v161 = v255.__r_.__value_.__r.__words[2];
  v162 = qword_254985798;
  v163 = *((_QWORD *)&xmmword_254985780 + 1);
  if (v255.__r_.__value_.__r.__words[2] > (qword_254985798 - *((_QWORD *)&xmmword_254985780 + 1)) >> 4)
  {
    if (v255.__r_.__value_.__r.__words[2] >> 60)
      sub_20BDDF694();
    v164 = (_QWORD *)qword_254985790;
    *(_QWORD *)v266 = &qword_254985798;
    v165 = operator new(16 * v255.__r_.__value_.__r.__words[2]);
    v166 = (uint64_t)v164 + (_QWORD)v165 - v163;
    if (v164 == (_QWORD *)v163)
    {
      v169 = vdupq_n_s64(v163);
      v167 = (char *)v164 + (_QWORD)v165 - v163;
    }
    else
    {
      v167 = (char *)v164 + (_QWORD)v165 - v163;
      do
      {
        v168 = *((_OWORD *)v164 - 1);
        v164 -= 2;
        *((_OWORD *)v167 - 1) = v168;
        v167 -= 16;
        *v164 = 0;
        v164[1] = 0;
      }
      while (v164 != (_QWORD *)v163);
      v169 = *(int64x2_t *)((char *)&xmmword_254985780 + 8);
      v162 = qword_254985798;
    }
    *((_QWORD *)&xmmword_254985780 + 1) = v167;
    qword_254985790 = v166;
    *(int64x2_t *)((char *)v265 + 8) = v169;
    qword_254985798 = (uint64_t)v165 + 16 * v161;
    *((_QWORD *)&v265[1] + 1) = v162;
    *(_QWORD *)&v265[0] = v169.i64[0];
    AllDerivedTypes = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_20BDEA324((uint64_t)v265);
  }
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(AllDerivedTypes);
  v170 = (std::string::__raw *)v255.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v255.__r_.__value_.__l.__data_ != &v255.__r_.__value_.__r.__words[1])
  {
    do
    {
      v171 = (uint64_t *)&v170[1].__words[1];
      if (sub_20BFC09C8(0))
      {
        v172 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v170[1].__words[1]);
        if (*(char *)(v172 + 23) >= 0)
          v175 = v172;
        else
          v175 = *(_QWORD *)v172;
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Found package resolver %s\n", v173, v174, v175);
      }
      pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(*v171, &__dst);
      v176 = sub_20BF46110(&__dst);
      if (v177 & 1 | (unint64_t)v176)
      {
        v178 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_20BF444D8((uint64_t *)&__dst);
        pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadataForType(v178, (const pxrInternal__aapl__pxrReserved__::TfType *)&v170[1].__words[1], (uint64_t *)v265);
        v179 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFC1030();
        if ((*(_QWORD *)v179 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (uint64_t *)((*(_QWORD *)v179 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v179);
        LOBYTE(v263) = 0;
        LOBYTE(v264) = 0;
        pxrInternal__aapl__pxrReserved__::JsFindValue((uint64_t)v265, (uint64_t)EmptyString, (uint64_t)&v263, (uint64_t)&__p);
        if ((_BYTE)v264)
        {
          v185 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
          if (*((_QWORD *)&v263 + 1))
          {
            v186 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
            do
              v187 = __ldaxr(v186);
            while (__stlxr(v187 - 1, v186));
            if (!v187)
            {
              ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
              std::__shared_weak_count::__release_weak(v185);
            }
          }
        }
        sub_20BE78E5C((uint64_t)v265, *((_QWORD **)&v265[0] + 1));
        if (v254.__r_.__value_.__s.__data_[8])
        {
          v263 = 0uLL;
          v264 = 0;
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)&__p))
          {
            JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)&__p);
            v190 = *(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray;
            v189 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(JsArray + 8);
            while (v190 != v189)
            {
              if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v190))
                goto LABEL_338;
              v190 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v190 + 16);
            }
            v195 = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)&__p);
            sub_20BDE4F04(&v261, (v195[1] - *v195) >> 4);
            v197 = *v195;
            v196 = v195[1];
            if (*v195 != v196)
            {
              v198 = v261;
              do
              {
                String = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v197);
                if (*(char *)(String + 23) < 0)
                {
                  sub_20BDDBFAC(v265, *(void **)String, *(_QWORD *)(String + 8));
                }
                else
                {
                  v200 = *(_OWORD *)String;
                  *(_QWORD *)&v265[1] = *(_QWORD *)(String + 16);
                  v265[0] = v200;
                }
                if (*(char *)(v198 + 23) < 0)
                  operator delete(*(void **)v198);
                v201 = v265[0];
                *(_QWORD *)(v198 + 16) = *(_QWORD *)&v265[1];
                *(_OWORD *)v198 = v201;
                v198 += 24;
                v197 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v197 + 16);
              }
              while (v197 != v196);
            }
            sub_20BE7598C((uint64_t *)&v263);
            v263 = v261;
            v264 = v262;
            v262 = 0;
            v261 = 0uLL;
            *(_QWORD *)&v265[0] = &v261;
            sub_20BDE5038((void ***)v265);
            *(_QWORD *)v250 = *((_QWORD *)&v263 + 1);
            for (n = (__int128 *)v263; n != *(__int128 **)v250; n = (__int128 *)((char *)n + 24))
            {
              if (*((char *)n + 23) < 0)
              {
                if (*((_QWORD *)n + 1))
                {
LABEL_357:
                  v203 = (char *)operator new(0xA0uLL);
                  v204 = v203;
                  *((_QWORD *)v203 + 1) = 0;
                  *((_QWORD *)v203 + 2) = 0;
                  *(_QWORD *)v203 = off_24C523D68;
                  v205 = __dst.__r_.__value_.__l.__size_;
                  *((_QWORD *)v203 + 3) = __dst.__r_.__value_.__r.__words[0];
                  v206 = v203 + 24;
                  *((_QWORD *)v203 + 4) = v205;
                  if (v205)
                  {
                    v207 = (unsigned int *)(v205 + 8);
                    do
                      v208 = __ldxr(v207);
                    while (__stxr(v208 + 1, v207));
                  }
                  *((_QWORD *)v203 + 5) = *v171;
                  v203[48] = 0;
                  *((_QWORD *)v203 + 7) = 850045863;
                  v209 = v203 + 136;
                  *((_OWORD *)v204 + 4) = 0u;
                  *((_OWORD *)v204 + 5) = 0u;
                  *((_OWORD *)v204 + 6) = 0u;
                  *((_OWORD *)v204 + 7) = 0u;
                  *((_QWORD *)v204 + 16) = 0;
                  if (*((char *)n + 23) < 0)
                  {
                    sub_20BDDBFAC(v209, *(void **)n, *((_QWORD *)n + 1));
                  }
                  else
                  {
                    v210 = *n;
                    *((_QWORD *)v204 + 19) = *((_QWORD *)n + 2);
                    *(_OWORD *)v209 = v210;
                  }
                  v211 = (_QWORD *)qword_254985790;
                  v212 = qword_254985798;
                  if (qword_254985790 >= (unint64_t)qword_254985798)
                  {
                    v214 = (_QWORD *)*((_QWORD *)&xmmword_254985780 + 1);
                    v215 = (qword_254985790 - *((_QWORD *)&xmmword_254985780 + 1)) >> 4;
                    v216 = v215 + 1;
                    if ((unint64_t)(v215 + 1) >> 60)
                      sub_20BDDF694();
                    if ((qword_254985798 - *((_QWORD *)&xmmword_254985780 + 1)) >> 3 > v216)
                      v216 = (qword_254985798 - *((_QWORD *)&xmmword_254985780 + 1)) >> 3;
                    if ((unint64_t)(qword_254985798 - *((_QWORD *)&xmmword_254985780 + 1)) >= 0x7FFFFFFFFFFFFFF0)
                      v217 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v217 = v216;
                    *(_QWORD *)v266 = &qword_254985798;
                    if (v217 >> 60)
                      sub_20BDDF5B4();
                    v218 = (char *)operator new(16 * v217);
                    v219 = &v218[16 * v215];
                    *(_QWORD *)v219 = v206;
                    *((_QWORD *)v219 + 1) = v204;
                    if (v211 == v214)
                    {
                      v222 = vdupq_n_s64((unint64_t)v211);
                      v220 = &v218[16 * v215];
                    }
                    else
                    {
                      v220 = &v218[16 * v215];
                      do
                      {
                        v221 = *((_OWORD *)v211 - 1);
                        v211 -= 2;
                        *((_OWORD *)v220 - 1) = v221;
                        v220 -= 16;
                        *v211 = 0;
                        v211[1] = 0;
                      }
                      while (v211 != v214);
                      v222 = *(int64x2_t *)((char *)&xmmword_254985780 + 8);
                      v212 = qword_254985798;
                    }
                    v213 = (uint64_t)(v219 + 16);
                    *((_QWORD *)&xmmword_254985780 + 1) = v220;
                    qword_254985790 = (uint64_t)(v219 + 16);
                    *(int64x2_t *)((char *)v265 + 8) = v222;
                    qword_254985798 = (uint64_t)&v218[16 * v217];
                    *((_QWORD *)&v265[1] + 1) = v212;
                    *(_QWORD *)&v265[0] = v222.i64[0];
                    sub_20BDEA324((uint64_t)v265);
                    v171 = (uint64_t *)&v170[1].__words[1];
                  }
                  else
                  {
                    *(_QWORD *)qword_254985790 = v206;
                    v211[1] = v204;
                    v213 = (uint64_t)(v211 + 2);
                  }
                  qword_254985790 = v213;
                  if (sub_20BFC09C8(0))
                  {
                    v223 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v171);
                    if (*(char *)(v223 + 23) >= 0)
                      v224 = v223;
                    else
                      v224 = *(_QWORD *)v223;
                    v225 = n;
                    if (*((char *)n + 23) < 0)
                      v225 = *(__int128 **)n;
                    v226 = sub_20BF444D8((uint64_t *)&__dst);
                    v229 = (_QWORD *)(v226 + 8);
                    if (*(char *)(v226 + 31) < 0)
                      v229 = (_QWORD *)*v229;
                    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Using package resolver %s for %s from plugin %s\n", v227, v228, v224, v225, v229);
                  }
                }
              }
              else if (*((_BYTE *)n + 23))
              {
                goto LABEL_357;
              }
            }
          }
          else
          {
LABEL_338:
            *(_QWORD *)&v265[0] = "ar/resolver.cpp";
            *((_QWORD *)&v265[0] + 1) = "_InitializePackageResolvers";
            *(_QWORD *)&v265[1] = 1280;
            *((_QWORD *)&v265[1] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolv"
                                        "er::_InitializePackageResolvers()";
            LOBYTE(v266[0]) = 0;
            v191 = *(_QWORD *)sub_20BFC1030() & 0xFFFFFFFFFFFFFFF8;
            if (v191)
            {
              v192 = (const char *)(v191 + 16);
              if (*(char *)(v191 + 39) < 0)
                v192 = *(const char **)v192;
            }
            else
            {
              v192 = "";
            }
            v230 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v170[1].__words[1]);
            if (*(char *)(v230 + 23) >= 0)
              v231 = (const char *)v230;
            else
              v231 = *(const char **)v230;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v265, 1, (pxrInternal__aapl__pxrReserved__ *)"'%s' metadata for %s must be a list of strings.", v192, v231);
          }
          *(_QWORD *)&v265[0] = &v263;
          sub_20BDE5038((void ***)v265);
        }
        else
        {
          *(_QWORD *)&v265[0] = "ar/resolver.cpp";
          *((_QWORD *)&v265[0] + 1) = "_InitializePackageResolvers";
          *(_QWORD *)&v265[1] = 1268;
          *((_QWORD *)&v265[1] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver"
                                      "::_InitializePackageResolvers()";
          LOBYTE(v266[0]) = 0;
          v193 = *(_QWORD *)sub_20BFC1030() & 0xFFFFFFFFFFFFFFF8;
          if (v193)
          {
            v194 = (const char *)(v193 + 16);
            if (*(char *)(v193 + 39) < 0)
              v194 = *(const char **)v194;
          }
          else
          {
            v194 = "";
          }
          v232 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v170[1].__words[1]);
          if (*(char *)(v232 + 23) >= 0)
            v233 = (const char *)v232;
          else
            v233 = *(const char **)v232;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v265, 1, (pxrInternal__aapl__pxrReserved__ *)"No package formats specified in '%s' metadata for '%s'", v194, v233);
        }
        if (v254.__r_.__value_.__s.__data_[8])
        {
          v234 = (std::__shared_weak_count *)v254.__r_.__value_.__r.__words[0];
          if (v254.__r_.__value_.__r.__words[0])
          {
            v235 = (unint64_t *)(v254.__r_.__value_.__r.__words[0] + 8);
            do
              v236 = __ldaxr(v235);
            while (__stlxr(v236 - 1, v235));
            if (!v236)
            {
              ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
              std::__shared_weak_count::__release_weak(v234);
            }
          }
        }
      }
      else if (sub_20BFC09C8(0))
      {
        v181 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v170[1].__words[1]);
        if (*(char *)(v181 + 23) >= 0)
          v184 = v181;
        else
          v184 = *(_QWORD *)v181;
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Could not find plugin for package resolver %s", v182, v183, v184);
      }
      v237 = __dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_)
      {
        v238 = (unsigned int *)(__dst.__r_.__value_.__l.__size_ + 8);
        do
        {
          v239 = __ldxr(v238);
          v240 = v239 - 1;
        }
        while (__stlxr(v240, v238));
        if (!v240)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v237 + 8))(v237);
      }
      v241 = (std::string *)v170->__words[1];
      if (v241)
      {
        do
        {
          v242 = v241;
          v241 = (std::string *)v241->__r_.__value_.__r.__words[0];
        }
        while (v241);
      }
      else
      {
        do
        {
          v242 = (std::string *)v170->__words[2];
          v75 = v242->__r_.__value_.__r.__words[0] == (_QWORD)v170;
          v170 = (std::string::__raw *)v242;
        }
        while (!v75);
      }
      v170 = (std::string::__raw *)v242;
    }
    while (v242 != (std::string *)&v255.__r_.__value_.__r.__words[1]);
  }
  sub_20BE6100C((uint64_t)&v255, (_QWORD *)v255.__r_.__value_.__l.__size_);
  return sub_20BFBBFD4((uint64_t)&v251);
}

void sub_20BFBDFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,void *a25,char a26,int a27,__int16 a28,char a29,int a30,void *a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47)
{
  sub_20BFBBFD4((uint64_t)&a31);
  sub_20BFBBFD4((uint64_t)&a21);
  sub_20BFC07C4(&qword_254985800);
  sub_20BFC14A0(qword_2549857A0);
  sub_20BFBE3A0((void **)&xmmword_254985780 + 1);
  sub_20BFBE3F8((uint64_t)&qword_254985758);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&qword_254985748);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFBE354(uint64_t a1)
{
  sub_20BFC07C4((_QWORD *)(a1 + 192));
  sub_20BFC14A0((_QWORD *)(a1 + 96));
  sub_20BFBE3A0((void **)(a1 + 72));
  sub_20BFBE3F8(a1 + 24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 8));
  return a1;
}

void **sub_20BFBE3A0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v3 - 16));
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20BFBE3F8(uint64_t a1)
{
  void *v2;

  sub_20BFC0FF4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BFBE430(uint64_t a1)
{
  sub_20BFC07C4((_QWORD *)(a1 + 192));
  sub_20BFC14A0((_QWORD *)(a1 + 96));
  sub_20BFBE3A0((void **)(a1 + 72));
  sub_20BFBE3F8(a1 + 24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 8));
  operator delete((void *)a1);
}

void sub_20BFBE478(int8x8_t *a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  void *__p;
  char v14;
  void *v15[2];
  uint64_t v16;

  v8 = sub_20BFC15B8(a1, a2, 0);
  if (!v8)
    v8 = sub_20BFC16C0((uint64_t)a1, a3, 0);
  pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a3, (uint64_t)v11);
  *(_OWORD *)v15 = *(_OWORD *)v11;
  v16 = v12;
  v11[1] = 0;
  v12 = 0;
  v11[0] = 0;
  if (v14 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
  }
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a2, (uint64_t)v11);
    (*(void (**)(__int128 *__return_ptr, uint64_t, void **, void **))(*(_QWORD *)v8 + 16))(&v9, v8, v11, v15);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
    *(_OWORD *)v11 = v9;
    v12 = v10;
    pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)v11, a4);
    if (v14 < 0)
      operator delete(__p);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
  }
  else
  {
    (*(void (**)(uint64_t, char *, void **))(*(_QWORD *)v8 + 16))(v8, a2, v15);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20BFBE5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void sub_20BFBE61C(int8x8_t *a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  void *__p;
  char v14;
  void *v15[2];
  uint64_t v16;

  v8 = sub_20BFC15B8(a1, a2, 0);
  if (!v8)
    v8 = sub_20BFC16C0((uint64_t)a1, a3, 0);
  pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a3, (uint64_t)v11);
  *(_OWORD *)v15 = *(_OWORD *)v11;
  v16 = v12;
  v11[1] = 0;
  v12 = 0;
  v11[0] = 0;
  if (v14 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
  }
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a2, (uint64_t)v11);
    (*(void (**)(__int128 *__return_ptr, uint64_t, void **, void **))(*(_QWORD *)v8 + 24))(&v9, v8, v11, v15);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
    *(_OWORD *)v11 = v9;
    v12 = v10;
    pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)v11, a4);
    if (v14 < 0)
      operator delete(__p);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
  }
  else
  {
    (*(void (**)(uint64_t, char *, void **))(*(_QWORD *)v8 + 24))(v8, a2, v15);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20BFBE774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void sub_20BFBE7C0(_QWORD *a1@<X0>, uint64_t a2@<X1>, std::string *p_dst@<X8>)
{
  std::string::size_type size;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type v9;
  uint64_t v10;
  _QWORD v11[2];
  std::string __dst;
  std::string v13;
  void *__p;
  char v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  std::string v19;
  _QWORD *v20;

  v20 = a1;
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(a2))
  {
    memset(&v19, 0, sizeof(v19));
    v16 = 0;
    v17 = 0;
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(a2, (uint64_t)&v13);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&v16;
    sub_20BFC1B10(&__dst, (__int128 *)&v13);
    if (v15 < 0)
      operator delete(__p);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    sub_20BFC1B94((uint64_t *)&v20, (uint64_t)&v19, (uint64_t)&v13);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20BDDBFAC(&__dst, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    else
    {
      __dst = v13;
    }
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __dst.__r_.__value_.__l.__size_;
    if (size)
    {
      v7 = HIBYTE(v18);
      if (v18 < 0)
        v7 = v17;
      if (v7)
      {
        while (1)
        {
          pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)&v16, (uint64_t)&v13);
          v11[0] = &v19;
          v11[1] = &v16;
          sub_20BFC1B10(v11, (__int128 *)&v13);
          if (v15 < 0)
            operator delete(__p);
          if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v13.__r_.__value_.__l.__data_);
          v8 = sub_20BFC1E2C(a1, (uint64_t)&__dst);
          if (!v8)
            break;
          (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, std::string *))(*(_QWORD *)v8 + 16))(&v13, v8, &__dst, &v19);
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v19.__r_.__value_.__l.__data_);
          v19 = v13;
          v9 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
          if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v9 = v19.__r_.__value_.__l.__size_;
          if (!v9)
            break;
          pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)&__dst, (uint64_t)&v19, &v13);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          __dst = v13;
          v10 = HIBYTE(v18);
          if (v18 < 0)
            v10 = v17;
          if (!v10)
            goto LABEL_32;
        }
      }
      else
      {
LABEL_32:
        *p_dst = __dst;
        p_dst = &__dst;
      }
    }
    p_dst->__r_.__value_.__l.__size_ = 0;
    p_dst->__r_.__value_.__r.__words[2] = 0;
    p_dst->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18) < 0)
      operator delete(v16);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_20BFC1B94((uint64_t *)&v20, a2, (uint64_t)p_dst);
  }
}

void sub_20BFBEA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (a22 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (*(char *)(v31 - 41) < 0)
    operator delete(*(void **)(v31 - 64));
  _Unwind_Resume(exception_object);
}

void sub_20BFBEA84(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  std::string __str;
  std::string v7;
  void *__p;
  char v9;

  v5 = sub_20BFC16C0(a1, a2, 0);
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a2, (uint64_t)&v7);
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v5 + 40))(&__str, v5, &v7);
    std::string::operator=(&v7, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)&v7, &__str);
    *a3 = __str;
    if (v9 < 0)
      operator delete(__p);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
  else
  {
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 40))(v5, a2);
  }
}

void sub_20BFBEB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_20BE930F8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_20BFBEBA0(_QWORD *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26[3];
  char v27;
  void **v28;

  sub_20BFC2CF4(v26, a1[6] + 1);
  v6 = a1[1];
  if (*(_BYTE *)(v6 + 161))
  {
    v7 = sub_20BFC1858(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2, v26[0]);
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  for (i = (_QWORD *)a1[5]; i; i = (_QWORD *)*i)
  {
    v10 = i[5];
    if (*(_BYTE *)(v10 + 161))
    {
      v11 = sub_20BFC1858(v10);
      if (v11)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, a2, v26[0] + 16 * v8);
      ++v8;
    }
  }
  sub_20BFC2C48(a3, v26);
  v27 = 0;
  v12 = (void **)sub_20BEB5B80(a1 + 12, &v27);
  v13 = (unint64_t)v12[2];
  v14 = v12[1];
  if ((unint64_t)v14 >= v13)
  {
    v16 = ((char *)v14 - (_BYTE *)*v12) >> 3;
    if ((unint64_t)(v16 + 1) >> 61)
      sub_20BDDF694();
    v17 = v13 - (_QWORD)*v12;
    v18 = v17 >> 2;
    if (v17 >> 2 <= (unint64_t)(v16 + 1))
      v18 = v16 + 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
      v20 = (char *)sub_20BDDF6A8((uint64_t)(v12 + 2), v19);
    else
      v20 = 0;
    v21 = &v20[8 * v16];
    v22 = &v20[8 * v19];
    *(_QWORD *)v21 = a2;
    v15 = v21 + 8;
    v24 = (char *)*v12;
    v23 = (char *)v12[1];
    if (v23 != *v12)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v21 - 1) = v25;
        v21 -= 8;
      }
      while (v23 != v24);
      v23 = (char *)*v12;
    }
    *v12 = v21;
    v12[1] = v15;
    v12[2] = v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v14 = a2;
    v15 = v14 + 1;
  }
  v12[1] = v15;
  v28 = (void **)v26;
  sub_20BF8CA20(&v28);
}

void sub_20BFBED3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  sub_20BF8CA20(&a14);
  _Unwind_Resume(a1);
}

void sub_20BFBED64(_QWORD *a1, std::string *a2, uint64_t **a3)
{
  uint64_t *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::string *p_p;
  std::string __p;
  __int128 v22;
  uint64_t v23;
  void **v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char v28;

  if ((sub_20BFC2D70((pxrInternal__aapl__pxrReserved__::VtValue *)a3) & 1) != 0
    || (v24 = (void **)"ar/resolver.cpp",
        v25 = "_UnbindContext",
        v26 = 689,
        v27 = "virtual void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_UnbindContext"
              "(const ArResolverContext &, VtValue *)",
        v28 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "bindingData->IsHolding<_ResolverContextData>()", 0) & 1) != 0))
  {
    v22 = 0uLL;
    v23 = 0;
    v6 = sub_20BFC3374(a3);
    v7 = *(_OWORD *)v6;
    *(_OWORD *)v6 = 0uLL;
    v22 = v7;
    v8 = v6[2];
    v6[2] = v23;
    v23 = v8;
    v9 = a1[1];
    if (*(_BYTE *)(v9 + 161))
    {
      v10 = sub_20BFC1858(v9);
      (*(void (**)(uint64_t, std::string *, _QWORD))(*(_QWORD *)v10 + 56))(v10, a2, v22);
      v11 = 1;
    }
    else
    {
      v11 = 0;
    }
    for (i = (_QWORD *)a1[5]; i; i = (_QWORD *)*i)
    {
      v13 = i[5];
      if (*(_BYTE *)(v13 + 161))
      {
        v14 = sub_20BFC1858(v13);
        if (v14)
          (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v14 + 56))(v14, a2, v22 + 16 * v11);
        ++v11;
      }
    }
    v15 = sub_20BFC3374(a3);
    v16 = *(_OWORD *)v15;
    *(_OWORD *)v15 = v22;
    v22 = v16;
    v17 = v15[2];
    v15[2] = v23;
    v23 = v17;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v18 = (_QWORD *)sub_20BEB5B80(a1 + 12, &__p);
    v19 = v18[1];
    if (*v18 == v19)
    {
      v24 = (void **)"ar/resolver.cpp";
      v25 = "_UnbindContext";
      v26 = 720;
      v27 = "virtual void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_UnbindContext(c"
            "onst ArResolverContext &, VtValue *)";
      v28 = 0;
      pxrInternal__aapl__pxrReserved__::ArResolverContext::GetDebugString(a2, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"No context was bound, cannot unbind context: %s", (const char *)p_p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v18[1] = v19 - 8;
    }
    v24 = (void **)&v22;
    sub_20BF8CA20(&v24);
  }
}

void sub_20BFBEF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  if (a15 < 0)
    operator delete(__p);
  a19 = &a16;
  sub_20BF8CA20((void ***)&a19);
  _Unwind_Resume(a1);
}

void sub_20BFBEFB4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t v7;
  uint64_t v8;
  void **v9[3];
  uint64_t v10[3];
  void ***v11;

  memset(v10, 0, sizeof(v10));
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v4 + 161))
  {
    v5 = sub_20BFC1858(v4);
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v5 + 64))(v9);
    sub_20BFC3404(v10, (uint64_t)v9);
    v11 = v9;
    sub_20BDE9EB0((void ***)&v11);
  }
  for (i = *(_QWORD **)(a1 + 40); i; i = (_QWORD *)*i)
  {
    v7 = i[5];
    if (*(_BYTE *)(v7 + 161))
    {
      v8 = sub_20BFC1858(v7);
      if (v8)
      {
        (*(void (**)(void ***__return_ptr))(*(_QWORD *)v8 + 64))(v9);
        sub_20BFC3404(v10, (uint64_t)v9);
        v11 = v9;
        sub_20BDE9EB0((void ***)&v11);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::ArResolverContext::ArResolverContext(a2, v10);
  v9[0] = (void **)v10;
  sub_20BE104D4(v9);
}

void sub_20BFBF094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 40) = v13;
  sub_20BDE9EB0((void ***)(v14 - 40));
  a10 = (void **)&a13;
  sub_20BE104D4(&a10);
  _Unwind_Resume(a1);
}

void sub_20BFBF0E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  void **v11[3];
  void *v12[2];
  uint64_t v13;
  void *__p;
  char v15;
  void ***v16;

  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(a2, (uint64_t)v12);
    sub_20BFBF0E0(a1, v12);
    if (v15 < 0)
      operator delete(__p);
    if (SHIBYTE(v13) < 0)
      operator delete(v12[0]);
  }
  else
  {
    v12[0] = 0;
    v12[1] = 0;
    v13 = 0;
    v6 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v6 + 161))
    {
      v7 = sub_20BFC1858(v6);
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 72))(v11, v7, a2);
      sub_20BFC3404((uint64_t *)v12, (uint64_t)v11);
      v16 = v11;
      sub_20BDE9EB0((void ***)&v16);
    }
    for (i = *(_QWORD **)(a1 + 40); i; i = (_QWORD *)*i)
    {
      v9 = i[5];
      if (*(_BYTE *)(v9 + 161))
      {
        v10 = sub_20BFC1858(v9);
        if (v10)
        {
          (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 72))(v11, v10, a2);
          sub_20BFC3404((uint64_t *)v12, (uint64_t)v11);
          v16 = v11;
          sub_20BDE9EB0((void ***)&v16);
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::ArResolverContext::ArResolverContext(a3, v12);
    v11[0] = v12;
    sub_20BE104D4(v11);
  }
}

void sub_20BFBF218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v13 - 40) = v12;
  sub_20BDE9EB0((void ***)(v13 - 40));
  a9 = (void **)&a12;
  sub_20BE104D4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFBF274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(result + 161))
  {
    v5 = sub_20BFC1858(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, a2);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

_BYTE *sub_20BFBF2C8(uint64_t a1, uint64_t a2)
{
  _BYTE *result;
  uint64_t v5;
  _QWORD *i;

  result = *(_BYTE **)(a1 + 8);
  if (result[161])
  {
    v5 = sub_20BFC1858((uint64_t)result);
    result = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a2);
  }
  for (i = *(_QWORD **)(a1 + 40); i; i = (_QWORD *)*i)
  {
    result = (_BYTE *)i[5];
    if (result[161])
    {
      result = (_BYTE *)sub_20BFC1858((uint64_t)result);
      if (result)
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 88))(result, a2);
    }
  }
  return result;
}

void sub_20BFBF33C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD **v11;
  char *v12;
  uint64_t v13;
  void **v14[3];
  uint64_t v15;
  char *v16;
  unint64_t v17;
  void ***v18;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  v4 = a1[1];
  if (*(_BYTE *)(v4 + 161))
  {
    v5 = sub_20BFC1858(v4);
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v5 + 96))(v14);
    sub_20BFC3404(&v15, (uint64_t)v14);
    v18 = v14;
    sub_20BDE9EB0((void ***)&v18);
  }
  for (i = (_QWORD *)a1[5]; i; i = (_QWORD *)*i)
  {
    v7 = i[5];
    if (*(_BYTE *)(v7 + 161))
    {
      v8 = sub_20BFC1858(v7);
      if (v8)
      {
        (*(void (**)(void ***__return_ptr))(*(_QWORD *)v8 + 96))(v14);
        sub_20BFC3404(&v15, (uint64_t)v14);
        v18 = v14;
        sub_20BDE9EB0((void ***)&v18);
      }
    }
  }
  LOBYTE(v18) = 0;
  v9 = (_QWORD *)sub_20BEB5B80(a1 + 12, &v18);
  v10 = v9[1];
  if (*v9 != v10)
  {
    v11 = *(_QWORD ***)(v10 - 8);
    if (v11)
    {
      v12 = v16;
      if ((unint64_t)v16 >= v17)
      {
        v13 = sub_20BFC3694(&v15, v11);
      }
      else
      {
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v12 + 1) = 0;
        *((_QWORD *)v12 + 2) = 0;
        sub_20BFB73DC(v12, *v11, v11[1], ((char *)v11[1] - (char *)*v11) >> 4);
        v13 = (uint64_t)(v12 + 24);
      }
      v16 = (char *)v13;
    }
  }
  pxrInternal__aapl__pxrReserved__::ArResolverContext::ArResolverContext(a2, &v15);
  v14[0] = (void **)&v15;
  sub_20BE104D4(v14);
}

void sub_20BFBF480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  sub_20BE104D4(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFBF4DC(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v7[2];
  char v8;
  void *__p;
  char v10;
  uint64_t v11;

  v11 = 0;
  v3 = sub_20BFC16C0(a1, a2, &v11);
  if (!*(_BYTE *)(v11 + 49))
    return 0;
  v4 = v3;
  if (!pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 104))(v4, a2);
  pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a2, (uint64_t)v7);
  v5 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v4 + 104))(v4, v7);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7[0]);
  return v5;
}

void sub_20BFBF594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE930F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BFBF5A8(uint64_t a1, char *a2)
{
  uint64_t v3;
  void *v4;
  char v5;
  void *__p;
  char v7;

  v3 = sub_20BFC16C0(a1, a2, 0);
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner((uint64_t)a2, (uint64_t)&v4);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 112))(v3, &__p);
    if (v7 < 0)
      operator delete(__p);
    if (v5 < 0)
      operator delete(v4);
  }
  else
  {
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 112))(v3, a2);
  }
}

void sub_20BFBF660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BFBF674(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  std::string::size_type size;
  void *v9[2];
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  void *v13;
  char v14;
  void *v15[2];
  char v16;
  void *v17;
  char v18;
  std::string v19;
  __int128 v20;
  uint64_t v21;
  std::string __p;
  _QWORD v23[2];
  __int128 v24;
  _OWORD v25[2];
  std::string v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v24 = 0u;
  memset(v25, 0, sizeof(v25));
  memset(&v26, 0, sizeof(v26));
  v27[1] = 0;
  v7 = sub_20BFC16C0(a1, a2, 0);
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a2, (uint64_t)v15);
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(a3, (uint64_t)v11);
    if (SHIBYTE(v12) < 0)
    {
      sub_20BDDBFAC(v9, v11[0], (unint64_t)v11[1]);
    }
    else
    {
      *(_OWORD *)v9 = *(_OWORD *)v11;
      v10 = v12;
    }
    (*(void (**)(std::string *__return_ptr, uint64_t, void **, void **))(*(_QWORD *)v7 + 120))(&v19, v7, v15, v9);
    if (SBYTE7(v25[0]) < 0)
      operator delete((void *)v24);
    v24 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
    *(_QWORD *)&v25[0] = *((_QWORD *)&v19.__r_.__value_.__l + 2);
    *((_BYTE *)&v19.__r_.__value_.__s + 23) = 0;
    v19.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v25[1]) < 0)
      operator delete(*((void **)&v25[0] + 1));
    *(_OWORD *)((char *)v25 + 8) = v20;
    *((_QWORD *)&v25[1] + 1) = v21;
    HIBYTE(v21) = 0;
    LOBYTE(v20) = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    v26 = __p;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_20BF4B5D8(v27, v23);
    sub_20BF4C2D8((uint64_t)v23);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21) < 0)
      operator delete((void *)v20);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v10) < 0)
      operator delete(v9[0]);
    size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v26.__r_.__value_.__l.__size_;
    if (size)
    {
      pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)&v26, (uint64_t)&v13, &v19);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      v26 = v19;
    }
    *(_OWORD *)a4 = v24;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)&v25[0];
    *(_QWORD *)&v25[0] = 0;
    v24 = 0uLL;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)((char *)v25 + 8);
    *(_QWORD *)(a4 + 40) = *((_QWORD *)&v25[1] + 1);
    memset((char *)v25 + 8, 0, 24);
    *(std::string *)(a4 + 48) = v26;
    memset(&v26, 0, sizeof(v26));
    sub_20BF4C200((_QWORD *)(a4 + 72), v27);
    if (v14 < 0)
      operator delete(v13);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
    if (v18 < 0)
      operator delete(v17);
    if (v16 < 0)
      operator delete(v15[0]);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v7 + 120))(v7, a2, a3);
  }
  sub_20BF4C2D8((uint64_t)v27);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25[1]) < 0)
    operator delete(*((void **)&v25[0] + 1));
  if (SBYTE7(v25[0]) < 0)
    operator delete((void *)v24);
}

void sub_20BFBF990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  sub_20BE930F8((uint64_t)&a15);
  sub_20BE930F8((uint64_t)&a21);
  sub_20BFC37A8(v21 - 144);
  _Unwind_Resume(a1);
}

void sub_20BFBF9E4(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  void *v6[2];
  uint64_t v7;
  void *v8;
  char v9;
  void *__p[2];
  uint64_t v11;
  void *v12[2];
  char v13;
  void *v14;
  char v15;

  v5 = sub_20BFC16C0(a1, a2, 0);
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a2, (uint64_t)v12);
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(a3, (uint64_t)v6);
    *(_OWORD *)__p = *(_OWORD *)v6;
    v11 = v7;
    v6[1] = 0;
    v7 = 0;
    v6[0] = 0;
    (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v5 + 128))(v5, v12, __p);
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
    if (v9 < 0)
      operator delete(v8);
    if (SHIBYTE(v7) < 0)
      operator delete(v6[0]);
    if (v15 < 0)
      operator delete(v14);
    if (v13 < 0)
      operator delete(v12[0]);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, a3);
  }
}

void sub_20BFBFB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0)
    operator delete(__p);
  sub_20BE930F8((uint64_t)&a9);
  sub_20BE930F8((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_20BFBFB34(_QWORD *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8[2];
  char v9;
  void *__p;
  char v11;

  v6 = sub_20BFC16C0((uint64_t)a1, a2, 0);
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner((uint64_t)a2, (uint64_t)v8);
    v7 = sub_20BFC1E2C(a1, (uint64_t)v8);
    if (v7)
    {
      (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v7 + 24))(v7, v8, &__p);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
    }
    if (v11 < 0)
      operator delete(__p);
    if (v9 < 0)
      operator delete(v8[0]);
  }
  else
  {
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v6 + 136))(v6, a2);
  }
}

void sub_20BFBFC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFBFC1C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_20BFC16C0(a1, a2, 0);
  if (!pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, a3);
  if (a3)
    MEMORY[0x212B929D0](a3, "Cannot open package-relative paths for write");
  return 0;
}

void sub_20BFBFC98(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD v8[4];
  char v9;

  v7 = sub_20BFC16C0(a1, a2, 0);
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    v8[0] = "ar/resolver.cpp";
    v8[1] = "_OpenAssetForWrite";
    v8[2] = 943;
    v8[3] = "virtual std::shared_ptr<ArWritableAsset> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Dispatchi"
            "ngResolver::_OpenAssetForWrite(const ArResolvedPath &, WriteMode) const";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot open package-relative paths for write");
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v7 + 152))(v7, a2, a3);
  }
}

void sub_20BFBFD50(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t *v21;
  __int128 *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  _OWORD *v27;
  uint64_t j;
  const char *v29;
  void **v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  void **v40;
  uint64_t v41;
  __int128 v42;
  char *v43;
  char *v44;
  void **v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  unint64_t *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v41 = 0;
  v42 = 0uLL;
  if (sub_20BFC2D70((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = sub_20BFC3374(a2);
    v5 = *v4;
    *v4 = v41;
    v41 = v5;
    v6 = *(_OWORD *)(v4 + 1);
    *(_OWORD *)(v4 + 1) = v42;
    v42 = v6;
    v7 = v6;
  }
  else
  {
    sub_20BFC3800(&v41, a1[6] + ((uint64_t)(a1[10] - a1[9]) >> 4) + 2);
    v5 = v41;
    v7 = v42;
  }
  if (a1[6] + ((uint64_t)(a1[10] - a1[9]) >> 4) + 2 != (v7 - v5) >> 4)
  {
    v45 = (void **)"ar/resolver.cpp";
    v46 = "_BeginCacheScope";
    v47 = 986;
    v48 = "virtual void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_BeginCacheScope(VtValue *)";
    LOBYTE(v49) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v45, "cacheData.size() == 2 + _packageResolvers.size() + _uriResolvers.size()", 0);
  }
  v8 = a1[1];
  if (*(_BYTE *)(v8 + 162))
  {
    v9 = sub_20BFC1858(v8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 160))(v9, v41);
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  for (i = (_QWORD *)a1[5]; i; i = (_QWORD *)*i)
  {
    v12 = i[5];
    if (*(_BYTE *)(v12 + 162))
    {
      v13 = sub_20BFC1858(v12);
      if (v13)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 160))(v13, v41 + 16 * v10);
      ++v10;
    }
  }
  v14 = a1[10] - a1[9];
  if (v14)
  {
    v15 = 0;
    v16 = v14 >> 4;
    v17 = 16 * v10;
    do
    {
      v18 = sub_20BFC28F8(*(_QWORD *)(a1[9] + v15));
      if (v18)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, v41 + v17 + v15);
      ++v10;
      v15 += 16;
      --v16;
    }
    while (v16);
  }
  if (!v41
    || (v19 = (_QWORD *)(v41 + 16 * v10), v20 = v19 + 1, v19[1])
    && (sub_20BFC3A4C((pxrInternal__aapl__pxrReserved__::VtValue *)v19) & 1) == 0)
  {
    v45 = (void **)"ar/threadLocalScopedCache.h";
    v46 = "BeginCacheScope";
    v47 = 79;
    v48 = "void pxrInternal__aapl__pxrReserved__::ArThreadLocalScopedCache<pxrInternal__aapl__pxrReserved__::(anonymous n"
          "amespace)::_DispatchingResolver::_Cache>::BeginCacheScope(VtValue *) [CachedType = pxrInternal__aapl__pxrReser"
          "ved__::(anonymous namespace)::_DispatchingResolver::_Cache]";
    LOBYTE(v49) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v45, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected cache scope data", v41, v42);
    goto LABEL_32;
  }
  LOBYTE(v45) = 0;
  v21 = (unint64_t *)sub_20BEB5B80(a1 + 24, &v45);
  if (sub_20BFC3A4C((pxrInternal__aapl__pxrReserved__::VtValue *)v19))
  {
    if ((*v20 & 4) != 0)
      v22 = (__int128 *)(*(uint64_t (**)(_QWORD *))((*v20 & 0xFFFFFFFFFFFFFFF8) + 168))(v19);
    else
      v22 = (__int128 *)*v19;
  }
  else
  {
    v23 = v21[1];
    if (*v21 == v23)
    {
      v25 = (char *)operator new(0x260uLL);
      *((_QWORD *)v25 + 1) = 0;
      *((_QWORD *)v25 + 2) = 0;
      *(_QWORD *)v25 = off_24C523F08;
      v26 = v25 + 24;
      bzero(v25 + 24, 0x248uLL);
      v27 = v25 + 552;
      for (j = 560; j != 608; j += 24)
        *(_QWORD *)&v25[j] = 0;
      *((_OWORD *)v25 + 32) = 0u;
      *((_OWORD *)v25 + 33) = 0u;
      *((_OWORD *)v25 + 30) = 0u;
      *((_OWORD *)v25 + 31) = 0u;
      *((_OWORD *)v25 + 28) = 0u;
      *((_OWORD *)v25 + 29) = 0u;
      *((_OWORD *)v25 + 26) = 0u;
      *((_OWORD *)v25 + 27) = 0u;
      *((_OWORD *)v25 + 24) = 0u;
      *((_OWORD *)v25 + 25) = 0u;
      *((_OWORD *)v25 + 22) = 0u;
      *((_OWORD *)v25 + 23) = 0u;
      *((_OWORD *)v25 + 20) = 0u;
      *((_OWORD *)v25 + 21) = 0u;
      *((_OWORD *)v25 + 18) = 0u;
      *((_OWORD *)v25 + 19) = 0u;
      *((_OWORD *)v25 + 16) = 0u;
      *((_OWORD *)v25 + 17) = 0u;
      *((_OWORD *)v25 + 14) = 0u;
      *((_OWORD *)v25 + 15) = 0u;
      *((_OWORD *)v25 + 12) = 0u;
      *((_OWORD *)v25 + 13) = 0u;
      *((_OWORD *)v25 + 10) = 0u;
      *((_OWORD *)v25 + 11) = 0u;
      *((_OWORD *)v25 + 8) = 0u;
      *((_OWORD *)v25 + 9) = 0u;
      *((_OWORD *)v25 + 6) = 0u;
      *((_OWORD *)v25 + 7) = 0u;
      *((_OWORD *)v25 + 4) = 0u;
      *((_OWORD *)v25 + 5) = 0u;
      *((_OWORD *)v25 + 2) = 0u;
      *((_OWORD *)v25 + 3) = 0u;
      __dmb(0xBu);
      *((_QWORD *)v25 + 3) = 0;
      __dmb(0xBu);
      *((_QWORD *)v25 + 68) = 0;
      *v27 = 0u;
      *(_OWORD *)(v25 + 568) = 0u;
      *(_OWORD *)(v25 + 584) = 0u;
      *((_QWORD *)v25 + 4) = v27;
      __dmb(0xBu);
      *((_QWORD *)v25 + 3) = 1;
      v43 = v25 + 24;
      v44 = v25;
      v29 = (const char *)v21[2];
      v30 = (void **)v21[1];
      if (v30 >= (void **)v29)
      {
        v32 = *v21;
        v33 = (uint64_t)((uint64_t)v30 - *v21) >> 4;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 60)
          sub_20BDDF694();
        if ((uint64_t)&v29[-v32] >> 3 > v34)
          v34 = (uint64_t)&v29[-v32] >> 3;
        if ((unint64_t)&v29[-v32] >= 0x7FFFFFFFFFFFFFF0)
          v35 = 0xFFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        v49 = v21 + 2;
        if (v35 >> 60)
          sub_20BDDF5B4();
        v36 = (char *)operator new(16 * v35);
        v37 = &v36[16 * v33];
        *(_QWORD *)v37 = v26;
        *((_QWORD *)v37 + 1) = v25;
        if (v30 == (void **)v32)
        {
          v40 = v30;
          v38 = &v36[16 * v33];
        }
        else
        {
          v38 = &v36[16 * v33];
          do
          {
            v39 = *((_OWORD *)v30 - 1);
            v30 -= 2;
            *((_OWORD *)v38 - 1) = v39;
            v38 -= 16;
            *v30 = 0;
            v30[1] = 0;
          }
          while (v30 != (void **)v32);
          v40 = (void **)*v21;
          v30 = (void **)v21[1];
          v29 = (const char *)v21[2];
        }
        v31 = v37 + 16;
        *v21 = (unint64_t)v38;
        v45 = v40;
        v46 = (const char *)v40;
        v21[1] = (unint64_t)(v37 + 16);
        v47 = (uint64_t)v30;
        v21[2] = (unint64_t)&v36[16 * v35];
        v48 = v29;
        sub_20BDEA324((uint64_t)&v45);
      }
      else
      {
        *v30 = v26;
        v30[1] = v25;
        v31 = v30 + 2;
      }
      v21[1] = (unint64_t)v31;
      goto LABEL_30;
    }
    v22 = (__int128 *)(v23 - 16);
  }
  sub_20BFC3ABC(v21, v22);
LABEL_30:
  v24 = v21[1];
  sub_20BF4C144((uint64_t)&v45, (uint64_t)v19);
  sub_20BFC3D7C(v19, (_QWORD *)(v24 - 16));
  if (v46)
    (*((void (**)(void ***))v46 + 4))(&v45);
LABEL_32:
  sub_20BFC2C48((pxrInternal__aapl__pxrReserved__::VtValue *)a2, &v41);
  v45 = (void **)&v41;
  sub_20BF8CA20(&v45);
}

void sub_20BFC01F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  sub_20BF8CA20(&a14);
  _Unwind_Resume(a1);
}

void sub_20BFC0260(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  void **v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  char v27;

  if ((sub_20BFC2D70((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || (v23 = (void **)"ar/resolver.cpp",
        v24 = "_EndCacheScope",
        v25 = 1023,
        v26 = "virtual void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_EndCacheScope(VtValue *)",
        v27 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v23, "cacheScopeData->IsHolding<_ResolverCacheData>()", 0) & 1) != 0))
  {
    v21 = 0uLL;
    v22 = 0;
    v4 = sub_20BFC3374(a2);
    v5 = *(_OWORD *)v4;
    *(_OWORD *)v4 = 0uLL;
    v21 = v5;
    v6 = v4[2];
    v4[2] = v22;
    v22 = v6;
    v7 = a1[1];
    if (*(_BYTE *)(v7 + 162))
    {
      v8 = sub_20BFC1858(v7);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 168))(v8, v21);
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    for (i = (_QWORD *)a1[5]; i; i = (_QWORD *)*i)
    {
      v11 = i[5];
      if (*(_BYTE *)(v11 + 162))
      {
        v12 = sub_20BFC1858(v11);
        if (v12)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 168))(v12, v21 + 16 * v9);
        ++v9;
      }
    }
    v13 = a1[10] - a1[9];
    if (v13)
    {
      v14 = 0;
      v15 = v13 >> 4;
      v16 = 16 * v9;
      do
      {
        v17 = sub_20BFC28F8(*(_QWORD *)(a1[9] + v14));
        if (v17)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 40))(v17, v21 + v16 + v14);
        v14 += 16;
        --v15;
      }
      while (v15);
    }
    LOBYTE(v23) = 0;
    v18 = (_QWORD *)sub_20BEB5B80(a1 + 24, &v23);
    v19 = v18[1];
    if (*v18 == v19)
    {
      v23 = (void **)"ar/threadLocalScopedCache.h";
      v24 = "EndCacheScope";
      v25 = 101;
      v26 = "void pxrInternal__aapl__pxrReserved__::ArThreadLocalScopedCache<pxrInternal__aapl__pxrReserved__::(anonymous"
            " namespace)::_DispatchingResolver::_Cache>::EndCacheScope(VtValue *) [CachedType = pxrInternal__aapl__pxrRes"
            "erved__::(anonymous namespace)::_DispatchingResolver::_Cache]";
      v27 = 0;
      if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v23, "!cacheStack.empty()", 0))goto LABEL_18;
      v19 = v18[1];
    }
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v19 - 16));
    v18[1] = v20;
LABEL_18:
    sub_20BFC2C48((pxrInternal__aapl__pxrReserved__::VtValue *)a2, (uint64_t *)&v21);
    v23 = (void **)&v21;
    sub_20BF8CA20(&v23);
  }
}

void sub_20BFC0464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  *(_QWORD *)(v9 - 56) = &a9;
  sub_20BF8CA20((void ***)(v9 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_20BFC048C(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v6[2];
  char v7;
  void *__p;
  char v9;

  v3 = sub_20BFC16C0(a1, a2, 0);
  if (!pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v3 + 176))(v3, a2);
  pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a2, (uint64_t)v6);
  v4 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v3 + 176))(v3, v6);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6[0]);
  return v4;
}

void sub_20BFC0530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFC0544(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t i;

  *a1 = &unk_24C51AE78;
  __dmb(0xBu);
  a1[1] = 0;
  __dmb(0xBu);
  a1[2] = 0;
  *a1 = &unk_24C523AB0;
  v2 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *v2 = &unk_24C523B10;
  a1[3] = v2;
  for (i = 9; i != 12; ++i)
    a1[i] = 0;
  a1[7] = 0;
  a1[6] = 0;
  a1[8] = a1 + 9;
  a1[5] = sub_20BFC0704;
  return a1;
}

void sub_20BFC05E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20BFC05E8(uint64_t a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((tbb::internal::concurrent_vector_base_v3 *)(a1 + 40), 1, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::ArResolverContext const*>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::ArResolverContext const*>>,128ul>>>::initialize_array, 0);
  v3 = sub_20BEB4B94((unint64_t)v2);
  v4 = *(_QWORD *)(a1 + 64);
  __dmb(0xBu);
  v5 = *(_QWORD *)(v4 + 8 * v3) + (((_QWORD)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5);
  *(_BYTE *)(v5 + 24) = 1;
  return v5;
}

uint64_t sub_20BFC066C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_20BFC0680(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_20BFC0688(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_20BFC14A0(a1);
  operator delete(v1);
}

_QWORD *sub_20BFC069C()
{
  _QWORD *result;

  result = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *result = &unk_24C523B10;
  return result;
}

uint64_t sub_20BFC06C4(uint64_t a1)
{
  void *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

void sub_20BFC06F8(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t sub_20BFC0704(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::ArResolverContext const*>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::ArResolverContext const*>>,128ul>>>::initialize_array(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    bzero(a1, a3 << 7);
}

uint64_t sub_20BFC0724(uint64_t a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((tbb::internal::concurrent_vector_base_v3 *)(a1 + 40), 1, (void *)0x80, (void (*)(void *, const void *, unint64_t))sub_20BFC093C, 0);
  v3 = sub_20BEB4B94((unint64_t)v2);
  v4 = *(_QWORD *)(a1 + 64);
  __dmb(0xBu);
  v5 = *(_QWORD *)(v4 + 8 * v3) + (((_QWORD)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5);
  *(_BYTE *)(v5 + 24) = 1;
  return v5;
}

uint64_t sub_20BFC07A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_20BFC07BC(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

_QWORD *sub_20BFC07C4(_QWORD *a1)
{
  uint64_t v2;
  tbb::internal **v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  tbb::internal **v7;
  tbb::internal *v8;
  tbb::internal *v9;

  *a1 = off_24C523BA8;
  v2 = a1[3];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20BEB4954((uint64_t)a1);
  v3 = (tbb::internal **)a1[8];
  v5 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 5), (void (*)(void *, unint64_t))sub_20BFC094C);
  v6 = a1[6];
  if (v5 > v6)
  {
    v7 = v3 - 1;
    do
    {
      v8 = v7[v5];
      v7[v5] = 0;
      if ((unint64_t)v8 >= 0x40)
        tbb::internal::NFS_Free(v8, v4);
      --v5;
    }
    while (v5 > v6);
    v5 = v6;
  }
  v9 = *v3;
  if ((unint64_t)*v3 >= 0x40)
  {
    for (; v5; --v5)
      v3[v5 - 1] = 0;
    tbb::internal::NFS_Free(v9, v4);
  }
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3((tbb::internal::concurrent_vector_base_v3 *)(a1 + 5), v4);
  *a1 = &unk_24C51AE78;
  return a1;
}

void sub_20BFC08B4(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_20BFC07C4(a1);
  operator delete(v1);
}

_QWORD *sub_20BFC08C8()
{
  _QWORD *result;

  result = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *result = off_24C523C08;
  return result;
}

uint64_t sub_20BFC08EC(uint64_t a1)
{
  void *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

void sub_20BFC0920(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t sub_20BFC092C(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void sub_20BFC093C(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    bzero(a1, a3 << 7);
}

void sub_20BFC094C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char **v4;
  char *v5;
  char *v6;
  char *v7;

  if (a2)
  {
    v2 = a2;
    do
    {
      v4 = (char **)(a1 + (--v2 << 7));
      if (*((_BYTE *)v4 + 24))
      {
        v5 = *v4;
        if (*v4)
        {
          v6 = v4[1];
          v7 = *v4;
          if (v6 != v5)
          {
            do
              pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v6 - 16));
            while (v6 != v5);
            v7 = *v4;
          }
          v4[1] = v5;
          operator delete(v7);
        }
        *((_BYTE *)v4 + 24) = 0;
      }
    }
    while (v2);
  }
}

BOOL sub_20BFC09C8(int a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_20BFB5FA8();
  v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    v5 = v2;
    v6 = sub_20BFB5FA8();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), "AR_RESOLVER_INIT");
    v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

uint64_t sub_20BFC0A24(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfType *a2, char *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver *v9;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver *v21;

  v3 = (uint64_t *)a1[1];
  v4 = *v3;
  v5 = v3[1];
  if (*v3 == v5)
    return 0;
  v8 = *a1;
  while (1)
  {
    if (*(_QWORD *)(v4 + 16) == *(_QWORD *)a2)
    {
      sub_20BFBC038(a2, a1[2], a3, &v21);
      v9 = v21;
      if (v21)
        break;
    }
    v4 += 56;
    if (v4 == v5)
      return 0;
  }
  v21 = 0;
  sub_20BFC0E10(&v19, (uint64_t)v9);
  v11 = operator new(0xC0uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = off_24C523CA0;
  v12 = sub_20BFC0C64((uint64_t)(v11 + 3), v4, &v19);
  v13 = *(std::__shared_weak_count **)(v8 + 16);
  *(_QWORD *)(v8 + 8) = v12;
  *(_QWORD *)(v8 + 16) = v11;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v21)
    (*(void (**)(pxrInternal__aapl__pxrReserved__::ArDefaultResolver *))(*(_QWORD *)v21 + 8))(v21);
  return 1;
}

void sub_20BFC0B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  void *v12;

  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20BFC0B94(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C523CA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFC0BA4(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C523CA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFC0BC4(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void **v10;

  v10 = (void **)(a1 + 160);
  sub_20BDE5038(&v10);
  v2 = *(unsigned int **)(a1 + 144);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    v7 = (unsigned int *)(result + 8);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_20BFC0C64(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  __int16 v16;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *a3 != 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  v9 = a3[1];
  *(_QWORD *)(a1 + 96) = *a3;
  *(_BYTE *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = 850045863;
  *(_QWORD *)(a1 + 104) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 120) = v12;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = v15;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  sub_20BE78B98((char *)(a1 + 136), *(__int128 **)(a2 + 24), *(__int128 **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  v16 = *(_WORD *)(a2 + 48);
  *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 50);
  *(_WORD *)(a1 + 160) = v16;
  return a1;
}

void sub_20BFC0D84(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v3;
  std::mutex *v4;
  uint64_t v6;

  v6 = *(_QWORD *)(v2 + 120);
  if (v6)
    sub_20C96B4E8(v6);
  sub_20C96B488(v3, v4, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFC0DAC(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  v7 = (void **)(a1 + 24);
  sub_20BDE5038(&v7);
  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *sub_20BFC0E10(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C523CF0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BFC0E58(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20BFC0E7C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFC0E90(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20BFC0EA8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C523D40))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20BFC0EE8(unsigned int *a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, *a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20BFC0F9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFC0FB0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BE78EA4((uint64_t)v2 + 16);
    operator delete(v2);
  }
  return a1;
}

void sub_20BFC0FF4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BE78EA4((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unint64_t sub_20BFC1030()
{
  char *v0;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  void ***v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  void **v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_254985868);
  if (!v0)
  {
    v0 = (char *)operator new(0x38uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "extensions", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "uriSchemes", 0);
    v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "implementsContexts", 0);
    v4 = v0 + 24;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 24, "implementsScopedCaches", 0);
    v5 = *(void ***)v0;
    v36 = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        v36 = (void **)v6;
    }
    v8 = (unsigned int *)*v2;
    v37 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v37 = v9;
    }
    v11 = (unsigned int *)*v3;
    v38 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v38 = v12;
    }
    v14 = (unsigned int *)*v4;
    v39 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v39 = v15;
    }
    *((_QWORD *)v0 + 4) = 0;
    *((_QWORD *)v0 + 5) = 0;
    *((_QWORD *)v0 + 6) = 0;
    v17 = operator new(0x20uLL);
    v18 = 0;
    *((_QWORD *)v0 + 4) = v17;
    *((_QWORD *)v0 + 5) = v17;
    *((_QWORD *)v0 + 6) = v17 + 4;
    do
    {
      v19 = (unint64_t)(&v36)[v18];
      *v17 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 2, v20));
        if ((v21 & 1) == 0)
          *v17 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v18;
      ++v17;
    }
    while (v18 != 4);
    v22 = (void ***)&v40;
    *((_QWORD *)v0 + 5) = v17;
    do
    {
      v24 = (uint64_t)*--v22;
      v23 = v24;
      if ((v24 & 7) != 0)
      {
        v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
    }
    while (v22 != &v36);
    while (!__ldaxr(&qword_254985868))
    {
      if (!__stlxr((unint64_t)v0, &qword_254985868))
        return (unint64_t)v0;
    }
    __clrex();
    v36 = (void **)(v0 + 32);
    sub_20BEEB2B8(&v36);
    if ((*v4 & 7) != 0)
    {
      v28 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    if ((*v3 & 7) != 0)
    {
      v30 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    if ((*v2 & 7) != 0)
    {
      v32 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v34 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    operator delete(v0);
    return atomic_load(&qword_254985868);
  }
  return (unint64_t)v0;
}

void sub_20BFC1310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;

  sub_20BEEB2B8(&a10);
  v21 = &a16;
  while (1)
  {
    v23 = *--v21;
    v22 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if (v21 == (uint64_t *)&a12)
    {
      if ((*v19 & 7) != 0)
      {
        v26 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      if ((*v18 & 7) != 0)
      {
        v28 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      if ((*v17 & 7) != 0)
      {
        v30 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((*v16 & 7) != 0)
      {
        v32 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      operator delete(v16);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20BFC13FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C523D68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFC140C(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C523D68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFC142C(uint64_t a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *sub_20BFC14A0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C523AB0;
  v2 = a1[3];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20BEB4954((uint64_t)a1);
  sub_20BFC1508(a1 + 4);
  *a1 = &unk_24C51AE78;
  return a1;
}

unint64_t *sub_20BFC1508(unint64_t *a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  _QWORD *v3;
  unint64_t v4;
  void *v5;

  v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  v3 = (_QWORD *)a1[4];
  v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::ArResolverContext const*>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::ArResolverContext const*>>,128ul>>>::destroy_array);
  sub_20BEB4AD0((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::ArResolverContext const*>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::ArResolverContext const*>>,128ul>>>::destroy_array(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (a2)
  {
    v2 = a2;
    v3 = a1 + (a2 << 7) - 128;
    do
    {
      if (*(_BYTE *)(v3 + 24))
      {
        v4 = *(void **)v3;
        if (*(_QWORD *)v3)
        {
          *(_QWORD *)(v3 + 8) = v4;
          operator delete(v4);
        }
        *(_BYTE *)(v3 + 24) = 0;
      }
      v3 -= 128;
      --v2;
    }
    while (v2);
  }
}

uint64_t sub_20BFC15B8(int8x8_t *a1, char *a2, _QWORD *a3)
{
  unint64_t v6;
  int8x8_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int8x8_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *__p[2];
  char v19;

  if (!*(_QWORD *)&a1[6])
    return 0;
  v6 = a2[23];
  if (a2[23] < 0)
  {
    v11 = a1[8];
    v10 = *(char **)a2;
    v12 = (unint64_t)(*(_QWORD *)&v11 + 1) < *((_QWORD *)a2 + 1) ? *(_QWORD *)&v11 + 1 : *((_QWORD *)a2 + 1);
    v9 = &v10[v12];
  }
  else
  {
    v7 = a1[8];
    v8 = *(_QWORD *)&v7 + 1 < v6 ? *(_QWORD *)&v7 + 1 : a2[23];
    v9 = &a2[v8];
    v10 = a2;
  }
  v13 = (char *)memchr(v10, 58, v9 - v10);
  v14 = v13 ? v13 : v9;
  if (v14 == v9)
    return 0;
  if ((v6 & 0x80u) == 0)
    v15 = a2;
  else
    v15 = *(char **)a2;
  sub_20BE93368(__p, v15, v14, v14 - v15);
  v16 = sub_20BFC1708(a1, (unsigned __int8 *)__p, a3);
  if (v19 < 0)
    operator delete(__p[0]);
  return v16;
}

void sub_20BFC16A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFC16C0(uint64_t a1, char *a2, _QWORD *a3)
{
  uint64_t result;

  result = sub_20BFC15B8((int8x8_t *)a1, a2, a3);
  if (!result)
  {
    if (a3)
      *a3 = *(_QWORD *)(a1 + 8) + 112;
    return sub_20BFC1858(*(_QWORD *)(a1 + 8));
  }
  return result;
}

uint64_t sub_20BFC1708(int8x8_t *a1, unsigned __int8 *a2, _QWORD *a3)
{
  unint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v16;
  void *__p[2];
  char v18;

  pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii(a2, (uint64_t)__p);
  v5 = sub_20BEF33B4((uint64_t)&a1[6], (uint64_t)__p);
  v6 = a1[4];
  if (v6)
  {
    v7 = v5;
    v8 = (uint8x8_t)vcnt_s8(v6);
    v8.i16[0] = vaddlv_u8(v8);
    v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      v10 = v5;
      if (v5 >= *(_QWORD *)&v6)
        v10 = v5 % *(_QWORD *)&v6;
    }
    else
    {
      v10 = (*(_QWORD *)&v6 - 1) & v5;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)&a1[3] + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = (uint64_t)&a1[7];
        do
        {
          v14 = v12[1];
          if (v7 == v14)
          {
            if ((sub_20BEB4EF8(v13, (unsigned __int8 *)v12 + 16, (unsigned __int8 *)__p) & 1) != 0)
            {
              v16 = v12 + 5;
              goto LABEL_19;
            }
          }
          else
          {
            if (v9 > 1)
            {
              if (v14 >= *(_QWORD *)&v6)
                v14 %= *(_QWORD *)&v6;
            }
            else
            {
              v14 &= *(_QWORD *)&v6 - 1;
            }
            if (v14 != v10)
              break;
          }
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
  v16 = 0;
LABEL_19:
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if (v16)
      goto LABEL_21;
    return 0;
  }
  if (!v16)
    return 0;
LABEL_21:
  if (a3)
    *a3 = *v16 + 112;
  return sub_20BFC1858(*v16);
}

uint64_t sub_20BFC1858(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v6;

  v2 = atomic_load((unsigned __int8 *)(a1 + 24));
  if ((v2 & 1) == 0)
  {
    sub_20BFC1930((uint64_t *)a1, &v6);
    std::mutex::lock((std::mutex *)(a1 + 32));
    v3 = atomic_load((unsigned __int8 *)(a1 + 24));
    v4 = v6;
    if ((v3 & 1) != 0)
    {
      std::mutex::unlock((std::mutex *)(a1 + 32));
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    else
    {
      v6 = 0;
      sub_20BFC1A6C((_QWORD *)(a1 + 96), v4);
      atomic_store(1u, (unsigned __int8 *)(a1 + 24));
      std::mutex::unlock((std::mutex *)(a1 + 32));
    }
  }
  return *(_QWORD *)(a1 + 96);
}

void sub_20BFC1900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFC1930@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t result;
  char *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  char v13;

  v4 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_20BF444D8(a1);
  if ((pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v4) & 1) == 0)
  {
    v9 = "ar/resolver.cpp";
    v10 = "Create";
    v11 = 378;
    v12 = "std::unique_ptr<ResolverType> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_PluginResolver<pxrInte"
          "rnal__aapl__pxrReserved__::ArResolver, pxrInternal__aapl__pxrReserved__::Ar_ResolverFactoryBase>::Create() [Re"
          "solverType = pxrInternal__aapl__pxrReserved__::ArResolver, ResolverTypeFactory = pxrInternal__aapl__pxrReserve"
          "d__::Ar_ResolverFactoryBase]";
    v13 = 0;
    sub_20BF444D8(a1);
    pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2));
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to load plugin %s for %s");
    goto LABEL_6;
  }
  v7 = sub_20BFC1ADC((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2), v5, v6);
  if (!v7 || (result = (*(uint64_t (**)(void *))(*(_QWORD *)v7 + 16))(v7)) == 0)
  {
    v9 = "ar/resolver.cpp";
    v10 = "Create";
    v11 = 392;
    v12 = "std::unique_ptr<ResolverType> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_PluginResolver<pxrInte"
          "rnal__aapl__pxrReserved__::ArResolver, pxrInternal__aapl__pxrReserved__::Ar_ResolverFactoryBase>::Create() [Re"
          "solverType = pxrInternal__aapl__pxrReserved__::ArResolver, ResolverTypeFactory = pxrInternal__aapl__pxrReserve"
          "d__::Ar_ResolverFactoryBase]";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2));
    sub_20BF444D8(a1);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to manufacture asset resolver %s from plugin %s");
LABEL_6:
    result = 0;
  }
  *a2 = result;
  return result;
}

void sub_20BFC1A6C(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20BFC0E10(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void *sub_20BFC1ADC(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  void *result;

  result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  return result;
}

_QWORD *sub_20BFC1B10(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;

  v4 = *a1;
  if (*(char *)(*a1 + 23) < 0)
    operator delete(*(void **)v4);
  v5 = *a2;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v4 = v5;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v6 = a1[1];
  if (*(char *)(v6 + 23) < 0)
    operator delete(*(void **)v6);
  v7 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(v6 + 16) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v6 = v7;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  return a1;
}

void sub_20BFC1B94(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21[2];
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26[2];
  uint64_t v27;
  void *__p;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v5 = *a1;
  v36 = 0;
  v6 = sub_20BFC16C0(v5, (char *)a2, &v36);
  if (*(_BYTE *)(v36 + 50)
    || (LOBYTE(v26[0]) = 0, v7 = (_QWORD *)sub_20BEB5B80((unint64_t *)(v5 + 192), v26), v8 = v7[1], *v7 == v8))
  {
LABEL_2:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a2);
    return;
  }
  v9 = *(uint64_t **)(v8 - 16);
  v34 = v9;
  v10 = *(std::__shared_weak_count **)(v8 - 8);
  v35 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (!v9)
  {
    if (v10)
    {
      v13 = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    goto LABEL_2;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(v21, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)a2;
    v22 = *(_QWORD *)(a2 + 16);
  }
  *(_OWORD *)v26 = *(_OWORD *)v21;
  v15 = v22;
  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  v23 = 0;
  v27 = v15;
  __p = 0;
  v29 = 0;
  v30 = 0;
  v24 = 0;
  v25 = 0;
  v16 = sub_20BFC1FCC(v9, (uint64_t)&v31, v26);
  if (SHIBYTE(v30) < 0)
    operator delete(__p);
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
  if (SHIBYTE(v25) < 0)
    operator delete(v23);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (!v16)
      goto LABEL_30;
LABEL_27:
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v26, v6, a2);
    v17 = v33 + 40;
    if (*(char *)(v33 + 63) < 0)
      operator delete(*(void **)v17);
    *(_OWORD *)v17 = *(_OWORD *)v26;
    *(_QWORD *)(v17 + 16) = v27;
    goto LABEL_30;
  }
  operator delete(v21[0]);
  if (v16)
    goto LABEL_27;
LABEL_30:
  if (*(char *)(v33 + 63) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a3, *(void **)(v33 + 40), *(_QWORD *)(v33 + 48));
  }
  else
  {
    v18 = *(_OWORD *)(v33 + 40);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(v33 + 56);
    *(_OWORD *)a3 = v18;
  }
  v33 = 0;
  sub_20BEBF29C(&v31);
  if (v10)
  {
    v19 = (unint64_t *)&v10->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20BFC1DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  a24 = 0;
  sub_20BEBF29C(&a22);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v24 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_20BFC1E2C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void **v12;
  void **v13;
  uint64_t v14;
  void *v16[2];
  uint64_t v17;
  void *__p;
  char v19;
  void *v20[2];
  uint64_t v21;

  pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner(a2, (uint64_t)v16);
  *(_OWORD *)v20 = *(_OWORD *)v16;
  v21 = v17;
  v16[1] = 0;
  v17 = 0;
  v16[0] = 0;
  if (v19 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v17) < 0)
      operator delete(v16[0]);
  }
  (*(void (**)(void **__return_ptr, _QWORD *, void **))(*a1 + 112))(v16, a1, v20);
  v3 = a1[9];
  v4 = a1[10] - v3;
  if (!v4)
  {
LABEL_23:
    v14 = 0;
    goto LABEL_25;
  }
  v5 = 0;
  v6 = v4 >> 4;
  if (v17 >= 0)
    v7 = (void *)HIBYTE(v17);
  else
    v7 = v16[1];
  if (v17 >= 0)
    v8 = v16;
  else
    v8 = (void **)v16[0];
  while (1)
  {
    v9 = *(_QWORD *)(v3 + 16 * v5);
    v10 = *(unsigned __int8 *)(v9 + 135);
    if ((v10 & 0x80u) == 0)
      v11 = (void *)*(unsigned __int8 *)(v9 + 135);
    else
      v11 = *(void **)(v9 + 120);
    if (v11 != v7)
      goto LABEL_22;
    v12 = (const void **)(v9 + 112);
    if ((v10 & 0x80) != 0)
      break;
    if (!*(_BYTE *)(v9 + 135))
      goto LABEL_24;
    v13 = v8;
    while (*(unsigned __int8 *)v12 == *(unsigned __int8 *)v13)
    {
      v12 = (const void **)((char *)v12 + 1);
      v13 = (void **)((char *)v13 + 1);
      if (!--v10)
        goto LABEL_24;
    }
LABEL_22:
    if (++v5 == v6)
      goto LABEL_23;
  }
  if (memcmp(*v12, v8, *(_QWORD *)(v9 + 120)))
    goto LABEL_22;
LABEL_24:
  v14 = sub_20BFC28F8(v9);
LABEL_25:
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  return v14;
}

void sub_20BFC1F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFC1FCC(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20BFC2030(a1, 1, a3, (uint64_t)(a3 + 24), a2, 1, (uint64_t (*)(uint64_t, _BYTE *, uint64_t))sub_20BFC238C, 0);
}

uint64_t sub_20BFC2030(uint64_t *a1, int a2, _BYTE *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, _BYTE *, uint64_t), _QWORD *a8)
{
  _BYTE *v13;
  char v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v36;
  unint64_t v37;
  tbb::spin_rw_mutex_v3 *v39;
  char v40;
  uint64_t v41;

  if ((char)a3[23] >= 0)
    v13 = a3;
  else
    v13 = *(_BYTE **)a3;
  v14 = *v13;
  if (*v13)
  {
    v15 = 0;
    v16 = v13 + 1;
    do
    {
      v15 = (0x9E3779B97F4A7C15 * v15) ^ v14;
      v17 = *v16++;
      v14 = v17;
    }
    while (v17);
  }
  else
  {
    v15 = 0;
  }
  v37 = 0;
  v18 = *a1;
  __dmb(0xBu);
  v36 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_20BFC2554((uint64_t)&v39, (uint64_t)a1, v18 & v15, 0);
    v19 = v41 + 16;
    do
      v19 = *(_QWORD *)v19;
    while (v19 >= 0x40 && !sub_20BF772F0(a3, (unsigned __int8 *)(v19 + 16)));
    if (a2)
      break;
    if (v19)
    {
      v20 = 1;
LABEL_18:
      v21 = (uint64_t)a8;
      if (!a5)
        goto LABEL_59;
      goto LABEL_19;
    }
    v30 = *a1;
    __dmb(0xBu);
    if (v18 == v30 || !sub_20BECF7E4((uint64_t)a1, v15, v18, v30))
    {
      sub_20BEBF29C(&v39);
      return 0;
    }
LABEL_42:
    sub_20BEBF29C(&v39);
    v18 = v30;
  }
  if (v19)
  {
LABEL_15:
    v20 = 0;
    goto LABEL_18;
  }
  if (!a8)
    a8 = (_QWORD *)a7(v36, a3, a4);
  if (!v40)
  {
    v40 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade(v39) & 1) == 0)
    {
      v19 = v41 + 16;
      while (1)
      {
        v19 = *(_QWORD *)v19;
        if (v19 < 0x40)
          break;
        if (sub_20BF772F0(a3, (unsigned __int8 *)(v19 + 16)))
        {
          if (!v40)
            goto LABEL_15;
          v31 = (unint64_t *)v39;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 + 3, v31));
          v20 = 0;
          v40 = 0;
          goto LABEL_18;
        }
      }
    }
  }
  v30 = *a1;
  __dmb(0xBu);
  if (v18 != v30)
  {
    if (!sub_20BECF7E4((uint64_t)a1, v15, v18, v30))
      goto LABEL_44;
    goto LABEL_42;
  }
  v30 = v18;
LABEL_44:
  v37 = sub_20BECF26C((uint64_t)a1, v41, a8, v30);
  v21 = 0;
  v20 = 1;
  v19 = (unint64_t)a8;
  if (!a5)
  {
LABEL_59:
    sub_20BEBF29C(&v39);
    goto LABEL_54;
  }
LABEL_19:
  if ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v19 + 8), a6) & 1) == 0)
  {
    sched_yield();
    v22 = 2;
    while ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v19 + 8), a6) & 1) == 0)
    {
      sched_yield();
      v23 = v22 < 16;
      v22 *= 2;
      if (!v23)
      {
        v24 = (unint64_t *)v39;
        v39 = 0;
        if (v40)
        {
          while (1)
          {
            v25 = *v24;
            v26 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v27 = __ldaxr(v24);
                if (v27 != v25)
                  break;
                if (!__stlxr(v26, v24))
                  goto LABEL_33;
              }
              __clrex();
              do
                v28 = __ldxr(v24);
              while (__stxr(v28, v24));
            }
            while (v28 == v25);
            sched_yield();
          }
        }
        do
          v29 = __ldaxr(v24);
        while (__stlxr(v29 - 4, v24));
LABEL_33:
        sched_yield();
        v30 = *a1;
        __dmb(0xBu);
        a8 = (_QWORD *)v21;
        goto LABEL_42;
      }
    }
  }
  sub_20BEBF29C(&v39);
  *(_QWORD *)(a5 + 16) = v19;
  *(_QWORD *)(a5 + 24) = v15;
LABEL_54:
  if (v37)
    sub_20BFC2390(a1, v37, v36, 0);
  if (v21)
    sub_20BFC2524((uint64_t)a1, v21);
  return v20;
}

void sub_20BFC236C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20BFC2390(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int64x2_t v17;
  char *v18;
  uint64x2_t v19;
  uint64x2_t v20;
  int8x16_t v21;
  int64x2_t v22;
  uint64x2_t v23;
  int8x16_t v24;

  if (a2 < 8)
  {
    v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    v10 = v9;
    if ((a4 & 1) != 0)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      v14 = -6096;
      do
      {
        v15 = &v9[v14];
        *((_QWORD *)v15 + 763) = 0;
        *((_QWORD *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    v16 = 0;
    v17 = (int64x2_t)xmmword_20CA59F60;
    v18 = v10 - 48;
    v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    v22 = vdupq_n_s64(2uLL);
    v13 = 255;
    do
    {
      v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_20CA59F70);
      v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if ((vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0] & 1) != 0)
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1] & 1) != 0)
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      v16 += 2;
      v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    v7 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    v8 = v7;
    if ((a4 & 1) != 0)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      v11 = 1 << a2;
      v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_20BFC2514(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_20BFC2524(uint64_t a1, uint64_t a2)
{
  void *v3;

  sub_20BDDE3E4(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_20BFC2554(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  tbb::spin_rw_mutex_v3 *v11;
  uint64_t v12;
  tbb::spin_rw_mutex_v3 *v13;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v8 = sub_20BEB4B94(a3);
  v9 = *(_QWORD *)(a2 + 8 * v8 + 8) + 24 * (a3 - ((1 << v8) & 0xFFFFFFFFFFFFFFFELL));
  *(_QWORD *)(a1 + 16) = v9;
  v10 = *(_QWORD *)(v9 + 16);
  __dmb(0xBu);
  if (v10 == 3
    && (v11 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8),
        *(_BYTE *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v11)))
  {
    *(_QWORD *)a1 = v11;
    v12 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v12 + 16) == 3)
      sub_20BFC2644(a2, v12, a3);
  }
  else
  {
    v13 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(a1 + 8) = a4;
    *(_QWORD *)a1 = v13;
    if (a4)
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v13);
    else
      tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)v13);
  }
  return a1;
}

void sub_20BFC2630(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEBF29C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFC2644(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  char v6;
  BOOL v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  tbb::spin_rw_mutex_v3 *v20;
  char v21;
  uint64_t v22;

  __dmb(0xBu);
  *(_QWORD *)(a2 + 16) = 0;
  if (a3)
  {
    v5 = HIDWORD(a3);
    if (!HIDWORD(a3))
      v5 = a3;
    v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    v7 = v5 >= 4;
    if (v5 >= 4)
      LODWORD(v5) = v5 >> 2;
    v8 = (v5 >> 1) & 1;
    if (v7)
      v6 += 2;
    v9 = v8 + v6;
  }
  else
  {
    v9 = -1;
  }
  v10 = ~(-1 << v9);
  sub_20BFC2554(&v20, a1, v10 & a3, 0);
  v11 = (unint64_t *)(v22 + 16);
  v12 = *(_QWORD *)(v22 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    v13 = (2 * v10) | 1;
    while (1)
    {
      v14 = *(_BYTE **)(v12 + 16);
      if (*(char *)(v12 + 39) >= 0)
        v14 = (_BYTE *)(v12 + 16);
      v15 = *v14;
      if (*v14)
      {
        v16 = 0;
        v17 = v14 + 1;
        do
        {
          v16 = (0x9E3779B97F4A7C15 * v16) ^ v15;
          v18 = *v17++;
          v15 = v18;
        }
        while (v18);
      }
      else
      {
        v16 = 0;
      }
      if ((v16 & v13) != a3)
        break;
      if (v21 || (v21 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v20) & 1) != 0))
      {
        *v11 = *(_QWORD *)v12;
        *(_QWORD *)v12 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v12;
LABEL_31:
        v12 = *v11;
        if (*v11 <= 0x3F)
          return sub_20BEBF29C(&v20);
      }
      else
      {
        v11 = (unint64_t *)(v22 + 16);
        v12 = *(_QWORD *)(v22 + 16);
        __dmb(0xBu);
        if (v12 < 0x40)
          return sub_20BEBF29C(&v20);
      }
    }
    v11 = (unint64_t *)v12;
    goto LABEL_31;
  }
  return sub_20BEBF29C(&v20);
}

void sub_20BFC2800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFC2814(uint64_t a1, __int128 *a2, __int128 *a3)
{
  void *v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v12[2];

  v7 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x40);
  v12[0] = v7;
  v12[1] = a1;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  v8 = (_BYTE *)(v7 + 16);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(v8, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    *(_QWORD *)(v7 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v8 = v9;
  }
  v10 = *a3;
  *(_QWORD *)(v7 + 56) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v7 + 40) = v10;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v12[0] = 0;
  sub_20BFC28C8(v12, v6);
  return v7;
}

void sub_20BFC28B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BFC28C8(&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BFC28C8(uint64_t *a1, void *a2)
{
  uint64_t v3;

  v3 = *a1;
  if (v3)
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  return a1;
}

uint64_t sub_20BFC28F8(uint64_t a1)
{
  unsigned __int8 v2;
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;
  char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char v14;

  v2 = atomic_load((unsigned __int8 *)(a1 + 24));
  if ((v2 & 1) != 0)
    return *(_QWORD *)(a1 + 96);
  v3 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_20BF444D8((uint64_t *)a1);
  if ((pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v3) & 1) == 0)
  {
    v10 = "ar/resolver.cpp";
    v11 = "Create";
    v12 = 378;
    v13 = "std::unique_ptr<ResolverType> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_PluginResolver<pxrInte"
          "rnal__aapl__pxrReserved__::ArPackageResolver, pxrInternal__aapl__pxrReserved__::Ar_PackageResolverFactoryBase>"
          "::Create() [ResolverType = pxrInternal__aapl__pxrReserved__::ArPackageResolver, ResolverTypeFactory = pxrInter"
          "nal__aapl__pxrReserved__::Ar_PackageResolverFactoryBase]";
    v14 = 0;
    sub_20BF444D8((uint64_t *)a1);
    pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to load plugin %s for %s");
    goto LABEL_7;
  }
  v6 = sub_20BFC2B3C((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 16), v4, v5);
  if (!v6 || (v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 16))(v6)) == 0)
  {
    v10 = "ar/resolver.cpp";
    v11 = "Create";
    v12 = 392;
    v13 = "std::unique_ptr<ResolverType> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_PluginResolver<pxrInte"
          "rnal__aapl__pxrReserved__::ArPackageResolver, pxrInternal__aapl__pxrReserved__::Ar_PackageResolverFactoryBase>"
          "::Create() [ResolverType = pxrInternal__aapl__pxrReserved__::ArPackageResolver, ResolverTypeFactory = pxrInter"
          "nal__aapl__pxrReserved__::Ar_PackageResolverFactoryBase]";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 16));
    sub_20BF444D8((uint64_t *)a1);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to manufacture asset resolver %s from plugin %s");
LABEL_7:
    v7 = 0;
  }
  std::mutex::lock((std::mutex *)(a1 + 32));
  v8 = atomic_load((unsigned __int8 *)(a1 + 24));
  if ((v8 & 1) != 0)
  {
    std::mutex::unlock((std::mutex *)(a1 + 32));
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    sub_20BFC2ACC((_QWORD *)(a1 + 96), v7);
    atomic_store(1u, (unsigned __int8 *)(a1 + 24));
    std::mutex::unlock((std::mutex *)(a1 + 32));
  }
  return *(_QWORD *)(a1 + 96);
}

void sub_20BFC2A9C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20BFC2ACC(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20BFC2B70(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void *sub_20BFC2B3C(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  void *result;

  result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  return result;
}

_QWORD *sub_20BFC2B70(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C523DB8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BFC2BB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20BFC2BDC(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFC2BF0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20BFC2C08(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C523E08))
    return a1 + 24;
  else
    return 0;
}

uint64_t *sub_20BFC2C48(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[3];
  void **v9;

  if ((sub_20BFC2D70(a1) & 1) == 0)
  {
    memset(v8, 0, sizeof(v8));
    sub_20BFC2DE8(a1, v8);
    v9 = (void **)v8;
    sub_20BF8CA20(&v9);
  }
  result = sub_20BFC3374((uint64_t **)a1);
  v5 = *result;
  *result = *a2;
  *a2 = v5;
  v6 = result[1];
  result[1] = a2[1];
  a2[1] = v6;
  v7 = result[2];
  result[2] = a2[2];
  a2[2] = v7;
  return result;
}

void sub_20BFC2CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BF8CA20((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFC2CF4(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BE90F0C(a1, a2);
    v4 = a1[1];
    v5 = v4 + 16 * a2;
    v6 = 16 * a2;
    v7 = (_QWORD *)(v4 + 8);
    do
    {
      *v7 = 0;
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_20BFC2D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BF8CA20(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFC2D70(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAA2AEALL & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C523E20);
}

_QWORD *sub_20BFC2DE8(_QWORD *a1, uint64_t *a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C523E30;
  sub_20BFC32F8(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BFC2E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BFC2EB4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void ***sub_20BFC2EDC(void ***a1, void ***a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BFC2FF8(a1);
}

uint64_t sub_20BFC2EEC()
{
  return 1;
}

unint64_t sub_20BFC2EF4(uint64_t *a1)
{
  char v2;

  return sub_20BFC3058((uint64_t)&v2, *a1);
}

uint64_t sub_20BFC2F18(pxrInternal__aapl__pxrReserved__::VtValue ***a1, uint64_t *a2, char *a3)
{
  return sub_20BFC30E0(*a1, *a2, a3);
}

uint64_t sub_20BFC2F24(pxrInternal__aapl__pxrReserved__::VtValue ***a1, uint64_t a2, char *a3)
{
  return sub_20BFC30E0(*a1, a2, a3);
}

uint64_t sub_20BFC2F30()
{
  return 0;
}

_QWORD *sub_20BFC2F3C(uint64_t **a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtStreamOut(*a1, a2);
}

void *sub_20BFC2F44()
{
  return &unk_24C523E20;
}

uint64_t sub_20BFC2F50()
{
  return 0;
}

uint64_t sub_20BFC2F58()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BFC2F64()
{
  return 0;
}

uint64_t sub_20BFC2F6C()
{
  return 0;
}

BOOL sub_20BFC2F74(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAA2AEALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BFC2FAC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C523E20, a2, a3);
}

void *sub_20BFC2FCC()
{
  return &unk_24C523E20;
}

uint64_t sub_20BFC2FD8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *sub_20BFC2FE0@<X0>(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  v2 = *a1;
  a2[1] = &off_24C523E30;
  return sub_20BFC32F8(a2, v2);
}

void ***sub_20BFC2FF8(void ***a1)
{
  void **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 3);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v7 = v2;
      sub_20BF8CA20(&v7);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BFC3058(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Hash;

  v2 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a2;
  v3 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = v3 >> 4;
    do
    {
      Hash = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(v2);
      if (v4)
      {
        v5 = Hash + ((unint64_t)(Hash + v5 + (Hash + v5) * (Hash + v5)) >> 1);
      }
      else
      {
        v4 = 1;
        v5 = Hash;
      }
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v2 + 16);
      --v6;
    }
    while (v6);
  }
  else
  {
    v5 = 0;
  }
  return bswap64(0x9E3779B97F4A7C55 * v5);
}

uint64_t sub_20BFC30E0(pxrInternal__aapl__pxrReserved__::VtValue **a1, uint64_t a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  std::type_info *v5;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  v5 = *(std::type_info **)a2;
  if (v4 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v3 == v4)
    return 1;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v3, v5, a3);
    if (!(_DWORD)result)
      break;
    v3 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v3 + 16);
    ++v5;
  }
  while (v3 != v4);
  return result;
}

uint64_t *sub_20BFC3150(uint64_t **a1)
{
  unsigned int v2;
  char *v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int v6;
  void **v8;

  v2 = atomic_load((unsigned int *)*a1 + 6);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x20uLL);
    v4 = *a1;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    *(_QWORD *)v3 = 0;
    sub_20BFC31F4(v3, *v4, v4[1], (v4[1] - *v4) >> 4);
    v5 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)v3 + 6);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v8 = (void **)*a1;
    *a1 = (uint64_t *)v3;
    sub_20BFC2FF8(&v8);
  }
  return *a1;
}

void sub_20BFC31E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFC31F4(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BE90F0C(result, a4);
    result = (_QWORD *)sub_20BFC3278((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20BFC3258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BF8CA20(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFC3278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      sub_20BF4C6D0((_QWORD *)(a4 + v7), (_QWORD *)(a2 + v7));
      v7 += 16;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20BFC32D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 16;
    do
    {
      sub_20BF4C2D8(v4 + v2);
      v2 -= 16;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFC32F8(_QWORD *a1, uint64_t *a2)
{
  char *v4;
  _QWORD *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (char *)operator new(0x20uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = 0;
  result = sub_20BFC31F4(v4, *a2, a2[1], (a2[1] - *a2) >> 4);
  v6 = (unsigned int *)(v4 + 24);
  atomic_store(0, (unsigned int *)v4 + 6);
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20BFC3360(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BFC3374(uint64_t **a1)
{
  uint64_t *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BFC3150(a1);
}

void **sub_20BFC3404(uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  void *v15[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v15[4] = result;
    if (v12)
      v13 = (char *)sub_20BDE4FF4((uint64_t)result, v12);
    else
      v13 = 0;
    v14 = &v13[24 * v9];
    v15[0] = v13;
    v15[1] = v14;
    v15[3] = &v13[24 * v12];
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v15[2] = v14 + 24;
    sub_20BFC354C(a1, v15);
    v8 = (_QWORD *)a1[1];
    result = sub_20BE109F0(v15);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_20BFC3538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE109F0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFC354C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BFC35C0((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BFC35C0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20BFC3660((uint64_t)v11);
  return v9;
}

uint64_t sub_20BFC3660(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BE109A8(a1);
  return a1;
}

uint64_t sub_20BFC3694(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_20BFB73DC(v11, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v15 += 24;
  sub_20BFC354C(a1, v14);
  v12 = a1[1];
  sub_20BE109F0(v14);
  return v12;
}

void sub_20BFC3794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE109F0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFC37A8(uint64_t a1)
{
  sub_20BF4C2D8(a1 + 72);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20BFC3800(_QWORD *a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  result = a1[1];
  v4 = (result - *a1) >> 4;
  if (a2 > v4)
    return sub_20BFC386C(a1, a2 - v4);
  if (a2 < v4)
  {
    v5 = *a1 + 16 * a2;
    while (result != v5)
      result = sub_20BF4C2D8(result - 16);
    a1[1] = v5;
  }
  return result;
}

uint64_t sub_20BFC386C(_QWORD *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      v14 = 16 * a2;
      v15 = (_QWORD *)(v7 + 8);
      v7 += 16 * a2;
      do
      {
        *v15 = 0;
        v15 += 2;
        v14 -= 16;
      }
      while (v14);
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_20BDDF694();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v23 = result;
    if (v12)
      v13 = (char *)sub_20BDEA2F0(result, v12);
    else
      v13 = 0;
    v19 = v13;
    v20 = &v13[16 * v10];
    v22 = &v13[16 * v12];
    v16 = 16 * a2;
    v17 = v20 + 8;
    v18 = &v20[16 * a2];
    do
    {
      *v17 = 0;
      v17 += 2;
      v16 -= 16;
    }
    while (v16);
    v21 = v18;
    sub_20BFC397C(a1, &v19);
    return sub_20BFC3A00((uint64_t)&v19);
  }
  return result;
}

void sub_20BFC3968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFC3A00((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFC397C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (_QWORD *)*a1;
  v4 = (_QWORD *)a1[1];
  result = (_QWORD *)a2[1];
  while (v4 != v5)
  {
    v4 -= 2;
    result = sub_20BF4C200(result - 2, v4);
  }
  a2[1] = result;
  v7 = (_QWORD *)*a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BFC3A00(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    sub_20BF4C2D8(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20BFC3A4C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_120_DispatchingResolver6_CacheEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, (const std::type_info *)&unk_24C523EE8);
}

unint64_t *sub_20BFC3ABC(unint64_t *result, __int128 *a2)
{
  unint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  unint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  unint64_t v26;
  unint64_t *v27;

  v3 = result;
  v4 = result[2];
  v5 = (_QWORD *)result[1];
  if ((unint64_t)v5 >= v4)
  {
    v10 = *result;
    v11 = (uint64_t)((uint64_t)v5 - *result) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      sub_20BDDF694();
    v13 = v4 - v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v27 = result + 2;
    if (v14 >> 60)
      sub_20BDDF5B4();
    v15 = (char *)operator new(16 * v14);
    v16 = &v15[16 * v11];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v10 = *v3;
      v5 = (_QWORD *)v3[1];
    }
    if (v5 == (_QWORD *)v10)
    {
      v22 = vdupq_n_s64(v10);
      v20 = &v15[16 * v11];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != (_QWORD *)v10);
      v22 = *(int64x2_t *)v3;
    }
    v9 = v16 + 16;
    *v3 = (unint64_t)v20;
    v3[1] = (unint64_t)(v16 + 16);
    v25 = v22;
    v23 = v3[2];
    v3[2] = (unint64_t)&v15[16 * v14];
    v26 = v23;
    v24 = v22.i64[0];
    result = (unint64_t *)sub_20BDEA324((uint64_t)&v24);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v6 = *((_QWORD *)a2 + 1);
    v5[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 2;
  }
  v3[1] = (unint64_t)v9;
  return result;
}

void sub_20BFC3C14(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C523F08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFC3C24(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C523F08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFC3C44(uint64_t a1)
{
  return sub_20BFC3C64((unint64_t *)(a1 + 24));
}

uint64_t sub_20BFC3C64(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t result;

  v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  v3 = sub_20BEB4B94(v2);
  do
  {
    v4 = 0;
    v5 = v3;
    v6 = a1[v3 + 1];
    if (v3-- > 1)
      v8 = v5;
    else
      v8 = 1;
    do
    {
      v9 = v6 + 24 * v4;
      v12 = *(_QWORD *)(v9 + 16);
      v11 = (_QWORD *)(v9 + 16);
      v10 = (_QWORD *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *v11 = *v10;
          sub_20BFC2524((uint64_t)a1, (uint64_t)v10);
          v10 = (_QWORD *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    result = sub_20BFC3D30((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_20BFC3D30(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;

  v2 = a1 + 8 * a2;
  v5 = *(_QWORD *)(v2 + 8);
  v4 = (_QWORD *)(v2 + 8);
  result = v5;
  if (a2 < 8)
  {
    if (!a2)
      return result;
    if (a2 == 1)
      result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
  }
  else
  {
    result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *v4 = 0;
  return result;
}

char *sub_20BFC3D7C(_QWORD *a1, _QWORD *a2)
{
  char *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  a1[1] = &off_24C523F48;
  result = (char *)operator new(0x18uLL);
  v5 = a2[1];
  *(_QWORD *)result = *a2;
  *((_QWORD *)result + 1) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)result + 4);
  *a1 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

uint64_t *sub_20BFC3DEC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **sub_20BFC3E14(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **a1, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BFC3FD4(a1);
}

uint64_t sub_20BFC3E24()
{
  return 0;
}

uint64_t sub_20BFC3E2C(uint64_t a1, const std::type_info *a2)
{
  pxrInternal__aapl__pxrReserved__::Vt_HashDetail::_IssueUnimplementedHashError((pxrInternal__aapl__pxrReserved__::Vt_HashDetail *)&unk_24C523EE8, a2);
  return 0;
}

BOOL sub_20BFC3E4C(_QWORD **a1, _QWORD **a2)
{
  return **a1 == **a2;
}

BOOL sub_20BFC3E68(_QWORD **a1, _QWORD *a2)
{
  return **a1 == *a2;
}

pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **sub_20BFC3E80(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **result)
{
  unsigned int v1;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **v2;
  char *v3;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  v1 = atomic_load((unsigned int *)*result + 4);
  if (v1 != 1)
  {
    v2 = result;
    v3 = (char *)operator new(0x18uLL);
    v4 = *v2;
    v5 = *((_QWORD *)*v2 + 1);
    *(_QWORD *)v3 = *(_QWORD *)*v2;
    *((_QWORD *)v3 + 1) = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      v4 = *v2;
    }
    v8 = (unsigned int *)(v3 + 16);
    atomic_store(0, (unsigned int *)v3 + 4);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v10 = v4;
    *v2 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v3;
    return sub_20BFC3FD4(&v10);
  }
  return result;
}

uint64_t sub_20BFC3F10()
{
  return 0;
}

uint64_t sub_20BFC3F1C()
{
  return std::ostream::operator<<();
}

void *sub_20BFC3F30()
{
  return &unk_24C523EE8;
}

uint64_t sub_20BFC3F3C()
{
  return 0;
}

uint64_t sub_20BFC3F44()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BFC3F50()
{
  return 0;
}

uint64_t sub_20BFC3F58()
{
  return 0;
}

BOOL sub_20BFC3F60(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"NSt3__110shared_ptrIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_120_DispatchingResolver6_CacheEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BFC3F90(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C523EE8, a2, a3);
}

void *sub_20BFC3FB0()
{
  return &unk_24C523EE8;
}

uint64_t sub_20BFC3FBC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BFC3FC4@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  v2 = *a1;
  a2[1] = 0;
  return sub_20BFC3D7C(a2, v2);
}

pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **sub_20BFC3FD4(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;

  v2 = *a1;
  if (v2)
  {
    v3 = (unsigned int *)((char *)v2 + 16);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v2);
      operator delete(v6);
    }
  }
  return a1;
}

void **sub_20BFC4020(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BDE4FF4((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 24 * v6;
    sub_20BFC354C(a1, v7);
    return sub_20BE109F0(v7);
  }
  return result;
}

void sub_20BFC40BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE109F0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFC40D0(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[2];
  uint64_t v13;

  v4 = a1[2];
  v5 = a1[1];
  if (v5 >= v4)
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    if ((unint64_t)(v8 + 1) > 0x492492492492492)
      sub_20BDDF694();
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - *a1) >> 3);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v10;
    sub_20BFC42F8(v12, v11, v8, (uint64_t)(a1 + 2));
    sub_20BFC4260(v13, a2);
    v13 += 56;
    sub_20BFC4374(a1, v12);
    v7 = a1[1];
    result = sub_20BFC4420((uint64_t)v12);
  }
  else
  {
    result = (uint64_t)sub_20BFC4260(a1[1], a2);
    v7 = v5 + 56;
    a1[1] = v5 + 56;
  }
  a1[1] = v7;
  return result;
}

void sub_20BFC41D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFC4420((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_20BFC41F8(unint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v5;

  v2 = operator new(0x18uLL);
  v3 = v2;
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)v2, a1))
      return (unint64_t)v3;
  }
  __clrex();
  v5 = (void *)*v2;
  if (*v3)
  {
    v3[1] = v5;
    operator delete(v5);
  }
  operator delete(v3);
  return atomic_load(a1);
}

char *sub_20BFC4260(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  char *result;
  __int16 v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = sub_20BE78B98((char *)(a1 + 24), *(__int128 **)(a2 + 24), *(__int128 **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  v9 = *(_WORD *)(a2 + 48);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_WORD *)(a1 + 48) = v9;
  return result;
}

void sub_20BFC42E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B4E8(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFC42F8(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;

  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x492492492492493)
      sub_20BDDF5B4();
    v7 = (char *)operator new(56 * a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[56 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[56 * a2];
  return a1;
}

uint64_t *sub_20BFC4374(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      v8 = *(_QWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 40) = v8;
      *(_QWORD *)(v6 - 32) = 0;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      LOWORD(v8) = *(_WORD *)(v2 + v5 - 8);
      *(_BYTE *)(v6 - 6) = *(_BYTE *)(v2 + v5 - 6);
      *(_WORD *)(v6 - 8) = v8;
      v5 -= 56;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v9 = *result;
  *result = v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BFC4420(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  while (1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3 == v2)
      break;
    *(_QWORD *)(a1 + 16) = v3 - 56;
    sub_20BFC4470(v3 - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20BFC4470(uint64_t a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v6;

  v6 = (void **)(a1 + 24);
  sub_20BDE5038(&v6);
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *sub_20BFC44D0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  if (a2 == a3)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = a2;
    do
    {
      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      ++v3;
      v4 = v6;
    }
    while (v6 != a3);
  }
  return sub_20BFC4A3C(a1, a2, a3, v3);
}

void sub_20BFC4528(pxrInternal__aapl__pxrReserved__::PlugRegistry *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v4)(uint64_t *);
  char v5;
  uint64_t TypeName;
  const char *v7;
  char *v8;
  uint64_t v9;

  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(a1);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(*(_QWORD *)a1, a2);
  v4 = sub_20BF46110(a2);
  if (!(v5 & 1 | (unint64_t)v4) && sub_20BFC09C8(0))
  {
    TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
    if (*(char *)(TypeName + 23) >= 0)
      v9 = TypeName;
    else
      v9 = *(_QWORD *)TypeName;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Failed to find plugin for %s", v7, v8, v9);
  }
}

void sub_20BFC45A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFC45E4@<X0>(pxrInternal__aapl__pxrReserved__::TfType *a1@<X0>, pxrInternal__aapl__pxrReserved__::PlugRegistry *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v9;
  pxrInternal__aapl__pxrReserved__::TfToken *v10;
  uint64_t *EmptyString;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  const char *v18;
  uint64_t TypeName;
  const char *v20;
  const char *p_p;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __n128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  _BYTE v37[8];
  std::__shared_weak_count *v38;
  void *v39;
  char *v40;
  uint64_t v41;
  const char *v42;
  char v43;
  void *__p;
  std::__shared_weak_count *v45;
  char v46;
  char v47;
  __int128 v48;
  char v49;
  uint64_t v50;
  uint64_t v51;

  result = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  if (*(_QWORD *)a2 == *(_QWORD *)result)
  {
    *a3 = 0;
    a3[16] = 0;
    return result;
  }
  sub_20BFC4528(a2, &v50);
  v7 = sub_20BF46110(&v50);
  if (!(v8 & 1 | (unint64_t)v7))
  {
    *a3 = 0;
    a3[16] = 0;
    goto LABEL_56;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_20BF444D8(&v50);
  pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadataForType(v9, a2, (uint64_t *)&v39);
  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
  LOBYTE(__p) = 0;
  v46 = 0;
  pxrInternal__aapl__pxrReserved__::JsFindValue((uint64_t)&v39, (uint64_t)EmptyString, (uint64_t)&__p, (uint64_t)&v48);
  if (v46)
  {
    v12 = v45;
    if (v45)
    {
      p_shared_owners = (unint64_t *)&v45->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  sub_20BE78E5C((uint64_t)&v39, v40);
  if (!v49)
  {
LABEL_35:
    pxrInternal__aapl__pxrReserved__::TfType::GetBaseTypes(a2, v15, v16, &v39);
    v25 = (char *)v39;
    v26 = v40;
    if (v39 == v40)
    {
LABEL_45:
      if (v25)
      {
        v40 = v25;
        operator delete(v25);
      }
      *a3 = 0;
      a3[16] = 0;
    }
    else
    {
      while (1)
      {
        sub_20BFC45E4(&__p, a1, v25);
        v27 = sub_20BFC64C8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v48, (uint64_t)&__p);
        if (v46)
        {
          v28 = v45;
          if (v45)
          {
            v29 = (unint64_t *)&v45->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v28->__on_zero_shared)(v28, v27);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
        if (v49)
          break;
        v25 += 8;
        if (v25 == v26)
        {
          v25 = (char *)v39;
          goto LABEL_45;
        }
      }
      *(_OWORD *)a3 = v48;
      v48 = 0uLL;
      a3[16] = 1;
      if (v39)
      {
        v40 = (char *)v39;
        operator delete(v39);
      }
    }
    goto LABEL_50;
  }
  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)&v48))
  {
    v39 = "ar/resolver.cpp";
    v40 = "_FindMetadataValueOnTypeOrBase";
    v41 = 217;
    v42 = "JsOptionalValue pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_FindMetadataValueOnTypeOrBase(const "
          "TfToken &, const TfType &) [T = BOOL]";
    v43 = 0;
    v17 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v17)
    {
      v18 = (const char *)(v17 + 16);
      if (*(char *)(v17 + 39) < 0)
        v18 = *(const char **)v18;
    }
    else
    {
      v18 = "";
    }
    TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
    if (*(char *)(TypeName + 23) >= 0)
      v20 = (const char *)TypeName;
    else
      v20 = *(const char **)TypeName;
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)v37, 0);
    pxrInternal__aapl__pxrReserved__::JsValue::GetTypeName((pxrInternal__aapl__pxrReserved__::JsValue *)v37, &__p);
    if (v47 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 1, (pxrInternal__aapl__pxrReserved__ *)"'%s' metadata for %s must be a %s.", v18, v20, p_p);
    if (v47 < 0)
      operator delete(__p);
    v22 = v38;
    if (v38)
    {
      v23 = (unint64_t *)&v38->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    goto LABEL_35;
  }
  *a3 = 0;
  a3[16] = 0;
  if (v49)
  {
    *(_OWORD *)a3 = v48;
    v48 = 0uLL;
    a3[16] = 1;
LABEL_50:
    if (v49)
    {
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
      if (*((_QWORD *)&v48 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
    }
  }
LABEL_56:
  result = v51;
  if (v51)
  {
    v34 = (unsigned int *)(v51 + 8);
    do
    {
      v35 = __ldxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20BFC496C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,char a22,int a23,__int16 a24,char a25)
{
  uint64_t v25;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;

  if (SHIBYTE(a23) < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  if (*(_BYTE *)(v25 - 80))
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v25 - 96));
  v27 = *(unsigned int **)(v25 - 56);
  if (v27)
  {
    v28 = v27 + 2;
    do
    {
      v29 = __ldxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
      (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFC4A3C(_QWORD *a1, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = a1[2];
  v9 = (_QWORD *)*a1;
  if (a4 <= (v8 - *a1) >> 3)
  {
    v13 = (uint64_t)(a1[1] - (_QWORD)v9) >> 3;
    if (v13 >= a4)
    {
      result = sub_20BFC4BC4(a2, a3, v9);
      a1[1] = v15;
    }
    else
    {
      v16 = a2;
      sub_20BE754A0(&v16, v13);
      v14 = v16;
      sub_20BFC4BC4(a2, v16, (_QWORD *)*a1);
      return (_QWORD *)sub_20BFC4B6C((uint64_t)a1, v14, a3);
    }
  }
  else
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      sub_20BDDF694();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    sub_20BDDF654(a1, v11);
    return (_QWORD *)sub_20BFC4B6C((uint64_t)a1, a2, a3);
  }
  return result;
}

uint64_t sub_20BFC4B6C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v3 = *(_QWORD **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      *v3 = a2[4];
      v4 = (_QWORD *)a2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)a2[2];
          v6 = *v5 == (_QWORD)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

_QWORD *sub_20BFC4BC4(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  if (result != a2)
  {
    do
    {
      *a3 = result[4];
      v3 = (_QWORD *)result[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)result[2];
          v5 = *v4 == (_QWORD)result;
          result = v4;
        }
        while (!v5);
      }
      ++a3;
      result = v4;
    }
    while (v4 != a2);
    return a2;
  }
  return result;
}

uint64_t sub_20BFC4C1C(uint64_t result, pxrInternal__aapl__pxrReserved__::TfType *a2, uint64_t a3, char a4)
{
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v8;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  pxrInternal__aapl__pxrReserved__::TfType *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  size_t v19;
  const void *v20;
  size_t v21;
  const void *v22;
  size_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  size_t v31;
  const void *v32;
  size_t v33;
  const void *v34;
  size_t v35;
  int v36;
  BOOL v37;
  pxrInternal__aapl__pxrReserved__::TfType *v38;
  pxrInternal__aapl__pxrReserved__::TfType *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  size_t v44;
  const void *v45;
  size_t v46;
  const void *v47;
  size_t v48;
  int v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  size_t v55;
  const void *v56;
  size_t v57;
  const void *v58;
  size_t v59;
  int v60;
  BOOL v61;
  pxrInternal__aapl__pxrReserved__::TfType *v62;
  pxrInternal__aapl__pxrReserved__::TfType *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  size_t v69;
  const void *v70;
  size_t v71;
  const void *v72;
  size_t v73;
  int v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  size_t v80;
  const void *v81;
  size_t v82;
  const void *v83;
  size_t v84;
  int v85;
  _BOOL4 v86;
  uint64_t *v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  size_t v93;
  const void *v94;
  size_t v95;
  const void *v96;
  size_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  size_t v103;
  const void *v104;
  size_t v105;
  const void *v106;
  size_t v107;
  BOOL v108;
  pxrInternal__aapl__pxrReserved__::TfType *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  size_t v114;
  const void *v115;
  size_t v116;
  const void *v117;
  size_t v118;
  _BOOL4 v119;
  pxrInternal__aapl__pxrReserved__::TfType *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  size_t v125;
  const void *v126;
  size_t v127;
  const void *v128;
  size_t v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  size_t v136;
  const void *v137;
  size_t v138;
  const void *v139;
  size_t v140;
  int v141;
  _BOOL4 v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  size_t v147;
  const void *v148;
  size_t v149;
  const void *v150;
  size_t v151;
  BOOL v152;
  uint64_t *v153;
  uint64_t TypeName;
  uint64_t v155;
  int v156;
  int v157;
  size_t v158;
  const void *v159;
  size_t v160;
  const void *v161;
  size_t v162;
  _BOOL4 v163;
  uint64_t v164;
  pxrInternal__aapl__pxrReserved__::TfType *v165;
  BOOL v167;
  uint64_t v168;
  pxrInternal__aapl__pxrReserved__::TfType *v169;
  pxrInternal__aapl__pxrReserved__::TfType *v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  size_t v175;
  const void *v176;
  size_t v177;
  const void *v178;
  size_t v179;
  _BOOL4 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  int v185;
  size_t v186;
  const void *v187;
  size_t v188;
  const void *v189;
  size_t v190;
  BOOL v191;
  _QWORD *v192;
  int64_t v193;
  int64_t v194;
  int64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  size_t v202;
  const void *v203;
  size_t v204;
  const void *v205;
  size_t v206;
  int v207;
  _BOOL4 v208;
  pxrInternal__aapl__pxrReserved__::TfType *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  int v213;
  size_t v214;
  const void *v215;
  size_t v216;
  const void *v217;
  size_t v218;
  BOOL v219;
  pxrInternal__aapl__pxrReserved__::TfType *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  int v226;
  int64_t v227;
  size_t v228;
  const void *v229;
  size_t v230;
  const void *v231;
  size_t v232;
  int v233;
  BOOL v234;
  _BOOL4 v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  size_t v240;
  const void *v241;
  size_t v242;
  const void *v243;
  size_t v244;
  _BOOL4 v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  int v255;
  size_t v256;
  const void *v257;
  size_t v258;
  const void *v259;
  size_t v260;
  _BOOL4 v261;
  uint64_t *v262;
  uint64_t v263;
  unint64_t v264;
  pxrInternal__aapl__pxrReserved__::TfType *v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  int v269;
  size_t v270;
  const void *v271;
  size_t v272;
  const void *v273;
  size_t v274;
  _BOOL4 v275;
  pxrInternal__aapl__pxrReserved__::TfType *v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  int v280;
  size_t v281;
  const void *v282;
  size_t v283;
  const void *v284;
  size_t v285;
  BOOL v286;
  pxrInternal__aapl__pxrReserved__::TfType *v288;
  pxrInternal__aapl__pxrReserved__::TfType *v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  int v293;
  size_t v294;
  const void *v295;
  size_t v296;
  const void *v297;
  size_t v298;
  _BOOL4 v299;
  pxrInternal__aapl__pxrReserved__::TfType *v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  int v304;
  size_t v305;
  const void *v306;
  size_t v307;
  const void *v308;
  size_t v309;
  BOOL v310;
  unint64_t v311;
  int64_t v312;
  uint64_t v313;
  uint64_t v315;

  v6 = result;
LABEL_2:
  v7 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8);
  v8 = (pxrInternal__aapl__pxrReserved__::TfType *)v6;
  while (2)
  {
    v6 = (uint64_t)v8;
    v9 = a2;
    v10 = a2 - v8;
    v11 = (a2 - v8) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
        v155 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v6);
        v156 = *(char *)(v155 + 23);
        v157 = *(char *)(TypeName + 23);
        if (v157 >= 0)
          v158 = *(unsigned __int8 *)(TypeName + 23);
        else
          v158 = *(_QWORD *)(TypeName + 8);
        if (v157 >= 0)
          v159 = (const void *)TypeName;
        else
          v159 = *(const void **)TypeName;
        if (v156 >= 0)
          v160 = *(unsigned __int8 *)(v155 + 23);
        else
          v160 = *(_QWORD *)(v155 + 8);
        if (v156 >= 0)
          v161 = (const void *)v155;
        else
          v161 = *(const void **)v155;
        if (v160 >= v158)
          v162 = v158;
        else
          v162 = v160;
        result = memcmp(v159, v161, v162);
        v163 = v158 < v160;
        if ((_DWORD)result)
          v163 = (int)result < 0;
        if (v163)
        {
          v164 = *(_QWORD *)v6;
          *(_QWORD *)v6 = *(_QWORD *)v7;
          *(_QWORD *)v7 = v164;
        }
        return result;
      case 3:
        return sub_20BFC5E14((pxrInternal__aapl__pxrReserved__::TfType *)v6, (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8), v7);
      case 4:
        return sub_20BFC630C((pxrInternal__aapl__pxrReserved__::TfType *)v6, (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8), (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 16), v7);
      case 5:
        return sub_20BFC5BCC((pxrInternal__aapl__pxrReserved__::TfType *)v6, (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8), (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 16), (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 24), v7);
      default:
        if (v10 <= 191)
        {
          v165 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8);
          v167 = (pxrInternal__aapl__pxrReserved__::TfType *)v6 == a2 || v165 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v167)
            {
              v168 = 0;
              v169 = (pxrInternal__aapl__pxrReserved__::TfType *)v6;
              do
              {
                v170 = v169;
                v169 = v165;
                v171 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v165);
                v172 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v170);
                v173 = *(char *)(v172 + 23);
                v174 = *(char *)(v171 + 23);
                if (v174 >= 0)
                  v175 = *(unsigned __int8 *)(v171 + 23);
                else
                  v175 = *(_QWORD *)(v171 + 8);
                if (v174 >= 0)
                  v176 = (const void *)v171;
                else
                  v176 = *(const void **)v171;
                if (v173 >= 0)
                  v177 = *(unsigned __int8 *)(v172 + 23);
                else
                  v177 = *(_QWORD *)(v172 + 8);
                if (v173 >= 0)
                  v178 = (const void *)v172;
                else
                  v178 = *(const void **)v172;
                if (v177 >= v175)
                  v179 = v175;
                else
                  v179 = v177;
                result = memcmp(v176, v178, v179);
                v180 = v175 < v177;
                if ((_DWORD)result)
                  v180 = (int)result < 0;
                if (v180)
                {
                  v315 = *(_QWORD *)v169;
                  v181 = v168;
                  while (1)
                  {
                    *(_QWORD *)(v6 + v181 + 8) = *(_QWORD *)(v6 + v181);
                    if (!v181)
                      break;
                    v181 -= 8;
                    v182 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                    v183 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v181 + v6));
                    v184 = *(char *)(v183 + 23);
                    v185 = *(char *)(v182 + 23);
                    if (v185 >= 0)
                      v186 = *(unsigned __int8 *)(v182 + 23);
                    else
                      v186 = *(_QWORD *)(v182 + 8);
                    if (v185 >= 0)
                      v187 = (const void *)v182;
                    else
                      v187 = *(const void **)v182;
                    if (v184 >= 0)
                      v188 = *(unsigned __int8 *)(v183 + 23);
                    else
                      v188 = *(_QWORD *)(v183 + 8);
                    if (v184 >= 0)
                      v189 = (const void *)v183;
                    else
                      v189 = *(const void **)v183;
                    if (v188 >= v186)
                      v190 = v186;
                    else
                      v190 = v188;
                    result = memcmp(v187, v189, v190);
                    v191 = v186 < v188;
                    if ((_DWORD)result)
                      v191 = (int)result < 0;
                    if (!v191)
                    {
                      v192 = (_QWORD *)(v6 + v181 + 8);
                      goto LABEL_329;
                    }
                  }
                  v192 = (_QWORD *)v6;
LABEL_329:
                  *v192 = v315;
                }
                v165 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v169 + 8);
                v168 += 8;
              }
              while ((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v169 + 8) != a2);
            }
          }
          else if (!v167)
          {
            v288 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 - 8);
            do
            {
              v289 = (pxrInternal__aapl__pxrReserved__::TfType *)v6;
              v6 = (uint64_t)v165;
              v290 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v165);
              v291 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v289);
              v292 = *(char *)(v291 + 23);
              v293 = *(char *)(v290 + 23);
              if (v293 >= 0)
                v294 = *(unsigned __int8 *)(v290 + 23);
              else
                v294 = *(_QWORD *)(v290 + 8);
              if (v293 >= 0)
                v295 = (const void *)v290;
              else
                v295 = *(const void **)v290;
              if (v292 >= 0)
                v296 = *(unsigned __int8 *)(v291 + 23);
              else
                v296 = *(_QWORD *)(v291 + 8);
              if (v292 >= 0)
                v297 = (const void *)v291;
              else
                v297 = *(const void **)v291;
              if (v296 >= v294)
                v298 = v294;
              else
                v298 = v296;
              result = memcmp(v295, v297, v298);
              v299 = v294 < v296;
              if ((_DWORD)result)
                v299 = (int)result < 0;
              if (v299)
              {
                v315 = *(_QWORD *)v6;
                v300 = v288;
                do
                {
                  *((_QWORD *)v300 + 2) = *((_QWORD *)v300 + 1);
                  v301 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                  v302 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v300);
                  v303 = *(char *)(v302 + 23);
                  v304 = *(char *)(v301 + 23);
                  if (v304 >= 0)
                    v305 = *(unsigned __int8 *)(v301 + 23);
                  else
                    v305 = *(_QWORD *)(v301 + 8);
                  if (v304 >= 0)
                    v306 = (const void *)v301;
                  else
                    v306 = *(const void **)v301;
                  if (v303 >= 0)
                    v307 = *(unsigned __int8 *)(v302 + 23);
                  else
                    v307 = *(_QWORD *)(v302 + 8);
                  if (v303 >= 0)
                    v308 = (const void *)v302;
                  else
                    v308 = *(const void **)v302;
                  if (v307 >= v305)
                    v309 = v305;
                  else
                    v309 = v307;
                  result = memcmp(v306, v308, v309);
                  v310 = v305 < v307;
                  if ((_DWORD)result)
                    v310 = (int)result < 0;
                  v300 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v300 - 8);
                }
                while (v310);
                *((_QWORD *)v300 + 2) = v315;
              }
              v165 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8);
              v288 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v288 + 8);
            }
            while ((pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((pxrInternal__aapl__pxrReserved__::TfType *)v6 != a2)
          {
            v311 = v10;
            v193 = (unint64_t)(v11 - 2) >> 1;
            v194 = v193;
            do
            {
              v195 = v194;
              if (v193 >= v194)
              {
                v196 = (2 * v194) | 1;
                v197 = v6 + 8 * v196;
                if (2 * v194 + 2 < v11)
                {
                  v198 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8 * v196));
                  v199 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v197 + 8));
                  v200 = *(char *)(v199 + 23);
                  v201 = *(char *)(v198 + 23);
                  if (v201 >= 0)
                    v202 = *(unsigned __int8 *)(v198 + 23);
                  else
                    v202 = *(_QWORD *)(v198 + 8);
                  if (v201 >= 0)
                    v203 = (const void *)v198;
                  else
                    v203 = *(const void **)v198;
                  if (v200 >= 0)
                    v204 = *(unsigned __int8 *)(v199 + 23);
                  else
                    v204 = *(_QWORD *)(v199 + 8);
                  if (v200 >= 0)
                    v205 = (const void *)v199;
                  else
                    v205 = *(const void **)v199;
                  if (v204 >= v202)
                    v206 = v202;
                  else
                    v206 = v204;
                  v207 = memcmp(v203, v205, v206);
                  v208 = v202 < v204;
                  if (v207)
                    v208 = v207 < 0;
                  if (v208)
                  {
                    v197 += 8;
                    v196 = 2 * v195 + 2;
                  }
                }
                v209 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8 * v195);
                v210 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v197);
                v211 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v209);
                v212 = *(char *)(v211 + 23);
                v213 = *(char *)(v210 + 23);
                if (v213 >= 0)
                  v214 = *(unsigned __int8 *)(v210 + 23);
                else
                  v214 = *(_QWORD *)(v210 + 8);
                if (v213 >= 0)
                  v215 = (const void *)v210;
                else
                  v215 = *(const void **)v210;
                if (v212 >= 0)
                  v216 = *(unsigned __int8 *)(v211 + 23);
                else
                  v216 = *(_QWORD *)(v211 + 8);
                if (v212 >= 0)
                  v217 = (const void *)v211;
                else
                  v217 = *(const void **)v211;
                if (v216 >= v214)
                  v218 = v214;
                else
                  v218 = v216;
                result = memcmp(v215, v217, v218);
                v219 = v214 < v216;
                if ((_DWORD)result)
                  v219 = (int)result < 0;
                if (!v219)
                {
                  v312 = v195;
                  v315 = *(_QWORD *)v209;
                  do
                  {
                    v220 = (pxrInternal__aapl__pxrReserved__::TfType *)v197;
                    *(_QWORD *)v209 = *(_QWORD *)v197;
                    if (v193 < v196)
                      break;
                    v221 = (2 * v196) | 1;
                    v197 = v6 + 8 * v221;
                    v222 = 2 * v196 + 2;
                    if (v222 < v11)
                    {
                      v223 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8 * v221));
                      v224 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v197 + 8));
                      v225 = *(char *)(v224 + 23);
                      v226 = *(char *)(v223 + 23);
                      v227 = v193;
                      if (v226 >= 0)
                        v228 = *(unsigned __int8 *)(v223 + 23);
                      else
                        v228 = *(_QWORD *)(v223 + 8);
                      if (v226 >= 0)
                        v229 = (const void *)v223;
                      else
                        v229 = *(const void **)v223;
                      if (v225 >= 0)
                        v230 = *(unsigned __int8 *)(v224 + 23);
                      else
                        v230 = *(_QWORD *)(v224 + 8);
                      if (v225 >= 0)
                        v231 = (const void *)v224;
                      else
                        v231 = *(const void **)v224;
                      if (v230 >= v228)
                        v232 = v228;
                      else
                        v232 = v230;
                      v233 = memcmp(v229, v231, v232);
                      v234 = v228 >= v230;
                      v193 = v227;
                      v235 = !v234;
                      if (v233)
                        v235 = v233 < 0;
                      if (v235)
                      {
                        v197 += 8;
                        v221 = v222;
                      }
                    }
                    v236 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v197);
                    v237 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                    v238 = *(char *)(v237 + 23);
                    v239 = *(char *)(v236 + 23);
                    if (v239 >= 0)
                      v240 = *(unsigned __int8 *)(v236 + 23);
                    else
                      v240 = *(_QWORD *)(v236 + 8);
                    if (v239 >= 0)
                      v241 = (const void *)v236;
                    else
                      v241 = *(const void **)v236;
                    if (v238 >= 0)
                      v242 = *(unsigned __int8 *)(v237 + 23);
                    else
                      v242 = *(_QWORD *)(v237 + 8);
                    if (v238 >= 0)
                      v243 = (const void *)v237;
                    else
                      v243 = *(const void **)v237;
                    if (v242 >= v240)
                      v244 = v240;
                    else
                      v244 = v242;
                    result = memcmp(v241, v243, v244);
                    v245 = v240 < v242;
                    if ((_DWORD)result)
                      v245 = (int)result < 0;
                    v209 = v220;
                    v196 = v221;
                  }
                  while (!v245);
                  *(_QWORD *)v220 = v315;
                  v195 = v312;
                }
              }
              v194 = v195 - 1;
            }
            while (v195);
            v246 = v311 >> 3;
            do
            {
              v247 = 0;
              v313 = *(_QWORD *)v6;
              v248 = (_QWORD *)v6;
              do
              {
                v249 = (uint64_t)&v248[v247 + 1];
                v250 = (2 * v247) | 1;
                v251 = 2 * v247 + 2;
                if (v251 < v246)
                {
                  v252 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v248[v247 + 1]);
                  v253 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v249 + 8));
                  v254 = *(char *)(v253 + 23);
                  v255 = *(char *)(v252 + 23);
                  if (v255 >= 0)
                    v256 = *(unsigned __int8 *)(v252 + 23);
                  else
                    v256 = *(_QWORD *)(v252 + 8);
                  if (v255 >= 0)
                    v257 = (const void *)v252;
                  else
                    v257 = *(const void **)v252;
                  if (v254 >= 0)
                    v258 = *(unsigned __int8 *)(v253 + 23);
                  else
                    v258 = *(_QWORD *)(v253 + 8);
                  if (v254 >= 0)
                    v259 = (const void *)v253;
                  else
                    v259 = *(const void **)v253;
                  if (v258 >= v256)
                    v260 = v256;
                  else
                    v260 = v258;
                  result = memcmp(v257, v259, v260);
                  v261 = v256 < v258;
                  if ((_DWORD)result)
                    v261 = (int)result < 0;
                  if (v261)
                  {
                    v249 += 8;
                    v250 = v251;
                  }
                }
                *v248 = *(_QWORD *)v249;
                v248 = (_QWORD *)v249;
                v247 = v250;
              }
              while (v250 <= (uint64_t)((unint64_t)(v246 - 2) >> 1));
              v262 = (uint64_t *)((char *)a2 - 8);
              if ((pxrInternal__aapl__pxrReserved__::TfType *)v249 == (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8))
              {
                *(_QWORD *)v249 = v313;
              }
              else
              {
                *(_QWORD *)v249 = *v262;
                *v262 = v313;
                v263 = v249 - v6 + 8;
                if (v263 >= 9)
                {
                  v264 = (((unint64_t)v263 >> 3) - 2) >> 1;
                  v265 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8 * v264);
                  v266 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v265);
                  v267 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v249);
                  v268 = *(char *)(v267 + 23);
                  v269 = *(char *)(v266 + 23);
                  if (v269 >= 0)
                    v270 = *(unsigned __int8 *)(v266 + 23);
                  else
                    v270 = *(_QWORD *)(v266 + 8);
                  if (v269 >= 0)
                    v271 = (const void *)v266;
                  else
                    v271 = *(const void **)v266;
                  if (v268 >= 0)
                    v272 = *(unsigned __int8 *)(v267 + 23);
                  else
                    v272 = *(_QWORD *)(v267 + 8);
                  if (v268 >= 0)
                    v273 = (const void *)v267;
                  else
                    v273 = *(const void **)v267;
                  if (v272 >= v270)
                    v274 = v270;
                  else
                    v274 = v272;
                  result = memcmp(v271, v273, v274);
                  v275 = v270 < v272;
                  if ((_DWORD)result)
                    v275 = (int)result < 0;
                  if (v275)
                  {
                    v315 = *(_QWORD *)v249;
                    do
                    {
                      v276 = v265;
                      *(_QWORD *)v249 = *(_QWORD *)v265;
                      if (!v264)
                        break;
                      v264 = (v264 - 1) >> 1;
                      v265 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8 * v264);
                      v277 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v265);
                      v278 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                      v279 = *(char *)(v278 + 23);
                      v280 = *(char *)(v277 + 23);
                      if (v280 >= 0)
                        v281 = *(unsigned __int8 *)(v277 + 23);
                      else
                        v281 = *(_QWORD *)(v277 + 8);
                      if (v280 >= 0)
                        v282 = (const void *)v277;
                      else
                        v282 = *(const void **)v277;
                      if (v279 >= 0)
                        v283 = *(unsigned __int8 *)(v278 + 23);
                      else
                        v283 = *(_QWORD *)(v278 + 8);
                      if (v279 >= 0)
                        v284 = (const void *)v278;
                      else
                        v284 = *(const void **)v278;
                      if (v283 >= v281)
                        v285 = v281;
                      else
                        v285 = v283;
                      result = memcmp(v282, v284, v285);
                      v286 = v281 < v283;
                      if ((_DWORD)result)
                        v286 = (int)result < 0;
                      v249 = (uint64_t)v276;
                    }
                    while (v286);
                    *(_QWORD *)v276 = v315;
                  }
                }
              }
              a2 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8);
            }
            while (v246-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 < 0x401)
        {
          sub_20BFC5E14(v13, (pxrInternal__aapl__pxrReserved__::TfType *)v6, v7);
        }
        else
        {
          sub_20BFC5E14((pxrInternal__aapl__pxrReserved__::TfType *)v6, v13, v7);
          sub_20BFC5E14((pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v13 - 8), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 16));
          sub_20BFC5E14((pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 16), (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8 + 8 * v12), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 24));
          v9 = a2;
          sub_20BFC5E14((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v13 - 8), v13, (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8 + 8 * v12));
          v14 = *(_QWORD *)v6;
          *(_QWORD *)v6 = *(_QWORD *)v13;
          *(_QWORD *)v13 = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v6 - 8));
          v16 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v6);
          v17 = *(char *)(v16 + 23);
          v18 = *(char *)(v15 + 23);
          if (v18 >= 0)
            v19 = *(unsigned __int8 *)(v15 + 23);
          else
            v19 = *(_QWORD *)(v15 + 8);
          if (v18 >= 0)
            v20 = (const void *)v15;
          else
            v20 = *(const void **)v15;
          if (v17 >= 0)
            v21 = *(unsigned __int8 *)(v16 + 23);
          else
            v21 = *(_QWORD *)(v16 + 8);
          if (v17 >= 0)
            v22 = (const void *)v16;
          else
            v22 = *(const void **)v16;
          if (v21 >= v19)
            v23 = v19;
          else
            v23 = v21;
          v24 = memcmp(v20, v22, v23);
          v25 = v19 < v21;
          if (v24)
            v25 = v24 < 0;
          if (!v25)
          {
            v315 = *(_QWORD *)v6;
            v89 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
            v90 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
            v91 = *(char *)(v90 + 23);
            v92 = *(char *)(v89 + 23);
            if (v92 >= 0)
              v93 = *(unsigned __int8 *)(v89 + 23);
            else
              v93 = *(_QWORD *)(v89 + 8);
            if (v92 >= 0)
              v94 = (const void *)v89;
            else
              v94 = *(const void **)v89;
            if (v91 >= 0)
              v95 = *(unsigned __int8 *)(v90 + 23);
            else
              v95 = *(_QWORD *)(v90 + 8);
            if (v91 >= 0)
              v96 = (const void *)v90;
            else
              v96 = *(const void **)v90;
            if (v95 >= v93)
              v97 = v93;
            else
              v97 = v95;
            result = memcmp(v94, v96, v97);
            v98 = v93 < v95;
            if ((_DWORD)result)
              v98 = (int)result < 0;
            if (v98)
            {
              v8 = (pxrInternal__aapl__pxrReserved__::TfType *)v6;
              do
              {
                v8 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 8);
                v99 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                v100 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
                v101 = *(char *)(v100 + 23);
                v102 = *(char *)(v99 + 23);
                if (v102 >= 0)
                  v103 = *(unsigned __int8 *)(v99 + 23);
                else
                  v103 = *(_QWORD *)(v99 + 8);
                if (v102 >= 0)
                  v104 = (const void *)v99;
                else
                  v104 = *(const void **)v99;
                if (v101 >= 0)
                  v105 = *(unsigned __int8 *)(v100 + 23);
                else
                  v105 = *(_QWORD *)(v100 + 8);
                if (v101 >= 0)
                  v106 = (const void *)v100;
                else
                  v106 = *(const void **)v100;
                if (v105 >= v103)
                  v107 = v103;
                else
                  v107 = v105;
                result = memcmp(v104, v106, v107);
                v108 = v103 < v105;
                if ((_DWORD)result)
                  v108 = (int)result < 0;
              }
              while (!v108);
            }
            else
            {
              v109 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8);
              do
              {
                v8 = v109;
                if (v109 >= v9)
                  break;
                v110 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                v111 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
                v112 = *(char *)(v111 + 23);
                v113 = *(char *)(v110 + 23);
                if (v113 >= 0)
                  v114 = *(unsigned __int8 *)(v110 + 23);
                else
                  v114 = *(_QWORD *)(v110 + 8);
                if (v113 >= 0)
                  v115 = (const void *)v110;
                else
                  v115 = *(const void **)v110;
                if (v112 >= 0)
                  v116 = *(unsigned __int8 *)(v111 + 23);
                else
                  v116 = *(_QWORD *)(v111 + 8);
                if (v112 >= 0)
                  v117 = (const void *)v111;
                else
                  v117 = *(const void **)v111;
                if (v116 >= v114)
                  v118 = v114;
                else
                  v118 = v116;
                result = memcmp(v115, v117, v118);
                v119 = (int)result < 0;
                if (!(_DWORD)result)
                  v119 = v114 < v116;
                v109 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 8);
              }
              while (!v119);
            }
            v120 = v9;
            if (v8 < v9)
            {
              v120 = v9;
              do
              {
                v120 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v120 - 8);
                v121 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                v122 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v120);
                v123 = *(char *)(v122 + 23);
                v124 = *(char *)(v121 + 23);
                if (v124 >= 0)
                  v125 = *(unsigned __int8 *)(v121 + 23);
                else
                  v125 = *(_QWORD *)(v121 + 8);
                if (v124 >= 0)
                  v126 = (const void *)v121;
                else
                  v126 = *(const void **)v121;
                if (v123 >= 0)
                  v127 = *(unsigned __int8 *)(v122 + 23);
                else
                  v127 = *(_QWORD *)(v122 + 8);
                if (v123 >= 0)
                  v128 = (const void *)v122;
                else
                  v128 = *(const void **)v122;
                if (v127 >= v125)
                  v129 = v125;
                else
                  v129 = v127;
                result = memcmp(v126, v128, v129);
                v130 = v125 < v127;
                if ((_DWORD)result)
                  v130 = (int)result < 0;
              }
              while (v130);
            }
            while (v8 < v120)
            {
              v131 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *(_QWORD *)v120;
              *(_QWORD *)v120 = v131;
              do
              {
                v8 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 8);
                v132 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                v133 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
                v134 = *(char *)(v133 + 23);
                v135 = *(char *)(v132 + 23);
                if (v135 >= 0)
                  v136 = *(unsigned __int8 *)(v132 + 23);
                else
                  v136 = *(_QWORD *)(v132 + 8);
                if (v135 >= 0)
                  v137 = (const void *)v132;
                else
                  v137 = *(const void **)v132;
                if (v134 >= 0)
                  v138 = *(unsigned __int8 *)(v133 + 23);
                else
                  v138 = *(_QWORD *)(v133 + 8);
                if (v134 >= 0)
                  v139 = (const void *)v133;
                else
                  v139 = *(const void **)v133;
                if (v138 >= v136)
                  v140 = v136;
                else
                  v140 = v138;
                v141 = memcmp(v137, v139, v140);
                v142 = v136 < v138;
                if (v141)
                  v142 = v141 < 0;
              }
              while (!v142);
              do
              {
                v120 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v120 - 8);
                v143 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                v144 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v120);
                v145 = *(char *)(v144 + 23);
                v146 = *(char *)(v143 + 23);
                if (v146 >= 0)
                  v147 = *(unsigned __int8 *)(v143 + 23);
                else
                  v147 = *(_QWORD *)(v143 + 8);
                if (v146 >= 0)
                  v148 = (const void *)v143;
                else
                  v148 = *(const void **)v143;
                if (v145 >= 0)
                  v149 = *(unsigned __int8 *)(v144 + 23);
                else
                  v149 = *(_QWORD *)(v144 + 8);
                if (v145 >= 0)
                  v150 = (const void *)v144;
                else
                  v150 = *(const void **)v144;
                if (v149 >= v147)
                  v151 = v147;
                else
                  v151 = v149;
                result = memcmp(v148, v150, v151);
                v152 = v147 < v149;
                if ((_DWORD)result)
                  v152 = (int)result < 0;
              }
              while (v152);
            }
            v153 = (uint64_t *)((char *)v8 - 8);
            if ((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 - 8) != (pxrInternal__aapl__pxrReserved__::TfType *)v6)
              *(_QWORD *)v6 = *v153;
            a4 = 0;
            *v153 = v315;
            continue;
          }
        }
        v26 = 0;
        v315 = *(_QWORD *)v6;
        do
        {
          v26 += 8;
          v27 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v26 + v6));
          v28 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
          v29 = *(char *)(v28 + 23);
          v30 = *(char *)(v27 + 23);
          if (v30 >= 0)
            v31 = *(unsigned __int8 *)(v27 + 23);
          else
            v31 = *(_QWORD *)(v27 + 8);
          if (v30 >= 0)
            v32 = (const void *)v27;
          else
            v32 = *(const void **)v27;
          if (v29 >= 0)
            v33 = *(unsigned __int8 *)(v28 + 23);
          else
            v33 = *(_QWORD *)(v28 + 8);
          if (v29 >= 0)
            v34 = (const void *)v28;
          else
            v34 = *(const void **)v28;
          if (v33 >= v31)
            v35 = v31;
          else
            v35 = v33;
          v36 = memcmp(v32, v34, v35);
          v37 = v31 < v33;
          if (v36)
            v37 = v36 < 0;
        }
        while (v37);
        v38 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + v26);
        v39 = v9;
        if (v26 == 8)
        {
          v39 = v9;
          do
          {
            if (v38 >= v39)
              break;
            v39 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v39 - 8);
            v51 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v39);
            v52 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
            v53 = *(char *)(v52 + 23);
            v54 = *(char *)(v51 + 23);
            if (v54 >= 0)
              v55 = *(unsigned __int8 *)(v51 + 23);
            else
              v55 = *(_QWORD *)(v51 + 8);
            if (v54 >= 0)
              v56 = (const void *)v51;
            else
              v56 = *(const void **)v51;
            if (v53 >= 0)
              v57 = *(unsigned __int8 *)(v52 + 23);
            else
              v57 = *(_QWORD *)(v52 + 8);
            if (v53 >= 0)
              v58 = (const void *)v52;
            else
              v58 = *(const void **)v52;
            if (v57 >= v55)
              v59 = v55;
            else
              v59 = v57;
            v60 = memcmp(v56, v58, v59);
            v61 = v55 < v57;
            if (v60)
              v61 = v60 < 0;
          }
          while (!v61);
        }
        else
        {
          do
          {
            v39 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v39 - 8);
            v40 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v39);
            v41 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
            v42 = *(char *)(v41 + 23);
            v43 = *(char *)(v40 + 23);
            if (v43 >= 0)
              v44 = *(unsigned __int8 *)(v40 + 23);
            else
              v44 = *(_QWORD *)(v40 + 8);
            if (v43 >= 0)
              v45 = (const void *)v40;
            else
              v45 = *(const void **)v40;
            if (v42 >= 0)
              v46 = *(unsigned __int8 *)(v41 + 23);
            else
              v46 = *(_QWORD *)(v41 + 8);
            if (v42 >= 0)
              v47 = (const void *)v41;
            else
              v47 = *(const void **)v41;
            if (v46 >= v44)
              v48 = v44;
            else
              v48 = v46;
            v49 = memcmp(v45, v47, v48);
            v50 = v44 < v46;
            if (v49)
              v50 = v49 < 0;
          }
          while (!v50);
        }
        if (v38 >= v39)
        {
          v87 = (uint64_t *)((char *)v38 - 8);
        }
        else
        {
          v62 = v38;
          v63 = v39;
          do
          {
            v64 = *(_QWORD *)v62;
            *(_QWORD *)v62 = *(_QWORD *)v63;
            *(_QWORD *)v63 = v64;
            do
            {
              v62 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v62 + 8);
              v65 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v62);
              v66 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
              v67 = *(char *)(v66 + 23);
              v68 = *(char *)(v65 + 23);
              if (v68 >= 0)
                v69 = *(unsigned __int8 *)(v65 + 23);
              else
                v69 = *(_QWORD *)(v65 + 8);
              if (v68 >= 0)
                v70 = (const void *)v65;
              else
                v70 = *(const void **)v65;
              if (v67 >= 0)
                v71 = *(unsigned __int8 *)(v66 + 23);
              else
                v71 = *(_QWORD *)(v66 + 8);
              if (v67 >= 0)
                v72 = (const void *)v66;
              else
                v72 = *(const void **)v66;
              if (v71 >= v69)
                v73 = v69;
              else
                v73 = v71;
              v74 = memcmp(v70, v72, v73);
              v75 = v69 < v71;
              if (v74)
                v75 = v74 < 0;
            }
            while (v75);
            do
            {
              v63 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v63 - 8);
              v76 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v63);
              v77 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
              v78 = *(char *)(v77 + 23);
              v79 = *(char *)(v76 + 23);
              if (v79 >= 0)
                v80 = *(unsigned __int8 *)(v76 + 23);
              else
                v80 = *(_QWORD *)(v76 + 8);
              if (v79 >= 0)
                v81 = (const void *)v76;
              else
                v81 = *(const void **)v76;
              if (v78 >= 0)
                v82 = *(unsigned __int8 *)(v77 + 23);
              else
                v82 = *(_QWORD *)(v77 + 8);
              if (v78 >= 0)
                v83 = (const void *)v77;
              else
                v83 = *(const void **)v77;
              if (v82 >= v80)
                v84 = v80;
              else
                v84 = v82;
              v85 = memcmp(v81, v83, v84);
              v86 = v80 < v82;
              if (v85)
                v86 = v85 < 0;
            }
            while (!v86);
          }
          while (v62 < v63);
          v87 = (uint64_t *)((char *)v62 - 8);
        }
        if (v87 != (uint64_t *)v6)
          *(_QWORD *)v6 = *v87;
        *v87 = v315;
        if (v38 < v39)
        {
LABEL_134:
          result = sub_20BFC4C1C(v6, v87, a3, a4 & 1);
          a4 = 0;
          v8 = (pxrInternal__aapl__pxrReserved__::TfType *)(v87 + 1);
          continue;
        }
        v88 = sub_20BFC6054((uint64_t *)v6, (pxrInternal__aapl__pxrReserved__::TfType *)v87);
        v8 = (pxrInternal__aapl__pxrReserved__::TfType *)(v87 + 1);
        result = sub_20BFC6054(v87 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v88)
            continue;
          goto LABEL_134;
        }
        a2 = (pxrInternal__aapl__pxrReserved__::TfType *)v87;
        if (!v88)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_20BFC5BCC(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *a2, pxrInternal__aapl__pxrReserved__::TfType *a3, pxrInternal__aapl__pxrReserved__::TfType *a4, pxrInternal__aapl__pxrReserved__::TfType *a5)
{
  uint64_t TypeName;
  uint64_t v11;
  int v12;
  int v13;
  size_t v14;
  const void *v15;
  size_t v16;
  const void *v17;
  size_t v18;
  uint64_t result;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  size_t v26;
  const void *v27;
  size_t v28;
  const void *v29;
  size_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  size_t v37;
  const void *v38;
  size_t v39;
  const void *v40;
  size_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  size_t v48;
  const void *v49;
  size_t v50;
  const void *v51;
  size_t v52;
  _BOOL4 v53;
  uint64_t v54;

  sub_20BFC630C(a1, a2, a3, a4);
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a5);
  v11 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a4);
  v12 = *(char *)(v11 + 23);
  v13 = *(char *)(TypeName + 23);
  if (v13 >= 0)
    v14 = *(unsigned __int8 *)(TypeName + 23);
  else
    v14 = *(_QWORD *)(TypeName + 8);
  if (v13 >= 0)
    v15 = (const void *)TypeName;
  else
    v15 = *(const void **)TypeName;
  if (v12 >= 0)
    v16 = *(unsigned __int8 *)(v11 + 23);
  else
    v16 = *(_QWORD *)(v11 + 8);
  if (v12 >= 0)
    v17 = (const void *)v11;
  else
    v17 = *(const void **)v11;
  if (v16 >= v14)
    v18 = v14;
  else
    v18 = v16;
  result = memcmp(v15, v17, v18);
  v20 = v14 < v16;
  if ((_DWORD)result)
    v20 = (int)result < 0;
  if (v20)
  {
    v21 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v21;
    v22 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a4);
    v23 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a3);
    v24 = *(char *)(v23 + 23);
    v25 = *(char *)(v22 + 23);
    if (v25 >= 0)
      v26 = *(unsigned __int8 *)(v22 + 23);
    else
      v26 = *(_QWORD *)(v22 + 8);
    if (v25 >= 0)
      v27 = (const void *)v22;
    else
      v27 = *(const void **)v22;
    if (v24 >= 0)
      v28 = *(unsigned __int8 *)(v23 + 23);
    else
      v28 = *(_QWORD *)(v23 + 8);
    if (v24 >= 0)
      v29 = (const void *)v23;
    else
      v29 = *(const void **)v23;
    if (v28 >= v26)
      v30 = v26;
    else
      v30 = v28;
    result = memcmp(v27, v29, v30);
    v31 = v26 < v28;
    if ((_DWORD)result)
      v31 = (int)result < 0;
    if (v31)
    {
      v32 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v32;
      v33 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a3);
      v34 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
      v35 = *(char *)(v34 + 23);
      v36 = *(char *)(v33 + 23);
      if (v36 >= 0)
        v37 = *(unsigned __int8 *)(v33 + 23);
      else
        v37 = *(_QWORD *)(v33 + 8);
      if (v36 >= 0)
        v38 = (const void *)v33;
      else
        v38 = *(const void **)v33;
      if (v35 >= 0)
        v39 = *(unsigned __int8 *)(v34 + 23);
      else
        v39 = *(_QWORD *)(v34 + 8);
      if (v35 >= 0)
        v40 = (const void *)v34;
      else
        v40 = *(const void **)v34;
      if (v39 >= v37)
        v41 = v37;
      else
        v41 = v39;
      result = memcmp(v38, v40, v41);
      v42 = v37 < v39;
      if ((_DWORD)result)
        v42 = (int)result < 0;
      if (v42)
      {
        v43 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v43;
        v44 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
        v45 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
        v46 = *(char *)(v45 + 23);
        v47 = *(char *)(v44 + 23);
        if (v47 >= 0)
          v48 = *(unsigned __int8 *)(v44 + 23);
        else
          v48 = *(_QWORD *)(v44 + 8);
        if (v47 >= 0)
          v49 = (const void *)v44;
        else
          v49 = *(const void **)v44;
        if (v46 >= 0)
          v50 = *(unsigned __int8 *)(v45 + 23);
        else
          v50 = *(_QWORD *)(v45 + 8);
        if (v46 >= 0)
          v51 = (const void *)v45;
        else
          v51 = *(const void **)v45;
        if (v50 >= v48)
          v52 = v48;
        else
          v52 = v50;
        result = memcmp(v49, v51, v52);
        v53 = v48 < v50;
        if ((_DWORD)result)
          v53 = (int)result < 0;
        if (v53)
        {
          v54 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v54;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20BFC5E14(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *this, pxrInternal__aapl__pxrReserved__::TfType *a3)
{
  uint64_t TypeName;
  uint64_t v7;
  int v8;
  int v9;
  size_t v10;
  const void *v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  size_t v21;
  const void *v22;
  size_t v23;
  const void *v24;
  size_t v25;
  uint64_t result;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  size_t v34;
  const void *v35;
  size_t v36;
  const void *v37;
  size_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  size_t v45;
  const void *v46;
  size_t v47;
  const void *v48;
  size_t v49;
  _BOOL4 v50;

  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(this);
  v7 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
  v8 = *(char *)(v7 + 23);
  v9 = *(char *)(TypeName + 23);
  if (v9 >= 0)
    v10 = *(unsigned __int8 *)(TypeName + 23);
  else
    v10 = *(_QWORD *)(TypeName + 8);
  if (v9 >= 0)
    v11 = (const void *)TypeName;
  else
    v11 = *(const void **)TypeName;
  if (v8 >= 0)
    v12 = *(unsigned __int8 *)(v7 + 23);
  else
    v12 = *(_QWORD *)(v7 + 8);
  if (v8 >= 0)
    v13 = (const void *)v7;
  else
    v13 = *(const void **)v7;
  if (v12 >= v10)
    v14 = v10;
  else
    v14 = v12;
  v15 = memcmp(v11, v13, v14);
  if (v15)
    v16 = v15 < 0;
  else
    v16 = v10 < v12;
  v17 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a3);
  v18 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(this);
  v19 = *(char *)(v18 + 23);
  v20 = *(char *)(v17 + 23);
  if (v20 >= 0)
    v21 = *(unsigned __int8 *)(v17 + 23);
  else
    v21 = *(_QWORD *)(v17 + 8);
  if (v20 >= 0)
    v22 = (const void *)v17;
  else
    v22 = *(const void **)v17;
  if (v19 >= 0)
    v23 = *(unsigned __int8 *)(v18 + 23);
  else
    v23 = *(_QWORD *)(v18 + 8);
  if (v19 >= 0)
    v24 = (const void *)v18;
  else
    v24 = *(const void **)v18;
  if (v23 >= v21)
    v25 = v21;
  else
    v25 = v23;
  result = memcmp(v22, v24, v25);
  v27 = (int)result < 0;
  if (!(_DWORD)result)
    v27 = v21 < v23;
  if (v16)
  {
    v28 = *(_QWORD *)a1;
    if (v27)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
LABEL_78:
      *(_QWORD *)a3 = v28;
      return result;
    }
    *(_QWORD *)a1 = *(_QWORD *)this;
    *(_QWORD *)this = v28;
    v41 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a3);
    v42 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(this);
    v43 = *(char *)(v42 + 23);
    v44 = *(char *)(v41 + 23);
    if (v44 >= 0)
      v45 = *(unsigned __int8 *)(v41 + 23);
    else
      v45 = *(_QWORD *)(v41 + 8);
    if (v44 >= 0)
      v46 = (const void *)v41;
    else
      v46 = *(const void **)v41;
    if (v43 >= 0)
      v47 = *(unsigned __int8 *)(v42 + 23);
    else
      v47 = *(_QWORD *)(v42 + 8);
    if (v43 >= 0)
      v48 = (const void *)v42;
    else
      v48 = *(const void **)v42;
    if (v47 >= v45)
      v49 = v45;
    else
      v49 = v47;
    result = memcmp(v46, v48, v49);
    v50 = v45 < v47;
    if ((_DWORD)result)
      v50 = (int)result < 0;
    if (v50)
    {
      v28 = *(_QWORD *)this;
      *(_QWORD *)this = *(_QWORD *)a3;
      goto LABEL_78;
    }
  }
  else if (v27)
  {
    v29 = *(_QWORD *)this;
    *(_QWORD *)this = *(_QWORD *)a3;
    *(_QWORD *)a3 = v29;
    v30 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(this);
    v31 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
    v32 = *(char *)(v31 + 23);
    v33 = *(char *)(v30 + 23);
    if (v33 >= 0)
      v34 = *(unsigned __int8 *)(v30 + 23);
    else
      v34 = *(_QWORD *)(v30 + 8);
    if (v33 >= 0)
      v35 = (const void *)v30;
    else
      v35 = *(const void **)v30;
    if (v32 >= 0)
      v36 = *(unsigned __int8 *)(v31 + 23);
    else
      v36 = *(_QWORD *)(v31 + 8);
    if (v32 >= 0)
      v37 = (const void *)v31;
    else
      v37 = *(const void **)v31;
    if (v36 >= v34)
      v38 = v34;
    else
      v38 = v36;
    result = memcmp(v35, v37, v38);
    v39 = v34 < v36;
    if ((_DWORD)result)
      v39 = (int)result < 0;
    if (v39)
    {
      v40 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)this;
      *(_QWORD *)this = v40;
    }
  }
  return result;
}

BOOL sub_20BFC6054(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t TypeName;
  uint64_t v8;
  int v9;
  int v10;
  size_t v11;
  const void *v12;
  size_t v13;
  const void *v14;
  size_t v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::TfType *v19;
  pxrInternal__aapl__pxrReserved__::TfType *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  size_t v27;
  const void *v28;
  size_t v29;
  const void *v30;
  size_t v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  size_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  size_t v43;
  int v44;
  BOOL v45;
  _QWORD *v46;
  uint64_t v47;

  v4 = (a2 - (pxrInternal__aapl__pxrReserved__::TfType *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (uint64_t *)((char *)a2 - 8);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8));
      v8 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)a1);
      v9 = *(char *)(v8 + 23);
      v10 = *(char *)(TypeName + 23);
      if (v10 >= 0)
        v11 = *(unsigned __int8 *)(TypeName + 23);
      else
        v11 = *(_QWORD *)(TypeName + 8);
      if (v10 >= 0)
        v12 = (const void *)TypeName;
      else
        v12 = *(const void **)TypeName;
      if (v9 >= 0)
        v13 = *(unsigned __int8 *)(v8 + 23);
      else
        v13 = *(_QWORD *)(v8 + 8);
      if (v9 >= 0)
        v14 = (const void *)v8;
      else
        v14 = *(const void **)v8;
      if (v13 >= v11)
        v15 = v11;
      else
        v15 = v13;
      v16 = memcmp(v12, v14, v15);
      v17 = v11 < v13;
      if (v16)
        v17 = v16 < 0;
      if (v17)
      {
        v18 = *a1;
        *a1 = *v6;
        *v6 = v18;
      }
      return 1;
    case 3:
      sub_20BFC5E14((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 1), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8));
      return 1;
    case 4:
      sub_20BFC630C((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 1), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8));
      return 1;
    case 5:
      sub_20BFC5BCC((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 1), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 3), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8));
      return 1;
    default:
      v19 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2);
      sub_20BFC5E14((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 1), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2));
      v20 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 3);
      if (a1 + 3 == (uint64_t *)a2)
        return 1;
      v21 = 0;
      v22 = 0;
      break;
  }
  while (1)
  {
    v23 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v20);
    v24 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v19);
    v25 = *(char *)(v24 + 23);
    v26 = *(char *)(v23 + 23);
    if (v26 >= 0)
      v27 = *(unsigned __int8 *)(v23 + 23);
    else
      v27 = *(_QWORD *)(v23 + 8);
    if (v26 >= 0)
      v28 = (const void *)v23;
    else
      v28 = *(const void **)v23;
    if (v25 >= 0)
      v29 = *(unsigned __int8 *)(v24 + 23);
    else
      v29 = *(_QWORD *)(v24 + 8);
    if (v25 >= 0)
      v30 = (const void *)v24;
    else
      v30 = *(const void **)v24;
    if (v29 >= v27)
      v31 = v27;
    else
      v31 = v29;
    v32 = memcmp(v28, v30, v31);
    v33 = v27 < v29;
    if (v32)
      v33 = v32 < 0;
    if (v33)
    {
      v47 = *(_QWORD *)v20;
      v34 = v21;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v34 + 24) = *(uint64_t *)((char *)a1 + v34 + 16);
        if (v34 == -16)
          break;
        v35 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v47);
        v36 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)((char *)a1 + v34 + 8));
        v37 = *(char *)(v36 + 23);
        v38 = *(char *)(v35 + 23);
        if (v38 >= 0)
          v39 = *(unsigned __int8 *)(v35 + 23);
        else
          v39 = *(_QWORD *)(v35 + 8);
        if (v38 >= 0)
          v40 = (const void *)v35;
        else
          v40 = *(const void **)v35;
        if (v37 >= 0)
          v41 = *(unsigned __int8 *)(v36 + 23);
        else
          v41 = *(_QWORD *)(v36 + 8);
        if (v37 >= 0)
          v42 = (const void *)v36;
        else
          v42 = *(const void **)v36;
        if (v41 >= v39)
          v43 = v39;
        else
          v43 = v41;
        v44 = memcmp(v40, v42, v43);
        v45 = v39 < v41;
        if (v44)
          v45 = v44 < 0;
        v34 -= 8;
        if (!v45)
        {
          v46 = (uint64_t *)((char *)a1 + v34 + 24);
          goto LABEL_63;
        }
      }
      v46 = a1;
LABEL_63:
      *v46 = v47;
      if (++v22 == 8)
        return (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v20 + 8) == a2;
    }
    v19 = v20;
    v21 += 8;
    v20 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v20 + 8);
    if (v20 == a2)
      return 1;
  }
}

uint64_t sub_20BFC630C(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *a2, pxrInternal__aapl__pxrReserved__::TfType *a3, pxrInternal__aapl__pxrReserved__::TfType *a4)
{
  uint64_t TypeName;
  uint64_t v9;
  int v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  uint64_t result;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  size_t v24;
  const void *v25;
  size_t v26;
  const void *v27;
  size_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  size_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  size_t v39;
  _BOOL4 v40;
  uint64_t v41;

  sub_20BFC5E14(a1, a2, a3);
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a4);
  v9 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a3);
  v10 = *(char *)(v9 + 23);
  v11 = *(char *)(TypeName + 23);
  if (v11 >= 0)
    v12 = *(unsigned __int8 *)(TypeName + 23);
  else
    v12 = *(_QWORD *)(TypeName + 8);
  if (v11 >= 0)
    v13 = (const void *)TypeName;
  else
    v13 = *(const void **)TypeName;
  if (v10 >= 0)
    v14 = *(unsigned __int8 *)(v9 + 23);
  else
    v14 = *(_QWORD *)(v9 + 8);
  if (v10 >= 0)
    v15 = (const void *)v9;
  else
    v15 = *(const void **)v9;
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  result = memcmp(v13, v15, v16);
  v18 = v12 < v14;
  if ((_DWORD)result)
    v18 = (int)result < 0;
  if (v18)
  {
    v19 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v19;
    v20 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a3);
    v21 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
    v22 = *(char *)(v21 + 23);
    v23 = *(char *)(v20 + 23);
    if (v23 >= 0)
      v24 = *(unsigned __int8 *)(v20 + 23);
    else
      v24 = *(_QWORD *)(v20 + 8);
    if (v23 >= 0)
      v25 = (const void *)v20;
    else
      v25 = *(const void **)v20;
    if (v22 >= 0)
      v26 = *(unsigned __int8 *)(v21 + 23);
    else
      v26 = *(_QWORD *)(v21 + 8);
    if (v22 >= 0)
      v27 = (const void *)v21;
    else
      v27 = *(const void **)v21;
    if (v26 >= v24)
      v28 = v24;
    else
      v28 = v26;
    result = memcmp(v25, v27, v28);
    v29 = v24 < v26;
    if ((_DWORD)result)
      v29 = (int)result < 0;
    if (v29)
    {
      v30 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v30;
      v31 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
      v32 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
      v33 = *(char *)(v32 + 23);
      v34 = *(char *)(v31 + 23);
      if (v34 >= 0)
        v35 = *(unsigned __int8 *)(v31 + 23);
      else
        v35 = *(_QWORD *)(v31 + 8);
      if (v34 >= 0)
        v36 = (const void *)v31;
      else
        v36 = *(const void **)v31;
      if (v33 >= 0)
        v37 = *(unsigned __int8 *)(v32 + 23);
      else
        v37 = *(_QWORD *)(v32 + 8);
      if (v33 >= 0)
        v38 = (const void *)v32;
      else
        v38 = *(const void **)v32;
      if (v37 >= v35)
        v39 = v35;
      else
        v39 = v37;
      result = memcmp(v36, v38, v39);
      v40 = v35 < v37;
      if ((_DWORD)result)
        v40 = (int)result < 0;
      if (v40)
      {
        v41 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v41;
      }
    }
  }
  return result;
}

__n128 sub_20BFC64C8(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a1, uint64_t a2)
{
  __n128 result;
  uint64_t v3;

  if (*((unsigned __int8 *)a1 + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*((_BYTE *)a1 + 16))
      sub_20BDE82DC((uint64_t)a1, (__int128 *)a2);
  }
  else if (*((_BYTE *)a1 + 16))
  {
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(a1);
    *(_BYTE *)(v3 + 16) = 0;
  }
  else
  {
    result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *((_BYTE *)a1 + 16) = 1;
  }
  return result;
}

uint64_t sub_20BFC6518(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 96));
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *sub_20BFC657C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C524010;
  return result;
}

void sub_20BFC65A0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C524010;
}

unint64_t sub_20BFC65B8()
{
  unint64_t result;

  result = atomic_load(&qword_254985870);
  if (!result)
    result = sub_20BFC41F8(&qword_254985870);
  *(_QWORD *)(result + 8) -= 8;
  return result;
}

uint64_t sub_20BFC65F4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C524070))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BFC6630()
{
  return &unk_24C524070;
}

uint64_t sub_20BFC663C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

pxrInternal__aapl__pxrReserved__::ArResolverContext *pxrInternal__aapl__pxrReserved__::ArResolverContext::ArResolverContext(pxrInternal__aapl__pxrReserved__::ArResolverContext *this, const pxrInternal__aapl__pxrReserved__::ArResolverContext **a2)
{
  const pxrInternal__aapl__pxrReserved__::ArResolverContext *v3;
  const pxrInternal__aapl__pxrReserved__::ArResolverContext *v4;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v3 = *a2;
  v4 = a2[1];
  while (v3 != v4)
  {
    pxrInternal__aapl__pxrReserved__::ArResolverContext::_Add(this, v3);
    v3 = (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)((char *)v3 + 24);
  }
  return this;
}

void sub_20BFC66AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDE9EB0((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArResolverContext::_Add(pxrInternal__aapl__pxrReserved__::ArResolverContext *this, const pxrInternal__aapl__pxrReserved__::ArResolverContext *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __n128 v9;

  v2 = *(_QWORD **)a2;
  v3 = (_QWORD *)*((_QWORD *)a2 + 1);
  if (*(_QWORD **)a2 != v3)
  {
    do
    {
      v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 16))(*v2);
      sub_20BFC6DB8(&v9, v5);
      pxrInternal__aapl__pxrReserved__::ArResolverContext::_Add((uint64_t *)this, &v9);
      v6 = (std::__shared_weak_count *)v9.n128_u64[1];
      if (v9.n128_u64[1])
      {
        v7 = (unint64_t *)(v9.n128_u64[1] + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_20BFC6768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArResolverContext::_Add(uint64_t *a1, __n128 *a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;

  v5 = *a1;
  v4 = (uint64_t *)a1[1];
  if (v4 != (uint64_t *)*a1)
  {
    v6 = ((uint64_t)v4 - *a1) >> 4;
    do
    {
      v7 = (uint64_t *)(v5 + 16 * (v6 >> 1));
      v9 = *v7;
      v8 = v7 + 2;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      v11 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2->n128_u64[0] + 24))(a2->n128_u64[0]);
      v12 = sub_20BFC6D7C(v10, v11);
      if (v12)
        v6 += ~(v6 >> 1);
      else
        v6 >>= 1;
      if (v12)
        v5 = (uint64_t)v8;
    }
    while (v6);
    v4 = (uint64_t *)v5;
    v5 = a1[1];
  }
  if ((uint64_t *)v5 == v4)
    return sub_20BFC6AD0(a1, (uint64_t)v4, a2);
  v13 = *v4;
  v14 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2->n128_u64[0] + 24))(a2->n128_u64[0]);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  result = (_QWORD *)strcmp((const char *)(*(_QWORD *)(v14 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v15 + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if ((_DWORD)result)
    return sub_20BFC6AD0(a1, (uint64_t)v4, a2);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolverContext::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  v2 = a1[1];
  if (v2 - *a1 == a2[1] - *a2)
  {
    if (v2 == v3)
      return 1;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v8 = *a2;
      v9 = *(_QWORD *)(v3 + v6);
      v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + v6) + 24))(*(_QWORD *)(*a2 + v6));
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      if (strcmp((const char *)(*(_QWORD *)(v10 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v11 + 8) & 0x7FFFFFFFFFFFFFFFLL))|| ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + v6) + 40))(*(_QWORD *)(v3 + v6), *(_QWORD *)(v8 + v6)) & 1) == 0)
      {
        break;
      }
      ++v7;
      v3 = *a1;
      v6 += 16;
      if (v7 >= (a1[1] - *a1) >> 4)
        return 1;
    }
  }
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::ArResolverContext::operator<(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *a1;
  v2 = a1[1];
  v4 = (v2 - *a1) >> 4;
  v5 = a2[1] - *a2;
  if (v4 < v5 >> 4)
    return 1;
  if (v4 > v5 >> 4 || v2 == v3)
    return 0;
  v11 = 0;
  v12 = 0;
  while (1)
  {
    v13 = *a2;
    v14 = *(_QWORD *)(v3 + v11);
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + v11) + 24))(*(_QWORD *)(*a2 + v11));
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
    v17 = strcmp((const char *)(*(_QWORD *)(v15 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v16 + 8) & 0x7FFFFFFFFFFFFFFFLL));
    v18 = *(_QWORD *)(v3 + v11);
    if (v17)
      break;
    v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, *(_QWORD *)(v13 + v11));
    if ((v6 & 1) == 0
      && ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + v11) + 40))(*(_QWORD *)(v3 + v11), *(_QWORD *)(v13 + v11)) & 1) != 0)
    {
      ++v12;
      v3 = *a1;
      v11 += 16;
      if (v12 < (a1[1] - *a1) >> 4)
        continue;
    }
    return v6;
  }
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + v11) + 24))(*(_QWORD *)(v13 + v11));
  return sub_20BFC6D7C(v19, v20);
}

_QWORD *sub_20BFC6AD0(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  _QWORD *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = (_QWORD *)a2;
  v6 = a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if (v6 >= v9)
  {
    v10 = *a1;
    v11 = ((uint64_t)(v6 - *a1) >> 4) + 1;
    if (v11 >> 60)
      sub_20BDDF694();
    v12 = (a2 - v10) >> 4;
    v13 = v8 - v10;
    v14 = v13 >> 3;
    if (v13 >> 3 <= v11)
      v14 = ((uint64_t)(v6 - *a1) >> 4) + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v22 = v7;
    if (v15)
      v16 = (char *)sub_20BDEA2F0(v7, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[16 * v12];
    v20 = v19;
    v21 = &v16[16 * v15];
    sub_20BFC6F0C(&v18, a3);
    v4 = (_QWORD *)sub_20BFC7064(a1, &v18, v4);
    sub_20BDEA324((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    *(__n128 *)a2 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a1[1] = a2 + 16;
  }
  else
  {
    sub_20BFC6E90((uint64_t)a1, a2, v6, (char *)(a2 + 16));
    sub_20BDE82DC((uint64_t)v4, (__int128 *)a3);
  }
  return v4;
}

void sub_20BFC6BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDEA324((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *pxrInternal__aapl__pxrReserved__::ArResolverContext::GetDebugString@<X0>(std::string *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v2;
  std::string::size_type size;
  void **v5;
  std::string::size_type v6;
  void *__p[2];
  unsigned __int8 v8;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v2 = this->__r_.__value_.__r.__words[0];
  size = this->__r_.__value_.__l.__size_;
  if (this->__r_.__value_.__r.__words[0] != size)
  {
    do
    {
      (*(void (**)(void **__return_ptr))(**(_QWORD **)v2 + 56))(__p);
      if ((v8 & 0x80u) == 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      if ((v8 & 0x80u) == 0)
        v6 = v8;
      else
        v6 = (std::string::size_type)__p[1];
      std::string::append(a2, (const std::string::value_type *)v5, v6);
      if ((char)v8 < 0)
        operator delete(__p[0]);
      this = std::string::append(a2, "\n");
      v2 += 16;
    }
    while (v2 != size);
  }
  return this;
}

void sub_20BFC6CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Ar_GetDebugString(pxrInternal__aapl__pxrReserved__ *this, const std::type_info *a2, const void *a3)
{
  const char *v4;
  char *v5;
  void **v6;
  void *__p[2];
  char v8;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*((_QWORD *)this + 1) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v8 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"<'%s' @ %p>", v4, v5, v6, a2);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_20BFC6D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20BFC6D7C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if ((v2 & 0x8000000000000000) != 0 && (v3 & 0x8000000000000000) != 0)
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) >> 31;
  else
    return v2 < v3;
}

_QWORD *sub_20BFC6DB8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C5240F8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BFC6E00(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20BFC6E24(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFC6E38(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20BFC6E50(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C524148))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20BFC6E90(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(char **)(result + 8);
  v5 = (char *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v6 += 16;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v5 += 16;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    v7 = (uint64_t)(v4 - 16);
    v8 = 16 * ((v4 - a4) >> 4);
    v9 = a2 - 16;
    do
    {
      result = sub_20BDE82DC(v7, (__int128 *)(v9 + v8));
      v7 -= 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

__n128 sub_20BFC6F0C(_QWORD *a1, __n128 *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int64x2_t v24;
  uint64_t v25;
  __n128 result;
  __int128 *v27;
  int64x2_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = (__int128 *)a1[2];
  if (v4 == (__int128 *)a1[3])
  {
    v5 = (__int128 *)a1[1];
    v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (__int128 *)*a1)
        v13 = 1;
      else
        v13 = ((uint64_t)v4 - *a1) >> 3;
      v14 = a1[4];
      v30 = a1[4];
      v15 = (char *)sub_20BDEA2F0(v14, v13);
      v17 = &v15[16 * (v13 >> 2)];
      v18 = a1[1];
      v19 = a1[2] - v18;
      if (v19)
      {
        v20 = v19 >> 4;
        v21 = &v17[v19 & 0xFFFFFFFFFFFFFFF0];
        v22 = 16 * v20;
        v23 = &v15[16 * (v13 >> 2)];
        do
        {
          *(_OWORD *)v23 = *(_OWORD *)v18;
          v23 += 16;
          *(_QWORD *)v18 = 0;
          *(_QWORD *)(v18 + 8) = 0;
          v18 += 16;
          v22 -= 16;
        }
        while (v22);
        v24 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v24 = vdupq_n_s64(v18);
        v21 = &v15[16 * (v13 >> 2)];
      }
      v27 = (__int128 *)*a1;
      *a1 = v15;
      a1[1] = v17;
      v28 = v24;
      v25 = a1[3];
      a1[2] = v21;
      a1[3] = &v15[16 * v16];
      v29 = v25;
      sub_20BDEA324((uint64_t)&v27);
      v4 = (__int128 *)a1[2];
    }
    else
    {
      v7 = v6 >> 4;
      v8 = v6 >> 4 < -1;
      v9 = (v6 >> 4) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      if (v5 == v4)
      {
        v12 = &v5[-(v10 >> 1)];
      }
      else
      {
        do
        {
          sub_20BDE82DC((uint64_t)&v5[v11], v5);
          ++v5;
        }
        while (v5 != v4);
        v4 = (__int128 *)a1[1];
        v12 = &v5[v11];
      }
      a1[1] = &v4[v11];
      a1[2] = v12;
      v4 = v12;
    }
  }
  result = *a2;
  *v4 = (__int128)*a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a1[2] += 16;
  return result;
}

uint64_t sub_20BFC7064(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder(pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *this, pxrInternal__aapl__pxrReserved__::ArResolver *a2, const pxrInternal__aapl__pxrReserved__::ArResolverContext *a3)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  sub_20BFB73DC((char *)this + 8, *(_QWORD **)a3, *((_QWORD **)a3 + 1), (uint64_t)(*((_QWORD *)a3 + 1) - *(_QWORD *)a3) >> 4);
  *((_QWORD *)this + 5) = 0;
  if (*(_QWORD *)this)
    pxrInternal__aapl__pxrReserved__::ArResolver::BindContext(*(_QWORD *)this);
  return this;
}

void sub_20BFC7170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8(v2);
  sub_20BDE9EB0((void ***)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder(pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *this, const pxrInternal__aapl__pxrReserved__::ArResolverContext *a2)
{
  *(_QWORD *)this = pxrInternal__aapl__pxrReserved__::ArGetResolver(this);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  sub_20BFB73DC((char *)this + 8, *(_QWORD **)a2, *((_QWORD **)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4);
  *((_QWORD *)this + 5) = 0;
  if (*(_QWORD *)this)
    pxrInternal__aapl__pxrReserved__::ArResolver::BindContext(*(_QWORD *)this);
  return this;
}

void sub_20BFC720C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8(v2);
  sub_20BDE9EB0((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder(pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *this)
{
  uint64_t v2;
  void **v3;

  v2 = *(_QWORD *)this;
  if (v2)
    pxrInternal__aapl__pxrReserved__::ArResolver::UnbindContext(v2);
  sub_20BF4C2D8((uint64_t)this + 32);
  v3 = (void **)((char *)this + 8);
  sub_20BDE9EB0(&v3);
}

pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache(pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *this)
{
  uint64_t *Resolver;

  *((_QWORD *)this + 1) = 0;
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(this);
  pxrInternal__aapl__pxrReserved__::ArResolver::BeginCacheScope((pxrInternal__aapl__pxrReserved__::ArResolver *)Resolver, this);
  return this;
}

void sub_20BFC72BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache(pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *this, const pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *a2)
{
  pxrInternal__aapl__pxrReserved__ *v3;
  uint64_t *Resolver;

  v3 = (pxrInternal__aapl__pxrReserved__ *)sub_20BF4C6D0(this, a2);
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v3);
  pxrInternal__aapl__pxrReserved__::ArResolver::BeginCacheScope((pxrInternal__aapl__pxrReserved__::ArResolver *)Resolver, this);
  return this;
}

void sub_20BFC7304(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache(pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *this)
{
  uint64_t *Resolver;

  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(this);
  pxrInternal__aapl__pxrReserved__::ArResolver::EndCacheScope((pxrInternal__aapl__pxrReserved__::ArResolver *)Resolver, this);
  sub_20BF4C2D8((uint64_t)this);
}

void pxrInternal__aapl__pxrReserved__::ArTimestamp::_IssueInvalidGetTimeError(pxrInternal__aapl__pxrReserved__::ArTimestamp *this)
{
  _QWORD v1[4];
  char v2;

  v1[0] = "ar/timestamp.cpp";
  v1[1] = "_IssueInvalidGetTimeError";
  v1[2] = 34;
  v1[3] = "void pxrInternal__aapl__pxrReserved__::ArTimestamp::_IssueInvalidGetTimeError() const";
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot call GetTime on an invalid ArTimestamp");
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArWritableAsset::ArWritableAsset(_QWORD *this)
{
  *this = off_24C524170;
  return this;
}

uint64_t sub_20BFC73C0()
{
  uint64_t *v0;

  v0 = sub_20BFC7B9C();
  return sub_20BFC7CBC(v0);
}

void *pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_sandboxingCallback(pxrInternal__aapl__pxrReserved__::ArMemoryResolver *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254985898);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254985898))
  {
    qword_254985890 = 0;
    __cxa_guard_release(&qword_254985898);
  }
  return &unk_254985878;
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArMemoryResolver::SetSandboxingCallback(pxrInternal__aapl__pxrReserved__::ArMemoryResolver *a1)
{
  pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_sandboxingCallback(a1);
  return sub_20BFC7450(qword_254985878, (uint64_t)a1);
}

_QWORD *sub_20BFC7450(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sub_20BE9E6E8((uint64_t)v6, a2);
  sub_20BFC7E38(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_CreateIdentifier(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string __p;

  pxrInternal__aapl__pxrReserved__::TfStringGetSuffix((const std::string *)a2, 63, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_)
    {
LABEL_3:
      if (*(char *)(a2 + 23) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a4, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)a4 = *(_OWORD *)a2;
        *(_QWORD *)(a4 + 16) = *(_QWORD *)(a2 + 16);
      }
      goto LABEL_8;
    }
  }
  else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
    goto LABEL_3;
  }
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_CreateIdentifier(a1, a2, a3, a4);
LABEL_8:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BFC7594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_OpenAsset(const std::string *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  unint64_t *v11;
  int v12;
  const char *v13;
  unint64_t v14;
  pxrInternal__aapl__pxrReserved__::ArMemoryAsset *v15;
  const char *v16;
  FILE *v17;
  pxrInternal__aapl__pxrReserved__::ArFilesystemAsset *v18;
  unint64_t v19;
  const char *v20;
  std::string __p;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfStringGetSuffix(a1, 63, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_)
      goto LABEL_3;
  }
  else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
LABEL_3:
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = (uint64_t *)a1;
    else
      v4 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
    v5 = objc_msgSend(MEMORY[0x24BDBCF48], "URLWithString:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v4));
    if (!v5)
      goto LABEL_30;
    v19 = 0;
    v20 = 0;
    v6 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x24BDD1808], "componentsWithURL:resolvingAgainstBaseURL:", v5, 0), "queryItems");
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    if (!v7)
      goto LABEL_30;
    v8 = *(_QWORD *)v23;
    while (1)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v23 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v10, "name"), "isEqualToString:", CFSTR("address")))
        {
          if (!objc_msgSend(v10, "value"))
            continue;
          v11 = (unint64_t *)&v20;
          v12 = 16;
          goto LABEL_18;
        }
        if (objc_msgSend((id)objc_msgSend(v10, "name"), "isEqualToString:", CFSTR("size"))
          && objc_msgSend(v10, "value"))
        {
          v11 = &v19;
          v12 = 10;
LABEL_18:
          *v11 = strtoull((const char *)objc_msgSend((id)objc_msgSend(v10, "value"), "UTF8String"), 0, v12);
          continue;
        }
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      if (!v7)
      {
        v13 = v20;
        if (v20)
        {
          v14 = v19;
          if (v19)
          {
            v15 = (pxrInternal__aapl__pxrReserved__::ArMemoryAsset *)operator new(0x18uLL);
            pxrInternal__aapl__pxrReserved__::ArMemoryAsset::ArMemoryAsset(v15, v13, v14);
            sub_20BFC8084(a2, (uint64_t)v15);
            goto LABEL_31;
          }
        }
LABEL_30:
        *a2 = 0;
        a2[1] = 0;
        goto LABEL_31;
      }
    }
  }
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = (const char *)a1;
  else
    v16 = (const char *)a1->__r_.__value_.__r.__words[0];
  v17 = pxrInternal__aapl__pxrReserved__::ArchOpenFile(v16, "rb");
  if (!v17)
    goto LABEL_30;
  v18 = (pxrInternal__aapl__pxrReserved__::ArFilesystemAsset *)operator new(0x10uLL);
  pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::ArFilesystemAsset(v18, v17);
  sub_20BFC7FAC(a2, (uint64_t)v18);
LABEL_31:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BFC7828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  operator delete(v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_GetModificationTimestamp(uint64_t a1, uint64_t a2, std::string *a3)
{
  double ModificationTimestamp;
  std::string __p;

  pxrInternal__aapl__pxrReserved__::TfStringGetSuffix(a3, 63, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_)
      goto LABEL_3;
  }
  else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
LABEL_3:
    ModificationTimestamp = (float)time(0);
    goto LABEL_6;
  }
  ModificationTimestamp = pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_GetModificationTimestamp(a1, a2, (char *)a3);
LABEL_6:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return ModificationTimestamp;
}

void sub_20BFC7914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_Resolve(pxrInternal__aapl__pxrReserved__::ArResolver *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *Suffix;
  pxrInternal__aapl__pxrReserved__::ArMemoryResolver *IsRelativePath;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::ArMemoryResolver *v9;
  void **v10;
  char v11;
  void *v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  std::string v17;

  Suffix = pxrInternal__aapl__pxrReserved__::TfStringGetSuffix((const std::string *)a2, 63, &v17);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v17.__r_.__value_.__l.__size_)
      goto LABEL_5;
LABEL_18:
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a3, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
    }
    goto LABEL_27;
  }
  if (*((_BYTE *)&v17.__r_.__value_.__s + 23))
    goto LABEL_18;
LABEL_5:
  IsRelativePath = (pxrInternal__aapl__pxrReserved__::ArMemoryResolver *)pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_sandboxingCallback((pxrInternal__aapl__pxrReserved__::ArMemoryResolver *)Suffix);
  if (qword_254985890)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a2 + 8);
    if (v8
      && (IsRelativePath = (pxrInternal__aapl__pxrReserved__::ArMemoryResolver *)pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2),
          (_DWORD)IsRelativePath))
    {
      pxrInternal__aapl__pxrReserved__::ArchGetCwd(__p);
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)__p, a2, v15);
      if (v14 < 0)
        operator delete(__p[0]);
      pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_sandboxingCallback(v9);
      v10 = v15;
      if (v16 < 0)
        v10 = (void **)v15[0];
      __p[0] = v10;
      if (!qword_254985890)
        sub_20BE9E974();
      v11 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)qword_254985890 + 48))(qword_254985890, __p);
      if (v16 < 0)
        operator delete(v15[0]);
      if ((v11 & 1) == 0)
        goto LABEL_18;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_sandboxingCallback(IsRelativePath);
      if (*(char *)(a2 + 23) >= 0)
        v12 = (void *)a2;
      else
        v12 = *(void **)a2;
      v15[0] = v12;
      if (!qword_254985890)
        sub_20BE9E974();
      if (!(*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)qword_254985890 + 48))(qword_254985890, v15))
        goto LABEL_18;
    }
  }
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_Resolve(a1, a2, (_QWORD *)a3);
LABEL_27:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_20BFC7AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_GetExtension(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  std::string __p;

  pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix(a1, 63, &__p);
  pxrInternal__aapl__pxrReserved__::TfGetExtension((uint64_t)&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BFC7B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFC7B88(pxrInternal__aapl__pxrReserved__::ArDefaultResolver *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::~ArDefaultResolver(a1);
  operator delete(v1);
}

uint64_t *sub_20BFC7B9C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20BFC7D44((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20BFC7C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFC7CBC(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C524290;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20BFC7D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20BFC7D44(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20BFC7DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFC7DD8(pxrInternal__aapl__pxrReserved__::Ar_ResolverFactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::Ar_ResolverFactoryBase::~Ar_ResolverFactoryBase(a1);
  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::ArDefaultResolver *sub_20BFC7DEC()
{
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::ArDefaultResolver *)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::ArDefaultResolver(v0);
  *(_QWORD *)v0 = &off_24C5241B0;
  return v0;
}

void sub_20BFC7E24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFC7E38(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20BFC7FA0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20BDC12F4(a1);
}

_QWORD *sub_20BFC7FAC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C5242D0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BFC7FF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20BFC8018(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFC802C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20BFC8044(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C524320))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20BFC8084(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C524348;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BFC80CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20BFC80F0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFC8104(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20BFC811C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C524398))
    return a1 + 24;
  else
    return 0;
}

pxrInternal__aapl__pxrReserved__::ArMemoryAsset *pxrInternal__aapl__pxrReserved__::ArMemoryAsset::ArMemoryAsset(pxrInternal__aapl__pxrReserved__::ArMemoryAsset *this, const char *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD v8[4];
  char v9;

  v6 = pxrInternal__aapl__pxrReserved__::ArAsset::ArAsset(this);
  *v6 = off_24C5243C0;
  v6[1] = a2;
  v6[2] = a3;
  if (!a2)
  {
    v8[0] = "arCustom/memoryAsset.cpp";
    v8[1] = "ArMemoryAsset";
    v8[2] = 14;
    v8[3] = "pxrInternal__aapl__pxrReserved__::ArMemoryAsset::ArMemoryAsset(const char *, size_t)";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid input data");
  }
  return this;
}

void sub_20BFC81E8(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::ArAsset *v1;

  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArMemoryAsset::~ArMemoryAsset(pxrInternal__aapl__pxrReserved__::ArMemoryAsset *this)
{
  *(_QWORD *)this = off_24C5243C0;
  *((_QWORD *)this + 1) = 0;
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset(this);
}

{
  *(_QWORD *)this = off_24C5243C0;
  *((_QWORD *)this + 1) = 0;
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset(this);
}

{
  void *v1;

  *(_QWORD *)this = off_24C5243C0;
  *((_QWORD *)this + 1) = 0;
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset(this);
  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArMemoryAsset::GetSize(pxrInternal__aapl__pxrReserved__::ArMemoryAsset *this)
{
  return *((_QWORD *)this + 2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArMemoryAsset::GetBuffer@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = this[1];
  if (v3)
  {
    *a2 = v3;
    this = operator new(0x20uLL);
    *this = &off_24C524420;
    this[1] = 0;
    this[2] = 0;
    this[3] = v3;
    a2[1] = this;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

void sub_20BFC8294(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_20BFC82A0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

size_t pxrInternal__aapl__pxrReserved__::ArMemoryAsset::Read(pxrInternal__aapl__pxrReserved__::ArMemoryAsset *this, void *__dst, size_t __n, uint64_t a4)
{
  uint64_t v4;
  size_t v5;
  void **v6;
  void *__p[2];
  char v9;
  _QWORD v10[4];
  char v11;

  v4 = *((_QWORD *)this + 1);
  if (v4 && (v5 = __n, a4 + __n <= *((_QWORD *)this + 2)))
  {
    memcpy(__dst, (const void *)(v4 + a4), __n);
  }
  else
  {
    v10[0] = "arCustom/memoryAsset.cpp";
    v10[1] = "Read";
    v10[2] = 53;
    v10[3] = "virtual size_t pxrInternal__aapl__pxrReserved__::ArMemoryAsset::Read(void *, size_t, size_t) const";
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::ArchStrerror(__p);
    if (v9 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 3, (pxrInternal__aapl__pxrReserved__ *)"Error occurred reading file: %s", (const char *)v6);
    if (v9 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return v5;
}

void sub_20BFC837C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArMemoryAsset::GetFileUnsafe(pxrInternal__aapl__pxrReserved__::ArMemoryAsset *this)
{
  return 0;
}

void sub_20BFC83A8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFC83C0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C524460))
    return a1 + 24;
  else
    return 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::KindRegistry *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  std::string v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12KindRegistryE" & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  v2 = std::string::insert(&v14, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v15, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::KindRegistry*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::KindRegistry*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v10 = (pxrInternal__aapl__pxrReserved__::KindRegistry *)operator new(0x38uLL);
      pxrInternal__aapl__pxrReserved__::KindRegistry::KindRegistry(v10);
      v12 = atomic_load(a1);
      if (v12)
      {
        if (v10 != (pxrInternal__aapl__pxrReserved__::KindRegistry *)v12)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 84;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>:"
                ":_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::KindRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v11);
        }
      }
      else
      {
        do
          v13 = __ldaxr(a1);
        while (__stlxr((unint64_t)v10, a1));
        if (v13)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 88;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>:"
                ":_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::KindRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v11, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::KindRegistry*> &)::isInitializing);
  }
  v6 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_12KindRegistryEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20BFC85E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::S"
            "etInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::KindRegistry]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::DeleteInstance()
{
  uint64_t result;
  unint64_t v1;

  for (result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
        result;
        result = v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
    if (v1 == result)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance))return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType::~KindTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  void **v16;

  v16 = (void **)((char *)this + 40);
  sub_20BEEB2B8(&v16);
  v2 = *((_QWORD *)this + 4);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 3);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 2);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 1);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v14 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
}

pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType::KindTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int **v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "model", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "component", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "group", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "assembly", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 4, "subcomponent", 0);
  v3 = *this;
  v29 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v29 = v4;
  }
  v6 = *v2;
  v30 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v30 = v7;
  }
  v9 = this[2];
  v31 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v31 = v10;
  }
  v12 = this[3];
  v32 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v32 = v13;
  }
  v15 = this[4];
  v33 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v33 = v16;
  }
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  v18 = (unsigned int *)operator new(0x28uLL);
  v19 = 0;
  this[5] = v18;
  this[6] = v18;
  this[7] = v18 + 10;
  do
  {
    v20 = (&v29)[v19];
    *(_QWORD *)v18 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 2, v21));
      if ((v22 & 1) == 0)
        *(_QWORD *)v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v19;
    v18 += 2;
  }
  while (v19 != 5);
  v23 = (unsigned int **)&v34;
  this[6] = v18;
  do
  {
    v25 = (uint64_t)*--v23;
    v24 = v25;
    if ((v25 & 7) != 0)
    {
      v26 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
  }
  while (v23 != &v29);
  return (pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType *)this;
}

void sub_20BFC8A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;

  sub_20BEEB2B8(&a9);
  v22 = &a16;
  while (1)
  {
    v24 = *--v22;
    v23 = v24;
    if ((v24 & 7) != 0)
    {
      v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    if (v22 == (uint64_t *)&a11)
    {
      if ((*v20 & 7) != 0)
      {
        v27 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      if ((*v19 & 7) != 0)
      {
        v29 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
      if ((*v18 & 7) != 0)
      {
        v31 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      if ((*v17 & 7) != 0)
      {
        v33 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      if ((*v16 & 7) != 0)
      {
        v35 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      _Unwind_Resume(a1);
    }
  }
}

pxrInternal__aapl__pxrReserved__::KindRegistry *pxrInternal__aapl__pxrReserved__::KindRegistry::KindRegistry(pxrInternal__aapl__pxrReserved__::KindRegistry *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = off_24C524480;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  pxrInternal__aapl__pxrReserved__::KindRegistry::_RegisterDefaults(this);
  return this;
}

void sub_20BFC8BE4(_Unwind_Exception *a1)
{
  unsigned int **v1;
  uint64_t v2;
  const void *v4;

  sub_20BFC9C88(v2);
  sub_20BEBCE60(v1, v4);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::KindRegistry::_RegisterDefaults(pxrInternal__aapl__pxrReserved__::KindRegistry *this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int **v8;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  unsigned int **v10;
  unsigned int **v11;
  const pxrInternal__aapl__pxrReserved__::TfToken *v12;
  unsigned int **v13;
  unsigned int **v14;
  const pxrInternal__aapl__pxrReserved__::TfToken *v15;
  unsigned int **v16;
  pxrInternal__aapl__pxrReserved__::PlugRegistry *v17;
  pxrInternal__aapl__pxrReserved__::PlugRegistry *Instance;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  const void ***v22;
  pxrInternal__aapl__pxrReserved__::TfToken *Metadata;
  uint64_t *v24;
  uint64_t *EmptyString;
  uint64_t v26;
  char *v27;
  pxrInternal__aapl__pxrReserved__::TfToken *v28;
  const void **v29;
  _QWORD **v30;
  pxrInternal__aapl__pxrReserved__::JsValue *v31;
  unsigned int *v32;
  unsigned int v33;
  unint64_t v34;
  const char *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  char *v43;
  unsigned int *v44;
  unsigned int v45;
  void *v46;
  unsigned int v47;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  void *__p;
  const char *v54;
  uint64_t v55;
  const char *v56;
  char v57;
  uint64_t *v58;
  _QWORD *v59[2];
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63[3];
  uint64_t *v64;
  _QWORD *v65[2];
  __int128 i;
  uint64_t v67[4];

  v2 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v2)
    v2 = sub_20BFC9FE0(&pxrInternal__aapl__pxrReserved__::KindTokens);
  __p = 0;
  pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v2 + 4), (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0)
  {
    v3 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v5)
    v5 = sub_20BFC9FE0(&pxrInternal__aapl__pxrReserved__::KindTokens);
  __p = 0;
  pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v8)
    v8 = sub_20BFC9FE0(&pxrInternal__aapl__pxrReserved__::KindTokens);
  v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 1);
  v10 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v10)
    v10 = sub_20BFC9FE0(&pxrInternal__aapl__pxrReserved__::KindTokens);
  pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(this, v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)v10);
  v11 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v11)
    v11 = sub_20BFC9FE0(&pxrInternal__aapl__pxrReserved__::KindTokens);
  v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 2);
  v13 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v13)
    v13 = sub_20BFC9FE0(&pxrInternal__aapl__pxrReserved__::KindTokens);
  pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(this, v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)v13);
  v14 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v14)
    v14 = sub_20BFC9FE0(&pxrInternal__aapl__pxrReserved__::KindTokens);
  v15 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v14 + 3);
  v16 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v16)
    v16 = sub_20BFC9FE0(&pxrInternal__aapl__pxrReserved__::KindTokens);
  pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(this, v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v16 + 2));
  Instance = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v17);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllPlugins(v67, Instance);
  for (i = *(_OWORD *)v67; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BFC9C0C(&i))
  {
    v65[0] = 0;
    v65[1] = 0;
    v64 = (uint64_t *)v65;
    v21 = (uint64_t *)sub_20BFC9B24((uint64_t *)&i, v19, v20);
    v22 = (const void ***)sub_20BF444D8(v21);
    Metadata = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadata(v22, v63);
    v24 = (uint64_t *)atomic_load(&qword_2549858A0);
    if (!v24)
    {
      v24 = (uint64_t *)operator new(0x20uLL);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v24, "Kinds", 0);
      v40 = *v24;
      if ((*v24 & 7) != 0)
      {
        v41 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 2, v41));
        if ((v42 & 1) == 0)
          v40 &= 0xFFFFFFFFFFFFFFF8;
      }
      v51 = v40;
      v24[1] = 0;
      v24[2] = 0;
      v24[3] = 0;
      __p = v24 + 1;
      LOBYTE(v54) = 0;
      Metadata = (pxrInternal__aapl__pxrReserved__::TfToken *)operator new(8uLL);
      v24[1] = (uint64_t)Metadata;
      v24[2] = (uint64_t)Metadata;
      *(_QWORD *)Metadata = v51;
      v43 = (char *)Metadata + 8;
      v24[3] = (uint64_t)Metadata + 8;
      if ((v51 & 7) != 0)
      {
        v44 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 2, v44));
        v46 = v24 + 1;
        if ((v45 & 1) == 0)
          *(_QWORD *)Metadata &= 0xFFFFFFFFFFFFFFF8;
        v24[2] = (uint64_t)v43;
        do
          v47 = __ldxr(v44);
        while (__stlxr(v47 - 2, v44));
      }
      else
      {
        v24[2] = (uint64_t)v43;
        v46 = v24 + 1;
      }
      while (!__ldaxr(&qword_2549858A0))
      {
        if (!__stlxr((unint64_t)v24, &qword_2549858A0))
          goto LABEL_26;
      }
      __clrex();
      __p = v46;
      sub_20BEEB2B8((void ***)&__p);
      if ((*v24 & 7) != 0)
      {
        v49 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      operator delete(v24);
      v24 = (uint64_t *)atomic_load(&qword_2549858A0);
    }
LABEL_26:
    if ((*v24 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*v24 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Metadata);
    if (sub_20BFC9BA0((uint64_t)v63, (const void **)EmptyString, &v64))
    {
      v61 = v64;
      v62 = (uint64_t *)v65;
      while (1)
      {
        if (v61 == v62)
          goto LABEL_58;
        sub_20BF44300(&v61, v26, v27);
        v28 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v60);
        v59[0] = 0;
        v59[1] = 0;
        v58 = (uint64_t *)v59;
        v29 = (v60 & 0xFFFFFFFFFFFFFFF8) != 0
            ? (const void **)((v60 & 0xFFFFFFFFFFFFFFF8) + 16)
            : (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v28);
        if (sub_20BFC9BA0((uint64_t)&v64, v29, &v58))
          break;
        __p = "kind/registry.cpp";
        v54 = "_RegisterDefaults";
        v55 = 238;
        v56 = "void pxrInternal__aapl__pxrReserved__::KindRegistry::_RegisterDefaults()";
        v57 = 0;
        v34 = v60 & 0xFFFFFFFFFFFFFFF8;
        if ((v60 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v35 = (const char *)(v34 + 16);
          if (*(char *)(v34 + 39) < 0)
            v35 = *(const char **)v35;
        }
        else
        {
          v35 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Expected dict for kind '%s'", v35);
LABEL_54:
        sub_20BE78E5C((uint64_t)&v58, v59[0]);
        if ((v60 & 7) != 0)
        {
          v38 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
          do
            v39 = __ldxr(v38);
          while (__stlxr(v39 - 2, v38));
        }
        sub_20BF445F8(&v61);
      }
      v52 = 0;
      sub_20BDDC0E4(&__p, "baseKind");
      v30 = (_QWORD **)sub_20BDEEBA4((uint64_t)&v58, (const void **)&__p);
      if (SHIBYTE(v55) < 0)
        operator delete(__p);
      if (v59 == v30)
      {
LABEL_44:
        pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v60, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52);
      }
      else
      {
        v31 = (pxrInternal__aapl__pxrReserved__::JsValue *)(v30 + 7);
        if (pxrInternal__aapl__pxrReserved__::JsValue::IsString(v31))
        {
          pxrInternal__aapl__pxrReserved__::JsValue::GetString(v31);
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__p);
          if ((v52 & 7) != 0)
          {
            v32 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
            do
              v33 = __ldxr(v32);
            while (__stlxr(v33 - 2, v32));
          }
          v52 = (unint64_t)__p;
          goto LABEL_44;
        }
        __p = "kind/registry.cpp";
        v54 = "_RegisterDefaults";
        v55 = 249;
        v56 = "void pxrInternal__aapl__pxrReserved__::KindRegistry::_RegisterDefaults()";
        v57 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Expected string for baseKind");
      }
      if ((v52 & 7) != 0)
      {
        v36 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      goto LABEL_54;
    }
LABEL_58:
    sub_20BE78E5C((uint64_t)v63, (_QWORD *)v63[1]);
    sub_20BE78E5C((uint64_t)&v64, v65[0]);
  }
  __p = v67;
  sub_20BEB4844((void ***)&__p);
}

void sub_20BFC9184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,_QWORD *a29,uint64_t a30,char a31,_QWORD *a32)
{
  _QWORD *v32;
  uint64_t v33;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;

  sub_20BEEB2B8((void ***)&__p);
  if ((a12 & 7) != 0)
  {
    v35 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
  if ((*v32 & 7) != 0)
  {
    v37 = (unsigned int *)(*v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  operator delete(v32);
  sub_20BE78E5C((uint64_t)&a28, a29);
  sub_20BE78E5C((uint64_t)&a31, a32);
  __p = (void *)(v33 - 112);
  sub_20BEB4844((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::KindRegistry::~KindRegistry(pxrInternal__aapl__pxrReserved__::KindRegistry *this)
{
  unsigned int **v1;
  const void *v2;

  *(_QWORD *)this = off_24C524480;
  v1 = (unsigned int **)((char *)this + 8);
  sub_20BFC9C88((uint64_t)this + 16);
  sub_20BEBCE60(v1, v2);
}

{
  unsigned int **v1;
  const void *v2;

  *(_QWORD *)this = off_24C524480;
  v1 = (unsigned int **)((char *)this + 8);
  sub_20BFC9C88((uint64_t)this + 16);
  sub_20BEBCE60(v1, v2);
}

{
  unsigned int **v2;
  const void *v3;

  *(_QWORD *)this = off_24C524480;
  v2 = (unsigned int **)((char *)this + 8);
  sub_20BFC9C88((uint64_t)this + 16);
  sub_20BEBCE60(v2, v3);
  operator delete(this);
}

unint64_t pxrInternal__aapl__pxrReserved__::KindRegistry::GetInstance(pxrInternal__aapl__pxrReserved__::KindRegistry *this)
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  return result;
}

void pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t *EmptyString;
  _BYTE *v7;
  int v8;
  BOOL v9;
  char v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  char v26;

  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  if (*((char *)EmptyString + 23) >= 0)
    v7 = EmptyString;
  else
    v7 = (_BYTE *)*EmptyString;
  v8 = (char)*v7;
  if (*v7)
    v9 = (v8 - 48) >= 0xA;
  else
    v9 = 0;
  if (!v9)
    goto LABEL_25;
  if (v8 != 95 && (v8 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_25;
  do
  {
    v12 = (char)*v7++;
    v11 = v12;
    v13 = (v12 & 0xFFFFFFDF) - 65;
    v14 = v12 - 48;
  }
  while (v12 == 95 || v13 < 0x1A || v14 < 0xA);
  if (v11)
  {
LABEL_25:
    v22 = "kind/registry.cpp";
    v23 = "_Register";
    v24 = 65;
    v25 = "void pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(const TfToken &, const TfToken &)";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid kind: '%s'");
  }
  else
  {
    v17 = (_QWORD *)((char *)this + 16);
    if (sub_20BF2B388(v17, a2))
    {
      v22 = "kind/registry.cpp";
      v23 = "_Register";
      v24 = 73;
      v25 = "void pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(const TfToken &, const TfToken &)";
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Kind '%s' has already been registered");
    }
    else
    {
      v21 = 0;
      sub_20BF32220(&v21, a3);
      v22 = (char *)a2;
      v18 = sub_20BFC9D30((uint64_t)v17, a2, (uint64_t)&unk_20CAC184C, (uint64_t **)&v22);
      sub_20BF32220(v18 + 3, &v21);
      if ((v21 & 7) != 0)
      {
        v19 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
    }
  }
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::HasKind(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  return sub_20BF2B2B4((_QWORD *)(Instance + 16), this) != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::_HasKind(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return sub_20BF2B2B4((_QWORD *)this + 2, a2) != 0;
}

void pxrInternal__aapl__pxrReserved__::KindRegistry::GetBaseKind(pxrInternal__aapl__pxrReserved__::KindRegistry *this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::KindRegistry *Instance;

  Instance = (pxrInternal__aapl__pxrReserved__::KindRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::KindRegistry *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  pxrInternal__aapl__pxrReserved__::KindRegistry::_GetBaseKind(Instance, this, a2);
}

void pxrInternal__aapl__pxrReserved__::KindRegistry::_GetBaseKind(pxrInternal__aapl__pxrReserved__::KindRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, unsigned int **a3@<X8>)
{
  _QWORD *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  const char *v10;
  _QWORD v11[4];
  char v12;

  v5 = sub_20BF2B2B4((_QWORD *)this + 2, a2);
  if (!v5)
  {
    v11[0] = "kind/registry.cpp";
    v11[1] = "_GetBaseKind";
    v11[2] = 108;
    v11[3] = "TfToken pxrInternal__aapl__pxrReserved__::KindRegistry::_GetBaseKind(const TfToken &) const";
    v12 = 0;
    v9 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v9)
    {
      v10 = (const char *)(v9 + 16);
      if (*(char *)(v9 + 39) < 0)
        v10 = *(const char **)v10;
    }
    else
    {
      v10 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Unknown kind: '%s'", v10);
    v7 = 0;
    goto LABEL_12;
  }
  v6 = (unsigned int *)v5[3];
  *a3 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
LABEL_12:
      *a3 = v7;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::IsA(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::KindRegistry *Instance;

  Instance = (pxrInternal__aapl__pxrReserved__::KindRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::KindRegistry *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  return pxrInternal__aapl__pxrReserved__::KindRegistry::_IsA(Instance, this, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::_IsA(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v4 = (_QWORD *)((char *)this + 16);
  v5 = *(_QWORD *)a2;
  do
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 0xFFFFFFFFFFFFFFF8) == v7)
      break;
    v8 = sub_20BF2B2B4(v4, a2);
    if (!v8)
      break;
    a2 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 3);
    v5 = v8[3];
  }
  while (v5);
  return v6 == v7;
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::IsModel(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unsigned int **v4;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v4)
    v4 = sub_20BFC9FE0(&pxrInternal__aapl__pxrReserved__::KindTokens);
  return pxrInternal__aapl__pxrReserved__::KindRegistry::IsA(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)v4, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::IsAssembly(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unsigned int **v4;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v4)
    v4 = sub_20BFC9FE0(&pxrInternal__aapl__pxrReserved__::KindTokens);
  return pxrInternal__aapl__pxrReserved__::KindRegistry::IsA(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 3), a3);
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::IsGroup(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unsigned int **v4;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v4)
    v4 = sub_20BFC9FE0(&pxrInternal__aapl__pxrReserved__::KindTokens);
  return pxrInternal__aapl__pxrReserved__::KindRegistry::IsA(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 2), a3);
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::IsComponent(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unsigned int **v4;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v4)
    v4 = sub_20BFC9FE0(&pxrInternal__aapl__pxrReserved__::KindTokens);
  return pxrInternal__aapl__pxrReserved__::KindRegistry::IsA(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 1), a3);
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::IsSubComponent(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unsigned int **v4;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v4)
    v4 = sub_20BFC9FE0(&pxrInternal__aapl__pxrReserved__::KindTokens);
  return pxrInternal__aapl__pxrReserved__::KindRegistry::IsA(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 4), a3);
}

_QWORD *pxrInternal__aapl__pxrReserved__::KindRegistry::GetAllKinds@<X0>(uint64_t a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::KindRegistry *Instance;

  Instance = (pxrInternal__aapl__pxrReserved__::KindRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::KindRegistry *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  return pxrInternal__aapl__pxrReserved__::KindRegistry::_GetAllKinds(Instance, a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::KindRegistry::_GetAllKinds@<X0>(pxrInternal__aapl__pxrReserved__::KindRegistry *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = (_QWORD *)sub_20BFC9A6C((char **)a2, *((_QWORD *)this + 5));
  v5 = (_QWORD *)*((_QWORD *)this + 4);
  if (v5)
  {
    result = *(_QWORD **)(a2 + 8);
    do
    {
      v6 = v5 + 2;
      if ((unint64_t)result >= *(_QWORD *)(a2 + 16))
      {
        result = sub_20BFCA068((char **)a2, v6);
      }
      else
      {
        v7 = *v6;
        *result = *v6;
        if ((v7 & 7) != 0)
        {
          v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 2, v8));
          if ((v9 & 1) == 0)
            *result &= 0xFFFFFFFFFFFFFFF8;
        }
        ++result;
      }
      *(_QWORD *)(a2 + 8) = result;
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return result;
}

void sub_20BFC9A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFC9A6C(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)sub_20BDDF6A8(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
        *(_QWORD *)v8 = 0;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[8 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return sub_20BF1EE98((uint64_t)&v14);
  }
  return result;
}

uint64_t sub_20BFC9B24(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin>>>::operator*() [T = const std::vector<pxrInternal__aa"
            "pl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BFC9B98()
{
  JUMPOUT(0x20BFC9B48);
}

BOOL sub_20BFC9BA0(uint64_t a1, const void **a2, uint64_t **a3)
{
  uint64_t v5;
  unint64_t **v6;
  _BOOL8 result;
  unint64_t JsObject;

  v5 = sub_20BDEEBA4(a1, a2);
  if (a1 + 8 == v5)
    return 0;
  v6 = (unint64_t **)(v5 + 56);
  result = pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)(v5 + 56));
  if (result)
  {
    JsObject = pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(v6);
    if ((uint64_t **)JsObject != a3)
      sub_20BF3E018(a3, *(__int128 **)JsObject, (__int128 *)(JsObject + 8));
    return 1;
  }
  return result;
}

_QWORD *sub_20BFC9C0C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin>>>::operator++() [T = const std::vector<"
            "pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

uint64_t sub_20BFC9C88(uint64_t a1)
{
  void *v2;

  sub_20BFC9CC0(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BFC9CC0(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[3];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      v7 = v2[2];
      if ((v7 & 7) != 0)
      {
        v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stlxr(v9 - 2, v8));
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *sub_20BFC9D30(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return result;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20BF2B6A4(a1, v7, a4, (uint64_t)&v21);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *v21 = *v19;
    *v19 = v21;
  }
  else
  {
    *v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      v20 = *(_QWORD *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v21;
    }
  }
  result = v21;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20BFC9F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_20BFC9F84((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void sub_20BFC9F84(uint64_t a1, _QWORD *__p)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = __p[3];
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    v5 = __p[2];
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

unsigned int **sub_20BFC9FE0(unint64_t *a1)
{
  unsigned int **result;
  void *v4;

  result = sub_20BFCA028();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType::~KindTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType *)result);
    operator delete(v4);
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **sub_20BFCA028()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new(0x40uLL);
  pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType::KindTokens_StaticTokenType(v0);
  return v0;
}

void sub_20BFCA054(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20BFCA068(char **a1, uint64_t *a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  _QWORD *v26;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v26 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDDF6A8(v7, v9);
  else
    v10 = 0;
  v11 = &v10[8 * v4];
  v12 = &v10[8 * v9];
  v25 = v12;
  v13 = *a2;
  *(_QWORD *)v11 = *a2;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *(_QWORD *)v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  v16 = v11 + 8;
  v24.i64[1] = (uint64_t)(v11 + 8);
  v18 = *a1;
  v17 = a1[1];
  if (v17 == *a1)
  {
    v20 = vdupq_n_s64((unint64_t)v17);
  }
  else
  {
    do
    {
      v19 = *((_QWORD *)v17 - 1);
      v17 -= 8;
      *((_QWORD *)v11 - 1) = v19;
      v11 -= 8;
      *(_QWORD *)v17 = 0;
    }
    while (v17 != v18);
    v20 = *(int64x2_t *)a1;
    v16 = (char *)v24.i64[1];
    v12 = v25;
  }
  *a1 = v11;
  a1[1] = v16;
  v24 = v20;
  v21 = a1[2];
  a1[2] = v12;
  v25 = v21;
  v23 = v20.i64[0];
  sub_20BF1EE98((uint64_t)&v23);
  return v16;
}

uint64_t textFileFormatYylex(uint64_t a1, _QWORD *a2, BOOL *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t buffer;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char *v25;
  unint64_t v26;
  int v27;
  int v28;
  char v29;
  size_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  size_t v40;
  int v41;
  size_t v43;
  size_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  FILE *v62;
  const char *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  _BYTE *v68;
  char v69[8];
  std::string __dst;
  std::string __p;
  const char *v72;
  char v73;
  int v74;

  v4 = a1;
  a2[19] = a1;
  if (!*((_DWORD *)a2 + 20))
  {
    *((_DWORD *)a2 + 20) = 1;
    if (!*((_DWORD *)a2 + 21))
      *((_DWORD *)a2 + 21) = 1;
    if (!a2[1])
      a2[1] = *MEMORY[0x24BDAC8E0];
    if (!a2[2])
      a2[2] = *MEMORY[0x24BDAC8E8];
    v5 = a2[5];
    if (!v5 || (v6 = a2[3], (v7 = *(_QWORD *)(v5 + 8 * v6)) == 0))
    {
      sub_20BFCC3A0(a2);
      buffer = textFileFormatYy_create_buffer((__sFILE *)a2[1], 0x4000, (uint64_t)a2);
      v6 = a2[3];
      *(_QWORD *)(a2[5] + 8 * v6) = buffer;
      v5 = a2[5];
      v7 = *(_QWORD *)(v5 + 8 * v6);
    }
    a2[7] = *(_QWORD *)(v7 + 32);
    v9 = *(_BYTE **)(v7 + 16);
    a2[9] = v9;
    a2[17] = v9;
    a2[1] = **(_QWORD **)(v5 + 8 * v6);
    *((_BYTE *)a2 + 48) = *v9;
  }
LABEL_12:
  v10 = (_BYTE *)a2[9];
  v11 = *((unsigned __int8 *)a2 + 48);
  *v10 = v11;
  v12 = *((_DWORD *)a2 + 21);
  v13 = v10;
LABEL_13:
  v14 = word_20CAA3502[61 * v12 + dword_20CAAF58C[v11]];
  if (v14 >= 1)
  {
    do
    {
      if (word_20CAAF98C[v14])
      {
        *((_DWORD *)a2 + 28) = v14;
        a2[15] = v10;
      }
      v15 = *++v10;
      v14 = word_20CAA3502[61 * v14 + dword_20CAAF58C[v15]];
    }
    while (v14 > 0);
  }
  v16 = -v14;
  while (1)
  {
    v17 = (__int16)word_20CAAF98C[v16];
    a2[17] = v13;
    a2[8] = v10 - v13;
    *((_BYTE *)a2 + 48) = *v10;
    *v10 = 0;
    a2[9] = v10;
LABEL_19:
    switch(v17)
    {
      case 0:
        *v10 = *((_BYTE *)a2 + 48);
        v10 = (_BYTE *)(a2[15] + 1);
        v16 = *((_DWORD *)a2 + 28);
        continue;
      case 1:
      case 3:
      case 5:
        goto LABEL_12;
      case 2:
        if (*(_DWORD *)(*a2 + 968) != 1)
          goto LABEL_12;
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 259;
      case 4:
        *((_DWORD *)a2 + 21) = 3;
        goto LABEL_12;
      case 6:
        *((_DWORD *)a2 + 21) = 1;
        goto LABEL_12;
      case 7:
        ++*(_DWORD *)(*a2 + 968);
        return 258;
      case 8:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 269;
      case 9:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 270;
      case 10:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 271;
      case 11:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 272;
      case 12:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 273;
      case 13:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 274;
      case 14:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 275;
      case 15:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 277;
      case 16:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 276;
      case 17:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 278;
      case 18:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 279;
      case 19:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 280;
      case 20:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 281;
      case 21:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 282;
      case 22:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 283;
      case 23:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 284;
      case 24:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 285;
      case 25:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 286;
      case 26:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 287;
      case 27:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 289;
      case 28:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 288;
      case 29:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 290;
      case 30:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 292;
      case 31:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 293;
      case 32:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 294;
      case 33:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 295;
      case 34:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 296;
      case 35:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 298;
      case 36:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 299;
      case 37:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 300;
      case 38:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 302;
      case 39:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 291;
      case 40:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 301;
      case 41:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 303;
      case 42:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 304;
      case 43:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 305;
      case 44:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 306;
      case 45:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 308;
      case 46:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 309;
      case 47:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 307;
      case 48:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 310;
      case 49:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 264;
      case 50:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidIdentifier((uint64_t)&__dst, (uint64_t)&__p);
        if ((_BYTE)v72)
          goto LABEL_201;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        v52 = 263;
        goto LABEL_415;
      case 51:
        sub_20BDFC7D8(&__dst, (void *)a2[17], a2[8]);
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidNamespacedIdentifier((size_t *)&__dst, (uint64_t)&__p);
        if ((_BYTE)v72)
        {
LABEL_201:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v52 = 260;
        }
        else
        {
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          else
            __p = __dst;
          v74 = 3;
          sub_20BFCCEAC(v4, (uint64_t)&__p);
          sub_20BFCD42C((uint64_t)&__p);
          v52 = 265;
        }
LABEL_415:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return v52;
      case 52:
        pxrInternal__aapl__pxrReserved__::Sdf_EvalQuotedString((pxrInternal__aapl__pxrReserved__ *)a2[17], (const char *)a2[8], 1, 0, (unsigned __int8 *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 262;
      case 53:
        pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v69);
        pxrInternal__aapl__pxrReserved__::Sdf_EvalAssetPath((pxrInternal__aapl__pxrReserved__ *)a2[17], (const char *)a2[8], 0, &__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_401;
      case 54:
        pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v69);
        pxrInternal__aapl__pxrReserved__::Sdf_EvalAssetPath((pxrInternal__aapl__pxrReserved__ *)a2[17], (const char *)a2[8], 1, &__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_401:
        if (sub_20BFCC4FC((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v69))
          v52 = 261;
        else
          v52 = 260;
        pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v69);
        return v52;
      case 55:
      case 56:
        pxrInternal__aapl__pxrReserved__::Sdf_EvalQuotedString((pxrInternal__aapl__pxrReserved__ *)a2[17], (const char *)a2[8], 1, 0, (unsigned __int8 *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return 267;
      case 57:
      case 58:
        *v10 = *((_BYTE *)a2 + 48);
        a2[17] = v13;
        a2[8] = 2;
        a2[9] = v13 + 2;
        *((_BYTE *)a2 + 48) = v13[2];
        v13[2] = 0;
        a2[9] = v13 + 2;
        memset(&__p, 0, sizeof(__p));
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        return 267;
      case 59:
      case 60:
        *(_DWORD *)v69 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_EvalQuotedString((pxrInternal__aapl__pxrReserved__ *)a2[17], (const char *)a2[8], 3, v69, (unsigned __int8 *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          __p = __dst;
        v74 = 3;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        *(_DWORD *)(*a2 + 968) += *(_DWORD *)v69;
        return 267;
      case 61:
        __p.__r_.__value_.__r.__words[0] = 0x8000000000000000;
        v74 = 2;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        goto LABEL_420;
      case 62:
        v69[0] = 0;
        v53 = pxrInternal__aapl__pxrReserved__::TfStringToUInt64((pxrInternal__aapl__pxrReserved__ *)a2[17], v69, a3);
        __p.__r_.__value_.__r.__words[0] = 0;
        v74 = 0;
        __dst.__r_.__value_.__r.__words[0] = v53;
        sub_20BFCD484((uint64_t)&__p, &__dst);
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (!v69[0])
          return 266;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/textFileFormat.ll";
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"textFileFormatYylex";
        __p.__r_.__value_.__r.__words[2] = 293;
        v72 = "int textFileFormatYylex(Sdf_ParserHelpers::Value *, yyscan_t)";
        v73 = 0;
        v55 = a2[17];
        v56 = *(unsigned int *)(*a2 + 968);
        v57 = (const char *)(*a2 + 48);
        if (*(char *)(*a2 + 71) < 0)
        {
          if (*(_QWORD *)(*a2 + 56))
          {
            v57 = *(const char **)v57;
            v58 = " in file ";
          }
          else
          {
            v58 = "";
            v57 = "";
          }
        }
        else
        {
          v58 = " in file ";
          if (!*(_BYTE *)(*a2 + 71))
          {
            v58 = "";
            v57 = "";
          }
        }
        goto LABEL_419;
      case 63:
        v69[0] = 0;
        v59 = pxrInternal__aapl__pxrReserved__::TfStringToInt64((pxrInternal__aapl__pxrReserved__ *)a2[17], v69, a3);
        __p.__r_.__value_.__r.__words[0] = 0;
        v74 = 0;
        __dst.__r_.__value_.__r.__words[0] = v59;
        sub_20BFCD4C4((uint64_t)&__p, &__dst);
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        sub_20BFCD42C((uint64_t)&__p);
        if (!v69[0])
          return 266;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/textFileFormat.ll";
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"textFileFormatYylex";
        __p.__r_.__value_.__r.__words[2] = 309;
        v72 = "int textFileFormatYylex(Sdf_ParserHelpers::Value *, yyscan_t)";
        v73 = 0;
        v55 = a2[17];
        v56 = *(unsigned int *)(*a2 + 968);
        v57 = (const char *)(*a2 + 48);
        if (*(char *)(*a2 + 71) < 0)
        {
          if (*(_QWORD *)(*a2 + 56))
          {
            v57 = *(const char **)v57;
            v58 = " in file ";
          }
          else
          {
            v58 = "";
            v57 = "";
          }
        }
        else
        {
          v58 = " in file ";
          if (!*(_BYTE *)(*a2 + 71))
          {
            v58 = "";
            v57 = "";
          }
        }
LABEL_419:
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Integer literal '%s' on line %d%s%s out of range, parsing as double.  Consider exponential notation for large floating point values.", v54, v55, v56, v58, v57);
        __p.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::TfStringToDouble((pxrInternal__aapl__pxrReserved__ *)a2[17], v60);
        v74 = 2;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
LABEL_420:
        sub_20BFCD42C((uint64_t)&__p);
        return 266;
      case 64:
      case 65:
        __p.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::TfStringToDouble((pxrInternal__aapl__pxrReserved__ *)a2[17], (const char *)a2);
        v74 = 2;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        goto LABEL_420;
      case 66:
        __p.__r_.__value_.__r.__words[0] = 0xFFF0000000000000;
        v74 = 2;
        sub_20BFCCEAC(v4, (uint64_t)&__p);
        goto LABEL_420;
      case 67:
        return *(char *)a2[17];
      case 68:
        return 260;
      case 69:
        fwrite((const void *)a2[17], a2[8], 1uLL, (FILE *)a2[2]);
        goto LABEL_12;
      case 70:
        v18 = a2[17];
        *v10 = *((_BYTE *)a2 + 48);
        v19 = a2[5];
        v20 = a2[3];
        v21 = *(_QWORD *)(v19 + 8 * v20);
        if (*(_DWORD *)(v21 + 64))
        {
          v22 = a2[7];
        }
        else
        {
          v22 = *(_QWORD *)(v21 + 32);
          a2[7] = v22;
          *(_QWORD *)v21 = a2[1];
          v21 = *(_QWORD *)(v19 + 8 * v20);
          *(_DWORD *)(v21 + 64) = 1;
        }
        v23 = a2[9];
        v24 = *(_BYTE **)(v21 + 8);
        if (v23 <= (unint64_t)&v24[v22])
        {
          a2[9] = a2[17] + ~(_DWORD)v18 + (int)v10;
          v16 = sub_20BFCC560((uint64_t)a2);
          v10 = (_BYTE *)a2[9];
          v12 = word_20CAA3502[61 * v16 + 1];
          if (v12 <= 0)
            goto LABEL_84;
          if (word_20CAAF98C[v12])
          {
            *((_DWORD *)a2 + 28) = v12;
            a2[15] = v10;
          }
          v13 = (_BYTE *)a2[17];
          a2[9] = ++v10;
LABEL_86:
          v11 = *v10;
          goto LABEL_13;
        }
        v68 = v13;
        if (v23 > (unint64_t)&v24[v22 + 1])
        {
          v62 = (FILE *)*MEMORY[0x24BDAC8D8];
          v63 = "fatal flex scanner internal error--end of buffer missed";
          goto LABEL_431;
        }
        v25 = (char *)a2[17];
        v26 = v23 - (_QWORD)v25;
        if (!*(_DWORD *)(v21 + 60))
        {
          if (v26 != 1)
            goto LABEL_81;
LABEL_75:
          *((_DWORD *)a2 + 22) = 0;
          a2[9] = v25;
          v51 = *((_DWORD *)a2 + 21);
          if (v51 >= 1)
            --v51;
          v17 = (v51 >> 1) + 71;
          v13 = v68;
          goto LABEL_19;
        }
        v27 = v26 - 1;
        if ((int)v26 >= 2)
        {
          v28 = v26 - 1;
          do
          {
            v29 = *v25++;
            *v24++ = v29;
            --v28;
          }
          while (v28);
          v21 = *(_QWORD *)(a2[5] + 8 * a2[3]);
        }
        v66 = v4;
        v67 = v26 - 1;
        v65 = v18;
        if (*(_DWORD *)(v21 + 64) == 2)
        {
          a2[7] = 0;
LABEL_32:
          *(_QWORD *)(v21 + 32) = 0;
          if (v27)
            goto LABEL_33;
          goto LABEL_69;
        }
        v64 = v27;
        v32 = ~(uint64_t)v27;
        v33 = *(_QWORD *)(v21 + 24);
        v34 = v33 + v32;
        if (!(v33 + v32))
        {
          v35 = (char *)a2[9];
          while (*(_DWORD *)(v21 + 40))
          {
            v36 = *(void **)(v21 + 8);
            v37 = 2 * v33;
            v38 = v33 + (v33 >> 3);
            if (v37)
              v38 = v37;
            *(_QWORD *)(v21 + 24) = v38;
            v39 = (char *)realloc(v36, v38 + 2);
            *(_QWORD *)(v21 + 8) = v39;
            if (!v39)
              goto LABEL_430;
            v35 = &v39[(int)v35 - (int)v36];
            a2[9] = v35;
            v21 = *(_QWORD *)(a2[5] + 8 * a2[3]);
            v33 = *(_QWORD *)(v21 + 24);
            v34 = v33 + v32;
            if (v33 + v32)
              goto LABEL_43;
          }
          *(_QWORD *)(v21 + 8) = 0;
LABEL_430:
          v62 = (FILE *)*MEMORY[0x24BDAC8D8];
          v63 = "fatal error - scanner input buffer overflow";
LABEL_431:
          fprintf(v62, "%s\n", v63);
          exit(2);
        }
LABEL_43:
        if (v34 >= 0x2000)
          v40 = 0x2000;
        else
          v40 = v34;
        if (!*(_DWORD *)(v21 + 44))
        {
          *__error() = 0;
          v30 = fread((void *)(*(_QWORD *)(*(_QWORD *)(a2[5] + 8 * a2[3]) + 8) + v64), 1uLL, v40, (FILE *)a2[1]);
          a2[7] = v30;
          if (v30)
          {
LABEL_62:
            v31 = 0;
            goto LABEL_63;
          }
          while (ferror((FILE *)a2[1]))
          {
            if (*__error() != 4)
              goto LABEL_434;
            *__error() = 0;
            clearerr((FILE *)a2[1]);
            v43 = fread((void *)(*(_QWORD *)(*(_QWORD *)(a2[5] + 8 * a2[3]) + 8) + v64), 1uLL, v40, (FILE *)a2[1]);
            a2[7] = v43;
            if (v43)
            {
              v30 = v43;
              goto LABEL_62;
            }
          }
          v21 = *(_QWORD *)(a2[5] + 8 * a2[3]);
          v27 = v67;
          goto LABEL_32;
        }
        v30 = 0;
        while (1)
        {
          v41 = getc((FILE *)a2[1]);
          if (v41 == -1 || v41 == 10)
            break;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2[5] + 8 * a2[3]) + 8) + v64 + v30++) = v41;
          if (v40 == v30)
          {
            v30 = v40;
            break;
          }
        }
        if (v41 == -1)
        {
          if (ferror((FILE *)a2[1]))
          {
LABEL_434:
            v62 = (FILE *)*MEMORY[0x24BDAC8D8];
            v63 = "input in flex scanner failed";
            goto LABEL_431;
          }
        }
        else if (v41 == 10)
        {
          v31 = 0;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2[5] + 8 * a2[3]) + 8) + v64 + v30++) = 10;
          a2[7] = v30;
LABEL_63:
          v21 = *(_QWORD *)(a2[5] + 8 * a2[3]);
          *(_QWORD *)(v21 + 32) = v30;
LABEL_67:
          v27 = v67;
          goto LABEL_70;
        }
        a2[7] = v30;
        v21 = *(_QWORD *)(a2[5] + 8 * a2[3]);
        *(_QWORD *)(v21 + 32) = v30;
        if (v30)
        {
          v31 = 0;
          goto LABEL_67;
        }
        v27 = v67;
        if (v67)
        {
LABEL_33:
          v30 = 0;
          v31 = 2;
          *(_DWORD *)(v21 + 64) = 2;
          goto LABEL_70;
        }
LABEL_69:
        textFileFormatYyrestart((__sFILE *)a2[1], a2);
        v27 = v67;
        v30 = a2[7];
        v21 = *(_QWORD *)(a2[5] + 8 * a2[3]);
        v31 = 1;
LABEL_70:
        v44 = v30 + v27;
        if (v44 <= *(_QWORD *)(v21 + 24))
        {
          v48 = *(_QWORD *)(v21 + 8);
        }
        else
        {
          v45 = realloc(*(void **)(v21 + 8), v44 + (v30 >> 1));
          v46 = a2[5];
          v47 = a2[3];
          *(_QWORD *)(*(_QWORD *)(v46 + 8 * v47) + 8) = v45;
          v48 = *(_QWORD *)(*(_QWORD *)(v46 + 8 * v47) + 8);
          if (!v48)
          {
            v62 = (FILE *)*MEMORY[0x24BDAC8D8];
            v63 = "out of dynamic memory in yy_get_next_buffer()";
            goto LABEL_431;
          }
          v44 = a2[7] + v67;
        }
        v4 = v66;
        a2[7] = v44;
        *(_BYTE *)(v48 + v44) = 0;
        *(_BYTE *)(a2[7] + *(_QWORD *)(*(_QWORD *)(a2[5] + 8 * a2[3]) + 8) + 1) = 0;
        v49 = a2[5];
        v50 = a2[3];
        v25 = *(char **)(*(_QWORD *)(v49 + 8 * v50) + 8);
        a2[17] = v25;
        if (v31 == 1)
          goto LABEL_75;
        if (!v31)
        {
          a2[9] = &v25[~v65 + (int)v10];
          v12 = sub_20BFCC560((uint64_t)a2);
          v10 = (_BYTE *)a2[9];
          v13 = (_BYTE *)a2[17];
          goto LABEL_86;
        }
        v24 = *(_BYTE **)(*(_QWORD *)(v49 + 8 * v50) + 8);
        v22 = a2[7];
LABEL_81:
        a2[9] = &v24[v22];
        v16 = sub_20BFCC560((uint64_t)a2);
        v10 = (_BYTE *)a2[9];
LABEL_84:
        v13 = (_BYTE *)a2[17];
        break;
      case 71:
      case 72:
        return 0;
      default:
        sub_20BFCC5D8("fatal flex scanner internal error--no action found");
    }
  }
}

void sub_20BFCC19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFCC3A0(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  double result;
  _QWORD *v8;

  v2 = (void *)a1[5];
  if (v2)
  {
    v3 = a1[4];
    if (a1[3] >= (unint64_t)(v3 - 1))
    {
      v4 = v3 + 8;
      v5 = (char *)realloc(v2, 8 * (v3 + 8));
      a1[5] = v5;
      if (v5)
      {
        v6 = &v5[8 * a1[4]];
        result = 0.0;
        *(_OWORD *)v6 = 0u;
        *((_OWORD *)v6 + 1) = 0u;
        *((_OWORD *)v6 + 2) = 0u;
        *((_OWORD *)v6 + 3) = 0u;
        a1[4] = v4;
        return result;
      }
LABEL_8:
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", "out of dynamic memory in textFileFormatYyensure_buffer_stack()");
      exit(2);
    }
  }
  else
  {
    v8 = malloc(8uLL);
    a1[5] = v8;
    if (!v8)
      goto LABEL_8;
    *v8 = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 3) = xmmword_20CA59F70;
  }
  return result;
}

uint64_t textFileFormatYy_create_buffer(__sFILE *a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  void *v8;

  v6 = malloc(0x48uLL);
  if (!v6 || (v7 = (uint64_t)v6, v6[3] = a2, v8 = malloc(a2 + 2), (*(_QWORD *)(v7 + 8) = v8) == 0))
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", "out of dynamic memory in textFileFormatYy_create_buffer()");
    exit(2);
  }
  *(_DWORD *)(v7 + 40) = 1;
  sub_20BFCC6B8(v7, a1, a3);
  return v7;
}

BOOL sub_20BFCC4FC(pxrInternal__aapl__pxrReserved__::TfErrorMark *this)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;

  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = *(_QWORD *)this;
  v4 = atomic_load(Instance + 18);
  return v3 >= v4
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl(this, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
}

uint64_t sub_20BFCC560(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  v1 = *(unsigned int *)(a1 + 84);
  v2 = *(_BYTE **)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v2 < v3)
  {
    v4 = v3 - (_QWORD)v2;
    do
    {
      if (*v2)
        v5 = dword_20CAAF58C[*v2];
      else
        v5 = 1;
      v1 = word_20CAA3502[61 * (int)v1 + v5];
      if (word_20CAAF98C[v1])
      {
        *(_DWORD *)(a1 + 112) = v1;
        *(_QWORD *)(a1 + 120) = v2;
      }
      ++v2;
      --v4;
    }
    while (v4);
  }
  return v1;
}

void sub_20BFCC5D8(const char *a1)
{
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", a1);
  exit(2);
}

int *textFileFormatYyrestart(__sFILE *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t buffer;
  uint64_t v7;
  int *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;

  v4 = a2[5];
  if (v4 && (v5 = a2[3], *(_QWORD *)(v4 + 8 * v5))
    || (sub_20BFCC3A0(a2),
        buffer = textFileFormatYy_create_buffer((__sFILE *)a2[1], 0x4000, (uint64_t)a2),
        v5 = a2[3],
        *(_QWORD *)(a2[5] + 8 * v5) = buffer,
        (v4 = a2[5]) != 0))
  {
    v7 = *(_QWORD *)(v4 + 8 * v5);
  }
  else
  {
    v7 = 0;
  }
  result = sub_20BFCC6B8(v7, a1, (uint64_t)a2);
  v9 = a2[5];
  v10 = a2[3];
  v11 = *(_QWORD *)(v9 + 8 * v10);
  a2[7] = *(_QWORD *)(v11 + 32);
  v12 = *(_BYTE **)(v11 + 16);
  a2[9] = v12;
  a2[17] = v12;
  a2[1] = **(_QWORD **)(v9 + 8 * v10);
  *((_BYTE *)a2 + 48) = *v12;
  return result;
}

int *sub_20BFCC6B8(uint64_t a1, FILE *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  int *result;

  v6 = *__error();
  textFileFormatYy_flush_buffer(a1, a3);
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 60) = 1;
  v7 = *(_QWORD *)(a3 + 40);
  if (v7)
    v7 = *(_QWORD *)(v7 + 8 * *(_QWORD *)(a3 + 24));
  if (v7 != a1)
    *(_QWORD *)(a1 + 52) = 1;
  if (a2)
  {
    v8 = fileno(a2);
    v9 = isatty(v8) > 0;
  }
  else
  {
    v9 = 0;
  }
  *(_DWORD *)(a1 + 44) = v9;
  result = __error();
  *result = v6;
  return result;
}

void textFileFormatYy_switch_to_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;

  sub_20BFCC3A0((_QWORD *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_QWORD *)(v4 + 8 * v5);
    if (v6 != a1)
    {
      if (v6)
      {
        **(_BYTE **)(a2 + 72) = *(_BYTE *)(a2 + 48);
        v4 = *(_QWORD *)(a2 + 40);
        v5 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(*(_QWORD *)(v4 + 8 * v5) + 16) = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(*(_QWORD *)(v4 + 8 * v5) + 32) = *(_QWORD *)(a2 + 56);
      }
      *(_QWORD *)(v4 + 8 * v5) = a1;
      v7 = *(_QWORD *)(a2 + 40);
      v8 = *(_QWORD *)(v7 + 8 * v5);
      *(_QWORD *)(a2 + 56) = *(_QWORD *)(v8 + 32);
      v9 = *(_BYTE **)(v8 + 16);
      *(_QWORD *)(a2 + 72) = v9;
      *(_QWORD *)(a2 + 136) = v9;
      *(_QWORD *)(a2 + 8) = **(_QWORD **)(v7 + 8 * v5);
      *(_BYTE *)(a2 + 48) = *v9;
      *(_DWORD *)(a2 + 88) = 1;
    }
  }
}

void textFileFormatYy_delete_buffer(void **a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;

  if (a1)
  {
    v3 = *(_QWORD *)(a2 + 40);
    if (v3)
      v4 = *(void ***)(v3 + 8 * *(_QWORD *)(a2 + 24));
    else
      v4 = 0;
    if (v4 == a1)
      *(_QWORD *)(v3 + 8 * *(_QWORD *)(a2 + 24)) = 0;
    if (*((_DWORD *)a1 + 10))
      free(a1[1]);
    free(a1);
  }
}

uint64_t textFileFormatYy_flush_buffer(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  if (result)
  {
    *(_QWORD *)(result + 32) = 0;
    **(_BYTE **)(result + 8) = 0;
    *(_BYTE *)(*(_QWORD *)(result + 8) + 1) = 0;
    *(_QWORD *)(result + 16) = *(_QWORD *)(result + 8);
    *(_DWORD *)(result + 48) = 1;
    *(_DWORD *)(result + 64) = 0;
    v2 = *(_QWORD *)(a2 + 40);
    if (v2)
      v3 = *(_QWORD *)(v2 + 8 * *(_QWORD *)(a2 + 24));
    else
      v3 = 0;
    if (v3 == result)
    {
      v4 = *(_QWORD *)(a2 + 24);
      v5 = *(_QWORD *)(v2 + 8 * v4);
      *(_QWORD *)(a2 + 56) = *(_QWORD *)(v5 + 32);
      v6 = *(_BYTE **)(v5 + 16);
      *(_QWORD *)(a2 + 72) = v6;
      *(_QWORD *)(a2 + 136) = v6;
      *(_QWORD *)(a2 + 8) = **(_QWORD **)(v2 + 8 * v4);
      *(_BYTE *)(a2 + 48) = *v6;
    }
  }
  return result;
}

void textFileFormatYypush_buffer_state(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;

  if (a1)
  {
    sub_20BFCC3A0((_QWORD *)a2);
    v4 = *(_QWORD *)(a2 + 40);
    v5 = *(_QWORD *)(a2 + 24);
    if (*(_QWORD *)(v4 + 8 * v5))
    {
      **(_BYTE **)(a2 + 72) = *(_BYTE *)(a2 + 48);
      v4 = *(_QWORD *)(a2 + 40);
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(*(_QWORD *)(v4 + 8 * v6) + 16) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(*(_QWORD *)(v4 + 8 * v6) + 32) = *(_QWORD *)(a2 + 56);
      v5 = v6 + 1;
      *(_QWORD *)(a2 + 24) = v6 + 1;
    }
    *(_QWORD *)(v4 + 8 * v5) = a1;
    v7 = *(_QWORD *)(a2 + 40);
    v8 = *(_QWORD *)(v7 + 8 * v5);
    *(_QWORD *)(a2 + 56) = *(_QWORD *)(v8 + 32);
    v9 = *(_BYTE **)(v8 + 16);
    *(_QWORD *)(a2 + 72) = v9;
    *(_QWORD *)(a2 + 136) = v9;
    *(_QWORD *)(a2 + 8) = **(_QWORD **)(v7 + 8 * v5);
    *(_BYTE *)(a2 + 48) = *v9;
    *(_DWORD *)(a2 + 88) = 1;
  }
}

void textFileFormatYypop_buffer_state(_QWORD *a1)
{
  uint64_t v1;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v1 = a1[5];
  if (v1)
  {
    v3 = *(void ***)(v1 + 8 * a1[3]);
    if (v3)
    {
      textFileFormatYy_delete_buffer(v3, (uint64_t)a1);
      v4 = a1[3];
      *(_QWORD *)(a1[5] + 8 * v4) = 0;
      if (v4)
        a1[3] = --v4;
      v5 = a1[5];
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8 * v4);
        if (v6)
        {
          a1[7] = *(_QWORD *)(v6 + 32);
          v7 = *(_BYTE **)(v6 + 16);
          a1[9] = v7;
          a1[17] = v7;
          a1[1] = **(_QWORD **)(v5 + 8 * v4);
          *((_BYTE *)a1 + 48) = *v7;
          *((_DWORD *)a1 + 22) = 1;
        }
      }
    }
  }
}

_QWORD *textFileFormatYy_scan_buffer(char *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v5;
  _QWORD *v8;

  v3 = a2 - 2;
  if (a2 < 2 || a1[v3] || a1[a2 - 1])
    return 0;
  v8 = malloc(0x48uLL);
  if (!v8)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", "out of dynamic memory in textFileFormatYy_scan_buffer()");
    exit(2);
  }
  v5 = v8;
  v8[2] = a1;
  v8[3] = v3;
  *v8 = 0;
  v8[1] = a1;
  v8[4] = v3;
  v8[5] = 0;
  *((_DWORD *)v8 + 12) = 1;
  *(_QWORD *)((char *)v8 + 60) = 0;
  textFileFormatYy_switch_to_buffer((uint64_t)v8, a3);
  return v5;
}

_QWORD *textFileFormatYy_scan_string(const char *a1, uint64_t a2)
{
  size_t v4;

  v4 = strlen(a1);
  return textFileFormatYy_scan_bytes(a1, v4, a2);
}

_QWORD *textFileFormatYy_scan_bytes(const char *a1, size_t a2, uint64_t a3)
{
  unint64_t v6;
  char *v7;
  char *v8;
  _QWORD *result;
  FILE *v10;
  const char *v11;

  v6 = a2 + 2;
  v7 = (char *)malloc(a2 + 2);
  if (!v7)
  {
    v10 = (FILE *)*MEMORY[0x24BDAC8D8];
    v11 = "out of dynamic memory in textFileFormatYy_scan_bytes()";
    goto LABEL_8;
  }
  v8 = v7;
  if (a2)
    memcpy(v7, a1, a2);
  *(_WORD *)&v8[a2] = 0;
  result = textFileFormatYy_scan_buffer(v8, v6, a3);
  if (!result)
  {
    v10 = (FILE *)*MEMORY[0x24BDAC8D8];
    v11 = "bad buffer in textFileFormatYy_scan_bytes()";
LABEL_8:
    fprintf(v10, "%s\n", v11);
    exit(2);
  }
  *((_DWORD *)result + 10) = 1;
  return result;
}

uint64_t textFileFormatYyget_extra(void *a1)
{
  return *(_QWORD *)a1;
}

uint64_t textFileFormatYyget_lineno(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[5];
  if (v1 && (v2 = *(_QWORD *)(v1 + 8 * a1[3])) != 0)
    return *(unsigned int *)(v2 + 52);
  else
    return 0;
}

uint64_t textFileFormatYyget_column(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[5];
  if (v1 && (v2 = *(_QWORD *)(v1 + 8 * a1[3])) != 0)
    return *(unsigned int *)(v2 + 56);
  else
    return 0;
}

uint64_t textFileFormatYyget_in(_QWORD *a1)
{
  return a1[1];
}

uint64_t textFileFormatYyget_out(_QWORD *a1)
{
  return a1[2];
}

uint64_t textFileFormatYyget_leng(_QWORD *a1)
{
  return a1[8];
}

uint64_t textFileFormatYyget_text(_QWORD *a1)
{
  return a1[17];
}

uint64_t textFileFormatYyset_extra(uint64_t result, _QWORD *a2)
{
  *a2 = result;
  return result;
}

uint64_t textFileFormatYyset_lineno(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2[5];
  if (!v2 || (v3 = *(_QWORD *)(v2 + 8 * a2[3])) == 0)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", "textFileFormatYyset_lineno called with no buffer");
    exit(2);
  }
  *(_DWORD *)(v3 + 52) = result;
  return result;
}

uint64_t textFileFormatYyset_column(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2[5];
  if (!v2 || (v3 = *(_QWORD *)(v2 + 8 * a2[3])) == 0)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", "textFileFormatYyset_column called with no buffer");
    exit(2);
  }
  *(_DWORD *)(v3 + 56) = result;
  return result;
}

uint64_t textFileFormatYyset_in(uint64_t result, _QWORD *a2)
{
  a2[1] = result;
  return result;
}

uint64_t textFileFormatYyset_out(uint64_t result, _QWORD *a2)
{
  a2[2] = result;
  return result;
}

uint64_t textFileFormatYyget_debug(unsigned int *a1)
{
  return a1[33];
}

uint64_t textFileFormatYyset_debug(uint64_t result, _DWORD *a2)
{
  a2[33] = result;
  return result;
}

uint64_t textFileFormatYyget_lval(_QWORD *a1)
{
  return a1[19];
}

uint64_t textFileFormatYyset_lval(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(a2 + 152) = result;
  return result;
}

uint64_t textFileFormatYylex_init(void **a1)
{
  void *v2;
  _OWORD *v3;
  uint64_t result;
  int *v5;
  int v6;

  if (a1)
  {
    v2 = malloc(0xA0uLL);
    *a1 = v2;
    if (v2)
    {
      v3 = v2;
      result = 0;
      v3[8] = 0u;
      v3[9] = 0u;
      v3[6] = 0u;
      v3[7] = 0u;
      v3[4] = 0u;
      v3[5] = 0u;
      v3[2] = 0u;
      v3[3] = 0u;
      *v3 = 0u;
      v3[1] = 0u;
      return result;
    }
    v5 = __error();
    v6 = 12;
  }
  else
  {
    v5 = __error();
    v6 = 22;
  }
  *v5 = v6;
  return 1;
}

uint64_t textFileFormatYylex_init_extra(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t result;
  int *v7;
  int v8;

  if (a2)
  {
    v4 = malloc(0xA0uLL);
    *a2 = v4;
    if (v4)
    {
      v5 = v4;
      result = 0;
      *(_QWORD *)v5 = a1;
      v5[5] = 0u;
      v5[6] = 0u;
      v5[8] = 0u;
      v5[9] = 0u;
      v5[7] = 0u;
      v5[3] = 0u;
      v5[4] = 0u;
      *((_DWORD *)v5 + 24) = 0;
      *(_OWORD *)((char *)v5 + 8) = 0u;
      *(_OWORD *)((char *)v5 + 24) = 0u;
      *((_QWORD *)v5 + 5) = 0;
      *((_QWORD *)v5 + 9) = 0;
      *((_QWORD *)v5 + 10) = 0;
      return result;
    }
    v7 = __error();
    v8 = 12;
  }
  else
  {
    v7 = __error();
    v8 = 22;
  }
  *v7 = v8;
  return 1;
}

uint64_t textFileFormatYylex_destroy(_QWORD *a1)
{
  _QWORD *i;

  for (i = (_QWORD *)a1[5]; i; i = (_QWORD *)a1[5])
  {
    if (!i[a1[3]])
      break;
    textFileFormatYy_delete_buffer((void **)i[a1[3]], (uint64_t)a1);
    *(_QWORD *)(a1[5] + 8 * a1[3]) = 0;
    textFileFormatYypop_buffer_state(a1);
  }
  free(i);
  a1[5] = 0;
  free((void *)a1[13]);
  free(a1);
  return 0;
}

uint64_t sub_20BFCCEAC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 48);
  v4 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C5244B8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 48) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24C5244E8[v4])(&v5, result, a2);
}

void sub_20BFCCF44(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_20BFCCF58(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;

  if ((*a2 & 7) != 0)
  {
    v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

void sub_20BFCCF7C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t sub_20BFCCFC0(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 48))
    return sub_20BFCD040(result, a3);
  *a2 = *a3;
  return result;
}

uint64_t sub_20BFCCFE0(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 48) != 1)
    return sub_20BFCD0A0(result, a3);
  *a2 = *a3;
  return result;
}

uint64_t sub_20BFCD004(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 48) != 2)
    return sub_20BFCD104(result, a3);
  *a2 = *a3;
  return result;
}

void sub_20BFCD028(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_20BFCD168(*a1, a2, a3);
}

uint64_t sub_20BFCD030(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  return sub_20BFCD248(*a1, a2, a3);
}

void sub_20BFCD038(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_20BFCD2FC(*a1, a2, a3);
}

uint64_t sub_20BFCD040(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C5244B8[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

uint64_t sub_20BFCD0A0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C5244B8[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 48) = 1;
  return a1;
}

uint64_t sub_20BFCD104(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C5244B8[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 48) = 2;
  return a1;
}

void sub_20BFCD168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;

  if (*(_DWORD *)(a1 + 48) == 3)
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v5 = *(_OWORD *)a3;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)a2 = v5;
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
  else
  {
    sub_20BFCD1CC(a1, (__int128 *)a3);
  }
}

uint64_t sub_20BFCD1CC(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C5244B8[v4])(&v7, a1);
  *(_DWORD *)(a1 + 48) = -1;
  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 48) = 3;
  return a1;
}

uint64_t sub_20BFCD248(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  unsigned int *v3;
  unsigned int v4;

  if (*(_DWORD *)(result + 48) != 4)
    return sub_20BFCD294(result, a3);
  if (a3 != a2)
  {
    if ((*a2 & 7) != 0)
    {
      v3 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    *a2 = *a3;
    *a3 = 0;
  }
  return result;
}

uint64_t sub_20BFCD294(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C5244B8[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *a2 = 0;
  *(_DWORD *)(a1 + 48) = 4;
  return a1;
}

void sub_20BFCD2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  void **v6;
  __int128 v7;

  if (*(_DWORD *)(a1 + 48) == 5)
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v5 = *(_OWORD *)a3;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)a2 = v5;
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
    v6 = (void **)(a2 + 24);
    if (*(char *)(a2 + 47) < 0)
      operator delete(*v6);
    v7 = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
    *(_OWORD *)v6 = v7;
    *(_BYTE *)(a3 + 47) = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    sub_20BFCD398(a1, (__int128 *)a3);
  }
}

uint64_t sub_20BFCD398(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  char v8;

  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C5244B8[v4])(&v8, a1);
  *(_DWORD *)(a1 + 48) = -1;
  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v6;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 48) = 5;
  return a1;
}

uint64_t sub_20BFCD42C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C5244B8[v2])(&v4, a1);
  *(_DWORD *)(a1 + 48) = -1;
  return a1;
}

uint64_t sub_20BFCD484(uint64_t a1, _QWORD *a2)
{
  if (*(_DWORD *)(a1 + 48))
    sub_20BFCD040(a1, a2);
  else
    *(_QWORD *)a1 = *a2;
  return a1;
}

uint64_t sub_20BFCD4C4(uint64_t a1, _QWORD *a2)
{
  if (*(_DWORD *)(a1 + 48) == 1)
    *(_QWORD *)a1 = *a2;
  else
    sub_20BFCD0A0(a1, a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_CanCreateNewLayerWithIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const char *v5;

  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
  {
    if (a2)
    {
      v5 = "cannot use empty identifier.";
      goto LABEL_12;
    }
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(a1))
  {
    if (a2)
    {
      v5 = "cannot use anonymous layer identifier.";
LABEL_12:
      MEMORY[0x212B929D0](a2, v5);
      return 0;
    }
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_IdentifierContainsArguments((char **)a1))
  {
    if (a2)
    {
      v5 = "cannot use arguments in the identifier.";
      goto LABEL_12;
    }
    return 0;
  }
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v2;
  uint64_t *EmptyString;
  const char *v4;
  int v5;
  size_t v6;
  size_t v7;
  size_t v9;
  const char *v10;

  v2 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFCE5F0();
  if ((*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
  if (*((char *)EmptyString + 23) >= 0)
    v4 = (const char *)EmptyString;
  else
    v4 = (const char *)*EmptyString;
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = strlen(v4);
  if (v6 < v7)
    return 0;
  v9 = v7;
  if (v5 >= 0)
    v10 = (const char *)a1;
  else
    v10 = *(const char **)a1;
  return strncmp(v10, v4, v9) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_IdentifierContainsArguments(char **a1)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v2;
  uint64_t *EmptyString;
  char *v4;
  char *v5;
  int v6;
  char *v7;
  int64_t v8;
  char *v9;
  char *v10;
  int v13;
  void *v14;
  char *v15;
  char *v16;

  v2 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFCE5F0();
  if ((*((_QWORD *)v2 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)v2 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
  v4 = (char *)*((unsigned __int8 *)a1 + 23);
  if ((char)v4 >= 0)
    v5 = (char *)a1;
  else
    v5 = *a1;
  v6 = *((char *)EmptyString + 23);
  if (v6 >= 0)
    v7 = (char *)EmptyString;
  else
    v7 = (char *)*EmptyString;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)EmptyString + 23);
  else
    v8 = EmptyString[1];
  if (!v8)
    return 1;
  if ((char)v4 < 0)
    v4 = a1[1];
  v9 = &v4[(_QWORD)v5];
  if ((uint64_t)v4 >= v8)
  {
    v13 = *v7;
    v14 = v5;
    do
    {
      v15 = &v4[-v8];
      if (v15 == (char *)-1)
        break;
      v16 = (char *)memchr(v14, v13, (size_t)(v15 + 1));
      if (!v16)
        break;
      v10 = v16;
      if (!memcmp(v16, v7, v8))
        return v10 != v9 && v10 - v5 != -1;
      v14 = v10 + 1;
      v4 = (char *)(v9 - (v10 + 1));
    }
    while ((uint64_t)v4 >= v8);
  }
  v10 = v9;
  return v10 != v9 && v10 - v5 != -1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ResolvePath(pxrInternal__aapl__pxrReserved__ *a1)
{
  uint64_t *Resolver;

  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  return pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_CanWriteLayerToPath(pxrInternal__aapl__pxrReserved__ *a1)
{
  uint64_t *Resolver;

  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  return pxrInternal__aapl__pxrReserved__::ArResolver::CanWriteAssetToPath((uint64_t)Resolver);
}

double pxrInternal__aapl__pxrReserved__::Sdf_ComputeFilePath@<D0>(pxrInternal__aapl__pxrReserved__ *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *Resolver;
  pxrInternal__aapl__pxrReserved__ *v4;
  double result;
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;

  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  v4 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
  {
    v7 = pxrInternal__aapl__pxrReserved__::ArGetResolver(v4);
    pxrInternal__aapl__pxrReserved__::ArResolver::ResolveForNewAsset((uint64_t)v7);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    result = *(double *)&v8;
    *(_OWORD *)a2 = v8;
    *(_QWORD *)(a2 + 16) = v9;
  }
  return result;
}

void sub_20BFCD8CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ComputeLayerModificationTimestamp(pxrInternal__aapl__pxrReserved__ *this@<X0>, _QWORD *a2@<X8>)
{
  const std::string *Identifier;
  pxrInternal__aapl__pxrReserved__ *v6;
  uint64_t *Resolver;
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  void *v11[2];
  uint64_t v12;

  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v10 = 0;
  Identifier = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(this);
  v6 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(Identifier, (uint64_t)v11, (uint64_t)__p);
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v6);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetResolvedPath(this);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetModificationTimestamp((uint64_t)Resolver);
  a2[1] = (char *)&off_24C524518 + 1;
  *a2 = v8;
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_20BFCD990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(const std::string *a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  uint64_t *EmptyString;
  char v8;
  const std::string *v9;
  int v10;
  char *v11;
  int64_t v12;
  int64_t size;
  std::string::size_type v14;
  char *v16;
  int v17;
  int64_t v18;
  std::string *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char v23;
  std::string v24;

  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFCE5F0();
  if ((*((_QWORD *)v6 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)v6 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  v8 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v8 >= 0)
    v9 = a1;
  else
    v9 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  v10 = *((char *)EmptyString + 23);
  if (v10 >= 0)
    v11 = (char *)EmptyString;
  else
    v11 = (char *)*EmptyString;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)EmptyString + 23);
  else
    v12 = EmptyString[1];
  if (v12)
  {
    if (v8 >= 0)
      size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    else
      size = a1->__r_.__value_.__l.__size_;
    if (size >= v12)
    {
      v16 = (char *)v9 + size;
      v17 = *v11;
      v18 = size;
      v19 = (std::string *)v9;
      do
      {
        v20 = v18 - v12;
        if (v20 == -1)
          break;
        v21 = (char *)memchr(v19, v17, v20 + 1);
        if (!v21)
          break;
        v22 = v21;
        if (!memcmp(v21, v11, v12))
        {
          if (v22 != v16)
          {
            v14 = v22 - (char *)v9;
            if (v22 - (char *)v9 != -1)
              goto LABEL_20;
          }
          break;
        }
        v19 = (std::string *)(v22 + 1);
        v18 = v16 - (v22 + 1);
      }
      while (v18 >= v12);
    }
    v14 = size;
  }
  else
  {
    v14 = 0;
  }
LABEL_20:
  std::string::basic_string(&v24, a1, 0, v14, (std::allocator<char> *)&v23);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::string *)a2 = v24;
  std::string::basic_string(&v24, a1, v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(std::string *)a3 = v24;
  return 1;
}

void pxrInternal__aapl__pxrReserved__::Sdf_ComputeExternalAssetModificationTimestamps(pxrInternal__aapl__pxrReserved__ *this@<X0>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__ *ExternalAssetDependencies;
  char **v5;
  uint64_t *Resolver;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  char **v10;
  BOOL v11;
  void *__p[2];
  char *v13;
  uint64_t v14;
  char **v15;
  char *v16[2];

  *(_QWORD *)a2 = 0;
  ExternalAssetDependencies = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetExternalAssetDependencies((uint64_t *)&v15, this);
  v5 = v15;
  if (v15 != v16)
  {
    do
    {
      Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(ExternalAssetDependencies);
      if (*((char *)v5 + 55) < 0)
      {
        sub_20BDDBFAC(__p, v5[4], (unint64_t)v5[5]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v5 + 2);
        v13 = v5[6];
      }
      pxrInternal__aapl__pxrReserved__::ArResolver::GetModificationTimestamp((uint64_t)Resolver);
      v14 = v7;
      v8 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (__int128 *)v5 + 2);
      ExternalAssetDependencies = (pxrInternal__aapl__pxrReserved__ *)sub_20BFCDCA4(v8, &v14);
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
      v9 = v5[1];
      if (v9)
      {
        do
        {
          v10 = (char **)v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (char **)v5[2];
          v11 = *v10 == (char *)v5;
          v5 = v10;
        }
        while (!v11);
      }
      v5 = v10;
    }
    while (v10 != v16);
  }
  sub_20BDECAB8((uint64_t)&v15, v16[0]);
}

void sub_20BFCDC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  _QWORD ***v18;

  sub_20BF49F14(v18, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFCDCA4(_QWORD *a1, _QWORD *a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = (char *)&off_24C524518 + 1;
  *a1 = *a2;
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BFCDD34(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20BDC12F4(a1);
}

std::string *pxrInternal__aapl__pxrReserved__::Sdf_ComputeAssetInfoFromIdentifier(uint64_t a1, void **a2, __int128 *a3, uint64_t *a4)
{
  std::string *v8;
  const char *v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t *v13;
  pxrInternal__aapl__pxrReserved__ *v14;
  pxrInternal__aapl__pxrReserved__ *v15;
  unint64_t v16;
  void **p_data;
  uint64_t *Resolver;
  uint64_t *v19;
  const char *v20;
  char *v21;
  std::string *v22;
  std::string::__raw *v23;
  std::string *v24;
  std::string *v25;
  std::string *p_str;
  void *v28[2];
  uint64_t v29;
  void *v30[2];
  uint64_t v31;
  std::string __dst;
  std::string v33;
  std::string __p;
  _QWORD v35[3];
  std::string __str;
  std::string v37;
  std::string v38;
  _QWORD v39[3];

  v39[2] = *MEMORY[0x24BDAC8D0];
  v8 = (std::string *)operator new(0xA0uLL);
  v8[6].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&v8->__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&v8->__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v8[1].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&v8[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&v8[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v8[3].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&v8[4].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&v8[4].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v8[5].__r_.__value_.__r.__words[1] = 0u;
  sub_20BFCF798((char *)&__str, a3);
  if (sub_20BFCE180(0))
  {
    if (*(char *)(a1 + 23) >= 0)
      v11 = a1;
    else
      v11 = *(_QWORD *)a1;
    if (*((char *)a2 + 23) >= 0)
      v12 = a2;
    else
      v12 = *a2;
    if (*((char *)a4 + 23) >= 0)
      v13 = a4;
    else
      v13 = (uint64_t *)*a4;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_ComputeAssetInfoFromIdentifier('%s', '%s', '%s')\n", v9, v10, v11, v12, v13);
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(a1))
  {
    v14 = (pxrInternal__aapl__pxrReserved__ *)std::string::operator=(v8, (const std::string *)a1);
    goto LABEL_38;
  }
  std::string::operator=(v8, (const std::string *)a1);
  v30[0] = 0;
  v30[1] = 0;
  v31 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  v15 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(v8, (uint64_t)v30, (uint64_t)v28);
  if (*((char *)a2 + 23) < 0)
  {
    v16 = (unint64_t)a2[1];
    if (v16)
    {
      v15 = (pxrInternal__aapl__pxrReserved__ *)sub_20BDDBFAC(&__dst, *a2, v16);
      goto LABEL_20;
    }
LABEL_19:
    pxrInternal__aapl__pxrReserved__::Sdf_ComputeFilePath((pxrInternal__aapl__pxrReserved__ *)v30, (uint64_t)&__dst);
    goto LABEL_20;
  }
  if (!*((_BYTE *)a2 + 23))
    goto LABEL_19;
  __dst = *(std::string *)a2;
LABEL_20:
  p_data = (void **)&v8[1].__r_.__value_.__l.__data_;
  if (SHIBYTE(v8[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(*p_data);
  *(_OWORD *)p_data = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  v8[1].__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__r.__words[2];
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v15);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetAssetInfo((uint64_t)Resolver);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str = __dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  v37 = v33;
  *((_BYTE *)&v33.__r_.__value_.__s + 23) = 0;
  v33.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  v38 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_20BF4B5D8(v39, v35);
  v14 = (pxrInternal__aapl__pxrReserved__ *)sub_20BF4C2D8((uint64_t)v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29) < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);
LABEL_38:
  v19 = pxrInternal__aapl__pxrReserved__::ArGetResolver(v14);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetCurrentContext((uint64_t *)&__dst, (pxrInternal__aapl__pxrReserved__::ArResolver *)v19);
  sub_20BE10AE4((void **)&v8[2].__r_.__value_.__l.__data_);
  v8[2] = __dst;
  memset(&__dst, 0, sizeof(__dst));
  v30[0] = &__dst;
  sub_20BDE9EB0((void ***)v30);
  std::string::operator=(v8 + 3, &__str);
  std::string::operator=(v8 + 4, &v37);
  std::string::operator=(v8 + 5, &v38);
  sub_20BF4A9BC(v8[6].__r_.__value_.__r.__words, v39);
  if (sub_20BFCE180(0))
  {
    v22 = v8;
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
      v22 = (std::string *)v8->__r_.__value_.__r.__words[0];
    v23 = (std::string::__raw *)&v8[1];
    if (SHIBYTE(v8[1].__r_.__value_.__r.__words[2]) < 0)
      v23 = (std::string::__raw *)v23->__words[0];
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v38;
    else
      v24 = (std::string *)v38.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v37;
    else
      v25 = (std::string *)v37.__r_.__value_.__r.__words[0];
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_ComputeAssetInfoFromIdentifier:\n  assetInfo->identifier = '%s'\n  assetInfo->resolvedPath = '%s'\n  assetInfo->repoPath = '%s'\n  assetInfo->assetName = '%s'\n  assetInfo->version = '%s'\n", v20, v21, v22, v23, v24, v25, p_str);
  }
  sub_20BF4C2D8((uint64_t)v39);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v8;
}

void sub_20BFCE124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  sub_20BFC37A8(v26 - 144);
  _Unwind_Resume(a1);
}

BOOL sub_20BFCE180(int a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_20BFCFA44();
  v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    v5 = v2;
    v6 = sub_20BFCFA44();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), off_24C5245E0[a1]);
    v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

void pxrInternal__aapl__pxrReserved__::Sdf_ComputeAnonLayerIdentifier(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  void *v9;
  const char *v10;
  const char *v11;
  char *v12;
  char *v13;
  const char *v14;
  char *v15;
  void **v16;
  int64_t v17;
  std::string *p_dst;
  std::string::size_type size;
  int64_t v20;
  unint64_t v21;
  char *v22;
  int v23;
  int64_t v24;
  std::string *v25;
  int64_t v26;
  char *v27;
  char *v28;
  char *v29;
  _BYTE *v30;
  _BYTE *v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string::size_type v34;
  char *v35;
  _BYTE *v36;
  _BYTE *v37;
  void *__p[2];
  unsigned __int8 v39;
  std::string __dst;
  char *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  char v45;

  if (!a2)
  {
    v41 = "sdf/assetPathResolver.cpp";
    v42 = "Sdf_ComputeAnonLayerIdentifier";
    v43 = 225;
    v44 = "string pxrInternal__aapl__pxrReserved__::Sdf_ComputeAnonLayerIdentifier(const string &, const SdfLayer *)";
    v45 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v41, "layer", 0);
  }
  v6 = *(unsigned __int8 *)(a1 + 23);
  v7 = (char)v6;
  v9 = *(void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  if (v7 >= 0)
    v10 = (const char *)a1;
  else
    v10 = *(const char **)a1;
  if (v6 >= 2)
  {
    v11 = &v10[v6];
    v12 = (char *)v10;
    do
    {
      v13 = (char *)memchr(v12, 37, v6 - 1);
      if (!v13)
        break;
      if (*(_WORD *)v13 == 28197)
      {
        if (v13 != v11 && v13 - v10 != -1)
        {
          v41 = "sdf/assetPathResolver.cpp";
          v42 = "Sdf_ComputeAnonLayerIdentifier";
          v43 = 228;
          v44 = "string pxrInternal__aapl__pxrReserved__::Sdf_ComputeAnonLayerIdentifier(const string &, const SdfLayer *)";
          v45 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Anon layer contains invalid character sequence '%%n': %s", v10);
          if (*(char *)(a1 + 23) < 0)
          {
            sub_20BDDBFAC((_BYTE *)a3, *(void **)a1, *(_QWORD *)(a1 + 8));
          }
          else
          {
            *(_OWORD *)a3 = *(_OWORD *)a1;
            *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
          }
          return;
        }
        break;
      }
      v12 = v13 + 1;
      v6 = v11 - v12;
    }
    while (v11 - v12 >= 2);
  }
  if (v7 < 0)
    sub_20BDDBFAC(&__dst, v9, v8);
  else
    __dst = *(std::string *)a1;
  sub_20BDDC0E4(__p, "anon:%p");
  if ((v39 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((v39 & 0x80u) == 0)
    v17 = v39;
  else
    v17 = (int64_t)__p[1];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  if (v17)
  {
    if ((uint64_t)size >= v17)
    {
      v22 = (char *)p_dst + size;
      v23 = *(char *)v16;
      v24 = size;
      v25 = p_dst;
      do
      {
        v26 = v24 - v17;
        if (v26 == -1)
          break;
        v27 = (char *)memchr(v25, v23, v26 + 1);
        if (!v27)
          break;
        v28 = v27;
        if (!memcmp(v27, v16, v17))
        {
          if (v28 != v22)
          {
            v20 = v28 - (char *)p_dst;
            if (v28 - (char *)p_dst != -1)
              goto LABEL_36;
          }
          break;
        }
        v25 = (std::string *)(v28 + 1);
        v24 = v22 - (v28 + 1);
      }
      while (v24 >= v17);
    }
    v41 = "sdf/assetPathResolver.cpp";
    v42 = "Sdf_ComputeAnonLayerIdentifier";
    v43 = 239;
    v44 = "string pxrInternal__aapl__pxrReserved__::Sdf_ComputeAnonLayerIdentifier(const string &, const SdfLayer *)";
    v45 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Could not find expected prefix:\"anon:%%p\" in anonymous layer identifier.");
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a3, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)a1;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    v20 = 0;
LABEL_36:
    v21 = v17 + v20 - 1;
    if (size >= v21)
    {
      v29 = (char *)p_dst + v21;
      v30 = (char *)p_dst + size;
      while (1)
      {
        v15 = (char *)(v30 - v29);
        if (v30 - v29 < 1)
          break;
        v31 = memchr(v29, 37, (size_t)v15);
        if (!v31)
          break;
        if (*v31 == 37)
        {
          if (v31 != v30)
          {
            v32 = v31 - (_BYTE *)p_dst;
            if (v31 - (_BYTE *)p_dst != -1)
            {
LABEL_60:
              std::string::insert(&__dst, v32, "%");
              v33 = v32 + 2;
              v34 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_dst = &__dst;
              else
                p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v34 = __dst.__r_.__value_.__l.__size_;
              if (v34 >= v33)
              {
                v35 = (char *)p_dst + v33;
                v36 = (char *)p_dst + v34;
                while (1)
                {
                  v15 = (char *)(v36 - v35);
                  if (v36 - v35 < 1)
                    break;
                  v37 = memchr(v35, 37, (size_t)v15);
                  if (!v37)
                    break;
                  if (*v37 == 37)
                  {
                    if (v37 != v36)
                    {
                      v32 = v37 - (_BYTE *)p_dst;
                      if (v37 - (_BYTE *)p_dst != -1)
                        goto LABEL_60;
                    }
                    goto LABEL_37;
                  }
                  v35 = v37 + 1;
                }
              }
            }
          }
          break;
        }
        v29 = v31 + 1;
      }
    }
LABEL_37:
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)p_dst, v14, v15, a2);
  }
  if ((char)v39 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20BFCE5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20BFCE5F0()
{
  char *v0;
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  void **v24;
  char v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_2549858A8);
  if (!v0)
  {
    v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "anon:", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, ":SDF_FORMAT_ARGS:", 0);
    v3 = *(unsigned int **)v0;
    v26 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        v26 = v4;
    }
    v6 = (unsigned int *)*v2;
    v27 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v27 = v7;
    }
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    *((_QWORD *)v0 + 4) = 0;
    v24 = (void **)(v0 + 16);
    v25 = 0;
    v9 = operator new(0x10uLL);
    v10 = 0;
    *((_QWORD *)v0 + 2) = v9;
    *((_QWORD *)v0 + 3) = v9;
    *((_QWORD *)v0 + 4) = v9 + 2;
    do
    {
      v11 = (&v26)[v10];
      *v9 = v11;
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v10;
      ++v9;
    }
    while (v10 != 2);
    v14 = (unsigned int **)&v28;
    *((_QWORD *)v0 + 3) = v9;
    do
    {
      v16 = (uint64_t)*--v14;
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    while (v14 != &v26);
    while (!__ldaxr(&qword_2549858A8))
    {
      if (!__stlxr((unint64_t)v0, &qword_2549858A8))
        return (unint64_t)v0;
    }
    __clrex();
    v24 = (void **)(v0 + 16);
    sub_20BEEB2B8(&v24);
    if ((*v2 & 7) != 0)
    {
      v20 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v22 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    operator delete(v0);
    return atomic_load(&qword_2549858A8);
  }
  return (unint64_t)v0;
}

void sub_20BFCE800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  sub_20BEEB2B8(&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

std::string *pxrInternal__aapl__pxrReserved__::Sdf_GetAnonLayerDisplayName@<X0>(std::string *a1@<X0>, std::string *a2@<X8>)
{
  const std::string *v2;
  int v4;
  const std::string *v5;
  size_t size;
  size_t v7;
  size_t v8;
  std::string *v9;
  std::string *result;
  std::string *v11;
  std::string *v12;
  const std::string *v13;
  size_t v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  char v18;

  v2 = a1;
  v4 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  v5 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  size = a1->__r_.__value_.__l.__size_;
  v7 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v4 >= 0)
  {
    v8 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else
  {
    a1 = (std::string *)a1->__r_.__value_.__r.__words[0];
    v8 = size;
  }
  v9 = (std::string *)((char *)a1 + v8);
  result = (std::string *)memchr(a1, 58, v8);
  if (result)
    v11 = result;
  else
    v11 = v9;
  if (v4 < 0)
  {
    v12 = (std::string *)((char *)v5 + size);
    v13 = v5;
    v14 = size;
  }
  else
  {
    v12 = (std::string *)((char *)v2 + v7);
    v13 = v2;
    v14 = v7;
  }
  if (v11 != v12)
  {
    v15 = (std::string *)((char *)v13 + v14);
    result = (std::string *)memchr((char *)&v11->__r_.__value_.__l.__data_ + 1, 58, (char *)v13 + v14 - ((char *)&v11->__r_.__value_.__l.__data_ + 1));
    v16 = result ? result : v15;
    if ((v7 & 0x80) != 0)
    {
      v17 = (std::string *)((char *)v5 + size);
    }
    else
    {
      v17 = (std::string *)((char *)v2 + v7);
      v5 = v2;
    }
    if (v16 != v17)
      return std::string::basic_string(a2, v2, (char *)v16 - (char *)v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v18);
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Sdf_GetAnonLayerIdentifierTemplate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v3;
  uint64_t *EmptyString;
  size_t v5;
  std::string *v6;
  const void *v7;
  std::string *v8;
  std::string::size_type size;
  std::string *v10;
  void *__p[2];
  char v12;
  std::string v13;
  std::string v14;
  std::string __dst;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 23))
    {
      __dst = *(std::string *)a1;
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (*(_QWORD *)(a1 + 8))
  {
LABEL_5:
    pxrInternal__aapl__pxrReserved__::TfStringTrim(" \n\t\r", (const std::string *)a1, &__dst);
    goto LABEL_6;
  }
  sub_20BDDBFAC(&__dst, *(void **)a1, 0);
LABEL_6:
  sub_20BDDC0E4(&v13, "%");
  sub_20BDDC0E4(__p, "%%");
  pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)&__dst, (unsigned __int8 *)&v13, (unsigned __int8 *)__p, &v14);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  __dst = v14;
  *((_BYTE *)&v14.__r_.__value_.__s + 23) = 0;
  v14.__r_.__value_.__s.__data_[0] = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v3 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFCE5F0();
  if ((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  if (*((char *)EmptyString + 23) >= 0)
    v5 = *((unsigned __int8 *)EmptyString + 23);
  else
    v5 = EmptyString[1];
  v6 = &v14;
  sub_20BDF6BDC((uint64_t)&v14, v5 + 2);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if (*((char *)EmptyString + 23) >= 0)
      v7 = EmptyString;
    else
      v7 = (const void *)*EmptyString;
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "%p");
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)&__dst.__r_.__value_.__s + 23))
    {
      v13 = __dst;
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (__dst.__r_.__value_.__l.__size_)
  {
LABEL_29:
    std::operator+<char>();
    goto LABEL_30;
  }
  sub_20BDDBFAC(&v13, __dst.__r_.__value_.__l.__data_, 0);
LABEL_30:
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v13;
  else
    v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    size = v13.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v14, (const std::string::value_type *)v8, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20BFCEBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(uint64_t a1@<X0>, _QWORD *a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v6;
  const char *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string v24;

  v6 = *(_QWORD *)(sub_20BFCE5F0() + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v6)
  {
    v7 = (const char *)(v6 + 16);
    if (*(char *)(v6 + 39) < 0)
      v7 = *(const char **)v7;
  }
  else
  {
    v7 = "";
  }
  memset(&v24, 0, sizeof(v24));
  v10 = (_QWORD *)*a2;
  v8 = a2 + 1;
  v9 = v10;
  if (v10 != v8)
  {
    do
    {
      std::string::append(&v24, v7);
      v11 = *((char *)v9 + 55);
      if (v11 >= 0)
        v12 = (const std::string::value_type *)(v9 + 4);
      else
        v12 = (const std::string::value_type *)v9[4];
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)v9 + 55);
      else
        v13 = v9[5];
      std::string::append(&v24, v12, v13);
      std::string::push_back(&v24, 61);
      v14 = *((char *)v9 + 79);
      if (v14 >= 0)
        v15 = (const std::string::value_type *)(v9 + 7);
      else
        v15 = (const std::string::value_type *)v9[7];
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v9 + 79);
      else
        v16 = v9[8];
      std::string::append(&v24, v15, v16);
      v17 = (_QWORD *)v9[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v9[2];
          v19 = *v18 == (_QWORD)v9;
          v9 = v18;
        }
        while (!v19);
      }
      v7 = "&";
      v9 = v18;
    }
    while (v18 != v8);
  }
  v20 = *(char *)(a1 + 23);
  if (v20 >= 0)
    v21 = (const std::string::value_type *)a1;
  else
    v21 = *(const std::string::value_type **)a1;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(a1 + 23);
  else
    v22 = *(_QWORD *)(a1 + 8);
  v23 = std::string::insert(&v24, 0, v21, v22);
  *a3 = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_20BFCEDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_StripIdentifierArgumentsIfPresent(const std::string *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t *EmptyString;
  char *size;
  std::string::size_type v7;
  int v8;
  char *v9;
  int64_t v10;
  uint64_t result;
  std::string::size_type v12;
  char *v13;
  int v14;
  void *v15;
  char *v16;
  uint64_t v17;
  char v18;
  std::string v19;

  v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFCE5F0();
  if ((*((_QWORD *)v4 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)v4 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  size = (char *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0)
    v7 = (std::string::size_type)a1;
  else
    v7 = a1->__r_.__value_.__r.__words[0];
  v8 = *((char *)EmptyString + 23);
  if (v8 >= 0)
    v9 = (char *)EmptyString;
  else
    v9 = (char *)*EmptyString;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)EmptyString + 23);
  else
    v10 = EmptyString[1];
  if (v10)
  {
    if ((char)size < 0)
      size = (char *)a1->__r_.__value_.__l.__size_;
    if ((uint64_t)size >= v10)
    {
      v13 = &size[v7];
      v14 = *v9;
      v15 = (void *)v7;
      do
      {
        v16 = &size[-v10];
        if (v16 == (char *)-1)
          break;
        result = (uint64_t)memchr(v15, v14, (size_t)(v16 + 1));
        if (!result)
          return result;
        v17 = result;
        result = memcmp((const void *)result, v9, v10);
        if (!(_DWORD)result)
        {
          if ((char *)v17 != v13)
          {
            v12 = v17 - v7;
            if (v17 - v7 != -1)
              goto LABEL_19;
          }
          return result;
        }
        v15 = (void *)(v17 + 1);
        size = &v13[-v17 - 1];
      }
      while ((uint64_t)size >= v10);
    }
    return 0;
  }
  else
  {
    v12 = 0;
LABEL_19:
    std::string::basic_string(&v19, a1, 0, v12, (std::allocator<char> *)&v18);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v19;
    return 1;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(const std::string *a1, __int128 *a2, uint64_t a3)
{
  std::string::size_type size;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  std::string::size_type v11;
  unint64_t v12;
  unint64_t v13;
  std::string::size_type v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string::size_type v18;
  uint64_t *v19;
  void **v20;
  int v21;
  uint64_t *v22;
  void **v23;
  std::string *p_p;
  std::string __p;
  void *v26[2];
  uint64_t v27;
  std::string v28;
  uint64_t *v29;
  _QWORD *v30[2];
  std::string v31;
  const char *v32;
  char v33;
  __int128 *v34[5];

  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  memset(&__p, 0, sizeof(__p));
  pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(a1, (uint64_t)v26, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_10;
  }
  else
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_10;
  }
  v6 = *(_QWORD *)(sub_20BFCE5F0() + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (*(char *)(v6 + 39) < 0)
      v6 = *(_QWORD *)(v6 + 24);
    else
      v6 = *(unsigned __int8 *)(v6 + 39);
  }
  if (size == v6)
  {
LABEL_10:
    sub_20BDE9D48(a3, *(_QWORD **)(a3 + 8));
    *(_QWORD *)a3 = a3 + 8;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 8) = 0;
LABEL_11:
    v7 = *((_QWORD *)a2 + 2);
    v8 = *a2;
    *a2 = *(_OWORD *)v26;
    *((_QWORD *)a2 + 2) = v27;
    *(_OWORD *)v26 = v8;
    v27 = v7;
    v9 = 1;
    goto LABEL_12;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v11 = __p.__r_.__value_.__l.__size_;
  v12 = *(_QWORD *)(sub_20BFCE5F0() + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v12)
  {
    if (*(char *)(v12 + 39) < 0)
      v12 = *(_QWORD *)(v12 + 24);
    else
      v12 = *(unsigned __int8 *)(v12 + 39);
  }
  if (v11 > v12
    || (v31.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/assetPathResolver.cpp",
        v31.__r_.__value_.__l.__size_ = (std::string::size_type)"Sdf_DecodeArguments",
        v31.__r_.__value_.__r.__words[2] = 333,
        v32 = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_DecodeArguments(const string &, SdfLayer::FileFormatArguments *)",
        v33 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v31, "argStringLength > _Tokens->ArgsDelimiter.size()", 0) & 1) != 0))
  {
    v30[0] = 0;
    v30[1] = 0;
    v29 = (uint64_t *)v30;
    v13 = *(_QWORD *)(sub_20BFCE5F0() + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v13)
    {
      if (*(char *)(v13 + 39) < 0)
        v14 = *(_QWORD *)(v13 + 24);
      else
        v14 = *(unsigned __int8 *)(v13 + 39);
    }
    else
    {
      v14 = 0;
    }
    while (1)
    {
      if (v14 >= v11)
      {
LABEL_43:
        sub_20BF07C64((uint64_t *)a3, (uint64_t)&v29);
        sub_20BDE9D48((uint64_t)&v29, v30[0]);
        goto LABEL_11;
      }
      v15 = std::string::find(&__p, 61, v14);
      if (v15 == -1)
        break;
      v16 = v15;
      std::string::basic_string(&v31, &__p, v14, v15 - v14, (std::allocator<char> *)&v28);
      v14 = v16 + 1;
      v17 = std::string::find(&__p, 38, v16 + 1);
      if (v17 == -1)
      {
        std::string::basic_string(&v28, &__p, v16 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v34);
        v34[0] = (__int128 *)&v31;
        v22 = sub_20BDDDFDC(&v29, (const void **)&v31.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, v34);
        v23 = (void **)(v22 + 7);
        if (*((char *)v22 + 79) < 0)
          operator delete(*v23);
        *(std::string *)v23 = v28;
        v21 = 3;
      }
      else
      {
        v18 = v17;
        std::string::basic_string(&v28, &__p, v14, v17 - v14, (std::allocator<char> *)v34);
        v34[0] = (__int128 *)&v31;
        v19 = sub_20BDDDFDC(&v29, (const void **)&v31.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, v34);
        v20 = (void **)(v19 + 7);
        if (*((char *)v19 + 79) < 0)
          operator delete(*v20);
        v21 = 0;
        *(std::string *)v20 = v28;
        v14 = v18 + 1;
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v31.__r_.__value_.__l.__data_);
        if (v21)
          goto LABEL_43;
      }
      else if (v21)
      {
        goto LABEL_43;
      }
    }
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/assetPathResolver.cpp";
    v31.__r_.__value_.__l.__size_ = (std::string::size_type)"Sdf_DecodeArguments";
    v31.__r_.__value_.__r.__words[2] = 344;
    v32 = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_DecodeArguments(const string &, SdfLayer::FileFormatArguments *)";
    v33 = 0;
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid file format arguments: %s", (const char *)p_p);
    sub_20BDE9D48((uint64_t)&v29, v30[0]);
  }
  v9 = 0;
LABEL_12:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
  return v9;
}

void sub_20BFCF2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,_QWORD *a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  sub_20BDE9D48((uint64_t)&a28, a29);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_GetLayerDisplayName(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  std::string v3;
  std::string __p;
  void *v5;
  char v6;
  void *v7[2];
  uint64_t v8;
  std::string v9;

  memset(&v9, 0, sizeof(v9));
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(a1, (uint64_t)&v9, (uint64_t)v7);
  if (pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier((uint64_t)&v9))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_GetAnonLayerDisplayName(&v9, a2);
  }
  else if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)&v9))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)&v9, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfGetBaseName(&__p, &v3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v3;
    pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)&__p, a2);
    if (v6 < 0)
      operator delete(v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfGetBaseName(&v9, a2);
  }
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_20BFCF440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20BE930F8((uint64_t)va);
  if (*(char *)(v5 - 41) < 0)
    operator delete(*(void **)(v5 - 64));
  if (*(char *)(v5 - 17) < 0)
    operator delete(*(void **)(v5 - 40));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_GetExtension(const std::string *a1)
{
  std::string *v2;
  int v3;
  _BOOL8 IsAnonLayerIdentifier;
  void **v5;
  void **p_data;
  int v7;
  std::string *v8;
  uint64_t *Resolver;
  std::string __p;
  void *v11[2];
  uint64_t v12;

  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  v2 = (std::string *)v11;
  v3 = pxrInternal__aapl__pxrReserved__::Sdf_StripIdentifierArgumentsIfPresent(a1, (uint64_t)v11);
  if (!v3)
    v2 = (std::string *)a1;
  IsAnonLayerIdentifier = pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier((uint64_t)v2);
  if (IsAnonLayerIdentifier)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_GetAnonLayerDisplayName(v2, &__p);
    pxrInternal__aapl__pxrReserved__::Sdf_GetExtension(&__p);
    goto LABEL_17;
  }
  v5 = v11;
  if (v3)
    p_data = v11;
  else
    p_data = (void **)&a1->__r_.__value_.__l.__data_;
  v7 = *((char *)p_data + 23);
  if (v7 < 0)
  {
    if (!v3)
      v5 = (void **)&a1->__r_.__value_.__l.__data_;
    if (!v5[1])
      goto LABEL_19;
    v8 = (std::string *)v2->__r_.__value_.__r.__words[0];
  }
  else
  {
    v8 = v2;
    if (!v7)
      goto LABEL_19;
  }
  if (v8->__r_.__value_.__s.__data_[0] != 46)
  {
LABEL_19:
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)IsAnonLayerIdentifier);
    pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
    goto LABEL_20;
  }
  std::operator+<char>();
  pxrInternal__aapl__pxrReserved__::Sdf_GetExtension(&__p);
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_20:
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_20BFCF590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_IsPackageOrPackagedLayer(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v2;
  uint64_t *FileFormat;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  uint64_t Identifier;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v2);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v4);
  return pxrInternal__aapl__pxrReserved__::Sdf_IsPackageOrPackagedLayer(FileFormat, Identifier);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_IsPackageOrPackagedLayer(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_20BFCF6F4(a1);
  return ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3) & 1) != 0
      || pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(a2);
}

uint64_t sub_20BFCF650(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;
  _QWORD v8[4];
  char v9;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::SdfLayer>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrReserved__"
            "::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::SdfLayer]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CABC3B0 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t sub_20BFCF6F4(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;
  _QWORD v8[4];
  char v9;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, con"
            "st pxrInternal__aapl__pxrReserved__::SdfFileFormat>::operator->() const [PtrTemplate = pxrInternal__aapl__px"
            "rReserved__::TfWeakPtr, Type = const pxrInternal__aapl__pxrReserved__::SdfFileFormat]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAAFCE6 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

char *sub_20BFCF798(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_20BDDBFAC(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  sub_20BF4C6D0((_QWORD *)__dst + 9, (_QWORD *)a2 + 9);
  return __dst;
}

void sub_20BFCF858(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFCF8A4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_20BFCF8B4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BFCF8C0()
{
  return 1;
}

unint64_t sub_20BFCF8C8(double *a1)
{
  double v1;

  v1 = *a1;
  if (*a1 == 0.0)
    v1 = 0.0;
  return bswap64(0x9E3779B97F4A7C55 * *(_QWORD *)&v1);
}

BOOL sub_20BFCF8F8(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL sub_20BFCF934(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20BFCF974()
{
  return 0;
}

_QWORD *sub_20BFCF980(uint64_t a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric((uint64_t)&unk_24C5245D0, a1, a2);
}

void *sub_20BFCF994()
{
  return &unk_24C5245D0;
}

uint64_t sub_20BFCF9A0()
{
  return 0;
}

uint64_t sub_20BFCF9A8()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BFCF9B4()
{
  return 0;
}

uint64_t sub_20BFCF9BC()
{
  return 0;
}

BOOL sub_20BFCF9C4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAAFCB4 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BFCF9FC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C5245D0, a2, a3);
}

void *sub_20BFCFA1C()
{
  return &unk_24C5245D0;
}

_QWORD *sub_20BFCFA2C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_24C524518 + 1;
  return result;
}

uint64_t sub_20BFCFA44()
{
  unsigned __int8 v0;
  _QWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25473B428);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473B428))
  {
    v2 = operator new(0x14uLL);
    *v2 = 0;
    v2[1] = 0;
    *((_DWORD *)v2 + 4) = 0;
    qword_25473B420 = (uint64_t)v2;
    __cxa_guard_release(&qword_25473B428);
  }
  return qword_25473B420;
}

void sub_20BFCFAA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473B428);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  std::string v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAAFD34 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  v2 = std::string::insert(&v14, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v15, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *)operator new(0x60uLL);
      pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::Sdf_ChangeManager(v10);
      v12 = atomic_load(a1);
      if (v12)
      {
        if (v10 != (pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *)v12)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 84;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeMana"
                "ger>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v11);
        }
      }
      else
      {
        do
          v13 = __ldaxr(a1);
        while (__stlxr((unint64_t)v10, a1));
        if (v13)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 88;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeMana"
                "ger>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v11, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager*> &)::isInitializing);
  }
  v6 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_17Sdf_ChangeManagerEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20BFCFCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManage"
            "r>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::DeleteInstance()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *i;
  unint64_t v1;
  void *v2;

  for (i = (pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
        i;
        i = (pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *)v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    if ((pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *)v1 == i)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::~Sdf_ChangeManager(i);
        operator delete(v2);
        return;
      }
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
}

double pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data::_Data(pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data *this)
{
  double result;

  *((_QWORD *)this + 6) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 6) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_SendNoticesForChangeList(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v5;
  _BOOL8 updated;
  unsigned int *v7;
  uint64_t Entry;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  __int16 v17;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v18;
  uint64_t Identifier;
  void (**v20)(pxrInternal__aapl__pxrReserved__::SdfNotice::LayerInfoDidChange *__hidden);
  unint64_t v21;

  v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
  updated = pxrInternal__aapl__pxrReserved__::SdfLayer::_UpdateLastDirtinessState(v5);
  if (updated)
  {
    v20 = (void (**)(pxrInternal__aapl__pxrReserved__::SdfNotice::LayerInfoDidChange *__hidden))&unk_24C529600;
    sub_20BFD0074(&v20, a2);
    pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDirtinessChanged::~LayerDirtinessChanged((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDirtinessChanged *)&v20);
  }
  v7 = (unsigned int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)updated);
  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::FindEntry((uint64_t *)a3, v7);
  v9 = *(_QWORD *)a3;
  if (*(_DWORD *)(a3 + 204) < 2u)
    v9 = a3;
  if (Entry != v9 + 200 * *(unsigned int *)(a3 + 200))
  {
    v10 = Entry;
    v11 = (unint64_t *)(Entry + 8);
    if (*(_DWORD *)(Entry + 132) >= 4u)
      v11 = (unint64_t *)*v11;
    v12 = *(_DWORD *)(Entry + 128);
    if (v12)
    {
      v13 = &v11[5 * v12];
      do
      {
        v20 = off_24C5293D8;
        v14 = *v11;
        v21 = v14;
        if ((v14 & 7) != 0)
        {
          v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 2, v15));
          if ((v16 & 1) == 0)
            v21 &= 0xFFFFFFFFFFFFFFF8;
        }
        sub_20BFD0074(&v20, a2);
        pxrInternal__aapl__pxrReserved__::SdfNotice::LayerInfoDidChange::~LayerInfoDidChange((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerInfoDidChange *)&v20);
        v11 += 5;
      }
      while (v11 != v13);
    }
    LOBYTE(v17) = *(_WORD *)(v10 + 192);
    if ((*(_WORD *)(v10 + 192) & 1) != 0)
    {
      v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v18);
      pxrInternal__aapl__pxrReserved__::SdfNotice::LayerIdentifierDidChange::LayerIdentifierDidChange(&v20, v10 + 168, Identifier);
      sub_20BFD0074(&v20, a2);
      pxrInternal__aapl__pxrReserved__::SdfNotice::LayerIdentifierDidChange::~LayerIdentifierDidChange((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerIdentifierDidChange *)&v20);
      v17 = *(_WORD *)(v10 + 192);
    }
    if ((v17 & 4) != 0)
    {
      v20 = (void (**)(pxrInternal__aapl__pxrReserved__::SdfNotice::LayerInfoDidChange *__hidden))&unk_24C529558;
      sub_20BFD0074(&v20, a2);
      pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReplaceContent::~LayerDidReplaceContent((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReplaceContent *)&v20);
      v17 = *(_WORD *)(v10 + 192);
    }
    if ((v17 & 8) != 0)
    {
      v20 = (void (**)(pxrInternal__aapl__pxrReserved__::SdfNotice::LayerInfoDidChange *__hidden))&unk_24C529590;
      sub_20BFD0074(&v20, a2);
      pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReloadContent::~LayerDidReloadContent((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReloadContent *)&v20);
    }
  }
}

void sub_20BFD0020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReloadContent::~LayerDidReloadContent((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReloadContent *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFD0074(_QWORD *a1, uint64_t *a2)
{
  uint64_t (*v4)(uint64_t *);
  char v5;
  const std::type_info *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;

  v4 = sub_20BFD2F78(a2);
  if (v5 & 1 | (unint64_t)v4)
  {
    v6 = (const std::type_info *)(sub_20BFCF650(a2) + 16);
    v8 = a2[1];
    v7 = a2 + 1;
    if (v8)
    {
      v9 = sub_20BEB47BC(v7);
      v10 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    }
    else
    {
      v10 = 0;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
    v11 = (void *)MEMORY[0x24BEDB7C8];
  }
  return pxrInternal__aapl__pxrReserved__::TfNotice::_Send(a1, v6, v10, (uint64_t)v11);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_OpenChangeBlock(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  char v4;

  v4 = 0;
  result = sub_20BEB5B80(a1, &v4);
  if (*(_QWORD *)(result + 24))
    return 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_CloseChangeBlock(pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *a1, const char *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *v4;
  char *v5;
  _QWORD v6[4];
  char v7;

  if (*(const char **)(a3 + 24) != a2)
  {
    v6[0] = "sdf/changeManager.cpp";
    v6[1] = "_CloseChangeBlock";
    v6[2] = 109;
    v6[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_CloseChangeBlock(const SdfChangeBlock *, const void *)";
    v7 = 0;
    v5 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Improperly nested SdfChangeBlocks!", a2, (char *)a3);
    a1 = (pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "data.outermostBlock == block", v5);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_ProcessRemoveIfInert(a1, (pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data *)a3, (char *)a3);
  *(_QWORD *)(a3 + 24) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_SendNotices(v4, (pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data *)a3);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_ProcessRemoveIfInert(pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *this, pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data *a2, char *a3)
{
  void **v3;
  void **v4;
  uint64_t ***v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  uint64_t v8;
  char *v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void **v15;
  void **v16;
  uint64_t v17;
  const char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];

  v3 = (void **)*((_QWORD *)a2 + 4);
  v4 = (void **)*((_QWORD *)a2 + 5);
  if (v3 != v4)
  {
    v22[0] = *((_QWORD *)a2 + 4);
    v22[1] = v4;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    v22[2] = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = 0;
    v15 = v3;
    v16 = v4;
    while (v15 != v16)
    {
      v6 = (uint64_t ***)sub_20BFD0750(&v15, (uint64_t)a2, a3);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(*v6, &v20);
      v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v20);
      v10 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20BFD07C8((uint64_t *)&v15, v8, v9);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveIfInert(v7, v10);
      v11 = v21;
      if (v21)
      {
        v12 = (unsigned int *)(v21 + 8);
        do
        {
          v13 = __ldxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      sub_20BFD0844(&v15);
    }
    if (*((_QWORD *)a2 + 4) != *((_QWORD *)a2 + 5))
    {
      v15 = (void **)"sdf/changeManager.cpp";
      v16 = (void **)"_ProcessRemoveIfInert";
      v17 = 147;
      v18 = "void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_ProcessRemoveIfInert(_Data *)";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "data->removeIfInert.empty()", 0);
    }
    if (!*((_QWORD *)a2 + 3))
    {
      v15 = (void **)"sdf/changeManager.cpp";
      v16 = (void **)"_ProcessRemoveIfInert";
      v17 = 150;
      v18 = "void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_ProcessRemoveIfInert(_Data *)";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "data->outermostBlock", 0);
    }
    v15 = (void **)v22;
    sub_20BFD2B90(&v15);
  }
}

void sub_20BFD0340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  a9 = (void **)(v9 - 40);
  sub_20BFD2B90(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_SendNotices(pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *this, pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data *a2)
{
  uint64_t *v3;
  __int128 v4;
  char *v5;
  uint64_t *v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  uint64_t *i;
  uint64_t (*v10)(uint64_t *);
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  uint64_t Identifier;
  int v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  void **v22;
  unsigned __int8 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t j;
  void *__p;
  uint64_t **v32;
  int64_t v33;
  uint64_t *v34;
  __int128 v35;

  v3 = *(uint64_t **)a2;
  v4 = *(_OWORD *)((char *)a2 + 8);
  *((_QWORD *)a2 + 2) = 0;
  v5 = (char *)a2 + 16;
  v34 = v3;
  v35 = v4;
  v6 = (uint64_t *)v4;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  if (v3 != (uint64_t *)v4)
  {
    while (1)
    {
      v7 = sub_20BFD2F78(v3);
      if (!(v8 & 1 | (unint64_t)v7))
        break;
      v3 += 29;
      if (v3 == v6)
      {
        v3 = v6;
        goto LABEL_11;
      }
    }
    if (v3 != v6)
    {
      for (i = v3 + 29; i != v6; i += 29)
      {
        v10 = sub_20BFD2F78(i);
        if (v11 & 1 | (unint64_t)v10)
        {
          sub_20BFD314C((uint64_t)v3, (uint64_t)i);
          v3 += 29;
        }
      }
    }
  }
LABEL_11:
  v12 = sub_20BFD08C0((uint64_t)&v34, (uint64_t)v3, v35);
  v13 = v34;
  v14 = (uint64_t *)v35;
  if (v34 != (uint64_t *)v35)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_SendNoticesForChangeList(v12, v13, (uint64_t)(v13 + 2));
      v12 = sub_20BFCE180(1);
      if ((_DWORD)v12)
      {
        v12 = sub_20BFCE180(1);
        if ((v12 & 1) != 0)
        {
          v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v13);
          Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v15);
          v17 = *(char *)(Identifier + 23);
          v18 = *(_QWORD *)Identifier;
          sub_20BFD0940((uint64_t)(v13 + 2));
          v21 = v17 >= 0 ? Identifier : v18;
          v22 = v33 >= 0 ? &__p : (void **)__p;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Changes to layer %s:\n%s", v19, v20, v21, v22);
          if (SHIBYTE(v33) < 0)
            operator delete(__p);
        }
      }
      v13 += 29;
    }
    while (v13 != v14);
    v23 = atomic_load((unsigned __int8 *)&qword_2549858B8);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_2549858B8))
    {
      __dmb(0xBu);
      qword_2549858C0 = 1;
      qword_2549858B0 = (uint64_t)&qword_2549858C0;
      __cxa_guard_release(&qword_2549858B8);
    }
    v24 = (unint64_t *)qword_2549858B0;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
    v33 = v25;
    __p = &unk_24C5294B8;
    v32 = &v34;
    pxrInternal__aapl__pxrReserved__::TfNotice::Send((pxrInternal__aapl__pxrReserved__::TfNotice *)&__p);
    pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChange::~LayersDidChange((pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChange *)&__p);
    v33 = v25;
    __p = &unk_24C529450;
    v32 = &v34;
    v26 = v34;
    v27 = (uint64_t *)v35;
    while (v26 != v27)
    {
      sub_20BFD0074(&__p, v26);
      v26 += 29;
    }
    if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1))
    {
      sub_20BFD4078((void **)a2);
      v28 = v34;
      *(_QWORD *)a2 = v34;
      v29 = v35;
      *(_OWORD *)((char *)a2 + 8) = v35;
      v35 = 0uLL;
      v34 = 0;
      for (j = v29; (uint64_t *)j != v28; sub_20BFD2840((uint64_t)v5, j))
        j -= 232;
      *((_QWORD *)a2 + 1) = v28;
    }
    pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChangeSentPerLayer::~LayersDidChangeSentPerLayer((pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChangeSentPerLayer *)&__p);
  }
  __p = &v34;
  sub_20BFD27BC((void ***)&__p);
}

void sub_20BFD0648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChange::~LayersDidChange((pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChange *)&__p);
  __p = &a17;
  sub_20BFD27BC((void ***)&__p);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::RemoveSpecIfInert(pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *this, unsigned int **a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int **v6;
  unsigned int *v7;
  unsigned int v8;
  char *v9;
  _BYTE v11[15];
  char v12;

  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v11);
  v12 = 0;
  v4 = sub_20BEB5B80((unint64_t *)this, &v12);
  v5 = v4;
  v6 = *(unsigned int ***)(v4 + 40);
  if ((unint64_t)v6 >= *(_QWORD *)(v4 + 48))
  {
    v9 = sub_20BFD2FCC((unsigned int ***)(v4 + 32), a2);
  }
  else
  {
    v7 = *a2;
    *v6 = *a2;
    if (v7)
    {
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(v5 + 40) = v9;
  return sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v11);
}

void sub_20BFD073C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFD0750(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfSpec"
            ">>::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfSpec>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20BFD07C8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfSpec"
            ">>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfSpec>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BFD083C()
{
  JUMPOUT(0x20BFD07ECLL);
}

_QWORD *sub_20BFD0844(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfSpec>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfSpec>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_20BFD08C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 != a3)
  {
    sub_20BFD401C(a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 232;
        sub_20BFD2840(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_20BFD0940(uint64_t a1)
{
  char *v2;
  _QWORD v4[11];
  char v5;
  uint64_t v6;

  sub_20BDDE5E0((uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::operator<<(v4, a1, v2);
  std::stringbuf::str();
  v4[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v4[1] = MEMORY[0x24BEDB848] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v6);
}

void sub_20BFD09F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

_WORD *pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidReplaceLayerContent(unint64_t *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  _WORD *result;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *ListFor;
  char v8;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
  result = (_WORD *)pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(v4);
  if ((_DWORD)result)
  {
    v8 = 0;
    v6 = (uint64_t *)sub_20BEB5B80(a1, &v8);
    ListFor = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v6, v6, a2);
    return pxrInternal__aapl__pxrReserved__::SdfChangeList::DidReplaceLayerContent(ListFor);
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v12;

  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
    goto LABEL_7;
  while (!sub_20BEB560C(v5, (uint64_t)a3))
  {
    v5 += 232;
    if (v5 == v6)
    {
      v5 = v6;
      break;
    }
  }
  if (v5 == a2[1])
  {
    v5 = a2[1];
LABEL_7:
    v12 = a3;
    if (v5 >= a2[2])
    {
      v10 = sub_20BFD479C(a2, (uint64_t)&unk_20CAC184C, &v12);
    }
    else
    {
      v7 = a3[1];
      *(_QWORD *)v5 = *a3;
      *(_QWORD *)(v5 + 8) = v7;
      if (v7)
      {
        v8 = (unsigned int *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      *(_OWORD *)(v5 + 192) = 0u;
      *(_OWORD *)(v5 + 208) = 0u;
      *(_OWORD *)(v5 + 160) = 0u;
      *(_OWORD *)(v5 + 176) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_OWORD *)(v5 + 144) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_DWORD *)(v5 + 220) = 1;
      v10 = v5 + 232;
      *(_QWORD *)(v5 + 224) = 0;
    }
    a2[1] = v10;
    v5 = v10 - 232;
  }
  return v5 + 16;
}

_WORD *pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidReloadLayerContent(unint64_t *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  _WORD *result;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *ListFor;
  char v8;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
  result = (_WORD *)pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(v4);
  if ((_DWORD)result)
  {
    v8 = 0;
    v6 = (uint64_t *)sub_20BEB5B80(a1, &v8);
    ListFor = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v6, v6, a2);
    return pxrInternal__aapl__pxrReserved__::SdfChangeList::DidReloadLayerContent(ListFor);
  }
  return result;
}

std::string *pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeLayerIdentifier(unint64_t *a1, uint64_t *a2, const std::string *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  std::string *result;
  uint64_t *v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *ListFor;
  char v10;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
  result = (std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(v6);
  if ((_DWORD)result)
  {
    v10 = 0;
    v8 = (uint64_t *)sub_20BEB5B80(a1, &v10);
    ListFor = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v8, v8, a2);
    return pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeLayerIdentifier(ListFor, a3);
  }
  return result;
}

_WORD *pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeLayerResolvedPath(unint64_t *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  _WORD *result;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *ListFor;
  char v8;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
  result = (_WORD *)pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(v4);
  if ((_DWORD)result)
  {
    v8 = 0;
    v6 = (uint64_t *)sub_20BEB5B80(a1, &v8);
    ListFor = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v6, v6, a2);
    return pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeLayerResolvedPath(ListFor);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeField(unint64_t *a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, uint64_t *a4, pxrInternal__aapl__pxrReserved__::VtValue *a5, pxrInternal__aapl__pxrReserved__::VtValue *a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v14;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v15;
  uint64_t *v16;
  unint64_t v17;
  const pxrInternal__aapl__pxrReserved__::TfToken *v18;
  uint64_t *v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *ListFor;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v22;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v23;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v24;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v25;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v26;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v27;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v28;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v29;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v30;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v31;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v32;
  _QWORD *v33;
  pxrInternal__aapl__pxrReserved__::SdfPath *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__::SdfPath *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v43;
  _BYTE *v44;
  _BYTE *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  _BOOL8 v49;
  pxrInternal__aapl__pxrReserved__::SdfPath *v50;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v51;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v52;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v53;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v54;
  uint64_t Field;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v56;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v57;
  const void **v58;
  __int128 v59;
  __int128 *v60;
  __int128 v61;
  void **v62;
  const void **v63;
  uint64_t v64;
  void *v65[2];
  void *__p[2];
  uint64_t v67;
  const char *v68;
  char v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
  result = pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(v12);
  if (!(_DWORD)result)
    return result;
  v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v14)
    v14 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v15 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v15)
    v15 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  LOBYTE(__p[0]) = 0;
  result = sub_20BEB5B80(a1, __p);
  v16 = (uint64_t *)result;
  v17 = *a4 & 0xFFFFFFFFFFFFFFF8;
  if (v17 == (*((_QWORD *)v14 + 11) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_31;
  if (v17 == (*((_QWORD *)v14 + 27) & 0xFFFFFFFFFFFFFFF8))
  {
    ListFor = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidReorderPrims(ListFor, a3);
    goto LABEL_31;
  }
  if (v17 == (*((_QWORD *)v15 + 4) & 0xFFFFFFFFFFFFFFF8))
  {
    result = sub_20BFD1714(a5, a6);
    if ((_DWORD)result)
    {
      v23 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, v16, a2);
      return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidReorderPrims(v23, a3);
    }
  }
  else
  {
    if (v17 == (*((_QWORD *)v14 + 34) & 0xFFFFFFFFFFFFFFF8))
    {
      v24 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
      return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidReorderProperties(v24, a3);
    }
    if (v17 == (*((_QWORD *)v15 + 5) & 0xFFFFFFFFFFFFFFF8))
    {
      result = sub_20BFD1714(a5, a6);
      if ((_DWORD)result)
      {
        v26 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, v16, a2);
        return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidReorderProperties(v26, a3);
      }
    }
    else
    {
      if (v17 == (*((_QWORD *)v14 + 59) & 0xFFFFFFFFFFFFFFF8) || v17 == (*((_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v25 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePrimVariantSets(v25, a3);
        goto LABEL_31;
      }
      if (v17 == (*((_QWORD *)v14 + 24) & 0xFFFFFFFFFFFFFFF8))
      {
        v27 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePrimInheritPaths(v27, a3);
        goto LABEL_31;
      }
      if (v17 == (*((_QWORD *)v14 + 38) & 0xFFFFFFFFFFFFFFF8))
      {
        v28 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePrimSpecializes(v28, a3);
        goto LABEL_31;
      }
      if (v17 == (*((_QWORD *)v14 + 35) & 0xFFFFFFFFFFFFFFF8))
      {
        v29 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePrimReferences(v29, a3);
        goto LABEL_31;
      }
      if (v17 == (*((_QWORD *)v14 + 54) & 0xFFFFFFFFFFFFFFF8))
      {
        v30 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeTimeSamples(v30, a3);
        goto LABEL_31;
      }
      if (v17 == (*((_QWORD *)v14 + 7) & 0xFFFFFFFFFFFFFFF8))
      {
        v31 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeConnection(v31, a3);
        goto LABEL_31;
      }
      if (v17 == (*((_QWORD *)v14 + 53) & 0xFFFFFFFFFFFFFFF8))
      {
        v32 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeRelationshipTargets(v32, a3);
        goto LABEL_31;
      }
      if (v17 == (*((_QWORD *)v14 + 45) & 0xFFFFFFFFFFFFFFF8))
      {
        __p[0] = 0;
        __p[1] = 0;
        v67 = 0;
        v70 = 0uLL;
        v71 = 0;
        v62 = 0;
        v63 = 0;
        v64 = 0;
        sub_20BFD188C((__int128 ***)a5, (__int128 **)&v62, (uint64_t)v65);
        v60 = (__int128 *)&v62;
        sub_20BDE5038((void ***)&v60);
        v60 = 0;
        v61 = 0uLL;
        sub_20BFD188C((__int128 ***)a6, &v60, (uint64_t)&v62);
        v58 = (const void **)&v60;
        sub_20BDE5038((void ***)&v58);
        sub_20BFD426C((uint64_t)&v60, (const void **)v65[0], (const void **)v65[1]);
        sub_20BFD426C((uint64_t)&v58, (const void **)v62, v63);
        sub_20BFD1908(v60, &v61, v58, (const void **)&v59, (uint64_t *)&v70);
        sub_20BFD1908((__int128 *)v58, &v59, (const void **)v60, (const void **)&v61, (uint64_t *)__p);
        if (__p[0] == __p[1] && (_QWORD)v70 == *((_QWORD *)&v70 + 1))
        {
          sub_20BE72E18((uint64_t *)&v70, (std::string *)v70, v60, &v61);
          sub_20BE72E18((uint64_t *)__p, (std::string *)__p[1], v58, &v59);
        }
        sub_20BDECAB8((uint64_t)&v58, (char *)v59);
        sub_20BDECAB8((uint64_t)&v60, (char *)v61);
        v60 = (__int128 *)&v62;
        sub_20BDE5038((void ***)&v60);
        v62 = v65;
        sub_20BDE5038(&v62);
        *(_OWORD *)v65 = *(_OWORD *)__p;
        while (v65[0] != v65[1])
        {
          v34 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v33, v16, a2);
          v37 = sub_20BEC9C74((uint64_t *)v65, v35, v36);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeSublayerPaths(v34, v37, 0);
          v33 = sub_20BEC9CF0(v65);
        }
        *(_OWORD *)v65 = v70;
        while (v65[0] != v65[1])
        {
          v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v33, v16, a2);
          v41 = sub_20BEC9C74((uint64_t *)v65, v39, v40);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeSublayerPaths(v38, v41, 1);
          v33 = sub_20BEC9CF0(v65);
        }
        v65[0] = &v70;
        sub_20BDE5038((void ***)v65);
        *(_QWORD *)&v70 = __p;
        sub_20BDE5038((void ***)&v70);
        goto LABEL_31;
      }
      if (v17 == (*((_QWORD *)v14 + 46) & 0xFFFFFFFFFFFFFFF8))
      {
        __p[0] = 0;
        __p[1] = 0;
        v67 = 0;
        sub_20BFD194C((uint64_t *)a5, (uint64_t)__p, &v70);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        __p[0] = 0;
        __p[1] = 0;
        v67 = 0;
        sub_20BFD194C((uint64_t *)a6, (uint64_t)__p, v65);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v42 = v65[0];
        if ((void *)(*((_QWORD *)&v70 + 1) - v70) == (void *)((char *)v65[1] - (char *)v65[0]))
        {
          v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(v43, (uint64_t)&v62);
          v45 = v65[0];
          v44 = v65[1];
          if (sub_20BFD19BC((uint64_t)&v62) == (v44 - v45) >> 4
            || (__p[0] = "sdf/changeManager.cpp",
                __p[1] = "DidChangeField",
                v67 = 411,
                v68 = "void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeField(const SdfLayerHandle &, c"
                      "onst SdfPath &, const TfToken &, VtValue &&, const VtValue &)",
                v69 = 0,
                (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "newOffsets.size() == subLayers.size()", 0) & 1) != 0))
          {
            v46 = (char *)v65[0];
            if (v65[1] != v65[0])
            {
              v47 = 0;
              v48 = 0;
              do
              {
                v49 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==((double *)(v70 + v47), (double *)&v46[v47]);
                if (!v49)
                {
                  v50 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(v49, v16, a2);
                  sub_20BFD46DC((uint64_t *)&v62, v48, __p);
                  pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeSublayerPaths(v50, (uint64_t)__p, 2);
                  if (SHIBYTE(v67) < 0)
                    operator delete(__p[0]);
                }
                ++v48;
                v46 = (char *)v65[0];
                v47 += 16;
              }
              while (v48 < ((char *)v65[1] - (char *)v65[0]) >> 4);
            }
          }
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v62);
          v42 = v65[0];
        }
        if (v42)
        {
          v65[1] = v42;
          operator delete(v42);
        }
        result = v70;
        if ((_QWORD)v70)
        {
          *((_QWORD *)&v70 + 1) = v70;
          operator delete((void *)v70);
        }
        goto LABEL_31;
      }
      if (v17 == (*((_QWORD *)v14 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        result = pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a3);
        if ((result & 1) != 0
          || (result = pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath(a3), (_DWORD)result))
        {
          v51 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, v16, a2);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, __p);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeConnection(v51, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
          return (uint64_t)sub_20BFD1A18(__p);
        }
        goto LABEL_31;
      }
      v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v14 + 440);
      if (v17 == (*((_QWORD *)v14 + 55) & 0xFFFFFFFFFFFFFFF8))
      {
        if (*(_QWORD *)a3 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)result)
          || (__p[0] = "sdf/changeManager.cpp",
              __p[1] = "DidChangeField",
              v67 = 436,
              v68 = "void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeField(const SdfLayerHandle &, con"
                    "st SdfPath &, const TfToken &, VtValue &&, const VtValue &)",
              v69 = 0,
              result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "path == SdfPath::AbsoluteRootPath()", 0), (result & 1) != 0))
        {
          if (*((_QWORD *)a5 + 1))
          {
            sub_20BF4C6D0(__p, a5);
          }
          else
          {
            v54 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
            pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v54, a3, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v14 + 168), (pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          }
          if (*((_QWORD *)a6 + 1))
          {
            Field = (uint64_t)sub_20BF4C6D0(&v70, a6);
          }
          else
          {
            v56 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
            Field = pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v56, a3, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v14 + 168), (pxrInternal__aapl__pxrReserved__::VtValue *)&v70);
          }
          v57 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(Field, v16, a2);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeInfo(v57, a3, (uint64_t *)v14 + 55, __p, &v70);
          sub_20BF4C2D8((uint64_t)&v70);
          return sub_20BF4C2D8((uint64_t)__p);
        }
        v17 = *a4 & 0xFFFFFFFFFFFFFFF8;
      }
      v20 = *((_QWORD *)v14 + 21);
      v19 = (uint64_t *)((char *)v14 + 168);
      if (v17 != (v20 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_24:
        if (v17 == (*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8)
          || v17 == (*((_QWORD *)v15 + 1) & 0xFFFFFFFFFFFFFFF8)
          || v17 == (*((_QWORD *)v15 + 6) & 0xFFFFFFFFFFFFFFF8)
          || v17 == (*((_QWORD *)v15 + 7) & 0xFFFFFFFFFFFFFFF8)
          || v17 == (*((_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          return result;
        }
LABEL_31:
        v22 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, v16, a2);
        return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeInfo(v22, a3, a4, a5, a6);
      }
      result = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)result);
      if (*(_QWORD *)a3 != *(_QWORD *)result)
      {
        __p[0] = "sdf/changeManager.cpp";
        __p[1] = "DidChangeField";
        v67 = 451;
        v68 = "void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeField(const SdfLayerHandle &, const Sdf"
              "Path &, const TfToken &, VtValue &&, const VtValue &)";
        v69 = 0;
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "path == SdfPath::AbsoluteRootPath()", 0);
        if ((result & 1) == 0)
        {
          v17 = *a4 & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_24;
        }
      }
      v52 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, v16, a2);
      sub_20BF4C6D0(__p, a5);
      pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeInfo(v52, a3, v19, __p, a6);
      sub_20BF4C2D8((uint64_t)__p);
      v53 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
      result = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v53, a3, v18, 0);
      if ((result & 1) == 0)
        return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeInfo(v52, a3, (uint64_t *)v18, a5, a6);
    }
  }
  return result;
}

void sub_20BFD15AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void *v30;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a16);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  v30 = *(void **)(v28 + 48);
  if (v30)
  {
    *(_QWORD *)(v28 + 56) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

BOOL sub_20BFD1714(pxrInternal__aapl__pxrReserved__::VtValue *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  BOOL v2;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL8 v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD v18[3];
  _QWORD **v19;
  _QWORD *v20[2];

  if (*((_QWORD *)a1 + 1))
    v2 = *((_QWORD *)a2 + 1) == 0;
  else
    v2 = 1;
  if (v2)
    return 0;
  v4 = sub_20BFD21C4(a1);
  v5 = (uint64_t **)sub_20BFD21C4(a2);
  v6 = *(uint64_t **)(v4 + 8);
  if ((uint64_t *)((char *)v6 - *(_QWORD *)v4) != (uint64_t *)((char *)v5[1] - (char *)*v5))
    return 0;
  v7 = v5;
  sub_20BFD2324((uint64_t)&v19, *(uint64_t **)v4, v6);
  sub_20BFD2324((uint64_t)v18, *v7, v7[1]);
  if (v20[1] == (_QWORD *)v18[2])
  {
    v8 = v19;
    if (v19 == v20)
    {
      v12 = 1;
    }
    else
    {
      v9 = (_QWORD *)v18[0];
      do
      {
        v10 = v8[4] & 0xFFFFFFFFFFFFFFF8;
        v11 = v9[4] & 0xFFFFFFFFFFFFFFF8;
        v12 = v10 == v11;
        if (v10 != v11)
          break;
        v13 = (_QWORD *)v8[1];
        v14 = v8;
        if (v13)
        {
          do
          {
            v8 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v14[2];
            v2 = *v8 == (_QWORD)v14;
            v14 = v8;
          }
          while (!v2);
        }
        v15 = (_QWORD *)v9[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (_QWORD *)v9[2];
            v2 = *v16 == (_QWORD)v9;
            v9 = v16;
          }
          while (!v2);
        }
        v9 = v16;
      }
      while (v8 != v20);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_20BF2B200((uint64_t)v18, (_QWORD *)v18[1]);
  sub_20BF2B200((uint64_t)&v19, v20[0]);
  return v12;
}

void sub_20BFD1874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_20BF2B200((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

char *sub_20BFD188C@<X0>(__int128 ***a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  __int128 **v6;

  if (sub_20BFD41F4((pxrInternal__aapl__pxrReserved__::VtValue *)a1))
  {
    v6 = a1[1];
    if ((v6 & 4) != 0)
      a2 = (__int128 **)(*(uint64_t (**)(__int128 ***))(((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
    else
      a2 = *a1;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return sub_20BE78B98((char *)a3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
}

uint64_t sub_20BFD1908(__int128 *a1, __int128 *a2, const void **a3, const void **a4, uint64_t *a5)
{
  uint64_t v5;
  char v7;
  uint64_t *v8;
  const void **v9;
  const void **v10;
  __int128 *v11;
  __int128 *v12;

  v11 = a2;
  v12 = a1;
  v9 = a4;
  v10 = a3;
  v8 = a5;
  sub_20BFD42EC(&v12, &v11, &v10, &v9, &v8, (uint64_t)&v7);
  return v5;
}

_QWORD *sub_20BFD194C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  if (sub_20BFD4578((pxrInternal__aapl__pxrReserved__::VtValue *)a1))
  {
    v6 = a1[1];
    if ((v6 & 4) != 0)
      a2 = (*(uint64_t (**)(uint64_t *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
    else
      a2 = *a1;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return sub_20BFD45F0(a3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
}

unint64_t sub_20BFD19BC(uint64_t a1)
{
  unint64_t result;
  _QWORD *v3;

  if (!sub_20BFD4668(a1))
    return 0;
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)result + 112))(result, *(unsigned int *)(a1 + 16));
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3);
  }
  return result;
}

_DWORD *sub_20BFD1A18(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

_WORD *pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeAttributeTimeSamples(unint64_t *a1, _QWORD *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *ListFor;
  char v8;

  v8 = 0;
  v5 = (uint64_t *)sub_20BEB5B80(a1, &v8);
  ListFor = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v5, v5, a2);
  return pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeTimeSamples(ListFor, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidMoveSpec(unint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 IsPrimPath;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *ListFor;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v15;
  uint64_t IsPropertyPath;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v21;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v22;
  uint64_t SpecType;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v24;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v25;
  uint64_t v26;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v27;
  _WORD *v28;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v29;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v30;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v31;
  _WORD *v32;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v33;
  uint64_t v34;
  uint64_t v35;

  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
  result = pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(v8);
  if ((_DWORD)result)
  {
    LOBYTE(v35) = 0;
    v10 = (uint64_t *)sub_20BEB5B80(a1, &v35);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, &v35);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a4, &v34);
    v12 = v34;
    v11 = v35;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
    sub_20BFD265C(&v34);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
    sub_20BFD265C(&v35);
    IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3);
    if (v11 == v12)
    {
      if (IsPrimPath)
      {
        ListFor = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsPrimPath, v10, a2);
        return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePrimName(ListFor, a3, a4);
      }
      IsPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a3);
      if ((_DWORD)IsPropertyPath)
      {
        v17 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsPropertyPath, v10, a2);
        return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePropertyName(v17, a3, a4);
      }
      result = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a3);
      if ((_DWORD)result)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, &v35);
        v22 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
        SpecType = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
        if ((_DWORD)SpecType == 8)
        {
          v30 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(SpecType, v10, a2);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeRelationshipTargets(v30, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
        }
        else if ((_DWORD)SpecType == 1)
        {
          v24 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(SpecType, v10, a2);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeConnection(v24, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
        return (uint64_t)sub_20BFD265C(&v35);
      }
    }
    else
    {
      if (IsPrimPath)
      {
        v15 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsPrimPath, v10, a2);
        return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidMovePrim(v15, a3, a4);
      }
      v18 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a3);
      if ((_DWORD)v18)
      {
        v19 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(v18, v10, a2);
        v20 = pxrInternal__aapl__pxrReserved__::SdfChangeList::DidRemoveProperty(v19, a3, 0);
        v21 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(v20, v10, a2);
        return pxrInternal__aapl__pxrReserved__::SdfChangeList::DidAddProperty(v21, a4, 0);
      }
      result = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a3);
      if ((_DWORD)result)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, &v35);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a4, &v34);
        v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
        v26 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
        if ((_DWORD)v26 == 8)
        {
          v31 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(v26, v10, a2);
          v32 = pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeRelationshipTargets(v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
          v33 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v32, v10, a2);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeRelationshipTargets(v33, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v34);
        }
        else if ((_DWORD)v26 == 1)
        {
          v27 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(v26, v10, a2);
          v28 = pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeConnection(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
          v29 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v28, v10, a2);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeConnection(v29, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v34);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
        sub_20BFD265C(&v34);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
        return (uint64_t)sub_20BFD265C(&v35);
      }
    }
  }
  return result;
}

void sub_20BFD1D34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidAddSpec(unint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, int a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t *v9;
  uint64_t IsPrimPath;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *ListFor;
  uint64_t IsPropertyPath;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v13;
  uint64_t IsTargetPath;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v15;
  uint64_t IsExpressionPath;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v17;
  std::string *v18;
  __int128 v19;
  std::string v20;
  void *__p[2];
  std::string::size_type v22;
  _QWORD v23[4];
  char v24;

  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(v8))
  {
    LOBYTE(v23[0]) = 0;
    v9 = (uint64_t *)sub_20BEB5B80(a1, v23);
    IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3);
    if ((IsPrimPath & 1) != 0
      || (IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a3), (_DWORD)IsPrimPath))
    {
      ListFor = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsPrimPath, v9, a2);
      pxrInternal__aapl__pxrReserved__::SdfChangeList::DidAddPrim(ListFor, a3, a4);
    }
    else
    {
      IsPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a3);
      if ((_DWORD)IsPropertyPath)
      {
        v13 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsPropertyPath, v9, a2);
        pxrInternal__aapl__pxrReserved__::SdfChangeList::DidAddProperty(v13, a3, a4);
      }
      else
      {
        IsTargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a3);
        if ((_DWORD)IsTargetPath)
        {
          v15 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsTargetPath, v9, a2);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidAddTarget(v15, a3);
        }
        else if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a3) & 1) == 0
               && (pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperArgPath(a3) & 1) == 0)
        {
          IsExpressionPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath(a3);
          if ((_DWORD)IsExpressionPath)
          {
            v17 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsExpressionPath, v9, a2);
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, v23);
            pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeConnection(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v23);
            sub_20BFD1A18(v23);
          }
          else
          {
            v23[0] = "sdf/changeManager.cpp";
            v23[1] = "DidAddSpec";
            v23[2] = 582;
            v23[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidAddSpec(const SdfLayerHandle &, const "
                     "SdfPath &, BOOL)";
            v24 = 0;
            pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a3);
            std::operator+<char>();
            v18 = std::string::append(&v20, ">");
            v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
            v22 = v18->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v19;
            v18->__r_.__value_.__l.__size_ = 0;
            v18->__r_.__value_.__r.__words[2] = 0;
            v18->__r_.__value_.__r.__words[0] = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v23, 1);
            if (SHIBYTE(v22) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v20.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
}

void sub_20BFD1F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidRemoveSpec(unint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, int a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t *v9;
  uint64_t IsPrimPath;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *ListFor;
  uint64_t IsPropertyPath;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v13;
  uint64_t IsTargetPath;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v15;
  uint64_t IsExpressionPath;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v17;
  std::string *v18;
  __int128 v19;
  std::string v20;
  void *__p[2];
  std::string::size_type v22;
  _QWORD v23[4];
  char v24;

  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(v8))
  {
    LOBYTE(v23[0]) = 0;
    v9 = (uint64_t *)sub_20BEB5B80(a1, v23);
    IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3);
    if ((IsPrimPath & 1) != 0
      || (IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a3), (_DWORD)IsPrimPath))
    {
      ListFor = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsPrimPath, v9, a2);
      pxrInternal__aapl__pxrReserved__::SdfChangeList::DidRemovePrim(ListFor, a3, a4);
    }
    else
    {
      IsPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a3);
      if ((_DWORD)IsPropertyPath)
      {
        v13 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsPropertyPath, v9, a2);
        pxrInternal__aapl__pxrReserved__::SdfChangeList::DidRemoveProperty(v13, a3, a4);
      }
      else
      {
        IsTargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a3);
        if ((_DWORD)IsTargetPath)
        {
          v15 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsTargetPath, v9, a2);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidRemoveTarget(v15, a3);
        }
        else if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a3) & 1) == 0
               && (pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperArgPath(a3) & 1) == 0)
        {
          IsExpressionPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath(a3);
          if ((_DWORD)IsExpressionPath)
          {
            v17 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsExpressionPath, v9, a2);
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, v23);
            pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeConnection(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v23);
            sub_20BFD1A18(v23);
          }
          else
          {
            v23[0] = "sdf/changeManager.cpp";
            v23[1] = "DidRemoveSpec";
            v23[2] = 613;
            v23[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidRemoveSpec(const SdfLayerHandle &, con"
                     "st SdfPath &, BOOL)";
            v24 = 0;
            pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a3);
            std::operator+<char>();
            v18 = std::string::append(&v20, ">");
            v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
            v22 = v18->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v19;
            v18->__r_.__value_.__l.__size_ = 0;
            v18->__r_.__value_.__r.__words[2] = 0;
            v18->__r_.__value_.__r.__words[0] = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v23, 1);
            if (SHIBYTE(v22) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v20.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
}

void sub_20BFD214C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *sub_20BFD2190(pxrInternal__aapl__pxrReserved__::SdfChangeBlock *a1)
{
  if (*(_QWORD *)a1)
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::_CloseChangeBlock(a1, *(_QWORD *)a1);
  return a1;
}

uint64_t sub_20BFD21C4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BFD222C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BFD22A4, (uint64_t)&stru_24C51BCF0);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BFD222C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAB1184 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51BCF0);
}

_QWORD *sub_20BFD22A4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = operator new(0x18uLL);
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  *a1 = result;
  a1[1] = sub_20BFD22E8;
  a1[2] = &stru_24C51BCF0;
  return result;
}

void sub_20BFD22E8(void **a1)
{
  void **v2;

  if (a1)
  {
    v2 = a1;
    sub_20BEEB2B8(&v2);
    operator delete(a1);
  }
}

uint64_t sub_20BFD2324(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20BFD23A4((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_20BFD238C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF2B200(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20BFD23A4(uint64_t **a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (uint64_t **)sub_20BFD2424(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_20BFD25E8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *sub_20BFD2424(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5 & 0xFFFFFFFFFFFFFFF8, v7 = a2[4] & 0xFFFFFFFFFFFFFFF8, v6 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5 & 0xFFFFFFFFFFFFFFF8;
    if ((v10[4] & 0xFFFFFFFFFFFFFFF8) < v15)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4] & 0xFFFFFFFFFFFFFFF8;
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= (a4[4] & 0xFFFFFFFFFFFFFFF8))
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4] & 0xFFFFFFFFFFFFFFF8;
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *sub_20BFD25E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v5 = a1 + 8;
  result = operator new(0x28uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *a2;
  result[4] = *a2;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

_DWORD *sub_20BFD265C(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *Ptr;
  unsigned int *v3;
  unsigned int v4;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1))
  {
    Ptr = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1);
    v3 = (unsigned int *)((char *)Ptr + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if ((v4 & 0x7FFFFFFF) == 1)
      sub_20BFD26B4(Ptr);
  }
  return a1;
}

void sub_20BFD26B4(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *a1)
{
  uint64_t *v1;
  uint64_t v2;

  switch(*((_BYTE *)a1 + 14))
  {
    case 0:
      v1 = sub_20BFD2738(a1);
      goto LABEL_5;
    case 1:
      pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode::~Sdf_PrimPathNode(a1);
      goto LABEL_5;
    case 2:
      pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::~Sdf_PrimVariantSelectionNode(a1);
LABEL_5:
      pxrInternal__aapl__pxrReserved__::Sdf_PrimPartPathNode::operator delete((uint64_t)v1);
      return;
    case 3:
      pxrInternal__aapl__pxrReserved__::Sdf_PrimPropertyPathNode::~Sdf_PrimPropertyPathNode(a1);
      goto LABEL_12;
    case 4:
      pxrInternal__aapl__pxrReserved__::Sdf_TargetPathNode::~Sdf_TargetPathNode(a1);
      goto LABEL_12;
    case 5:
      pxrInternal__aapl__pxrReserved__::Sdf_MapperPathNode::~Sdf_MapperPathNode(a1);
      goto LABEL_12;
    case 6:
      pxrInternal__aapl__pxrReserved__::Sdf_RelationalAttributePathNode::~Sdf_RelationalAttributePathNode(a1);
      goto LABEL_12;
    case 7:
      pxrInternal__aapl__pxrReserved__::Sdf_MapperArgPathNode::~Sdf_MapperArgPathNode(a1);
      goto LABEL_12;
    case 8:
      pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode::~Sdf_ExpressionPathNode(a1);
LABEL_12:
      pxrInternal__aapl__pxrReserved__::Sdf_PropPartPathNode::operator delete(v2);
      break;
    default:
      return;
  }
}

uint64_t *sub_20BFD2738(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
    pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_RemovePathTokenFromTable((unint64_t)this);
  return sub_20BFD276C((uint64_t *)this);
}

uint64_t *sub_20BFD276C(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *a1;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if ((v4 & 0x7FFFFFFF) == 1)
      sub_20BFD26B4();
  }
  return a1;
}

void sub_20BFD27BC(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 232;
        sub_20BFD2840((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20BFD2840(uint64_t a1, uint64_t a2)
{
  void **v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = (void **)(a2 + 16);
  sub_20BFD28A8((uint64_t *)(a2 + 224), 0);
  sub_20BFD2974(v3);
  result = *(_QWORD *)(a2 + 8);
  if (result)
  {
    v5 = (unsigned int *)(result + 8);
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20BFD28A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20BFD28D4(v3);
    operator delete(v4);
  }
}

uint64_t sub_20BFD28D4(uint64_t a1)
{
  void *v2;

  sub_20BFD290C(a1, *(_DWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BFD290C(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(_DWORD **)v2;
      sub_20BFD2948(v2 + 4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_20BFD2948(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

void **sub_20BFD2974(void **a1)
{
  sub_20BFD29B0(a1);
  if (*((_DWORD *)a1 + 51) >= 2u)
    free(*a1);
  return a1;
}

_DWORD *sub_20BFD29B0(_DWORD *result)
{
  _DWORD *v1;
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;

  v1 = result;
  if (result[51] >= 2u)
    v1 = *(_DWORD **)result;
  v2 = result[50];
  if (v2)
  {
    v3 = 0;
    v4 = 200 * v2;
    do
    {
      v5 = (void **)&v1[v3 / 4];
      if (SHIBYTE(v1[v3 / 4 + 47]) < 0)
        operator delete(v5[21]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v5 + 41);
      sub_20BFD265C(&v1[v3 / 4 + 40]);
      v6 = (void **)&v1[v3 / 4 + 34];
      sub_20BED2E10(&v6);
      sub_20BFD2AD0((uint64_t)(v5 + 1));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v1[v3 / 4 + 1]);
      result = sub_20BFD265C(&v1[v3 / 4]);
      v3 += 200;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t sub_20BFD2A70(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 156));
  sub_20BFD265C((_DWORD *)(a1 + 152));
  v3 = (void **)(a1 + 128);
  sub_20BED2E10(&v3);
  return sub_20BFD2AD0(a1);
}

uint64_t sub_20BFD2AD0(uint64_t a1)
{
  sub_20BFD2B0C(a1);
  if (*(_DWORD *)(a1 + 124) >= 4u)
    free(*(void **)a1);
  return a1;
}

uint64_t sub_20BFD2B0C(uint64_t result)
{
  _QWORD *v1;
  unsigned int v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;

  v1 = (_QWORD *)result;
  if (*(_DWORD *)(result + 124) >= 4u)
    v1 = *(_QWORD **)result;
  v2 = *(_DWORD *)(result + 120);
  if (v2)
  {
    v3 = &v1[5 * v2];
    do
    {
      sub_20BF4C2D8((uint64_t)(v1 + 3));
      result = sub_20BF4C2D8((uint64_t)(v1 + 1));
      if ((*v1 & 7) != 0)
      {
        v4 = (unsigned int *)(*v1 & 0xFFFFFFFFFFFFFFF8);
        do
          v5 = __ldxr(v4);
        while (__stlxr(v5 - 2, v4));
      }
      v1 += 5;
    }
    while (v1 != v3);
  }
  return result;
}

void sub_20BFD2B90(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v4 - 8));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::Sdf_ChangeManager(pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *this)
{
  _QWORD *v2;
  uint64_t i;

  *(_QWORD *)this = &unk_24C51AE78;
  __dmb(0xBu);
  *((_QWORD *)this + 1) = 0;
  __dmb(0xBu);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_24C524618;
  v2 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *v2 = &unk_24C524678;
  *((_QWORD *)this + 3) = v2;
  for (i = 72; i != 96; i += 8)
    *(_QWORD *)((char *)this + i) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 8) = (char *)this + 72;
  *((_QWORD *)this + 5) = sub_20BFD2DC8;
  return this;
}

void sub_20BFD2C9C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20BFD2CA4(uint64_t a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((tbb::internal::concurrent_vector_base_v3 *)(a1 + 40), 1, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data>,128ul>>>::initialize_array, 0);
  v3 = sub_20BEB4B94((unint64_t)v2);
  v4 = *(_QWORD *)(a1 + 64);
  __dmb(0xBu);
  v5 = *(_QWORD *)(v4 + 8 * v3) + (((_QWORD)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5);
  *(_BYTE *)(v5 + 56) = 1;
  return v5;
}

uint64_t sub_20BFD2D28(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_20BFD2D3C(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_20BFD2D44(pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::~Sdf_ChangeManager(a1);
  operator delete(v1);
}

_QWORD *sub_20BFD2D58()
{
  _QWORD *result;

  result = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *result = &unk_24C524678;
  return result;
}

uint64_t sub_20BFD2D80(uint64_t a1)
{
  void *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

double sub_20BFD2DB4(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a2 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

uint64_t sub_20BFD2DC8(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data>,128ul>>>::initialize_array(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    bzero(a1, a3 << 7);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::~Sdf_ChangeManager(pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *this)
{
  uint64_t v2;

  *(_QWORD *)this = &unk_24C524618;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20BEB4954((uint64_t)this);
  sub_20BFD2E50((unint64_t *)this + 4);
  *(_QWORD *)this = &unk_24C51AE78;
}

unint64_t *sub_20BFD2E50(unint64_t *a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  _QWORD *v3;
  unint64_t v4;
  void *v5;

  v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  v3 = (_QWORD *)a1[4];
  v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data>,128ul>>>::destroy_array);
  sub_20BEB4AD0((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

uint64_t tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data>,128ul>>>::destroy_array(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = a2;
    result = result + (a2 << 7) - 128;
    do
    {
      --v2;
      result = sub_20BFD2EE8(result) - 128;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_20BFD2EE8(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 56))
  {
    v3 = (void **)(a1 + 32);
    sub_20BFD2B90(&v3);
    v3 = (void **)a1;
    sub_20BFD27BC(&v3);
    *(_BYTE *)(a1 + 56) = 0;
  }
  return a1;
}

uint64_t sub_20BFD2F38(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  if (*(_BYTE *)(sub_20BEB47BC(v2) + 14))
    return *a1;
  return 0;
}

uint64_t (*sub_20BFD2F78(_QWORD *a1))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14);
  if (*a1)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  else
    return sub_20BFD2F38;
}

char *sub_20BFD2FCC(unsigned int ***a1, unsigned int **a2)
{
  unsigned int **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unsigned int **v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  int64x2_t v21;
  char *v22;
  char *v24;
  int64x2_t v25;
  char *v26;
  _QWORD *v27;

  v3 = *a1;
  v4 = a1[1] - *a1;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = (char *)a1[2] - (char *)v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v27 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDDF6A8(v7, v9);
  else
    v10 = 0;
  v11 = (unsigned int **)&v10[8 * v4];
  v24 = v10;
  v25.i64[0] = (uint64_t)v11;
  v25.i64[1] = (uint64_t)v11;
  v26 = &v10[8 * v9];
  v12 = *a2;
  *v11 = *a2;
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = (char *)v25.i64[1];
    v11 = (unsigned int **)v25.i64[0];
  }
  else
  {
    v14 = &v10[8 * v4];
  }
  v15 = v14 + 8;
  v25.i64[1] = (uint64_t)(v14 + 8);
  v17 = *a1;
  v16 = (unint64_t)a1[1];
  if ((unsigned int **)v16 == *a1)
  {
    v21 = vdupq_n_s64(v16);
  }
  else
  {
    do
    {
      v19 = *(unsigned int **)(v16 - 8);
      v16 -= 8;
      v18 = v19;
      *--v11 = v19;
      if (v19)
      {
        do
          v20 = __ldaxr(v18);
        while (__stlxr(v20 + 1, v18));
      }
    }
    while ((unsigned int **)v16 != v17);
    v21 = *(int64x2_t *)a1;
    v15 = (char *)v25.i64[1];
  }
  *a1 = v11;
  a1[1] = (unsigned int **)v15;
  v25 = v21;
  v22 = (char *)a1[2];
  a1[2] = (unsigned int **)v26;
  v26 = v22;
  v24 = (char *)v21.i64[0];
  sub_20BFD3100((uint64_t)&v24);
  return v15;
}

uint64_t sub_20BFD3100(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20BFD314C(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v4 = *(unsigned int **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  *(_QWORD *)a2 = 0;
  sub_20BFD31B8(a1 + 16, a2 + 16);
  return a1;
}

uint64_t sub_20BFD31B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
    sub_20BFD3200(a1, (int *)a2);
  v4 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  sub_20BFD28A8((uint64_t *)(a1 + 208), v4);
  return a1;
}

uint64_t sub_20BFD3200(uint64_t result, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int *v6;
  int *v7;
  int *v8;
  unsigned int v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  void **v32;

  v2 = result;
  v3 = a2[51];
  if (*(_DWORD *)(result + 204) > 1u)
  {
    if (v3 >= 2)
    {
      v31 = *(_QWORD *)result;
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v31;
      LODWORD(v31) = *(_DWORD *)(result + 200);
      *(_DWORD *)(result + 200) = a2[50];
      a2[50] = v31;
      LODWORD(v31) = *(_DWORD *)(result + 204);
      *(_DWORD *)(result + 204) = a2[51];
      a2[51] = v31;
      return result;
    }
    v20 = (uint64_t)a2;
  }
  else
  {
    if (v3 <= 1)
    {
      v4 = *(_DWORD *)(result + 200);
      v5 = a2[50];
      if (v4 >= v5)
        v6 = a2;
      else
        v6 = (int *)result;
      if (v4 >= v5)
        v7 = (int *)result;
      else
        v7 = a2;
      v8 = v6;
      if (v6[51] >= 2)
        v8 = *(int **)v6;
      v9 = v6[50];
      v10 = v7;
      if (v7[51] >= 2)
        v10 = *(int **)v7;
      if (v9)
      {
        v11 = 200 * v9;
        do
        {
          result = sub_20BFD34C4(v8, v10);
          v8 += 50;
          v10 += 50;
          v11 -= 200;
        }
        while (v11);
        v9 = v6[50];
      }
      LODWORD(v12) = v7[50];
      if (v9 < v12)
      {
        v13 = v9;
        v14 = 50 * v9;
        do
        {
          v15 = v6;
          if (v6[51] >= 2)
            v15 = *(int **)v6;
          v16 = v7;
          if (v7[51] >= 2)
            v16 = *(int **)v7;
          sub_20BFD3F68((uint64_t)&v15[v14], (uint64_t)&v16[v14]);
          v17 = v7;
          if (v7[51] >= 2)
            v17 = *(int **)v7;
          v18 = &v17[v14];
          if (SHIBYTE(v17[v14 + 47]) < 0)
            operator delete(*((void **)v18 + 21));
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18 + 41);
          v19 = &v17[v14];
          sub_20BFD265C(v19 + 40);
          v32 = (void **)(v19 + 34);
          sub_20BED2E10(&v32);
          sub_20BFD2AD0((uint64_t)(v18 + 2));
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v19 + 1);
          result = (uint64_t)sub_20BFD265C(v18);
          ++v13;
          v12 = v7[50];
          v14 += 50;
        }
        while (v13 < v12);
        v9 = v6[50];
      }
      v6[50] = v12;
      v7[50] = v9;
      return result;
    }
    v20 = result;
    v2 = (uint64_t)a2;
  }
  v21 = *(_QWORD *)v2;
  LODWORD(v22) = *(_DWORD *)(v20 + 200);
  if ((_DWORD)v22)
  {
    v23 = 0;
    v24 = 0;
    do
    {
      v25 = v20;
      if (*(_DWORD *)(v20 + 204) >= 2u)
        v25 = *(_QWORD *)v20;
      sub_20BFD3F68(v2 + v23, v25 + v23);
      v26 = v20;
      if (*(_DWORD *)(v20 + 204) >= 2u)
        v26 = *(_QWORD *)v20;
      v27 = v26 + v23;
      if (*(char *)(v26 + v23 + 191) < 0)
        operator delete(*(void **)(v27 + 168));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v27 + 164));
      v28 = v26 + v23;
      sub_20BFD265C((_DWORD *)(v28 + 160));
      v32 = (void **)(v28 + 136);
      sub_20BED2E10(&v32);
      sub_20BFD2AD0(v27 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v28 + 4));
      result = (uint64_t)sub_20BFD265C((_DWORD *)v27);
      ++v24;
      v22 = *(unsigned int *)(v20 + 200);
      v23 += 200;
    }
    while (v24 < v22);
  }
  *(_QWORD *)v20 = v21;
  v29 = *(_DWORD *)(v2 + 200);
  *(_DWORD *)(v2 + 200) = v22;
  *(_DWORD *)(v20 + 200) = v29;
  v30 = *(_DWORD *)(v2 + 204);
  *(_DWORD *)(v2 + 204) = *(_DWORD *)(v20 + 204);
  *(_DWORD *)(v20 + 204) = v30;
  return result;
}

uint64_t sub_20BFD34C4(int *a1, int *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
  return sub_20BFD34FC((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
}

uint64_t sub_20BFD34FC(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;
  __int16 v6;
  void **v7;
  void **v9;
  _BYTE v10[128];
  __int128 v11;
  uint64_t v12;
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20BFD3794((uint64_t)v10, a1);
  v11 = *(_OWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v13 = *(_DWORD *)(a1 + 152);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 152));
  v14 = *(_DWORD *)(a1 + 156);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 156));
  v15 = *(_OWORD *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v17 = *(_WORD *)(a1 + 184);
  v18 = *(_BYTE *)(a1 + 186);
  if (a1 != a2)
    sub_20BFD3914(a1, a2);
  v4 = (void **)(a1 + 160);
  sub_20BFD3E84((uint64_t *)(a1 + 128));
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  sub_20BFD3EBC((int *)(a1 + 152), (int *)(a2 + 152));
  sub_20BFD3F10((int *)(a1 + 156), (int *)(a2 + 156));
  if (*(char *)(a1 + 183) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 183) = 0;
  v6 = *(_WORD *)(a2 + 184);
  *(_BYTE *)(a2 + 160) = 0;
  *(_BYTE *)(a1 + 186) = *(_BYTE *)(a2 + 186);
  *(_WORD *)(a1 + 184) = v6;
  if (v10 != (_BYTE *)a2)
    sub_20BFD3914(a2, (uint64_t)v10);
  v7 = (void **)(a2 + 160);
  sub_20BFD3E84((uint64_t *)(a2 + 128));
  *(_OWORD *)(a2 + 128) = v11;
  *(_QWORD *)(a2 + 144) = v12;
  v12 = 0;
  v11 = 0uLL;
  sub_20BFD3EBC((int *)(a2 + 152), &v13);
  sub_20BFD3F10((int *)(a2 + 156), &v14);
  if (*(char *)(a2 + 183) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v15;
  *(_QWORD *)(a2 + 176) = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15) = 0;
  *(_WORD *)(a2 + 184) = v17;
  *(_BYTE *)(a2 + 186) = v18;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  v9 = (void **)&v11;
  sub_20BED2E10(&v9);
  return sub_20BFD2AD0((uint64_t)v10);
}

void sub_20BFD3760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFD3794(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  int v6;

  *(_QWORD *)(a1 + 120) = 0x300000000;
  v4 = *(_DWORD *)(a2 + 120);
  if (v4 < 4)
  {
    if (*(_DWORD *)(a2 + 124) >= 4u)
      v5 = *(_QWORD **)a2;
    else
      v5 = (_QWORD *)a2;
    sub_20BFD3824(v5, &v5[5 * v4], (_QWORD *)a1);
    sub_20BFD2B0C(a2);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
    *(_DWORD *)(a2 + 124) = 3;
  }
  v6 = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = v6;
  return a1;
}

_QWORD *sub_20BFD3824(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v3 = a3;
  if (a1 == a2)
    return a3;
  v5 = a1;
  v6 = a3;
  do
  {
    v7 = v5 + 3;
    *v6 = *v5;
    v6 += 5;
    v8 = v5 + 1;
    *v5 = 0;
    v5 += 5;
    sub_20BF4C200(v3 + 1, v8);
    sub_20BF4C200(v3 + 3, v7);
    v3 = v6;
  }
  while (v5 != a2);
  return v6;
}

_DWORD *sub_20BFD38A4(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a2);
  return a1;
}

_DWORD *sub_20BFD38DC(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a2);
  return a1;
}

uint64_t sub_20BFD3914(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;

  v2 = result;
  v3 = *(_DWORD *)(a2 + 124);
  if (*(_DWORD *)(result + 124) > 3u)
  {
    if (v3 >= 4)
    {
      v33 = *(_QWORD *)result;
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v33;
      LODWORD(v33) = *(_DWORD *)(result + 120);
      *(_DWORD *)(result + 120) = *(_DWORD *)(a2 + 120);
      *(_DWORD *)(a2 + 120) = v33;
      LODWORD(v33) = *(_DWORD *)(result + 124);
      *(_DWORD *)(result + 124) = *(_DWORD *)(a2 + 124);
      *(_DWORD *)(a2 + 124) = v33;
      return result;
    }
    v20 = a2;
  }
  else
  {
    if (v3 <= 3)
    {
      v4 = *(_DWORD *)(result + 120);
      v5 = *(_DWORD *)(a2 + 120);
      if (v4 >= v5)
        v6 = a2;
      else
        v6 = result;
      if (v4 >= v5)
        v7 = result;
      else
        v7 = a2;
      v8 = (_QWORD *)v6;
      if (*(_DWORD *)(v6 + 124) >= 4u)
        v8 = *(_QWORD **)v6;
      v9 = (_QWORD *)v7;
      if (*(_DWORD *)(v7 + 124) >= 4u)
        v9 = *(_QWORD **)v7;
      result = (uint64_t)sub_20BFD3BAC(v8, &v8[5 * *(unsigned int *)(v6 + 120)], v9);
      v10 = *(unsigned int *)(v6 + 120);
      LODWORD(v11) = *(_DWORD *)(v7 + 120);
      if (v10 < v11)
      {
        do
        {
          v12 = (_QWORD *)v6;
          if (*(_DWORD *)(v6 + 124) >= 4u)
            v12 = *(_QWORD **)v6;
          v13 = (_QWORD *)v7;
          if (*(_DWORD *)(v7 + 124) >= 4u)
            v13 = *(_QWORD **)v7;
          v14 = &v13[5 * v10];
          v12[5 * v10] = *v14;
          *v14 = 0;
          v15 = &v12[5 * v10];
          sub_20BF4C200(v15 + 1, v14 + 1);
          sub_20BF4C200(v15 + 3, v14 + 3);
          v16 = (_QWORD *)v7;
          if (*(_DWORD *)(v7 + 124) >= 4u)
            v16 = *(_QWORD **)v7;
          v17 = &v16[5 * v10];
          sub_20BF4C2D8((uint64_t)(v17 + 3));
          result = sub_20BF4C2D8((uint64_t)(v17 + 1));
          if ((*v17 & 7) != 0)
          {
            v18 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
            do
              v19 = __ldxr(v18);
            while (__stlxr(v19 - 2, v18));
          }
          ++v10;
          v11 = *(unsigned int *)(v7 + 120);
        }
        while (v10 < v11);
        LODWORD(v10) = *(_DWORD *)(v6 + 120);
      }
      *(_DWORD *)(v6 + 120) = v11;
      *(_DWORD *)(v7 + 120) = v10;
      return result;
    }
    v20 = result;
    v2 = a2;
  }
  v21 = *(_QWORD *)v2;
  LODWORD(v22) = *(_DWORD *)(v20 + 120);
  if ((_DWORD)v22)
  {
    v23 = 0;
    do
    {
      v24 = v20;
      if (*(_DWORD *)(v20 + 124) >= 4u)
        v24 = *(_QWORD *)v20;
      v25 = (_QWORD *)(v24 + 40 * v23);
      *(_QWORD *)(v2 + 40 * v23) = *v25;
      *v25 = 0;
      v26 = v2 + 40 * v23;
      sub_20BF4C200((_QWORD *)(v26 + 8), v25 + 1);
      sub_20BF4C200((_QWORD *)(v26 + 24), v25 + 3);
      v27 = v20;
      if (*(_DWORD *)(v20 + 124) >= 4u)
        v27 = *(_QWORD *)v20;
      v28 = (_QWORD *)(v27 + 40 * v23);
      sub_20BF4C2D8((uint64_t)(v28 + 3));
      result = sub_20BF4C2D8((uint64_t)(v28 + 1));
      if ((*v28 & 7) != 0)
      {
        v29 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
      ++v23;
      v22 = *(unsigned int *)(v20 + 120);
    }
    while (v23 < v22);
  }
  *(_QWORD *)v20 = v21;
  v31 = *(_DWORD *)(v2 + 120);
  *(_DWORD *)(v2 + 120) = v22;
  *(_DWORD *)(v20 + 120) = v31;
  v32 = *(_DWORD *)(v2 + 124);
  *(_DWORD *)(v2 + 124) = *(_DWORD *)(v20 + 124);
  *(_DWORD *)(v20 + 124) = v32;
  return result;
}

_QWORD *sub_20BFD3BAC(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a3;
  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  v6 = a1;
  v7 = a3;
  do
  {
    v9 = *v6;
    v6 += 5;
    v8 = v9;
    v10 = *v7;
    v7 += 5;
    *v4 = v10;
    *v3 = v8;
    sub_20BFD3C3C(v4 + 1, v3 + 1);
    sub_20BFD3C3C(v4 + 3, v3 + 3);
    v3 = v7;
    v4 = v6;
  }
  while (v6 != v5);
  return v5;
}

_QWORD *sub_20BFD3C3C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
  {
    v13 = 0;
    sub_20BF4C144((uint64_t)v14, (uint64_t)&v12);
    v4 = a1[1];
    v5 = ~*((_DWORD *)a1 + 2);
    v13 = v4;
    if ((v5 & 3) != 0)
      (*(void (**)(_QWORD *, uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a1, &v12);
    else
      v12 = *a1;
    a1[1] = 0;
    if (v15)
      (*(void (**)(_BYTE *))(v15 + 32))(v14);
    v6 = a2 + 1;
    if (!a2[1])
    {
      v8 = a1[1];
      if (v8 && (a1[1] & 3) != 3)
        (*(void (**)(_QWORD *))((v8 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      a1[1] = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v6 = a2 + 1;
    if (!a2[1])
      return a1;
    v13 = 0;
  }
  sub_20BF4C144((uint64_t)v14, (uint64_t)a1);
  v7 = *v6;
  a1[1] = *v6;
  if ((~*(_DWORD *)v6 & 3) != 0)
    (*(void (**)(_QWORD *, _QWORD *))((v7 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
  else
    *a1 = *a2;
  *v6 = 0;
  if (v15)
    (*(void (**)(_BYTE *))(v15 + 32))(v14);
LABEL_19:
  if (v13)
  {
    sub_20BF4C144((uint64_t)v14, (uint64_t)a2);
    v9 = v13;
    v10 = ~(_BYTE)v13;
    *v6 = v13;
    if ((v10 & 3) != 0)
      (*(void (**)(uint64_t *, _QWORD *))((v9 & 0xFFFFFFFFFFFFFFF8) + 40))(&v12, a2);
    else
      *a2 = v12;
    v13 = 0;
    if (v15)
      (*(void (**)(_BYTE *))(v15 + 32))(v14);
  }
  else
  {
    if (*v6 && (*v6 & 3) != 3)
      (*(void (**)(_QWORD *))((*v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
    *v6 = 0;
  }
  sub_20BF4C2D8((uint64_t)&v12);
  return a1;
}

void sub_20BFD3E3C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20BDC12F4(a1);
  _Unwind_Resume(a1);
}

void sub_20BFD3E84(uint64_t *a1)
{
  if (*a1)
  {
    sub_20BED2E50(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

int *sub_20BFD3EBC(int *a1, int *a2)
{
  int v4;

  v4 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(&v4, a1);
  sub_20BFD265C(&v4);
  return a1;
}

int *sub_20BFD3F10(int *a1, int *a2)
{
  int v4;

  v4 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(&v4, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v4);
  return a1;
}

uint64_t sub_20BFD3F68(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  __int128 v5;
  __int16 v6;

  v4 = sub_20BFD38A4((_DWORD *)a1, (_DWORD *)a2);
  sub_20BFD38DC(v4 + 1, (_DWORD *)(a2 + 4));
  sub_20BFD3794(a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 160), (_DWORD *)(a2 + 160));
  sub_20BFD38DC((_DWORD *)(a1 + 164), (_DWORD *)(a2 + 164));
  v5 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v5;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  v6 = *(_WORD *)(a2 + 192);
  *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
  *(_WORD *)(a1 + 192) = v6;
  return a1;
}

void sub_20BFD4008(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFD401C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_20BFD314C(a3, v4);
      v4 += 232;
      a3 += 232;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_20BFD4078(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 232;
        sub_20BFD2840((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *sub_20BFD40E4(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *result;
  void *v4;

  result = sub_20BFD412C();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::~SdfFieldKeys_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *sub_20BFD412C()
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)operator new(0x208uLL);
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::SdfFieldKeys_StaticTokenType(v0);
  return v0;
}

void sub_20BFD4158(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_20BFD416C(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *result;
  void *v4;

  result = sub_20BFD41B4();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType::~SdfChildrenKeys_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_20BFD41B4()
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)operator new(0x60uLL);
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType::SdfChildrenKeys_StaticTokenType(v0);
  return v0;
}

void sub_20BFD41E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFD41F4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAC18D0 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51BE10);
}

uint64_t sub_20BFD426C(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20BE7AA28((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 3;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_20BFD42D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BDECAB8(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

__int128 *sub_20BFD42EC(__int128 **a1, __int128 **a2, const void ***a3, const void ***a4, uint64_t **a5, uint64_t a6)
{
  __int128 *v9;
  __int128 *v10;
  const void **v12;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;
  BOOL v18;
  const void **v19;
  const void **v20;
  const void ***v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  const void **v25;
  const void **v26;
  char v28;

  v9 = *a1;
  v10 = *a2;
  if (*a1 == *a2)
  {
LABEL_31:
    v10 = v9;
    return sub_20BFD44EC((uint64_t)&v28, v9, v10, *a5);
  }
  v12 = *a3;
  if (*a3 != *a4)
  {
    while (1)
    {
      if (sub_20BDDDF74(a6, (const void **)v9 + 4, v12 + 4))
      {
        sub_20BFD449C(a5, *a1 + 2);
        v15 = *a1;
        v16 = (__int128 *)*((_QWORD *)*a1 + 1);
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = *(__int128 **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (__int128 *)*((_QWORD *)v15 + 2);
            v18 = *(_QWORD *)v17 == (_QWORD)v15;
            v15 = v17;
          }
          while (!v18);
        }
        *a1 = v17;
      }
      else
      {
        if (sub_20BDDDF74(a6, *a3 + 4, (const void **)*a1 + 4))
        {
          v19 = *a3;
          v20 = (const void **)(*a3)[1];
          if (v20)
          {
            do
            {
              v21 = (const void ***)v20;
              v20 = (const void **)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v21 = (const void ***)v19[2];
              v18 = *v21 == v19;
              v19 = (const void **)v21;
            }
            while (!v18);
          }
        }
        else
        {
          v22 = *a1;
          v23 = (__int128 *)*((_QWORD *)*a1 + 1);
          if (v23)
          {
            do
            {
              v24 = v23;
              v23 = *(__int128 **)v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = (__int128 *)*((_QWORD *)v22 + 2);
              v18 = *(_QWORD *)v24 == (_QWORD)v22;
              v22 = v24;
            }
            while (!v18);
          }
          *a1 = v24;
          v25 = *a3;
          v26 = (const void **)(*a3)[1];
          if (v26)
          {
            do
            {
              v21 = (const void ***)v26;
              v26 = (const void **)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              v21 = (const void ***)v25[2];
              v18 = *v21 == v25;
              v25 = (const void **)v21;
            }
            while (!v18);
          }
        }
        *a3 = (const void **)v21;
      }
      v9 = *a1;
      v10 = *a2;
      if (*a1 == *a2)
        break;
      v12 = *a3;
      if (*a3 == *a4)
        return sub_20BFD44EC((uint64_t)&v28, v9, v10, *a5);
    }
    goto LABEL_31;
  }
  return sub_20BFD44EC((uint64_t)&v28, v9, v10, *a5);
}

uint64_t **sub_20BFD449C(uint64_t **a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *a1;
  v5 = (*a1)[1];
  v4 = (*a1)[2];
  v6 = *a1;
  if (v5 >= v4)
  {
    v7 = sub_20BE4EE50(v6, a2);
  }
  else
  {
    sub_20BE4EDF4(v6, a2);
    v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

__int128 *sub_20BFD44EC(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t *a4)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  BOOL v8;
  uint64_t *v10;

  v4 = a2;
  v10 = a4;
  if (a2 == a3)
    return a2;
  v5 = a3;
  do
  {
    sub_20BFD449C(&v10, v4 + 2);
    v6 = (__int128 *)*((_QWORD *)v4 + 1);
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = *(__int128 **)v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (__int128 *)*((_QWORD *)v4 + 2);
        v8 = *(_QWORD *)v7 == (_QWORD)v4;
        v4 = v7;
      }
      while (!v8);
    }
    v4 = v7;
  }
  while (v7 != v5);
  return v5;
}

uint64_t sub_20BFD4578(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAC1926 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524700);
}

_QWORD *sub_20BFD45F0(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BE90F0C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20BFD464C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFD4668(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 702;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>"
            "::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

_QWORD *sub_20BFD46DC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)sub_20BFD4668((uint64_t)a1);
  if ((_DWORD)result)
    return sub_20BFD4738(*a1, a2, (uint64_t)a3);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

_QWORD *sub_20BFD4738@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  __int128 v7;

  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v6 = *result + 24 * a2;
  if (*(char *)(v6 + 23) < 0)
    return sub_20BDDBFAC((_BYTE *)a3, *(void **)v6, *(_QWORD *)(v6 + 8));
  v7 = *(_OWORD *)v6;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v6 + 16);
  *(_OWORD *)a3 = v7;
  return result;
}

uint64_t sub_20BFD479C(uint64_t *a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  void *v20[5];

  v4 = *a1;
  v5 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x11A7B9611A7B961)
    sub_20BDDF694();
  v8 = (uint64_t)(a1 + 2);
  v9 = 0x34F72C234F72C235 * ((a1[2] - v4) >> 3);
  if (2 * v9 > v6)
    v6 = 2 * v9;
  if (v9 >= 0x8D3DCB08D3DCB0)
    v10 = 0x11A7B9611A7B961;
  else
    v10 = v6;
  v20[4] = a1 + 2;
  if (v10)
    v11 = (char *)sub_20BFD497C(v8, v10);
  else
    v11 = 0;
  v12 = &v11[232 * v5];
  v20[0] = v11;
  v20[1] = v12;
  v20[3] = &v11[232 * v10];
  v13 = *a3;
  *(_QWORD *)v12 = **a3;
  v14 = v13[1];
  *((_QWORD *)v12 + 1) = v14;
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = &v11[232 * v5];
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_DWORD *)v17 + 55) = 1;
  *((_QWORD *)v17 + 28) = 0;
  v20[2] = v12 + 232;
  sub_20BFD4908(a1, v20);
  v18 = a1[1];
  sub_20BFD4B64(v20);
  return v18;
}

void sub_20BFD48F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD4B64((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFD4908(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BFD49C4((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20BFD497C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962)
    sub_20BDDF5B4();
  return operator new(232 * a2);
}

uint64_t sub_20BFD49C4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 29;
      sub_20BFD4A7C((_QWORD *)(v7 - 232), v9);
      v7 = *((_QWORD *)&v15 + 1) - 232;
      *((_QWORD *)&v15 + 1) -= 232;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20BFD4AE0((uint64_t)v12);
  return v10;
}

void sub_20BFD4A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BFD4AE0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFD4A7C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeList::SdfChangeList((pxrInternal__aapl__pxrReserved__::SdfChangeList *)(a1 + 2), (const pxrInternal__aapl__pxrReserved__::SdfChangeList *)(a2 + 2));
  return a1;
}

void sub_20BFD4AC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B36C(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFD4AE0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BFD4B14((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20BFD4B14(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20BFD2840(v3, v1);
      v1 += 232;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20BFD4B64(void **a1)
{
  sub_20BFD4B94((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_20BFD4B94(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 232;
      result = sub_20BFD2840(v4, v1 - 232);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  unint64_t v6;
  _OWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  std::string v16;
  uint64_t v17;
  int v18;
  void *__p[2];
  uint64_t v20;
  const char *v21;
  char v22;
  int v23;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAAFFB5 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v16);
  v2 = std::string::insert(&v16, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v20 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v17, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v10 = operator new(0x20uLL);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::Sdf_CleanupTracker(v10, v11, v12);
      v14 = atomic_load(a1);
      if (v14)
      {
        if (v10 != (_OWORD *)v14)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v20 = 84;
          v21 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTra"
                "cker>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker]";
          v22 = 0;
          v23 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v13);
        }
      }
      else
      {
        do
          v15 = __ldaxr(a1);
        while (__stlxr((unint64_t)v10, a1));
        if (v15)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v20 = 88;
          v21 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTra"
                "cker>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker]";
          v22 = 0;
          v23 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v13, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker*> &)::isInitializing);
  }
  v6 = atomic_load(a1);
  while (v18--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v17);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_18Sdf_CleanupTrackerEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20BFD4DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTrack"
            "er>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::DeleteInstance()
{
  unint64_t i;
  unint64_t v1;
  const void *v2;
  unsigned int **v3;
  void **v4;

  for (i = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance);
        i;
        i = v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance);
    if (v1 == i)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance))
      {
        v4 = (void **)(i + 8);
        sub_20BFD2B90(&v4);
        v3 = sub_20BEBCE60((unsigned int **)i, v2);
        operator delete(v3);
        return;
      }
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
}

void pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::~Sdf_CleanupTracker(unsigned int **this)
{
  const void *v2;
  void **v3;

  v3 = (void **)(this + 1);
  sub_20BFD2B90(&v3);
  sub_20BEBCE60(this, v2);
}

{
  const void *v2;
  void **v3;

  v3 = (void **)(this + 1);
  sub_20BFD2B90(&v3);
  sub_20BEBCE60(this, v2);
}

unint64_t pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance(pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *this)
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance);
  return result;
}

_OWORD *pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::Sdf_CleanupTracker(_OWORD *this, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  *this = 0u;
  this[1] = 0u;
  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance);
  while (__stlxr((unint64_t)this, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTrack"
            "er>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return this;
}

void sub_20BFD502C(_Unwind_Exception *a1)
{
  unsigned int **v1;
  uint64_t v2;
  const void *v4;

  *(_QWORD *)(v2 - 24) = v1 + 1;
  sub_20BFD2B90((void ***)(v2 - 24));
  sub_20BEBCE60(v1, v4);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(uint64_t a1, unsigned int **a2)
{
  char *result;
  unsigned int **v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  char IsDormant;
  unsigned int *v8;
  unsigned int v9;

  result = (char *)pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler::IsCleanupEnabled((pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler *)a1);
  if ((_DWORD)result)
  {
    v5 = *(unsigned int ***)(a1 + 8);
    v6 = *(pxrInternal__aapl__pxrReserved__::Sdf_Identity ***)(a1 + 16);
    if (v5 != (unsigned int **)v6)
    {
      IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v6 - 1);
      v5 = *(unsigned int ***)(a1 + 16);
      if ((IsDormant & 1) == 0)
      {
        result = (char *)pxrInternal__aapl__pxrReserved__::SdfSpec::operator==(v5 - 1, a2);
        if ((result & 1) != 0)
          return result;
        v5 = *(unsigned int ***)(a1 + 16);
      }
    }
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24))
    {
      result = sub_20BFD2FCC((unsigned int ***)(a1 + 8), a2);
    }
    else
    {
      v8 = *a2;
      *v5 = *a2;
      if (v8)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
      result = (char *)(v5 + 1);
    }
    *(_QWORD *)(a1 + 16) = result;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::CleanupSpecs(pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *this)
{
  uint64_t i;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t **v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;

  for (i = *((_QWORD *)this + 2); *((_QWORD *)this + 1) != i; i = *((_QWORD *)this + 2))
  {
    v3 = *(unsigned int **)(i - 8);
    v14 = v3;
    if (v3)
    {
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
      i = *((_QWORD *)this + 2);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(i - 8));
    *((_QWORD *)this + 2) = v5;
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v14) & 1) == 0)
    {
      v6 = (uint64_t **)sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v14);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v6, &v12);
      v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v12);
      pxrInternal__aapl__pxrReserved__::SdfLayer::ScheduleRemoveIfInert(v7, &v14);
      v8 = v13;
      if (v13)
      {
        v9 = (unsigned int *)(v13 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
  }
}

void sub_20BFD51F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, unsigned int *a4, ...)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    v5 = a4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)a4 + 8))(a4);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity **sub_20BFD5244(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1)
{
  char *v3;
  _QWORD *v4;
  _QWORD v5[2];
  char v6;
  _QWORD v7[4];
  char v8;
  int v9;

  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    v7[2] = 96;
    v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfSpec>::operator->"
            "() const [T = pxrInternal__aapl__pxrReserved__::SdfSpec]";
    v8 = 0;
    v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAAFF88 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v5);
    if (v6 >= 0)
      v4 = v5;
    else
      v4 = (_QWORD *)v5[0];
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"Dereferenced an invalid %s", v3, v4);
  }
  return a1;
}

void sub_20BFD52E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x20BFD5260);
}

void sub_20BFD5300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor::Sdf_AttributeConnectionListEditor(_QWORD *a1, unsigned int **a2, unsigned int **a3)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  uint64_t result;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = sub_20BFD669C((uint64_t)a1, a2, (uint64_t *)v6 + 7, a3);
  *a1 = off_24C524720;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor::~Sdf_AttributeConnectionListEditor(pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor::~Sdf_AttributeConnectionListEditor(this);
  operator delete(v1);
}

{
  void **v2;

  *(_QWORD *)this = &unk_24C5248B8;
  v2 = (void **)((char *)this + 160);
  sub_20BFD6F90(&v2);
  v2 = (void **)((char *)this + 136);
  sub_20BFD6F90(&v2);
  v2 = (void **)((char *)this + 112);
  sub_20BFD6F90(&v2);
  v2 = (void **)((char *)this + 88);
  sub_20BFD6F90(&v2);
  v2 = (void **)((char *)this + 64);
  sub_20BFD6F90(&v2);
  v2 = (void **)((char *)this + 40);
  sub_20BFD6F90(&v2);
  sub_20BFD6AD8(this);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor::_OnEdit(_DWORD *a1, int a2, const pxrInternal__aapl__pxrReserved__::SdfPath **a3, const pxrInternal__aapl__pxrReserved__::SdfPath **a4)
{
  return sub_20BFD53B8(a1, a2, 2, a3, a4);
}

_DWORD *sub_20BFD53B8(_DWORD *result, int a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::SdfPath **a4, const pxrInternal__aapl__pxrReserved__::SdfPath **a5)
{
  uint64_t v8;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  uint64_t v14;
  char *v15;
  _DWORD *v16;
  uint64_t v17;
  char *v18;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  const char *Text;
  uint64_t v22;
  char *v23;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v24;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v25;
  const char *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  __int128 j;
  __int128 i;
  uint64_t v33;
  void **v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42[2];
  uint64_t *v43;
  _QWORD *v44[2];
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  __int128 *p_i;
  __int128 *v50;
  uint64_t *v51;
  _QWORD *v52;

  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v8 = (uint64_t)result;
    sub_20BFD711C((uint64_t)result, &v47);
    sub_20BFD717C(v8, &v45);
    v44[0] = 0;
    v44[1] = 0;
    v42[1] = 0;
    v43 = (uint64_t *)v44;
    v41 = (uint64_t *)v42;
    v42[0] = 0;
    v9 = *a4;
    v10 = a4[1];
    v11 = *a5;
    v12 = a5[1];
    if (v9 != v10 && v11 != v12)
    {
      do
      {
        if (*(_QWORD *)v9 != *(_QWORD *)v11)
          break;
        v9 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
        v11 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v11 + 8);
        if (v9 == v10)
          break;
      }
      while (v11 != v12);
    }
    while (v9 != v10)
    {
      sub_20BFD72BC(&v43, v44, v9, v9);
      v9 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
    }
    while (v11 != v12)
    {
      sub_20BFD72BC(&v41, v42, v11, v11);
      v11 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v11 + 8);
    }
    v39 = 0uLL;
    v40 = 0;
    *(_QWORD *)&i = v43;
    *(_QWORD *)&j = v44;
    v51 = (uint64_t *)v42;
    v52 = v41;
    v50 = &v39;
    sub_20BFD7680((uint64_t)&i, (_QWORD **)&j, (uint64_t)&v52, &v51, (uint64_t **)&v50);
    for (i = v39; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BFD7240(&i))
    {
      v16 = (_DWORD *)sub_20BFD71C4((uint64_t *)&i, v14, v15);
      if ((pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::RemoveChild(&v45, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v47, v16) & 1) == 0)
      {
        v19 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&i, v17, v18);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)&v47, v19, &j);
        v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v45);
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j))
        {
          v34 = (void **)"sdf/connectionListEditor.cpp";
          v35 = "_OnEditShared";
          v36 = 105;
          v37 = "void pxrInternal__aapl__pxrReserved__::Sdf_ConnectionListEditor<pxrInternal__aapl__pxrReserved__::Sdf_At"
                "tributeConnectionChildPolicy>::_OnEditShared(SdfListOpType, SdfSpecType, const std::vector<SdfPath> &, c"
                "onst std::vector<SdfPath> &) const [ConnectionChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_Attrib"
                "uteConnectionChildPolicy]";
          v38 = 0;
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to remove spec at <%s>", Text);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
        sub_20BFD265C(&j);
      }
    }
    i = 0uLL;
    v33 = 0;
    *(_QWORD *)&j = v41;
    v51 = v43;
    v52 = v42;
    p_i = &i;
    v50 = (__int128 *)v44;
    sub_20BFD7680((uint64_t)&j, &v52, (uint64_t)&v51, &v50, (uint64_t **)&p_i);
    for (j = i; (_QWORD)j != *((_QWORD *)&j + 1); sub_20BFD7240(&j))
    {
      v24 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&j, v22, v23);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)&v47, v24, &v52);
      v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v45);
      if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v52) & 1) == 0&& (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::CreateSpec((uint64_t)&v45, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v52, a3, 1) & 1) == 0)
      {
        v34 = (void **)"sdf/connectionListEditor.cpp";
        v35 = "_OnEditShared";
        v36 = 123;
        v37 = "void pxrInternal__aapl__pxrReserved__::Sdf_ConnectionListEditor<pxrInternal__aapl__pxrReserved__::Sdf_Attr"
              "ibuteConnectionChildPolicy>::_OnEditShared(SdfListOpType, SdfSpecType, const std::vector<SdfPath> &, const"
              " std::vector<SdfPath> &) const [ConnectionChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeCon"
              "nectionChildPolicy]";
        v38 = 0;
        v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v52);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec at <%s>", v26);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
      sub_20BFD265C(&v52);
    }
    v34 = (void **)&i;
    sub_20BFD6F90(&v34);
    v34 = (void **)&v39;
    sub_20BFD6F90(&v34);
    sub_20BFD7C28((uint64_t)&v41, v42[0]);
    sub_20BFD7C28((uint64_t)&v43, v44[0]);
    v27 = v46;
    if (v46)
    {
      v28 = (unsigned int *)(v46 + 8);
      do
      {
        v29 = __ldxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v48);
    return sub_20BFD265C(&v47);
  }
  return result;
}

void sub_20BFD573C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,_QWORD *a26,uint64_t a27,char a28,_QWORD *a29)
{
  uint64_t v29;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;

  a16 = (void **)&a13;
  sub_20BFD6F90(&a16);
  a16 = (void **)&a21;
  sub_20BFD6F90(&a16);
  sub_20BFD7C28((uint64_t)&a25, a26);
  sub_20BFD7C28((uint64_t)&a28, a29);
  v31 = *(unsigned int **)(v29 - 136);
  if (v31)
  {
    v32 = v31 + 2;
    do
    {
      v33 = __ldxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
      (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
  }
  sub_20BFD1A18((_DWORD *)(v29 - 124));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetListEditor::Sdf_RelationshipTargetListEditor(_QWORD *a1, unsigned int **a2, unsigned int **a3)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  uint64_t result;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  result = sub_20BFD669C((uint64_t)a1, a2, (uint64_t *)v6 + 53, a3);
  *a1 = off_24C5247A8;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetListEditor::~Sdf_RelationshipTargetListEditor(pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetListEditor *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor::~Sdf_AttributeConnectionListEditor(this);
  operator delete(v1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetListEditor::_OnEdit(_DWORD *a1, int a2, const pxrInternal__aapl__pxrReserved__::SdfPath **a3, const pxrInternal__aapl__pxrReserved__::SdfPath **a4)
{
  return sub_20BFD58AC(a1, a2, 9, a3, a4);
}

_DWORD *sub_20BFD58AC(_DWORD *result, int a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::SdfPath **a4, const pxrInternal__aapl__pxrReserved__::SdfPath **a5)
{
  uint64_t v8;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  uint64_t v14;
  char *v15;
  _DWORD *v16;
  uint64_t v17;
  char *v18;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  const char *Text;
  uint64_t v22;
  char *v23;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v24;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v25;
  const char *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  __int128 j;
  __int128 i;
  uint64_t v33;
  void **v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42[2];
  uint64_t *v43;
  _QWORD *v44[2];
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  __int128 *p_i;
  __int128 *v50;
  uint64_t *v51;
  _QWORD *v52;

  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v8 = (uint64_t)result;
    sub_20BFD711C((uint64_t)result, &v47);
    sub_20BFD717C(v8, &v45);
    v44[0] = 0;
    v44[1] = 0;
    v42[1] = 0;
    v43 = (uint64_t *)v44;
    v41 = (uint64_t *)v42;
    v42[0] = 0;
    v9 = *a4;
    v10 = a4[1];
    v11 = *a5;
    v12 = a5[1];
    if (v9 != v10 && v11 != v12)
    {
      do
      {
        if (*(_QWORD *)v9 != *(_QWORD *)v11)
          break;
        v9 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
        v11 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v11 + 8);
        if (v9 == v10)
          break;
      }
      while (v11 != v12);
    }
    while (v9 != v10)
    {
      sub_20BFD72BC(&v43, v44, v9, v9);
      v9 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
    }
    while (v11 != v12)
    {
      sub_20BFD72BC(&v41, v42, v11, v11);
      v11 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v11 + 8);
    }
    v39 = 0uLL;
    v40 = 0;
    *(_QWORD *)&i = v43;
    *(_QWORD *)&j = v44;
    v51 = (uint64_t *)v42;
    v52 = v41;
    v50 = &v39;
    sub_20BFD7680((uint64_t)&i, (_QWORD **)&j, (uint64_t)&v52, &v51, (uint64_t **)&v50);
    for (i = v39; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BFD7240(&i))
    {
      v16 = (_DWORD *)sub_20BFD71C4((uint64_t *)&i, v14, v15);
      if ((pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::RemoveChild(&v45, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v47, v16) & 1) == 0)
      {
        v19 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&i, v17, v18);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)&v47, v19, &j);
        v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v45);
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j))
        {
          v34 = (void **)"sdf/connectionListEditor.cpp";
          v35 = "_OnEditShared";
          v36 = 105;
          v37 = "void pxrInternal__aapl__pxrReserved__::Sdf_ConnectionListEditor<pxrInternal__aapl__pxrReserved__::Sdf_Re"
                "lationshipTargetChildPolicy>::_OnEditShared(SdfListOpType, SdfSpecType, const std::vector<SdfPath> &, co"
                "nst std::vector<SdfPath> &) const [ConnectionChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_Relatio"
                "nshipTargetChildPolicy]";
          v38 = 0;
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to remove spec at <%s>", Text);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
        sub_20BFD265C(&j);
      }
    }
    i = 0uLL;
    v33 = 0;
    *(_QWORD *)&j = v41;
    v51 = v43;
    v52 = v42;
    p_i = &i;
    v50 = (__int128 *)v44;
    sub_20BFD7680((uint64_t)&j, &v52, (uint64_t)&v51, &v50, (uint64_t **)&p_i);
    for (j = i; (_QWORD)j != *((_QWORD *)&j + 1); sub_20BFD7240(&j))
    {
      v24 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&j, v22, v23);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)&v47, v24, &v52);
      v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v45);
      if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v52) & 1) == 0&& (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::CreateSpec((uint64_t)&v45, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v52, a3, 1) & 1) == 0)
      {
        v34 = (void **)"sdf/connectionListEditor.cpp";
        v35 = "_OnEditShared";
        v36 = 123;
        v37 = "void pxrInternal__aapl__pxrReserved__::Sdf_ConnectionListEditor<pxrInternal__aapl__pxrReserved__::Sdf_Rela"
              "tionshipTargetChildPolicy>::_OnEditShared(SdfListOpType, SdfSpecType, const std::vector<SdfPath> &, const "
              "std::vector<SdfPath> &) const [ConnectionChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipT"
              "argetChildPolicy]";
        v38 = 0;
        v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v52);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec at <%s>", v26);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
      sub_20BFD265C(&v52);
    }
    v34 = (void **)&i;
    sub_20BFD6F90(&v34);
    v34 = (void **)&v39;
    sub_20BFD6F90(&v34);
    sub_20BFD7C28((uint64_t)&v41, v42[0]);
    sub_20BFD7C28((uint64_t)&v43, v44[0]);
    v27 = v46;
    if (v46)
    {
      v28 = (unsigned int *)(v46 + 8);
      do
      {
        v29 = __ldxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v48);
    return sub_20BFD265C(&v47);
  }
  return result;
}

void sub_20BFD5C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,_QWORD *a26,uint64_t a27,char a28,_QWORD *a29)
{
  uint64_t v29;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;

  a16 = (void **)&a13;
  sub_20BFD6F90(&a16);
  a16 = (void **)&a21;
  sub_20BFD6F90(&a16);
  sub_20BFD7C28((uint64_t)&a25, a26);
  sub_20BFD7C28((uint64_t)&a28, a29);
  v31 = *(unsigned int **)(v29 - 136);
  if (v31)
  {
    v32 = v31 + 2;
    do
    {
      v33 = __ldxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
      (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
  }
  sub_20BFD1A18((_DWORD *)(v29 - 124));
  _Unwind_Resume(a1);
}

uint64_t sub_20BFD5D04(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

double sub_20BFD5D0C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  char *v4;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v3 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    v4 = "List editor is expired";
  }
  else
  {
    v5 = sub_20BFD5244(v3);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v5) & 1) != 0)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      return result;
    }
    v4 = "Permission denied";
  }
  sub_20BDDC0E4(&v7, v4);
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

BOOL sub_20BFD5D90(uint64_t a1, void *lpsrc)
{
  _BYTE *v3;
  _BYTE *v4;
  _QWORD v6[4];
  char v7;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C524820, (const struct __class_type_info *)&unk_24C524830, 0);
  v4 = v3;
  if (v3)
  {
    sub_20BFD7C70(a1, v3 + 32, 0);
  }
  else
  {
    v6[0] = "sdf/listOpListEditor.h";
    v6[1] = "CopyEdits";
    v6[2] = 221;
    v6[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfPat"
            "hKeyPolicy>::CopyEdits(const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not copy from list editor of different type");
  }
  return v4 != 0;
}

uint64_t sub_20BFD5E34(uint64_t a1)
{
  _BYTE v3[8];
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)v3);
  sub_20BFD7C70(a1, v3, 0);
  v10 = (void **)&v9;
  sub_20BFD6F90(&v10);
  v10 = (void **)&v8;
  sub_20BFD6F90(&v10);
  v10 = (void **)&v7;
  sub_20BFD6F90(&v10);
  v10 = (void **)&v6;
  sub_20BFD6F90(&v10);
  v10 = (void **)&v5;
  sub_20BFD6F90(&v10);
  v10 = (void **)&v4;
  sub_20BFD6F90(&v10);
  return 1;
}

void sub_20BFD5ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20BFD6A50(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFD5EEC(uint64_t a1)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)&v3);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ClearAndMakeExplicit(&v3);
  sub_20BFD7C70(a1, &v3, 0);
  v10 = (void **)&v9;
  sub_20BFD6F90(&v10);
  v10 = (void **)&v8;
  sub_20BFD6F90(&v10);
  v10 = (void **)&v7;
  sub_20BFD6F90(&v10);
  v10 = (void **)&v6;
  sub_20BFD6F90(&v10);
  v10 = (void **)&v5;
  sub_20BFD6F90(&v10);
  v10 = (void **)&v4;
  sub_20BFD6F90(&v10);
  return 1;
}

void sub_20BFD5F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20BFD6A50(&a9);
  _Unwind_Resume(a1);
}

void sub_20BFD5FAC(void **a1, void **a2)
{
  void ***v4;
  uint64_t v5;
  __int128 v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12[3];
  void ***v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  sub_20BFD6BC4((uint64_t)v6, (uint64_t)(a1 + 4));
  v12[0] = (void **)&unk_24C524A90;
  v12[1] = a1;
  v12[2] = a2;
  v13 = v12;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ModifyOperations(v6, (uint64_t)v12, 1);
  v4 = v13;
  if (v13 == v12)
  {
    v5 = 4;
    v4 = v12;
    goto LABEL_5;
  }
  if (v13)
  {
    v5 = 5;
LABEL_5:
    ((void (*)(void))(*v4)[v5])();
  }
  sub_20BFD7C70((uint64_t)a1, v6, 0);
  v12[0] = (void **)&v11;
  sub_20BFD6F90(v12);
  v12[0] = (void **)&v10;
  sub_20BFD6F90(v12);
  v12[0] = (void **)&v9;
  sub_20BFD6F90(v12);
  v12[0] = (void **)&v8;
  sub_20BFD6F90(v12);
  v12[0] = (void **)&v7;
  sub_20BFD6F90(v12);
  v12[0] = (void **)v6 + 1;
  sub_20BFD6F90(v12);
}

void sub_20BFD60DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20BFD6A50(&a9);
  _Unwind_Resume(a1);
}

void sub_20BFD612C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations(a1 + 32, a2, a3);
}

uint64_t sub_20BFD6134(uint64_t a1, int a2, unint64_t a3, uint64_t a4, _DWORD **a5)
{
  uint64_t v10;
  _DWORD *v12[3];
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void **v21;

  v20 = a2;
  sub_20BFD6BC4((uint64_t)&v13, a1 + 32);
  sub_20BFD8B30((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 24), a5, v12);
  v10 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ReplaceOperations(&v13, a2, a3, a4, v12);
  v21 = (void **)v12;
  sub_20BFD6F90(&v21);
  if ((v10 & 1) != 0)
    sub_20BFD7C70(a1, &v13, &v20);
  v12[0] = &v19;
  sub_20BFD6F90((void ***)v12);
  v12[0] = &v18;
  sub_20BFD6F90((void ***)v12);
  v12[0] = &v17;
  sub_20BFD6F90((void ***)v12);
  v12[0] = &v16;
  sub_20BFD6F90((void ***)v12);
  v12[0] = &v15;
  sub_20BFD6F90((void ***)v12);
  v12[0] = &v14;
  sub_20BFD6F90((void ***)v12);
  return v10;
}

void sub_20BFD6240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD6A50((void **)va);
  _Unwind_Resume(a1);
}

void sub_20BFD626C(uint64_t a1, int a2, void *lpsrc)
{
  void *v5;
  void *v6;
  char *v7;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;

  v14 = a2;
  v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C524820, (const struct __class_type_info *)&unk_24C524830, 0);
  if (v5)
  {
    v6 = v5;
    sub_20BFD6BC4((uint64_t)&v7, a1 + 32);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ComposeOperations(&v7, (uint64_t)v6 + 32, a2);
    sub_20BFD7C70(a1, &v7, &v14);
    v15 = (void **)&v13;
    sub_20BFD6F90(&v15);
    v15 = (void **)&v12;
    sub_20BFD6F90(&v15);
    v15 = (void **)&v11;
    sub_20BFD6F90(&v15);
    v15 = (void **)&v10;
    sub_20BFD6F90(&v15);
    v15 = (void **)&v9;
    sub_20BFD6F90(&v15);
    v15 = (void **)v8;
    sub_20BFD6F90(&v15);
  }
  else
  {
    v7 = "sdf/listOpListEditor.h";
    v8[0] = "ApplyList";
    v8[1] = 296;
    v8[2] = "virtual void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfPat"
            "hKeyPolicy>::ApplyList(SdfListOpType, const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserv"
            "ed__::SdfPathKeyPolicy]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot apply from list editor of different type");
  }
}

void sub_20BFD6398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD6A50((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFD63AC(uint64_t a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::SdfPath **a4)
{
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  BOOL v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  uint64_t *FieldDefinition;
  uint64_t *v15;
  uint64_t v16;
  void **v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *Text;
  unint64_t v23;
  const char *v24;
  uint64_t *WhyNot;
  const char *v26;
  void *__p[2];
  char v28;
  char v29;
  int v30;
  int v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  char v36;

  v5 = a3[1];
  v6 = *a4;
  v7 = a4[1];
  v8 = *a3 == v5 || v6 == v7;
  v9 = *a4;
  if (!v8)
  {
    v20 = *a3 + 8;
    v9 = *a4;
    do
    {
      if (*(_QWORD *)(v20 - 8) != *(_QWORD *)v9)
        break;
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
      if (v20 == v5)
        break;
      v20 += 8;
    }
    while (v9 != v7);
  }
  if (v9 != v7)
  {
    v10 = v9;
    while (v6 == v10)
    {
LABEL_12:
      v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8);
      if (v10 == v7)
        goto LABEL_13;
    }
    v11 = *a4;
    while (*(_QWORD *)v10 != *(_QWORD *)v11)
    {
      v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v11 + 8);
      if (v11 == v10)
        goto LABEL_12;
    }
    v32 = "sdf/listEditor.h";
    v33 = "_ValidateEdit";
    v34 = 262;
    v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfPathKeyPoli"
          "cy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolicy = px"
          "rInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
    v36 = 0;
    v17 = __p;
    sub_20BFD8C8C(v10);
    if (v28 < 0)
      v17 = (void **)__p[0];
    v18 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v18)
    {
      v19 = (const char *)(v18 + 16);
      if (*(char *)(v18 + 39) < 0)
        v19 = *(const char **)v19;
    }
    else
    {
      v19 = "";
    }
    sub_20BFD711C(a1, &v30);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate item '%s' not allowed for field '%s' on <%s>", (const char *)v17, v19, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
    sub_20BFD265C(&v30);
LABEL_30:
    if (v28 < 0)
      operator delete(__p[0]);
    return 0;
  }
LABEL_13:
  v12 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v12);
  FieldDefinition = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (FieldDefinition)
  {
    if (v9 != v7)
    {
      v15 = FieldDefinition;
      while (1)
      {
        sub_20BFD8D54(v15, v9, __p);
        if (v29)
          break;
        v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
        if (v9 == v7)
          return 1;
      }
      v32 = "sdf/listEditor.h";
      v33 = "_ValidateEdit";
      v34 = 279;
      v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfPathKeyPo"
            "licy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolicy "
            "= pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
      v36 = 0;
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
      if (*((char *)WhyNot + 23) >= 0)
        v26 = (const char *)WhyNot;
      else
        v26 = (const char *)*WhyNot;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"%s", v26);
      if (!v29)
        return 0;
      goto LABEL_30;
    }
    return 1;
  }
  else
  {
    v32 = "sdf/listEditor.h";
    v33 = "_ValidateEdit";
    v34 = 273;
    v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfPathKeyPoli"
          "cy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolicy = px"
          "rInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
    v36 = 0;
    v23 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v23)
    {
      v24 = (const char *)(v23 + 16);
      if (*(char *)(v23 + 39) < 0)
        v24 = *(const char **)v24;
    }
    else
    {
      v24 = "";
    }
    v16 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"No field definition for field '%s'", v24);
  }
  return v16;
}

void sub_20BFD6654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFD6694(uint64_t a1, int a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems(a1 + 32, a2);
}

uint64_t sub_20BFD669C(uint64_t a1, unsigned int **a2, uint64_t *a3, unsigned int **a4)
{
  _QWORD *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  void **v29;

  v6 = sub_20BFD6910((_QWORD *)a1, a2, a3, a4);
  *v6 = &unk_24C5248B8;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)(v6 + 4));
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2) & 1) == 0)
  {
    v7 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)v9);
    sub_20BFD698C(v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (uint64_t)v9, (uint64_t)v16);
    *(_BYTE *)(a1 + 32) = v16[0];
    sub_20BFD7014((_QWORD *)(a1 + 40));
    *(_OWORD *)(a1 + 40) = v17;
    *(_QWORD *)(a1 + 56) = v18;
    v18 = 0;
    v17 = 0uLL;
    sub_20BFD7014((_QWORD *)(a1 + 64));
    *(_OWORD *)(a1 + 64) = v19;
    *(_QWORD *)(a1 + 80) = v20;
    v20 = 0;
    v19 = 0uLL;
    sub_20BFD7014((_QWORD *)(a1 + 88));
    *(_OWORD *)(a1 + 88) = v21;
    *(_QWORD *)(a1 + 104) = v22;
    v22 = 0;
    v21 = 0uLL;
    sub_20BFD7014((_QWORD *)(a1 + 112));
    *(_OWORD *)(a1 + 112) = v23;
    *(_QWORD *)(a1 + 128) = v24;
    v24 = 0;
    v23 = 0uLL;
    sub_20BFD7014((_QWORD *)(a1 + 136));
    *(_OWORD *)(a1 + 136) = v25;
    *(_QWORD *)(a1 + 152) = v26;
    v26 = 0;
    v25 = 0uLL;
    sub_20BFD7014((_QWORD *)(a1 + 160));
    *(_OWORD *)(a1 + 160) = v27;
    *(_QWORD *)(a1 + 176) = v28;
    v28 = 0;
    v27 = 0uLL;
    v29 = (void **)&v27;
    sub_20BFD6F90(&v29);
    v29 = (void **)&v25;
    sub_20BFD6F90(&v29);
    v29 = (void **)&v23;
    sub_20BFD6F90(&v29);
    v29 = (void **)&v21;
    sub_20BFD6F90(&v29);
    v29 = (void **)&v19;
    sub_20BFD6F90(&v29);
    v29 = (void **)&v17;
    sub_20BFD6F90(&v29);
    v29 = (void **)&v15;
    sub_20BFD6F90(&v29);
    v29 = (void **)&v14;
    sub_20BFD6F90(&v29);
    v29 = (void **)&v13;
    sub_20BFD6F90(&v29);
    v29 = (void **)&v12;
    sub_20BFD6F90(&v29);
    v29 = (void **)&v11;
    sub_20BFD6F90(&v29);
    v29 = (void **)&v10;
    sub_20BFD6F90(&v29);
  }
  return a1;
}

void sub_20BFD68D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  sub_20BFD6A50((void **)va);
  sub_20BFD6A50(v3);
  sub_20BFD6AD8(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFD6910(_QWORD *result, unsigned int **a2, uint64_t *a3, unsigned int **a4)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;

  v4 = *a2;
  *result = &unk_24C524940;
  result[1] = v4;
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *a3;
  result[2] = *a3;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  v9 = *a4;
  result[3] = *a4;
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  return result;
}

uint64_t sub_20BFD698C@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
  if (v8 && (sub_20BFD6B4C((pxrInternal__aapl__pxrReserved__::VtValue *)&v7) & 1) != 0)
  {
    if ((v8 & 4) != 0)
      a3 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(&v7);
    else
      a3 = v7;
  }
  sub_20BFD6BC4(a4, a3);
  return sub_20BF4C2D8((uint64_t)&v7);
}

void sub_20BFD6A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void **sub_20BFD6A50(void **a1)
{
  void **v3;

  v3 = a1 + 16;
  sub_20BFD6F90(&v3);
  v3 = a1 + 13;
  sub_20BFD6F90(&v3);
  v3 = a1 + 10;
  sub_20BFD6F90(&v3);
  v3 = a1 + 7;
  sub_20BFD6F90(&v3);
  v3 = a1 + 4;
  sub_20BFD6F90(&v3);
  v3 = a1 + 1;
  sub_20BFD6F90(&v3);
  return a1;
}

_QWORD *sub_20BFD6AD8(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *a1 = &unk_24C524940;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 3));
  v2 = a1[2];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 1));
  return a1;
}

void sub_20BFD6B38(pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor::~Sdf_AttributeConnectionListEditor(a1);
  operator delete(v1);
}

uint64_t sub_20BFD6B4C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAB01A6 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C5249B8);
}

uint64_t sub_20BFD6BC4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_20BFD6D38((_QWORD *)(a1 + 8), *(_DWORD **)(a2 + 8), *(_DWORD **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_20BFD6D38((_QWORD *)(a1 + 32), *(_DWORD **)(a2 + 32), *(_DWORD **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_20BFD6D38((_QWORD *)(a1 + 56), *(_DWORD **)(a2 + 56), *(_DWORD **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BFD6D38((_QWORD *)(a1 + 80), *(_DWORD **)(a2 + 80), *(_DWORD **)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  sub_20BFD6D38((_QWORD *)(a1 + 104), *(_DWORD **)(a2 + 104), *(_DWORD **)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BFD6D38((_QWORD *)(a1 + 128), *(_DWORD **)(a2 + 128), *(_DWORD **)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
  return a1;
}

void sub_20BFD6CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD6F90((void ***)va);
  sub_20BFD6F90((void ***)va);
  sub_20BFD6F90((void ***)va);
  sub_20BFD6F90((void ***)va);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFD6D38(_QWORD *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BDDF654(result, a4);
    result = sub_20BFD6DBC((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20BFD6D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BFD6F90(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20BFD6DBC(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  _DWORD *v4;
  _DWORD *v6;
  _QWORD v8[3];
  char v9;
  _DWORD *v10;
  _DWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20BFD6E54(v4, v6);
      sub_20BFD6EA4(v4 + 1, v6 + 1);
      v6 += 2;
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20BFD6EE0((uint64_t)v8);
  return v4;
}

_DWORD *sub_20BFD6E54(_DWORD *a1, _DWORD *a2)
{
  unsigned int *v3;
  unsigned int v4;

  *a1 = *a2;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1))
  {
    v3 = (unsigned int *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1)
                        + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return a1;
}

_DWORD *sub_20BFD6EA4(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1))
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(a1);
  return a1;
}

uint64_t sub_20BFD6EE0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BFD6F14((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20BFD6F14(uint64_t *result)
{
  _DWORD **v1;
  _QWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)result[1];
  v1 = (_DWORD **)result[2];
  v3 = *v1;
  v4 = (_DWORD *)*v2;
  if (*v1 != (_DWORD *)*v2)
  {
    v5 = *result;
    do
    {
      v3 -= 2;
      result = (uint64_t *)sub_20BFD6F64(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

_DWORD *sub_20BFD6F64(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);
  return sub_20BFD265C(a2);
}

void sub_20BFD6F90(void ***a1)
{
  void **v1;
  _DWORD *v2;
  _DWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 2;
        sub_20BFD6F64((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20BFD7014(_QWORD *a1)
{
  _DWORD *v1;
  _DWORD *v3;
  _DWORD *v4;

  v1 = (_DWORD *)*a1;
  if (*a1)
  {
    v3 = (_DWORD *)a1[1];
    v4 = (_DWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 2;
        sub_20BFD6F64((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      v4 = (_DWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_DWORD *sub_20BFD711C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v5;

  v3 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)) & 1) != 0)
  {
    *(_QWORD *)a2 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a2);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a2 + 1);
  }
  else
  {
    v5 = sub_20BFD5244(v3);
    return pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v5, a2);
  }
}

uint64_t sub_20BFD717C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  uint64_t result;
  uint64_t **v5;

  v3 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  result = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  if ((result & 1) != 0)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v5 = (uint64_t **)sub_20BFD5244(v3);
    return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v5, a2);
  }
  return result;
}

uint64_t sub_20BFD71C4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath"
            ">>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BFD7238()
{
  JUMPOUT(0x20BFD71E8);
}

_QWORD *sub_20BFD7240(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfPath>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t *sub_20BFD72BC(uint64_t **a1, _QWORD *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_20BFD7378(a1, a2, &v13, &v12, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v10[1] = a1 + 1;
    sub_20BFD6E54((_DWORD *)v7 + 7, a4);
    sub_20BFD6EA4((_DWORD *)v7 + 8, a4 + 1);
    v11 = 1;
    sub_20BDDE1B4(a1, v13, v8, v7);
    v10[0] = 0;
    sub_20BFD7610((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *sub_20BFD7378(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, const pxrInternal__aapl__pxrReserved__::SdfPath *a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2
    || sub_20BFD758C(a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 + 28)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 + 28), a5))
      goto LABEL_16;
    return sub_20BFD74FC((uint64_t)a1, a3, a5);
  }
  if (sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 + 28), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_20BFD758C(a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v15 + 28)))
        return sub_20BFD74FC((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *sub_20BFD74FC(uint64_t a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28);
        if (!sub_20BFD758C(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_20BFD758C(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_20BFD758C(pxrInternal__aapl__pxrReserved__::SdfPath *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;

  if (*(_QWORD *)a1 == *(_QWORD *)a2)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1)
    && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    return pxrInternal__aapl__pxrReserved__::SdfPath::_LessThanInternal(a1, a2, v4);
  }
  return !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1)
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2);
}

void sub_20BFD7610(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BFD7654(v2 + 7);
    operator delete(v2);
  }
}

_DWORD *sub_20BFD7654(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

_QWORD *sub_20BFD7680(uint64_t a1, _QWORD **a2, uint64_t a3, _QWORD *a4, uint64_t **a5)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  char v26;

  v8 = *(_QWORD **)a1;
  v9 = *a2;
  if (*(_QWORD **)a1 == *a2)
  {
LABEL_31:
    v9 = v8;
    return sub_20BFD7B9C((uint64_t)&v26, v8, v9, *a5);
  }
  v11 = *(_QWORD **)a3;
  if (*(_QWORD *)a3 != *a4)
  {
    while (1)
    {
      if (sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v11 + 28)))
      {
        sub_20BFD7824(a5, (_DWORD *)(*(_QWORD *)a1 + 28));
        v13 = *(_QWORD **)a1;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8);
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)v13[2];
            v16 = *v15 == (_QWORD)v13;
            v13 = v15;
          }
          while (!v16);
        }
        *(_QWORD *)a1 = v15;
      }
      else
      {
        if (sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)(*(_QWORD *)a3 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*(_QWORD *)a1 + 28)))
        {
          v17 = *(_QWORD **)a3;
          v18 = *(_QWORD **)(*(_QWORD *)a3 + 8);
          if (v18)
          {
            do
            {
              v19 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (_QWORD *)v17[2];
              v16 = *v19 == (_QWORD)v17;
              v17 = v19;
            }
            while (!v16);
          }
        }
        else
        {
          v20 = *(_QWORD **)a1;
          v21 = *(_QWORD **)(*(_QWORD *)a1 + 8);
          if (v21)
          {
            do
            {
              v22 = v21;
              v21 = (_QWORD *)*v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              v22 = (_QWORD *)v20[2];
              v16 = *v22 == (_QWORD)v20;
              v20 = v22;
            }
            while (!v16);
          }
          *(_QWORD *)a1 = v22;
          v23 = *(_QWORD **)a3;
          v24 = *(_QWORD **)(*(_QWORD *)a3 + 8);
          if (v24)
          {
            do
            {
              v19 = v24;
              v24 = (_QWORD *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v19 = (_QWORD *)v23[2];
              v16 = *v19 == (_QWORD)v23;
              v23 = v19;
            }
            while (!v16);
          }
        }
        *(_QWORD *)a3 = v19;
      }
      v8 = *(_QWORD **)a1;
      v9 = *a2;
      if (*(_QWORD **)a1 == *a2)
        break;
      v11 = *(_QWORD **)a3;
      if (*(_QWORD *)a3 == *a4)
        return sub_20BFD7B9C((uint64_t)&v26, v8, v9, *a5);
    }
    goto LABEL_31;
  }
  return sub_20BFD7B9C((uint64_t)&v26, v8, v9, *a5);
}

uint64_t **sub_20BFD7824(uint64_t **a1, _DWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = (*a1)[1];
  if (v5 >= (*a1)[2])
  {
    v6 = sub_20BFD7890(*a1, a2);
  }
  else
  {
    sub_20BFD6E54((_DWORD *)(*a1)[1], a2);
    sub_20BFD6EA4((_DWORD *)(v5 + 4), a2 + 1);
    v6 = v5 + 8;
  }
  v4[1] = v6;
  return a1;
}

uint64_t sub_20BFD7890(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDDF6A8(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[8 * v4];
  v16 = &v10[8 * v9];
  sub_20BFD6E54(v14, a2);
  sub_20BFD6EA4((_DWORD *)v14 + 1, a2 + 1);
  v15 = v14 + 8;
  sub_20BFD797C(a1, &v13);
  v11 = a1[1];
  sub_20BFD7B28(&v13);
  return v11;
}

void sub_20BFD7968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD7B28((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFD797C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BFD79F0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BFD79F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      sub_20BFD38A4((_DWORD *)(v7 - 8), (_DWORD *)(v9 - 8));
      sub_20BFD38DC((_DWORD *)(v7 - 4), (_DWORD *)(v9 - 4));
      v7 = *((_QWORD *)&v15 + 1) - 8;
      *((_QWORD *)&v15 + 1) -= 8;
      v9 -= 8;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20BFD7AA4((uint64_t)v12);
  return v10;
}

uint64_t sub_20BFD7AA4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BFD7AD8((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20BFD7AD8(uint64_t *result)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v3;

  v1 = *(_DWORD **)(result[2] + 8);
  v2 = *(_DWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20BFD6F64(v3, v1);
      v1 += 2;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20BFD7B28(void **a1)
{
  sub_20BFD7B58(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_DWORD *sub_20BFD7B58(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 2) = v1 - 8;
      result = sub_20BFD6F64(v4, (_DWORD *)(v1 - 8));
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

_QWORD *sub_20BFD7B9C(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t *v10;

  v4 = a2;
  v10 = a4;
  if (a2 == a3)
    return a2;
  v5 = a3;
  do
  {
    sub_20BFD7824(&v10, (_DWORD *)v4 + 7);
    v6 = (_QWORD *)v4[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v4[2];
        v8 = *v7 == (_QWORD)v4;
        v4 = v7;
      }
      while (!v8);
    }
    v4 = v7;
  }
  while (v7 != v5);
  return v5;
}

void sub_20BFD7C28(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20BFD7C28(a1, *a2);
    sub_20BFD7C28(a1, a2[1]);
    sub_20BFD7654((_DWORD *)a2 + 7);
    operator delete(a2);
  }
}

void sub_20BFD7C70(uint64_t a1, _BYTE *a2, _DWORD *a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  uint64_t **v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  char v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t Items;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  uint64_t i;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[8];
  unsigned int *v41[2];
  _OWORD v42[3];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v6 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    v31 = "sdf/listOpListEditor.h";
    v32 = "_UpdateListOp";
    v33 = 113;
    v34 = "void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy"
          ">::_UpdateListOp(const ListOpType &, const SdfListOpType *) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
    v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid owner.");
  }
  else
  {
    v30 = v6;
    v7 = (uint64_t **)sub_20BFD5244(v6);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v7, (uint64_t *)&v31);
    v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v31);
    v9 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8);
    v10 = v32;
    if (v32)
    {
      v11 = (unsigned int *)(v32 + 8);
      do
      {
        v12 = __ldxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
    }
    if ((v9 & 1) != 0)
    {
      v14 = 0;
      v15 = 0;
      v42[0] = xmmword_20CAB01E4;
      v42[1] = unk_20CAB01F4;
      v42[2] = xmmword_20CAB0204;
      v16 = (char *)v42;
      while (2)
      {
        v17 = v15;
        v18 = (unsigned int *)v16;
        ++v15;
        v16 = (char *)v42 + 8 * v17 + 8;
        while (1)
        {
          v19 = *v18;
          if (!a3 || *a3 == (_DWORD)v19)
          {
            v20 = sub_20BFD806C(v19, (uint64_t)a2, a1 + 32);
            *(v16 - 4) = v20;
            if (v20)
              break;
          }
          ++v17;
          v18 = (unsigned int *)v42 + 2 * v17;
          ++v15;
          v16 += 8;
          if (v15 == 7)
          {
            if ((v14 & 1) == 0 && (*a2 != 0) == (*(_BYTE *)(a1 + 32) != 0))
              return;
            goto LABEL_22;
          }
        }
        Items = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems(a1 + 32, v19);
        v22 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems((uint64_t)a2, v19);
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, v19, Items, v22) & 1) == 0)return;
        v14 = 1;
        if (v15 != 6)
          continue;
        break;
      }
LABEL_22:
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v40);
      sub_20BFD6BC4((uint64_t)&v31, (uint64_t)a2);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::Swap((char *)(a1 + 32), (char *)&v31);
      if (pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::HasKeys((uint64_t)a2))
      {
        v23 = sub_20BFD5244(v30);
        v41[1] = (unsigned int *)&off_24C5249C8;
        sub_20BFD86E0(v41, (uint64_t)a2);
        pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        sub_20BF4C2D8((uint64_t)v41);
      }
      else
      {
        v24 = sub_20BFD5244(v30);
        pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(v24, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
      }
      for (i = 0; i != 48; i += 8)
      {
        v26 = (int *)((char *)v42 + i);
        if (*((_BYTE *)v42 + i + 4))
        {
          v27 = *v26;
          v28 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems((uint64_t)&v31, *v26);
          v29 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems((uint64_t)a2, v27);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v27, v28, v29);
        }
      }
      v41[0] = (unsigned int *)&v39;
      sub_20BFD6F90((void ***)v41);
      v41[0] = (unsigned int *)&v38;
      sub_20BFD6F90((void ***)v41);
      v41[0] = (unsigned int *)&v37;
      sub_20BFD6F90((void ***)v41);
      v41[0] = (unsigned int *)&v36;
      sub_20BFD6F90((void ***)v41);
      v41[0] = (unsigned int *)&v35;
      sub_20BFD6F90((void ***)v41);
      v41[0] = (unsigned int *)&v32;
      sub_20BFD6F90((void ***)v41);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v40);
    }
    else
    {
      v31 = "sdf/listOpListEditor.h";
      v32 = "_UpdateListOp";
      v33 = 118;
      v34 = "void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfPathKeyPoli"
            "cy>::_UpdateListOp(const ListOpType &, const SdfListOpType *) [TypePolicy = pxrInternal__aapl__pxrReserved__"
            "::SdfPathKeyPolicy]";
      v35 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer is not editable.");
    }
  }
}

void sub_20BFD8014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  sub_20BF4C2D8(v30 - 160);
  sub_20BFD6A50(&a11);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a30);
  _Unwind_Resume(a1);
}

BOOL sub_20BFD806C(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Items;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 result;
  BOOL v14;

  Items = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems(a2, a1);
  v6 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems(a3, a1);
  v8 = *Items;
  v7 = Items[1];
  v9 = *(uint64_t **)v6;
  if (v7 - *Items != *(_QWORD *)(v6 + 8) - *(_QWORD *)v6)
    return 1;
  if (v8 == v7)
    return 0;
  v10 = v8 + 8;
  do
  {
    v11 = *v9++;
    v12 = *(_QWORD *)(v10 - 8);
    result = v12 != v11;
    v14 = v12 != v11 || v10 == v7;
    v10 += 8;
  }
  while (!v14);
  return result;
}

uint64_t *sub_20BFD8100(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 152);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void ***sub_20BFD8128(void ***a1, void ***a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BFD8230(a1);
}

uint64_t sub_20BFD8138()
{
  return 1;
}

unint64_t sub_20BFD8140(unsigned __int8 **a1)
{
  return sub_20BFD82E4(*a1);
}

BOOL sub_20BFD8148(_QWORD **a1, _QWORD **a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator==(*a1, *a2);
}

BOOL sub_20BFD8154(_QWORD **a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator==(*a1, a2);
}

uint64_t sub_20BFD8160()
{
  return 0;
}

pxrInternal__aapl__pxrReserved__::TfType *sub_20BFD816C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfPath>(a2, *a1);
}

void *sub_20BFD817C()
{
  return &unk_24C5249B8;
}

uint64_t sub_20BFD8188()
{
  return 0;
}

uint64_t sub_20BFD8190()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BFD819C()
{
  return 0;
}

uint64_t sub_20BFD81A4()
{
  return 0;
}

BOOL sub_20BFD81AC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAB01A6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BFD81E4(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C5249B8, a2, a3);
}

void *sub_20BFD8204()
{
  return &unk_24C5249B8;
}

uint64_t sub_20BFD8210(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BFD8218@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *(_QWORD *)(a2 + 8) = &off_24C5249C8;
  return sub_20BFD86E0((unsigned int **)a2, v2);
}

void ***sub_20BFD8230(void ***a1)
{
  void **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 19);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v7 = v2 + 16;
      sub_20BFD6F90(&v7);
      v7 = v2 + 13;
      sub_20BFD6F90(&v7);
      v7 = v2 + 10;
      sub_20BFD6F90(&v7);
      v7 = v2 + 7;
      sub_20BFD6F90(&v7);
      v7 = v2 + 4;
      sub_20BFD6F90(&v7);
      v7 = v2 + 1;
      sub_20BFD6F90(&v7);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BFD82E4(unsigned __int8 *a1)
{
  uint64_t v2;
  char v3;

  v2 = 0;
  v3 = 0;
  sub_20BFD834C((uint64_t)&v2, a1, (uint64_t)(a1 + 8), (uint64_t)(a1 + 32), (uint64_t)(a1 + 56), (uint64_t)(a1 + 80), (uint64_t)(a1 + 104), (uint64_t)(a1 + 128));
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

uint64_t sub_20BFD834C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v8 += (unint64_t)(*(_QWORD *)a1 + v8 + (*(_QWORD *)a1 + v8) * (*(_QWORD *)a1 + v8)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v8;
  return sub_20BFD8394(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_20BFD8394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;

  v14 = *(unsigned int **)a2;
  v15 = *(_QWORD *)(a2 + 8) - (_QWORD)v14;
  if (v15)
  {
    v16 = v15 >> 3;
    do
    {
      --v16;
      v17 = v14 + 2;
      sub_20BFD84AC(a1, v14);
      v14 = v17;
    }
    while (v16);
  }
  return sub_20BFD8424(a1, a3, a4, a5, a6, a7);
}

uint64_t sub_20BFD8424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;

  v12 = *(unsigned int **)a2;
  v13 = *(_QWORD *)(a2 + 8) - (_QWORD)v12;
  if (v13)
  {
    v14 = v13 >> 3;
    do
    {
      --v14;
      v15 = v12 + 2;
      sub_20BFD84AC(a1, v12);
      v12 = v15;
    }
    while (v14);
  }
  return sub_20BFD84E8(a1, a3, a4, a5, a6);
}

uint64_t sub_20BFD84AC(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a2;
  v2 = a2[1];
  if (*(_BYTE *)(result + 8))
    v3 += (unint64_t)(*(_QWORD *)result + v3 + (*(_QWORD *)result + v3) * (*(_QWORD *)result + v3)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v2 + ((unint64_t)(v3 + v2 + (v3 + v2) * (v3 + v2)) >> 1);
  return result;
}

uint64_t sub_20BFD84E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;

  v10 = *(unsigned int **)a2;
  v11 = *(_QWORD *)(a2 + 8) - (_QWORD)v10;
  if (v11)
  {
    v12 = v11 >> 3;
    do
    {
      --v12;
      v13 = v10 + 2;
      sub_20BFD84AC(a1, v10);
      v10 = v13;
    }
    while (v12);
  }
  return sub_20BFD8560(a1, a3, a4, a5);
}

uint64_t sub_20BFD8560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;

  v8 = *(unsigned int **)a2;
  v9 = *(_QWORD *)(a2 + 8) - (_QWORD)v8;
  if (v9)
  {
    v10 = v9 >> 3;
    do
    {
      --v10;
      v11 = v8 + 2;
      sub_20BFD84AC(a1, v8);
      v8 = v11;
    }
    while (v10);
  }
  return sub_20BFD85D0(a1, a3, a4);
}

uint64_t sub_20BFD85D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;

  v5 = result;
  v6 = *(unsigned int **)a2;
  v7 = *(_QWORD *)(a2 + 8) - (_QWORD)v6;
  if (v7)
  {
    v8 = v7 >> 3;
    do
    {
      --v8;
      v9 = v6 + 2;
      result = sub_20BFD84AC(v5, v6);
      v6 = v9;
    }
    while (v8);
  }
  v10 = *(unsigned int **)a3;
  v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v11)
  {
    v12 = v11 >> 3;
    do
    {
      --v12;
      v13 = v10 + 2;
      result = sub_20BFD84AC(v5, v10);
      v10 = v13;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_20BFD8650(uint64_t *a1)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  void **v7;

  v2 = atomic_load((unsigned int *)(*a1 + 152));
  if (v2 != 1)
  {
    v3 = (unsigned int *)operator new(0xA0uLL);
    sub_20BFD6BC4((uint64_t)v3, *a1);
    v4 = v3 + 38;
    atomic_store(0, v3 + 38);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v7 = (void **)*a1;
    *a1 = (uint64_t)v3;
    sub_20BFD8230(&v7);
  }
  return *a1;
}

void sub_20BFD86CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFD86E0(unsigned int **a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (unsigned int *)operator new(0xA0uLL);
  result = sub_20BFD6BC4((uint64_t)v4, a2);
  v6 = v4 + 38;
  atomic_store(0, v4 + 38);
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20BFD8738(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20BFD8754(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C524A90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20BFD8790(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C524A90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20BFD87B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_20BFD880C(*(_QWORD *)(a1 + 16), (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)(a1 + 8) + 24), a2, a3);
}

uint64_t sub_20BFD87C4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C524B00))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BFD8800()
{
  return &unk_24C524B00;
}

uint64_t sub_20BFD880C@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int v8;
  int v9;
  uint64_t v10;
  char v11;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_20BE9E974();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(&v10, v4, a3);
  if (v11)
  {
    sub_20BFD88E0(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, &v8);
    sub_20BFD38A4((_DWORD *)a4, &v8);
    sub_20BFD38DC((_DWORD *)(a4 + 4), &v9);
    *(_BYTE *)(a4 + 8) = 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_20BFD265C(&v8);
  }
  else
  {
    sub_20BFD8A74(a4, (uint64_t)&v10);
  }
  return sub_20BFD8AF4((uint64_t)&v10);
}

void sub_20BFD88C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, char a12)
{
  sub_20BFD8AF4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

_DWORD *sub_20BFD88E0@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  int v6;
  int v7;

  sub_20BFD89D0(a1, &v6);
  sub_20BFD895C(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_20BFD265C(&v6);
}

void sub_20BFD8948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void sub_20BFD895C(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, int *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a1, a2, a3);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
}

_DWORD *sub_20BFD89D0@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t IsDormant;
  _DWORD *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v7;
  int v8;
  int v9;

  IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1);
  if ((IsDormant & 1) != 0)
  {
    v5 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsDormant);
    sub_20BFD6E54(a2, v5);
    return sub_20BFD6EA4(a2 + 1, v5 + 1);
  }
  else
  {
    v7 = sub_20BFD5244(a1);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v7, &v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    return sub_20BFD265C(&v8);
  }
}

void sub_20BFD8A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFD8A74(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  sub_20BFD8AB4((_DWORD *)a1, a2);
  return a1;
}

void sub_20BFD8AA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFD8AF4(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_20BFD8AB4(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;

  if (*(_BYTE *)(a2 + 8))
  {
    v3 = result;
    v4 = sub_20BFD6E54(result, (_DWORD *)a2);
    result = sub_20BFD6EA4(v4 + 1, (_DWORD *)(a2 + 4));
    *((_BYTE *)v3 + 8) = 1;
  }
  return result;
}

uint64_t sub_20BFD8AF4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
    sub_20BFD265C((_DWORD *)a1);
  }
  return a1;
}

_QWORD *sub_20BFD8B30@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, _DWORD **a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v5;
  uint64_t v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int v13;
  int v14;
  uint64_t v15[3];
  int v16;
  int v17;

  v5 = *a2;
  if (v5 == a2[1])
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return sub_20BFD6D38(a3, v5, v5, 0);
  }
  else
  {
    sub_20BFD89D0(a1, &v16);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_20BFD6D38(a3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
    *(_OWORD *)v15 = *(_OWORD *)a3;
    while (v15[0] != v15[1])
    {
      v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4(v15, v6, v7);
      sub_20BFD895C(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, &v13);
      v11 = (int *)sub_20BFD71C4(v15, v9, v10);
      sub_20BFD3EBC(v11, &v13);
      sub_20BFD3F10(v11 + 1, &v14);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
      sub_20BFD265C(&v13);
      sub_20BFD7240(v15);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    return sub_20BFD265C(&v16);
  }
}

void sub_20BFD8C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFD8C8C(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20BFD8D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BFD8D54@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  void (*v3)(uint64_t, int *);
  uint64_t v5;
  int v6;
  int v7;
  char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = (void (*)(uint64_t, int *))result[9];
  if (v3)
  {
    v5 = *result;
    v8 = (char *)&off_24C524B10 + 1;
    sub_20BFD6E54(&v6, a2);
    sub_20BFD6EA4(&v7, a2 + 1);
    v3(v5, &v6);
    return (uint64_t *)sub_20BF4C2D8((uint64_t)&v6);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_20BFD8E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20BFD8E24(_DWORD *a1, _DWORD *a2)
{
  sub_20BFD6E54(a2, a1);
  return sub_20BFD6EA4(a2 + 1, a1 + 1);
}

_DWORD *sub_20BFD8E58(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

_DWORD *sub_20BFD8E84(_DWORD *a1, _DWORD *a2)
{
  sub_20BFD38A4(a2, a1);
  sub_20BFD38DC(a2 + 1, a1 + 1);
  return sub_20BFD8E58(a1);
}

uint64_t sub_20BFD8EC0()
{
  return 1;
}

unint64_t sub_20BFD8EC8(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55* (a1[1]+ ((a1[1] + (unint64_t)*a1 + (a1[1] + (unint64_t)*a1) * (a1[1] + (unint64_t)*a1)) >> 1)));
}

BOOL sub_20BFD8EF4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_20BFD8F08(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20BFD8F20()
{
  return 0;
}

_QWORD *sub_20BFD8F2C(pxrInternal__aapl__pxrReserved__::SdfPath *a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, a1);
}

void *sub_20BFD8F3C()
{
  return &unk_24C524BC8;
}

uint64_t sub_20BFD8F48()
{
  return 0;
}

uint64_t sub_20BFD8F50()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BFD8F5C()
{
  return 0;
}

uint64_t sub_20BFD8F64()
{
  return 0;
}

BOOL sub_20BFD8F6C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAB02EALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BFD8FA4(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C524BC8, a2, a3);
}

void *sub_20BFD8FC4()
{
  return &unk_24C524BC8;
}

_DWORD *sub_20BFD8FD4@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;

  *(_QWORD *)(a2 + 8) = (char *)&off_24C524B10 + 1;
  v3 = sub_20BFD6E54((_DWORD *)a2, a1);
  return sub_20BFD6EA4(v3 + 1, a1 + 1);
}

void sub_20BFD9014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *__p;
  uint64_t v6;
  uint64_t v7;
  void *v8[2];
  char v9;

  sub_20BDDC0E4(v8, "SDF_ASSET");
  __p = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C524BD8, 0, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  v0 = sub_20BFCFA44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "SDF_ASSET", "Sdf asset resolution diagnostics");
  sub_20BDDC0E4(v8, "SDF_CHANGES");
  __p = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C524BD8, 1, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  v1 = sub_20BFCFA44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 4, "SDF_CHANGES", "Sdf layer change notifications");
  sub_20BDDC0E4(v8, "SDF_FILE_FORMAT");
  __p = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C524BD8, 2, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  v2 = sub_20BFCFA44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v2 + 8, "SDF_FILE_FORMAT", "Sdf file format registration");
  sub_20BDDC0E4(v8, "SDF_LAYER");
  __p = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C524BD8, 3, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  v3 = sub_20BFCFA44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v3 + 12, "SDF_LAYER", "Sdf layer loading and lifetime");
  sub_20BDDC0E4(v8, "SDF_VARIABLE_EXPRESSION_PARSING");
  __p = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C524BD8, 4, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  v4 = sub_20BFCFA44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v4 + 16, "SDF_VARIABLE_EXPRESSION_PARSING", "Sdf variable expression parsing");
}

void sub_20BFD924C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info::GetFileFormat@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t (*v5)(uint64_t *);
  uint64_t v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v8;
  void *v9;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v10;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;
  unsigned __int8 v12;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v13;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v16;

  v4 = atomic_load((unsigned __int8 *)this + 112);
  if ((v4 & 1) != 0)
  {
    *a2 = *((_QWORD *)this + 15);
    return (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_20BF1DD04(a2);
  }
  else
  {
    v5 = sub_20BF46110((_QWORD *)this + 4);
    if (v6 & 1 | (unint64_t)v5)
    {
      v8 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_20BF444D8((uint64_t *)this + 4);
      pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v8);
    }
    v16 = 0;
    v9 = sub_20BFD93FC((pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info *)((char *)this + 8), v6, v7);
    if (v9)
    {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **__return_ptr))(*(_QWORD *)v9 + 16))(&v15);
      v11 = v15;
      v10 = v16;
      v15 = 0;
      v16 = v11;
      sub_20BF1D8F4((int)&v16, v10);
      sub_20BFDBC74(&v15);
    }
    if (v16)
    {
      std::mutex::lock((std::mutex *)((char *)this + 48));
      v12 = atomic_load((unsigned __int8 *)this + 112);
      if ((v12 & 1) == 0)
      {
        v13 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((_QWORD *)this + 15);
        *((_QWORD *)this + 15) = v16;
        sub_20BF1DD04((uint64_t *)&v16);
        sub_20BF1D8F4((_DWORD)this + 120, v13);
        atomic_store(1u, (unsigned __int8 *)this + 112);
      }
      std::mutex::unlock((std::mutex *)((char *)this + 48));
    }
    *a2 = *((_QWORD *)this + 15);
    sub_20BF1DD04(a2);
    return sub_20BFDBC74(&v16);
  }
}

void sub_20BFD93BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);
  sub_20BFDBC74(&a10);
  _Unwind_Resume(a1);
}

void *sub_20BFD93FC(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  void *result;

  result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  return result;
}

double pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::Sdf_FileFormatRegistry(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *((_BYTE *)this + 120) = 0;
  *((_QWORD *)this + 16) = 850045863;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 23) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *((_BYTE *)this + 120) = 0;
  *((_QWORD *)this + 16) = 850045863;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 23) = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindById(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info **v6;
  _QWORD v7[4];
  char v8;

  if (*(_QWORD *)a2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins((uint64_t)this);
    v6 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info **)sub_20BF2B388(this, a2);
    if (v6)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_GetFileFormat(v6 + 3, a3);
      return;
    }
  }
  else
  {
    v7[0] = "sdf/fileFormatRegistry.cpp";
    v7[1] = "FindById";
    v7[2] = 115;
    v7[3] = "SdfFileFormatConstPtr pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindById(const TfToken &)";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot find file format for empty id");
  }
  *a3 = 0;
  a3[1] = 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins(uint64_t this)
{
  unsigned __int8 v1;
  uint64_t v2;
  _BOOL8 v3;
  const char *v4;
  char *v5;
  const std::type_info *v6;
  char *v7;
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t TypeName;
  const char *v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t *);
  uint64_t v17;
  const char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::TfToken *v22;
  uint64_t *EmptyString;
  uint64_t v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  unint64_t String;
  __int128 v29;
  unint64_t v30;
  const char *v31;
  void *v32;
  const char *v33;
  char *v34;
  void **v35;
  uint64_t v36;
  pxrInternal__aapl__pxrReserved__::TfToken *v37;
  uint64_t *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  unint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  char *v47;
  uint64_t v48;
  unint64_t JsArray;
  pxrInternal__aapl__pxrReserved__::JsValue *v50;
  pxrInternal__aapl__pxrReserved__::JsValue *v51;
  unint64_t v52;
  const char *v53;
  pxrInternal__aapl__pxrReserved__::JsValue **v54;
  pxrInternal__aapl__pxrReserved__::JsValue *v55;
  pxrInternal__aapl__pxrReserved__::JsValue *v56;
  __int128 *v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 *v61;
  __int128 *v62;
  __int128 v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  pxrInternal__aapl__pxrReserved__::TfToken *v68;
  uint64_t *v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  std::__shared_weak_count *size;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  const char *v80;
  unint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  pxrInternal__aapl__pxrReserved__::TfType **v85;
  uint64_t v86;
  const char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  const pxrInternal__aapl__pxrReserved__::TfType *v95;
  __int128 v96;
  unint64_t v97;
  const char *v98;
  void *v99;
  const char *v100;
  char *v101;
  void **v102;
  __int128 *v103;
  void **v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  const char *v110;
  unint64_t v111;
  const char *v112;
  unsigned int *v113;
  unsigned int v114;
  __int128 *v115;
  __int128 *v116;
  __int128 v117;
  std::string *p_str;
  const char *v119;
  char *v120;
  std::string *v121;
  uint64_t v122;
  char *v123;
  char **v124;
  unint64_t v125;
  unint64_t v126;
  const char *v127;
  std::string *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t *v142;
  uint64_t *v143;
  BOOL v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  uint64_t *v151;
  std::string::size_type v152;
  const char **v153;
  uint64_t v154;
  pxrInternal__aapl__pxrReserved__::TfToken *v155;
  uint64_t *v156;
  uint64_t v157;
  char *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  char v162;
  const char *v163;
  int v164;
  uint64_t v165;
  char *v166;
  unint64_t v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t *v175;
  unsigned __int8 *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  char v180;
  const char *v181;
  unsigned __int8 v182;
  uint64_t v183;
  std::string __str;
  uint64_t v185;
  int v186;
  void *v187[2];
  uint64_t v188;
  __int128 v189;
  __int128 *v190;
  __int128 *v191;
  unint64_t *v192;
  std::__shared_weak_count *v193;
  void *__dst[2];
  uint64_t v195;
  char v196[8];
  std::__shared_weak_count *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  _QWORD *v202[2];
  std::string __p;
  const char *v204;
  char v205;
  _BYTE v206[96];
  __int128 v207;
  __int128 v208;
  int v209;
  _OWORD v210[2];
  int v211;
  _OWORD v212[2];
  int v213;
  char v214[9];

  v1 = atomic_load((unsigned __int8 *)(this + 120));
  if ((v1 & 1) != 0)
    return this;
  v2 = this;
  memset(v212, 0, sizeof(v212));
  v213 = 1065353216;
  memset(v210, 0, sizeof(v210));
  v211 = 1065353216;
  v207 = 0u;
  v208 = 0u;
  v209 = 1065353216;
  v3 = sub_20BFCE180(2);
  if (v3)
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_FileFormatRegistry::_RegisterFormatPlugins", v4, v5);
  v183 = v2;
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance((pxrInternal__aapl__pxrReserved__::PlugRegistry *)v3);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
  __p.__r_.__value_.__r.__words[2] = 287;
  v204 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
  v205 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v206, "Registering file format plugins", &__p);
  v202[0] = 0;
  v202[1] = 0;
  v201 = (uint64_t *)v202;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)__dst);
  if (__dst[0] != v8
    || (__p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp",
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins",
        __p.__r_.__value_.__r.__words[2] = 291,
        v204 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()",
        v205 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "!formatBaseType.IsUnknown()", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes((uint64_t)v8, &v201);
  }
  v11 = v201;
  if (v201 != (uint64_t *)v202)
  {
    do
    {
      v200 = v11[4];
      if (sub_20BFCE180(2))
      {
        TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v200);
        if (*(char *)(TypeName + 23) >= 0)
          v15 = TypeName;
        else
          v15 = *(_QWORD *)TypeName;
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins: Type '%s'\n", v13, v14, v15);
      }
      pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(v200, &v198);
      v16 = sub_20BF46110(&v198);
      if (v9 & 1 | (unint64_t)v16)
      {
        if (sub_20BFCE180(2))
        {
          v17 = sub_20BF444D8(&v198);
          v20 = (_QWORD *)(v17 + 8);
          if (*(char *)(v17 + 31) < 0)
            v20 = (_QWORD *)*v20;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins:   plugin '%s'\n", v18, v19, v20);
        }
        v21 = v200;
        v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFDB320();
        if ((*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (uint64_t *)((*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
        pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(v21, (const void **)EmptyString, (pxrInternal__aapl__pxrReserved__::JsValue *)v196);
        if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)v196))
        {
          if (sub_20BFCE180(2))
          {
            v24 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v200);
            if (*(char *)(v24 + 23) >= 0)
              v27 = v24;
            else
              v27 = *(_QWORD *)v24;
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins: No format identifier for type '%s', skipping.", v25, v26, v27);
          }
        }
        else if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)v196))
        {
          String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)v196);
          if (*(char *)(String + 23) < 0)
          {
            sub_20BDDBFAC(__dst, *(void **)String, *(_QWORD *)(String + 8));
          }
          else
          {
            v29 = *(_OWORD *)String;
            v195 = *(_QWORD *)(String + 16);
            *(_OWORD *)__dst = v29;
          }
          v32 = (void *)HIBYTE(v195);
          if (v195 < 0)
            v32 = __dst[1];
          if (v32)
          {
            if (sub_20BFCE180(2))
            {
              v35 = __dst;
              if (v195 < 0)
                v35 = (void **)__dst[0];
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins:   formatId '%s'\n", v33, v34, v35);
            }
            v36 = v200;
            v37 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFDB320();
            if ((*((_QWORD *)v37 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
              v38 = (uint64_t *)((*((_QWORD *)v37 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v38 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v37);
            pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(v36, (const void **)v38, (pxrInternal__aapl__pxrReserved__::JsValue *)&v192);
            if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v192))
            {
              if (sub_20BFCE180(2))
              {
                v45 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v200);
                if (*(char *)(v45 + 23) >= 0)
                  v48 = v45;
                else
                  v48 = *(_QWORD *)v45;
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins: No extensions registered for type '%s', skipping.", v46, v47, v48);
              }
            }
            else if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)&v192))
            {
              JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(&v192);
              v51 = *(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray;
              v50 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(JsArray + 8);
              while (v51 != v50)
              {
                if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v51))
                  goto LABEL_65;
                v51 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v51 + 16);
              }
              v54 = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(&v192);
              sub_20BDE4F04(&v190, (v54[1] - *v54) >> 4);
              v56 = *v54;
              v55 = v54[1];
              if (*v54 != v55)
              {
                v57 = v190;
                do
                {
                  v58 = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v56);
                  if (*(char *)(v58 + 23) < 0)
                  {
                    sub_20BDDBFAC(&__p, *(void **)v58, *(_QWORD *)(v58 + 8));
                  }
                  else
                  {
                    v59 = *(_OWORD *)v58;
                    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v58 + 16);
                    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v59;
                  }
                  if (*((char *)v57 + 23) < 0)
                    operator delete(*(void **)v57);
                  v60 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                  *((_QWORD *)v57 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                  *v57 = v60;
                  v57 = (__int128 *)((char *)v57 + 24);
                  v56 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v56 + 16);
                }
                while (v56 != v55);
              }
              v62 = v190;
              v61 = v191;
              if (v190 == v191)
              {
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
                __p.__r_.__value_.__r.__words[2] = 355;
                v204 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
                v205 = 0;
                v79 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v200);
                if (*(char *)(v79 + 23) >= 0)
                  v80 = (const char *)v79;
                else
                  v80 = *(const char **)v79;
                v81 = *(_QWORD *)(sub_20BFDB320() + 8) & 0xFFFFFFFFFFFFFFF8;
                if (v81)
                {
                  v82 = (const char *)(v81 + 16);
                  if (*(char *)(v81 + 39) < 0)
                    v82 = *(const char **)v82;
                }
                else
                {
                  v82 = "";
                }
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"File format '%s' plugin meta data '%s' is empty", v80, v82);
              }
              else
              {
                do
                {
                  pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii((unsigned __int8 *)v62, (uint64_t)&__p);
                  if (*((char *)v62 + 23) < 0)
                    operator delete(*(void **)v62);
                  v63 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                  *((_QWORD *)v62 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                  *v62 = v63;
                  v62 = (__int128 *)((char *)v62 + 24);
                }
                while (v62 != v61);
                pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v189);
                memset(&__p, 0, sizeof(__p));
                pxrInternal__aapl__pxrReserved__::TfType::GetAllAncestorTypes((pxrInternal__aapl__pxrReserved__::TfType *)&v200, (void **)&__p.__r_.__value_.__l.__data_, v64);
                *(_OWORD *)v187 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                while (v187[0] != v187[1])
                {
                  v67 = *(_QWORD *)sub_20BF46024((uint64_t *)v187, v65, v66);
                  v68 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFDB320();
                  if ((*((_QWORD *)v68 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
                    v69 = (uint64_t *)((*((_QWORD *)v68 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
                  else
                    v69 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v68);
                  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(v67, (const void **)v69, (pxrInternal__aapl__pxrReserved__::JsValue *)&__str);
                  v70 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
                  v71 = (std::__shared_weak_count *)*((_QWORD *)&v189 + 1);
                  v189 = v70;
                  if (v71)
                  {
                    p_shared_owners = (unint64_t *)&v71->__shared_owners_;
                    do
                      v73 = __ldaxr(p_shared_owners);
                    while (__stlxr(v73 - 1, p_shared_owners));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                      std::__shared_weak_count::__release_weak(v71);
                    }
                  }
                  size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
                  if (__str.__r_.__value_.__l.__size_)
                  {
                    v75 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
                    do
                      v76 = __ldaxr(v75);
                    while (__stlxr(v76 - 1, v75));
                    if (!v76)
                    {
                      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                      std::__shared_weak_count::__release_weak(size);
                    }
                  }
                  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v189))
                  {
                    if (sub_20BFCE180(2))
                    {
                      v83 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v200);
                      if (*(char *)(v83 + 23) >= 0)
                        v84 = v83;
                      else
                        v84 = *(_QWORD *)v83;
                      v85 = (pxrInternal__aapl__pxrReserved__::TfType **)sub_20BEEEB50(v187);
                      v86 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(*v85);
                      if (*(char *)(v86 + 23) >= 0)
                        v89 = v86;
                      else
                        v89 = *(_QWORD *)v86;
                      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins:     Found target for type '%s' from type '%s'\n", v87, v88, v84, v89);
                    }
                    break;
                  }
                  sub_20BEEEBD8(v187);
                }
                if (__p.__r_.__value_.__r.__words[0])
                {
                  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v189))
                {
                  if (sub_20BFCE180(2))
                  {
                    v90 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v200);
                    if (*(char *)(v90 + 23) >= 0)
                      v93 = v90;
                    else
                      v93 = *(_QWORD *)v90;
                    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins: No target for type '%s', skipping.\n", v91, v92, v93);
                  }
                }
                else if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)&v189))
                {
                  v94 = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)&v189);
                  if (*(char *)(v94 + 23) < 0)
                  {
                    sub_20BDDBFAC(v187, *(void **)v94, *(_QWORD *)(v94 + 8));
                  }
                  else
                  {
                    v96 = *(_OWORD *)v94;
                    v188 = *(_QWORD *)(v94 + 16);
                    *(_OWORD *)v187 = v96;
                  }
                  v99 = (void *)HIBYTE(v188);
                  if (v188 < 0)
                    v99 = v187[1];
                  if (v99)
                  {
                    v186 = 0;
                    v186 = pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_ParseFormatCapabilities((pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)&v200, v95);
                    if (sub_20BFCE180(2))
                    {
                      v102 = v187;
                      if (v188 < 0)
                        v102 = (void **)v187[0];
                      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins:   target '%s'\n", v100, v101, v102);
                    }
                    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v185, __dst, 0);
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
                    v103 = (__int128 *)(sub_20BFDBCA0((uint64_t)v212, &v185, (uint64_t)&unk_20CAC184C, (uint64_t **)&__p)
                                      + 3);
                    if (!*(_QWORD *)v103)
                    {
                      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__str, v187, 0);
                      sub_20BFDBFDC(&v185, &v200, (uint64_t *)&__str, &v198, &v186, &__p);
                      sub_20BDE82DC((uint64_t)v103, (__int128 *)&__p);
                      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&__p);
                      if ((__str.__r_.__value_.__s.__data_[0] & 7) != 0)
                      {
                        v113 = (unsigned int *)(__str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                        do
                          v114 = __ldxr(v113);
                        while (__stlxr(v114 - 2, v113));
                      }
                      v116 = v190;
                      v115 = v191;
                      while (2)
                      {
                        if (v116 == v115)
                          goto LABEL_146;
                        if (*((char *)v116 + 23) < 0)
                        {
                          sub_20BDDBFAC(&__str, *(void **)v116, *((_QWORD *)v116 + 1));
                        }
                        else
                        {
                          v117 = *v116;
                          __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v116 + 2);
                          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v117;
                        }
                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                        {
                          if (__str.__r_.__value_.__l.__size_)
                          {
                            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                            goto LABEL_174;
                          }
LABEL_195:
                          operator delete(__str.__r_.__value_.__l.__data_);
                        }
                        else if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
                        {
                          p_str = &__str;
LABEL_174:
                          if (p_str->__r_.__value_.__s.__data_[0] == 46)
                          {
                            std::string::basic_string(&__p, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v214);
                            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(__str.__r_.__value_.__l.__data_);
                            __str = __p;
                          }
                          if (sub_20BFCE180(2))
                          {
                            v121 = &__str;
                            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                              v121 = (std::string *)__str.__r_.__value_.__r.__words[0];
                            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins:   extension '%s'\n", v119, v120, v121);
                          }
                          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
                          v124 = (char **)(sub_20BFDC268((uint64_t)&v207, (unsigned __int8 *)&__str, (uint64_t)&unk_20CAC184C, (__int128 **)&__p)+ 40);
                          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v124;
                          while (1)
                          {
                            if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
                            {
                              sub_20BDEA72C(v124, v103);
                              goto LABEL_194;
                            }
                            v125 = *(_QWORD *)(*(_QWORD *)sub_20BFDB8A0((uint64_t *)&__p, v122, v123) + 16) & 0xFFFFFFFFFFFFFFF8;
                            v126 = *(_QWORD *)(*(_QWORD *)v103 + 16) & 0xFFFFFFFFFFFFFFF8;
                            if (v125 == v126)
                              break;
                            sub_20BFDB91C(&__p);
                          }
                          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
                          __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
                          __p.__r_.__value_.__r.__words[2] = 454;
                          v204 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
                          v205 = 0;
                          if (v126)
                          {
                            v127 = (const char *)(v125 + 16);
                            if (*(char *)(v125 + 39) < 0)
                              v127 = *(const char **)v127;
                          }
                          else
                          {
                            v127 = "";
                          }
                          v128 = &__str;
                          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                            v128 = (std::string *)__str.__r_.__value_.__r.__words[0];
                          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Multiple file formats with target '%s' registered for extension '%s', skipping.", v127, (const char *)v128);
LABEL_194:
                          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                            goto LABEL_195;
                        }
                        v116 = (__int128 *)((char *)v116 + 24);
                        continue;
                      }
                    }
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
                    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
                    __p.__r_.__value_.__r.__words[2] = 420;
                    v204 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
                    v205 = 0;
                    v104 = __dst;
                    if (v195 < 0)
                      v104 = (void **)__dst[0];
                    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate registration for file format '%s'", (const char *)v104);
LABEL_146:
                    if ((v185 & 7) != 0)
                    {
                      v105 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v106 = __ldxr(v105);
                      while (__stlxr(v106 - 2, v105));
                    }
                  }
                  else
                  {
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
                    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
                    __p.__r_.__value_.__r.__words[2] = 406;
                    v204 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
                    v205 = 0;
                    v109 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v200);
                    if (*(char *)(v109 + 23) >= 0)
                      v110 = (const char *)v109;
                    else
                      v110 = *(const char **)v109;
                    v111 = *(_QWORD *)(sub_20BFDB320() + 16) & 0xFFFFFFFFFFFFFFF8;
                    if (v111)
                    {
                      v112 = (const char *)(v111 + 16);
                      if (*(char *)(v111 + 39) < 0)
                        v112 = *(const char **)v112;
                    }
                    else
                    {
                      v112 = "";
                    }
                    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"File format '%s' plugin meta data '%s' is empty", v110, v112);
                  }
                  if (SHIBYTE(v188) < 0)
                    operator delete(v187[0]);
                }
                else
                {
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
                  __p.__r_.__value_.__r.__words[2] = 398;
                  v204 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
                  v205 = 0;
                  v97 = *(_QWORD *)(sub_20BFDB320() + 16) & 0xFFFFFFFFFFFFFFF8;
                  if (v97)
                  {
                    v98 = (const char *)(v97 + 16);
                    if (*(char *)(v97 + 39) < 0)
                      v98 = *(const char **)v98;
                  }
                  else
                  {
                    v98 = "";
                  }
                  v107 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v200);
                  if (*(char *)(v107 + 23) >= 0)
                    v108 = (const char *)v107;
                  else
                    v108 = *(const char **)v107;
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected value type for key '%s' in plugin meta data for file format type '%s'", v98, v108);
                }
                v129 = (std::__shared_weak_count *)*((_QWORD *)&v189 + 1);
                if (*((_QWORD *)&v189 + 1))
                {
                  v130 = (unint64_t *)(*((_QWORD *)&v189 + 1) + 8);
                  do
                    v131 = __ldaxr(v130);
                  while (__stlxr(v131 - 1, v130));
                  if (!v131)
                  {
                    ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                    std::__shared_weak_count::__release_weak(v129);
                  }
                }
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v190;
              sub_20BDE5038((void ***)&__p);
            }
            else
            {
LABEL_65:
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
              __p.__r_.__value_.__r.__words[2] = 347;
              v204 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
              v205 = 0;
              v52 = *(_QWORD *)(sub_20BFDB320() + 8) & 0xFFFFFFFFFFFFFFF8;
              if (v52)
              {
                v53 = (const char *)(v52 + 16);
                if (*(char *)(v52 + 39) < 0)
                  v53 = *(const char **)v53;
              }
              else
              {
                v53 = "";
              }
              v77 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v200);
              if (*(char *)(v77 + 23) >= 0)
                v78 = (const char *)v77;
              else
                v78 = *(const char **)v77;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected value type for key '%s' in plugin meta data for file format type '%s'", v53, v78);
            }
            v132 = v193;
            if (v193)
            {
              v133 = (unint64_t *)&v193->__shared_owners_;
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
          }
          else
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
            __p.__r_.__value_.__r.__words[2] = 327;
            v204 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
            v205 = 0;
            v41 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v200);
            if (*(char *)(v41 + 23) >= 0)
              v42 = (const char *)v41;
            else
              v42 = *(const char **)v41;
            v43 = *(_QWORD *)sub_20BFDB320() & 0xFFFFFFFFFFFFFFF8;
            if (v43)
            {
              v44 = (const char *)(v43 + 16);
              if (*(char *)(v43 + 39) < 0)
                v44 = *(const char **)v44;
            }
            else
            {
              v44 = "";
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"File format '%s' plugin meta data '%s' is empty", v42, v44);
          }
          if (SHIBYTE(v195) < 0)
            operator delete(__dst[0]);
        }
        else
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
          __p.__r_.__value_.__r.__words[2] = 319;
          v204 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
          v205 = 0;
          v30 = *(_QWORD *)sub_20BFDB320() & 0xFFFFFFFFFFFFFFF8;
          if (v30)
          {
            v31 = (const char *)(v30 + 16);
            if (*(char *)(v30 + 39) < 0)
              v31 = *(const char **)v31;
          }
          else
          {
            v31 = "";
          }
          v39 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v200);
          if (*(char *)(v39 + 23) >= 0)
            v40 = (const char *)v39;
          else
            v40 = *(const char **)v39;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected value type for key '%s' in plugin meta data for file format type '%s'", v31, v40);
        }
        v135 = v197;
        if (v197)
        {
          v136 = (unint64_t *)&v197->__shared_owners_;
          do
            v137 = __ldaxr(v136);
          while (__stlxr(v137 - 1, v136));
          if (!v137)
          {
            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
            std::__shared_weak_count::__release_weak(v135);
          }
        }
      }
      v138 = v199;
      if (v199)
      {
        v139 = (unsigned int *)(v199 + 8);
        do
        {
          v140 = __ldxr(v139);
          v141 = v140 - 1;
        }
        while (__stlxr(v141, v139));
        if (!v141)
          (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
      }
      v142 = (uint64_t *)v11[1];
      if (v142)
      {
        do
        {
          v143 = v142;
          v142 = (uint64_t *)*v142;
        }
        while (v142);
      }
      else
      {
        do
        {
          v143 = (uint64_t *)v11[2];
          v144 = *v143 == (_QWORD)v11;
          v11 = v143;
        }
        while (!v144);
      }
      v11 = v143;
    }
    while (v143 != (uint64_t *)v202);
  }
  __dst[1] = 0;
  v195 = 0;
  __dst[0] = &__dst[1];
  v190 = (__int128 *)v208;
  v191 = 0;
LABEL_231:
  if (v190 != v191)
  {
    v145 = *sub_20BFDB998(&v190, v9, v10);
    v148 = sub_20BFDB998(&v190, v146, v147);
    v150 = *v148;
    v151 = *(uint64_t **)(*v148 + 40);
    v152 = *(_QWORD *)(*v148 + 48);
    if (v151 == (uint64_t *)v152)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
      __p.__r_.__value_.__r.__words[2] = 470;
      v204 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
      v205 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "!infos.empty()", 0);
      v151 = *(uint64_t **)(v150 + 40);
      v152 = *(_QWORD *)(v150 + 48);
    }
    v153 = (const char **)(v145 + 16);
    v187[0] = 0;
    v187[1] = 0;
    if (v152 - (_QWORD)v151 == 16)
    {
      sub_20BDE881C(v187, v151);
      goto LABEL_236;
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
    __str.__r_.__value_.__l.__size_ = v152;
    while (1)
    {
      if (__str.__r_.__value_.__r.__words[0] == __str.__r_.__value_.__l.__size_)
      {
LABEL_276:
        if (v187[0])
        {
LABEL_277:
          __p.__r_.__value_.__r.__words[0] = v145 + 16;
          v176 = sub_20BFDC610((uint64_t)v210, (unsigned __int8 *)(v145 + 16), (uint64_t)&unk_20CAC184C, (__int128 **)&__p);
          sub_20BDE881C((_QWORD *)v176 + 5, (uint64_t *)v187);
          goto LABEL_278;
        }
        sub_20BE74FC0((uint64_t **)__dst, (const void **)(v145 + 16), v145 + 16);
        if ((v180 & 1) != 0)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
          __p.__r_.__value_.__r.__words[2] = 516;
          v204 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
          v205 = 0;
          v181 = (const char *)(v145 + 16);
          if (*(char *)(v145 + 39) < 0)
            v181 = *v153;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"No primary file format specified for extension '%s', skipping.", v181);
        }
LABEL_236:
        if (v187[0])
          goto LABEL_277;
LABEL_278:
        v177 = (std::__shared_weak_count *)v187[1];
        if (v187[1])
        {
          v178 = (unint64_t *)((char *)v187[1] + 8);
          do
            v179 = __ldaxr(v178);
          while (__stlxr(v179 - 1, v178));
          if (!v179)
          {
            ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
            std::__shared_weak_count::__release_weak(v177);
          }
        }
        sub_20BFDBA10((uint64_t)&v190);
        goto LABEL_231;
      }
      v154 = *(_QWORD *)(*(_QWORD *)sub_20BFDADAC((uint64_t *)&__str, (uint64_t)v151, v149) + 8);
      v155 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFDB320();
      if ((*((_QWORD *)v155 + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
        v156 = (uint64_t *)((*((_QWORD *)v155 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v156 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v155);
      pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(v154, (const void **)v156, (pxrInternal__aapl__pxrReserved__::JsValue *)&v198);
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v198))
        goto LABEL_265;
      if (!pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)&v198))
        break;
      if (!pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)&v198))
        goto LABEL_275;
      if (!v187[0])
      {
        v175 = (uint64_t *)sub_20BFDADAC((uint64_t *)&__str, v157, v158);
        sub_20BDE881C(v187, v175);
LABEL_275:
        v164 = 0;
        goto LABEL_266;
      }
      v159 = (std::__shared_weak_count *)v187[1];
      v187[0] = 0;
      v187[1] = 0;
      if (v159)
      {
        v160 = (unint64_t *)&v159->__shared_owners_;
        do
          v161 = __ldaxr(v160);
        while (__stlxr(v161 - 1, v160));
        if (!v161)
        {
          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
          std::__shared_weak_count::__release_weak(v159);
        }
      }
      sub_20BE74FC0((uint64_t **)__dst, (const void **)(v145 + 16), v145 + 16);
      if ((v162 & 1) != 0)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
        __p.__r_.__value_.__r.__words[2] = 506;
        v204 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
        v205 = 0;
        v163 = (const char *)(v145 + 16);
        if (*(char *)(v145 + 39) < 0)
          v163 = *v153;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Multiple primary file formats specified for extension '%s', skipping.", v163);
      }
      v164 = 15;
LABEL_266:
      v172 = (std::__shared_weak_count *)v199;
      if (v199)
      {
        v173 = (unint64_t *)(v199 + 8);
        do
          v174 = __ldaxr(v173);
        while (__stlxr(v174 - 1, v173));
        if (!v174)
        {
          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
          std::__shared_weak_count::__release_weak(v172);
        }
      }
      if (v164 != 17 && v164)
        goto LABEL_276;
      sub_20BFDAE28(&__str);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
    __p.__r_.__value_.__r.__words[2] = 488;
    v204 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
    v205 = 0;
    v167 = *(_QWORD *)(sub_20BFDB320() + 24) & 0xFFFFFFFFFFFFFFF8;
    if (v167)
    {
      v168 = (const char *)(v167 + 16);
      if (*(char *)(v167 + 39) < 0)
        v168 = *(const char **)v168;
    }
    else
    {
      v168 = "";
    }
    v169 = sub_20BFDADAC((uint64_t *)&__str, v165, v166);
    v170 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(*(_QWORD *)v169 + 8));
    if (*(char *)(v170 + 23) >= 0)
      v171 = (const char *)v170;
    else
      v171 = *(const char **)v170;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected value type for key '%s' in plugin meta data for file format type '%s'", v168, v171);
LABEL_265:
    v164 = 17;
    goto LABEL_266;
  }
  std::mutex::lock((std::mutex *)(v183 + 128));
  v182 = atomic_load((unsigned __int8 *)(v183 + 120));
  if ((v182 & 1) == 0)
  {
    if (*(_QWORD *)(v183 + 24))
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
      __p.__r_.__value_.__r.__words[2] = 530;
      v204 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
      v205 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "_formatInfo.empty()", 0);
    }
    if (*(_QWORD *)(v183 + 64))
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
      __p.__r_.__value_.__r.__words[2] = 531;
      v204 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
      v205 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "_extensionIndex.empty()", 0);
    }
    if (*(_QWORD *)(v183 + 104))
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
      __p.__r_.__value_.__r.__words[2] = 532;
      v204 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
      v205 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "_fullExtensionIndex.empty()", 0);
    }
    sub_20BFDC9B4(v183, (uint64_t)v212);
    sub_20BFDC9B4(v183 + 40, (uint64_t)v210);
    sub_20BFDC9B4(v183 + 80, (uint64_t)&v207);
    atomic_store(1u, (unsigned __int8 *)(v183 + 120));
  }
  std::mutex::unlock((std::mutex *)(v183 + 128));
  sub_20BDECAB8((uint64_t)__dst, (char *)__dst[1]);
  sub_20BE6100C((uint64_t)&v201, v202[0]);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v206);
  sub_20BFDBBBC((uint64_t)&v207);
  sub_20BFBE3F8((uint64_t)v210);
  return sub_20BFDBB28((uint64_t)v212);
}

void sub_20BFDA84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,void *a37,char *a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,_QWORD *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  std::mutex *v58;
  uint64_t v59;

  std::mutex::unlock(v58);
  sub_20BDECAB8((uint64_t)&a37, a38);
  sub_20BE6100C((uint64_t)&a49, a50);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a58);
  sub_20BFDBBBC(v59 - 240);
  sub_20BFBE3F8(v59 - 192);
  sub_20BFDBB28(v59 - 144);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_GetFileFormat@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info **a1@<X1>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info *v3;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v6[4];
  char v7;

  v3 = *a1;
  if (!*a1)
  {
    v6[0] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"sdf/fileFormatRegistry.cpp";
    v6[1] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"_GetFileFormat";
    v6[2] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)547;
    v6[3] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"SdfFileFormatConstPtr pxrInternal__aapl_"
                                                                                "_pxrReserved__::Sdf_FileFormatRegistry::"
                                                                                "_GetFileFormat(const _InfoSharedPtr &)";
    v7 = 0;
    result = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "info", 0);
    if (!(_DWORD)result)
    {
      *a2 = 0;
      a2[1] = 0;
      return result;
    }
    v3 = *a1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info::GetFileFormat(v3, (uint64_t *)v6);
  sub_20BFDCAC0(a2, (uint64_t *)v6);
  return sub_20BFDBC74(v6);
}

void sub_20BFDAB70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFDBC74((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_GetFormatInfo(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  const char *v17;
  unsigned __int8 *v18;
  uint64_t *v19;
  void *v20[2];
  unsigned __int8 v21;
  void *__p[2];
  uint64_t v23;
  const char *v24;
  char v25;

  *a4 = 0;
  a4[1] = 0;
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileExtension(a2, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii((unsigned __int8 *)__p, (uint64_t)v20);
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
    v9 = v21;
    if ((v21 & 0x80u) != 0)
      v9 = (unint64_t)v20[1];
    if (v9)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins(a1);
      v10 = *(unsigned __int8 *)(a3 + 23);
      if ((v10 & 0x80u) != 0)
        v10 = *(_QWORD *)(a3 + 8);
      if (v10)
      {
        v11 = sub_20BEC301C((_QWORD *)(a1 + 80), (unsigned __int8 *)v20);
        if (v11)
        {
          *(_OWORD *)__p = *(_OWORD *)(v11 + 40);
          while (__p[0] != __p[1])
          {
            v14 = sub_20BFDADAC((uint64_t *)__p, v12, v13);
            if (pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(*(_QWORD *)v14 + 16), (unsigned __int8 *)a3))
            {
              v19 = (uint64_t *)sub_20BFDADAC((uint64_t *)__p, v15, v16);
              goto LABEL_25;
            }
            sub_20BFDAE28(__p);
          }
        }
      }
      else
      {
        v18 = sub_20BEC301C((_QWORD *)(a1 + 40), (unsigned __int8 *)v20);
        if (v18)
        {
          v19 = (uint64_t *)(v18 + 40);
LABEL_25:
          sub_20BDE881C(a4, v19);
        }
      }
    }
    else
    {
      __p[0] = "sdf/fileFormatRegistry.cpp";
      __p[1] = "_GetFormatInfo";
      v23 = 143;
      v24 = "Sdf_FileFormatRegistry::_InfoSharedPtr pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_GetFormatI"
            "nfo(const string &, const string &)";
      v25 = 0;
      if (*(char *)(a2 + 23) >= 0)
        v17 = (const char *)a2;
      else
        v17 = *(const char **)a2;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unable to determine extension for '%s'", v17);
    }
    if ((char)v21 < 0)
      operator delete(v20[0]);
  }
  else
  {
    __p[0] = "sdf/fileFormatRegistry.cpp";
    __p[1] = "_GetFormatInfo";
    v23 = 135;
    v24 = "Sdf_FileFormatRegistry::_InfoSharedPtr pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_GetFormatInf"
          "o(const string &, const string &)";
    v25 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot find file format for empty string");
  }
}

void sub_20BFDAD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v21;

  if (a15 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFDADAC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::shared_ptr<pxrInternal__aapl__"
            "pxrReserved__::Sdf_FileFormatRegistry::_Info>>>::operator*() [T = const std::vector<std::shared_ptr<pxrInter"
            "nal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BFDAE20()
{
  JUMPOUT(0x20BFDADD0);
}

_QWORD *sub_20BFDAE28(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::shared_ptr<pxrIn"
            "ternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info>>>::operator++() [T = const std::vector<std::shar"
            "ed_ptr<pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindByExtension(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info *v8;
  std::__shared_weak_count *v9;

  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_GetFormatInfo(a1, a2, a3, &v8);
  if (v8)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_GetFileFormat(&v8, a4);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20BFDAF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindAllFileFormatExtensions@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  const void **i;

  result = pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins((uint64_t)this);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  for (i = (const void **)((char *)this + 56); ; result = (uint64_t)sub_20BE74FC0((uint64_t **)a2, i + 2, (uint64_t)(i + 2)))
  {
    i = (const void **)*i;
    if (!i)
      break;
  }
  return result;
}

void sub_20BFDAF8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BDECAB8(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindAllDerivedFileFormatExtensions(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfType *a2@<X1>, uint64_t a3@<X8>)
{
  const std::type_info *v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  const void **i;
  char *v12;
  char *j;
  uint64_t TypeName;
  const char *v15;
  _QWORD v16[4];
  char v17;

  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins((uint64_t)this);
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)a2, *v8, v9) & 1) != 0)
  {
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)a3 = a3 + 8;
    for (i = (const void **)*((_QWORD *)this + 12); i; i = (const void **)*i)
    {
      v12 = (char *)i[5];
      for (j = (char *)i[6]; v12 != j; v12 += 16)
      {
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)(*(_QWORD *)v12 + 8), *(_QWORD *)a2, v10))sub_20BE74FC0((uint64_t **)a3, i + 2, (uint64_t)(i + 2));
      }
    }
  }
  else
  {
    v16[0] = "sdf/fileFormatRegistry.cpp";
    v16[1] = "FindAllDerivedFileFormatExtensions";
    v16[2] = 204;
    v16[3] = "std::set<std::string> pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindAllDerivedFileFormatExt"
             "ensions(const TfType &)";
    v17 = 0;
    TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
    if (*(char *)(TypeName + 23) >= 0)
      v15 = (const char *)TypeName;
    else
      v15 = *(const char **)TypeName;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Type %s does not derive from SdfFileFormat", v15);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)a3 = a3 + 8;
  }
}

void sub_20BFDB0CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BDECAB8(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::GetPrimaryFormatForExtension(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  void *__p[2];
  char v12;

  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins(a1);
  pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii(a2, (uint64_t)__p);
  v6 = sub_20BEC301C((_QWORD *)(a1 + 40), (unsigned __int8 *)__p);
  v7 = v6;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if (v7)
      goto LABEL_3;
LABEL_9:
    v9 = 0;
LABEL_10:
    *a3 = v9;
    return;
  }
  if (!v6)
    goto LABEL_9;
LABEL_3:
  v8 = (unsigned int *)**((_QWORD **)v7 + 5);
  *a3 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      goto LABEL_10;
  }
}

void sub_20BFDB18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_ParseFormatCapabilities(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  unint64_t Instance;
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t *EmptyString;
  unsigned int v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *v10;
  _BOOL4 v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  uint64_t *v14;

  Instance = pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(this);
  v4 = *(_QWORD *)this;
  v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFDB320();
  if ((*((_QWORD *)v5 + 4) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)v5 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  v7 = sub_20BFDB284(Instance, v4, (const void **)EmptyString);
  v8 = *(_QWORD *)this;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFDB320();
  if ((*((_QWORD *)v9 + 5) & 0xFFFFFFFFFFFFFFF8) != 0)
    v10 = (uint64_t *)((*((_QWORD *)v9 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  v11 = sub_20BFDB284(Instance, v8, (const void **)v10);
  v12 = *(_QWORD *)this;
  v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFDB320();
  if ((*((_QWORD *)v13 + 6) & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)((*((_QWORD *)v13 + 6) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
  if (v11)
    v7 |= 2u;
  if (sub_20BFDB284(Instance, v12, (const void **)v14))
    return v7 | 4;
  else
    return v7;
}

BOOL sub_20BFDB284(uint64_t a1, uint64_t a2, const void **a3)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(a2, a3, (pxrInternal__aapl__pxrReserved__::JsValue *)&v8);
  v3 = !pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)&v8)
    || pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)&v8);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_20BFDB30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_20BFDB320()
{
  char *v0;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  void ***v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  void **v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_2549858C8);
  if (!v0)
  {
    v0 = (char *)operator new(0x50uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "formatId", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "extensions", 0);
    v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "target", 0);
    v4 = v0 + 24;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 24, "primary", 0);
    v5 = v0 + 32;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 32, "supportsReading", 0);
    v6 = v0 + 40;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 40, "supportsWriting", 0);
    v7 = v0 + 48;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 48, "supportsEditing", 0);
    v8 = *(void ***)v0;
    v54 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v54 = (void **)v9;
    }
    v11 = (unsigned int *)*v2;
    v55 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v55 = v12;
    }
    v14 = (unsigned int *)*v3;
    v56 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v56 = v15;
    }
    v17 = (unsigned int *)*v4;
    v57 = v17;
    if ((v17 & 7) != 0)
    {
      v18 = (unsigned int *)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      if ((v19 & 1) == 0)
        v57 = v18;
    }
    v20 = (unsigned int *)*v5;
    v58 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 2, v21));
      if ((v22 & 1) == 0)
        v58 = v21;
    }
    v23 = (unsigned int *)*v6;
    v59 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 2, v24));
      if ((v25 & 1) == 0)
        v59 = v24;
    }
    v26 = (unsigned int *)*v7;
    v60 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)((unint64_t)v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v60 = v27;
    }
    *((_QWORD *)v0 + 7) = 0;
    *((_QWORD *)v0 + 8) = 0;
    *((_QWORD *)v0 + 9) = 0;
    v29 = operator new(0x38uLL);
    v30 = 0;
    *((_QWORD *)v0 + 7) = v29;
    *((_QWORD *)v0 + 8) = v29;
    *((_QWORD *)v0 + 9) = v29 + 7;
    do
    {
      v31 = (unint64_t)(&v54)[v30];
      *v29 = v31;
      if ((v31 & 7) != 0)
      {
        v32 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 2, v32));
        if ((v33 & 1) == 0)
          *v29 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v30;
      ++v29;
    }
    while (v30 != 7);
    v34 = (void ***)&v61;
    *((_QWORD *)v0 + 8) = v29;
    do
    {
      v36 = (uint64_t)*--v34;
      v35 = v36;
      if ((v36 & 7) != 0)
      {
        v37 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
    }
    while (v34 != &v54);
    while (!__ldaxr(&qword_2549858C8))
    {
      if (!__stlxr((unint64_t)v0, &qword_2549858C8))
        return (unint64_t)v0;
    }
    __clrex();
    v54 = (void **)(v0 + 56);
    sub_20BEEB2B8(&v54);
    if ((*v7 & 7) != 0)
    {
      v40 = (unsigned int *)(*v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v41 = __ldxr(v40);
      while (__stlxr(v41 - 2, v40));
    }
    if ((*v6 & 7) != 0)
    {
      v42 = (unsigned int *)(*v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v43 = __ldxr(v42);
      while (__stlxr(v43 - 2, v42));
    }
    if ((*v5 & 7) != 0)
    {
      v44 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v45 = __ldxr(v44);
      while (__stlxr(v45 - 2, v44));
    }
    if ((*v4 & 7) != 0)
    {
      v46 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v47 = __ldxr(v46);
      while (__stlxr(v47 - 2, v46));
    }
    if ((*v3 & 7) != 0)
    {
      v48 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v49 = __ldxr(v48);
      while (__stlxr(v49 - 2, v48));
    }
    if ((*v2 & 7) != 0)
    {
      v50 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v52 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v53 = __ldxr(v52);
      while (__stlxr(v53 - 2, v52));
    }
    operator delete(v0);
    return atomic_load(&qword_2549858C8);
  }
  return (unint64_t)v0;
}

void sub_20BFDB73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;

  sub_20BEEB2B8(&a9);
  v26 = &a18;
  while (1)
  {
    v28 = *--v26;
    v27 = v28;
    if ((v28 & 7) != 0)
    {
      v29 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    if (v26 == (uint64_t *)&a11)
    {
      if ((*v24 & 7) != 0)
      {
        v31 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      if ((*v23 & 7) != 0)
      {
        v33 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      if ((*v22 & 7) != 0)
      {
        v35 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      if ((*v21 & 7) != 0)
      {
        v37 = (unsigned int *)(*v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      if ((*v20 & 7) != 0)
      {
        v39 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((*v19 & 7) != 0)
      {
        v41 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((*v18 & 7) != 0)
      {
        v43 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      operator delete(v18);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20BFDB8A0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::shared_ptr<pxrInternal__aapl__pxrRes"
            "erved__::Sdf_FileFormatRegistry::_Info>>>::operator*() [T = std::vector<std::shared_ptr<pxrInternal__aapl__p"
            "xrReserved__::Sdf_FileFormatRegistry::_Info>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BFDB914()
{
  JUMPOUT(0x20BFDB8C4);
}

_QWORD *sub_20BFDB91C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::shared_ptr<pxrInternal"
            "__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info>>>::operator++() [T = std::vector<std::shared_ptr<pxrIn"
            "ternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

_QWORD *sub_20BFDB998(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHashMap<std::stri"
            "ng, std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info>>, pxrIntern"
            "al__aapl__pxrReserved__::TfHash>>::operator->() [T = pxrInternal__aapl__pxrReserved__::TfHashMap<std::string"
            ", std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info>>, pxrInternal"
            "__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20BFDBA10(uint64_t a1)
{
  _QWORD v3[4];
  char v4;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHas"
            "hMap<std::string, std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Inf"
            "o>>, pxrInternal__aapl__pxrReserved__::TfHash>>::operator++() [T = pxrInternal__aapl__pxrReserved__::TfHashM"
            "ap<std::string, std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info>"
            ">, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)a1 = **(_QWORD **)a1;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsReading(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_FormatSupportsCapability(a1, a2, a3, 1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_FormatSupportsCapability(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_GetFormatInfo(a1, a2, a3, &v10);
  if (v10)
    v5 = (*(_DWORD *)(v10 + 24) & a4) != 0;
  else
    v5 = 0;
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsWriting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_FormatSupportsCapability(a1, a2, a3, 2);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsEditing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_FormatSupportsCapability(a1, a2, a3, 4);
}

uint64_t sub_20BFDBB28(uint64_t a1)
{
  void *v2;

  sub_20BFDBB60(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BFDBB60(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v2 + 3));
      v4 = v2[2];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20BFDBBBC(uint64_t a1)
{
  void *v2;

  sub_20BFDBBF4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BFDBBF4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BFDBC30((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20BFDBC30(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  sub_20BDE9EB0(&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20BFDBC74(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

_QWORD *sub_20BFDBCA0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return result;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20BFDBEF4(a1, v7, a4, (uint64_t)&v21);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *v21 = *v19;
    *v19 = v21;
  }
  else
  {
    *v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      v20 = *(_QWORD *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v21;
    }
  }
  result = v21;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20BFDBED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11)
{
  if (a10)
    sub_20BFDBF78((uint64_t)&a11, a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFDBEF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v7 = a1 + 16;
  result = operator new(0x28uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *result = 0;
  result[1] = a2;
  v9 = **a3;
  result[2] = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[3] = 0;
  result[4] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BFDBF78(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a2 + 3));
    v3 = a2[2];
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

_QWORD *sub_20BFDBFDC@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X4>, int *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x98uLL);
  result = sub_20BFDC064(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_20BFDC050(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFDC064(_QWORD *a1, uint64_t *a2, _QWORD *a3, uint64_t *a4, _QWORD *a5, int *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_24C524BF8;
  sub_20BFDC114((uint64_t)(a1 + 3), a2, a3, a4, a5, *a6);
  return a1;
}

void sub_20BFDC0A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFDC0B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C524BF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFDC0C8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C524BF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFDC0EC(uint64_t a1)
{
  char v2;

  return sub_20BFDC1D0((uint64_t)&v2, a1 + 24);
}

double sub_20BFDC114(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4, _QWORD *a5, int a6)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  double result;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 8) = *a3;
  v9 = *a4;
  *(_QWORD *)(a1 + 16) = *a4;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *(_QWORD *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 24) = a6;
  v12 = a5[1];
  *(_QWORD *)(a1 + 32) = *a5;
  *(_QWORD *)(a1 + 40) = v12;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 48) = 850045863;
  *(_QWORD *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 97) = 0u;
  return result;
}

uint64_t sub_20BFDC1D0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;

  sub_20BFDBC74((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a2 + 120));
  std::mutex::~mutex((std::mutex *)(a2 + 48));
  result = *(_QWORD *)(a2 + 40);
  if (result)
  {
    v4 = (unsigned int *)(result + 8);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v7 = *(_QWORD *)(a2 + 16);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  if ((*(_QWORD *)a2 & 7) != 0)
  {
    v10 = (unsigned int *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  return result;
}

unsigned __int8 *sub_20BFDC268(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unsigned __int8 *v6;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unsigned __int8 **v23;
  unint64_t v24;
  unsigned __int8 *v26;
  char v27;

  v6 = a2;
  v26 = 0;
  v27 = 0;
  v8 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  v10 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v26);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, v6) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_20BFDC52C(a1, v10, a4, (uint64_t)&v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26 = *v23;
    *v23 = v26;
  }
  else
  {
    *(_QWORD *)v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26)
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26;
    }
  }
  i = v26;
  v26 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20BFDC5CC((uint64_t)&v26, 0);
  return i;
}

void sub_20BFDC514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFDC5CC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_20BFDC52C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BFDC5B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFDC5CC(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20BFDC5CC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BFDBC30((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *sub_20BFDC610(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unsigned __int8 *v6;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unsigned __int8 **v23;
  unint64_t v24;
  unsigned __int8 *v26;
  char v27;

  v6 = a2;
  v26 = 0;
  v27 = 0;
  v8 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  v10 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v26);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, v6) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_20BFDC8D4(a1, v10, a4, (uint64_t)&v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26 = *v23;
    *v23 = v26;
  }
  else
  {
    *(_QWORD *)v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26)
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26;
    }
  }
  i = v26;
  v26 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20BFDC970((uint64_t)&v26, 0);
  return i;
}

void sub_20BFDC8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFDC970((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_20BFDC8D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BFDC958(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFDC970(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20BFDC970(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BE78EA4((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_20BFDC9B4(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  v5 = *(void **)a2;
  *(_QWORD *)a2 = 0;
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = *(void **)a2;
  *(_QWORD *)a2 = v4;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v11;
  v13 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v13;
  if (*(_QWORD *)(a1 + 24))
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14)
        v15 %= v14;
    }
    else
    {
      v15 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
  }
  if (v11)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v17 >= v16)
        v17 %= v16;
    }
    else
    {
      v17 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = a2 + 16;
  }
}

uint64_t *sub_20BFDCAC0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;

  v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_20BEB5AD8((unint64_t *)(v3 + 16), &v13);
    v4 = (unsigned int *)a1[1];
    a1[1] = v13;
    v13 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      v8 = v13;
      if (v13)
      {
        v9 = (unsigned int *)(v13 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  return a1;
}

void sub_20BFDCB64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B0D8(v3);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_StreamWritableAsset::~Sdf_StreamWritableAsset(pxrInternal__aapl__pxrReserved__::Sdf_StreamWritableAsset *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::ArWritableAsset::~ArWritableAsset(this);
  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_WriteToStream(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2, uint64_t a3)
{
  unsigned int SpecType;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v6;
  unsigned int v7;
  void **v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v14;
  unsigned int v15;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v16;
  unsigned int v17;
  void *__p[2];
  char v20;
  uint64_t *v21[4];
  char v22;
  _BYTE v23[48];

  sub_20BFDCDC8((uint64_t)v23, a2);
  SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(a1);
  switch(SpecType)
  {
    case 1u:
      v6 = *a1;
      v21[0] = (uint64_t *)v6;
      if (v6)
      {
        do
          v7 = __ldaxr((unsigned int *)v6);
        while (__stlxr(v7 + 1, (unsigned int *)v6));
      }
      sub_20BFDD150((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v21, (pxrInternal__aapl__pxrReserved__::TfToken *)v23, a3);
      goto LABEL_23;
    case 6u:
      v10 = *a1;
      v21[0] = (uint64_t *)v10;
      if (v10)
      {
        do
          v11 = __ldaxr((unsigned int *)v10);
        while (__stlxr(v11 + 1, (unsigned int *)v10));
      }
      sub_20BFDCEA0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v21, (pxrInternal__aapl__pxrReserved__::TfToken *)v23, a3);
      goto LABEL_23;
    case 8u:
      v12 = *a1;
      v21[0] = (uint64_t *)v12;
      if (v12)
      {
        do
          v13 = __ldaxr((unsigned int *)v12);
        while (__stlxr(v13 + 1, (unsigned int *)v12));
      }
      sub_20BFDDF28((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v21, (pxrInternal__aapl__pxrReserved__::TfToken *)v23, a3);
      goto LABEL_23;
    case 0xAu:
      v14 = *a1;
      v21[0] = (uint64_t *)v14;
      if (v14)
      {
        do
          v15 = __ldaxr((unsigned int *)v14);
        while (__stlxr(v15 + 1, (unsigned int *)v14));
      }
      sub_20BFDEE24(v21, (pxrInternal__aapl__pxrReserved__::TfToken *)v23, a3);
      goto LABEL_23;
    case 0xBu:
      v16 = *a1;
      v21[0] = (uint64_t *)v16;
      if (v16)
      {
        do
          v17 = __ldaxr((unsigned int *)v16);
        while (__stlxr(v17 + 1, (unsigned int *)v16));
      }
      sub_20BFDECCC(v21, (pxrInternal__aapl__pxrReserved__::TfToken *)v23, a3);
LABEL_23:
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v21);
      v9 = 1;
      break;
    default:
      v21[0] = (uint64_t *)"sdf/fileIO.cpp";
      v21[1] = (uint64_t *)"Sdf_WriteToStream";
      v21[2] = (uint64_t *)89;
      v21[3] = (uint64_t *)"BOOL pxrInternal__aapl__pxrReserved__::Sdf_WriteToStream(const SdfSpec &, std::ostream &, size_t)";
      v22 = 0;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C524D70, SpecType, (uint64_t)__p);
      if (v20 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot write spec of type %s to stream", (const char *)v8);
      if (v20 < 0)
        operator delete(__p[0]);
      v9 = 0;
      break;
  }
  sub_20BFE87A4((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v23);
  return v9;
}

void sub_20BFDCD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;

  if (a16 < 0)
    operator delete(__p);
  sub_20BFE87A4((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v17 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_20BFDCDC8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;
  __int128 v11;

  sub_20BFDEF88(a2, &v10);
  v11 = v10;
  v10 = 0uLL;
  sub_20BFDF084(a1, (uint64_t)&v11);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_20BFDCE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20BFDCEA0(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  unsigned int Specifier;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  std::string::size_type v8;
  pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *v9;
  unsigned int *v10;
  unsigned int v11;
  const char *v12;
  const char *v13;
  const char *v14;
  unint64_t v15;
  uint64_t *Name;
  char *v17;
  unsigned int *v18;
  unsigned int v19;
  std::string __p;

  Specifier = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(a1);
  if (Specifier == 1)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 448)))goto LABEL_10;
  }
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetTypeName(a1, (unsigned int **)&__p);
  v8 = __p.__r_.__value_.__r.__words[0];
  v9 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfTokens);
  if (!v9)
    v9 = sub_20BFE0E90(&pxrInternal__aapl__pxrReserved__::SdfTokens);
  v10 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8))
  {
    if ((v8 & 7) != 0)
    {
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
LABEL_10:
    v8 = 0;
  }
  v12 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(Specifier);
  v13 = " ";
  v14 = "";
  if (v8)
  {
    v15 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v14 = (const char *)(v15 + 16);
      if (*(char *)(v15 + 39) < 0)
        v14 = *(const char **)v14;
    }
  }
  else
  {
    v13 = "";
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s ", v12, v13, v14);
  Name = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPrimSpec *)a1);
  if (*((char *)Name + 23) >= 0)
    v17 = (char *)Name;
  else
    v17 = (char *)*Name;
  sub_20BDDC0E4(&__p, v17);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, 0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v8 & 7) != 0)
  {
    v18 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  sub_20BFDF0DC(a1, a2, a3);
  sub_20BDDC0E4(&__p, "\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_20BDDC0E4(&__p, "{\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_20BFE07FC((unsigned int **)a1, a2, a3);
  sub_20BDDC0E4(&__p, "}\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BFDD0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(exception_object);
}

void sub_20BFDD150(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  int Variability;
  char *v6;
  std::string::size_type size;
  _BOOL4 v8;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v16;
  uint64_t *EmptyString;
  __int128 v18;
  unsigned int *v19;
  unsigned int v20;
  const pxrInternal__aapl__pxrReserved__::TfToken *v21;
  const pxrInternal__aapl__pxrReserved__::TfToken *v22;
  unint64_t Instance;
  uint64_t *v24;
  pxrInternal__aapl__pxrReserved__::TfToken *v25;
  pxrInternal__aapl__pxrReserved__::TfToken *v26;
  BOOL v27;
  _BOOL4 v28;
  int v29;
  int v30;
  std::string::size_type v31;
  int v32;
  void **v33;
  uint64_t *Name;
  void **v35;
  std::string *v36;
  const char *v37;
  const char *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  const pxrInternal__aapl__pxrReserved__::TfToken *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v46;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v47;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v48;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v49;
  int Permission;
  const char *v51;
  std::string::size_type v52;
  const char *v53;
  const pxrInternal__aapl__pxrReserved__::TfEnum *v54;
  uint64_t *NameForUnit;
  const char *v56;
  unsigned int *v57;
  unsigned int v58;
  int v59;
  std::string::size_type v60;
  int v61;
  void **v62;
  uint64_t *v63;
  void **v64;
  std::string *v65;
  const char *v66;
  uint64_t *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  __int128 v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  __int128 v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  __int128 v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unsigned int v103;
  unsigned int v104;
  int IsCustom;
  __int128 v107;
  pxrInternal__aapl__pxrReserved__::TfToken *v108[3];
  void *__p[2];
  uint64_t v110;
  std::string v111;
  _QWORD v112[2];
  uint64_t *TypeName;
  uint64_t v114;
  char v115;
  std::string v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  Variability = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetVariability(a1);
  v6 = (char *)pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(Variability);
  sub_20BDDC0E4(&v111, v6);
  size = HIBYTE(v111.__r_.__value_.__r.__words[2]);
  if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v111.__r_.__value_.__l.__size_;
  if (size)
    std::string::push_back(&v111, 32);
  pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetComment(a1, (uint64_t)&v116);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = v116.__r_.__value_.__l.__size_ == 0;
    operator delete(v116.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = SHIBYTE(v116.__r_.__value_.__r.__words[2]) == 0;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v9)
    v9 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v10 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v9 + 88));
  IsCustom = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::IsCustom(a1);
  v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v11)
    v11 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v12 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v11 + 56));
  v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v13)
    v13 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v14 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v13 + 432));
  if (!atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames))
    sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  TypeName = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(a1);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::GetSerializationName(&TypeName, (unsigned int **)&v116);
  if ((v116.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((v116.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_20BDDBFAC(__p, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    v18 = *(_OWORD *)EmptyString;
    v110 = EmptyString[2];
    *(_OWORD *)__p = v18;
  }
  if ((v116.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v19 = (unsigned int *)(v116.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::ListFields(a1, v108);
  v21 = v108[0];
  v22 = v108[1];
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v24 = (uint64_t *)(Instance + 128);
  if (!*(_BYTE *)(Instance + 192))
    v24 = 0;
  TypeName = v24;
  v25 = sub_20BFE6E18(v21, v22, (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **)&TypeName);
  v26 = v25;
  v27 = v8;
  if (v8)
  {
    v28 = v108[0] != v25;
    if (v108[0] == v25)
      v29 = v10;
    else
      v29 = 1;
    if ((v29 | IsCustom) != 1 && ((v12 | v14) & 1) != 0)
    {
      if (!v14)
        goto LABEL_110;
      goto LABEL_102;
    }
  }
  else
  {
    v28 = 1;
  }
  v114 = 0;
  if (v10)
  {
    pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDefaultValue(a1, &v116);
    sub_20BF4B5D8(&TypeName, &v116);
    sub_20BF4C2D8((uint64_t)&v116);
  }
  v103 = v14;
  v104 = v12;
  v30 = SHIBYTE(v111.__r_.__value_.__r.__words[2]);
  v31 = v111.__r_.__value_.__r.__words[0];
  v32 = SHIBYTE(v110);
  v33 = (void **)__p[0];
  Name = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
  v35 = __p;
  if (v32 < 0)
    v35 = v33;
  v36 = &v111;
  if (v30 < 0)
    v36 = (std::string *)v31;
  v37 = "custom ";
  if (!IsCustom)
    v37 = "";
  if (*((char *)Name + 23) >= 0)
    v38 = (const char *)Name;
  else
    v38 = (const char *)*Name;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s %s", v37, (const char *)v36, (const char *)v35, v38);
  if (v114)
  {
    sub_20BF4C6D0(v112, &TypeName);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDefaultValue(a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v112);
    sub_20BF4C2D8((uint64_t)v112);
  }
  if (v27)
  {
    v39 = 0;
  }
  else
  {
    v39 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, 0, v28);
    pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetComment(a1, (uint64_t)&v116);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, a3 + 1, &v116);
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v116.__r_.__value_.__l.__data_);
    sub_20BDDC0E4(&v116, "\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v116);
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v116.__r_.__value_.__l.__data_);
  }
  v40 = 126 - 2 * __clz((v26 - v108[0]) >> 3);
  if (v26 == v108[0])
    v41 = 0;
  else
    v41 = v40;
  sub_20BFE19BC(v108[0], (uint64_t *)v26, (uint64_t)&v107, v41, 1);
  v42 = v108[0];
  if (v108[0] != v26)
  {
    v43 = a3 + 1;
    if (v28)
      v44 = a3 + 1;
    else
      v44 = 0;
    if (v28)
      v45 = "\n";
    else
      v45 = "";
    do
    {
      v39 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, v39 & 1, v28);
      v46 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v46)
        v46 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v42 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v46 + 17) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20BDDC0E4(&v116, "doc = ");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v43, (uint64_t)&v116);
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v116.__r_.__value_.__l.__data_);
        pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDocumentation(a1, (uint64_t)&v116);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, 0, &v116);
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v116.__r_.__value_.__l.__data_);
        sub_20BDDC0E4(&v116, "\n");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v116);
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v116.__r_.__value_.__l.__data_);
      }
      else
      {
        v47 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v47)
          v47 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if ((*(_QWORD *)v42 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v47 + 31) & 0xFFFFFFFFFFFFFFF8))
        {
          Permission = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetPermission(a1);
          v51 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(Permission);
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v44, (pxrInternal__aapl__pxrReserved__ *)"permission = %s%s", v51, v45);
        }
        else
        {
          v48 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v48)
            v48 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if ((*(_QWORD *)v42 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v48 + 52) & 0xFFFFFFFFFFFFFFF8))
          {
            pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetSymmetryFunction(a1, (unsigned int **)&v116);
            v52 = v116.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
            if ((v116.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v53 = (const char *)(v52 + 16);
              if (*(char *)(v52 + 39) < 0)
                v53 = *(const char **)v53;
            }
            else
            {
              v53 = "";
            }
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v44, (pxrInternal__aapl__pxrReserved__ *)"symmetryFunction = %s%s", v53, v45);
            if ((v116.__r_.__value_.__s.__data_[0] & 7) != 0)
            {
              v57 = (unsigned int *)(v116.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
              do
                v58 = __ldxr(v57);
              while (__stlxr(v58 - 2, v57));
            }
          }
          else
          {
            v49 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v49)
              v49 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if ((*(_QWORD *)v42 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v49 + 16) & 0xFFFFFFFFFFFFFFF8))
            {
              v116.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetDisplayUnit(a1);
              v116.__r_.__value_.__l.__size_ = (std::string::size_type)v54;
              NameForUnit = pxrInternal__aapl__pxrReserved__::SdfGetNameForUnit((pxrInternal__aapl__pxrReserved__ *)&v116, v54);
              if (*((char *)NameForUnit + 23) >= 0)
                v56 = (const char *)NameForUnit;
              else
                v56 = (const char *)*NameForUnit;
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v44, (pxrInternal__aapl__pxrReserved__ *)"displayUnit = %s%s", v56, v45);
            }
            else
            {
              sub_20BFE12A0(a2, v43, a1, v42);
            }
          }
        }
      }
      v42 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v42 + 8);
    }
    while (v42 != v26);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::CloseParensIfNeeded(a2, a3, v39, v28);
  sub_20BDDC0E4(&v116, "\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v116);
  v12 = v104;
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v116.__r_.__value_.__l.__data_);
  sub_20BF4C2D8((uint64_t)&TypeName);
  if (!v103)
  {
LABEL_110:
    if (!v12)
      goto LABEL_184;
    goto LABEL_111;
  }
LABEL_102:
  v59 = SHIBYTE(v111.__r_.__value_.__r.__words[2]);
  v60 = v111.__r_.__value_.__r.__words[0];
  v61 = SHIBYTE(v110);
  v62 = (void **)__p[0];
  v63 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
  v64 = __p;
  if (v61 < 0)
    v64 = v62;
  v65 = &v111;
  if (v59 < 0)
    v65 = (std::string *)v60;
  if (*((char *)v63 + 23) >= 0)
    v66 = (const char *)v63;
  else
    v66 = (const char *)*v63;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"%s%s %s.timeSamples = {\n", (const char *)v65, (const char *)v64, v66);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteTimeSamples(a2, a3, a1);
  sub_20BDDC0E4(&v116, "}\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3, (uint64_t)&v116);
  if ((SHIBYTE(v116.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_110;
  operator delete(v116.__r_.__value_.__l.__data_);
  if (!v12)
    goto LABEL_184;
LABEL_111:
  pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList((unsigned int **)a1, &v107);
  v67 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
  if (sub_20BFE71C4((uint64_t)&v107)
    && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v107 + 16))(v107))
  {
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v107;
    if (*((_QWORD *)&v107 + 1))
    {
      v73 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
    }
    LODWORD(v116.__r_.__value_.__r.__words[2]) = 2;
    if (sub_20BFE7238((uint64_t)&v116))
    {
      sub_20BDDC0E4(&TypeName, "delete ");
      sub_20BFE6F1C(a2, a3, (unsigned int *)&v116, (uint64_t)&TypeName, (uint64_t)&v111, (uint64_t)__p, (uint64_t)v67);
      if (v115 < 0)
        operator delete(TypeName);
    }
    v75 = v107;
    if (*((_QWORD *)&v107 + 1))
    {
      v76 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    v78 = (std::__shared_weak_count *)v116.__r_.__value_.__l.__size_;
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v75;
    if (v78)
    {
      p_shared_owners = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldaxr(p_shared_owners);
      while (__stlxr(v80 - 1, p_shared_owners));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    LODWORD(v116.__r_.__value_.__r.__words[2]) = 1;
    if (sub_20BFE7238((uint64_t)&v116))
    {
      sub_20BDDC0E4(&TypeName, "add ");
      sub_20BFE6F1C(a2, a3, (unsigned int *)&v116, (uint64_t)&TypeName, (uint64_t)&v111, (uint64_t)__p, (uint64_t)v67);
      if (v115 < 0)
        operator delete(TypeName);
    }
    v81 = v107;
    if (*((_QWORD *)&v107 + 1))
    {
      v82 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    v84 = (std::__shared_weak_count *)v116.__r_.__value_.__l.__size_;
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v81;
    if (v84)
    {
      v85 = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    LODWORD(v116.__r_.__value_.__r.__words[2]) = 4;
    if (sub_20BFE7238((uint64_t)&v116))
    {
      sub_20BDDC0E4(&TypeName, "prepend ");
      sub_20BFE6F1C(a2, a3, (unsigned int *)&v116, (uint64_t)&TypeName, (uint64_t)&v111, (uint64_t)__p, (uint64_t)v67);
      if (v115 < 0)
        operator delete(TypeName);
    }
    v87 = v107;
    if (*((_QWORD *)&v107 + 1))
    {
      v88 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
      do
        v89 = __ldxr(v88);
      while (__stxr(v89 + 1, v88));
    }
    v90 = (std::__shared_weak_count *)v116.__r_.__value_.__l.__size_;
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v87;
    if (v90)
    {
      v91 = (unint64_t *)&v90->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    LODWORD(v116.__r_.__value_.__r.__words[2]) = 5;
    if (sub_20BFE7238((uint64_t)&v116))
    {
      sub_20BDDC0E4(&TypeName, "append ");
      sub_20BFE6F1C(a2, a3, (unsigned int *)&v116, (uint64_t)&TypeName, (uint64_t)&v111, (uint64_t)__p, (uint64_t)v67);
      if (v115 < 0)
        operator delete(TypeName);
    }
    v93 = v107;
    if (*((_QWORD *)&v107 + 1))
    {
      v94 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
      do
        v95 = __ldxr(v94);
      while (__stxr(v95 + 1, v94));
    }
    v96 = (std::__shared_weak_count *)v116.__r_.__value_.__l.__size_;
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v93;
    if (v96)
    {
      v97 = (unint64_t *)&v96->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    LODWORD(v116.__r_.__value_.__r.__words[2]) = 3;
    if (sub_20BFE7238((uint64_t)&v116))
    {
      sub_20BDDC0E4(&TypeName, "reorder ");
      sub_20BFE6F1C(a2, a3, (unsigned int *)&v116, (uint64_t)&TypeName, (uint64_t)&v111, (uint64_t)__p, (uint64_t)v67);
      if (v115 < 0)
        operator delete(TypeName);
    }
    v70 = (std::__shared_weak_count *)v116.__r_.__value_.__l.__size_;
    if (!v116.__r_.__value_.__l.__size_)
      goto LABEL_179;
    v99 = (unint64_t *)(v116.__r_.__value_.__l.__size_ + 8);
    do
      v72 = __ldaxr(v99);
    while (__stlxr(v72 - 1, v99));
  }
  else
  {
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v107;
    if (*((_QWORD *)&v107 + 1))
    {
      v68 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
    LODWORD(v116.__r_.__value_.__r.__words[2]) = 0;
    sub_20BDDC0E4(&TypeName, "");
    sub_20BFE6F1C(a2, a3, (unsigned int *)&v116, (uint64_t)&TypeName, (uint64_t)&v111, (uint64_t)__p, (uint64_t)v67);
    if (v115 < 0)
      operator delete(TypeName);
    v70 = (std::__shared_weak_count *)v116.__r_.__value_.__l.__size_;
    if (!v116.__r_.__value_.__l.__size_)
      goto LABEL_179;
    v71 = (unint64_t *)(v116.__r_.__value_.__l.__size_ + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
  }
  if (!v72)
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
  }
LABEL_179:
  v100 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
  if (*((_QWORD *)&v107 + 1))
  {
    v101 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
LABEL_184:
  v116.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
  sub_20BEEB2B8((void ***)&v116);
  if (SHIBYTE(v110) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
}

void sub_20BFDDD68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFDDF28(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  _BOOL4 v5;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v9;
  int IsCustom;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  const pxrInternal__aapl__pxrReserved__::TfToken *v12;
  unint64_t Instance;
  std::string::size_type v14;
  const pxrInternal__aapl__pxrReserved__::TfToken *v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  char *v20;
  int v21;
  void **v22;
  uint64_t *v23;
  char *v24;
  int v25;
  void **v26;
  uint64_t *Name;
  void **v28;
  const char *v29;
  void **v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *size;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  const pxrInternal__aapl__pxrReserved__::TfToken *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v47;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v48;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v49;
  int Permission;
  std::string::size_type v51;
  const char *v52;
  unsigned int *v53;
  unsigned int v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  void **v58;
  uint64_t *v59;
  void **v60;
  const char *v61;
  __int128 v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  void **v69;
  uint64_t *v70;
  void **v71;
  const char *v72;
  __int128 v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  int v79;
  void **v80;
  uint64_t *v81;
  void **v82;
  const char *v83;
  __int128 v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  int v90;
  void **v91;
  uint64_t *v92;
  void **v93;
  const char *v94;
  __int128 v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  int v101;
  void **v102;
  uint64_t *v103;
  void **v104;
  const char *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  int v112;
  void **v113;
  uint64_t *v114;
  void **v115;
  const char *v116;
  int v117;
  void **v118;
  uint64_t *v119;
  void **v120;
  const char *v121;
  unsigned int v122;
  unsigned int v123;
  const char *v124;
  uint64_t v125;
  int v126;
  std::string __p;
  void *v129;
  std::__shared_weak_count *v130;
  char v131;
  const pxrInternal__aapl__pxrReserved__::TfToken *v132;
  const pxrInternal__aapl__pxrReserved__::TfToken *v133;
  char v134;
  _QWORD v135[2];
  __int128 v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetComment(a1, (uint64_t)&v132);
  if (v134 < 0)
  {
    v5 = v133 == 0;
    operator delete(v132);
  }
  else
  {
    v5 = v134 == 0;
  }
  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v7 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 424));
  v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8)
    v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v122 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 88));
  v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v9)
    v9 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v123 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v9 + 432));
  IsCustom = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::IsCustom(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::ListFields(a1, &v132);
  v11 = v132;
  v12 = v133;
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v14 = Instance + 632;
  if (!*(_BYTE *)(Instance + 696))
    v14 = 0;
  __p.__r_.__value_.__r.__words[0] = v14;
  v15 = sub_20BFE76F8(v11, v12, (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **)&__p);
  v16 = v132 != v15 || !v5;
  if (v7)
  {
    pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList((unsigned int **)a1, &v129);
    if (sub_20BFE71C4((uint64_t)&v129)
      && !(*(unsigned int (**)(void *))(*(_QWORD *)v129 + 16))(v129))
    {
      v7 = 0;
    }
    else if (sub_20BFE71C4((uint64_t)&v129))
    {
      v7 = sub_20BFE7798((uint64_t)v129);
    }
    else
    {
      v7 = 1;
    }
    if (sub_20BFE71C4((uint64_t)&v129)
      && ((*(uint64_t (**)(void *))(*(_QWORD *)v129 + 16))(v129) & 1) == 0)
    {
      if (sub_20BFE71C4((uint64_t)&v129))
        v126 = sub_20BFE7798((uint64_t)v129);
      else
        v126 = 1;
    }
    else
    {
      v126 = 0;
    }
    v17 = v130;
    if (v130)
    {
      p_shared_owners = (unint64_t *)&v130->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    v126 = 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetVariability(a1))
    v20 = "";
  else
    v20 = "varying ";
  sub_20BDDC0E4(&v129, v20);
  if (((v16 | v7) & 1) == 0
    && ((v126 & 1) != 0 || (pxrInternal__aapl__pxrReserved__::SdfPropertySpec::IsCustom(a1) & 1) != 0))
  {
    if (IsCustom)
    {
      v25 = v131;
      v26 = (void **)v129;
      Name = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
      v28 = &v129;
      if (v25 < 0)
        v28 = v26;
      if (*((char *)Name + 23) >= 0)
        v29 = (const char *)Name;
      else
        v29 = (const char *)*Name;
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"custom %srel %s\n", (const char *)v28, v29);
    }
    goto LABEL_113;
  }
  v21 = v131;
  v22 = (void **)v129;
  v23 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
  if (IsCustom)
    v24 = "custom %srel %s";
  else
    v24 = "%srel %s";
  v30 = &v129;
  if (v21 < 0)
    v30 = v22;
  if (*((char *)v23 + 23) >= 0)
    v31 = (uint64_t)v23;
  else
    v31 = *v23;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)v24, v30, v31);
  if (v7)
  {
    pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList((unsigned int **)a1, &v136);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v136;
    if (*((_QWORD *)&v136 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 0;
    if (sub_20BFE7238((uint64_t)&__p))
      sub_20BFE7574((unsigned int *)&__p, a2, a3, 3);
    else
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)" = None");
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v35 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
    if (*((_QWORD *)&v136 + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
        if (v5)
          goto LABEL_73;
LABEL_75:
        v40 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, 0, 1);
        pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetComment(a1, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, a3 + 1, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
        goto LABEL_78;
      }
    }
  }
  if (!v5)
    goto LABEL_75;
LABEL_73:
  v40 = 0;
LABEL_78:
  v41 = 126 - 2 * __clz((v15 - v132) >> 3);
  if (v15 == v132)
    v42 = 0;
  else
    v42 = v41;
  sub_20BFE19BC(v132, (uint64_t *)v15, (uint64_t)&__p, v42, 1);
  v43 = v132;
  if (v132 != v15)
  {
    v44 = a3 + 1;
    if (v16)
      v45 = a3 + 1;
    else
      v45 = 0;
    v46 = "";
    if (v16)
      v46 = "\n";
    v124 = v46;
    v125 = v45;
    do
    {
      v40 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, v40 & 1, v16);
      v47 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v47)
        v47 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v43 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v47 + 17) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v44, (pxrInternal__aapl__pxrReserved__ *)"doc = ");
        pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDocumentation(a1, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, 0, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
      }
      else
      {
        v48 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v48)
          v48 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if ((*(_QWORD *)v43 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v48 + 31) & 0xFFFFFFFFFFFFFFF8))
        {
          Permission = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetPermission(a1);
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(Permission);
          if (v16)
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v44, (pxrInternal__aapl__pxrReserved__ *)"permission = %s\n");
          else
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"permission = %s");
        }
        else
        {
          v49 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v49)
            v49 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if ((*(_QWORD *)v43 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v49 + 52) & 0xFFFFFFFFFFFFFFF8))
          {
            pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetSymmetryFunction(a1, (unsigned int **)&__p);
            v51 = __p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
            if ((__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v52 = (const char *)(v51 + 16);
              if (*(char *)(v51 + 39) < 0)
                v52 = *(const char **)v52;
            }
            else
            {
              v52 = "";
            }
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v125, (pxrInternal__aapl__pxrReserved__ *)"symmetryFunction = %s%s", v52, v124);
            if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0)
            {
              v53 = (unsigned int *)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
              do
                v54 = __ldxr(v53);
              while (__stlxr(v54 - 2, v53));
            }
          }
          else
          {
            sub_20BFE12A0(a2, v44, a1, v43);
          }
        }
      }
      v43 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v43 + 8);
    }
    while (v43 != v15);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::CloseParensIfNeeded(a2, a3, v40, v16);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
LABEL_113:
  if (v126)
  {
    pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList((unsigned int **)a1, &v136);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v136;
    if (*((_QWORD *)&v136 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 2;
    if (sub_20BFE7238((uint64_t)&__p))
    {
      v57 = v131;
      v58 = (void **)v129;
      v59 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
      v60 = &v129;
      if (v57 < 0)
        v60 = v58;
      if (*((char *)v59 + 23) >= 0)
        v61 = (const char *)v59;
      else
        v61 = (const char *)*v59;
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"delete %srel %s", (const char *)v60, v61);
      sub_20BFE7574((unsigned int *)&__p, a2, a3, 0);
    }
    v62 = v136;
    if (*((_QWORD *)&v136 + 1))
    {
      v63 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    v65 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v62;
    if (v65)
    {
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 1;
    if (sub_20BFE7238((uint64_t)&__p))
    {
      v68 = v131;
      v69 = (void **)v129;
      v70 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
      v71 = &v129;
      if (v68 < 0)
        v71 = v69;
      if (*((char *)v70 + 23) >= 0)
        v72 = (const char *)v70;
      else
        v72 = (const char *)*v70;
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"add %srel %s", (const char *)v71, v72);
      sub_20BFE7574((unsigned int *)&__p, a2, a3, 1);
    }
    v73 = v136;
    if (*((_QWORD *)&v136 + 1))
    {
      v74 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
    }
    v76 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v73;
    if (v76)
    {
      v77 = (unint64_t *)&v76->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 4;
    if (sub_20BFE7238((uint64_t)&__p))
    {
      v79 = v131;
      v80 = (void **)v129;
      v81 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
      v82 = &v129;
      if (v79 < 0)
        v82 = v80;
      if (*((char *)v81 + 23) >= 0)
        v83 = (const char *)v81;
      else
        v83 = (const char *)*v81;
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"prepend %srel %s", (const char *)v82, v83);
      sub_20BFE7574((unsigned int *)&__p, a2, a3, 1);
    }
    v84 = v136;
    if (*((_QWORD *)&v136 + 1))
    {
      v85 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
    }
    v87 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v84;
    if (v87)
    {
      v88 = (unint64_t *)&v87->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 5;
    if (sub_20BFE7238((uint64_t)&__p))
    {
      v90 = v131;
      v91 = (void **)v129;
      v92 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
      v93 = &v129;
      if (v90 < 0)
        v93 = v91;
      if (*((char *)v92 + 23) >= 0)
        v94 = (const char *)v92;
      else
        v94 = (const char *)*v92;
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"append %srel %s", (const char *)v93, v94);
      sub_20BFE7574((unsigned int *)&__p, a2, a3, 1);
    }
    v95 = v136;
    if (*((_QWORD *)&v136 + 1))
    {
      v96 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    v98 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v95;
    if (v98)
    {
      v99 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 3;
    if (sub_20BFE7238((uint64_t)&__p))
    {
      v101 = v131;
      v102 = (void **)v129;
      v103 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
      v104 = &v129;
      if (v101 < 0)
        v104 = v102;
      if (*((char *)v103 + 23) >= 0)
        v105 = (const char *)v103;
      else
        v105 = (const char *)*v103;
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"reorder %srel %s", (const char *)v104, v105);
      sub_20BFE7574((unsigned int *)&__p, a2, a3, 0);
    }
    v106 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v107 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    v109 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
    if (*((_QWORD *)&v136 + 1))
    {
      v110 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
  }
  if (v123)
  {
    v112 = v131;
    v113 = (void **)v129;
    v114 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
    v115 = &v129;
    if (v112 < 0)
      v115 = v113;
    if (*((char *)v114 + 23) >= 0)
      v116 = (const char *)v114;
    else
      v116 = (const char *)*v114;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"%srel %s.timeSamples = {\n", (const char *)v115, v116);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteTimeSamples(a2, a3, a1);
    sub_20BDDC0E4(&__p, "}\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v122)
  {
    pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDefaultValue(a1, &v136);
    if (*((_QWORD *)&v136 + 1))
    {
      v117 = v131;
      v118 = (void **)v129;
      v119 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
      v120 = &v129;
      if (v117 < 0)
        v120 = v118;
      if (*((char *)v119 + 23) >= 0)
        v121 = (const char *)v119;
      else
        v121 = (const char *)*v119;
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"%srel %s.default = ", (const char *)v120, v121);
      sub_20BF4C6D0(v135, &v136);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDefaultValue(a2, 0, (pxrInternal__aapl__pxrReserved__::VtValue *)v135);
      sub_20BF4C2D8((uint64_t)v135);
      sub_20BDDC0E4(&__p, "\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_20BF4C2D8((uint64_t)&v136);
  }
  if (v131 < 0)
    operator delete(v129);
  v129 = &v132;
  sub_20BEEB2B8((void ***)&v129);
}

void sub_20BFDEBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  if (a21 < 0)
    operator delete(__p);
  sub_20BF4C2D8(v31 - 112);
  if (a27 < 0)
    operator delete(a22);
  a22 = &a28;
  sub_20BEEB2B8((void ***)&a22);
  _Unwind_Resume(a1);
}

void sub_20BFDECCC(uint64_t **a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  unsigned int **v9;
  std::string __p;
  unsigned int **v11;
  unsigned int **v12;

  pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetVariantList(a1, &v11);
  v6 = 126 - 2 * __clz(v12 - v11);
  if (v12 == v11)
    v7 = 0;
  else
    v7 = v6;
  sub_20BFE7890(v11, v12, v7, 1);
  if (v11 != v12)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"variantSet ");
    pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec *)a1, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, 0, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)" = {\n");
    v8 = (uint64_t **)v11;
    v9 = v12;
    if (v11 != v12)
    {
      do
        sub_20BFDEE24(v8++, a2, a3 + 1);
      while (v8 != (uint64_t **)v9);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"}\n");
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  sub_20BFE69E4((void ***)&__p);
}

void sub_20BFDEDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  __p = &a15;
  sub_20BFE69E4((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_20BFDEE24(uint64_t **a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int v7;
  std::string __p;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v9;

  pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetPrimSpec(a1, &__p);
  v6 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
  pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfVariantSpec *)a1, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, a3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_20BFDF0DC(&v9, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)" {\n");
  sub_20BFE07FC(&v9, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"}\n");
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v9);
}

void sub_20BFDEF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFDEF44()
{
  std::ostream::flush();
  return 1;
}

uint64_t sub_20BFDEF60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::ostream::write();
  return a3;
}

_QWORD *sub_20BFDEF88@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = sub_20BFDEFE0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_20BFDEFCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFDEFE0(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24C524C90;
  a1[1] = 0;
  pxrInternal__aapl__pxrReserved__::ArWritableAsset::ArWritableAsset(a1 + 3);
  a1[3] = off_24C524C48;
  a1[4] = a2;
  return a1;
}

void sub_20BFDF028(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFDF03C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C524C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFDF050(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C524C90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFDF074(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_20BFDF084(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_20CAB05D0;
  *(_QWORD *)(a1 + 32) = operator new[](0x1000uLL);
  *(_QWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_20BFDF0C8(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

void sub_20BFDF0DC(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  unint64_t Instance;
  unint64_t v9;
  uint64_t *v10;
  std::string::size_type size;
  int v12;
  _BOOL8 v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  unint64_t v15;
  uint64_t v16;
  const pxrInternal__aapl__pxrReserved__::TfToken *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v21;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v22;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v26;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v27;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v28;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v29;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v30;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v31;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v32;
  int Permission;
  unint64_t v34;
  const char *v35;
  int v36;
  const std::type_info *v37;
  char *v38;
  char v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unint64_t v43;
  const char *v44;
  int v45;
  const std::type_info *v46;
  char *v47;
  char v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  char v60;
  const std::type_info *v61;
  char *v62;
  unsigned int *v63;
  unsigned int v64;
  unint64_t v65;
  const char *v66;
  char v67;
  const std::type_info *v68;
  char *v69;
  unsigned int *v70;
  unsigned int v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  unsigned int *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  _QWORD *v82;
  unsigned int *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  _QWORD *v89;
  unsigned int *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  unsigned int *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  _QWORD *v120;
  uint64_t *v121;
  const char *v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  void *__p[2];
  _OWORD v129[2];
  uint64_t v130;
  std::__shared_weak_count *v131;
  __int128 *v132;
  _QWORD *v133[2];
  char *v134;
  std::string v135;
  _QWORD v136[3];
  __int128 v137;
  uint64_t v138;
  unsigned int *v139;
  _QWORD *v140[4];

  v140[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::ListFields(a1, v136);
  v6 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v136[0];
  v7 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v136[1];
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v9 = Instance + 488;
  if (!*(_BYTE *)(Instance + 552))
    v9 = 0;
  *(_QWORD *)&v137 = v9;
  v10 = (uint64_t *)sub_20BFE1708(v6, v7, (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **)&v137);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetComment(a1, (uint64_t)&v135);
  size = HIBYTE(v135.__r_.__value_.__r.__words[2]);
  if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v135.__r_.__value_.__l.__size_;
  if (size)
  {
    v12 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, 0, 1);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, a3 + 1, &v135);
    sub_20BDDC0E4(__p, "\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)__p);
    if (SBYTE7(v129[0]) < 0)
      operator delete(__p[0]);
    v13 = 1;
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)v136[0];
  }
  else
  {
    v12 = 0;
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)v136[0];
    v13 = v136[0] != (_QWORD)v10;
  }
  v15 = 126 - 2 * __clz(((char *)v10 - (char *)v14) >> 3);
  if (v10 == (uint64_t *)v14)
    v16 = 0;
  else
    v16 = v15;
  sub_20BFE19BC(v14, v10, (uint64_t)&v137, v16, 1);
  v17 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v136[0];
  if ((uint64_t *)v136[0] != v10)
  {
    v18 = a3 + 1;
    if (v13)
      v19 = a3 + 1;
    else
      v19 = 0;
    v123 = v19;
    v20 = "";
    if (v13)
      v20 = "\n";
    v122 = v20;
    while (1)
    {
      v12 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, v12 & 1, v13);
      v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v21)
        v21 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v21 + 17) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20BDDC0E4(__p, "doc = ");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)__p);
        if (SBYTE7(v129[0]) < 0)
          operator delete(__p[0]);
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetDocumentation(a1, (uint64_t)__p);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, 0, (const std::string *)__p);
        if (SBYTE7(v129[0]) < 0)
          operator delete(__p[0]);
        sub_20BDDC0E4(__p, "\n");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)__p);
        if (SBYTE7(v129[0]) < 0)
          operator delete(__p[0]);
        goto LABEL_228;
      }
      v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v22)
        v22 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v22 + 31) & 0xFFFFFFFFFFFFFFF8))
      {
        Permission = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPermission(a1);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(Permission);
        if (v13)
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v18, (pxrInternal__aapl__pxrReserved__ *)"permission = %s\n");
        else
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"permission = %s");
        goto LABEL_228;
      }
      v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v23)
        v23 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v23 + 52) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSymmetryFunction(a1, (unsigned int **)__p);
        v34 = (unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8;
        if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v35 = (const char *)(v34 + 16);
          if (*(char *)(v34 + 39) < 0)
            v35 = *(const char **)v35;
        }
        else
        {
          v35 = "";
        }
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v123, (pxrInternal__aapl__pxrReserved__ *)"symmetryFunction = %s%s", v35, v122);
        if (((uint64_t)__p[0] & 7) != 0)
        {
          v53 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v54 = __ldxr(v53);
          while (__stlxr(v54 - 2, v53));
        }
        goto LABEL_228;
      }
      v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v24)
        v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v24 + 30) & 0xFFFFFFFFFFFFFFF8))
        break;
      v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25)
        v25 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v25 + 35) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, v17, (pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "references");
        v45 = sub_20BFE4618((pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
        v48 = v45;
        if (v45)
        {
          if (((uint64_t)v140[0] & 4) != 0)
            v49 = (unsigned int *)(*(uint64_t (**)(unsigned int **))(((unint64_t)v140[0] & 0xFFFFFFFFFFFFFFF8)
                                                                             + 168))(&v139);
          else
            v49 = v139;
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfReference>(a2, v18, __p, (uint64_t)v49);
        }
        if (((uint64_t)__p[0] & 7) != 0)
        {
          v50 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v51 = __ldxr(v50);
          while (__stlxr(v51 - 2, v50));
        }
        if ((v48 & 1) != 0)
          goto LABEL_227;
        __p[0] = "sdf/fileIO_Common.h";
        __p[1] = "Sdf_WritePrimMetadata";
        *(_QWORD *)&v129[0] = 397;
        *((_QWORD *)&v129[0] + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_WritePrimMetadata(const SdfPrimSpec &, Sd"
                                    "f_TextOutput &, size_t)";
        LOBYTE(v129[1]) = 0;
        v52 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
        if (v52)
        {
          v44 = (const char *)(v52 + 16);
          if (*(char *)(v52 + 39) < 0)
            v44 = *(const char **)v44;
        }
        else
        {
          v44 = "";
        }
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v139, v46, v47, (uint64_t)&v137);
        v66 = (const char *)&v137;
        if (v138 < 0)
          v66 = (const char *)v137;
        goto LABEL_225;
      }
      v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v26)
        v26 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v26 + 59) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSetNameList((unsigned int **)a1, (std::__shared_weak_count_vtbl **)&v139);
        if (sub_20BFE4690((uint64_t)&v139)
          && !(*(unsigned int (**)(unsigned int *))(*(_QWORD *)v139 + 16))(v139))
        {
          __p[0] = v139;
          __p[1] = v140[0];
          if (v140[0])
          {
            v73 = v140[0] + 1;
            do
              v74 = __ldxr(v73);
            while (__stxr(v74 + 1, v73));
          }
          LODWORD(v129[0]) = 2;
          if (sub_20BFE4704((uint64_t)__p))
          {
            sub_20BDDC0E4(&v137, "delete variantSets = ");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
            sub_20BFE0F18((uint64_t)__p, (uint64_t)&v137);
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, v18, (uint64_t *)&v137);
            v132 = &v137;
            sub_20BDE5038((void ***)&v132);
            sub_20BDDC0E4(&v137, "\n");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
          }
          v76 = v139;
          v75 = v140[0];
          if (v140[0])
          {
            v77 = v140[0] + 1;
            do
              v78 = __ldxr(v77);
            while (__stxr(v78 + 1, v77));
          }
          v79 = (std::__shared_weak_count *)__p[1];
          __p[0] = v76;
          __p[1] = v75;
          if (v79)
          {
            p_shared_owners = (unint64_t *)&v79->__shared_owners_;
            do
              v81 = __ldaxr(p_shared_owners);
            while (__stlxr(v81 - 1, p_shared_owners));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          LODWORD(v129[0]) = 1;
          if (sub_20BFE4704((uint64_t)__p))
          {
            sub_20BDDC0E4(&v137, "add variantSets = ");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
            sub_20BFE0F18((uint64_t)__p, (uint64_t)&v137);
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, v18, (uint64_t *)&v137);
            v132 = &v137;
            sub_20BDE5038((void ***)&v132);
            sub_20BDDC0E4(&v137, "\n");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
          }
          v83 = v139;
          v82 = v140[0];
          if (v140[0])
          {
            v84 = v140[0] + 1;
            do
              v85 = __ldxr(v84);
            while (__stxr(v85 + 1, v84));
          }
          v86 = (std::__shared_weak_count *)__p[1];
          __p[0] = v83;
          __p[1] = v82;
          if (v86)
          {
            v87 = (unint64_t *)&v86->__shared_owners_;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v86);
            }
          }
          LODWORD(v129[0]) = 4;
          if (sub_20BFE4704((uint64_t)__p))
          {
            sub_20BDDC0E4(&v137, "prepend variantSets = ");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
            sub_20BFE0F18((uint64_t)__p, (uint64_t)&v137);
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, v18, (uint64_t *)&v137);
            v132 = &v137;
            sub_20BDE5038((void ***)&v132);
            sub_20BDDC0E4(&v137, "\n");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
          }
          v90 = v139;
          v89 = v140[0];
          if (v140[0])
          {
            v91 = v140[0] + 1;
            do
              v92 = __ldxr(v91);
            while (__stxr(v92 + 1, v91));
          }
          v93 = (std::__shared_weak_count *)__p[1];
          __p[0] = v90;
          __p[1] = v89;
          if (v93)
          {
            v94 = (unint64_t *)&v93->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          LODWORD(v129[0]) = 5;
          if (sub_20BFE4704((uint64_t)__p))
          {
            sub_20BDDC0E4(&v137, "append variantSets = ");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
            sub_20BFE0F18((uint64_t)__p, (uint64_t)&v137);
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, v18, (uint64_t *)&v137);
            v132 = &v137;
            sub_20BDE5038((void ***)&v132);
            sub_20BDDC0E4(&v137, "\n");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
          }
          v97 = v139;
          v96 = v140[0];
          if (v140[0])
          {
            v98 = v140[0] + 1;
            do
              v99 = __ldxr(v98);
            while (__stxr(v99 + 1, v98));
          }
          v100 = (std::__shared_weak_count *)__p[1];
          __p[0] = v97;
          __p[1] = v96;
          if (v100)
          {
            v101 = (unint64_t *)&v100->__shared_owners_;
            do
              v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
          LODWORD(v129[0]) = 3;
          if (sub_20BFE4704((uint64_t)__p))
          {
            sub_20BDDC0E4(&v137, "reorder variantSets = ");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
            sub_20BFE0F18((uint64_t)__p, (uint64_t)&v137);
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, v18, (uint64_t *)&v137);
            v132 = &v137;
            sub_20BDE5038((void ***)&v132);
            sub_20BDDC0E4(&v137, "\n");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v137);
            if (SHIBYTE(v138) < 0)
              operator delete((void *)v137);
          }
          v57 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v103 = (unint64_t *)((char *)__p[1] + 8);
            do
              v59 = __ldaxr(v103);
            while (__stlxr(v59 - 1, v103));
            goto LABEL_196;
          }
        }
        else
        {
          __p[0] = v139;
          __p[1] = v140[0];
          if (v140[0])
          {
            v55 = v140[0] + 1;
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          LODWORD(v129[0]) = 0;
          sub_20BDDC0E4(&v137, "variantSets = ");
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)&v137);
          if (SHIBYTE(v138) < 0)
            operator delete((void *)v137);
          sub_20BFE0F18((uint64_t)__p, (uint64_t)&v137);
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, v18, (uint64_t *)&v137);
          v132 = &v137;
          sub_20BDE5038((void ***)&v132);
          sub_20BDDC0E4(&v137, "\n");
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v137);
          if (SHIBYTE(v138) < 0)
            operator delete((void *)v137);
          v57 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v58 = (unint64_t *)((char *)__p[1] + 8);
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
LABEL_196:
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
        }
        v104 = (std::__shared_weak_count *)v140[0];
        if (v140[0])
        {
          v105 = v140[0] + 1;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        goto LABEL_228;
      }
      v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v27)
        v27 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v27 + 24) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, v17, (pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "inherits");
        v60 = sub_20BFE0F88(a2, v18, __p, (pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
        if (((uint64_t)__p[0] & 7) != 0)
        {
          v63 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v64 = __ldxr(v63);
          while (__stlxr(v64 - 2, v63));
        }
        if ((v60 & 1) == 0)
        {
          __p[0] = "sdf/fileIO_Common.h";
          __p[1] = "Sdf_WritePrimMetadata";
          *(_QWORD *)&v129[0] = 448;
          *((_QWORD *)&v129[0] + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_WritePrimMetadata(const SdfPrimSpec &, "
                                      "Sdf_TextOutput &, size_t)";
          LOBYTE(v129[1]) = 0;
          v65 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
          if (v65)
          {
            v44 = (const char *)(v65 + 16);
            if (*(char *)(v65 + 39) < 0)
              v44 = *(const char **)v44;
          }
          else
          {
            v44 = "";
          }
          pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v139, v61, v62, (uint64_t)&v137);
          v66 = (const char *)&v137;
          if (v138 < 0)
            v66 = (const char *)v137;
          goto LABEL_225;
        }
LABEL_227:
        sub_20BF4C2D8((uint64_t)&v139);
        goto LABEL_228;
      }
      v28 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v28)
        v28 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v28 + 38) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, v17, (pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "specializes");
        v67 = sub_20BFE0F88(a2, v18, __p, (pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
        if (((uint64_t)__p[0] & 7) != 0)
        {
          v70 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v71 = __ldxr(v70);
          while (__stlxr(v71 - 2, v70));
        }
        if ((v67 & 1) == 0)
        {
          __p[0] = "sdf/fileIO_Common.h";
          __p[1] = "Sdf_WritePrimMetadata";
          *(_QWORD *)&v129[0] = 457;
          *((_QWORD *)&v129[0] + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_WritePrimMetadata(const SdfPrimSpec &, "
                                      "Sdf_TextOutput &, size_t)";
          LOBYTE(v129[1]) = 0;
          v72 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
          if (v72)
          {
            v44 = (const char *)(v72 + 16);
            if (*(char *)(v72 + 39) < 0)
              v44 = *(const char **)v44;
          }
          else
          {
            v44 = "";
          }
          pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v139, v68, v69, (uint64_t)&v137);
          v66 = (const char *)&v137;
          if (v138 < 0)
            v66 = (const char *)v137;
          goto LABEL_225;
        }
        goto LABEL_227;
      }
      v29 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v29)
        v29 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v29 + 36) & 0xFFFFFFFFFFFFFFF8))
      {
        v140[0] = 0;
        v140[1] = 0;
        v139 = (unsigned int *)v140;
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v134);
        v133[0] = 0;
        v133[1] = 0;
        v132 = (__int128 *)v133;
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRelocates((unsigned int **)a1, &v130);
        memset(v129, 0, sizeof(v129));
        *(_OWORD *)__p = 0u;
        sub_20BFE47D4(&v130, &v137);
        *(_OWORD *)__p = v137;
        *(_QWORD *)&v129[0] = v138;
        sub_20BFE48DC(&v130, (uint64_t **)&v137);
        *(_OWORD *)((char *)v129 + 8) = v137;
        *((_QWORD *)&v129[1] + 1) = v138;
        while (!sub_20BFE4958((uint64_t)__p, (uint64_t)v129 + 8))
        {
          v107 = sub_20BFE1008((uint64_t)__p);
          v108 = sub_20BFE49FC(*(uint64_t **)v107, *(_QWORD *)(v107 + 8), *(char **)(v107 + 16));
          pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v108 + 8), &v134, &v126);
          v109 = sub_20BFE1008((uint64_t)__p);
          v110 = sub_20BFE49FC(*(uint64_t **)v109, *(_QWORD *)(v109 + 8), *(char **)(v109 + 16));
          pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v110, &v134, &v124);
          *(_QWORD *)&v137 = &v124;
          v111 = sub_20BFE4B68((uint64_t **)&v132, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v124, (uint64_t)&unk_20CAC184C, (_DWORD **)&v137);
          sub_20BFD3EBC((int *)v111 + 9, &v126);
          sub_20BFD3F10((int *)v111 + 10, &v127);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v125);
          sub_20BFD265C(&v124);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v127);
          sub_20BFD265C(&v126);
          sub_20BFE1080((uint64_t)__p);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteRelocates(a2, v18, v13, &v132);
        v112 = v131;
        if (v131)
        {
          v113 = (unint64_t *)&v131->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        sub_20BFE4CE8((uint64_t)&v132, v133[0]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v134 + 1);
        sub_20BFD265C(&v134);
        sub_20BFE4CE8((uint64_t)&v139, v140[0]);
        goto LABEL_228;
      }
      v30 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v30)
        v30 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v30 + 33) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPrefixSubstitutions(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v137);
        sub_20BDDC0E4(__p, "prefixSubstitutions = ");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)__p);
        if (SBYTE7(v129[0]) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v31)
          v31 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v31 + 48) & 0xFFFFFFFFFFFFFFF8))
        {
          v32 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v32)
            v32 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v32 + 57) & 0xFFFFFFFFFFFFFFF8))
          {
            pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSelections((unsigned int **)a1, &v137);
            sub_20BFE1128(&v137, (uint64_t *)__p);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v137);
            if (*(_QWORD *)&v129[0])
            {
              v132 = 0;
              *(void **)&v137 = __p[0];
              *((_QWORD *)&v137 + 1) = &__p[1];
              while ((_QWORD)v137 != *((_QWORD *)&v137 + 1))
              {
                v117 = *sub_20BFE1184(&v137, v115, v116) + 56;
                v140[0] = &off_24C520700;
                sub_20BF77444(&v139, v117);
                v120 = sub_20BFE1184(&v137, v118, v119);
                v121 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v132, (__int128 *)(*v120 + 32));
                sub_20BF4B5D8(v121, &v139);
                sub_20BF4C2D8((uint64_t)&v139);
                sub_20BFE11FC(&v137);
              }
              sub_20BDDC0E4(&v137, "variants = ");
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)&v137);
              if (SHIBYTE(v138) < 0)
                operator delete((void *)v137);
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a2, v18, v13, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v132, 0);
              sub_20BF49F14((_QWORD ***)&v132, 0);
            }
            sub_20BDE9D48((uint64_t)__p, (_QWORD *)__p[1]);
          }
          else
          {
            sub_20BFE12A0(a2, v18, a1, v17);
          }
          goto LABEL_228;
        }
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSuffixSubstitutions(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v137);
        sub_20BDDC0E4(__p, "suffixSubstitutions = ");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v18, (uint64_t)__p);
        if (SBYTE7(v129[0]) < 0)
          operator delete(__p[0]);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a2, v18, v13, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v137, 1);
      sub_20BF49F14((_QWORD ***)&v137, 0);
LABEL_228:
      v17 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v17 + 8);
      if (v17 == (const pxrInternal__aapl__pxrReserved__::TfToken *)v10)
        goto LABEL_240;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, v17, (pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "payload");
    v36 = sub_20BFE45A0((pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
    v39 = v36;
    if (v36)
    {
      if (((uint64_t)v140[0] & 4) != 0)
        v40 = (unsigned int *)(*(uint64_t (**)(unsigned int **))(((unint64_t)v140[0] & 0xFFFFFFFFFFFFFFF8)
                                                                         + 168))(&v139);
      else
        v40 = v139;
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>(a2, v18, __p, (uint64_t)v40);
    }
    if (((uint64_t)__p[0] & 7) != 0)
    {
      v41 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v42 = __ldxr(v41);
      while (__stlxr(v42 - 2, v41));
    }
    if ((v39 & 1) != 0)
      goto LABEL_227;
    __p[0] = "sdf/fileIO_Common.h";
    __p[1] = "Sdf_WritePrimMetadata";
    *(_QWORD *)&v129[0] = 388;
    *((_QWORD *)&v129[0] + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_WritePrimMetadata(const SdfPrimSpec &, Sdf_Te"
                                "xtOutput &, size_t)";
    LOBYTE(v129[1]) = 0;
    v43 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
    if (v43)
    {
      v44 = (const char *)(v43 + 16);
      if (*(char *)(v43 + 39) < 0)
        v44 = *(const char **)v44;
    }
    else
    {
      v44 = "";
    }
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v139, v37, v38, (uint64_t)&v137);
    v66 = (const char *)&v137;
    if (v138 < 0)
      v66 = (const char *)v137;
LABEL_225:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"'%s' field holding unexpected type '%s'", v44, v66);
    if (SHIBYTE(v138) < 0)
      operator delete((void *)v137);
    goto LABEL_227;
  }
LABEL_240:
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::CloseParensIfNeeded(a2, a3, v12, v13);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
  __p[0] = v136;
  sub_20BEEB2B8((void ***)__p);
}

void sub_20BFE0448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,void *__p,_QWORD *a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  sub_20BF49F14((_QWORD ***)&a38, 0);
  sub_20BDE9D48((uint64_t)&__p, a27);
  if (*(char *)(v41 - 177) < 0)
    operator delete(*(void **)(v41 - 200));
  __p = (void *)(v41 - 176);
  sub_20BEEB2B8((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFE07FC(unsigned int **a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  unsigned int **v15;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t Size;
  char v22;
  uint64_t i;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *__p;
  std::__shared_weak_count *v30;
  char v31;
  void **v32;
  void *v33;
  uint64_t v34;
  void *p_p;
  std::__shared_weak_count *v36;
  char v37;
  void *v38[2];
  char v39;
  void *v40;
  char v41;

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(a1, (uint64_t)&__p);
  sub_20BFE5328((uint64_t)&__p, v38);
  v6 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if ((void *)((char *)v38[1] - (char *)v38[0]) >= (void *)9)
  {
    sub_20BDDC0E4(&__p, "reorder properties = ");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3 + 1, (uint64_t)&__p);
    if (v31 < 0)
      operator delete(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, a3 + 1, (uint64_t *)v38);
    sub_20BDDC0E4(&__p, "\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&__p);
    if (v31 < 0)
      operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(a1, (uint64_t)&p_p);
  sub_20BFE5328((uint64_t)&p_p, &__p);
  v9 = v36;
  if (v36)
  {
    v10 = (unint64_t *)&v36->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if ((unint64_t)((char *)v30 - (_BYTE *)__p) >= 9)
  {
    sub_20BDDC0E4(&p_p, "reorder nameChildren = ");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3 + 1, (uint64_t)&p_p);
    if (v37 < 0)
      operator delete(p_p);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, a3 + 1, (uint64_t *)&__p);
    sub_20BDDC0E4(&p_p, "\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&p_p);
    if (v37 < 0)
      operator delete(p_p);
  }
  p_p = &__p;
  sub_20BEEB2B8((void ***)&p_p);
  __p = v38;
  sub_20BEEB2B8((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetProperties((uint64_t **)a1, (uint64_t)v38);
  sub_20BFE5454((uint64_t *)v38, (uint64_t)&__p);
  sub_20BFE6AEC((uint64_t)v38);
  v12 = 126 - 2 * __clz(((char *)v30 - (_BYTE *)__p) >> 3);
  if (v30 == __p)
    v13 = 0;
  else
    v13 = v12;
  sub_20BFE5A3C((unsigned int **)__p, (unsigned int **)v30, v13, 1);
  v14 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)__p;
  v15 = (unsigned int **)v30;
  if (__p != v30)
  {
    do
    {
      if (pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v14) == 1)
      {
        v16 = *v14;
        v38[0] = v16;
        if (v16)
        {
          do
            v17 = __ldaxr((unsigned int *)v16);
          while (__stlxr(v17 + 1, (unsigned int *)v16));
        }
        sub_20BFDD150((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v38, a2, a3 + 1);
      }
      else
      {
        v18 = *v14;
        v38[0] = v18;
        if (v18)
        {
          do
            v19 = __ldaxr((unsigned int *)v18);
          while (__stlxr(v19 + 1, (unsigned int *)v18));
        }
        sub_20BFDDF28((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v38, a2, a3 + 1);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v38);
      ++v14;
    }
    while (v14 != (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v15);
  }
  v38[0] = &__p;
  sub_20BFE69E4((void ***)v38);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetProperties((uint64_t **)a1, (uint64_t)v38);
  if (sub_20BFE52B0((uint64_t)v38))
  {
    sub_20BFE6AEC((uint64_t)v38);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildren((uint64_t **)a1, (uint64_t)&__p);
    v20 = sub_20BFE52EC((uint64_t)&__p);
    sub_20BFE6A54((uint64_t)&__p);
    sub_20BFE6AEC((uint64_t)v38);
    if (!v20)
    {
      sub_20BDDC0E4(v38, "\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)v38);
      if (v39 < 0)
        operator delete(v38[0]);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildren((uint64_t **)a1, (uint64_t)v38);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)v38);
  Size = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)v38);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)v38);
  if (Size)
  {
    v22 = 0;
    for (i = 0; i != Size; ++i)
    {
      sub_20BFE6B84((uint64_t *)v38, i, (unsigned int **)&p_p);
      if ((v22 & 1) != 0)
      {
        sub_20BDDC0E4(&__p, "\n");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&__p);
        if (v31 < 0)
          operator delete(__p);
      }
      sub_20BFDCEA0(&p_p, a2, a3 + 1);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&p_p);
      v22 = 1;
    }
  }
  sub_20BFE6A54((uint64_t)v38);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSets((uint64_t **)a1, (uint64_t)v38);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::IsValid((uint64_t)v38))
  {
    v24 = v38;
    if (!sub_20BFE6C04((uint64_t)v38))
      v24 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize((uint64_t)v38);
    sub_20BFE6C04((uint64_t)v38);
    v25 = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize((uint64_t)v38);
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize((uint64_t)v38);
    if (v25)
    {
      v26 = 0;
      v27 = a3 + 1;
      do
      {
        p_p = v38;
        v36 = (std::__shared_weak_count *)v26;
        sub_20BFE6C88((uint64_t)v24, (uint64_t)&p_p, &__p);
        v32 = v24;
        v33 = p_p;
        v34 = (uint64_t)v36;
        sub_20BFE6CE8((uint64_t *)p_p, (uint64_t)v36, (unsigned int **)&p_p);
        sub_20BFDECCC((uint64_t **)&p_p, a2, v27);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&p_p);
        if (v31 < 0)
          operator delete(__p);
        ++v26;
      }
      while (v25 != v26);
    }
  }
  if (v41 < 0)
    operator delete(v40);
  return sub_20BFE6D38((uint64_t)v38);
}

void sub_20BFE0CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *sub_20BFE0E90(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *result;
  void *v4;

  result = sub_20BFE0ED8();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType::~SdfTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *sub_20BFE0ED8()
{
  pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType::SdfTokens_StaticTokenType(v0);
  return v0;
}

void sub_20BFE0F04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20BFE0F18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *result;
  __int128 **v5;

  result = *(char **)a1;
  if (result)
  {
    v5 = (__int128 **)(*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)result + 112))(result, *(unsigned int *)(a1 + 16));
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    return sub_20BE78B98((char *)a2, *v5, v5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v5[1] - (char *)*v5) >> 3));
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t sub_20BFE0F88(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_20BFD6B4C(a4);
  if ((_DWORD)v8)
  {
    v9 = *((_QWORD *)a4 + 1);
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(a4);
    else
      v10 = *(_QWORD *)a4;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, a2, a3, v10);
  }
  return v8;
}

uint64_t sub_20BFE1008(uint64_t a1)
{
  char *v2;
  _QWORD v4[4];
  char v5;
  int v6;

  if (sub_20BFE4958(a1, a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator->";
    v4[2] = 287;
    v4[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::SdfMapEditPro"
            "xy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>, pxrIntern"
            "al__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>>::operator->() [T = const pxrInternal__aapl__pxrRe"
            "served__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved"
            "__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>, Reverse = false]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return a1;
}

uint64_t sub_20BFE1080(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  if (sub_20BFE4958(a1, a1 + 24))
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPa"
            "th>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>>::operator++() [T = const pxrInterna"
            "l__aapl__pxrReserved__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aap"
            "l__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v2 = *(_QWORD **)(a1 + 16);
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t *sub_20BFE1128@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *result;
  const void ***v5;

  result = (uint64_t *)sub_20BFE4D30(a1);
  if ((_DWORD)result)
  {
    v5 = (const void ***)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 48))(*a1);
    return sub_20BDEBF8C(a2, v5);
  }
  else
  {
    a2[2] = 0;
    a2[1] = 0;
    *a2 = (uint64_t)(a2 + 1);
  }
  return result;
}

_QWORD *sub_20BFE1184(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<std::string, std::string>>::operator->() [T "
            "= std::map<std::string, std::string>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20BFE11FC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<std::string, std::string>>::op"
            "erator++() [T = std::map<std::string, std::string>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t sub_20BFE12A0(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  const std::string *v7;
  const std::string *v8;
  const std::string *v9;
  const std::string *v10;
  const std::string *v11;
  const std::string *v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  const char *v20;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v21;
  unsigned __int8 *v22;
  std::string *p_p;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v24;
  uint64_t v25;
  const char *v26;
  std::string __p;
  const std::string *v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a3, a4, (pxrInternal__aapl__pxrReserved__::VtValue *)&v28);
  if (sub_20BFE4F24((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
  {
    if ((v29 & 4) != 0)
      v7 = (const std::string *)(*(uint64_t (**)(const std::string **))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(&v28);
    else
      v7 = v28;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<int>(a1, a2, a4, (uint64_t)v7);
  }
  else if (sub_20BFE4F9C((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
  {
    if ((v29 & 4) != 0)
      v8 = (const std::string *)(*(uint64_t (**)(const std::string **))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(&v28);
    else
      v8 = v28;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<long long>(a1, a2, a4, (uint64_t)v8);
  }
  else if (sub_20BFE5014((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
  {
    if ((v29 & 4) != 0)
      v9 = (const std::string *)(*(uint64_t (**)(const std::string **))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(&v28);
    else
      v9 = v28;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<unsigned int>(a1, a2, a4, (uint64_t)v9);
  }
  else if (sub_20BFE508C((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
  {
    if ((v29 & 4) != 0)
      v10 = (const std::string *)(*(uint64_t (**)(const std::string **))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(&v28);
    else
      v10 = v28;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<unsigned long long>(a1, a2, a4, (uint64_t)v10);
  }
  else if (sub_20BFE5104((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
  {
    if ((v29 & 4) != 0)
      v11 = (const std::string *)(*(uint64_t (**)(const std::string **))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(&v28);
    else
      v11 = v28;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<std::string>(a1, a2, a4, (uint64_t)v11);
  }
  else if (sub_20BFE517C((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
  {
    if ((v29 & 4) != 0)
      v12 = (const std::string *)(*(uint64_t (**)(const std::string **))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(&v28);
    else
      v12 = v28;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::TfToken>(a1, a2, a4, (uint64_t)v12);
  }
  else if (sub_20BFE4DCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
  {
    v14 = (uint64_t *)sub_20BFE4E44((pxrInternal__aapl__pxrReserved__::VtValue *)&v28);
    if (sub_20BFE4EAC((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
    {
      v15 = v14[1];
      if ((v15 & 4) != 0)
        v16 = (*(uint64_t (**)(uint64_t *))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(v14);
      else
        v16 = *v14;
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(a1, a2, a4, v16);
    }
    else
    {
      v19 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
      if (v19)
      {
        v20 = (const char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0)
          v20 = *(const char **)v20;
      }
      else
      {
        v20 = "";
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s = ", v20);
      if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
      {
        v24 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_20BF4D3FC((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a1, a2, 1, v24, 0);
      }
      else if (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
      {
        v25 = sub_20BFB2D9C((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
        if (*(char *)(v25 + 23) >= 0)
          v26 = (const char *)v25;
        else
          v26 = *(const char **)v25;
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s\n", v26);
      }
    }
  }
  else
  {
    v17 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
    if (v17)
    {
      v18 = (const char *)(v17 + 16);
      if (*(char *)(v17 + 39) < 0)
        v18 = *(const char **)v18;
    }
    else
    {
      v18 = "";
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s = ", v18);
    if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
    {
      v21 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_20BF4D3FC((pxrInternal__aapl__pxrReserved__::VtValue *)&v28);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a1, a2, 1, v21, 0);
    }
    else
    {
      if (sub_20BFB1AC0((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
      {
        v22 = (unsigned __int8 *)sub_20BFB0910((pxrInternal__aapl__pxrReserved__::VtValue *)&v28);
        pxrInternal__aapl__pxrReserved__::TfStringify((pxrInternal__aapl__pxrReserved__ *)*v22, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::StringFromVtValue(&v28, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s\n", (const char *)p_p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return sub_20BF4C2D8((uint64_t)&v28);
}

void sub_20BFE16C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  sub_20BF4C2D8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

const pxrInternal__aapl__pxrReserved__::TfToken *sub_20BFE1708(const pxrInternal__aapl__pxrReserved__::TfToken *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **a3)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v3;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t v6;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = a1;
    v3 = a2;
    while (2)
    {
      while (sub_20BFE17A8(a3, v5))
      {
        v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
        if (v5 == v3)
          return v3;
      }
      do
      {
        v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v3 - 8);
        if (v3 == v5)
          return v5;
      }
      while (!sub_20BFE17A8(a3, v3));
      v6 = *(_QWORD *)v5;
      *(_QWORD *)v5 = *(_QWORD *)v3;
      v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
      *(_QWORD *)v3 = v6;
      if (v3 != v5)
        continue;
      break;
    }
  }
  return v3;
}

BOOL sub_20BFE17A8(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v9;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v4 + 56) & 0xFFFFFFFFFFFFFFF8))
    return 0;
  if ((sub_20BFE1978(a1, a2) & 1) != 0)
    return 1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v5 + 30) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 35) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7)
    v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 36) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8)
    v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v8 + 24) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v9)
    v9 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v9 + 38) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10)
    v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v10 + 59) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v11)
    v11 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v11 + 57) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_20BFE1978(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsValidField(*a1, a2))
    return pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsMetadataField(*a1, a2);
  else
    return 1;
}

pxrInternal__aapl__pxrReserved__::TfToken *sub_20BFE19BC(pxrInternal__aapl__pxrReserved__::TfToken *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  int v21;
  char *v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  char *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if ((*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v31 = (*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
          v31 = (uint64_t)result;
        }
        if ((*v9 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v32 = (*v9 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
          v32 = (uint64_t)result;
        }
        if (*(char *)(v31 + 23) >= 0)
          v33 = (char *)v31;
        else
          v33 = *(char **)v31;
        v34 = *v33;
        if (*(char *)(v32 + 23) >= 0)
          v35 = (char *)v32;
        else
          v35 = *(char **)v32;
        if ((v34 & 0x80000000) == 0)
        {
          v36 = *v35;
          if ((v36 & 0x80000000) == 0)
          {
            v37 = v34;
            v38 = v36;
            v39 = (v36 ^ v37) & 0xFFFFFFDF;
            v40 = v37 < 0x40 || v39 == 0;
            if (!v40 && v38 >= 0x40)
            {
              if ((((_BYTE)v37 + 5) & 0x1Fu) >= (((_BYTE)v38 + 5) & 0x1Fu))
                return result;
              goto LABEL_70;
            }
          }
        }
        result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v31, v32);
        if ((_DWORD)result)
        {
LABEL_70:
          v41 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v41;
          return result;
        }
        return result;
      case 3uLL:
        return (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFE2320((uint64_t)v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return sub_20BFE3524(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return sub_20BFE37C0(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFE1E44((uint64_t)v9, a2, a3);
          else
            return (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFE20BC((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFE2320((uint64_t)&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_31;
          }
          else
          {
            sub_20BFE2320((uint64_t)v9, &v9[v13 >> 1], a2 - 1, a3);
            sub_20BFE2320((uint64_t)(v9 + 1), v15 - 1, a2 - 2, a3);
            sub_20BFE2320((uint64_t)(v9 + 2), &v9[v14 + 1], a2 - 3, a3);
            EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFE2320((uint64_t)(v15 - 1), v15, &v9[v14 + 1], a3);
            v17 = *v9;
            *v9 = *v15;
            *v15 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_31;
          }
          if ((*(v9 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v18 = (*(v9 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
            v18 = (uint64_t)EmptyString;
          }
          if ((*v9 & 0xFFFFFFFFFFFFFFF8) != 0)
            v19 = (uint64_t *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            v19 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          if (*(char *)(v18 + 23) >= 0)
            v20 = (char *)v18;
          else
            v20 = *(char **)v18;
          v21 = *v20;
          if (*((char *)v19 + 23) >= 0)
            v22 = (char *)v19;
          else
            v22 = (char *)*v19;
          if (v21 < 0
            || (v23 = *v22, v23 < 0)
            || ((v24 = v21,
                 v25 = v23,
                 v26 = (v23 ^ v24) & 0xFFFFFFDF,
                 v24 >= 0x40)
              ? (v27 = v26 == 0)
              : (v27 = 1),
                v27 || v25 < 0x40))
          {
            if ((pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v18, (uint64_t)v19) & 1) == 0)
            {
LABEL_36:
              result = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFE2740((uint64_t)v9, a2, a3);
              v9 = (uint64_t *)result;
              goto LABEL_38;
            }
          }
          else if ((((_BYTE)v24 + 5) & 0x1Fu) >= (((_BYTE)v25 + 5) & 0x1Fu))
          {
            goto LABEL_36;
          }
LABEL_31:
          v28 = sub_20BFE2C84((uint64_t)v9, a2, a3);
          if ((v29 & 1) == 0)
            goto LABEL_37;
          v30 = sub_20BFE3120(v9, v28, a3);
          v9 = v28 + 1;
          result = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFE3120(v28 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if ((v30 & 1) != 0)
              continue;
LABEL_37:
            result = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFE19BC(v8, v28, a3, -v11, a5 & 1);
            v9 = v28 + 1;
LABEL_38:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v28;
          if ((v30 & 1) != 0)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFE3B30((pxrInternal__aapl__pxrReserved__::TfToken *)v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t sub_20BFE1E44(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  char *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;

  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (_QWORD *)(result + 8);
    if ((_QWORD *)(result + 8) != a2)
    {
      v7 = (_QWORD *)result;
      do
      {
        v8 = v7;
        v7 = v5;
        if ((v8[1] & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v9 = (v8[1] & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          v9 = result;
        }
        if ((*v8 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v10 = (*v8 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          v10 = result;
        }
        if (*(char *)(v9 + 23) >= 0)
          v11 = (char *)v9;
        else
          v11 = *(char **)v9;
        v12 = *v11;
        if (*(char *)(v10 + 23) >= 0)
          v13 = (char *)v10;
        else
          v13 = *(char **)v10;
        if (v12 < 0
          || (v14 = *v13, v14 < 0)
          || ((v15 = v12,
               v16 = v14,
               v17 = (v14 ^ v15) & 0xFFFFFFDF,
               v15 >= 0x40)
            ? (v18 = v17 == 0)
            : (v18 = 1),
              v18 || v16 < 0x40))
        {
          result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v9, v10);
          if ((_DWORD)result)
          {
LABEL_24:
            v19 = *v7;
            *v7 = 0;
            v20 = v7;
            while (1)
            {
              v21 = v8;
              if ((*v20 & 7) != 0)
              {
                v22 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
                do
                  v23 = __ldxr(v22);
                while (__stlxr(v23 - 2, v22));
              }
              *v20 = *v8;
              *v8 = 0;
              if (v8 == v4)
                break;
              v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 16;
              if ((v19 & 0xFFFFFFFFFFFFFFF8) == 0)
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v24 = result;
              }
              --v8;
              if ((*(v21 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v25 = (*(v21 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v25 = result;
              }
              if (*(char *)(v24 + 23) >= 0)
                v26 = (char *)v24;
              else
                v26 = *(char **)v24;
              v27 = *v26;
              if (*(char *)(v25 + 23) >= 0)
                v28 = (char *)v25;
              else
                v28 = *(char **)v25;
              if (v27 < 0
                || (v29 = *v28, v29 < 0)
                || ((v30 = v27,
                     v31 = v29,
                     v32 = (v29 ^ v30) & 0xFFFFFFDF,
                     v30 >= 0x40)
                  ? (v33 = v32 == 0)
                  : (v33 = 1),
                    v33 || v31 < 0x40))
              {
                result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v24, v25);
                v20 = v21;
                if ((result & 1) == 0)
                  goto LABEL_52;
              }
              else
              {
                v34 = ((_BYTE)v31 + 5) & 0x1F;
                v20 = v21;
                if ((((_BYTE)v30 + 5) & 0x1Fu) >= v34)
                  goto LABEL_52;
              }
            }
            v21 = v4;
LABEL_52:
            if ((*v21 & 7) != 0)
            {
              v35 = (unsigned int *)(*v21 & 0xFFFFFFFFFFFFFFF8);
              do
                v36 = __ldxr(v35);
              while (__stlxr(v36 - 2, v35));
            }
            *v21 = v19;
          }
        }
        else if ((((_BYTE)v15 + 5) & 0x1Fu) < (((_BYTE)v16 + 5) & 0x1Fu))
        {
          goto LABEL_24;
        }
        v5 = v7 + 1;
      }
      while (v7 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_20BFE20BC(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  char *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  char *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;

  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (_QWORD *)(result + 8);
    while (v4 + 1 != a2)
    {
      v7 = v4;
      v4 = v5;
      if ((v7[1] & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v8 = (v7[1] & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        v8 = result;
      }
      if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v9 = (*v7 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        v9 = result;
      }
      if (*(char *)(v8 + 23) >= 0)
        v10 = (char *)v8;
      else
        v10 = *(char **)v8;
      v11 = *v10;
      if (*(char *)(v9 + 23) >= 0)
        v12 = (char *)v9;
      else
        v12 = *(char **)v9;
      if (v11 < 0
        || (v13 = *v12, v13 < 0)
        || ((v14 = v11,
             v15 = v13,
             v16 = (v13 ^ v14) & 0xFFFFFFDF,
             v14 >= 0x40)
          ? (v17 = v16 == 0)
          : (v17 = 1),
            v17 || v15 < 0x40))
      {
        result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v8, v9);
        if ((_DWORD)result)
        {
LABEL_23:
          v18 = *v4;
          *v4 = 0;
          v19 = v4;
          do
          {
            while (1)
            {
              v20 = v7;
              if ((*v19 & 7) != 0)
              {
                v21 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
                do
                  v22 = __ldxr(v21);
                while (__stlxr(v22 - 2, v21));
              }
              *v19 = *v7;
              *v7 = 0;
              v23 = (v18 & 0xFFFFFFFFFFFFFFF8) + 16;
              if ((v18 & 0xFFFFFFFFFFFFFFF8) == 0)
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v23 = result;
              }
              --v7;
              if ((*(v20 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v24 = (*(v20 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v24 = result;
              }
              v25 = *(char *)(v23 + 23) >= 0 ? (char *)v23 : *(char **)v23;
              v26 = *v25;
              v27 = *(char *)(v24 + 23) >= 0 ? (char *)v24 : *(char **)v24;
              if (v26 < 0)
                break;
              v28 = *v27;
              if (v28 < 0)
                break;
              v29 = v26;
              v30 = v28;
              v31 = (v28 ^ v29) & 0xFFFFFFDF;
              v32 = v29 < 0x40 || v31 == 0;
              if (v32 || v30 < 0x40)
                break;
              v33 = ((_BYTE)v30 + 5) & 0x1F;
              v19 = v20;
              if ((((_BYTE)v29 + 5) & 0x1Fu) >= v33)
                goto LABEL_48;
            }
            result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v23, v24);
            v19 = v20;
          }
          while ((result & 1) != 0);
LABEL_48:
          if ((*v20 & 7) != 0)
          {
            v34 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
            do
              v35 = __ldxr(v34);
            while (__stlxr(v35 - 2, v34));
          }
          *v20 = v18;
        }
      }
      else if ((((_BYTE)v14 + 5) & 0x1Fu) < (((_BYTE)v15 + 5) & 0x1Fu))
      {
        goto LABEL_23;
      }
      v5 = v4 + 1;
    }
  }
  return result;
}

uint64_t sub_20BFE2320(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  char *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  char *v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  char *v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  char *v41;
  int v42;
  char *v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *EmptyString;
  char *v53;
  int v54;
  char *v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  BOOL v60;
  uint64_t v61;

  v6 = a2;
  v7 = (uint64_t *)result;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v8 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v8 = result;
  }
  if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v9 = (*v7 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v9 = result;
  }
  if (*(char *)(v8 + 23) >= 0)
    v10 = (char *)v8;
  else
    v10 = *(char **)v8;
  v11 = *v10;
  if (*(char *)(v9 + 23) >= 0)
    v12 = (char *)v9;
  else
    v12 = *(char **)v9;
  if (v11 < 0
    || (v13 = *v12, v13 < 0)
    || ((v14 = v11,
         v15 = v13,
         v16 = (v13 ^ v14) & 0xFFFFFFDF,
         v14 >= 0x40)
      ? (v17 = v16 == 0)
      : (v17 = 1),
        v17 || v15 < 0x40))
  {
    result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, v8, v9);
    if ((result & 1) != 0)
    {
LABEL_21:
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v18 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        v18 = result;
      }
      if ((*v6 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v19 = (*v6 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        v19 = result;
      }
      if (*(char *)(v18 + 23) >= 0)
        v20 = (char *)v18;
      else
        v20 = *(char **)v18;
      v21 = *v20;
      if (*(char *)(v19 + 23) >= 0)
        v22 = (char *)v19;
      else
        v22 = *(char **)v19;
      if (v21 < 0
        || (v23 = *v22, v23 < 0)
        || ((v24 = v21,
             v25 = v23,
             v26 = (v23 ^ v24) & 0xFFFFFFDF,
             v24 >= 0x40)
          ? (v27 = v26 == 0)
          : (v27 = 1),
            v27 || v25 < 0x40))
      {
        result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, v18, v19);
        if ((result & 1) != 0)
          goto LABEL_41;
      }
      else if ((((_BYTE)v24 + 5) & 0x1Fu) < (((_BYTE)v25 + 5) & 0x1Fu))
      {
LABEL_41:
        result = 1;
LABEL_107:
        v6 = a3;
        goto LABEL_108;
      }
      v49 = *v7;
      *v7 = *v6;
      *v6 = v49;
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v50 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        v50 = result;
        v49 = *v6;
      }
      v51 = v49 & 0xFFFFFFFFFFFFFFF8;
      if (v51)
        EmptyString = (uint64_t *)(v51 + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      if (*(char *)(v50 + 23) >= 0)
        v53 = (char *)v50;
      else
        v53 = *(char **)v50;
      v54 = *v53;
      if (*((char *)EmptyString + 23) >= 0)
        v55 = (char *)EmptyString;
      else
        v55 = (char *)*EmptyString;
      if (v54 < 0
        || (v56 = *v55, v56 < 0)
        || ((v57 = v54,
             v58 = v56,
             v59 = (v56 ^ v57) & 0xFFFFFFDF,
             v57 >= 0x40)
          ? (v60 = v59 == 0)
          : (v60 = 1),
            v60 || v58 < 0x40))
      {
        if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, v50, (uint64_t)EmptyString))goto LABEL_106;
      }
      else if ((((_BYTE)v57 + 5) & 0x1Fu) < (((_BYTE)v58 + 5) & 0x1Fu))
      {
LABEL_106:
        result = 2;
        v7 = v6;
        goto LABEL_107;
      }
      return 1;
    }
  }
  else if ((((_BYTE)v14 + 5) & 0x1Fu) < (((_BYTE)v15 + 5) & 0x1Fu))
  {
    goto LABEL_21;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v28 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v28 = result;
  }
  if ((*v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v29 = (*v6 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v29 = result;
  }
  if (*(char *)(v28 + 23) >= 0)
    v30 = (char *)v28;
  else
    v30 = *(char **)v28;
  v31 = *v30;
  if (*(char *)(v29 + 23) >= 0)
    v32 = (char *)v29;
  else
    v32 = *(char **)v29;
  if ((v31 & 0x80000000) == 0)
  {
    v33 = *v32;
    if ((v33 & 0x80000000) == 0)
    {
      v34 = v31;
      v35 = v33;
      v36 = (v33 ^ v34) & 0xFFFFFFDF;
      v37 = v34 < 0x40 || v36 == 0;
      if (!v37 && v35 >= 0x40)
      {
        if ((((_BYTE)v34 + 5) & 0x1Fu) >= (((_BYTE)v35 + 5) & 0x1Fu))
          return 0;
LABEL_63:
        v38 = *v6;
        *v6 = *a3;
        *a3 = v38;
        if ((*v6 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v39 = (*v6 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          v39 = result;
        }
        if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0)
          v40 = (uint64_t *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v40 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        if (*(char *)(v39 + 23) >= 0)
          v41 = (char *)v39;
        else
          v41 = *(char **)v39;
        v42 = *v41;
        if (*((char *)v40 + 23) >= 0)
          v43 = (char *)v40;
        else
          v43 = (char *)*v40;
        if (v42 < 0
          || (v44 = *v43, v44 < 0)
          || ((v45 = v42,
               v46 = v44,
               v47 = (v44 ^ v45) & 0xFFFFFFDF,
               v45 >= 0x40)
            ? (v48 = v47 == 0)
            : (v48 = 1),
              v48 || v46 < 0x40))
        {
          if ((pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, v39, (uint64_t)v40) & 1) != 0)
            goto LABEL_84;
        }
        else if ((((_BYTE)v45 + 5) & 0x1Fu) < (((_BYTE)v46 + 5) & 0x1Fu))
        {
LABEL_84:
          result = 2;
LABEL_108:
          v61 = *v7;
          *v7 = *v6;
          *v6 = v61;
          return result;
        }
        return 1;
      }
    }
  }
  result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, v28, v29);
  if ((_DWORD)result)
    goto LABEL_63;
  return result;
}

uint64_t *sub_20BFE2740(uint64_t EmptyString, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  char *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *i;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  char *v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  char *v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int v53;
  char *v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  int v63;
  char *v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  BOOL v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;

  v5 = (uint64_t *)EmptyString;
  v6 = *(_QWORD *)EmptyString;
  *(_QWORD *)EmptyString = 0;
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v8 = v7 + 16;
  }
  else
  {
    EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
    v8 = EmptyString;
  }
  if ((*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v9 = (*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
    v9 = EmptyString;
  }
  if (*(char *)(v8 + 23) >= 0)
    v10 = (char *)v8;
  else
    v10 = *(char **)v8;
  v11 = *v10;
  if (*(char *)(v9 + 23) >= 0)
    v12 = (char *)v9;
  else
    v12 = *(char **)v9;
  if (v11 < 0
    || (v13 = *v12, v13 < 0)
    || ((v14 = v11,
         v15 = v13,
         v16 = (v13 ^ v14) & 0xFFFFFFDF,
         v14 >= 0x40)
      ? (v17 = v16 == 0)
      : (v17 = 1),
        v17 || v15 < 0x40))
  {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v8, v9);
    if ((_DWORD)EmptyString)
      goto LABEL_21;
  }
  else if ((((_BYTE)v14 + 5) & 0x1Fu) < (((_BYTE)v15 + 5) & 0x1Fu))
  {
LABEL_21:
    for (i = v5 + 1; ; ++i)
    {
      v19 = v7 + 16;
      if (!v7)
      {
        EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
        v19 = EmptyString;
      }
      if ((*i & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v20 = (*i & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
        v20 = EmptyString;
      }
      if (*(char *)(v19 + 23) >= 0)
        v21 = (char *)v19;
      else
        v21 = *(char **)v19;
      v22 = *v21;
      if (*(char *)(v20 + 23) >= 0)
        v23 = (char *)v20;
      else
        v23 = *(char **)v20;
      if (v22 < 0
        || (v24 = *v23, v24 < 0)
        || ((v25 = v22,
             v26 = v24,
             v27 = (v24 ^ v25) & 0xFFFFFFDF,
             v25 >= 0x40)
          ? (v28 = v27 == 0)
          : (v28 = 1),
            v28 || v26 < 0x40))
      {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v19, v20);
        if ((EmptyString & 1) != 0)
          goto LABEL_68;
      }
      else if ((((_BYTE)v25 + 5) & 0x1Fu) < (((_BYTE)v26 + 5) & 0x1Fu))
      {
        goto LABEL_68;
      }
    }
  }
  for (i = v5 + 1; i < a2; ++i)
  {
    v29 = v7 + 16;
    if (!v7)
    {
      EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
      v29 = EmptyString;
    }
    if ((*i & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v30 = (*i & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
      v30 = EmptyString;
    }
    if (*(char *)(v29 + 23) >= 0)
      v31 = (char *)v29;
    else
      v31 = *(char **)v29;
    v32 = *v31;
    if (*(char *)(v30 + 23) >= 0)
      v33 = (char *)v30;
    else
      v33 = *(char **)v30;
    if (v32 < 0
      || (v34 = *v33, v34 < 0)
      || ((v35 = v32,
           v36 = v34,
           v37 = (v34 ^ v35) & 0xFFFFFFDF,
           v35 >= 0x40)
        ? (v38 = v37 == 0)
        : (v38 = 1),
          v38 || v36 < 0x40))
    {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v29, v30);
      if ((EmptyString & 1) != 0)
        break;
    }
    else if ((((_BYTE)v35 + 5) & 0x1Fu) < (((_BYTE)v36 + 5) & 0x1Fu))
    {
      break;
    }
  }
LABEL_68:
  if (i < a2)
  {
    do
    {
      while (1)
      {
        --a2;
        v39 = v7 + 16;
        if (!v7)
        {
          EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          v39 = EmptyString;
        }
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v40 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          v40 = EmptyString;
        }
        v41 = *(char *)(v39 + 23) >= 0 ? (char *)v39 : *(char **)v39;
        v42 = *v41;
        v43 = *(char *)(v40 + 23) >= 0 ? (char *)v40 : *(char **)v40;
        if (v42 < 0)
          break;
        v44 = *v43;
        if (v44 < 0)
          break;
        v45 = v42;
        v46 = v44;
        v47 = (v44 ^ v45) & 0xFFFFFFDF;
        v48 = v45 < 0x40 || v47 == 0;
        if (v48 || v46 < 0x40)
          break;
        if ((((_BYTE)v45 + 5) & 0x1Fu) >= (((_BYTE)v46 + 5) & 0x1Fu))
          goto LABEL_90;
      }
      EmptyString = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v39, v40);
    }
    while ((_DWORD)EmptyString);
  }
LABEL_90:
  if (i >= a2)
    goto LABEL_135;
  do
  {
    v49 = *i;
    *i++ = *a2;
    *a2 = v49;
    while (1)
    {
      v50 = v7 + 16;
      if (!v7)
      {
        EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
        v50 = EmptyString;
      }
      if ((*i & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v51 = (*i & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
        v51 = EmptyString;
      }
      v52 = *(char *)(v50 + 23) >= 0 ? (char *)v50 : *(char **)v50;
      v53 = *v52;
      v54 = *(char *)(v51 + 23) >= 0 ? (char *)v51 : *(char **)v51;
      if (v53 < 0)
        break;
      v55 = *v54;
      if (v55 < 0)
        break;
      v56 = v53;
      v57 = v55;
      v58 = (v55 ^ v56) & 0xFFFFFFDF;
      v59 = v56 < 0x40 || v58 == 0;
      if (v59 || v57 < 0x40)
        break;
      if ((((_BYTE)v56 + 5) & 0x1Fu) < (((_BYTE)v57 + 5) & 0x1Fu))
        goto LABEL_113;
LABEL_111:
      ++i;
    }
    EmptyString = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v50, v51);
    if ((EmptyString & 1) == 0)
      goto LABEL_111;
    do
    {
      while (1)
      {
LABEL_113:
        --a2;
        v60 = v7 + 16;
        if (!v7)
        {
          EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          v60 = EmptyString;
        }
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v61 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          v61 = EmptyString;
        }
        v62 = *(char *)(v60 + 23) >= 0 ? (char *)v60 : *(char **)v60;
        v63 = *v62;
        v64 = *(char *)(v61 + 23) >= 0 ? (char *)v61 : *(char **)v61;
        if (v63 < 0)
          break;
        v65 = *v64;
        if (v65 < 0)
          break;
        v66 = v63;
        v67 = v65;
        v68 = (v65 ^ v66) & 0xFFFFFFDF;
        v69 = v66 < 0x40 || v68 == 0;
        if (v69 || v67 < 0x40)
          break;
        if ((((_BYTE)v66 + 5) & 0x1Fu) >= (((_BYTE)v67 + 5) & 0x1Fu))
          goto LABEL_134;
      }
      EmptyString = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v60, v61);
    }
    while ((_DWORD)EmptyString);
LABEL_134:
    ;
  }
  while (i < a2);
LABEL_135:
  v70 = i - 1;
  v71 = *v5;
  v72 = *v5 & 7;
  if (i - 1 == v5)
  {
    if (v72)
    {
      v75 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
      do
        v76 = __ldxr(v75);
      while (__stlxr(v76 - 2, v75));
    }
  }
  else
  {
    if (v72)
    {
      v73 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
      do
        v74 = __ldxr(v73);
      while (__stlxr(v74 - 2, v73));
    }
    *v5 = *v70;
    *v70 = 0;
  }
  *(i - 1) = v6;
  return i;
}

void sub_20BFE2C54(_Unwind_Exception *a1)
{
  char v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20BFE2C84(uint64_t EmptyString, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  char *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  char *v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  char v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int v53;
  char *v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  char *v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;

  v5 = (uint64_t *)EmptyString;
  v6 = 0;
  v7 = *(_QWORD *)EmptyString;
  *(_QWORD *)EmptyString = 0;
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  while (1)
  {
    if ((v5[v6 + 1] & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v9 = (v5[v6 + 1] & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
      v9 = EmptyString;
    }
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
    if (!v8)
    {
      EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
      v10 = EmptyString;
    }
    v11 = *(char *)(v9 + 23) >= 0 ? (char *)v9 : *(char **)v9;
    v12 = *v11;
    v13 = *(char *)(v10 + 23) >= 0 ? (char *)v10 : *(char **)v10;
    if (v12 < 0)
      break;
    v14 = *v13;
    if (v14 < 0)
      break;
    v15 = v12;
    v16 = v14;
    v17 = (v14 ^ v15) & 0xFFFFFFDF;
    v18 = v15 < 0x40 || v17 == 0;
    if (v18 || v16 < 0x40)
      break;
    if ((((_BYTE)v15 + 5) & 0x1Fu) >= (((_BYTE)v16 + 5) & 0x1Fu))
      goto LABEL_23;
LABEL_21:
    ++v6;
  }
  EmptyString = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v9, v10);
  if ((_DWORD)EmptyString)
    goto LABEL_21;
LABEL_23:
  v19 = &v5[v6];
  v20 = (unint64_t)&v5[v6 + 1];
  if (v6 * 8)
  {
    do
    {
      while (1)
      {
        v21 = *--a2;
        v22 = v21 & 0xFFFFFFFFFFFFFFF8;
        if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v23 = v22 + 16;
        }
        else
        {
          EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          v23 = EmptyString;
        }
        v24 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
        if (!v8)
        {
          EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          v24 = EmptyString;
        }
        v25 = *(char *)(v23 + 23) >= 0 ? (char *)v23 : *(char **)v23;
        v26 = *v25;
        v27 = *(char *)(v24 + 23) >= 0 ? (char *)v24 : *(char **)v24;
        if (v26 < 0)
          break;
        v28 = *v27;
        if (v28 < 0)
          break;
        v29 = v26;
        v30 = v28;
        v31 = (v28 ^ v29) & 0xFFFFFFDF;
        v32 = v29 < 0x40 || v31 == 0;
        if (v32 || v30 < 0x40)
          break;
        if ((((_BYTE)v29 + 5) & 0x1Fu) < (((_BYTE)v30 + 5) & 0x1Fu))
          goto LABEL_75;
      }
      EmptyString = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v23, v24);
    }
    while ((EmptyString & 1) == 0);
  }
  else if (v20 < (unint64_t)a2)
  {
    do
    {
      while (1)
      {
        v33 = *--a2;
        v34 = v33 & 0xFFFFFFFFFFFFFFF8;
        if ((v33 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v35 = v34 + 16;
        }
        else
        {
          EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          v35 = EmptyString;
        }
        v36 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
        if (!v8)
        {
          EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          v36 = EmptyString;
        }
        v37 = *(char *)(v35 + 23) >= 0 ? (char *)v35 : *(char **)v35;
        v38 = *v37;
        v39 = *(char *)(v36 + 23) >= 0 ? (char *)v36 : *(char **)v36;
        if (v38 < 0)
          break;
        v40 = *v39;
        if (v40 < 0)
          break;
        v41 = v38;
        v42 = v40;
        v43 = (v40 ^ v41) & 0xFFFFFFDF;
        v44 = v41 < 0x40 || v43 == 0;
        if (v44 || v42 < 0x40)
          break;
        if ((((_BYTE)v41 + 5) & 0x1Fu) < (((_BYTE)v42 + 5) & 0x1Fu) || v20 >= (unint64_t)a2)
          goto LABEL_75;
      }
      EmptyString = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v35, v36);
      if (v20 >= (unint64_t)a2)
        v46 = 1;
      else
        v46 = EmptyString;
    }
    while ((v46 & 1) == 0);
  }
LABEL_75:
  if (v20 >= (unint64_t)a2)
    goto LABEL_122;
  v47 = (uint64_t *)v20;
  v48 = a2;
  while (2)
  {
    v49 = *v47;
    *v47++ = *v48;
    *v48 = v49;
    while (2)
    {
      if ((*v47 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v50 = (*v47 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
        v50 = EmptyString;
      }
      v51 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
      if (!v8)
      {
        EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
        v51 = EmptyString;
      }
      if (*(char *)(v50 + 23) >= 0)
        v52 = (char *)v50;
      else
        v52 = *(char **)v50;
      v53 = *v52;
      if (*(char *)(v51 + 23) >= 0)
        v54 = (char *)v51;
      else
        v54 = *(char **)v51;
      if ((v53 & 0x80000000) == 0)
      {
        v55 = *v54;
        if ((v55 & 0x80000000) == 0)
        {
          v56 = v53;
          v57 = v55;
          v58 = (v55 ^ v56) & 0xFFFFFFDF;
          v59 = v56 < 0x40 || v58 == 0;
          if (!v59 && v57 >= 0x40)
          {
            if ((((_BYTE)v56 + 5) & 0x1Fu) >= (((_BYTE)v57 + 5) & 0x1Fu))
              goto LABEL_99;
            goto LABEL_97;
          }
        }
      }
      EmptyString = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v50, v51);
      if ((_DWORD)EmptyString)
      {
LABEL_97:
        ++v47;
        continue;
      }
      break;
    }
    do
    {
      while (1)
      {
LABEL_99:
        v60 = *--v48;
        v61 = v60 & 0xFFFFFFFFFFFFFFF8;
        if ((v60 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v62 = v61 + 16;
        }
        else
        {
          EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          v62 = EmptyString;
        }
        v63 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
        if (!v8)
        {
          EmptyString = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          v63 = EmptyString;
        }
        v64 = *(char *)(v62 + 23) >= 0 ? (char *)v62 : *(char **)v62;
        v65 = *v64;
        v66 = *(char *)(v63 + 23) >= 0 ? (char *)v63 : *(char **)v63;
        if (v65 < 0)
          break;
        v67 = *v66;
        if (v67 < 0)
          break;
        v68 = v65;
        v69 = v67;
        v70 = (v67 ^ v68) & 0xFFFFFFDF;
        v71 = v68 < 0x40 || v70 == 0;
        if (v71 || v69 < 0x40)
          break;
        if ((((_BYTE)v68 + 5) & 0x1Fu) < (((_BYTE)v69 + 5) & 0x1Fu))
          goto LABEL_120;
      }
      EmptyString = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v62, v63);
    }
    while ((EmptyString & 1) == 0);
LABEL_120:
    if (v47 < v48)
      continue;
    break;
  }
  v19 = v47 - 1;
LABEL_122:
  v72 = *v5;
  v73 = *v5 & 7;
  if (v19 == v5)
  {
    if (v73)
    {
      v76 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
      do
        v77 = __ldxr(v76);
      while (__stlxr(v77 - 2, v76));
    }
  }
  else
  {
    if (v73)
    {
      v74 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
      do
        v75 = __ldxr(v74);
      while (__stlxr(v75 - 2, v74));
    }
    *v5 = *v19;
    *v19 = 0;
  }
  *v19 = v7;
  return v19;
}

void sub_20BFE30F4(_Unwind_Exception *a1)
{
  char v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20BFE3120(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  char *v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t *EmptyString;
  char *v42;
  int v43;
  char *v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  uint64_t v50;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v8 = (*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)1);
        v8 = result;
      }
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      if (*(char *)(v8 + 23) >= 0)
        v42 = (char *)v8;
      else
        v42 = *(char **)v8;
      v43 = *v42;
      if (*((char *)EmptyString + 23) >= 0)
        v44 = (char *)EmptyString;
      else
        v44 = (char *)*EmptyString;
      if ((v43 & 0x80000000) == 0)
      {
        v45 = *v44;
        if ((v45 & 0x80000000) == 0)
        {
          v46 = v43;
          v47 = v45;
          v48 = (v45 ^ v46) & 0xFFFFFFDF;
          v49 = v46 < 0x40 || v48 == 0;
          if (!v49 && v47 >= 0x40)
          {
            if ((((_BYTE)v46 + 5) & 0x1Fu) >= (((_BYTE)v47 + 5) & 0x1Fu))
              return 1;
            goto LABEL_85;
          }
        }
      }
      if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v8, (uint64_t)EmptyString))
      {
LABEL_85:
        v50 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v50;
      }
      return 1;
    case 3:
      sub_20BFE2320((uint64_t)a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_20BFE3524(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20BFE37C0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      v10 = sub_20BFE2320((uint64_t)a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      while (2)
      {
        if ((*v11 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v13 = (*v11 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          v10 = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v10);
          v13 = v10;
        }
        if ((*v9 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v14 = (*v9 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          v10 = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v10);
          v14 = v10;
        }
        if (*(char *)(v13 + 23) >= 0)
          v15 = (char *)v13;
        else
          v15 = *(char **)v13;
        v16 = *v15;
        if (*(char *)(v14 + 23) >= 0)
          v17 = (char *)v14;
        else
          v17 = *(char **)v14;
        if (v16 < 0
          || (v18 = *v17, v18 < 0)
          || ((v19 = v16,
               v20 = v18,
               v21 = (v18 ^ v19) & 0xFFFFFFDF,
               v19 >= 0x40)
            ? (v22 = v21 == 0)
            : (v22 = 1),
              v22 || v20 < 0x40))
        {
          v10 = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v13, v14);
          if (!(_DWORD)v10)
            goto LABEL_60;
        }
        else if ((((_BYTE)v19 + 5) & 0x1Fu) >= (((_BYTE)v20 + 5) & 0x1Fu))
        {
          goto LABEL_60;
        }
        v23 = *v11;
        *v11 = 0;
        v24 = v11;
        while (1)
        {
          v25 = v9;
          if (v9 != v24)
          {
            if ((*v24 & 7) != 0)
            {
              v26 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
              do
                v27 = __ldxr(v26);
              while (__stlxr(v27 - 2, v26));
            }
            *v24 = *v9;
            *v9 = 0;
          }
          if (v9 == a1)
            break;
          v28 = (v23 & 0xFFFFFFFFFFFFFFF8) + 16;
          if ((v23 & 0xFFFFFFFFFFFFFFF8) == 0)
          {
            v10 = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v10);
            v28 = v10;
          }
          --v9;
          if ((*(v25 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v29 = (*(v25 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            v10 = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v10);
            v29 = v10;
          }
          if (*(char *)(v28 + 23) >= 0)
            v30 = (char *)v28;
          else
            v30 = *(char **)v28;
          v31 = *v30;
          if (*(char *)(v29 + 23) >= 0)
            v32 = (char *)v29;
          else
            v32 = *(char **)v29;
          if (v31 < 0
            || (v33 = *v32, v33 < 0)
            || ((v34 = v31,
                 v35 = v33,
                 v36 = (v33 ^ v34) & 0xFFFFFFDF,
                 v34 >= 0x40)
              ? (v37 = v36 == 0)
              : (v37 = 1),
                v37 || v35 < 0x40))
          {
            v10 = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v28, v29);
            v24 = v25;
            if ((v10 & 1) == 0)
              goto LABEL_56;
          }
          else
          {
            v38 = ((_BYTE)v35 + 5) & 0x1F;
            v24 = v25;
            if ((((_BYTE)v34 + 5) & 0x1Fu) >= v38)
              goto LABEL_56;
          }
        }
        v25 = a1;
LABEL_56:
        if ((*v25 & 7) != 0)
        {
          v39 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
          do
            v40 = __ldxr(v39);
          while (__stlxr(v40 - 2, v39));
        }
        *v25 = v23;
        if (++v12 != 8)
        {
LABEL_60:
          v9 = v11++;
          if (v11 == a2)
            return 1;
          continue;
        }
        return v11 + 1 == a2;
      }
  }
}

pxrInternal__aapl__pxrReserved__::TfToken *sub_20BFE3524(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  pxrInternal__aapl__pxrReserved__::TfToken *result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  char *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  char *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  char *v37;
  int v38;
  uint64_t v39;

  result = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFE2320((uint64_t)a1, a2, a3, a5);
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v11 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v11 = (uint64_t)result;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v12 = (uint64_t)result;
  }
  if (*(char *)(v11 + 23) >= 0)
    v13 = (char *)v11;
  else
    v13 = *(char **)v11;
  v14 = *v13;
  if (*(char *)(v12 + 23) >= 0)
    v15 = (char *)v12;
  else
    v15 = *(char **)v12;
  if (v14 < 0
    || (v16 = *v15, v16 < 0)
    || ((v17 = v14,
         v18 = v16,
         v19 = (v16 ^ v17) & 0xFFFFFFDF,
         v17 >= 0x40)
      ? (v20 = v19 == 0)
      : (v20 = 1),
        v20 || v18 < 0x40))
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a5, v11, v12);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v17 + 5) & 0x1Fu) >= (((_BYTE)v18 + 5) & 0x1Fu))
  {
    return result;
  }
  v21 = *a3;
  *a3 = *a4;
  *a4 = v21;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v22 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v22 = (uint64_t)result;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v23 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v23 = (uint64_t)result;
  }
  if (*(char *)(v22 + 23) >= 0)
    v24 = (char *)v22;
  else
    v24 = *(char **)v22;
  v25 = *v24;
  if (*(char *)(v23 + 23) >= 0)
    v26 = (char *)v23;
  else
    v26 = *(char **)v23;
  if (v25 < 0
    || (v27 = *v26, v27 < 0)
    || ((v28 = v25,
         v29 = v27,
         v30 = (v27 ^ v28) & 0xFFFFFFDF,
         v28 >= 0x40)
      ? (v31 = v30 == 0)
      : (v31 = 1),
        v31 || v29 < 0x40))
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a5, v22, v23);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v28 + 5) & 0x1Fu) >= (((_BYTE)v29 + 5) & 0x1Fu))
  {
    return result;
  }
  v32 = *a2;
  *a2 = *a3;
  *a3 = v32;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v33 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v33 = (uint64_t)result;
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v34 = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v34 = (uint64_t)result;
  }
  if (*(char *)(v33 + 23) >= 0)
    v35 = (char *)v33;
  else
    v35 = *(char **)v33;
  v36 = *v35;
  if (*(char *)(v34 + 23) >= 0)
    v37 = (char *)v34;
  else
    v37 = *(char **)v34;
  if (v36 < 0
    || (v38 = *v37, v38 < 0)
    || v36 < 0x40u
    || ((v38 ^ v36) & 0xFFFFFFDF) == 0
    || v38 < 0x40u)
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a5, v33, v34);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v36 + 5) & 0x1Fu) >= (((_BYTE)v38 + 5) & 0x1Fu))
  {
    return result;
  }
  v39 = *a1;
  *a1 = *a2;
  *a2 = v39;
  return result;
}

pxrInternal__aapl__pxrReserved__::TfToken *sub_20BFE37C0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::TfToken *result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  char *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int v45;
  char *v46;
  int v47;
  uint64_t v48;

  result = sub_20BFE3524(a1, a2, a3, a4, a6);
  if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v13 = (*a5 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v13 = (uint64_t)result;
  }
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v14 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v14 = (uint64_t)result;
  }
  if (*(char *)(v13 + 23) >= 0)
    v15 = (char *)v13;
  else
    v15 = *(char **)v13;
  v16 = *v15;
  if (*(char *)(v14 + 23) >= 0)
    v17 = (char *)v14;
  else
    v17 = *(char **)v14;
  if (v16 < 0
    || (v18 = *v17, v18 < 0)
    || ((v19 = v16,
         v20 = v18,
         v21 = (v18 ^ v19) & 0xFFFFFFDF,
         v19 >= 0x40)
      ? (v22 = v21 == 0)
      : (v22 = 1),
        v22 || v20 < 0x40))
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a6, v13, v14);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v19 + 5) & 0x1Fu) >= (((_BYTE)v20 + 5) & 0x1Fu))
  {
    return result;
  }
  v23 = *a4;
  *a4 = *a5;
  *a5 = v23;
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v24 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v24 = (uint64_t)result;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v25 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v25 = (uint64_t)result;
  }
  if (*(char *)(v24 + 23) >= 0)
    v26 = (char *)v24;
  else
    v26 = *(char **)v24;
  v27 = *v26;
  if (*(char *)(v25 + 23) >= 0)
    v28 = (char *)v25;
  else
    v28 = *(char **)v25;
  if (v27 < 0
    || (v29 = *v28, v29 < 0)
    || ((v30 = v27,
         v31 = v29,
         v32 = (v29 ^ v30) & 0xFFFFFFDF,
         v30 >= 0x40)
      ? (v33 = v32 == 0)
      : (v33 = 1),
        v33 || v31 < 0x40))
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a6, v24, v25);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v30 + 5) & 0x1Fu) >= (((_BYTE)v31 + 5) & 0x1Fu))
  {
    return result;
  }
  v34 = *a3;
  *a3 = *a4;
  *a4 = v34;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v35 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v35 = (uint64_t)result;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v36 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v36 = (uint64_t)result;
  }
  if (*(char *)(v35 + 23) >= 0)
    v37 = (char *)v35;
  else
    v37 = *(char **)v35;
  v38 = *v37;
  if (*(char *)(v36 + 23) >= 0)
    v39 = (char *)v36;
  else
    v39 = *(char **)v36;
  if (v38 < 0
    || (v40 = *v39, v40 < 0)
    || v38 < 0x40u
    || ((v40 ^ v38) & 0xFFFFFFDF) == 0
    || v40 < 0x40u)
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a6, v35, v36);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v38 + 5) & 0x1Fu) >= (((_BYTE)v40 + 5) & 0x1Fu))
  {
    return result;
  }
  v41 = *a2;
  *a2 = *a3;
  *a3 = v41;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v42 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v42 = (uint64_t)result;
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v43 = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v43 = (uint64_t)result;
  }
  if (*(char *)(v42 + 23) >= 0)
    v44 = (char *)v42;
  else
    v44 = *(char **)v42;
  v45 = *v44;
  if (*(char *)(v43 + 23) >= 0)
    v46 = (char *)v43;
  else
    v46 = *(char **)v43;
  if (v45 < 0
    || (v47 = *v46, v47 < 0)
    || v45 < 0x40u
    || ((v47 ^ v45) & 0xFFFFFFDF) == 0
    || v47 < 0x40u)
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a6, v42, v43);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v45 + 5) & 0x1Fu) >= (((_BYTE)v47 + 5) & 0x1Fu))
  {
    return result;
  }
  v48 = *a1;
  *a1 = *a2;
  *a2 = v48;
  return result;
}

uint64_t *sub_20BFE3B30(pxrInternal__aapl__pxrReserved__::TfToken *EmptyString, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  char *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  pxrInternal__aapl__pxrReserved__::TfToken *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;

  if (EmptyString != (pxrInternal__aapl__pxrReserved__::TfToken *)a2)
  {
    v6 = a2;
    v7 = (uint64_t *)EmptyString;
    v8 = (char *)a2 - (char *)EmptyString;
    v9 = ((char *)a2 - (char *)EmptyString) >> 3;
    if ((char *)a2 - (char *)EmptyString >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t *)((char *)EmptyString + 8 * v10);
      do
      {
        EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFE3D84((uint64_t)v7, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      while (1)
      {
        if ((*v14 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v15 = (*v14 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          v15 = (uint64_t)EmptyString;
        }
        if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v16 = (*v7 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          v16 = (uint64_t)EmptyString;
        }
        v17 = *(char *)(v15 + 23) >= 0 ? (char *)v15 : *(char **)v15;
        v18 = *v17;
        v19 = *(char *)(v16 + 23) >= 0 ? (char *)v16 : *(char **)v16;
        if (v18 < 0)
          break;
        v20 = *v19;
        if (v20 < 0)
          break;
        v21 = v18;
        v22 = v20;
        v23 = (v20 ^ v21) & 0xFFFFFFDF;
        v24 = v21 < 0x40 || v23 == 0;
        if (v24 || v22 < 0x40)
          break;
        if ((((_BYTE)v21 + 5) & 0x1Fu) < (((_BYTE)v22 + 5) & 0x1Fu))
          goto LABEL_27;
LABEL_28:
        if (++v14 == a3)
        {
          v13 = a3;
          goto LABEL_32;
        }
      }
      EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, v15, v16);
      if (!(_DWORD)EmptyString)
        goto LABEL_28;
LABEL_27:
      v25 = *v14;
      *v14 = *v7;
      *v7 = v25;
      EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFE3D84((uint64_t)v7, a4, v9, v7);
      goto LABEL_28;
    }
LABEL_32:
    if (v8 >= 9)
    {
      v26 = (unint64_t)v8 >> 3;
      do
      {
        v27 = *v7;
        *v7 = 0;
        v28 = sub_20BFE41C0((pxrInternal__aapl__pxrReserved__::TfToken *)v7, a4, v26);
        --v6;
        v29 = *(_QWORD *)v28;
        v30 = *(_QWORD *)v28 & 7;
        if (v28 == (pxrInternal__aapl__pxrReserved__::TfToken *)v6)
        {
          if (v30)
          {
            v33 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
            do
              v34 = __ldxr(v33);
            while (__stlxr(v34 - 2, v33));
          }
          *(_QWORD *)v28 = v27;
        }
        else
        {
          if (v30)
          {
            v31 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
            do
              v32 = __ldxr(v31);
            while (__stlxr(v32 - 2, v31));
          }
          *(_QWORD *)v28 = *v6;
          *v6 = v27;
          sub_20BFE4348((uint64_t)v7, (uint64_t)v28 + 8, a4, ((pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v28 + 8)- (pxrInternal__aapl__pxrReserved__::TfToken *)v7) >> 3);
        }
      }
      while (v26-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_20BFE3D84(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  char *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  char *v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int v54;
  char *v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  BOOL v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = a3 - 2;
  if (a3 < 2)
    return result;
  v5 = a4;
  v6 = result;
  v65 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - result) >> 3)
    return result;
  v9 = ((uint64_t)a4 - result) >> 2;
  v10 = v9 + 1;
  v11 = (uint64_t *)(result + 8 * (v9 + 1));
  v12 = v9 + 2;
  if (v9 + 2 >= a3)
    goto LABEL_25;
  if ((*v11 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v13 = (*v11 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v13 = result;
  }
  if ((v11[1] & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v14 = (v11[1] & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v14 = result;
  }
  if (*(char *)(v13 + 23) >= 0)
    v15 = (char *)v13;
  else
    v15 = *(char **)v13;
  v16 = *v15;
  if (*(char *)(v14 + 23) >= 0)
    v17 = (char *)v14;
  else
    v17 = *(char **)v14;
  if (v16 < 0
    || (v18 = *v17, v18 < 0)
    || ((v19 = v16,
         v20 = v18,
         v21 = (v18 ^ v19) & 0xFFFFFFDF,
         v19 >= 0x40)
      ? (v22 = v21 == 0)
      : (v22 = 1),
        v22 || v20 < 0x40))
  {
    result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a2, v13, v14);
    if (!(_DWORD)result)
      goto LABEL_25;
    goto LABEL_24;
  }
  if ((((_BYTE)v19 + 5) & 0x1Fu) < (((_BYTE)v20 + 5) & 0x1Fu))
  {
LABEL_24:
    ++v11;
    v10 = v12;
  }
LABEL_25:
  if ((*v11 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v23 = (*v11 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v23 = result;
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v24 = (*v5 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v24 = result;
  }
  if (*(char *)(v23 + 23) >= 0)
    v25 = (char *)v23;
  else
    v25 = *(char **)v23;
  v26 = *v25;
  if (*(char *)(v24 + 23) >= 0)
    v27 = (char *)v24;
  else
    v27 = *(char **)v24;
  if (v26 < 0
    || (v28 = *v27, v28 < 0)
    || ((v29 = v26,
         v30 = v28,
         v31 = (v28 ^ v29) & 0xFFFFFFDF,
         v29 >= 0x40)
      ? (v32 = v31 == 0)
      : (v32 = 1),
        v32 || v30 < 0x40))
  {
    result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a2, v23, v24);
    if ((result & 1) != 0)
      return result;
  }
  else if ((((_BYTE)v29 + 5) & 0x1Fu) < (((_BYTE)v30 + 5) & 0x1Fu))
  {
    return result;
  }
  v33 = *v5;
  *v5 = 0;
  v63 = a2;
  v64 = v33;
  v34 = v33 & 0xFFFFFFFFFFFFFFF8;
  v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 16;
  while (1)
  {
    v36 = v11;
    if (v11 != v5)
    {
      if ((*v5 & 7) != 0)
      {
        v37 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      *v5 = *v11;
      *v11 = 0;
    }
    if (v65 < v10)
      break;
    v39 = 2 * v10;
    v10 = (2 * v10) | 1;
    v11 = (uint64_t *)(v6 + 8 * v10);
    v40 = v39 + 2;
    if (v39 + 2 < a3)
    {
      if ((*v11 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v41 = (*v11 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        v41 = result;
      }
      if ((v11[1] & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v42 = (v11[1] & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        v42 = result;
      }
      if (*(char *)(v41 + 23) >= 0)
        v43 = (char *)v41;
      else
        v43 = *(char **)v41;
      v44 = *v43;
      if (*(char *)(v42 + 23) >= 0)
        v45 = (char *)v42;
      else
        v45 = *(char **)v42;
      if (v44 < 0
        || (v46 = *v45, v46 < 0)
        || ((v47 = v44,
             v48 = v46,
             v49 = (v46 ^ v47) & 0xFFFFFFDF,
             v47 >= 0x40)
          ? (v50 = v49 == 0)
          : (v50 = 1),
            v50 || v48 < 0x40))
      {
        result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(v63, v41, v42);
        if (!(_DWORD)result)
          goto LABEL_74;
LABEL_73:
        ++v11;
        v10 = v40;
        goto LABEL_74;
      }
      if ((((_BYTE)v47 + 5) & 0x1Fu) < (((_BYTE)v48 + 5) & 0x1Fu))
        goto LABEL_73;
    }
LABEL_74:
    if ((*v11 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v51 = (*v11 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      v51 = result;
    }
    v52 = v35;
    if (!v34)
    {
      result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      v52 = result;
    }
    if (*(char *)(v51 + 23) >= 0)
      v53 = (char *)v51;
    else
      v53 = *(char **)v51;
    v54 = *v53;
    if (*(char *)(v52 + 23) >= 0)
      v55 = (char *)v52;
    else
      v55 = *(char **)v52;
    if (v54 < 0
      || (v56 = *v55, v56 < 0)
      || ((v57 = v54,
           v58 = v56,
           v59 = (v56 ^ v57) & 0xFFFFFFDF,
           v57 >= 0x40)
        ? (v60 = v59 == 0)
        : (v60 = 1),
          v60 || v58 < 0x40))
    {
      result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(v63, v51, v52);
      v5 = v36;
      if ((_DWORD)result)
        break;
    }
    else
    {
      v5 = v36;
      if ((((_BYTE)v57 + 5) & 0x1Fu) < (((_BYTE)v58 + 5) & 0x1Fu))
        break;
    }
  }
  if ((*v36 & 7) != 0)
  {
    v61 = (unsigned int *)(*v36 & 0xFFFFFFFFFFFFFFF8);
    do
      v62 = __ldxr(v61);
    while (__stlxr(v62 - 2, v61));
  }
  *v36 = v64;
  return result;
}

pxrInternal__aapl__pxrReserved__::TfToken *sub_20BFE41C0(pxrInternal__aapl__pxrReserved__::TfToken *EmptyString, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int *v22;
  unsigned int v23;

  v5 = EmptyString;
  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8 * v6 + 8);
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 >= a3)
      goto LABEL_26;
    if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v12 = (*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
      v12 = (uint64_t)EmptyString;
    }
    if ((*((_QWORD *)v9 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v13 = (*((_QWORD *)v9 + 1) & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
      v13 = (uint64_t)EmptyString;
    }
    if (*(char *)(v12 + 23) >= 0)
      v14 = (char *)v12;
    else
      v14 = *(char **)v12;
    v15 = *v14;
    if (*(char *)(v13 + 23) >= 0)
      v16 = (char *)v13;
    else
      v16 = *(char **)v13;
    if ((v15 & 0x80000000) == 0)
    {
      v17 = *v16;
      if ((v17 & 0x80000000) == 0)
      {
        v18 = v15;
        v19 = v17;
        v20 = (v17 ^ v18) & 0xFFFFFFDF;
        v21 = v18 < 0x40 || v20 == 0;
        if (!v21 && v19 >= 0x40)
        {
          if ((((_BYTE)v18 + 5) & 0x1Fu) >= (((_BYTE)v19 + 5) & 0x1Fu))
            goto LABEL_26;
LABEL_25:
          v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v9 + 8);
          v6 = v11;
          goto LABEL_26;
        }
      }
    }
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a2, v12, v13);
    if ((_DWORD)EmptyString)
      goto LABEL_25;
LABEL_26:
    if (v9 != v5)
    {
      if ((*(_QWORD *)v5 & 7) != 0)
      {
        v22 = (unsigned int *)(*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      *(_QWORD *)v5 = *(_QWORD *)v9;
      *(_QWORD *)v9 = 0;
    }
    v5 = v9;
  }
  while (v6 <= v8);
  return v9;
}

uint64_t sub_20BFE4348(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  char *v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int *v37;
  unsigned int v38;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = result;
    v8 = v4 >> 1;
    v9 = (uint64_t *)(result + 8 * (v4 >> 1));
    if ((*v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v10 = (*v9 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      v10 = result;
    }
    v12 = *(_QWORD *)(a2 - 8);
    v11 = (uint64_t *)(a2 - 8);
    v13 = v12 & 0xFFFFFFFFFFFFFFF8;
    if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v14 = v13 + 16;
    }
    else
    {
      result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      v14 = result;
    }
    if (*(char *)(v10 + 23) >= 0)
      v15 = (char *)v10;
    else
      v15 = *(char **)v10;
    v16 = *v15;
    if (*(char *)(v14 + 23) >= 0)
      v17 = (char *)v14;
    else
      v17 = *(char **)v14;
    if (v16 < 0
      || (v18 = *v17, v18 < 0)
      || ((v19 = v16,
           v20 = v18,
           v21 = (v18 ^ v19) & 0xFFFFFFDF,
           v19 >= 0x40)
        ? (v22 = v21 == 0)
        : (v22 = 1),
          v22 || v20 < 0x40))
    {
      result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v10, v14);
      if (!(_DWORD)result)
        return result;
    }
    else if ((((_BYTE)v19 + 5) & 0x1Fu) >= (((_BYTE)v20 + 5) & 0x1Fu))
    {
      return result;
    }
    v23 = *v11;
    *v11 = 0;
    while (1)
    {
      v24 = v9;
      if (v9 != v11)
      {
        if ((*v11 & 7) != 0)
        {
          v25 = (unsigned int *)(*v11 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stlxr(v26 - 2, v25));
        }
        *v11 = *v9;
        *v9 = 0;
      }
      if (!v8)
        break;
      v8 = (v8 - 1) >> 1;
      v9 = (uint64_t *)(v7 + 8 * v8);
      if ((*v9 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v27 = (*v9 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        v27 = result;
      }
      v28 = (v23 & 0xFFFFFFFFFFFFFFF8) + 16;
      if ((v23 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        v28 = result;
      }
      if (*(char *)(v27 + 23) >= 0)
        v29 = (char *)v27;
      else
        v29 = *(char **)v27;
      v30 = *v29;
      if (*(char *)(v28 + 23) >= 0)
        v31 = (char *)v28;
      else
        v31 = *(char **)v28;
      if (v30 < 0
        || (v32 = *v31, v32 < 0)
        || ((v33 = v30,
             v34 = v32,
             v35 = (v32 ^ v33) & 0xFFFFFFDF,
             v33 >= 0x40)
          ? (v36 = v35 == 0)
          : (v36 = 1),
            v36 || v34 < 0x40))
      {
        result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v27, v28);
        v11 = v24;
        if ((result & 1) == 0)
          break;
      }
      else
      {
        v11 = v24;
        if ((((_BYTE)v33 + 5) & 0x1Fu) >= (((_BYTE)v34 + 5) & 0x1Fu))
          break;
      }
    }
    if ((*v24 & 7) != 0)
    {
      v37 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
    *v24 = v23;
  }
  return result;
}

uint64_t sub_20BFE45A0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAB1142 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524CD0);
}

uint64_t sub_20BFE4618(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAB04B6 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524CE0);
}

uint64_t sub_20BFE4690(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listEditorProxy.h";
    v2[1] = "_Validate";
    v2[2] = 423;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy"
            ">::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

unint64_t sub_20BFE4704(uint64_t a1)
{
  unint64_t result;
  _QWORD *v3;

  if (!sub_20BFE4760(a1))
    return 0;
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)result + 112))(result, *(unsigned int *)(a1 + 16));
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3);
  }
  return result;
}

uint64_t sub_20BFE4760(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 702;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy>::_Va"
            "lidate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

uint64_t *sub_20BFE47D4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)sub_20BFE4840(a1);
  if ((_DWORD)result)
  {
    v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 48))(*a1);
    result = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 48))(*a1);
    v6 = *result;
    *a2 = a1;
    a2[1] = v5;
    a2[2] = v6;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

uint64_t sub_20BFE4840(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = *a1;
  if (v2
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2)
    && (!*a1 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1)))
  {
    return 1;
  }
  v4[0] = "sdf/mapEditProxy.h";
  v4[1] = "_Validate";
  v4[2] = 772;
  v4[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxr"
          "Internal__aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>::_"
          "Validate() const [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::Sd"
          "fPath>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing an invalid map proxy");
  return 0;
}

uint64_t sub_20BFE48DC@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = sub_20BFE4840(a1);
  if ((_DWORD)result)
  {
    result = *a1;
    if (*a1)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
      result = *a1;
      if (*a1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    }
    else
    {
      v5 = 0;
    }
    *a2 = a1;
    a2[1] = (uint64_t *)v5;
    a2[2] = (uint64_t *)(result + 8);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

BOOL sub_20BFE4958(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *(uint64_t **)a1;
  v5 = *(uint64_t **)a2;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
    return 1;
  if (v4)
  {
    v6 = *v4;
    if (*v4)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
    if (*(_QWORD *)(a1 + 16) != v6 + 8)
      return 0;
    v5 = *(uint64_t **)a2;
  }
  if (!v5)
    return 1;
  v8 = *v5;
  if (*v5)
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  return *(_QWORD *)(a2 + 16) == v8 + 8;
}

char *sub_20BFE49FC(uint64_t *a1, uint64_t a2, char *a3)
{
  _QWORD v4[4];
  char v5;
  int v6;
  char *v7;

  v7 = a3;
  if (!a1)
  {
    v4[0] = "sdf/mapEditProxy.h";
    v4[1] = "Dereference";
    v4[2] = 225;
    v4[3] = "static const value_type &pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrRe"
            "served__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocate"
            "sMapProxyValuePolicy>::Traits::Dereference(const This *, const Type *, const_inner_iterator) [T = std::map<p"
            "xrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>, _ValuePolicy = pxrInte"
            "rnal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"Dereferenced an invalid map proxy iterator", a3);
  }
  return sub_20BFE4A7C(a1, a2, (uint64_t)&v7);
}

char *sub_20BFE4A7C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = *a1;
  if (v6)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  if (v6 == a2)
  {
    v8 = *(_QWORD **)a3;
  }
  else
  {
    v7 = *a1;
    if (*a1)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
    v8 = sub_20BFE4AF0(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*(_QWORD *)a3 + 28));
  }
  return (char *)v8 + 28;
}

_QWORD *sub_20BFE4AF0(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v3 + 28), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_20BFD758C(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 28)))
    return v2;
  return v5;
}

uint64_t *sub_20BFE4B68(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v6 = (void **)sub_20BFD74FC((uint64_t)a1, &v12, a2);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v10[1] = a1 + 1;
    sub_20BFE4C14((_DWORD *)v7 + 7, *a4);
    v11 = 1;
    sub_20BDDE1B4(a1, v12, v8, v7);
    v10[0] = 0;
    sub_20BFE4C64((uint64_t)v10, 0);
  }
  return v7;
}

_DWORD *sub_20BFE4C14(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v4;

  v4 = sub_20BFD38A4(a1, a2);
  sub_20BFD38DC(v4 + 1, a2 + 1);
  *((_QWORD *)a1 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a1 + 3);
  return a1;
}

void sub_20BFE4C64(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BFE4CA8(v2 + 7);
    operator delete(v2);
  }
}

_DWORD *sub_20BFE4CA8(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);
  sub_20BFD265C(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

void sub_20BFE4CE8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20BFE4CE8(a1, *a2);
    sub_20BFE4CE8(a1, a2[1]);
    sub_20BFE4CA8((_DWORD *)a2 + 7);
    operator delete(a2);
  }
}

uint64_t sub_20BFE4D30(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = *a1;
  if (v2
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2)
    && (!*a1 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1)))
  {
    return 1;
  }
  v4[0] = "sdf/mapEditProxy.h";
  v4[1] = "_Validate";
  v4[2] = 772;
  v4[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_Validate() const "
          "[T = std::map<std::string, std::string>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfIdentityMapEditPr"
          "oxyValuePolicy<std::map<std::string, std::string>>]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing an invalid map proxy");
  return 0;
}

uint64_t sub_20BFE4DCC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAB052CLL & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524D50);
}

uint64_t sub_20BFE4E44(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BFE4DCC(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BFE51F4, (uint64_t)&stru_24C524D50);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BFE4EAC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CABEA02 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524D60);
}

uint64_t sub_20BFE4F24(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAB04FALL & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524CF0);
}

uint64_t sub_20BFE4F9C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAB1260 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524D00);
}

uint64_t sub_20BFE5014(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAC1688 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524D10);
}

uint64_t sub_20BFE508C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAB12C4 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524D20);
}

uint64_t sub_20BFE5104(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAC16ECLL & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524D30);
}

uint64_t sub_20BFE517C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAC1760 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524D40);
}

uint64_t sub_20BFE51F8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t (*v2)(_QWORD);
  _QWORD v4[2];

  sub_20BFE5248(v4);
  v2 = (uint64_t (*)(_QWORD))v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  v4[0] = 0;
  a1[2] = &unk_24C524D50;
  return v2(0);
}

uint64_t sub_20BFE5248@<X0>(_QWORD *a1@<X8>)
{
  void *v2;
  uint64_t result;

  v2 = operator new(0x10uLL);
  result = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v2);
  *a1 = v2;
  a1[1] = sub_20BFE5294;
  return result;
}

void sub_20BFE5280(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20BFE5294(uint64_t a1)
{
  void *v1;

  if (a1)
  {
    v1 = (void *)sub_20BF4C2D8(a1);
    operator delete(v1);
  }
}

BOOL sub_20BFE52B0(uint64_t a1)
{
  uint64_t Size;

  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::GetSize(a1);
  Size = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::GetSize(a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::GetSize(a1);
  return Size == 0;
}

BOOL sub_20BFE52EC(uint64_t a1)
{
  uint64_t Size;

  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize(a1);
  Size = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize(a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize(a1);
  return Size == 0;
}

_QWORD *sub_20BFE5328@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t **v5;

  result = *(_QWORD **)a1;
  if (result)
  {
    v5 = (uint64_t **)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 112))(result, *(unsigned int *)(a1 + 16));
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    return sub_20BFE538C(a2, *v5, v5[1], v5[1] - *v5);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

_QWORD *sub_20BFE538C(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6;

  if (a4)
  {
    v6 = (uint64_t)result;
    sub_20BDDF654(result, a4);
    return (_QWORD *)sub_20BFE5400(v6, a2, a3);
  }
  return result;
}

void sub_20BFE53EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BEEB2B8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFE5400(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v3 = *(uint64_t **)(result + 8);
  while (a2 != a3)
  {
    v4 = *a2;
    *v3 = *a2;
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 2, v5));
      if ((v6 & 1) == 0)
        *v3 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++a2;
    ++v3;
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

void sub_20BFE5454(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t Size;
  uint64_t *v5;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::GetSize((uint64_t)a1);
  Size = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::GetSize((uint64_t)a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::GetSize((uint64_t)a1);
  sub_20BFE54E0(a1, 0, Size, a2, *(unsigned int ***)a2, &v5);
}

void sub_20BFE54C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BFE69E4((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20BFE54E0(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, unsigned int **a5@<X6>, uint64_t **a6@<X8>)
{
  uint64_t v8;
  unsigned int *v12;

  v8 = a2;
  if (a2 != a3)
  {
    do
    {
      sub_20BFE5588(a1, v8, &v12);
      a5 = sub_20BFE55D8(a4, (uint64_t)a5, &v12) + 1;
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v12);
      ++v8;
    }
    while (a3 != v8);
    v8 = a3;
  }
  *a6 = a1;
  a6[1] = (uint64_t *)v8;
  a6[2] = (uint64_t *)a4;
  a6[3] = (uint64_t *)a5;
}

void sub_20BFE5574(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void sub_20BFE5588(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;

  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::GetChild(a1, &v6, a2);
  v4 = v6;
  *a3 = v6;
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

unsigned int **sub_20BFE55D8(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  unsigned int **v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int **v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int *v17;
  unsigned int v18;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v4 = (unsigned int **)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if (v6 >= v9)
  {
    v10 = *(unsigned int ***)a1;
    v11 = ((uint64_t)(v6 - *(_QWORD *)a1) >> 3) + 1;
    if (v11 >> 61)
      sub_20BDDF694();
    v12 = (a2 - (uint64_t)v10) >> 3;
    v13 = v8 - (_QWORD)v10;
    v14 = v13 >> 2;
    if (v13 >> 2 <= v11)
      v14 = ((uint64_t)(v6 - *(_QWORD *)a1) >> 3) + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v24 = v7;
    if (v15)
      v16 = (char *)sub_20BDDF6A8(v7, v15);
    else
      v16 = 0;
    v20 = v16;
    v21 = &v16[8 * v12];
    v22 = v21;
    v23 = &v16[8 * v15];
    sub_20BFE57AC(&v20, a3);
    v4 = sub_20BFE592C((unsigned int ***)a1, &v20, v4);
    sub_20BFE59F0((uint64_t)&v20);
  }
  else if (a2 == v6)
  {
    v17 = *a3;
    *(_QWORD *)a2 = *a3;
    if (v17)
    {
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
    }
    *(_QWORD *)(a1 + 8) = a2 + 8;
  }
  else
  {
    sub_20BFE5718((unsigned int **)a1, a2, v6, (unsigned int *)(a2 + 8));
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v4, a3);
  }
  return v4;
}

void sub_20BFE5704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFE59F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned int **sub_20BFE5718(unsigned int **result, uint64_t a2, unint64_t a3, unsigned int *a4)
{
  unsigned int *v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int **v9;
  uint64_t v10;
  uint64_t v11;

  v4 = result[1];
  v5 = (unsigned int **)(a2 + (char *)v4 - (char *)a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    v7 = *v5;
    *(_QWORD *)v6 = *v5;
    if (v7)
    {
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
    ++v5;
    v6 += 2;
  }
  result[1] = v6;
  if (v4 != a4)
  {
    v9 = (unsigned int **)(v4 - 2);
    v10 = 8 * (((char *)v4 - (char *)a4) >> 3);
    v11 = a2 - 8;
    do
    {
      result = pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9--, (unsigned int **)(v11 + v10));
      v10 -= 8;
    }
    while (v10);
  }
  return result;
}

_QWORD *sub_20BFE57AC(_QWORD *result, unsigned int **a2)
{
  _QWORD *v3;
  unsigned int **v4;
  unsigned int **v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int **v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int **v16;
  uint64_t v17;
  char *v18;
  unsigned int **v19;
  uint64_t v20;
  char *v21;
  unsigned int *v22;
  unsigned int v23;
  int64x2_t v24;
  char *v25;
  unsigned int *v26;
  unsigned int v27;
  char *v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v3 = result;
  v4 = (unsigned int **)result[2];
  if (v4 == (unsigned int **)result[3])
  {
    v5 = (unsigned int **)result[1];
    v6 = (uint64_t)v5 - *result;
    if ((unint64_t)v5 <= *result)
    {
      if (v4 == (unsigned int **)*result)
        v13 = 1;
      else
        v13 = ((uint64_t)v4 - *result) >> 2;
      v14 = result[4];
      v31 = v3[4];
      v15 = (char *)sub_20BDDF6A8(v14, v13);
      v16 = (unsigned int **)&v15[8 * (v13 >> 2)];
      v28 = v15;
      v29.i64[0] = (uint64_t)v16;
      v18 = &v15[8 * v17];
      v29.i64[1] = (uint64_t)v16;
      v30 = v18;
      v19 = (unsigned int **)v3[1];
      v20 = v3[2] - (_QWORD)v19;
      if (v20)
      {
        v21 = (char *)v16 + v20;
        do
        {
          v22 = *v19;
          *v16 = *v19;
          if (v22)
          {
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 + 1, v22));
          }
          ++v16;
          ++v19;
        }
        while (v16 != (unsigned int **)v21);
        v15 = v28;
        v16 = (unsigned int **)v29.i64[0];
        v24 = *(int64x2_t *)(v3 + 1);
        v18 = v30;
      }
      else
      {
        v24 = vdupq_n_s64((unint64_t)v19);
        v21 = &v15[8 * (v13 >> 2)];
      }
      v28 = (char *)*v3;
      *v3 = v15;
      v3[1] = v16;
      v29 = v24;
      v25 = (char *)v3[3];
      v3[2] = v21;
      v3[3] = v18;
      v30 = v25;
      result = (_QWORD *)sub_20BFE59F0((uint64_t)&v28);
      v4 = (unsigned int **)v3[2];
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      if (v5 == v4)
      {
        v12 = &v5[-(v10 >> 1)];
      }
      else
      {
        do
        {
          result = pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v5[v11], v5);
          ++v5;
        }
        while (v5 != v4);
        v4 = (unsigned int **)v3[1];
        v12 = &v5[v11];
      }
      v3[1] = &v4[v11];
      v3[2] = v12;
      v4 = v12;
    }
  }
  v26 = *a2;
  *v4 = *a2;
  if (v26)
  {
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
    v4 = (unsigned int **)v3[2];
  }
  v3[2] = v4 + 1;
  return result;
}

unsigned int **sub_20BFE592C(unsigned int ***a1, _QWORD *a2, unsigned int **a3)
{
  unsigned int **result;
  unsigned int **v5;
  unsigned int **v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int **v15;
  unsigned int **v16;
  unsigned int **v17;

  result = (unsigned int **)a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = a3;
    v6 = (unsigned int **)a2[1];
    do
    {
      v9 = *--v7;
      v8 = v9;
      *--v6 = v9;
      if (v9)
      {
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 + 1, v8));
      }
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v11 = a1[1];
  v12 = (unsigned int **)a2[2];
  if (v11 != a3)
  {
    do
    {
      v13 = *a3;
      *v12 = *a3;
      if (v13)
      {
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
      }
      ++a3;
      ++v12;
    }
    while (a3 != v11);
    v6 = (unsigned int **)a2[1];
  }
  a2[2] = v12;
  v15 = *a1;
  *a1 = v6;
  a2[1] = v15;
  v16 = a1[1];
  a1[1] = (unsigned int **)a2[2];
  a2[2] = v16;
  v17 = a1[2];
  a1[2] = (unsigned int **)a2[3];
  a2[3] = v17;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BFE59F0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20BFE5A3C(unsigned int **a1, unsigned int **a2, uint64_t a3, char a4)
{
  unsigned int **v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  char v15;
  unsigned int *v16;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v17;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v18;
  unsigned int v19;
  unsigned int *v20;
  char v21;
  unsigned int *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v23;
  unsigned int *v24;
  int v25;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v26;
  int v27;
  unsigned int **v28;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v29;
  unsigned int v30;
  char v31;
  unsigned int *v32;
  char v33;
  int v34;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v35;
  unsigned int *v36;
  unsigned int **v37;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v38;
  BOOL v40;
  uint64_t v41;
  unsigned int **v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  unsigned int **v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v53;
  unsigned int **v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int **v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int **v60;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int **v64;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int **v70;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v71;
  unsigned int v72;
  unsigned int **v73;
  unsigned int **v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int **v78;
  unsigned int **v79;
  unsigned int **v80;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v81;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v82;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v83;

  v6 = a2;
  v7 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1;
  v79 = a2;
  v80 = a1;
  while (2)
  {
    v8 = (char *)v6 - (char *)v7;
    v9 = ((char *)v6 - (char *)v7) >> 3;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v79 = v6 - 1;
        if (sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6 - 1, v7))
          sub_20BFE6458(&v80, &v79);
        return;
      case 3uLL:
        v79 = v6 - 1;
        sub_20BFE6590((unsigned int **)v7, (unsigned int **)v7 + 1, v6 - 1);
        return;
      case 4uLL:
        v79 = v6 - 1;
        sub_20BFE694C((unsigned int **)v7, (unsigned int **)v7 + 1, (unsigned int **)v7 + 2, v6 - 1);
        return;
      case 5uLL:
        v79 = v6 - 1;
        sub_20BFE64CC((unsigned int **)v7, (unsigned int **)v7 + 1, (unsigned int **)v7 + 2, (unsigned int **)v7 + 3, v6 - 1);
        return;
      default:
        if (v8 <= 191)
        {
          v38 = v7 + 1;
          v40 = v7 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6
             || v38 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6;
          if ((a4 & 1) != 0)
          {
            if (!v40)
            {
              v41 = 0;
              v42 = (unsigned int **)v7;
              do
              {
                v43 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v42;
                v42 = (unsigned int **)v38;
                if (sub_20BFE62D8(v38, v43))
                {
                  v44 = *v42;
                  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v44;
                  if (v44)
                  {
                    do
                      v45 = __ldaxr(v44);
                    while (__stlxr(v45 + 1, v44));
                  }
                  v46 = v41;
                  while (1)
                  {
                    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)((char *)v7 + v46 + 8), (unsigned int **)((char *)v7 + v46));
                    if (!v46)
                      break;
                    v47 = sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v83, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)((char *)v7 + v46 - 8));
                    v46 -= 8;
                    if ((v47 & 1) == 0)
                    {
                      v48 = (unsigned int **)((char *)v7 + v46 + 8);
                      goto LABEL_81;
                    }
                  }
                  v48 = (unsigned int **)v7;
LABEL_81:
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v48, (unsigned int **)&v83);
                  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v83);
                }
                v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v42 + 1);
                v41 += 8;
              }
              while (v42 + 1 != v6);
            }
          }
          else if (!v40)
          {
            do
            {
              v75 = (unsigned int **)v38;
              if (sub_20BFE62D8(v38, v7))
              {
                v76 = *v75;
                v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v76;
                if (v76)
                {
                  do
                    v77 = __ldaxr(v76);
                  while (__stlxr(v77 + 1, v76));
                }
                do
                {
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v7 + 1, (unsigned int **)v7);
                  --v7;
                }
                while ((sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v83, v7) & 1) != 0);
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v7 + 1, (unsigned int **)&v83);
                pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v83);
              }
              v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v75 + 1);
              v7 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v75;
            }
            while (v75 + 1 != v6);
          }
        }
        else if (a3)
        {
          v10 = v9 >> 1;
          v11 = v6 - 1;
          if ((unint64_t)v8 < 0x401)
          {
            sub_20BFE6590((unsigned int **)&v7[v9 >> 1], (unsigned int **)v7, v11);
          }
          else
          {
            sub_20BFE6590((unsigned int **)v7, (unsigned int **)&v7[v9 >> 1], v11);
            v12 = 8 * v10 - 8;
            sub_20BFE6590(v80 + 1, (unsigned int **)((char *)v80 + v12), v79 - 2);
            v13 = 8 * v10 + 8;
            sub_20BFE6590(v80 + 2, (unsigned int **)((char *)v80 + v13), v79 - 3);
            sub_20BFE6590((unsigned int **)((char *)v80 + v12), &v80[v10], (unsigned int **)((char *)v80 + v13));
            v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v80[v10];
            sub_20BFE6640(&v80, (unsigned int ***)&v83);
          }
          --a3;
          if ((a4 & 1) != 0)
          {
            v14 = (unsigned int *)v79;
          }
          else
          {
            v15 = sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80);
            v14 = (unsigned int *)v79;
            if ((v15 & 1) == 0)
            {
              v28 = v80;
              v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v79;
              v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80;
              v29 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v80;
              v81 = v29;
              if (v29)
              {
                do
                  v30 = __ldaxr((unsigned int *)v29);
                while (__stlxr(v30 + 1, (unsigned int *)v29));
                v14 = (unsigned int *)v82;
              }
              v31 = sub_20BFE62D8(&v81, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v14 - 1);
              v32 = (unsigned int *)(v83 + 1);
              if ((v31 & 1) != 0)
              {
                do
                {
                  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32;
                  v33 = sub_20BFE62D8(&v81, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32);
                  v32 += 2;
                }
                while ((v33 & 1) == 0);
              }
              else
              {
                do
                {
                  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32;
                  if (v32 >= (unsigned int *)v82)
                    break;
                  v34 = sub_20BFE62D8(&v81, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32);
                  v32 += 2;
                }
                while (!v34);
              }
              v36 = (unsigned int *)v82;
              v35 = v83;
              if (v83 < v82)
              {
                do
                {
                  v36 -= 2;
                  v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v36;
                }
                while ((sub_20BFE62D8(&v81, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v36) & 1) != 0);
                v35 = v83;
              }
              if (v35 < (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v36)
              {
                do
                {
                  sub_20BFE6458((unsigned int ***)&v83, (unsigned int ***)&v82);
                  do
                    ++v83;
                  while (!sub_20BFE62D8(&v81, v83));
                  do
                    --v82;
                  while ((sub_20BFE62D8(&v81, v82) & 1) != 0);
                  v35 = v83;
                }
                while (v83 < v82);
              }
              v37 = (unsigned int **)(v35 - 1);
              if (v35 - 1 != (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v28)
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v28, (unsigned int **)v35 - 1);
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v37, (unsigned int **)&v81);
              v7 = v83;
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v81);
              goto LABEL_53;
            }
          }
          v16 = (unsigned int *)v80;
          v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v14;
          v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80;
          v17 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v80;
          v81 = v17;
          v18 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80;
          if (v17)
          {
            do
              v19 = __ldaxr((unsigned int *)v17);
            while (__stlxr(v19 + 1, (unsigned int *)v17));
            v18 = v83;
          }
          v20 = (unsigned int *)(v18 + 1);
          do
          {
            v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v20;
            v21 = sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v20, &v81);
            v20 += 2;
          }
          while ((v21 & 1) != 0);
          v22 = (unsigned int *)v82;
          v23 = v83;
          if (v83 - 1 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v16)
          {
            do
            {
              if (v23 >= (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v22)
                break;
              v22 -= 2;
              v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v22;
            }
            while ((sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v22, &v81) & 1) == 0);
          }
          else
          {
            v24 = (unsigned int *)(v82 - 1);
            do
            {
              v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v24;
              v25 = sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v24, &v81);
              v24 -= 2;
            }
            while (!v25);
            v23 = v83;
          }
          v26 = v82;
          v7 = v23;
          if (v23 < v82)
          {
            do
            {
              sub_20BFE6458((unsigned int ***)&v83, (unsigned int ***)&v82);
              do
                ++v83;
              while ((sub_20BFE62D8(v83, &v81) & 1) != 0);
              do
                --v82;
              while (!sub_20BFE62D8(v82, &v81));
              v7 = v83;
            }
            while (v83 < v82);
          }
          if (v7 - 1 != (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v16)
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v16, (unsigned int **)v7 - 1);
          pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v7 - 1, (unsigned int **)&v81);
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v81);
          if (v23 < v26)
          {
LABEL_30:
            sub_20BFE5A3C(v80, v7 - 1, a3, a4 & 1);
LABEL_53:
            a4 = 0;
LABEL_54:
            v80 = (unsigned int **)v7;
            goto LABEL_55;
          }
          v27 = sub_20BFE66B4(v80, (unsigned int **)v7 - 1);
          if (!sub_20BFE66B4((unsigned int **)v7, v79))
          {
            if (v27)
              goto LABEL_54;
            goto LABEL_30;
          }
          if ((v27 & 1) == 0)
          {
            v79 = (unsigned int **)(v7 - 1);
            v7 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80;
LABEL_55:
            v6 = v79;
            continue;
          }
        }
        else if (v7 != (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6)
        {
          v78 = v6;
          v49 = (v9 - 2) >> 1;
          v50 = v49;
          do
          {
            v51 = v50;
            if (v49 >= v50)
            {
              v52 = (2 * v50) | 1;
              v53 = &v7[v52];
              if (2 * v50 + 2 < (uint64_t)v9 && sub_20BFE62D8(&v7[v52], v53 + 1))
              {
                ++v53;
                v52 = 2 * v51 + 2;
              }
              v54 = (unsigned int **)&v7[v51];
              if ((sub_20BFE62D8(v53, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v54) & 1) == 0)
              {
                v55 = *v54;
                v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v55;
                if (v55)
                {
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 + 1, v55));
                }
                do
                {
                  v57 = (unsigned int **)v53;
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v54, (unsigned int **)v53);
                  if (v49 < v52)
                    break;
                  v58 = (2 * v52) | 1;
                  v53 = &v7[v58];
                  v52 = 2 * v52 + 2;
                  if (v52 >= (uint64_t)v9)
                  {
                    v52 = v58;
                  }
                  else if (sub_20BFE62D8(&v7[v58], v53 + 1))
                  {
                    ++v53;
                  }
                  else
                  {
                    v52 = v58;
                  }
                  v54 = v57;
                }
                while (!sub_20BFE62D8(v53, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v83));
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v57, (unsigned int **)&v83);
                pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v83);
              }
            }
            v50 = v51 - 1;
          }
          while (v51);
          v59 = (unint64_t)v8 >> 3;
          v60 = v78;
          do
          {
            v61 = *v7;
            v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v61;
            if (v61)
            {
              do
                v62 = __ldaxr((unsigned int *)v61);
              while (__stlxr(v62 + 1, (unsigned int *)v61));
            }
            v63 = 0;
            v64 = (unsigned int **)v7;
            do
            {
              v65 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v64[v63 + 1];
              v66 = 2 * v63;
              v63 = (2 * v63) | 1;
              v67 = v66 + 2;
              if (v66 + 2 < v59 && sub_20BFE62D8(v65, v65 + 1))
              {
                ++v65;
                v63 = v67;
              }
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v64, (unsigned int **)v65);
              v64 = (unsigned int **)v65;
            }
            while (v63 <= (uint64_t)((unint64_t)(v59 - 2) >> 1));
            if (v65 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)--v60)
            {
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v65, (unsigned int **)&v82);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v65, v60);
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v60, (unsigned int **)&v82);
              v68 = (char *)v65 - (char *)v7 + 8;
              if (v68 >= 9)
              {
                v69 = (((unint64_t)v68 >> 3) - 2) >> 1;
                v70 = (unsigned int **)&v7[v69];
                if (sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v70, v65))
                {
                  v71 = *v65;
                  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v71;
                  if (v71)
                  {
                    do
                      v72 = __ldaxr((unsigned int *)v71);
                    while (__stlxr(v72 + 1, (unsigned int *)v71));
                  }
                  do
                  {
                    v73 = v70;
                    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v65, v70);
                    if (!v69)
                      break;
                    v69 = (v69 - 1) >> 1;
                    v70 = (unsigned int **)&v7[v69];
                    v65 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v73;
                  }
                  while ((sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v70, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v83) & 1) != 0);
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v73, (unsigned int **)&v83);
                  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v83);
                }
              }
            }
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v82);
          }
          while (v59-- > 2);
        }
        return;
    }
  }
}

void sub_20BFE6248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFE62D8(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v4;
  uint64_t *Name;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v15;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  int SpecType;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v18;
  char *v20;
  int v21;
  char *v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  char v28;

  v4 = sub_20BFE6874(a1);
  Name = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v4);
  v6 = sub_20BFE6874(a2);
  v7 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v6);
  v8 = (uint64_t)v7;
  v9 = *((unsigned __int8 *)Name + 23);
  v10 = v9;
  if ((v9 & 0x80u) == 0)
    v11 = *((unsigned __int8 *)Name + 23);
  else
    v11 = Name[1];
  v12 = *((unsigned __int8 *)v7 + 23);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = v7[1];
  if (v11 != v12)
    goto LABEL_20;
  if (v13 >= 0)
    v14 = (unsigned __int8 *)v7;
  else
    v14 = (unsigned __int8 *)*v7;
  if ((char)v9 < 0)
  {
    if (memcmp((const void *)*Name, v14, Name[1]))
      goto LABEL_20;
  }
  else if ((_BYTE)v9)
  {
    v15 = Name;
    while (*(unsigned __int8 *)v15 == *v14)
    {
      v15 = (uint64_t *)((char *)v15 + 1);
      ++v14;
      if (!--v9)
        goto LABEL_17;
    }
    goto LABEL_20;
  }
LABEL_17:
  v16 = sub_20BFE6874(a1);
  SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v16);
  v18 = sub_20BFE6874(a2);
  if (SpecType < (int)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v18))
    return 1;
  v10 = *((_BYTE *)Name + 23);
  LOBYTE(v13) = *(_BYTE *)(v8 + 23);
LABEL_20:
  if (v10 >= 0)
    v20 = (char *)Name;
  else
    v20 = (char *)*Name;
  v21 = *v20;
  if ((v13 & 0x80u) == 0)
    v22 = (char *)v8;
  else
    v22 = *(char **)v8;
  if (v21 < 0)
    return pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v28, (uint64_t)Name, v8);
  v23 = *v22;
  if (v23 < 0)
    return pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v28, (uint64_t)Name, v8);
  v24 = v21;
  v25 = v23;
  v26 = (v23 ^ v24) & 0xFFFFFFDF;
  v27 = v24 < 0x40 || v26 == 0;
  if (v27 || v25 < 0x40)
    return pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v28, (uint64_t)Name, v8);
  else
    return (((_BYTE)v24 + 5) & 0x1Fu) < (((_BYTE)v25 + 5) & 0x1Fu);
}

void sub_20BFE6458(unsigned int ***a1, unsigned int ***a2)
{
  unsigned int **v2;
  unsigned int **v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;

  v2 = *a1;
  v3 = *a2;
  v4 = *v2;
  v6 = v4;
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v2, v3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v3, &v6);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

void sub_20BFE64B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void sub_20BFE64CC(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4, unsigned int **a5)
{
  unsigned int **v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v13;
  unsigned int **v14;

  v13 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2;
  v14 = a1;
  v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4;
  v12 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3;
  v10 = a5;
  sub_20BFE694C(a1, a2, a3, a4);
  if (sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a5, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4))
  {
    sub_20BFE6458((unsigned int ***)&v11, &v10);
    if (sub_20BFE62D8(v11, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
    {
      sub_20BFE6458((unsigned int ***)&v12, (unsigned int ***)&v11);
      if (sub_20BFE62D8(v12, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2))
      {
        sub_20BFE6458((unsigned int ***)&v13, (unsigned int ***)&v12);
        if (sub_20BFE62D8(v13, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))
          sub_20BFE6458(&v14, (unsigned int ***)&v13);
      }
    }
  }
}

void sub_20BFE6590(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  char v5;
  int v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity ***v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity ***v8;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;

  v10 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2;
  v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1;
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3;
  v5 = sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1);
  v6 = sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2);
  if ((v5 & 1) != 0)
  {
    if (v6)
    {
      v7 = &v11;
    }
    else
    {
      sub_20BFE6458((unsigned int ***)&v11, (unsigned int ***)&v10);
      if (!sub_20BFE62D8(v9, v10))
        return;
      v7 = &v10;
    }
    v8 = &v9;
    goto LABEL_10;
  }
  if (v6)
  {
    sub_20BFE6458((unsigned int ***)&v10, (unsigned int ***)&v9);
    if (sub_20BFE62D8(v10, v11))
    {
      v7 = &v11;
      v8 = &v10;
LABEL_10:
      sub_20BFE6458((unsigned int ***)v7, (unsigned int ***)v8);
    }
  }
}

void sub_20BFE6640(unsigned int ***a1, unsigned int ***a2)
{
  unsigned int **v2;
  unsigned int **v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;

  v2 = *a1;
  v3 = *a2;
  v4 = *v2;
  v6 = v4;
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v2, v3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v3, &v6);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

void sub_20BFE66A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFE66B4(unsigned int **a1, unsigned int **a2)
{
  _BOOL8 v4;
  unsigned int **v5;
  unsigned int **v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int **v10;
  unsigned int *v12;
  unsigned int **v13;
  unsigned int **v14;

  v13 = a2;
  v14 = a1;
  v4 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      v13 = a2 - 1;
      if (sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))sub_20BFE6458(&v14, &v13);
      return v4;
    case 3:
      sub_20BFE6590(a1, a1 + 1, a2 - 1);
      return v4;
    case 4:
      sub_20BFE694C(a1, a1 + 1, a1 + 2, a2 - 1);
      return v4;
    case 5:
      sub_20BFE64CC(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return v4;
    default:
      v5 = a1 + 2;
      sub_20BFE6590(a1, a1 + 1, a1 + 2);
      v6 = a1 + 3;
      if (v6 == a2)
        return 1;
      v7 = 0;
      break;
  }
  while (!sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v5))
  {
LABEL_13:
    v5 = v6++;
    if (v6 == v13)
      return 1;
  }
  v8 = *v6;
  v12 = v8;
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  do
  {
    v10 = v5;
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v5 + 1, v5);
    if (v5 == v14)
      break;
    --v5;
  }
  while ((sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v12, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v10 - 1) & 1) != 0);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v10, &v12);
  if (++v7 != 8)
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v12);
    goto LABEL_13;
  }
  v4 = v6 + 1 == v13;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v12);
  return v4;
}

void sub_20BFE685C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity **sub_20BFE6874(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1)
{
  char *v3;
  _QWORD *v4;
  _QWORD v5[2];
  char v6;
  _QWORD v7[4];
  char v8;
  int v9;

  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    v7[2] = 96;
    v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>::op"
            "erator->() const [T = pxrInternal__aapl__pxrReserved__::SdfPropertySpec]";
    v8 = 0;
    v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CABC422 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v5);
    if (v6 >= 0)
      v4 = v5;
    else
      v4 = (_QWORD *)v5[0];
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"Dereferenced an invalid %s", v3, v4);
  }
  return a1;
}

void sub_20BFE6918(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x20BFE6890);
}

void sub_20BFE6930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFE694C(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4)
{
  unsigned int **v8;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  unsigned int **v11;

  v10 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2;
  v11 = a1;
  v8 = a4;
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3;
  sub_20BFE6590(a1, a2, a3);
  if (sub_20BFE62D8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
  {
    sub_20BFE6458((unsigned int ***)&v9, &v8);
    if (sub_20BFE62D8(v9, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2))
    {
      sub_20BFE6458((unsigned int ***)&v10, (unsigned int ***)&v9);
      if (sub_20BFE62D8(v10, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))
        sub_20BFE6458(&v11, (unsigned int ***)&v10);
    }
  }
}

void sub_20BFE69E4(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v4 - 8));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20BFE6A54(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void **v10;

  v10 = (void **)(a1 + 40);
  sub_20BEEB2B8(&v10);
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(unsigned int **)(a1 + 8);
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t sub_20BFE6AEC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void **v10;

  v10 = (void **)(a1 + 40);
  sub_20BEEB2B8(&v10);
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(unsigned int **)(a1 + 8);
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return a1;
}

void sub_20BFE6B84(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;

  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetChild(a1, &v6, a2);
  v4 = v6;
  *a3 = v6;
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

uint64_t sub_20BFE6BD4(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  return sub_20BFE6D38(a1);
}

BOOL sub_20BFE6C04(uint64_t a1)
{
  _BOOL8 IsValid;
  const char *v3;
  _QWORD v5[4];
  char v6;

  IsValid = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::IsValid(a1);
  if (!IsValid)
  {
    v5[0] = "sdf/childrenProxy.h";
    v5[1] = "_Validate";
    v5[2] = 437;
    v5[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfChildrenProxy<pxrInternal__aapl__pxrReserved__::SdfChildrenView<px"
            "rInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>>::_Validate() const [_View = pxrInternal__aapl__p"
            "xrReserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>]";
    v6 = 0;
    v3 = (const char *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0)
      v3 = *(const char **)v3;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired %s", v3);
  }
  return IsValid;
}

void sub_20BFE6C88(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int *v5;

  sub_20BFE6CE8(*(uint64_t **)a2, *(_QWORD *)(a2 + 8), &v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::FindKey((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v5, a3, a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
}

void sub_20BFE6CD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void sub_20BFE6CE8(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;

  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetChild(a1, &v6, a2);
  v4 = v6;
  *a3 = v6;
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

uint64_t sub_20BFE6D38(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void **v10;

  v10 = (void **)(a1 + 40);
  sub_20BEEB2B8(&v10);
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(unsigned int **)(a1 + 8);
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *sub_20BFE6DD0(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *result;
  void *v4;

  result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init::New(a1);
  while (!__ldaxr((unint64_t *)a1))
  {
    if (!__stlxr((unint64_t)result, (unint64_t *)a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load((unint64_t *)a1);
}

const pxrInternal__aapl__pxrReserved__::TfToken *sub_20BFE6E18(const pxrInternal__aapl__pxrReserved__::TfToken *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **a3)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v3;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t v6;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = a1;
    v3 = a2;
    while (2)
    {
      while (sub_20BFE6EB8(a3, v5))
      {
        v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
        if (v5 == v3)
          return v3;
      }
      do
      {
        v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v3 - 8);
        if (v3 == v5)
          return v5;
      }
      while (!sub_20BFE6EB8(a3, v3));
      v6 = *(_QWORD *)v5;
      *(_QWORD *)v5 = *(_QWORD *)v3;
      v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
      *(_QWORD *)v3 = v6;
      if (v3 != v5)
        continue;
      break;
    }
  }
  return v3;
}

BOOL sub_20BFE6EB8(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  if ((sub_20BFE1978(a1, a2) & 1) != 0)
    return 1;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v4 + 16) & 0xFFFFFFFFFFFFFFF8);
}

void sub_20BFE6F1C(_QWORD *a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  unsigned int *v14;
  void *v15[2];
  char v16;
  void *__p[2];
  uint64_t v18;
  _QWORD v19[3];

  if (*(char *)(a4 + 23) >= 0)
    v10 = (const char *)a4;
  else
    v10 = *(const char **)a4;
  if (*(char *)(a5 + 23) >= 0)
    v11 = (const char *)a5;
  else
    v11 = *(const char **)a5;
  if (*(char *)(a6 + 23) >= 0)
    v12 = (const char *)a6;
  else
    v12 = *(const char **)a6;
  if (*(char *)(a7 + 23) >= 0)
    v13 = (const char *)a7;
  else
    v13 = *(const char **)a7;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s %s.connect = ", v10, v11, v12, v13);
  if (sub_20BFE7238((uint64_t)a3))
  {
    if (sub_20BFE7238((uint64_t)a3) == 1)
    {
      sub_20BFE7400(a3, 0, __p);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteSdfPath(a1, 0, (pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      sub_20BDDC0E4(__p, "\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, 0, (uint64_t)__p);
    }
    else
    {
      sub_20BDDC0E4(__p, "[\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, 0, (uint64_t)__p);
      if (SHIBYTE(v18) < 0)
        operator delete(__p[0]);
      v19[1] = 0;
      v19[2] = 0;
      if (sub_20BFE738C((uint64_t)a3))
        v14 = a3;
      else
        v14 = 0;
      __p[1] = v14;
      v18 = 0;
      sub_20BFE7490((uint64_t)a3, (uint64_t)v19);
      while (!sub_20BFE74F8((uint64_t)__p, (uint64_t)v19))
      {
        sub_20BFE7288((uint64_t)__p, v15);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteSdfPath(a1, a2 + 1, (pxrInternal__aapl__pxrReserved__::SdfPath *)v15);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v15 + 1);
        sub_20BFD265C(v15);
        sub_20BDDC0E4(v15, ",\n");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, 0, (uint64_t)v15);
        if (v16 < 0)
          operator delete(v15[0]);
        sub_20BFE730C((uint64_t)__p);
      }
      sub_20BDDC0E4(__p, "]\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)__p);
    }
  }
  else
  {
    sub_20BDDC0E4(__p, "None\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, 0, (uint64_t)__p);
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_20BFE7164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFE71C4(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listEditorProxy.h";
    v2[1] = "_Validate";
    v2[2] = 423;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy"
            ">::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

uint64_t sub_20BFE7238(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  if (!sub_20BFE738C(a1))
    return 0;
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 112))(result, *(unsigned int *)(a1 + 16));
    return (uint64_t)(v3[1] - *v3) >> 3;
  }
  return result;
}

_DWORD *sub_20BFE7288@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  char *v4;
  _QWORD v6[4];
  char v7;
  int v8;

  if (sub_20BFE74F8(a1, a1 + 24))
  {
    v6[0] = "tf/iterator.h";
    v6[1] = "operator*";
    v6[2] = 271;
    v6[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::SdfListProxy<"
            "pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::operator*() [T = const pxrInternal__aapl__pxrReserved_"
            "_::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>, Reverse = false]";
    v7 = 0;
    v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v4);
  }
  return sub_20BFE7400(*(unsigned int **)(a1 + 8), *(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20BFE730C(uint64_t a1)
{
  _QWORD v3[4];
  char v4;

  if (sub_20BFE74F8(a1, a1 + 24))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::operator++() [T = const pxrInternal__aap"
            "l__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    ++*(_QWORD *)(a1 + 16);
  }
  return a1;
}

uint64_t sub_20BFE738C(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 702;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>::_Va"
            "lidate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

_DWORD *sub_20BFE7400@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  _DWORD *v6;

  if (sub_20BFE738C((uint64_t)a1))
  {
    v6 = (_DWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a1 + 112))(*(_QWORD *)a1, a1[4])+ 8 * a2);
    sub_20BFD6E54(a3, v6);
    return sub_20BFD6EA4(a3 + 1, v6 + 1);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
}

_QWORD *sub_20BFE7490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_20BFE738C(a1);
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 112))(result, *(unsigned int *)(a1 + 16));
    v6 = (uint64_t)(result[1] - *result) >> 3;
  }
  else
  {
    v6 = 0;
  }
  if (v4)
    v7 = a1;
  else
    v7 = 0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v6;
  return result;
}

BOOL sub_20BFE74F8(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];
  char v4;

  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  v3[0] = "sdf/listProxy.h";
  v3[1] = "equal";
  v3[2] = 268;
  v3[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>::_Iter"
          "ator<const pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy> "
          "*, pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>::_ConstG"
          "etHelper>::equal(const This &) const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy, Owner "
          "= const pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy> *, "
          "GetItem = pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>::"
          "_ConstGetHelper]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Comparing SdfListProxy iterators from different proxies!");
  return 0;
}

void sub_20BFE7574(unsigned int *a1, _QWORD *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  int v9;
  int v10;

  if ((unint64_t)sub_20BFE7238((uint64_t)a1) < 2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)" = ");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)" = [\n");
    ++a3;
  }
  if (sub_20BFE7238((uint64_t)a1))
  {
    v8 = 0;
    do
    {
      if ((unint64_t)sub_20BFE7238((uint64_t)a1) >= 2)
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"");
      sub_20BFE7400(a1, v8, &v9);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteSdfPath(a2, 0, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
      sub_20BFD265C(&v9);
      if ((unint64_t)sub_20BFE7238((uint64_t)a1) >= 2)
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)",\n");
      ++v8;
    }
    while (v8 < sub_20BFE7238((uint64_t)a1));
  }
  if ((unint64_t)sub_20BFE7238((uint64_t)a1) > 1)
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3 - 1, (pxrInternal__aapl__pxrReserved__ *)"]");
  if ((a4 & 2) == 0)
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
}

void sub_20BFE76E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

const pxrInternal__aapl__pxrReserved__::TfToken *sub_20BFE76F8(const pxrInternal__aapl__pxrReserved__::TfToken *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **a3)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v3;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t v6;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = a1;
    v3 = a2;
    while (2)
    {
      while ((sub_20BFE1978(a3, v5) & 1) != 0)
      {
        v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
        if (v5 == v3)
          return v3;
      }
      do
      {
        v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v3 - 8);
        if (v3 == v5)
          return v5;
      }
      while (!sub_20BFE1978(a3, v3));
      v6 = *(_QWORD *)v5;
      *(_QWORD *)v5 = *(_QWORD *)v3;
      v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
      *(_QWORD *)v3 = v6;
      if (v3 != v5)
        continue;
      break;
    }
  }
  return v3;
}

uint64_t sub_20BFE7798(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) & 1) != 0)
    return 1;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 112);
  if (v3)
  {
    v5 = (_QWORD *)v4(a1, 3);
    return *v5 != v5[1];
  }
  v2 = 1;
  v6 = (_QWORD *)v4(a1, 1);
  if (*v6 == v6[1])
  {
    v7 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, 4);
    if (*v7 == v7[1])
    {
      v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, 5);
      if (*v8 == v8[1])
      {
        v9 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, 2);
        if (*v9 == v9[1])
        {
          v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, 3);
          return *v5 != v5[1];
        }
      }
    }
  }
  return v2;
}

void sub_20BFE7890(unsigned int **a1, unsigned int **a2, uint64_t a3, char a4)
{
  unsigned int **v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  BOOL v15;
  unsigned int *v16;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v17;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v18;
  unsigned int v19;
  unsigned int *v20;
  BOOL v21;
  unsigned int *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v23;
  unsigned int *v24;
  _BOOL4 v25;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v26;
  int v27;
  unsigned int **v28;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v29;
  unsigned int v30;
  BOOL v31;
  unsigned int *v32;
  BOOL v33;
  _BOOL4 v34;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v35;
  unsigned int *v36;
  unsigned int **v37;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v38;
  BOOL v40;
  uint64_t v41;
  unsigned int **v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  BOOL v47;
  unsigned int **v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v53;
  unsigned int **v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int **v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int **v60;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int **v64;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int **v70;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v71;
  unsigned int v72;
  unsigned int **v73;
  unsigned int **v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int **v78;
  unsigned int **v79;
  unsigned int **v80;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v81;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v82;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v83;

  v6 = a2;
  v7 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1;
  v79 = a2;
  v80 = a1;
  while (2)
  {
    v8 = (char *)v6 - (char *)v7;
    v9 = ((char *)v6 - (char *)v7) >> 3;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v79 = v6 - 1;
        if (sub_20BFE812C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6 - 1, v7))
          sub_20BFE8218(&v80, &v79);
        return;
      case 3uLL:
        v79 = v6 - 1;
        sub_20BFE8350((unsigned int **)v7, (unsigned int **)v7 + 1, v6 - 1);
        return;
      case 4uLL:
        v79 = v6 - 1;
        sub_20BFE870C((unsigned int **)v7, (unsigned int **)v7 + 1, (unsigned int **)v7 + 2, v6 - 1);
        return;
      case 5uLL:
        v79 = v6 - 1;
        sub_20BFE828C((unsigned int **)v7, (unsigned int **)v7 + 1, (unsigned int **)v7 + 2, (unsigned int **)v7 + 3, v6 - 1);
        return;
      default:
        if (v8 <= 191)
        {
          v38 = v7 + 1;
          v40 = v7 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6
             || v38 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6;
          if ((a4 & 1) != 0)
          {
            if (!v40)
            {
              v41 = 0;
              v42 = (unsigned int **)v7;
              do
              {
                v43 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v42;
                v42 = (unsigned int **)v38;
                if (sub_20BFE812C(v38, v43))
                {
                  v44 = *v42;
                  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v44;
                  if (v44)
                  {
                    do
                      v45 = __ldaxr(v44);
                    while (__stlxr(v45 + 1, v44));
                  }
                  v46 = v41;
                  while (1)
                  {
                    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)((char *)v7 + v46 + 8), (unsigned int **)((char *)v7 + v46));
                    if (!v46)
                      break;
                    v47 = sub_20BFE812C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v83, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)((char *)v7 + v46 - 8));
                    v46 -= 8;
                    if (!v47)
                    {
                      v48 = (unsigned int **)((char *)v7 + v46 + 8);
                      goto LABEL_81;
                    }
                  }
                  v48 = (unsigned int **)v7;
LABEL_81:
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v48, (unsigned int **)&v83);
                  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v83);
                }
                v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v42 + 1);
                v41 += 8;
              }
              while (v42 + 1 != v6);
            }
          }
          else if (!v40)
          {
            do
            {
              v75 = (unsigned int **)v38;
              if (sub_20BFE812C(v38, v7))
              {
                v76 = *v75;
                v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v76;
                if (v76)
                {
                  do
                    v77 = __ldaxr(v76);
                  while (__stlxr(v77 + 1, v76));
                }
                do
                {
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v7 + 1, (unsigned int **)v7);
                  --v7;
                }
                while (sub_20BFE812C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v83, v7));
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v7 + 1, (unsigned int **)&v83);
                pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v83);
              }
              v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v75 + 1);
              v7 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v75;
            }
            while (v75 + 1 != v6);
          }
        }
        else if (a3)
        {
          v10 = v9 >> 1;
          v11 = v6 - 1;
          if ((unint64_t)v8 < 0x401)
          {
            sub_20BFE8350((unsigned int **)&v7[v9 >> 1], (unsigned int **)v7, v11);
          }
          else
          {
            sub_20BFE8350((unsigned int **)v7, (unsigned int **)&v7[v9 >> 1], v11);
            v12 = 8 * v10 - 8;
            sub_20BFE8350(v80 + 1, (unsigned int **)((char *)v80 + v12), v79 - 2);
            v13 = 8 * v10 + 8;
            sub_20BFE8350(v80 + 2, (unsigned int **)((char *)v80 + v13), v79 - 3);
            sub_20BFE8350((unsigned int **)((char *)v80 + v12), &v80[v10], (unsigned int **)((char *)v80 + v13));
            v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v80[v10];
            sub_20BFE8400(&v80, (unsigned int ***)&v83);
          }
          --a3;
          if ((a4 & 1) != 0)
          {
            v14 = (unsigned int *)v79;
          }
          else
          {
            v15 = sub_20BFE812C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80);
            v14 = (unsigned int *)v79;
            if (!v15)
            {
              v28 = v80;
              v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v79;
              v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80;
              v29 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v80;
              v81 = v29;
              if (v29)
              {
                do
                  v30 = __ldaxr((unsigned int *)v29);
                while (__stlxr(v30 + 1, (unsigned int *)v29));
                v14 = (unsigned int *)v82;
              }
              v31 = sub_20BFE812C(&v81, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v14 - 1);
              v32 = (unsigned int *)(v83 + 1);
              if (v31)
              {
                do
                {
                  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32;
                  v33 = sub_20BFE812C(&v81, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32);
                  v32 += 2;
                }
                while (!v33);
              }
              else
              {
                do
                {
                  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32;
                  if (v32 >= (unsigned int *)v82)
                    break;
                  v34 = sub_20BFE812C(&v81, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32);
                  v32 += 2;
                }
                while (!v34);
              }
              v36 = (unsigned int *)v82;
              v35 = v83;
              if (v83 < v82)
              {
                do
                {
                  v36 -= 2;
                  v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v36;
                }
                while (sub_20BFE812C(&v81, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v36));
                v35 = v83;
              }
              if (v35 < (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v36)
              {
                do
                {
                  sub_20BFE8218((unsigned int ***)&v83, (unsigned int ***)&v82);
                  do
                    ++v83;
                  while (!sub_20BFE812C(&v81, v83));
                  do
                    --v82;
                  while (sub_20BFE812C(&v81, v82));
                  v35 = v83;
                }
                while (v83 < v82);
              }
              v37 = (unsigned int **)(v35 - 1);
              if (v35 - 1 != (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v28)
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v28, (unsigned int **)v35 - 1);
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v37, (unsigned int **)&v81);
              v7 = v83;
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v81);
              goto LABEL_53;
            }
          }
          v16 = (unsigned int *)v80;
          v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v14;
          v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80;
          v17 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v80;
          v81 = v17;
          v18 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80;
          if (v17)
          {
            do
              v19 = __ldaxr((unsigned int *)v17);
            while (__stlxr(v19 + 1, (unsigned int *)v17));
            v18 = v83;
          }
          v20 = (unsigned int *)(v18 + 1);
          do
          {
            v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v20;
            v21 = sub_20BFE812C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v20, &v81);
            v20 += 2;
          }
          while (v21);
          v22 = (unsigned int *)v82;
          v23 = v83;
          if (v83 - 1 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v16)
          {
            do
            {
              if (v23 >= (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v22)
                break;
              v22 -= 2;
              v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v22;
            }
            while (!sub_20BFE812C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v22, &v81));
          }
          else
          {
            v24 = (unsigned int *)(v82 - 1);
            do
            {
              v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v24;
              v25 = sub_20BFE812C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v24, &v81);
              v24 -= 2;
            }
            while (!v25);
            v23 = v83;
          }
          v26 = v82;
          v7 = v23;
          if (v23 < v82)
          {
            do
            {
              sub_20BFE8218((unsigned int ***)&v83, (unsigned int ***)&v82);
              do
                ++v83;
              while (sub_20BFE812C(v83, &v81));
              do
                --v82;
              while (!sub_20BFE812C(v82, &v81));
              v7 = v83;
            }
            while (v83 < v82);
          }
          if (v7 - 1 != (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v16)
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v16, (unsigned int **)v7 - 1);
          pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v7 - 1, (unsigned int **)&v81);
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v81);
          if (v23 < v26)
          {
LABEL_30:
            sub_20BFE7890(v80, v7 - 1, a3, a4 & 1);
LABEL_53:
            a4 = 0;
LABEL_54:
            v80 = (unsigned int **)v7;
            goto LABEL_55;
          }
          v27 = sub_20BFE8474(v80, (unsigned int **)v7 - 1);
          if (!sub_20BFE8474((unsigned int **)v7, v79))
          {
            if (v27)
              goto LABEL_54;
            goto LABEL_30;
          }
          if ((v27 & 1) == 0)
          {
            v79 = (unsigned int **)(v7 - 1);
            v7 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v80;
LABEL_55:
            v6 = v79;
            continue;
          }
        }
        else if (v7 != (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6)
        {
          v78 = v6;
          v49 = (v9 - 2) >> 1;
          v50 = v49;
          do
          {
            v51 = v50;
            if (v49 >= v50)
            {
              v52 = (2 * v50) | 1;
              v53 = &v7[v52];
              if (2 * v50 + 2 < (uint64_t)v9 && sub_20BFE812C(&v7[v52], v53 + 1))
              {
                ++v53;
                v52 = 2 * v51 + 2;
              }
              v54 = (unsigned int **)&v7[v51];
              if (!sub_20BFE812C(v53, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v54))
              {
                v55 = *v54;
                v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v55;
                if (v55)
                {
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 + 1, v55));
                }
                do
                {
                  v57 = (unsigned int **)v53;
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v54, (unsigned int **)v53);
                  if (v49 < v52)
                    break;
                  v58 = (2 * v52) | 1;
                  v53 = &v7[v58];
                  v52 = 2 * v52 + 2;
                  if (v52 >= (uint64_t)v9)
                  {
                    v52 = v58;
                  }
                  else if (sub_20BFE812C(&v7[v58], v53 + 1))
                  {
                    ++v53;
                  }
                  else
                  {
                    v52 = v58;
                  }
                  v54 = v57;
                }
                while (!sub_20BFE812C(v53, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v83));
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v57, (unsigned int **)&v83);
                pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v83);
              }
            }
            v50 = v51 - 1;
          }
          while (v51);
          v59 = (unint64_t)v8 >> 3;
          v60 = v78;
          do
          {
            v61 = *v7;
            v82 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v61;
            if (v61)
            {
              do
                v62 = __ldaxr((unsigned int *)v61);
              while (__stlxr(v62 + 1, (unsigned int *)v61));
            }
            v63 = 0;
            v64 = (unsigned int **)v7;
            do
            {
              v65 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v64[v63 + 1];
              v66 = 2 * v63;
              v63 = (2 * v63) | 1;
              v67 = v66 + 2;
              if (v66 + 2 < v59 && sub_20BFE812C(v65, v65 + 1))
              {
                ++v65;
                v63 = v67;
              }
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v64, (unsigned int **)v65);
              v64 = (unsigned int **)v65;
            }
            while (v63 <= (uint64_t)((unint64_t)(v59 - 2) >> 1));
            if (v65 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)--v60)
            {
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v65, (unsigned int **)&v82);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v65, v60);
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v60, (unsigned int **)&v82);
              v68 = (char *)v65 - (char *)v7 + 8;
              if (v68 >= 9)
              {
                v69 = (((unint64_t)v68 >> 3) - 2) >> 1;
                v70 = (unsigned int **)&v7[v69];
                if (sub_20BFE812C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v70, v65))
                {
                  v71 = *v65;
                  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v71;
                  if (v71)
                  {
                    do
                      v72 = __ldaxr((unsigned int *)v71);
                    while (__stlxr(v72 + 1, (unsigned int *)v71));
                  }
                  do
                  {
                    v73 = v70;
                    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)v65, v70);
                    if (!v69)
                      break;
                    v69 = (v69 - 1) >> 1;
                    v70 = (unsigned int **)&v7[v69];
                    v65 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v73;
                  }
                  while (sub_20BFE812C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v70, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v83));
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v73, (unsigned int **)&v83);
                  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v83);
                }
              }
            }
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v82);
          }
          while (v59-- > 2);
        }
        return;
    }
  }
}

void sub_20BFE809C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20BFE812C(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v4;
  int v5;
  void *v6;
  unsigned __int8 v7;
  size_t v8;
  void **v9;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  int v13;
  _QWORD v15[2];
  unsigned __int8 v16;
  void *__p[2];
  unsigned __int8 v18;

  v3 = sub_20BFE8634(a1);
  pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfVariantSpec *)v3, (uint64_t)__p);
  v4 = sub_20BFE8634(a2);
  pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfVariantSpec *)v4, (uint64_t)v15);
  v5 = (char)v16;
  v6 = (void *)v15[0];
  v7 = v18;
  if ((v18 & 0x80u) == 0)
    v8 = v18;
  else
    v8 = (size_t)__p[1];
  if ((v18 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v10 = v16;
  else
    v10 = v15[1];
  if ((v16 & 0x80u) == 0)
    v11 = v15;
  else
    v11 = (_QWORD *)v15[0];
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v9, v11, v12);
  if (v5 < 0)
  {
    operator delete(v6);
    if ((v18 & 0x80) == 0)
      goto LABEL_18;
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_18;
  }
  operator delete(__p[0]);
LABEL_18:
  if (v13)
    return v13 < 0;
  else
    return v8 < v10;
}

void sub_20BFE81FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFE8218(unsigned int ***a1, unsigned int ***a2)
{
  unsigned int **v2;
  unsigned int **v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;

  v2 = *a1;
  v3 = *a2;
  v4 = *v2;
  v6 = v4;
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v2, v3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v3, &v6);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

void sub_20BFE8278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void sub_20BFE828C(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4, unsigned int **a5)
{
  unsigned int **v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v13;
  unsigned int **v14;

  v13 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2;
  v14 = a1;
  v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4;
  v12 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3;
  v10 = a5;
  sub_20BFE870C(a1, a2, a3, a4);
  if (sub_20BFE812C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a5, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4))
  {
    sub_20BFE8218((unsigned int ***)&v11, &v10);
    if (sub_20BFE812C(v11, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
    {
      sub_20BFE8218((unsigned int ***)&v12, (unsigned int ***)&v11);
      if (sub_20BFE812C(v12, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2))
      {
        sub_20BFE8218((unsigned int ***)&v13, (unsigned int ***)&v12);
        if (sub_20BFE812C(v13, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))
          sub_20BFE8218(&v14, (unsigned int ***)&v13);
      }
    }
  }
}

void sub_20BFE8350(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  BOOL v5;
  _BOOL4 v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity ***v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity ***v8;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;

  v10 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2;
  v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1;
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3;
  v5 = sub_20BFE812C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1);
  v6 = sub_20BFE812C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2);
  if (v5)
  {
    if (v6)
    {
      v7 = &v11;
    }
    else
    {
      sub_20BFE8218((unsigned int ***)&v11, (unsigned int ***)&v10);
      if (!sub_20BFE812C(v9, v10))
        return;
      v7 = &v10;
    }
    v8 = &v9;
    goto LABEL_10;
  }
  if (v6)
  {
    sub_20BFE8218((unsigned int ***)&v10, (unsigned int ***)&v9);
    if (sub_20BFE812C(v10, v11))
    {
      v7 = &v11;
      v8 = &v10;
LABEL_10:
      sub_20BFE8218((unsigned int ***)v7, (unsigned int ***)v8);
    }
  }
}

void sub_20BFE8400(unsigned int ***a1, unsigned int ***a2)
{
  unsigned int **v2;
  unsigned int **v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;

  v2 = *a1;
  v3 = *a2;
  v4 = *v2;
  v6 = v4;
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v2, v3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v3, &v6);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

void sub_20BFE8460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFE8474(unsigned int **a1, unsigned int **a2)
{
  _BOOL8 v4;
  unsigned int **v5;
  unsigned int **v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int **v10;
  unsigned int *v12;
  unsigned int **v13;
  unsigned int **v14;

  v13 = a2;
  v14 = a1;
  v4 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      v13 = a2 - 1;
      if (sub_20BFE812C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))
      {
        sub_20BFE8218(&v14, &v13);
      }
      return v4;
    case 3:
      sub_20BFE8350(a1, a1 + 1, a2 - 1);
      return v4;
    case 4:
      sub_20BFE870C(a1, a1 + 1, a1 + 2, a2 - 1);
      return v4;
    case 5:
      sub_20BFE828C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return v4;
    default:
      v5 = a1 + 2;
      sub_20BFE8350(a1, a1 + 1, a1 + 2);
      v6 = a1 + 3;
      if (v6 == a2)
        return 1;
      v7 = 0;
      break;
  }
  while (!sub_20BFE812C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v5))
  {
LABEL_13:
    v5 = v6++;
    if (v6 == v13)
      return 1;
  }
  v8 = *v6;
  v12 = v8;
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  do
  {
    v10 = v5;
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v5 + 1, v5);
    if (v5 == v14)
      break;
    --v5;
  }
  while (sub_20BFE812C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v12, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v10 - 1));
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v10, &v12);
  if (++v7 != 8)
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v12);
    goto LABEL_13;
  }
  v4 = v6 + 1 == v13;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v12);
  return v4;
}

void sub_20BFE861C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity **sub_20BFE8634(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1)
{
  char *v3;
  _QWORD *v4;
  _QWORD v5[2];
  char v6;
  _QWORD v7[4];
  char v8;
  int v9;

  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    v7[2] = 96;
    v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>::ope"
            "rator->() const [T = pxrInternal__aapl__pxrReserved__::SdfVariantSpec]";
    v8 = 0;
    v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAB0567 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v5);
    if (v6 >= 0)
      v4 = v5;
    else
      v4 = (_QWORD *)v5[0];
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"Dereferenced an invalid %s", v3, v4);
  }
  return a1;
}

void sub_20BFE86D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x20BFE8650);
}

void sub_20BFE86F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFE870C(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4)
{
  unsigned int **v8;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  unsigned int **v11;

  v10 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2;
  v11 = a1;
  v8 = a4;
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3;
  sub_20BFE8350(a1, a2, a3);
  if (sub_20BFE812C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
  {
    sub_20BFE8218((unsigned int ***)&v9, &v8);
    if (sub_20BFE812C(v9, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2))
    {
      sub_20BFE8218((unsigned int ***)&v10, (unsigned int ***)&v9);
      if (sub_20BFE812C(v10, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))
        sub_20BFE8218(&v11, (unsigned int ***)&v10);
    }
  }
}

void sub_20BFE87A4(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *this)
{
  void *v2;

  if (*(_QWORD *)this)
    sub_20BFE87E8(this);
  v2 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    operator delete[](v2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(this);
}

uint64_t sub_20BFE87E8(_QWORD *a1)
{
  uint64_t v2;

  if (!*a1)
    return 1;
  if (sub_20BFE8844(a1))
    v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  else
    v2 = 0;
  sub_20BDEBF08(a1);
  return v2;
}

uint64_t sub_20BFE8844(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[4];
  char v6;
  int v7;

  v1 = a1[5];
  if (!v1)
    return 1;
  v3 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 24))(*a1, a1[4], v1, a1[2]);
  if (v3 == a1[5])
  {
    a1[2] += v3;
    a1[5] = 0;
    return 1;
  }
  v5[0] = "sdf/fileIO.h";
  v5[1] = "_FlushBuffer";
  v5[2] = 163;
  v5[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_TextOutput::_FlushBuffer()";
  v6 = 0;
  v7 = 3;
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"Failed to write bytes");
  return 0;
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfPath>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *EmptyString;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;

  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (*(_BYTE *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    v12 = 0;
    sub_20BFED578(a1, a2, (uint64_t)EmptyString, a4 + 8, (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(_QWORD *)(a4 + 104) != *(_QWORD *)(a4 + 112))
  {
    sub_20BDDC0E4(__p, "delete");
    sub_20BFED578(a1, a2, (uint64_t)EmptyString, a4 + 104, (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 32) != *(_QWORD *)(a4 + 40))
  {
    sub_20BDDC0E4(__p, "add");
    sub_20BFED578(a1, a2, (uint64_t)EmptyString, a4 + 32, (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 56) != *(_QWORD *)(a4 + 64))
  {
    sub_20BDDC0E4(__p, "prepend");
    sub_20BFED578(a1, a2, (uint64_t)EmptyString, a4 + 56, (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 80) != *(_QWORD *)(a4 + 88))
  {
    sub_20BDDC0E4(__p, "append");
    sub_20BFED578(a1, a2, (uint64_t)EmptyString, a4 + 80, (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  v8 = *(_QWORD *)(a4 + 128);
  v9 = *(_QWORD *)(a4 + 136);
  v10 = a4 + 128;
  if (v8 != v9)
  {
    sub_20BDDC0E4(__p, "reorder");
    sub_20BFED578(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__17Sdf_FileIOUtility11WriteListOpINS_7SdfPathEEEvRNS_14Sdf_TextOutputEmRKNS_7TfTokenERKNS_9SdfListOpIT_EE(a1, a2, a3, a4);
}

void sub_20BFE8AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *EmptyString;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void *__p[2];
  uint64_t v12;

  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (*(_BYTE *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    v12 = 0;
    sub_20BFED958(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(_QWORD *)(a4 + 104) != *(_QWORD *)(a4 + 112))
  {
    sub_20BDDC0E4(__p, "delete");
    sub_20BFED958(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 32) != *(_QWORD *)(a4 + 40))
  {
    sub_20BDDC0E4(__p, "add");
    sub_20BFED958(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 56) != *(_QWORD *)(a4 + 64))
  {
    sub_20BDDC0E4(__p, "prepend");
    sub_20BFED958(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 80) != *(_QWORD *)(a4 + 88))
  {
    sub_20BDDC0E4(__p, "append");
    sub_20BFED958(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  v8 = *(_QWORD *)(a4 + 128);
  v9 = *(_QWORD *)(a4 + 136);
  v10 = (uint64_t *)(a4 + 128);
  if (v8 != v9)
  {
    sub_20BDDC0E4(__p, "reorder");
    sub_20BFED958(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__17Sdf_FileIOUtility11WriteListOpINS_10SdfPayloadEEEvRNS_14Sdf_TextOutputEmRKNS_7TfTokenERKNS_9SdfListOpIT_EE(a1, a2, a3, a4);
}

void sub_20BFE8CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfReference>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *EmptyString;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void *__p[2];
  uint64_t v12;

  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (*(_BYTE *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    v12 = 0;
    sub_20BFEDDB4(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(_QWORD *)(a4 + 104) != *(_QWORD *)(a4 + 112))
  {
    sub_20BDDC0E4(__p, "delete");
    sub_20BFEDDB4(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 32) != *(_QWORD *)(a4 + 40))
  {
    sub_20BDDC0E4(__p, "add");
    sub_20BFEDDB4(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 56) != *(_QWORD *)(a4 + 64))
  {
    sub_20BDDC0E4(__p, "prepend");
    sub_20BFEDDB4(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 80) != *(_QWORD *)(a4 + 88))
  {
    sub_20BDDC0E4(__p, "append");
    sub_20BFEDDB4(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  v8 = *(_QWORD *)(a4 + 128);
  v9 = *(_QWORD *)(a4 + 136);
  v10 = (uint64_t *)(a4 + 128);
  if (v8 != v9)
  {
    sub_20BDDC0E4(__p, "reorder");
    sub_20BFEDDB4(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__17Sdf_FileIOUtility11WriteListOpINS_12SdfReferenceEEEvRNS_14Sdf_TextOutputEmRKNS_7TfTokenERKNS_9SdfListOpIT_EE(a1, a2, a3, a4);
}

void sub_20BFE8F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<int>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *EmptyString;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *__p[2];
  uint64_t v12;

  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (*(_BYTE *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    v12 = 0;
    sub_20BFEE340(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(_QWORD *)(a4 + 104) != *(_QWORD *)(a4 + 112))
  {
    sub_20BDDC0E4(__p, "delete");
    sub_20BFEE340(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 32) != *(_QWORD *)(a4 + 40))
  {
    sub_20BDDC0E4(__p, "add");
    sub_20BFEE340(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 56) != *(_QWORD *)(a4 + 64))
  {
    sub_20BDDC0E4(__p, "prepend");
    sub_20BFEE340(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 80) != *(_QWORD *)(a4 + 88))
  {
    sub_20BDDC0E4(__p, "append");
    sub_20BFEE340(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  v8 = *(_QWORD *)(a4 + 128);
  v9 = *(_QWORD *)(a4 + 136);
  v10 = (_QWORD *)(a4 + 128);
  if (v8 != v9)
  {
    sub_20BDDC0E4(__p, "reorder");
    sub_20BFEE340(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__17Sdf_FileIOUtility11WriteListOpIiEEvRNS_14Sdf_TextOutputEmRKNS_7TfTokenERKNS_9SdfListOpIT_EE(a1, a2, a3, a4);
}

void sub_20BFE9120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<long long>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *EmptyString;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *__p[2];
  uint64_t v12;

  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (*(_BYTE *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    v12 = 0;
    sub_20BFEE6C8(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(_QWORD *)(a4 + 104) != *(_QWORD *)(a4 + 112))
  {
    sub_20BDDC0E4(__p, "delete");
    sub_20BFEE6C8(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 32) != *(_QWORD *)(a4 + 40))
  {
    sub_20BDDC0E4(__p, "add");
    sub_20BFEE6C8(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 56) != *(_QWORD *)(a4 + 64))
  {
    sub_20BDDC0E4(__p, "prepend");
    sub_20BFEE6C8(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 80) != *(_QWORD *)(a4 + 88))
  {
    sub_20BDDC0E4(__p, "append");
    sub_20BFEE6C8(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  v8 = *(_QWORD *)(a4 + 128);
  v9 = *(_QWORD *)(a4 + 136);
  v10 = (_QWORD *)(a4 + 128);
  if (v8 != v9)
  {
    sub_20BDDC0E4(__p, "reorder");
    sub_20BFEE6C8(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__17Sdf_FileIOUtility11WriteListOpIxEEvRNS_14Sdf_TextOutputEmRKNS_7TfTokenERKNS_9SdfListOpIT_EE(a1, a2, a3, a4);
}

void sub_20BFE9338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<unsigned int>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *EmptyString;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *__p[2];
  uint64_t v12;

  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (*(_BYTE *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    v12 = 0;
    sub_20BFEEB18(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(_QWORD *)(a4 + 104) != *(_QWORD *)(a4 + 112))
  {
    sub_20BDDC0E4(__p, "delete");
    sub_20BFEEB18(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 32) != *(_QWORD *)(a4 + 40))
  {
    sub_20BDDC0E4(__p, "add");
    sub_20BFEEB18(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 56) != *(_QWORD *)(a4 + 64))
  {
    sub_20BDDC0E4(__p, "prepend");
    sub_20BFEEB18(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 80) != *(_QWORD *)(a4 + 88))
  {
    sub_20BDDC0E4(__p, "append");
    sub_20BFEEB18(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  v8 = *(_QWORD *)(a4 + 128);
  v9 = *(_QWORD *)(a4 + 136);
  v10 = (_QWORD *)(a4 + 128);
  if (v8 != v9)
  {
    sub_20BDDC0E4(__p, "reorder");
    sub_20BFEEB18(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__17Sdf_FileIOUtility11WriteListOpIjEEvRNS_14Sdf_TextOutputEmRKNS_7TfTokenERKNS_9SdfListOpIT_EE(a1, a2, a3, a4);
}

void sub_20BFE9550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<unsigned long long>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *EmptyString;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *__p[2];
  uint64_t v12;

  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (*(_BYTE *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    v12 = 0;
    sub_20BFEEEA0(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(_QWORD *)(a4 + 104) != *(_QWORD *)(a4 + 112))
  {
    sub_20BDDC0E4(__p, "delete");
    sub_20BFEEEA0(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 32) != *(_QWORD *)(a4 + 40))
  {
    sub_20BDDC0E4(__p, "add");
    sub_20BFEEEA0(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 56) != *(_QWORD *)(a4 + 64))
  {
    sub_20BDDC0E4(__p, "prepend");
    sub_20BFEEEA0(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 80) != *(_QWORD *)(a4 + 88))
  {
    sub_20BDDC0E4(__p, "append");
    sub_20BFEEEA0(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  v8 = *(_QWORD *)(a4 + 128);
  v9 = *(_QWORD *)(a4 + 136);
  v10 = (_QWORD *)(a4 + 128);
  if (v8 != v9)
  {
    sub_20BDDC0E4(__p, "reorder");
    sub_20BFEEEA0(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__17Sdf_FileIOUtility11WriteListOpIyEEvRNS_14Sdf_TextOutputEmRKNS_7TfTokenERKNS_9SdfListOpIT_EE(a1, a2, a3, a4);
}

void sub_20BFE9768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<std::string>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *EmptyString;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *__p[2];
  uint64_t v12;

  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (*(_BYTE *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    v12 = 0;
    sub_20BFEF2F0(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(_QWORD *)(a4 + 104) != *(_QWORD *)(a4 + 112))
  {
    sub_20BDDC0E4(__p, "delete");
    sub_20BFEF2F0(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 32) != *(_QWORD *)(a4 + 40))
  {
    sub_20BDDC0E4(__p, "add");
    sub_20BFEF2F0(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 56) != *(_QWORD *)(a4 + 64))
  {
    sub_20BDDC0E4(__p, "prepend");
    sub_20BFEF2F0(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 80) != *(_QWORD *)(a4 + 88))
  {
    sub_20BDDC0E4(__p, "append");
    sub_20BFEF2F0(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  v8 = *(_QWORD *)(a4 + 128);
  v9 = *(_QWORD *)(a4 + 136);
  v10 = (_QWORD *)(a4 + 128);
  if (v8 != v9)
  {
    sub_20BDDC0E4(__p, "reorder");
    sub_20BFEF2F0(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__17Sdf_FileIOUtility11WriteListOpINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRNS_14Sdf_TextOutputEmRKNS_7TfTokenERKNS_9SdfListOpIT_EE(a1, a2, a3, a4);
}

void sub_20BFE9980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *EmptyString;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *__p[2];
  uint64_t v12;

  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (*(_BYTE *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    v12 = 0;
    sub_20BFEF540(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(_QWORD *)(a4 + 104) != *(_QWORD *)(a4 + 112))
  {
    sub_20BDDC0E4(__p, "delete");
    sub_20BFEF540(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 32) != *(_QWORD *)(a4 + 40))
  {
    sub_20BDDC0E4(__p, "add");
    sub_20BFEF540(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 56) != *(_QWORD *)(a4 + 64))
  {
    sub_20BDDC0E4(__p, "prepend");
    sub_20BFEF540(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 80) != *(_QWORD *)(a4 + 88))
  {
    sub_20BDDC0E4(__p, "append");
    sub_20BFEF540(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  v8 = *(_QWORD *)(a4 + 128);
  v9 = *(_QWORD *)(a4 + 136);
  v10 = (_QWORD *)(a4 + 128);
  if (v8 != v9)
  {
    sub_20BDDC0E4(__p, "reorder");
    sub_20BFEF540(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__17Sdf_FileIOUtility11WriteListOpINS_7TfTokenEEEvRNS_14Sdf_TextOutputEmRKS2_RKNS_9SdfListOpIT_EE(a1, a2, a3, a4);
}

void sub_20BFE9B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *EmptyString;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *__p[2];
  uint64_t v12;

  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (*(_BYTE *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    v12 = 0;
    sub_20BFEF8A0(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(_QWORD *)(a4 + 104) != *(_QWORD *)(a4 + 112))
  {
    sub_20BDDC0E4(__p, "delete");
    sub_20BFEF8A0(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 32) != *(_QWORD *)(a4 + 40))
  {
    sub_20BDDC0E4(__p, "add");
    sub_20BFEF8A0(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 56) != *(_QWORD *)(a4 + 64))
  {
    sub_20BDDC0E4(__p, "prepend");
    sub_20BFEF8A0(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a4 + 80) != *(_QWORD *)(a4 + 88))
  {
    sub_20BDDC0E4(__p, "append");
    sub_20BFEF8A0(a1, a2, (uint64_t)EmptyString, (_QWORD *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  v8 = *(_QWORD *)(a4 + 128);
  v9 = *(_QWORD *)(a4 + 136);
  v10 = (_QWORD *)(a4 + 128);
  if (v8 != v9)
  {
    sub_20BDDC0E4(__p, "reorder");
    sub_20BFEF8A0(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__17Sdf_FileIOUtility11WriteListOpINS_20SdfUnregisteredValueEEEvRNS_14Sdf_TextOutputEmRKNS_7TfTokenERKNS_9SdfListOpIT_EE(a1, a2, a3, a4);
}

void sub_20BFE9DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  char *v7;
  unint64_t v8;

  if (a2)
  {
    v5 = a2;
    do
    {
      sub_20BFECD88(a1, "    ", 4uLL);
      --v5;
    }
    while (v5);
  }
  v6 = *(char *)(a3 + 23);
  if (v6 >= 0)
    v7 = (char *)a3;
  else
    v7 = *(char **)a3;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  return sub_20BFECD88(a1, v7, v8);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(_QWORD *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  uint64_t v5;
  char *v6;
  unint64_t v7;
  void *__p[2];
  unsigned __int8 v9;
  va_list v10;
  va_list va;

  va_start(va, this);
  if (a2)
  {
    v5 = a2;
    do
    {
      sub_20BFECD88(a1, "    ", 4uLL);
      --v5;
    }
    while (v5);
  }
  va_copy(v10, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, this, va, (char *)this);
  if ((v9 & 0x80u) == 0)
    v6 = (char *)__p;
  else
    v6 = (char *)__p[0];
  if ((v9 & 0x80u) == 0)
    v7 = v9;
  else
    v7 = (unint64_t)__p[1];
  sub_20BFECD88(a1, v6, v7);
  if ((char)v9 < 0)
    operator delete(__p[0]);
}

void sub_20BFE9EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(_QWORD *a1, char a2, int a3)
{
  char *p_p;
  unint64_t v5;
  char *v6;
  void *__p;
  unint64_t v9;
  unsigned __int8 v10;

  if ((a2 & 1) != 0)
  {
    if ((a3 & 1) != 0)
      return 1;
    sub_20BDDC0E4(&__p, "; ");
    if ((v10 & 0x80u) == 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if ((v10 & 0x80u) == 0)
      v5 = v10;
    else
      v5 = v9;
  }
  else
  {
    if (a3)
      v6 = " (\n";
    else
      v6 = " (";
    sub_20BDDC0E4(&__p, v6);
    if ((v10 & 0x80u) == 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if ((v10 & 0x80u) == 0)
      v5 = v10;
    else
      v5 = v9;
  }
  sub_20BFECD88(a1, p_p, v5);
  if ((char)v10 < 0)
    operator delete(__p);
  return 1;
}

void sub_20BFE9FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::CloseParensIfNeeded(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  void *__p[2];
  char v7;

  if (a3)
  {
    if (!a4)
      a2 = 0;
    sub_20BDDC0E4(__p, ")");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)__p);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_20BFEA048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(_QWORD *a1, uint64_t a2, const std::string *a3)
{
  std::string __p;

  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(a3, &__p);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BFEA0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote@<X0>(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v2;
  int v4;
  std::string::size_type v5;
  unsigned __int8 v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  const std::string::value_type *v10;
  int v11;
  std::string::size_type v12;
  std::string::value_type __s[8];

  v2 = (std::string *)a1;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = 34;
  if (std::string::find(a1, 34, 0) != -1)
  {
    if (std::string::find(v2, 39, 0) == -1)
      v4 = 39;
    else
      v4 = 34;
  }
  v5 = std::string::find(v2, 10, 0);
  if (v5 != -1)
  {
    std::string::push_back(a2, v4);
    std::string::push_back(a2, v4);
  }
  std::string::push_back(a2, v4);
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
  v6 = v2->__r_.__value_.__s.__data_[0];
  if (v2->__r_.__value_.__s.__data_[0])
  {
    do
    {
      if ((v6 & 0xE0) == 0xC0)
      {
        v7 = 2;
      }
      else if ((v6 & 0xF0) == 0xE0)
      {
        v7 = 3;
      }
      else
      {
        if ((v6 & 0xF8) != 0xF0)
          goto LABEL_20;
        v7 = 4;
      }
      v8 = v7;
      v9 = 1;
      while ((v2->__r_.__value_.__s.__data_[v9] & 0xC0) == 0x80)
      {
        if (v8 == ++v9)
        {
          sub_20BEE4228(a2, (char *)v2, (char *)v2 + v8);
          v2 = (std::string *)((char *)v2 + (v8 - 1));
          goto LABEL_35;
        }
      }
LABEL_20:
      if ((char)v6 > 12)
      {
        if (v6 == 13)
        {
          v10 = "\\r";
        }
        else
        {
          if (v6 != 92)
          {
LABEL_31:
            if (v4 == v6)
            {
              std::string::push_back(a2, 92);
              v6 = v4;
            }
            else if ((v6 - 32) >= 0x5Fu)
            {
              strcpy(__s, "\\x__");
              __s[2] = a0123456789abcd[v6 >> 4];
              __s[3] = a0123456789abcd[v6 & 0xF];
              std::string::append(a2, __s);
              goto LABEL_35;
            }
LABEL_34:
            std::string::push_back(a2, v6);
            goto LABEL_35;
          }
          v10 = "\\\\";
        }
      }
      else if (v6 == 9)
      {
        v10 = "\\t";
      }
      else
      {
        if (v6 != 10)
          goto LABEL_31;
        if (v5 != -1)
          goto LABEL_34;
        v10 = "\\n";
      }
      std::string::append(a2, v10);
LABEL_35:
      v11 = v2->__r_.__value_.__s.__data_[1];
      v2 = (std::string *)((char *)v2 + 1);
      v6 = v11;
    }
    while (v11);
  }
  if (v5 == -1)
    v12 = 1;
  else
    v12 = 3;
  return std::string::append(a2, v12, v4);
}

void sub_20BFEA340(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteAssetPath(_QWORD *a1, uint64_t a2, const std::string *a3)
{
  std::string __p;

  sub_20BFEA3D4(a3, &__p);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BFEA3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_20BFEA3D4@<X0>(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  const std::string *v2;
  std::string::size_type v4;
  std::string::size_type v5;
  std::string::size_type size;
  uint64_t v7;
  std::string::size_type v8;
  std::string::value_type v9;
  int v10;

  v2 = a1;
  v4 = std::string::find(a1, 64, 0);
  v5 = v4;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  size = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = v2->__r_.__value_.__l.__size_;
  v7 = 2;
  if (v4 != -1)
    v7 = 6;
  std::string::reserve(a2, size + v7);
  if (v5 == -1)
    v8 = 1;
  else
    v8 = 3;
  std::string::append(a2, v8, 64);
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v2 = (const std::string *)v2->__r_.__value_.__r.__words[0];
  v9 = v2->__r_.__value_.__s.__data_[0];
  if (v2->__r_.__value_.__s.__data_[0])
  {
    do
    {
      if (v5 != -1 && v9 == 64 && v2->__r_.__value_.__s.__data_[1] == 64 && v2->__r_.__value_.__s.__data_[2] == 64)
      {
        std::string::push_back(a2, 92);
        std::string::append(a2, 3uLL, 64);
        v2 = (const std::string *)((char *)v2 + 2);
      }
      else
      {
        std::string::push_back(a2, v9);
      }
      v10 = v2->__r_.__value_.__s.__data_[1];
      v2 = (const std::string *)((char *)v2 + 1);
      v9 = v10;
    }
    while (v10);
  }
  return std::string::append(a2, v8, 64);
}

void sub_20BFEA4F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDefaultValue(_QWORD *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  uint64_t *String;
  const char *v8;
  std::string *p_p;
  std::string __p;
  const char *v11;
  char v12;

  if (sub_20BFEA640(a3))
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFEA710(a3);
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v6);
    if (*((char *)String + 23) >= 0)
      v8 = (const char *)String;
    else
      v8 = (const char *)*String;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v8);
  }
  else if (sub_20BFEA778(a3))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileIO_Common.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"WriteDefaultValue";
    __p.__r_.__value_.__r.__words[2] = 487;
    v11 = "static void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDefaultValue(Sdf_TextOutput &, size_t, VtValue)";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Tried to write opaque value to layer");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::StringFromVtValue((const std::string **)a3, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)" = %s", (const char *)p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20BFEA624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFEA640(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAB02EALL & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524BC8);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteSdfPath(_QWORD *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t *String;
  const char *v6;

  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a3);
  if (*((char *)String + 23) >= 0)
    v6 = (const char *)String;
  else
    v6 = (const char *)*String;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v6);
}

uint64_t sub_20BFEA710(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_20BFEA640(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BFECE18, (uint64_t)&stru_24C524BC8);
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t sub_20BFEA778(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAE6BD6 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524D80);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::StringFromVtValue(const std::string **this@<X0>, std::string *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *v3;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v8;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v9;
  uint64_t v10;
  std::string *v11;
  std::string::size_type size;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v14;
  std::string *v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string __p;
  std::string v21;

  v3 = (pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *)this;
  memset(&__p, 0, sizeof(__p));
  if ((sub_20BFEC09C((uint64_t)&__p, this) & 1) != 0
    || (sub_20BFEC25C((uint64_t)&__p, v3) & 1) != 0
    || (sub_20BFEC420((uint64_t)&__p, (const std::string **)v3) & 1) != 0)
  {
LABEL_35:
    *a2 = __p;
    memset(&__p, 0, sizeof(__p));
    goto LABEL_36;
  }
  if (sub_20BFEFCF0(v3))
  {
    v5 = *((_QWORD *)v3 + 1);
    if ((v5 & 4) != 0)
      v6 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v3);
    else
      v6 = *(pxrInternal__aapl__pxrReserved__::SdfPathExpression **)v3;
    sub_20BFEFD68(v6, &v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v21;
    goto LABEL_35;
  }
  if (sub_20BFEFDCC(v3))
  {
    v7 = *((_QWORD *)v3 + 1);
    if ((v7 & 4) != 0)
      v8 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v3);
    else
      v8 = *(pxrInternal__aapl__pxrReserved__::SdfPathExpression **)v3;
    std::string::append(&__p, "[");
    v9 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)*((_QWORD *)v8 + 4);
    if (v9)
    {
      v10 = *(_QWORD *)v8;
      if (v10)
      {
        sub_20BFEFD68(v9, &v21);
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &v21;
        else
          v11 = (std::string *)v21.__r_.__value_.__r.__words[0];
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
        else
          size = v21.__r_.__value_.__l.__size_;
        std::string::append(&__p, (const std::string::value_type *)v11, size);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
        v13 = v10 - 1;
        if (v10 != 1)
        {
          v14 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)((char *)v9 + 96);
          do
          {
            std::string::append(&__p, ", ");
            sub_20BFEFD68(v14, &v21);
            if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v15 = &v21;
            else
              v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
            if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v16 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
            else
              v16 = v21.__r_.__value_.__l.__size_;
            std::string::append(&__p, (const std::string::value_type *)v15, v16);
            if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v21.__r_.__value_.__l.__data_);
            v14 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)((char *)v14 + 96);
            --v13;
          }
          while (v13);
        }
      }
    }
    std::string::append(&__p, "]");
    goto LABEL_35;
  }
  if (sub_20BFEC9A0(v3))
  {
    v17 = *((_QWORD *)v3 + 1);
    if ((v17 & 4) != 0)
      v3 = (pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *))((v17 & 0xFFFFFFFFFFFFFFF8) + 168))(v3);
LABEL_42:
    LODWORD(v21.__r_.__value_.__l.__data_) = *(char *)v3;
    sub_20BFEC9D8();
    goto LABEL_36;
  }
  if (sub_20BFECAA0(v3))
  {
    v18 = *((_QWORD *)v3 + 1);
    if ((v18 & 4) != 0)
      v3 = (pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(v3);
    LODWORD(v21.__r_.__value_.__l.__data_) = *(unsigned __int8 *)v3;
    sub_20BFECAD8();
  }
  else
  {
    if (sub_20BFECBA0(v3))
    {
      v19 = *((_QWORD *)v3 + 1);
      if ((v19 & 4) != 0)
        v3 = (pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(v3);
      goto LABEL_42;
    }
    sub_20BF834B0((uint64_t)v3);
  }
LABEL_36:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BFEAAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *p_p;
  unint64_t v16;
  void *__p;
  unint64_t v19;
  unsigned __int8 v20;

  v6 = *a3;
  v5 = a3[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a3) >> 3);
  if (v7 >= 2)
  {
    sub_20BDDC0E4(&__p, "[");
    v8 = (v20 & 0x80u) == 0 ? (char *)&__p : (char *)__p;
    v9 = (v20 & 0x80u) == 0 ? v20 : v19;
    sub_20BFECD88(a1, v8, v9);
    if ((char)v20 < 0)
      operator delete(__p);
  }
  if (v5 != v6)
  {
    v10 = 0;
    v11 = 0;
    if (v7 <= 1)
      v12 = 1;
    else
      v12 = v7;
    do
    {
      if (v11)
      {
        sub_20BDDC0E4(&__p, ", ");
        v13 = (v20 & 0x80u) == 0 ? (char *)&__p : (char *)__p;
        v14 = (v20 & 0x80u) == 0 ? v20 : v19;
        sub_20BFECD88(a1, v13, v14);
        if ((char)v20 < 0)
          operator delete(__p);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a1, 0, (const std::string *)(*a3 + v10));
      ++v11;
      v10 += 24;
    }
    while (v12 != v11);
  }
  if (v7 >= 2)
  {
    sub_20BDDC0E4(&__p, "]");
    if ((v20 & 0x80u) == 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if ((v20 & 0x80u) == 0)
      v16 = v20;
    else
      v16 = v19;
    sub_20BFECD88(a1, p_p, v16);
    if ((char)v20 < 0)
      operator delete(__p);
  }
  return 1;
}

void sub_20BFEAC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  const std::string *EmptyString;
  char *p_p;
  unint64_t v16;
  void *__p;
  unint64_t v19;
  unsigned __int8 v20;

  v4 = a1;
  v6 = *a3;
  v5 = a3[1];
  v7 = v5 - *a3;
  if ((unint64_t)v7 >= 9)
  {
    sub_20BDDC0E4(&__p, "[");
    v8 = (v20 & 0x80u) == 0 ? (char *)&__p : (char *)__p;
    v9 = (v20 & 0x80u) == 0 ? v20 : v19;
    a1 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFECD88(v4, v8, v9);
    if ((char)v20 < 0)
      operator delete(__p);
  }
  if (v5 != v6)
  {
    v10 = 0;
    if ((unint64_t)(v7 >> 3) <= 1)
      v11 = 1;
    else
      v11 = v7 >> 3;
    do
    {
      if (v10)
      {
        sub_20BDDC0E4(&__p, ", ");
        v12 = (v20 & 0x80u) == 0 ? (char *)&__p : (char *)__p;
        v13 = (v20 & 0x80u) == 0 ? v20 : v19;
        a1 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFECD88(v4, v12, v13);
        if ((char)v20 < 0)
          operator delete(__p);
      }
      if ((*(_QWORD *)(*a3 + 8 * v10) & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (const std::string *)((*(_QWORD *)(*a3 + 8 * v10) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(v4, 0, EmptyString);
      ++v10;
    }
    while (v11 != v10);
  }
  if ((unint64_t)v7 >= 9)
  {
    sub_20BDDC0E4(&__p, "]");
    if ((v20 & 0x80u) == 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if ((v20 & 0x80u) == 0)
      v16 = v20;
    else
      v16 = v19;
    sub_20BFECD88(v4, p_p, v16);
    if ((char)v20 < 0)
      operator delete(__p);
  }
  return 1;
}

void sub_20BFEAE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteTimeSamples(_QWORD *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  std::string *p_p;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  uint64_t *String;
  const char *v21;
  _QWORD *v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  const char *v28;
  std::string __p;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a3, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 432), (pxrInternal__aapl__pxrReserved__::VtValue *)&v36);
  if (sub_20BFEB19C((pxrInternal__aapl__pxrReserved__::VtValue *)&v36))
  {
    if ((v37 & 4) != 0)
      v7 = (*(uint64_t (**)(uint64_t *))((v37 & 0xFFFFFFFFFFFFFFF8) + 168))(&v36);
    else
      v7 = v36;
    sub_20BFECEF8((uint64_t *)&v33, v7);
    v31 = (_QWORD **)v33;
    v32 = &v34;
    v10 = a2 + 1;
    while (v31 != v32)
    {
      v11 = sub_20BFEB214(&v31, v8, v9);
      pxrInternal__aapl__pxrReserved__::TfStringify(*(double *)(*v11 + 32), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, v10, (pxrInternal__aapl__pxrReserved__ *)"%s: ", (const char *)p_p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v15 = sub_20BFEB214(&v31, v13, v14);
      if (sub_20BFEA640((pxrInternal__aapl__pxrReserved__::VtValue *)(*v15 + 40)))
      {
        v18 = sub_20BFEB214(&v31, v16, v17);
        v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFEA710((pxrInternal__aapl__pxrReserved__::VtValue *)(*v18 + 40));
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v19);
        if (*((char *)String + 23) >= 0)
          v21 = (const char *)String;
        else
          v21 = (const char *)*String;
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v21);
      }
      else
      {
        v22 = sub_20BFEB214(&v31, v16, v17);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::StringFromVtValue((const std::string **)(*v22 + 40), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &__p;
        else
          v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        sub_20BFECD88(a1, (char *)v23, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_20BDDC0E4(&__p, ",\n");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &__p;
      else
        v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v26 = __p.__r_.__value_.__l.__size_;
      sub_20BFECD88(a1, (char *)v25, v26);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_20BFEB28C(&v31);
    }
    sub_20BFED2B4((uint64_t)&v33, v34);
  }
  else if (sub_20BFEB330((pxrInternal__aapl__pxrReserved__::VtValue *)&v36))
  {
    v27 = (v37 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v37 & 0xFFFFFFFFFFFFFFF8) + 168))(&v36) : v36;
    sub_20BFEB3A8(v27);
    v28 = v35 >= 0 ? (const char *)&v33 : (const char *)v33;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2 + 1, (pxrInternal__aapl__pxrReserved__ *)"%s\n", v28);
    if (v35 < 0)
      operator delete(v33);
  }
  sub_20BF4C2D8((uint64_t)&v36);
  return 1;
}

void sub_20BFEB120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  sub_20BF4C2D8((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFEB19C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAC1980 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524D90);
}

_QWORD *sub_20BFEB214(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<double, pxrInternal__aapl__pxrReserved__::Vt"
            "Value>>::operator->() [T = std::map<double, pxrInternal__aapl__pxrReserved__::VtValue>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20BFEB28C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<double, pxrInternal__aapl__pxr"
            "Reserved__::VtValue>>::operator++() [T = std::map<double, pxrInternal__aapl__pxrReserved__::VtValue>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t sub_20BFEB330(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAB05E0 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524DA0);
}

uint64_t sub_20BFEB3A8(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20BFEB45C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteRelocates(_QWORD *a1, uint64_t a2, int a3, _QWORD *a4)
{
  const char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *String;
  const char *v15;
  char *p_p;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t *v21;
  const char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  void *__p;
  unint64_t v31;
  unsigned __int8 v32;
  _QWORD *v33;
  _QWORD *v34;

  v8 = "{ ";
  if (a3)
    v8 = "{\n";
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"relocates = %s", v8);
  v11 = a4[2];
  v33 = (_QWORD *)*a4;
  v34 = a4 + 1;
  if (v33 != a4 + 1)
  {
    v12 = v11 - 1;
    do
    {
      v13 = sub_20BFEB714(&v33, v9, v10);
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v13 + 28));
      if (*((char *)String + 23) >= 0)
        v15 = (const char *)String;
      else
        v15 = (const char *)*String;
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2 + 1, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v15);
      sub_20BDDC0E4(&__p, ": ");
      if ((v32 & 0x80u) == 0)
        p_p = (char *)&__p;
      else
        p_p = (char *)__p;
      if ((v32 & 0x80u) == 0)
        v17 = v32;
      else
        v17 = v31;
      sub_20BFECD88(a1, p_p, v17);
      if ((char)v32 < 0)
        operator delete(__p);
      v20 = sub_20BFEB714(&v33, v18, v19);
      v21 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v20 + 36));
      if (*((char *)v21 + 23) >= 0)
        v22 = (const char *)v21;
      else
        v22 = (const char *)*v21;
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v22);
      if (v12
        && ((sub_20BDDC0E4(&__p, ", "), (v32 & 0x80u) == 0) ? (v23 = (char *)&__p) : (v23 = (char *)__p),
            (v32 & 0x80u) == 0 ? (v24 = v32) : (v24 = v31),
            sub_20BFECD88(a1, v23, v24),
            (char)v32 < 0))
      {
        operator delete(__p);
        if (a3)
        {
LABEL_28:
          sub_20BDDC0E4(&__p, "\n");
          if ((v32 & 0x80u) == 0)
            v25 = (char *)&__p;
          else
            v25 = (char *)__p;
          if ((v32 & 0x80u) == 0)
            v26 = v32;
          else
            v26 = v31;
          sub_20BFECD88(a1, v25, v26);
          if ((char)v32 < 0)
            operator delete(__p);
        }
      }
      else if (a3)
      {
        goto LABEL_28;
      }
      sub_20BFEB78C(&v33);
      --v12;
    }
    while (v33 != v34);
  }
  if ((a3 & 1) != 0)
  {
    sub_20BDDC0E4(&__p, "}\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)&__p);
  }
  else
  {
    sub_20BDDC0E4(&__p, " }");
    if ((v32 & 0x80u) == 0)
      v27 = (char *)&__p;
    else
      v27 = (char *)__p;
    if ((v32 & 0x80u) == 0)
      v28 = v32;
    else
      v28 = v31;
    sub_20BFECD88(a1, v27, v28);
  }
  if ((char)v32 < 0)
    operator delete(__p);
  return 1;
}

void sub_20BFEB6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFEB714(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrReserved__::SdfP"
            "ath, pxrInternal__aapl__pxrReserved__::SdfPath>>::operator->() [T = const std::map<pxrInternal__aapl__pxrRes"
            "erved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20BFEB78C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrRe"
            "served__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>::operator++() [T = const std::map<pxrInternal"
            "__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::_WriteDictionary(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5)
{
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  pxrInternal__aapl__pxrReserved__::VtValue *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  const std::string *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  __int128 *v28;
  __int128 v29;
  const char *v30;
  _BYTE *v31;
  int v32;
  BOOL v33;
  char v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  std::string *v41;
  std::string::size_type v42;
  char v43;
  const char *v44;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v45;
  void *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  unint64_t v55;
  const char *v56;
  const char *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  char *v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v69;
  const void **v70;
  _BYTE __dst[24];
  void *__p[2];
  __int128 v73;
  char v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a3)
    v9 = "{\n";
  else
    v9 = "{ ";
  sub_20BDDC0E4(__p, v9);
  if ((SBYTE7(v73) & 0x80u) == 0)
    v10 = (char *)__p;
  else
    v10 = (char *)__p[0];
  if ((SBYTE7(v73) & 0x80u) == 0)
    v11 = BYTE7(v73);
  else
    v11 = (unint64_t)__p[1];
  sub_20BFECD88(a1, v10, v11);
  if (SBYTE7(v73) < 0)
    operator delete(__p[0]);
  v14 = a4[2];
  v75 = (_QWORD *)*a4;
  v76 = a4 + 1;
  if (v75 != a4 + 1)
  {
    if ((_DWORD)a3)
      v15 = a2 + 1;
    else
      v15 = 0;
    v69 = v15;
    do
    {
      v16 = sub_20BFEC024(&v75, v12, v13);
      --v14;
      v19 = *(pxrInternal__aapl__pxrReserved__::VtValue **)(*v16 + 40);
      if (a5)
      {
        if (sub_20BFB4608(*(pxrInternal__aapl__pxrReserved__::VtValue **)(*v16 + 40)))
        {
          v22 = sub_20BFEC024(&v75, v20, v21);
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a1, v69, *(const std::string **)(*v22 + 32));
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)": ");
          v23 = (const std::string *)sub_20BFB2D9C(v19);
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a1, 0, v23);
          if (v14
            && ((sub_20BDDC0E4(__p, ", "), (SBYTE7(v73) & 0x80u) == 0) ? (v24 = (char *)__p) : (v24 = (char *)__p[0]),
                (SBYTE7(v73) & 0x80u) == 0 ? (v25 = BYTE7(v73)) : (v25 = (unint64_t)__p[1]),
                sub_20BFECD88(a1, v24, v25),
                SBYTE7(v73) < 0))
          {
            operator delete(__p[0]);
            if ((_DWORD)a3)
            {
LABEL_28:
              sub_20BDDC0E4(__p, "\n");
              if ((SBYTE7(v73) & 0x80u) == 0)
                v26 = (char *)__p;
              else
                v26 = (char *)__p[0];
              if ((SBYTE7(v73) & 0x80u) == 0)
                v27 = BYTE7(v73);
              else
                v27 = (unint64_t)__p[1];
              goto LABEL_118;
            }
          }
          else if ((_DWORD)a3)
          {
            goto LABEL_28;
          }
        }
        else
        {
          __p[0] = "sdf/fileIO_Common.cpp";
          __p[1] = "_WriteDictionary";
          *(_QWORD *)&v73 = 617;
          *((_QWORD *)&v73 + 1) = "static void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::_WriteDictionary(Sdf_"
                                  "TextOutput &, size_t, BOOL, Sdf_FileIOUtility::_OrderedDictionary &, BOOL)";
          v74 = 0;
          v30 = *(const char **)(*sub_20BFEC024(&v75, v20, v21) + 32);
          if (v30[23] < 0)
            v30 = *(const char **)v30;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Dictionary has a non-string value under key \"%s\"; skipping",
            v30);
        }
      }
      else
      {
        v28 = *(__int128 **)(*sub_20BFEC024(&v75, v17, v18) + 32);
        if (*((char *)v28 + 23) < 0)
        {
          sub_20BDDBFAC(__dst, *(void **)v28, *((_QWORD *)v28 + 1));
        }
        else
        {
          v29 = *v28;
          *(_QWORD *)&__dst[16] = *((_QWORD *)v28 + 2);
          *(_OWORD *)__dst = v29;
        }
        if (__dst[23] >= 0)
          v31 = __dst;
        else
          v31 = *(_BYTE **)__dst;
        v32 = (char)*v31;
        if (*v31)
          v33 = (v32 - 48) >= 0xA;
        else
          v33 = 0;
        if (!v33)
          goto LABEL_61;
        if (v32 != 95 && (v32 & 0xFFFFFFDF) - 65 > 0x19)
          goto LABEL_61;
        do
        {
          v36 = (char)*v31++;
          v35 = v36;
          v37 = (v36 & 0xFFFFFFDF) - 65;
          v38 = v36 - 48;
        }
        while (v36 == 95 || v37 < 0x1A || v38 < 0xA);
        if (v35)
        {
LABEL_61:
          std::operator+<char>();
          v41 = std::string::append((std::string *)__p, "\"");
          v42 = v41->__r_.__value_.__r.__words[0];
          *(_QWORD *)&v78 = v41->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)&v78 + 7) = *(std::string::size_type *)((char *)&v41->__r_.__value_.__r.__words[1] + 7);
          v43 = HIBYTE(v41->__r_.__value_.__r.__words[2]);
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          *(_QWORD *)__dst = v42;
          *(_QWORD *)&__dst[8] = v78;
          *(_QWORD *)&__dst[15] = *(_QWORD *)((char *)&v78 + 7);
          __dst[23] = v43;
          if (SBYTE7(v73) < 0)
            operator delete(__p[0]);
        }
        if (sub_20BF4A73C(v19))
        {
          if (__dst[23] >= 0)
            v44 = __dst;
          else
            v44 = *(const char **)__dst;
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, v69, (pxrInternal__aapl__pxrReserved__ *)"dictionary %s = ", v44);
          v45 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_20BF4D3FC(v19);
          *((_QWORD *)&v78 + 1) = 0;
          v79 = 0;
          *(_QWORD *)&v78 = (char *)&v78 + 8;
          *(_OWORD *)__p = 0u;
          v73 = 0u;
          __p[0] = (void *)pxrInternal__aapl__pxrReserved__::VtDictionary::begin(v45);
          __p[1] = v46;
          *(_QWORD *)&v73 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(v45);
          *((_QWORD *)&v73 + 1) = v47;
          while (__p[1] != *((void **)&v73 + 1) || __p[1] && __p[0] != (void *)v73)
          {
            v49 = *sub_20BF4B4BC(__p, v47, v48);
            v70 = (const void **)(*sub_20BF4B4BC(__p, v50, v51) + 32);
            v77 = (unint64_t)&v70;
            sub_20BFED2FC((uint64_t **)&v78, &v70, (uint64_t)&unk_20CAC184C, (uint64_t **)&v77)[5] = v49 + 56;
            sub_20BF4B6E0(__p, v52, v53);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::_WriteDictionary(a1, a2 + 1, a3, &v78, 0);
          sub_20BE6100C((uint64_t)&v78, *((_QWORD **)&v78 + 1));
        }
        else
        {
          if (!atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames))
            sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::GetSerializationName(v19, (unsigned int **)&v77);
          v55 = v77 & 0xFFFFFFFFFFFFFFF8;
          if ((v77 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v56 = (const char *)(v55 + 16);
            if (*(char *)(v55 + 39) < 0)
              v56 = *(const char **)v56;
          }
          else
          {
            v56 = "";
          }
          if (__dst[23] >= 0)
            v57 = __dst;
          else
            v57 = *(const char **)__dst;
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, v69, (pxrInternal__aapl__pxrReserved__ *)"%s %s = ", v56, v57);
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v73 = 0;
          if ((sub_20BFEC09C((uint64_t)__p, (const std::string **)v19) & 1) != 0
            || (sub_20BFEC25C((uint64_t)__p, v19) & 1) != 0
            || sub_20BFEC420((uint64_t)__p, (const std::string **)v19))
          {
            if ((SBYTE7(v73) & 0x80u) == 0)
              v58 = (char *)__p;
            else
              v58 = (char *)__p[0];
            if ((SBYTE7(v73) & 0x80u) == 0)
              v59 = BYTE7(v73);
            else
              v59 = (unint64_t)__p[1];
            sub_20BFECD88(a1, v58, v59);
          }
          else
          {
            sub_20BF834B0((uint64_t)v19);
            if (v79 >= 0)
              v64 = (char *)&v78;
            else
              v64 = (char *)v78;
            if (v79 >= 0)
              v65 = HIBYTE(v79);
            else
              v65 = *((_QWORD *)&v78 + 1);
            sub_20BFECD88(a1, v64, v65);
            if (SHIBYTE(v79) < 0)
              operator delete((void *)v78);
          }
          if ((_DWORD)a3)
          {
            sub_20BDDC0E4(&v78, "\n");
            v60 = v79 >= 0 ? (char *)&v78 : (char *)v78;
            v61 = v79 >= 0 ? HIBYTE(v79) : *((_QWORD *)&v78 + 1);
            sub_20BFECD88(a1, v60, v61);
            if (SHIBYTE(v79) < 0)
              operator delete((void *)v78);
          }
          if (SBYTE7(v73) < 0)
            operator delete(__p[0]);
          if ((v77 & 7) != 0)
          {
            v62 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
            do
              v63 = __ldxr(v62);
            while (__stlxr(v63 - 2, v62));
          }
        }
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
      }
      if ((a3 & 1) == 0 && v14)
      {
        sub_20BDDC0E4(__p, "; ");
        if ((SBYTE7(v73) & 0x80u) == 0)
          v26 = (char *)__p;
        else
          v26 = (char *)__p[0];
        if ((SBYTE7(v73) & 0x80u) == 0)
          v27 = BYTE7(v73);
        else
          v27 = (unint64_t)__p[1];
LABEL_118:
        sub_20BFECD88(a1, v26, v27);
        if (SBYTE7(v73) < 0)
          operator delete(__p[0]);
      }
      sub_20BFEC5E0(&v75);
    }
    while (v75 != v76);
  }
  if ((a3 & 1) != 0)
  {
    sub_20BDDC0E4(__p, "}\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)__p);
  }
  else
  {
    sub_20BDDC0E4(__p, " }");
    if ((SBYTE7(v73) & 0x80u) == 0)
      v66 = (char *)__p;
    else
      v66 = (char *)__p[0];
    if ((SBYTE7(v73) & 0x80u) == 0)
      v67 = BYTE7(v73);
    else
      v67 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v66, v67);
  }
  if (SBYTE7(v73) < 0)
    operator delete(__p[0]);
}

void sub_20BFEBF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFEC024(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<const std::string *, const pxrInternal__aapl"
            "__pxrReserved__::VtValue *, pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::_StringLessThan>>::operator"
            "->() [T = std::map<const std::string *, const pxrInternal__aapl__pxrReserved__::VtValue *, pxrInternal__aapl"
            "__pxrReserved__::Sdf_FileIOUtility::_StringLessThan>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20BFEC09C(uint64_t a1, const std::string **a2)
{
  const std::string *v4;
  const std::string *v5;
  uint64_t result;
  const std::string *v7;
  const std::string *v8;
  const std::string *size;
  std::string::size_type v10;
  std::string *p_p;
  std::string::size_type v12;
  std::string::size_type v13;
  const std::string *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string __p;

  if (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (const std::string *)(*(uint64_t (**)(const std::string **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8)
                                                                                + 168))(a2);
    else
      v5 = *a2;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(v5, &__p);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(std::string *)a1 = __p;
  }
  else
  {
    result = sub_20BFED418((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (!(_DWORD)result)
      return result;
    v7 = a2[1];
    if ((v7 & 4) != 0)
      v8 = (const std::string *)(*(uint64_t (**)(const std::string **))(((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8)
                                                                                + 168))(a2);
    else
      v8 = *a2;
    std::string::append((std::string *)a1, "[");
    size = (const std::string *)v8[1].__r_.__value_.__l.__size_;
    if (size)
    {
      v10 = v8->__r_.__value_.__r.__words[0];
      if (v10)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(size, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v12 = __p.__r_.__value_.__l.__size_;
        std::string::append((std::string *)a1, (const std::string::value_type *)p_p, v12);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v13 = v10 - 1;
        if (v10 != 1)
        {
          v14 = size + 1;
          do
          {
            std::string::append((std::string *)a1, ", ");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(v14, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v15 = &__p;
            else
              v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v16 = __p.__r_.__value_.__l.__size_;
            std::string::append((std::string *)a1, (const std::string::value_type *)v15, v16);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            ++v14;
            --v13;
          }
          while (v13);
        }
      }
    }
    std::string::append((std::string *)a1, "]");
  }
  return 1;
}

void sub_20BFEC23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFEC25C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *v8;
  uint64_t v9;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *v13;
  std::string *v14;
  std::string::size_type v15;
  std::string __p;

  v2 = a2;
  if (sub_20BFB5E50(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(v2, &__p);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(std::string *)a1 = __p;
  }
  else
  {
    result = sub_20BFED450(v2);
    if (!(_DWORD)result)
      return result;
    v6 = *((_QWORD *)v2 + 1);
    if ((v6 & 4) != 0)
      v7 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(v2);
    else
      v7 = *(uint64_t **)v2;
    std::string::append((std::string *)a1, "[");
    v8 = (pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *)v7[4];
    if (v8)
    {
      v9 = *v7;
      if (v9)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(v8, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::string::append((std::string *)a1, (const std::string::value_type *)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v12 = v9 - 1;
        if (v9 != 1)
        {
          v13 = (pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *)((char *)v8 + 8);
          do
          {
            std::string::append((std::string *)a1, ", ");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(v13, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v14 = &__p;
            else
              v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v15 = __p.__r_.__value_.__l.__size_;
            std::string::append((std::string *)a1, (const std::string::value_type *)v14, v15);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v13 = (pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *)((char *)v13 + 8);
            --v12;
          }
          while (v12);
        }
      }
    }
    std::string::append((std::string *)a1, "]");
  }
  return 1;
}

void sub_20BFEC400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFEC420(uint64_t a1, const std::string **a2)
{
  const std::string *v4;
  const std::string *v5;
  uint64_t result;
  const std::string *v7;
  const std::string *v8;
  const std::string *size;
  std::string::size_type v10;
  std::string *p_p;
  std::string::size_type v12;
  std::string::size_type v13;
  const std::string *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string __p;

  if (sub_20BFED488((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (const std::string *)(*(uint64_t (**)(const std::string **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8)
                                                                                + 168))(a2);
    else
      v5 = *a2;
    sub_20BFEA3D4(v5, &__p);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(std::string *)a1 = __p;
  }
  else
  {
    result = sub_20BFED500((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (!(_DWORD)result)
      return result;
    v7 = a2[1];
    if ((v7 & 4) != 0)
      v8 = (const std::string *)(*(uint64_t (**)(const std::string **))(((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8)
                                                                                + 168))(a2);
    else
      v8 = *a2;
    std::string::append((std::string *)a1, "[");
    size = (const std::string *)v8[1].__r_.__value_.__l.__size_;
    if (size)
    {
      v10 = v8->__r_.__value_.__r.__words[0];
      if (v10)
      {
        sub_20BFEA3D4(size, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v12 = __p.__r_.__value_.__l.__size_;
        std::string::append((std::string *)a1, (const std::string::value_type *)p_p, v12);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v13 = v10 - 1;
        if (v10 != 1)
        {
          v14 = size + 2;
          do
          {
            std::string::append((std::string *)a1, ", ");
            sub_20BFEA3D4(v14, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v15 = &__p;
            else
              v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v16 = __p.__r_.__value_.__l.__size_;
            std::string::append((std::string *)a1, (const std::string::value_type *)v15, v16);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v14 += 2;
            --v13;
          }
          while (v13);
        }
      }
    }
    std::string::append((std::string *)a1, "]");
  }
  return 1;
}

void sub_20BFEC5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFEC5E0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<const std::string *, const pxr"
            "Internal__aapl__pxrReserved__::VtValue *, pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::_StringLessTh"
            "an>>::operator++() [T = std::map<const std::string *, const pxrInternal__aapl__pxrReserved__::VtValue *, pxr"
            "Internal__aapl__pxrReserved__::Sdf_FileIOUtility::_StringLessThan>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(_QWORD *a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtDictionary *this, int a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  const void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24[2];
  const void ***v25;

  v24[0] = 0;
  v24[1] = 0;
  v23 = (uint64_t *)v24;
  v19 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(this);
  v20 = v10;
  v21 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(this);
  v22 = v11;
  while (v20 != v22 || v20 && v19 != v21)
  {
    v13 = *sub_20BF4B4BC(&v19, v11, v12);
    v18 = (const void **)(*sub_20BF4B4BC(&v19, v14, v15) + 32);
    v25 = &v18;
    sub_20BFED2FC(&v23, &v18, (uint64_t)&unk_20CAC184C, (uint64_t **)&v25)[5] = v13 + 56;
    sub_20BF4B6E0(&v19, v16, v17);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::_WriteDictionary(a1, a2, a3, &v23, a5);
  sub_20BE6100C((uint64_t)&v23, v24[0]);
}

void sub_20BFEC79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_20BE6100C((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteLayerOffset(_QWORD *a1, uint64_t a2, int a3, double *a4)
{
  double v8;
  double v9;
  void **v10;
  uint64_t v11;
  const char *v12;
  void **v13;
  uint64_t v14;
  const char *v15;
  void *__p[2];
  char v17;

  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__p, 0.0, 1.0);
  if (!pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==(a4, (double *)__p))
  {
    if ((a3 & 1) == 0)
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)" (");
    v9 = *a4;
    v8 = a4[1];
    if (*a4 != 0.0)
    {
      pxrInternal__aapl__pxrReserved__::TfStringify(v9, __p);
      if (v17 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      if (a3)
        v11 = a2;
      else
        v11 = 0;
      v12 = "";
      if (a3)
        v12 = "\n";
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, v11, (pxrInternal__aapl__pxrReserved__ *)"offset = %s%s", (const char *)v10, v12);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    if (v8 != 1.0)
    {
      if (v9 != 0.0 && (a3 & 1) == 0)
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"; ");
      pxrInternal__aapl__pxrReserved__::TfStringify(v8, __p);
      if (v17 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if (a3)
        v14 = a2;
      else
        v14 = 0;
      v15 = "";
      if (a3)
        v15 = "\n";
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, v14, (pxrInternal__aapl__pxrReserved__ *)"scale = %s%s", (const char *)v13, v15);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    if ((a3 & 1) == 0)
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)")");
  }
}

void sub_20BFEC948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *this@<X0>, std::string *a2@<X8>)
{
  const std::string *EmptyString;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const std::string *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  return pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(EmptyString, a2);
}

uint64_t sub_20BFEC9A0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 1)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB778]);
  else
    return 0;
}

uint64_t sub_20BFEC9D8()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  sub_20BDDE5E0((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v1[1] = MEMORY[0x24BEDB848] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v3);
}

void sub_20BFECA8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFECAA0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 2)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB790]);
  else
    return 0;
}

uint64_t sub_20BFECAD8()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  sub_20BDDE5E0((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v1[1] = MEMORY[0x24BEDB848] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v3);
}

void sub_20BFECB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFECBA0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(MEMORY[0x24BEDB768] + 8) & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB768]);
}

const char *pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(int a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];
  char v5;
  uint64_t v6;
  uint64_t v7;

  if (!a1)
    return "public";
  if (a1 == 1)
    return "private";
  v6 = v1;
  v7 = v2;
  v4[0] = "sdf/fileIO_Common.cpp";
  v4[1] = "Stringify";
  v4[2] = 882;
  v4[3] = "static const char *pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(SdfPermission)";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"unknown value");
  return "";
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];
  char v5;
  uint64_t v6;
  uint64_t v7;

  if (!a1)
    return "";
  if (a1 == 1)
    return "uniform";
  v6 = v1;
  v7 = v2;
  v4[0] = "sdf/fileIO_Common.cpp";
  v4[1] = "Stringify";
  v4[2] = 911;
  v4[3] = "static const char *pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(SdfVariability)";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"unknown value");
  return "";
}

const char *pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(unsigned int a1)
{
  _QWORD v2[4];
  char v3;

  if (a1 < 3)
    return off_24C524E00[a1];
  v2[0] = "sdf/fileIO_Common.cpp";
  v2[1] = "Stringify";
  v2[2] = 897;
  v2[3] = "static const char *pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(SdfSpecifier)";
  v3 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"unknown value");
  return "";
}

uint64_t sub_20BFECD88(_QWORD *a1, char *__src, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  size_t v7;
  size_t v8;
  uint64_t result;

  if (!a3)
    return 1;
  v3 = a3;
  while (1)
  {
    v6 = a1[5];
    v7 = v3 >= a1[3] - v6 ? a1[3] - v6 : v3;
    memcpy((void *)(a1[4] + v6), __src, v7);
    v8 = a1[5] + v7;
    a1[5] = v8;
    if (v8 == a1[3])
    {
      result = sub_20BFE8844(a1);
      if (!(_DWORD)result)
        break;
    }
    __src += v7;
    v3 -= v7;
    if (!v3)
      return 1;
  }
  return result;
}

uint64_t sub_20BFECE1C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t (*v2)(_QWORD);
  _QWORD v4[2];

  sub_20BFECE6C(v4);
  v2 = (uint64_t (*)(_QWORD))v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  v4[0] = 0;
  a1[2] = &unk_24C524BC8;
  return v2(0);
}

_DWORD *sub_20BFECE6C@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *result;

  v2 = operator new(8uLL);
  *(_QWORD *)v2 = 0;
  v3 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v2);
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v3 + 1);
  *a1 = v2;
  a1[1] = sub_20BFECEB8;
  return result;
}

void sub_20BFECEB8(_DWORD *a1)
{
  _DWORD *v2;

  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
    v2 = sub_20BFD265C(a1);
    operator delete(v2);
  }
}

uint64_t *sub_20BFECEF8(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20BFECF4C(a1, *(double **)a2, (double *)(a2 + 8));
  return a1;
}

void sub_20BFECF34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFED2B4(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20BFECF4C(uint64_t *result, double *a2, double *a3)
{
  double *v4;
  uint64_t **v5;
  double *v6;
  double *v7;
  double *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (double *)(result + 1);
    do
    {
      result = sub_20BFECFD0(v5, v6, v4 + 4, (_QWORD *)v4 + 4);
      v7 = (double *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(double **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (double *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_20BFECFD0(uint64_t **a1, double *a2, double *a3, _QWORD *a4)
{
  double *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  double v11;
  double *v12;

  v6 = sub_20BFED064(a1, a2, &v12, &v11, a3);
  v7 = *(uint64_t **)v6;
  if (!*(_QWORD *)v6)
  {
    v8 = (uint64_t **)v6;
    sub_20BFED200((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20BFED270((uint64_t)v10, 0);
  }
  return v7;
}

double *sub_20BFED064(_QWORD *a1, double *a2, double **a3, double *a4, double *a5)
{
  double *v5;
  double v6;
  double v7;
  uint64_t *v8;
  uint64_t *v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double *v13;
  BOOL v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  double *v19;
  double *v20;
  double v21;

  v5 = (double *)(a1 + 1);
  if (a1 + 1 == (_QWORD *)a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *(uint64_t **)a2;
    if ((double *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = *(uint64_t **)a2;
      do
      {
        v10 = (double *)v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (double *)*((_QWORD *)v13 + 2);
        v14 = *(_QWORD *)v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = *(double **)v5;
    if (*(_QWORD *)v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = *(double **)v16;
          v5 = v17;
          if (!*(_QWORD *)v17)
            goto LABEL_43;
        }
        if (v18 >= v15)
          break;
        v5 = v16 + 1;
        v16 = (double *)*((_QWORD *)v16 + 1);
      }
      while (v16);
      goto LABEL_43;
    }
LABEL_42:
    v17 = (double *)(a1 + 1);
LABEL_43:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *(_QWORD *)a4 = a2;
    return a4;
  }
  v11 = *((_QWORD *)a2 + 1);
  if (v11)
  {
    v12 = (double *)*((_QWORD *)a2 + 1);
    do
    {
      a4 = v12;
      v12 = *(double **)v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (double *)*((_QWORD *)v19 + 2);
      v14 = *(_QWORD *)a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = *(double **)v5;
    if (*(_QWORD *)v5)
    {
      do
      {
        while (1)
        {
          v17 = v20;
          v21 = v20[4];
          if (v6 >= v21)
            break;
          v20 = *(double **)v20;
          v5 = v17;
          if (!*(_QWORD *)v17)
            goto LABEL_43;
        }
        if (v21 >= v6)
          break;
        v5 = v20 + 1;
        v20 = (double *)*((_QWORD *)v20 + 1);
      }
      while (v20);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *sub_20BFED200@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[4] = *a2;
  result = sub_20BF4C6D0(v6 + 5, a2 + 1);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20BFED258(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFED270(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20BFED270(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BF4C2D8((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

void sub_20BFED2B4(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20BFED2B4(a1, *a2);
    sub_20BFED2B4(a1, a2[1]);
    sub_20BF4C2D8((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

uint64_t *sub_20BFED2FC(uint64_t **a1, const void ***a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = sub_20BFED380((uint64_t)a1, &v10, a2);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v7[4] = **a4;
    v7[5] = 0;
    sub_20BDDE1B4(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *sub_20BFED380(uint64_t a1, _QWORD *a2, const void ***a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        if (!sub_20BDDDF74(v7, *a3, (const void **)v4[4]))
          break;
        v4 = (uint64_t *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_20BDDDF74(v7, (const void **)v8[4], *a3))
        break;
      v5 = v8 + 1;
      v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t sub_20BFED418(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 59)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DDC8);
  else
    return 0;
}

uint64_t sub_20BFED450(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 60)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DDE0);
  else
    return 0;
}

uint64_t sub_20BFED488(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAC983ALL & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524DB0);
}

uint64_t sub_20BFED500(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAC97F8 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524DC0);
}

void sub_20BFED578(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  const char *v9;
  const char *v10;
  const char *v11;
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  uint64_t v13;
  uint64_t *String;
  const char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::SdfPath *v23;
  uint64_t *v24;
  const char *v25;
  char *v26;
  unint64_t v27;
  __int128 v28;
  void *__p[2];
  unsigned __int8 v30;

  v8 = *(unsigned __int8 *)(a5 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = (const char *)a5;
  else
    v9 = *(const char **)a5;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a5 + 8);
  if (v8)
    v10 = " ";
  else
    v10 = "";
  if (*(char *)(a3 + 23) >= 0)
    v11 = (const char *)a3;
  else
    v11 = *(const char **)a3;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v9, v10, v11);
  v12 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)a4;
  v13 = *(_QWORD *)(a4 + 8);
  if (*(_QWORD *)a4 == v13)
  {
    sub_20BDDC0E4(__p, "None\n");
    if ((v30 & 0x80u) == 0)
      v16 = (char *)__p;
    else
      v16 = (char *)__p[0];
    if ((v30 & 0x80u) == 0)
      v17 = v30;
    else
      v17 = (unint64_t)__p[1];
    goto LABEL_23;
  }
  if (v13 - (_QWORD)v12 == 8)
  {
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v12);
    if (*((char *)String + 23) >= 0)
      v15 = (const char *)String;
    else
      v15 = (const char *)*String;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v15);
    sub_20BDDC0E4(__p, "\n");
    if ((v30 & 0x80u) == 0)
      v16 = (char *)__p;
    else
      v16 = (char *)__p[0];
    if ((v30 & 0x80u) == 0)
      v17 = v30;
    else
      v17 = (unint64_t)__p[1];
LABEL_23:
    sub_20BFECD88(a1, v16, v17);
    goto LABEL_59;
  }
  sub_20BDDC0E4(__p, "[\n");
  if ((v30 & 0x80u) == 0)
    v18 = (char *)__p;
  else
    v18 = (char *)__p[0];
  if ((v30 & 0x80u) == 0)
    v19 = v30;
  else
    v19 = (unint64_t)__p[1];
  sub_20BFECD88(a1, v18, v19);
  if ((char)v30 < 0)
    operator delete(__p[0]);
  v22 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)&v28 = *(_QWORD *)a4;
  *((_QWORD *)&v28 + 1) = v22;
  while ((_QWORD)v28 != *((_QWORD *)&v28 + 1))
  {
    v23 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFED860((uint64_t *)&v28, v20, v21);
    v24 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v23);
    if (*((char *)v24 + 23) >= 0)
      v25 = (const char *)v24;
    else
      v25 = (const char *)*v24;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2 + 1, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v25);
    *(_OWORD *)__p = v28;
    sub_20BFED8DC(__p);
    if (__p[0] == __p[1])
    {
      sub_20BDDC0E4(__p, "\n");
      if ((v30 & 0x80u) == 0)
        v26 = (char *)__p;
      else
        v26 = (char *)__p[0];
      if ((v30 & 0x80u) == 0)
        v27 = v30;
      else
        v27 = (unint64_t)__p[1];
    }
    else
    {
      sub_20BDDC0E4(__p, ",\n");
      if ((v30 & 0x80u) == 0)
        v26 = (char *)__p;
      else
        v26 = (char *)__p[0];
      if ((v30 & 0x80u) == 0)
        v27 = v30;
      else
        v27 = (unint64_t)__p[1];
    }
    sub_20BFECD88(a1, v26, v27);
    if ((char)v30 < 0)
      operator delete(__p[0]);
    sub_20BFED8DC(&v28);
  }
  sub_20BDDC0E4(__p, "]\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)__p);
LABEL_59:
  if ((char)v30 < 0)
    operator delete(__p[0]);
}

void sub_20BFED830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFED860(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfPath>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BFED8D4()
{
  JUMPOUT(0x20BFED884);
}

_QWORD *sub_20BFED8DC(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfPath>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

void sub_20BFED958(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  const char *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  void *__p[2];
  unsigned __int8 v26;

  v8 = *(unsigned __int8 *)(a5 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = (const char *)a5;
  else
    v9 = *(const char **)a5;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a5 + 8);
  if (v8)
    v10 = " ";
  else
    v10 = "";
  if (*(char *)(a3 + 23) >= 0)
    v11 = (const char *)a3;
  else
    v11 = *(const char **)a3;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v9, v10, v11);
  v12 = *a4;
  v13 = a4[1];
  if (*a4 == v13)
  {
    sub_20BDDC0E4(__p, "None\n");
    if ((v26 & 0x80u) == 0)
      v14 = (char *)__p;
    else
      v14 = (char *)__p[0];
    if ((v26 & 0x80u) == 0)
      v15 = v26;
    else
      v15 = (unint64_t)__p[1];
    goto LABEL_20;
  }
  if (v13 - v12 == 48)
  {
    sub_20BFEDBF8(a1, 0, v12);
    sub_20BDDC0E4(__p, "\n");
    if ((v26 & 0x80u) == 0)
      v14 = (char *)__p;
    else
      v14 = (char *)__p[0];
    if ((v26 & 0x80u) == 0)
      v15 = v26;
    else
      v15 = (unint64_t)__p[1];
LABEL_20:
    sub_20BFECD88(a1, v14, v15);
    goto LABEL_53;
  }
  sub_20BDDC0E4(__p, "[\n");
  if ((v26 & 0x80u) == 0)
    v16 = (char *)__p;
  else
    v16 = (char *)__p[0];
  if ((v26 & 0x80u) == 0)
    v17 = v26;
  else
    v17 = (unint64_t)__p[1];
  sub_20BFECD88(a1, v16, v17);
  if ((char)v26 < 0)
    operator delete(__p[0]);
  v20 = a4[1];
  *(_QWORD *)&v24 = *a4;
  *((_QWORD *)&v24 + 1) = v20;
  while ((_QWORD)v24 != *((_QWORD *)&v24 + 1))
  {
    v21 = sub_20BFEDCBC((uint64_t *)&v24, v18, v19);
    sub_20BFEDBF8(a1, a2 + 1, v21);
    *(_OWORD *)__p = v24;
    sub_20BFEDD38(__p);
    if (__p[0] == __p[1])
    {
      sub_20BDDC0E4(__p, "\n");
      if ((v26 & 0x80u) == 0)
        v22 = (char *)__p;
      else
        v22 = (char *)__p[0];
      if ((v26 & 0x80u) == 0)
        v23 = v26;
      else
        v23 = (unint64_t)__p[1];
    }
    else
    {
      sub_20BDDC0E4(__p, ",\n");
      if ((v26 & 0x80u) == 0)
        v22 = (char *)__p;
      else
        v22 = (char *)__p[0];
      if ((v26 & 0x80u) == 0)
        v23 = v26;
      else
        v23 = (unint64_t)__p[1];
    }
    sub_20BFECD88(a1, v22, v23);
    if ((char)v26 < 0)
      operator delete(__p[0]);
    sub_20BFEDD38(&v24);
  }
  sub_20BDDC0E4(__p, "]\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)__p);
LABEL_53:
  if ((char)v26 < 0)
    operator delete(__p[0]);
}

void sub_20BFEDBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFEDBF8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  uint64_t *String;
  const char *v9;

  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"");
  v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a3 + 8);
  if (v6)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteAssetPath(a1, 0, (const std::string *)a3);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 24);
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a3 + 24)))
      goto LABEL_11;
  }
  else
  {
    v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 24);
  }
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v7);
  if (*((char *)String + 23) >= 0)
    v9 = (const char *)String;
  else
    v9 = (const char *)*String;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v9);
LABEL_11:
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteLayerOffset(a1, a2 + 1, 0, (double *)(a3 + 32));
}

uint64_t sub_20BFEDCBC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfPayload>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BFEDD30()
{
  JUMPOUT(0x20BFEDCE0);
}

_QWORD *sub_20BFEDD38(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfPayload>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>"
            ", Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 48;
  }
  return a1;
}

void sub_20BFEDDB4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  const char *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  void *__p[2];
  unsigned __int8 v26;

  v8 = *(unsigned __int8 *)(a5 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = (const char *)a5;
  else
    v9 = *(const char **)a5;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a5 + 8);
  if (v8)
    v10 = " ";
  else
    v10 = "";
  if (*(char *)(a3 + 23) >= 0)
    v11 = (const char *)a3;
  else
    v11 = *(const char **)a3;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v9, v10, v11);
  v12 = *a4;
  v13 = a4[1];
  if (*a4 == v13)
  {
    sub_20BDDC0E4(__p, "None\n");
    if ((v26 & 0x80u) == 0)
      v14 = (char *)__p;
    else
      v14 = (char *)__p[0];
    if ((v26 & 0x80u) == 0)
      v15 = v26;
    else
      v15 = (unint64_t)__p[1];
    goto LABEL_53;
  }
  if (v13 - v12 == 56
    && pxrInternal__aapl__pxrReserved__::VtDictionary::empty((pxrInternal__aapl__pxrReserved__::VtDictionary *)(v12 + 48)))
  {
    sub_20BFEE064(a1, 0, *a4);
    sub_20BDDC0E4(__p, "\n");
    if ((v26 & 0x80u) == 0)
      v14 = (char *)__p;
    else
      v14 = (char *)__p[0];
    if ((v26 & 0x80u) == 0)
      v15 = v26;
    else
      v15 = (unint64_t)__p[1];
LABEL_53:
    sub_20BFECD88(a1, v14, v15);
    goto LABEL_54;
  }
  sub_20BDDC0E4(__p, "[\n");
  if ((v26 & 0x80u) == 0)
    v16 = (char *)__p;
  else
    v16 = (char *)__p[0];
  if ((v26 & 0x80u) == 0)
    v17 = v26;
  else
    v17 = (unint64_t)__p[1];
  sub_20BFECD88(a1, v16, v17);
  if ((char)v26 < 0)
    operator delete(__p[0]);
  v20 = a4[1];
  *(_QWORD *)&v24 = *a4;
  *((_QWORD *)&v24 + 1) = v20;
  while ((_QWORD)v24 != *((_QWORD *)&v24 + 1))
  {
    v21 = sub_20BFEE248((uint64_t *)&v24, v18, v19);
    sub_20BFEE064(a1, a2 + 1, v21);
    *(_OWORD *)__p = v24;
    sub_20BFEE2C4(__p);
    if (__p[0] == __p[1])
    {
      sub_20BDDC0E4(__p, "\n");
      if ((v26 & 0x80u) == 0)
        v22 = (char *)__p;
      else
        v22 = (char *)__p[0];
      if ((v26 & 0x80u) == 0)
        v23 = v26;
      else
        v23 = (unint64_t)__p[1];
    }
    else
    {
      sub_20BDDC0E4(__p, ",\n");
      if ((v26 & 0x80u) == 0)
        v22 = (char *)__p;
      else
        v22 = (char *)__p[0];
      if ((v26 & 0x80u) == 0)
        v23 = v26;
      else
        v23 = (unint64_t)__p[1];
    }
    sub_20BFECD88(a1, v22, v23);
    if ((char)v26 < 0)
      operator delete(__p[0]);
    sub_20BFEE2C4(&v24);
  }
  sub_20BDDC0E4(__p, "]\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)__p);
LABEL_54:
  if ((char)v26 < 0)
    operator delete(__p[0]);
}

void sub_20BFEE034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFEE064(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtDictionary *v6;
  _BOOL4 v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t *String;
  const char *v11;
  char *v12;
  unint64_t v13;
  void *__p[2];
  unsigned __int8 v15;

  v6 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(a3 + 48);
  v7 = pxrInternal__aapl__pxrReserved__::VtDictionary::empty((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a3 + 48));
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"");
  v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a3 + 8);
  if (!v8)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 24);
LABEL_8:
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v9);
    if (*((char *)String + 23) >= 0)
      v11 = (const char *)String;
    else
      v11 = (const char *)*String;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v11);
    if (v7)
      goto LABEL_20;
    goto LABEL_12;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteAssetPath(a1, 0, (const std::string *)a3);
  v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 24);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a3 + 24)))
    goto LABEL_8;
  if (v7)
    goto LABEL_20;
LABEL_12:
  sub_20BDDC0E4(__p, " (\n");
  if ((v15 & 0x80u) == 0)
    v12 = (char *)__p;
  else
    v12 = (char *)__p[0];
  if ((v15 & 0x80u) == 0)
    v13 = v15;
  else
    v13 = (unint64_t)__p[1];
  sub_20BFECD88(a1, v12, v13);
  if ((char)v15 < 0)
    operator delete(__p[0]);
LABEL_20:
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteLayerOffset(a1, a2 + 1, !v7, (double *)(a3 + 32));
  if (!pxrInternal__aapl__pxrReserved__::VtDictionary::empty(v6))
  {
    sub_20BDDC0E4(__p, "customData = ");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2 + 1, (uint64_t)__p);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a1, a2 + 1, 1, v6, 0);
  }
  if (!v7)
  {
    sub_20BDDC0E4(__p, ")");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)__p);
    if ((char)v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_20BFEE220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFEE248(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfReference>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BFEE2BC()
{
  JUMPOUT(0x20BFEE26CLL);
}

_QWORD *sub_20BFEE2C4(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfReference>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::SdfRefere"
            "nce>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 56;
  }
  return a1;
}

void sub_20BFEE340(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  void *__p[2];
  unsigned __int8 v25;

  v7 = *(unsigned __int8 *)(a5 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (const char *)a5;
  else
    v8 = *(const char **)a5;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a5 + 8);
  if (v7)
    v9 = " ";
  else
    v9 = "";
  if (*(char *)(a3 + 23) >= 0)
    v10 = (const char *)a3;
  else
    v10 = *(const char **)a3;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v8, v9, v10);
  if (*a4 == a4[1])
  {
    sub_20BDDC0E4(__p, "None\n");
    if ((v25 & 0x80u) == 0)
      v21 = (char *)__p;
    else
      v21 = (char *)__p[0];
    if ((v25 & 0x80u) == 0)
      v22 = v25;
    else
      v22 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v21, v22);
  }
  else
  {
    sub_20BDDC0E4(__p, "[");
    if ((v25 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    if ((v25 & 0x80u) == 0)
      v12 = v25;
    else
      v12 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v11, v12);
    if ((char)v25 < 0)
      operator delete(__p[0]);
    v15 = a4[1];
    *(_QWORD *)&v23 = *a4;
    *((_QWORD *)&v23 + 1) = v15;
    while ((_QWORD)v23 != *((_QWORD *)&v23 + 1))
    {
      sub_20BFEE5D0((uint64_t *)&v23, v13, v14);
      sub_20BFEC9D8();
      if ((v25 & 0x80u) == 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s", (const char *)v16);
      if ((char)v25 < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v23;
      sub_20BFEE64C(__p);
      if (__p[0] == __p[1])
      {
        sub_20BDDC0E4(__p, "");
        if ((v25 & 0x80u) == 0)
          v17 = (char *)__p;
        else
          v17 = (char *)__p[0];
        if ((v25 & 0x80u) == 0)
          v18 = v25;
        else
          v18 = (unint64_t)__p[1];
      }
      else
      {
        sub_20BDDC0E4(__p, ", ");
        if ((v25 & 0x80u) == 0)
          v17 = (char *)__p;
        else
          v17 = (char *)__p[0];
        if ((v25 & 0x80u) == 0)
          v18 = v25;
        else
          v18 = (unint64_t)__p[1];
      }
      sub_20BFECD88(a1, v17, v18);
      if ((char)v25 < 0)
        operator delete(__p[0]);
      sub_20BFEE64C(&v23);
    }
    sub_20BDDC0E4(__p, "]\n");
    if ((v25 & 0x80u) == 0)
      v19 = (char *)__p;
    else
      v19 = (char *)__p[0];
    if ((v25 & 0x80u) == 0)
      v20 = v25;
    else
      v20 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v19, v20);
  }
  if ((char)v25 < 0)
    operator delete(__p[0]);
}

void sub_20BFEE5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFEE5D0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<int>>::operator*() [T = const std::"
            "vector<int>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BFEE644()
{
  JUMPOUT(0x20BFEE5F4);
}

_QWORD *sub_20BFEE64C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<int>>::operator++() ["
            "T = const std::vector<int>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

void sub_20BFEE6C8(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  void *__p[2];
  unsigned __int8 v25;

  v7 = *(unsigned __int8 *)(a5 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (const char *)a5;
  else
    v8 = *(const char **)a5;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a5 + 8);
  if (v7)
    v9 = " ";
  else
    v9 = "";
  if (*(char *)(a3 + 23) >= 0)
    v10 = (const char *)a3;
  else
    v10 = *(const char **)a3;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v8, v9, v10);
  if (*a4 == a4[1])
  {
    sub_20BDDC0E4(__p, "None\n");
    if ((v25 & 0x80u) == 0)
      v21 = (char *)__p;
    else
      v21 = (char *)__p[0];
    if ((v25 & 0x80u) == 0)
      v22 = v25;
    else
      v22 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v21, v22);
  }
  else
  {
    sub_20BDDC0E4(__p, "[");
    if ((v25 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    if ((v25 & 0x80u) == 0)
      v12 = v25;
    else
      v12 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v11, v12);
    if ((char)v25 < 0)
      operator delete(__p[0]);
    v15 = a4[1];
    *(_QWORD *)&v23 = *a4;
    *((_QWORD *)&v23 + 1) = v15;
    while ((_QWORD)v23 != *((_QWORD *)&v23 + 1))
    {
      sub_20BFEE958((uint64_t *)&v23, v13, v14);
      sub_20BFEEA50();
      if ((v25 & 0x80u) == 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s", (const char *)v16);
      if ((char)v25 < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v23;
      sub_20BFEE9D4(__p);
      if (__p[0] == __p[1])
      {
        sub_20BDDC0E4(__p, "");
        if ((v25 & 0x80u) == 0)
          v17 = (char *)__p;
        else
          v17 = (char *)__p[0];
        if ((v25 & 0x80u) == 0)
          v18 = v25;
        else
          v18 = (unint64_t)__p[1];
      }
      else
      {
        sub_20BDDC0E4(__p, ", ");
        if ((v25 & 0x80u) == 0)
          v17 = (char *)__p;
        else
          v17 = (char *)__p[0];
        if ((v25 & 0x80u) == 0)
          v18 = v25;
        else
          v18 = (unint64_t)__p[1];
      }
      sub_20BFECD88(a1, v17, v18);
      if ((char)v25 < 0)
        operator delete(__p[0]);
      sub_20BFEE9D4(&v23);
    }
    sub_20BDDC0E4(__p, "]\n");
    if ((v25 & 0x80u) == 0)
      v19 = (char *)__p;
    else
      v19 = (char *)__p[0];
    if ((v25 & 0x80u) == 0)
      v20 = v25;
    else
      v20 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v19, v20);
  }
  if ((char)v25 < 0)
    operator delete(__p[0]);
}

void sub_20BFEE928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFEE958(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<long long>>::operator*() [T = const"
            " std::vector<long long>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BFEE9CC()
{
  JUMPOUT(0x20BFEE97CLL);
}

_QWORD *sub_20BFEE9D4(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<long long>>::operator"
            "++() [T = const std::vector<long long>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_20BFEEA50()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  sub_20BDDE5E0((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v1[1] = MEMORY[0x24BEDB848] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v3);
}

void sub_20BFEEB04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BFEEB18(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  void *__p[2];
  unsigned __int8 v25;

  v7 = *(unsigned __int8 *)(a5 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (const char *)a5;
  else
    v8 = *(const char **)a5;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a5 + 8);
  if (v7)
    v9 = " ";
  else
    v9 = "";
  if (*(char *)(a3 + 23) >= 0)
    v10 = (const char *)a3;
  else
    v10 = *(const char **)a3;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v8, v9, v10);
  if (*a4 == a4[1])
  {
    sub_20BDDC0E4(__p, "None\n");
    if ((v25 & 0x80u) == 0)
      v21 = (char *)__p;
    else
      v21 = (char *)__p[0];
    if ((v25 & 0x80u) == 0)
      v22 = v25;
    else
      v22 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v21, v22);
  }
  else
  {
    sub_20BDDC0E4(__p, "[");
    if ((v25 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    if ((v25 & 0x80u) == 0)
      v12 = v25;
    else
      v12 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v11, v12);
    if ((char)v25 < 0)
      operator delete(__p[0]);
    v15 = a4[1];
    *(_QWORD *)&v23 = *a4;
    *((_QWORD *)&v23 + 1) = v15;
    while ((_QWORD)v23 != *((_QWORD *)&v23 + 1))
    {
      sub_20BFEEDA8((uint64_t *)&v23, v13, v14);
      sub_20BFECAD8();
      if ((v25 & 0x80u) == 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s", (const char *)v16);
      if ((char)v25 < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v23;
      sub_20BFEEE24(__p);
      if (__p[0] == __p[1])
      {
        sub_20BDDC0E4(__p, "");
        if ((v25 & 0x80u) == 0)
          v17 = (char *)__p;
        else
          v17 = (char *)__p[0];
        if ((v25 & 0x80u) == 0)
          v18 = v25;
        else
          v18 = (unint64_t)__p[1];
      }
      else
      {
        sub_20BDDC0E4(__p, ", ");
        if ((v25 & 0x80u) == 0)
          v17 = (char *)__p;
        else
          v17 = (char *)__p[0];
        if ((v25 & 0x80u) == 0)
          v18 = v25;
        else
          v18 = (unint64_t)__p[1];
      }
      sub_20BFECD88(a1, v17, v18);
      if ((char)v25 < 0)
        operator delete(__p[0]);
      sub_20BFEEE24(&v23);
    }
    sub_20BDDC0E4(__p, "]\n");
    if ((v25 & 0x80u) == 0)
      v19 = (char *)__p;
    else
      v19 = (char *)__p[0];
    if ((v25 & 0x80u) == 0)
      v20 = v25;
    else
      v20 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v19, v20);
  }
  if ((char)v25 < 0)
    operator delete(__p[0]);
}

void sub_20BFEED78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFEEDA8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<unsigned int>>::operator*() [T = co"
            "nst std::vector<unsigned int>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BFEEE1C()
{
  JUMPOUT(0x20BFEEDCCLL);
}

_QWORD *sub_20BFEEE24(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<unsigned int>>::opera"
            "tor++() [T = const std::vector<unsigned int>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

void sub_20BFEEEA0(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  void *__p[2];
  unsigned __int8 v25;

  v7 = *(unsigned __int8 *)(a5 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (const char *)a5;
  else
    v8 = *(const char **)a5;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a5 + 8);
  if (v7)
    v9 = " ";
  else
    v9 = "";
  if (*(char *)(a3 + 23) >= 0)
    v10 = (const char *)a3;
  else
    v10 = *(const char **)a3;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v8, v9, v10);
  if (*a4 == a4[1])
  {
    sub_20BDDC0E4(__p, "None\n");
    if ((v25 & 0x80u) == 0)
      v21 = (char *)__p;
    else
      v21 = (char *)__p[0];
    if ((v25 & 0x80u) == 0)
      v22 = v25;
    else
      v22 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v21, v22);
  }
  else
  {
    sub_20BDDC0E4(__p, "[");
    if ((v25 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    if ((v25 & 0x80u) == 0)
      v12 = v25;
    else
      v12 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v11, v12);
    if ((char)v25 < 0)
      operator delete(__p[0]);
    v15 = a4[1];
    *(_QWORD *)&v23 = *a4;
    *((_QWORD *)&v23 + 1) = v15;
    while ((_QWORD)v23 != *((_QWORD *)&v23 + 1))
    {
      sub_20BFEF130((uint64_t *)&v23, v13, v14);
      sub_20BFEF228();
      if ((v25 & 0x80u) == 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s", (const char *)v16);
      if ((char)v25 < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v23;
      sub_20BFEF1AC(__p);
      if (__p[0] == __p[1])
      {
        sub_20BDDC0E4(__p, "");
        if ((v25 & 0x80u) == 0)
          v17 = (char *)__p;
        else
          v17 = (char *)__p[0];
        if ((v25 & 0x80u) == 0)
          v18 = v25;
        else
          v18 = (unint64_t)__p[1];
      }
      else
      {
        sub_20BDDC0E4(__p, ", ");
        if ((v25 & 0x80u) == 0)
          v17 = (char *)__p;
        else
          v17 = (char *)__p[0];
        if ((v25 & 0x80u) == 0)
          v18 = v25;
        else
          v18 = (unint64_t)__p[1];
      }
      sub_20BFECD88(a1, v17, v18);
      if ((char)v25 < 0)
        operator delete(__p[0]);
      sub_20BFEF1AC(&v23);
    }
    sub_20BDDC0E4(__p, "]\n");
    if ((v25 & 0x80u) == 0)
      v19 = (char *)__p;
    else
      v19 = (char *)__p[0];
    if ((v25 & 0x80u) == 0)
      v20 = v25;
    else
      v20 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v19, v20);
  }
  if ((char)v25 < 0)
    operator delete(__p[0]);
}

void sub_20BFEF100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFEF130(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<unsigned long long>>::operator*() ["
            "T = const std::vector<unsigned long long>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BFEF1A4()
{
  JUMPOUT(0x20BFEF154);
}

_QWORD *sub_20BFEF1AC(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<unsigned long long>>:"
            ":operator++() [T = const std::vector<unsigned long long>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_20BFEF228()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  sub_20BDDE5E0((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v1[1] = MEMORY[0x24BEDB848] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v3);
}

void sub_20BFEF2DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BFEF2F0(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  const std::string *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  void *__p[2];
  unsigned __int8 v25;

  v7 = *(unsigned __int8 *)(a5 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (const char *)a5;
  else
    v8 = *(const char **)a5;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a5 + 8);
  if (v7)
    v9 = " ";
  else
    v9 = "";
  if (*(char *)(a3 + 23) >= 0)
    v10 = (const char *)a3;
  else
    v10 = *(const char **)a3;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v8, v9, v10);
  if (*a4 == a4[1])
  {
    sub_20BDDC0E4(__p, "None\n");
    if ((v25 & 0x80u) == 0)
      v21 = (char *)__p;
    else
      v21 = (char *)__p[0];
    if ((v25 & 0x80u) == 0)
      v22 = v25;
    else
      v22 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v21, v22);
  }
  else
  {
    sub_20BDDC0E4(__p, "[");
    if ((v25 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    if ((v25 & 0x80u) == 0)
      v12 = v25;
    else
      v12 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v11, v12);
    if ((char)v25 < 0)
      operator delete(__p[0]);
    v15 = a4[1];
    *(_QWORD *)&v23 = *a4;
    *((_QWORD *)&v23 + 1) = v15;
    while ((_QWORD)v23 != *((_QWORD *)&v23 + 1))
    {
      v16 = (const std::string *)sub_20BF44378((uint64_t *)&v23, v13, v14);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a1, 0, v16);
      *(_OWORD *)__p = v23;
      sub_20BF4457C(__p);
      if (__p[0] == __p[1])
      {
        sub_20BDDC0E4(__p, "");
        if ((v25 & 0x80u) == 0)
          v17 = (char *)__p;
        else
          v17 = (char *)__p[0];
        if ((v25 & 0x80u) == 0)
          v18 = v25;
        else
          v18 = (unint64_t)__p[1];
      }
      else
      {
        sub_20BDDC0E4(__p, ", ");
        if ((v25 & 0x80u) == 0)
          v17 = (char *)__p;
        else
          v17 = (char *)__p[0];
        if ((v25 & 0x80u) == 0)
          v18 = v25;
        else
          v18 = (unint64_t)__p[1];
      }
      sub_20BFECD88(a1, v17, v18);
      if ((char)v25 < 0)
        operator delete(__p[0]);
      sub_20BF4457C(&v23);
    }
    sub_20BDDC0E4(__p, "]\n");
    if ((v25 & 0x80u) == 0)
      v19 = (char *)__p;
    else
      v19 = (char *)__p[0];
    if ((v25 & 0x80u) == 0)
      v20 = v25;
    else
      v20 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v19, v20);
  }
  if ((char)v25 < 0)
    operator delete(__p[0]);
}

void sub_20BFEF514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFEF540(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::TfToken *v16;
  const std::string *EmptyString;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  void *__p[2];
  unsigned __int8 v26;

  v7 = *(unsigned __int8 *)(a5 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (const char *)a5;
  else
    v8 = *(const char **)a5;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a5 + 8);
  if (v7)
    v9 = " ";
  else
    v9 = "";
  if (*(char *)(a3 + 23) >= 0)
    v10 = (const char *)a3;
  else
    v10 = *(const char **)a3;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v8, v9, v10);
  if (*a4 == a4[1])
  {
    sub_20BDDC0E4(__p, "None\n");
    if ((v26 & 0x80u) == 0)
      v22 = (char *)__p;
    else
      v22 = (char *)__p[0];
    if ((v26 & 0x80u) == 0)
      v23 = v26;
    else
      v23 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v22, v23);
  }
  else
  {
    sub_20BDDC0E4(__p, "[");
    if ((v26 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    if ((v26 & 0x80u) == 0)
      v12 = v26;
    else
      v12 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v11, v12);
    if ((char)v26 < 0)
      operator delete(__p[0]);
    v15 = a4[1];
    *(_QWORD *)&v24 = *a4;
    *((_QWORD *)&v24 + 1) = v15;
    while ((_QWORD)v24 != *((_QWORD *)&v24 + 1))
    {
      v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFEF7A8((uint64_t *)&v24, v13, v14);
      if ((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (const std::string *)((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a1, 0, EmptyString);
      *(_OWORD *)__p = v24;
      sub_20BFEF824(__p);
      if (__p[0] == __p[1])
      {
        sub_20BDDC0E4(__p, "");
        if ((v26 & 0x80u) == 0)
          v18 = (char *)__p;
        else
          v18 = (char *)__p[0];
        if ((v26 & 0x80u) == 0)
          v19 = v26;
        else
          v19 = (unint64_t)__p[1];
      }
      else
      {
        sub_20BDDC0E4(__p, ", ");
        if ((v26 & 0x80u) == 0)
          v18 = (char *)__p;
        else
          v18 = (char *)__p[0];
        if ((v26 & 0x80u) == 0)
          v19 = v26;
        else
          v19 = (unint64_t)__p[1];
      }
      sub_20BFECD88(a1, v18, v19);
      if ((char)v26 < 0)
        operator delete(__p[0]);
      sub_20BFEF824(&v24);
    }
    sub_20BDDC0E4(__p, "]\n");
    if ((v26 & 0x80u) == 0)
      v20 = (char *)__p;
    else
      v20 = (char *)__p[0];
    if ((v26 & 0x80u) == 0)
      v21 = v26;
    else
      v21 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v20, v21);
  }
  if ((char)v26 < 0)
    operator delete(__p[0]);
}

void sub_20BFEF77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFEF7A8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fToken>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::TfToken>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BFEF81C()
{
  JUMPOUT(0x20BFEF7CCLL);
}

_QWORD *sub_20BFEF824(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfToken>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::TfToken>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

void sub_20BFEF8A0(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  void *__p[2];
  unsigned __int8 v26;

  v7 = *(unsigned __int8 *)(a5 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (const char *)a5;
  else
    v8 = *(const char **)a5;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a5 + 8);
  if (v7)
    v9 = " ";
  else
    v9 = "";
  if (*(char *)(a3 + 23) >= 0)
    v10 = (const char *)a3;
  else
    v10 = *(const char **)a3;
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v8, v9, v10);
  if (*a4 == a4[1])
  {
    sub_20BDDC0E4(__p, "None\n");
    if ((v26 & 0x80u) == 0)
      v22 = (char *)__p;
    else
      v22 = (char *)__p[0];
    if ((v26 & 0x80u) == 0)
      v23 = v26;
    else
      v23 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v22, v23);
  }
  else
  {
    sub_20BDDC0E4(__p, "[");
    if ((v26 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    if ((v26 & 0x80u) == 0)
      v12 = v26;
    else
      v12 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v11, v12);
    if ((char)v26 < 0)
      operator delete(__p[0]);
    v15 = a4[1];
    *(_QWORD *)&v24 = *a4;
    *((_QWORD *)&v24 + 1) = v15;
    while ((_QWORD)v24 != *((_QWORD *)&v24 + 1))
    {
      v16 = sub_20BFEFB30((uint64_t *)&v24, v13, v14);
      sub_20BFEFC28(v16);
      if ((v26 & 0x80u) == 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s", (const char *)v17);
      if ((char)v26 < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v24;
      sub_20BFEFBAC(__p);
      if (__p[0] == __p[1])
      {
        sub_20BDDC0E4(__p, "");
        if ((v26 & 0x80u) == 0)
          v18 = (char *)__p;
        else
          v18 = (char *)__p[0];
        if ((v26 & 0x80u) == 0)
          v19 = v26;
        else
          v19 = (unint64_t)__p[1];
      }
      else
      {
        sub_20BDDC0E4(__p, ", ");
        if ((v26 & 0x80u) == 0)
          v18 = (char *)__p;
        else
          v18 = (char *)__p[0];
        if ((v26 & 0x80u) == 0)
          v19 = v26;
        else
          v19 = (unint64_t)__p[1];
      }
      sub_20BFECD88(a1, v18, v19);
      if ((char)v26 < 0)
        operator delete(__p[0]);
      sub_20BFEFBAC(&v24);
    }
    sub_20BDDC0E4(__p, "]\n");
    if ((v26 & 0x80u) == 0)
      v20 = (char *)__p;
    else
      v20 = (char *)__p[0];
    if ((v26 & 0x80u) == 0)
      v21 = v26;
    else
      v21 = (unint64_t)__p[1];
    sub_20BFECD88(a1, v20, v21);
  }
  if ((char)v26 < 0)
    operator delete(__p[0]);
}

void sub_20BFEFB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFEFB30(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfUnregisteredValue>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredV"
            "alue>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BFEFBA4()
{
  JUMPOUT(0x20BFEFB54);
}

_QWORD *sub_20BFEFBAC(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfUnregisteredValue>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfUnregisteredValue>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

uint64_t sub_20BFEFC28(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20BFEFCDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFEFCF0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAC1850 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524DD8);
}

void sub_20BFEFD68(pxrInternal__aapl__pxrReserved__::SdfPathExpression *a1@<X0>, std::string *a2@<X8>)
{
  std::string __p;

  pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText((uint64_t *)&__p, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BFEFDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFEFDCC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAC1888 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C524DE8);
}

double pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Sdf_LayerRegistry(pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_Layers::Update(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  void **v10;
  void **p_s1;
  const char *v12;
  char *v13;
  void *v14;
  unint64_t v15;
  char v16;
  const char *v17;
  char *v18;
  void **v19;
  const char *v20;
  char *v21;
  void **v22;
  uint64_t v23;
  size_t v24;
  unint64_t v25;
  void **v26;
  void **v27;
  const char *v28;
  char *v29;
  void *v30;
  unint64_t v31;
  const char *v32;
  char *v33;
  void **v34;
  uint64_t v35;
  size_t v36;
  unint64_t v37;
  void **v38;
  void **v39;
  _QWORD *v40;
  const char *v41;
  char *v42;
  void *v43;
  unint64_t v44;
  const char *v45;
  char *v46;
  void **v47;
  void *v48[2];
  unsigned __int8 v49;
  void *v50[2];
  unsigned __int8 v51;
  void *__p[2];
  unsigned __int8 v53;
  void *v54;
  size_t v55;
  unsigned __int8 v56;
  void *v57;
  size_t v58;
  unsigned __int8 v59;
  void *__s1;
  size_t __n;
  unsigned __int8 v62;

  sub_20BFF0340(a3, (uint64_t)&v54);
  sub_20BFF0340(a4, (uint64_t)v48);
  v7 = v62;
  if ((v62 & 0x80u) == 0)
    v8 = v62;
  else
    v8 = __n;
  v9 = v53;
  if ((v53 & 0x80u) != 0)
    v9 = (unint64_t)__p[1];
  if (v8 == v9)
  {
    if ((v53 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if ((v62 & 0x80) != 0)
    {
      if (!memcmp(__s1, v10, __n))
        goto LABEL_37;
    }
    else
    {
      if (!v62)
        goto LABEL_37;
      p_s1 = &__s1;
      while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v10)
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        v10 = (void **)((char *)v10 + 1);
        if (!--v7)
          goto LABEL_37;
      }
    }
  }
  if (sub_20BFF0550((uint64_t)&__s1, (uint64_t)a2, a1) && sub_20BFCE180(3))
  {
    if ((v62 & 0x80u) == 0)
      v14 = &__s1;
    else
      v14 = __s1;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Removed realPath '%s' for update.\n", v12, v13, v14);
  }
  v15 = v53;
  if ((v53 & 0x80u) != 0)
    v15 = (unint64_t)__p[1];
  if (v15)
  {
    sub_20BFF200C((uint64_t)a1, (unsigned __int8 *)__p, (__int128 *)__p, a2);
    if ((v16 & 1) != 0)
    {
      if (sub_20BFCE180(3))
      {
        if ((v53 & 0x80u) == 0)
          v22 = __p;
        else
          v22 = (void **)__p[0];
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Updated realPath '%s'.\n", v20, v21, v22);
      }
    }
    else
    {
      MEMORY[0x212B929D0](v50, "");
      MEMORY[0x212B929D0](v48, "");
      if (sub_20BFCE180(3))
      {
        if ((v53 & 0x80u) == 0)
          v19 = __p;
        else
          v19 = (void **)__p[0];
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Updated realPath '%s' would create collision. Dangling layer created instead.\n", v17, v18, v19);
      }
    }
  }
LABEL_37:
  v23 = v59;
  if ((v59 & 0x80u) == 0)
    v24 = v59;
  else
    v24 = v58;
  v25 = v51;
  if ((v51 & 0x80u) != 0)
    v25 = (unint64_t)v50[1];
  if (v24 == v25)
  {
    if ((v51 & 0x80u) == 0)
      v26 = v50;
    else
      v26 = (void **)v50[0];
    if ((v59 & 0x80) != 0)
    {
      if (!memcmp(v57, v26, v58))
        goto LABEL_67;
    }
    else
    {
      if (!v59)
        goto LABEL_67;
      v27 = &v57;
      while (*(unsigned __int8 *)v27 == *(unsigned __int8 *)v26)
      {
        v27 = (void **)((char *)v27 + 1);
        v26 = (void **)((char *)v26 + 1);
        if (!--v23)
          goto LABEL_67;
      }
    }
  }
  if (sub_20BFF05E4((unsigned __int8 *)&v57, (uint64_t)a2, a1 + 10) && sub_20BFCE180(3))
  {
    if ((v59 & 0x80u) == 0)
      v30 = &v57;
    else
      v30 = v57;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Removed repositoryPath '%s' for update.\n", v28, v29, v30);
  }
  v31 = v51;
  if ((v51 & 0x80u) != 0)
    v31 = (unint64_t)v50[1];
  if (v31)
  {
    sub_20BFF23BC(a1 + 10, (__int128 *)v50, a2);
    if (sub_20BFCE180(3))
    {
      if ((v51 & 0x80u) == 0)
        v34 = v50;
      else
        v34 = (void **)v50[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Updated repositoryPath '%s'.\n", v32, v33, v34);
    }
  }
LABEL_67:
  v35 = v56;
  if ((v56 & 0x80u) == 0)
    v36 = v56;
  else
    v36 = v55;
  v37 = v49;
  if ((v49 & 0x80u) != 0)
    v37 = (unint64_t)v48[1];
  if (v36 == v37)
  {
    if ((v49 & 0x80u) == 0)
      v38 = v48;
    else
      v38 = (void **)v48[0];
    if ((v56 & 0x80) != 0)
    {
      if (!memcmp(v54, v38, v55))
        goto LABEL_95;
    }
    else
    {
      if (!v56)
        goto LABEL_95;
      v39 = &v54;
      while (*(unsigned __int8 *)v39 == *(unsigned __int8 *)v38)
      {
        v39 = (void **)((char *)v39 + 1);
        v38 = (void **)((char *)v38 + 1);
        if (!--v35)
          goto LABEL_95;
      }
    }
  }
  v40 = a1 + 5;
  if (sub_20BFF05E4((unsigned __int8 *)&v54, (uint64_t)a2, v40) && sub_20BFCE180(3))
  {
    v43 = &v54;
    if ((v56 & 0x80u) != 0)
      v43 = v54;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Removed identifier '%s' for update.\n", v41, v42, v43);
  }
  v44 = v49;
  if ((v49 & 0x80u) != 0)
    v44 = (unint64_t)v48[1];
  if (v44)
  {
    sub_20BFF23BC(v40, (__int128 *)v48, a2);
    if (sub_20BFCE180(3))
    {
      v47 = v48;
      if ((v49 & 0x80u) != 0)
        v47 = (void **)v48[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Updated identifier '%s'.\n", v45, v46, v47);
    }
  }
LABEL_95:
  if ((char)v53 < 0)
    operator delete(__p[0]);
  if ((char)v51 < 0)
    operator delete(v50[0]);
  if ((char)v49 < 0)
    operator delete(v48[0]);
  if ((char)v62 < 0)
    operator delete(__s1);
  if ((char)v59 < 0)
    operator delete(v57);
  if ((char)v56 < 0)
    operator delete(v54);
}

void sub_20BFF02FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20BE78668((uint64_t)va);
  sub_20BE78668((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20BFF0340(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  char v12;
  void *__p[2];
  uint64_t v14;
  void *v15[2];
  uint64_t v16;

  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  if ((pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier((const std::string *)a1, (uint64_t)v15, (uint64_t)__p) & 1) == 0)
  {
    v8 = "sdf/layerRegistry.cpp";
    v9 = "_AssetInfoToAliases";
    v10 = 69;
    v11 = "Sdf_RegistryAliases pxrInternal__aapl__pxrReserved__::_AssetInfoToAliases(const Sdf_AssetInfo &)";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v8, "Sdf_SplitIdentifier( assetInfo.identifier, &identifierSansArguments, &arguments)", 0);
  }
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    if ((v5 & 0x80) == 0)
    {
LABEL_7:
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
      goto LABEL_10;
    }
  }
  else
  {
    v8 = "sdf/layerRegistry.cpp";
    v9 = "_AssetInfoToAliases";
    v10 = 72;
    v11 = "Sdf_RegistryAliases pxrInternal__aapl__pxrReserved__::_AssetInfoToAliases(const Sdf_AssetInfo &)";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v8, "!assetInfo.identifier.empty()", 0);
    if ((*(_BYTE *)(a1 + 23) & 0x80) == 0)
      goto LABEL_7;
  }
  sub_20BDDBFAC((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
LABEL_10:
  v6 = *(unsigned __int8 *)(a1 + 143);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 128);
  if (v6)
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)(a1 + 120), (const void **)__p, a2 + 24);
  else
    sub_20BDDC0E4((_QWORD *)(a2 + 24), "");
  v7 = *(unsigned __int8 *)(a1 + 47);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)(a1 + 24), (const void **)__p, a2 + 48);
  else
    sub_20BDDC0E4((_QWORD *)(a2 + 48), "");
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20BFF04EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 - 33) < 0)
    operator delete(*(void **)(v20 - 56));
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_20BFF0550(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned __int8 *result;
  _QWORD *v7;
  _BYTE v8[24];

  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 0;
  result = sub_20BEC301C(a3, (unsigned __int8 *)a1);
  if (result)
  {
    v7 = result;
    result = (unsigned __int8 *)sub_20BEB560C((uint64_t)(result + 40), a2);
    if ((_DWORD)result)
    {
      sub_20BEB587C(a3, v7, (uint64_t)v8);
      sub_20BF472A4((uint64_t)v8, 0);
      return (unsigned __int8 *)1;
    }
  }
  return result;
}

uint64_t sub_20BFF05E4(unsigned __int8 *a1, uint64_t a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _BYTE v10[24];

  v5 = sub_20BFF1FA4(a3, a1);
  if (v5 == v6)
    return 0;
  v7 = v5;
  v8 = v6;
  while (!sub_20BEB560C((uint64_t)(v7 + 40), a2))
  {
    v7 = *(unsigned __int8 **)v7;
    if (v7 == v8)
      return 0;
  }
  if (v7 == v8)
    return 0;
  sub_20BEB587C(a3, v7, (uint64_t)v10);
  sub_20BF472A4((uint64_t)v10, 0);
  return 1;
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_Layers::Insert(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 *v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  const char *v12;
  char *v13;
  void **v14;
  unint64_t v15;
  const char *v16;
  char *v17;
  void **v18;
  unint64_t v19;
  const char *v20;
  char *v21;
  void **v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD v25[4];
  char v26;
  void *v27[2];
  unsigned __int8 v28;
  void *v29[2];
  unsigned __int8 v30;
  void *__p[2];
  unsigned __int8 v32;

  sub_20BFF0340(a3, (uint64_t)v27);
  v7 = sub_20BEC301C(a1, (unsigned __int8 *)__p);
  if (v7)
  {
    v8 = 0;
    v9 = *((_QWORD *)v7 + 6);
    *(_QWORD *)a4 = *((_QWORD *)v7 + 5);
    *(_QWORD *)(a4 + 8) = v9;
    if (!v9)
      goto LABEL_32;
    goto LABEL_30;
  }
  v10 = v32;
  if ((v32 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (v10)
  {
    sub_20BFF200C((uint64_t)a1, (unsigned __int8 *)__p, (__int128 *)__p, a2);
    if ((v11 & 1) == 0)
    {
      v25[0] = "sdf/layerRegistry.cpp";
      v25[1] = "Insert";
      v25[2] = 195;
      v25[3] = "std::pair<SdfLayerHandle, BOOL> pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_Layers::Insert(cons"
               "t SdfLayerHandle &, const Sdf_AssetInfo &)";
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v25, "_byRealPath.emplace(aliases.realPath, layer).second", 0);
    }
    if (sub_20BFCE180(3))
    {
      if ((v32 & 0x80u) == 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Inserted realPath '%s' into registry\n", v12, v13, v14);
    }
  }
  v15 = v30;
  if ((v30 & 0x80u) != 0)
    v15 = (unint64_t)v29[1];
  if (v15)
  {
    sub_20BFF23BC(a1 + 10, (__int128 *)v29, a2);
    if (sub_20BFCE180(3))
    {
      if ((v30 & 0x80u) == 0)
        v18 = v29;
      else
        v18 = (void **)v29[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Inserted repositoryPath '%s' into registry\n", v16, v17, v18);
    }
  }
  v19 = v28;
  if ((v28 & 0x80u) != 0)
    v19 = (unint64_t)v27[1];
  if (v19)
  {
    sub_20BFF23BC(a1 + 5, (__int128 *)v27, a2);
    if (sub_20BFCE180(3))
    {
      v22 = v27;
      if ((v28 & 0x80u) != 0)
        v22 = (void **)v27[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Inserted identifier '%s' into registry\n", v20, v21, v22);
    }
  }
  v9 = a2[1];
  *(_QWORD *)a4 = *a2;
  *(_QWORD *)(a4 + 8) = v9;
  v8 = 1;
  if (v9)
  {
LABEL_30:
    v23 = (unsigned int *)(v9 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
LABEL_32:
  *(_BYTE *)(a4 + 16) = v8;
  if ((char)v32 < 0)
    operator delete(__p[0]);
  if ((char)v30 < 0)
    operator delete(v29[0]);
  if ((char)v28 < 0)
    operator delete(v27[0]);
}

void sub_20BFF0894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20BE78668((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_Layers::Erase(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;
  char *v7;
  void **v8;
  const char *v9;
  char *v10;
  void **v11;
  const char *v12;
  char *v13;
  void **v14;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  void *__p[2];
  char v21;

  sub_20BFF0340(a3, (uint64_t)v16);
  v5 = (uint64_t)sub_20BFF0550((uint64_t)__p, a2, a1);
  if ((_DWORD)v5 && sub_20BFCE180(3))
  {
    if (v21 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Erased realPath '%s' from registry.\n", v6, v7, v8);
  }
  if (sub_20BFF05E4((unsigned __int8 *)v18, a2, a1 + 10))
  {
    if (sub_20BFCE180(3))
    {
      if (v19 >= 0)
        v11 = v18;
      else
        v11 = (void **)v18[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Erased repositoryPath '%s' from registry.\n", v9, v10, v11);
    }
    v5 = 1;
  }
  if (sub_20BFF05E4((unsigned __int8 *)v16, a2, a1 + 5))
  {
    if (sub_20BFCE180(3))
    {
      if (v19 >= 0)
        v14 = v18;
      else
        v14 = (void **)v18[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Erased identifier '%s' from registry.\n", v12, v13, v14);
    }
    v5 = 1;
  }
  if (v21 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  return v5;
}

void sub_20BFF0A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE78668((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Insert(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  const char *v8;
  char *v9;
  void **v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  uint64_t *FileFormat;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v13;
  unint64_t v14;
  const char *v15;
  void **v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v19;
  unint64_t v20;
  const char *v21;
  void **v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  void *__p[2];
  char v28;
  void *v29[2];
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char v38;

  v6 = sub_20BFD2F78(a2);
  if (v7 & 1 | (unint64_t)v6)
  {
    if (sub_20BFCE180(3))
    {
      sub_20BFF0CEC(a2, &v34);
      v10 = v36 >= 0 ? (void **)&v34 : (void **)v34;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_LayerRegistry::Insert(%s)\n", v8, v9, v10);
      if (SHIBYTE(v36) < 0)
        operator delete(v34);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_Layers::Insert(a1, a2, a3, (uint64_t)&v31);
    if (!v33)
    {
      v34 = "sdf/layerRegistry.cpp";
      v35 = "Insert";
      v36 = 273;
      v37 = "void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Insert(const SdfLayerHandle &, const Sdf_AssetInfo &)";
      v38 = 0;
      v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
      FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v11);
      v13 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4(FileFormat);
      v14 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v13) & 0xFFFFFFFFFFFFFFF8;
      if (v14)
      {
        v15 = (const char *)(v14 + 16);
        if (*(char *)(v14 + 39) < 0)
          v15 = *(const char **)v15;
      }
      else
      {
        v15 = "";
      }
      sub_20BFF0CEC(a2, v29);
      if (v30 >= 0)
        v16 = v29;
      else
        v16 = (void **)v29[0];
      v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v31);
      v18 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v17);
      v19 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4(v18);
      v20 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v19) & 0xFFFFFFFFFFFFFFF8;
      if (v20)
      {
        v21 = (const char *)(v20 + 16);
        if (*(char *)(v20 + 39) < 0)
          v21 = *(const char **)v21;
      }
      else
      {
        v21 = "";
      }
      sub_20BFF0CEC(&v31, __p);
      if (v28 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot insert duplicate registry entry for %s layer %s over existing entry for %s layer %s", v15, (const char *)v16, v21, (const char *)v22);
      if (v28 < 0)
        operator delete(__p[0]);
      if (v30 < 0)
        operator delete(v29[0]);
    }
    v23 = v32;
    if (v32)
    {
      v24 = (unsigned int *)(v32 + 8);
      do
      {
        v25 = __ldxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    }
  }
  else
  {
    v34 = "sdf/layerRegistry.cpp";
    v35 = "Insert";
    v36 = 254;
    v37 = "void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Insert(const SdfLayerHandle &, const Sdf_AssetInfo &)";
    v38 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Expired layer handle");
  }
}

void sub_20BFF0C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,unsigned int *a26)
{
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a26)
  {
    v27 = a26 + 2;
    do
    {
      v28 = __ldxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      (*(void (**)(unsigned int *))(*(_QWORD *)a26 + 8))(a26);
  }
  _Unwind_Resume(exception_object);
}

void sub_20BFF0CEC(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v4)(uint64_t *);
  char v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;
  uint64_t RealPath;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string v18;
  std::string v19;
  std::string v20;

  v4 = sub_20BFD2F78(a1);
  if (v5 & 1 | (unint64_t)v4)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v6);
    std::operator+<char>();
    v7 = std::string::append(&v18, "', '");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v9);
    v11 = *(char *)(RealPath + 23);
    if (v11 >= 0)
      v12 = (const std::string::value_type *)RealPath;
    else
      v12 = *(const std::string::value_type **)RealPath;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(RealPath + 23);
    else
      v13 = *(_QWORD *)(RealPath + 8);
    v14 = std::string::append(&v19, v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v20, "')");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_20BDDC0E4(a2, "None");
  }
}

void sub_20BFF0E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Update(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(uint64_t *);
  char v9;
  const char *v10;
  char *v11;
  void **v12;
  void *__p[2];
  uint64_t v14;
  const char *v15;
  char v16;

  v8 = sub_20BFD2F78(a2);
  if (v9 & 1 | (unint64_t)v8)
  {
    if (sub_20BFCE180(3))
    {
      sub_20BFF0CEC(a2, __p);
      if (v14 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_LayerRegistry::Update(%s)\n", v10, v11, v12);
      if (SHIBYTE(v14) < 0)
        operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_Layers::Update(a1, a2, a3, a4);
  }
  else
  {
    __p[0] = "sdf/layerRegistry.cpp";
    __p[1] = "Update";
    v14 = 286;
    v15 = "void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Update(const SdfLayerHandle &, const Sdf_AssetInfo &"
          ", const Sdf_AssetInfo &)";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Expired layer handle");
  }
}

void sub_20BFF0F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Erase(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  const char *v5;
  char *v6;
  void **v7;
  const char *v8;
  void *__p[2];
  char v10;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_Layers::Erase(a1, (uint64_t)a2, a3);
  if (sub_20BFCE180(3))
  {
    sub_20BFF0CEC(a2, __p);
    if (v10 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    v8 = "Failed";
    if (v4)
      v8 = "Success";
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_LayerRegistry::Erase(%s) => %s\n", v5, v6, v7, v8);
    if (v10 < 0)
      operator delete(__p[0]);
  }
}

void sub_20BFF1018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Find(_QWORD *a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, uint64_t *a4@<X8>)
{
  _BOOL8 IsAnonLayerIdentifier;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *Resolver;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int IsRepositoryPath;
  uint64_t (*v27)(uint64_t *);
  char v28;
  int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t (*v38)(uint64_t *);
  char v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  const char *v50;
  char *v51;
  uint64_t v52;
  void **v53;
  __int128 v54;
  void *__p[2];
  uint64_t v56;
  void *v57[2];
  uint64_t v58;

  *a4 = 0;
  a4[1] = 0;
  IsAnonLayerIdentifier = pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(a2);
  if (IsAnonLayerIdentifier)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_FindByIdentifier((uint64_t)a1, (unsigned __int8 *)a2, v57);
    v9 = (unsigned int *)a4[1];
    *(_OWORD *)a4 = *(_OWORD *)v57;
    v57[1] = 0;
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
      v13 = v57[1];
      v57[0] = 0;
      if (v57[1])
      {
        v14 = (unsigned int *)((char *)v57[1] + 8);
        do
        {
          v15 = __ldxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
      }
    }
  }
  else
  {
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)IsAnonLayerIdentifier);
    v57[0] = 0;
    v57[1] = 0;
    v58 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v56 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier((const std::string *)a2, (uint64_t)v57, (uint64_t)__p);
    if ((pxrInternal__aapl__pxrReserved__::ArResolver::IsContextDependentPath((uint64_t)Resolver) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_FindByIdentifier((uint64_t)a1, (unsigned __int8 *)a2, &v54);
      v18 = (unsigned int *)a4[1];
      *(_OWORD *)a4 = v54;
      *((_QWORD *)&v54 + 1) = 0;
      if (v18)
      {
        v19 = v18 + 2;
        do
        {
          v20 = __ldxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
        v22 = *((_QWORD *)&v54 + 1);
        *(_QWORD *)&v54 = 0;
        if (*((_QWORD *)&v54 + 1))
        {
          v23 = (unsigned int *)(*((_QWORD *)&v54 + 1) + 8);
          do
          {
            v24 = __ldxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        }
      }
    }
    IsRepositoryPath = pxrInternal__aapl__pxrReserved__::ArResolver::IsRepositoryPath((uint64_t)Resolver);
    v27 = sub_20BFD2F78(a4);
    if (v28 & 1 | (unint64_t)v27)
      v29 = 0;
    else
      v29 = IsRepositoryPath;
    if (v29 == 1)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_FindByRepositoryPath((uint64_t)a1, (unsigned __int8 *)a2, &v54);
      v30 = (unsigned int *)a4[1];
      *(_OWORD *)a4 = v54;
      *((_QWORD *)&v54 + 1) = 0;
      if (v30)
      {
        v31 = v30 + 2;
        do
        {
          v32 = __ldxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
          (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
        v34 = *((_QWORD *)&v54 + 1);
        *(_QWORD *)&v54 = 0;
        if (*((_QWORD *)&v54 + 1))
        {
          v35 = (unsigned int *)(*((_QWORD *)&v54 + 1) + 8);
          do
          {
            v36 = __ldxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        }
      }
    }
    v38 = sub_20BFD2F78(a4);
    if (!(v39 & 1 | (unint64_t)v38))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_FindByRealPath(a1, (const std::string *)a2, a3, &v54);
      v40 = (unsigned int *)a4[1];
      *(_OWORD *)a4 = v54;
      *((_QWORD *)&v54 + 1) = 0;
      if (v40)
      {
        v41 = v40 + 2;
        do
        {
          v42 = __ldxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
          (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 8))(v40);
        v44 = *((_QWORD *)&v54 + 1);
        *(_QWORD *)&v54 = 0;
        if (*((_QWORD *)&v54 + 1))
        {
          v45 = (unsigned int *)(*((_QWORD *)&v54 + 1) + 8);
          do
          {
            v46 = __ldxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (!v47)
            (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
        }
      }
    }
    if (SHIBYTE(v56) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v58) < 0)
      operator delete(v57[0]);
  }
  if (sub_20BFCE180(3))
  {
    v48 = *(char *)(a2 + 23);
    v49 = *(_QWORD *)a2;
    sub_20BFF0CEC(a4, v57);
    if (v48 >= 0)
      v52 = a2;
    else
      v52 = v49;
    if (v58 >= 0)
      v53 = v57;
    else
      v53 = (void **)v57[0];
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_LayerRegistry::Find('%s') => %s\n", v50, v51, v52, v53, (_QWORD)v54);
    if (SHIBYTE(v58) < 0)
      operator delete(v57[0]);
  }
}

void sub_20BFF1364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  v27 = *(unsigned int **)(v25 + 8);
  if (v27)
  {
    v28 = v27 + 2;
    do
    {
      v29 = __ldxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
      (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_FindByIdentifier(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  uint64_t (*v8)(uint64_t *);
  const char *v9;
  char *v10;
  uint64_t *v11;
  const char *v12;

  *a3 = 0;
  a3[1] = 0;
  v5 = sub_20BEB4DB8((_QWORD *)(a1 + 40), a2);
  if (v5)
    sub_20BF2D298((uint64_t)a3, (uint64_t)(v5 + 40));
  if (sub_20BFCE180(3))
  {
    v6 = (char)a2[23];
    v7 = *(uint64_t **)a2;
    v8 = sub_20BFD2F78(a3);
    if (v6 >= 0)
      v11 = (uint64_t *)a2;
    else
      v11 = v7;
    if (v9 & 1 | (unint64_t)v8)
      v12 = "Found";
    else
      v12 = "Not Found";
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_LayerRegistry::_FindByIdentifier('%s') => %s\n", v9, v10, v11, v12);
  }
}

void sub_20BFF1488(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_FindByRepositoryPath(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v6;
  int v7;
  uint64_t *v8;
  uint64_t (*v9)(uint64_t *);
  const char *v10;
  char *v11;
  uint64_t *v12;
  const char *v13;

  *a3 = 0;
  a3[1] = 0;
  v4 = a2[23];
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v4)
  {
    v6 = sub_20BEB4DB8((_QWORD *)(a1 + 80), a2);
    if (v6)
      sub_20BF2D298((uint64_t)a3, (uint64_t)(v6 + 40));
    if (sub_20BFCE180(3))
    {
      v7 = (char)a2[23];
      v8 = *(uint64_t **)a2;
      v9 = sub_20BFD2F78(a3);
      if (v7 >= 0)
        v12 = (uint64_t *)a2;
      else
        v12 = v8;
      if (v10 & 1 | (unint64_t)v9)
        v13 = "Found";
      else
        v13 = "Not Found";
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_LayerRegistry::_FindByRepositoryPath('%s') => %s\n", v10, v11, v12, v13);
    }
  }
}

void sub_20BFF157C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_FindByRealPath(_QWORD *a1@<X0>, const std::string *a2@<X1>, void **a3@<X2>, _QWORD *a4@<X8>)
{
  std::string::size_type size;
  void *v9;
  unint64_t *Instance;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::string::size_type v15;
  __int128 *v16;
  __int128 v17;
  int v18;
  const std::string *v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  std::string *v23;
  unint64_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  int v28;
  std::string::size_type v29;
  uint64_t (*v30)(uint64_t *);
  const char *v31;
  char *v32;
  std::string *v33;
  const char *v34;
  std::string v35;
  std::string __dst;
  void *__p[2];
  char v38;
  unint64_t v39;
  void *v40[2];
  uint64_t v41;
  std::string v42;
  char v43;

  *a4 = 0;
  a4[1] = 0;
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  if (size)
  {
    memset(&v42, 0, sizeof(v42));
    v40[0] = 0;
    v40[1] = 0;
    v41 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(a2, (uint64_t)&v42, (uint64_t)v40) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v39);
      if (*((char *)a3 + 23) >= 0)
        v9 = (void *)*((unsigned __int8 *)a3 + 23);
      else
        v9 = a3[1];
      if (!v9)
      {
        a3 = __p;
        pxrInternal__aapl__pxrReserved__::Sdf_ComputeFilePath((pxrInternal__aapl__pxrReserved__ *)&v42, (uint64_t)__p);
      }
      std::string::operator=(&v42, (const std::string *)a3);
      if (!v9 && v38 < 0)
        operator delete(__p[0]);
      Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!Instance)
        Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v11 = v39;
      v12 = atomic_load(Instance + 18);
      if (v11 < v12
        && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v39, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
      {
        memset(&__dst, 0, sizeof(__dst));
        v13 = sub_20BEC5244(&v39, 0);
        v14 = sub_20BEDAF68();
        if (v13 != (_QWORD *)v14)
        {
          v15 = __dst.__r_.__value_.__l.__size_;
          do
          {
            v16 = (__int128 *)(v13 + 7);
            if (v15 >= __dst.__r_.__value_.__r.__words[2])
            {
              v15 = sub_20BE4EE50((uint64_t *)&__dst, v16);
            }
            else
            {
              if (*((char *)v13 + 79) < 0)
              {
                sub_20BDDBFAC((_BYTE *)v15, (void *)v13[7], v13[8]);
              }
              else
              {
                v17 = *v16;
                *(_QWORD *)(v15 + 16) = v13[9];
                *(_OWORD *)v15 = v17;
              }
              v15 += 24;
            }
            __dst.__r_.__value_.__l.__size_ = v15;
            v13 = (_QWORD *)v13[1];
          }
          while (v13 != (_QWORD *)v14);
        }
        if (sub_20BFCE180(3))
        {
          v18 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
          v19 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", (std::string **)&__dst, &v35);
          v22 = (uint64_t)(v18 >= 0 ? a2 : v19);
          v23 = (v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v35
              : (std::string *)v35.__r_.__value_.__r.__words[0];
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_LayerRegistry::_FindByRealPath('%s'): Failed to compute real path: %s\n", v20, v21, v22, v23);
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v35.__r_.__value_.__l.__data_);
        }
        v24 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v24)
          v24 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        v25 = sub_20BEC5244(&v39, 0);
        v43 = 0;
        v26 = (_QWORD *)sub_20BEB5B80(v24 + 19, &v43);
        if (v26 != v25)
          pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v24, v25, v26);
        v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
        sub_20BDE5038((void ***)&v35);
      }
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v39);
      pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)&v42.__r_.__value_.__l.__data_, (const void **)v40, (uint64_t)&__dst);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      v42 = __dst;
      v27 = sub_20BEB4DB8(a1, (unsigned __int8 *)&v42);
      if (v27)
        sub_20BF2D298((uint64_t)a4, (uint64_t)(v27 + 40));
      if (sub_20BFCE180(3))
      {
        v28 = SHIBYTE(v42.__r_.__value_.__r.__words[2]);
        v29 = v42.__r_.__value_.__r.__words[0];
        v30 = sub_20BFD2F78(a4);
        v33 = &v42;
        if (v28 < 0)
          v33 = (std::string *)v29;
        if (v31 & 1 | (unint64_t)v30)
          v34 = "Found";
        else
          v34 = "Not Found";
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_LayerRegistry::_FindByRealPath('%s') => %s\n", v31, v32, v33, v34);
      }
    }
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
  }
}

void sub_20BFF18F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;

  if (a17 < 0)
    operator delete(__p);
  __p = &a18;
  sub_20BDE5038((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a27);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v34 - 73) < 0)
    operator delete(*(void **)(v34 - 96));
  v36 = *(unsigned int **)(v33 + 8);
  if (v36)
  {
    v37 = v36 + 2;
    do
    {
      v38 = __ldxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
      (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
  }
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::GetLayers@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *i;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t (*v7)(uint64_t *);
  const char *v8;
  char *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  _QWORD v14[4];
  char v15;
  uint64_t v16;
  _QWORD *v17;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  for (i = (_QWORD *)this[7]; i; i = (_QWORD *)*i)
  {
    v4 = i[6];
    v16 = i[5];
    v17 = (_QWORD *)v4;
    if (v4)
    {
      v5 = (unsigned int *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = sub_20BFD2F78(&v16);
    if (v8 & 1 | (unint64_t)v7
      || (v14[0] = "sdf/layerRegistry.cpp",
          v14[1] = "GetLayers",
          v14[2] = 467,
          v14[3] = "SdfLayerHandleSet pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::GetLayers() const",
          v15 = 0,
          v13 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Found expired layer in registry", v8, v9), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v14, "layer", v13) & 1) != 0))
    {
      sub_20BFF2A18((uint64_t **)a2, (uint64_t)&v16, &v16);
    }
    this = v17;
    if (v17)
    {
      v10 = (unsigned int *)(v17 + 1);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
  }
  return this;
}

void sub_20BFF1AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int *a16)
{
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  if (a16)
  {
    v18 = a16 + 2;
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(unsigned int *))(*(_QWORD *)a16 + 8))(a16);
  }
  sub_20BFF29AC(v16, *(_QWORD **)(v16 + 8));
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *this)
{
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t (*v9)(uint64_t *);
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  uint64_t *FileFormat;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v17;
  unint64_t v18;
  const char *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  uint64_t Identifier;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v23;
  uint64_t RepositoryPath;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v26;
  uint64_t RealPath;
  uint64_t v28;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v29;
  uint64_t Version;
  uint64_t v31;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v32;
  uint64_t AssetInfo;
  void *v34;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v35;
  const char *v36;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v37;
  _BOOL4 IsAnonymous;
  const char *v39;
  char *v40;
  const char *v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  void *v49;
  char v50;
  void *__p[2];
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD **v55;
  _QWORD **v56;
  _QWORD **v57;
  _QWORD *v58;

  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::GetLayers(this, (uint64_t)&v57);
  v55 = v57;
  v56 = &v58;
  while (v55 != v56)
  {
    v5 = (uint64_t *)sub_20BFF1E84(&v55, v3, v4);
    v6 = v5[1];
    v53 = *v5;
    v54 = v6;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = sub_20BFD2F78(&v53);
    if (v10 & 1 | (unint64_t)v9)
    {
      if (v54)
      {
        v11 = sub_20BEB47BC(&v54);
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = *(_DWORD *)(sub_20BFCF650(&v53) + 8);
      if (v13 >= 0)
        v14 = v13;
      else
        v14 = -v13;
      v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v53);
      FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v15);
      v17 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4(FileFormat);
      v18 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v17) & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v53);
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v20);
      if (*(char *)(Identifier + 23) >= 0)
        v22 = Identifier;
      else
        v22 = *(_QWORD *)Identifier;
      v23 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v53);
      RepositoryPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRepositoryPath(v23);
      if (*(char *)(RepositoryPath + 23) >= 0)
        v25 = RepositoryPath;
      else
        v25 = *(_QWORD *)RepositoryPath;
      v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v53);
      RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v26);
      if (*(char *)(RealPath + 23) >= 0)
        v28 = RealPath;
      else
        v28 = *(_QWORD *)RealPath;
      v29 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v53);
      Version = pxrInternal__aapl__pxrReserved__::SdfLayer::GetVersion(v29);
      if (*(char *)(Version + 23) >= 0)
        v31 = Version;
      else
        v31 = *(_QWORD *)Version;
      v32 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v53);
      AssetInfo = pxrInternal__aapl__pxrReserved__::SdfLayer::GetAssetInfo(v32);
      sub_20BF834B0(AssetInfo);
      if (v50 >= 0)
        v34 = &v49;
      else
        v34 = v49;
      v35 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v53);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(v35))
        v36 = "True";
      else
        v36 = "False";
      v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v53);
      IsAnonymous = pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymous(v37);
      v41 = "False";
      if (IsAnonymous)
        v41 = "True";
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%p[ref=%zu]:\n    format           = %s\n    identifier       = '%s'\n    repositoryPath   = '%s'\n    realPath         = '%s'\n    version          = '%s'\n    assetInfo        = \n'%s'\n    muted            = %s\n    anonymous        = %s\n\n", v39, v40, v12, v14, v19, v22, v25, v28,
        v31,
        v34,
        v36,
        v41);
      if ((v52 & 0x80u) == 0)
        v42 = __p;
      else
        v42 = (void **)__p[0];
      if ((v52 & 0x80u) == 0)
        v43 = v52;
      else
        v43 = (uint64_t)__p[1];
      sub_20BDDC1C8(a1, (uint64_t)v42, v43);
      if ((char)v52 < 0)
        operator delete(__p[0]);
      if (v50 < 0)
        operator delete(v49);
    }
    v44 = v54;
    if (v54)
    {
      v45 = (unsigned int *)(v54 + 8);
      do
      {
        v46 = __ldxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    }
    sub_20BFF1F00(&v55);
  }
  sub_20BFF29AC((uint64_t)&v57, v58);
  return a1;
}

void sub_20BFF1DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,unsigned int *a34)
{
  uint64_t v34;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;

  if (a32 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a34)
  {
    v36 = a34 + 2;
    do
    {
      v37 = __ldxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
      (*(void (**)(unsigned int *))(*(_QWORD *)a34 + 8))(a34);
  }
  sub_20BFF29AC(v34 - 112, *(_QWORD **)(v34 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_20BFF1E84(_QWORD *a1, uint64_t a2, char *a3)
{
  _QWORD v4[4];
  char v5;
  int v6;

  if (*a1 == a1[1])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator*";
    v4[2] = 271;
    v4[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::set<pxrInternal__aapl__pxrReserved__::TfWeakPtr<"
            "pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator*() [T = std::set<pxrInternal__aapl__pxrReserved__::T"
            "fWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return *a1 + 32;
}

void sub_20BFF1EF8()
{
  JUMPOUT(0x20BFF1EA0);
}

_QWORD *sub_20BFF1F00(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::set<pxrInternal__aapl__pxrReserved"
            "__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator++() [T = std::set<pxrInternal__aapl__p"
            "xrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

unsigned __int8 *sub_20BFF1FA4(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v4 = sub_20BEC301C(a1, a2);
  v5 = v4;
  if (v4)
  {
    v6 = (uint64_t)(a1 + 4);
    v7 = v4;
    do
      v7 = *(unsigned __int8 **)v7;
    while (v7 && (sub_20BEB4EF8(v6, v7 + 16, a2) & 1) != 0);
  }
  return v5;
}

unsigned __int8 *sub_20BFF200C(uint64_t a1, unsigned __int8 *a2, __int128 *a3, _QWORD *a4)
{
  unint64_t v4;
  unsigned __int8 *v7;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  unsigned __int8 **v24;
  unint64_t v25;
  unsigned __int8 *v27;
  char v28;

  v7 = a2;
  v27 = 0;
  v28 = 0;
  v9 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v10 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v10 = v9;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v27, (pxrInternal__aapl__pxrReserved__ *)a2, v10);
  v11 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v27);
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, v7) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  sub_20BFF22C8(a1, v11, a3, a4, (uint64_t)&v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_20BDEC6E0(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27 = *v24;
    *v24 = v27;
  }
  else
  {
    *(_QWORD *)v27 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27)
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27;
    }
  }
  i = v27;
  v27 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20BF472A4((uint64_t)&v27, 0);
  return i;
}

void sub_20BFF22B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF472A4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFF22C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;

  v9 = a1 + 16;
  v10 = operator new(0x38uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20BFF234C(v10 + 2, a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20BFF2334(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF472A4(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFF234C(_QWORD *__dst, __int128 *a2, _QWORD *a3)
{
  __int128 v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = a3[1];
  __dst[3] = *a3;
  __dst[4] = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return __dst;
}

uint64_t sub_20BFF23BC(_QWORD *a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v6[3];

  sub_20BFF2424((uint64_t)a1, a2, a3, (uint64_t)v6);
  v4 = sub_20BFF24F4(a1, v6[0]);
  v6[0] = 0;
  sub_20BF472A4((uint64_t)v6, 0);
  return v4;
}

void sub_20BFF240C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF472A4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t sub_20BFF2424@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  pxrInternal__aapl__pxrReserved__ *v9;
  int v10;
  pxrInternal__aapl__pxrReserved__ *v11;
  char *v12;
  unint64_t result;
  uint64_t v14;
  char v15;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v9 = (pxrInternal__aapl__pxrReserved__ *)sub_20BFF234C((_QWORD *)v8 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  v14 = 0;
  v15 = 0;
  v10 = v8[39];
  if (v10 >= 0)
    v11 = v9;
  else
    v11 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)v8 + 2);
  if (v10 >= 0)
    v12 = (char *)v8[39];
  else
    v12 = (char *)*((_QWORD *)v8 + 3);
  result = pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v14, v11, v12);
  *((_QWORD *)v8 + 1) = bswap64(0x9E3779B97F4A7C55 * v14);
  return result;
}

void sub_20BFF24DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF472A4(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFF24F4(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unsigned __int8 *v5;
  char *v6;
  pxrInternal__aapl__pxrReserved__ *v7;
  char *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  char v13;

  v12 = 0;
  v13 = 0;
  v4 = (char *)*(unsigned __int8 *)(a2 + 39);
  v5 = (unsigned __int8 *)(a2 + 16);
  v6 = *(char **)(a2 + 24);
  if ((char)v4 >= 0)
    v7 = (pxrInternal__aapl__pxrReserved__ *)(a2 + 16);
  else
    v7 = *(pxrInternal__aapl__pxrReserved__ **)(a2 + 16);
  if ((char)v4 >= 0)
    v8 = v4;
  else
    v8 = v6;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v12, v7, v8);
  v9 = bswap64(0x9E3779B97F4A7C55 * v12);
  *(_QWORD *)(a2 + 8) = v9;
  v10 = sub_20BFF2594((uint64_t)a1, v9, v5);
  sub_20BEC5B54(a1, (_QWORD *)a2, v10);
  return a2;
}

unsigned __int8 *sub_20BFF2594(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  float v7;
  unint64_t v8;
  float v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;

  v6 = a1 + 32;
  v7 = *(float *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    v10 = 1;
    if (v8 >= 3)
      v10 = (v8 & (v8 - 1)) != 0;
    v11 = v10 | (2 * v8);
    v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    sub_20BFF2704(a1, v13);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    v16 = a2;
    if (v8 <= a2)
      v16 = a2 % v8;
  }
  else
  {
    v16 = (v8 - 1) & a2;
  }
  v17 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v16);
  if (v17)
  {
    v18 = *(unsigned __int8 **)v17;
    if (*(_QWORD *)v17)
    {
      v19 = 0;
      do
      {
        v20 = *((_QWORD *)v18 + 1);
        if (v15 > 1)
        {
          v21 = *((_QWORD *)v18 + 1);
          if (v20 >= v8)
            v21 = v20 % v8;
        }
        else
        {
          v21 = v20 & (v8 - 1);
        }
        if (v21 != v16)
          break;
        v22 = v20 == a2 ? sub_20BEB4EF8(v6, v18 + 16, a3) : 0;
        if ((v19 & (v22 ^ 1) & 1) != 0)
          break;
        v19 |= v22;
        v17 = *(unsigned __int8 **)v17;
        v18 = *(unsigned __int8 **)v17;
      }
      while (*(_QWORD *)v17);
    }
  }
  return v17;
}

void sub_20BFF2704(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_20BFF27E0(a1, prime);
  }
}

void sub_20BFF27E0(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  unint64_t v18;

  if (a2)
  {
    if (a2 >> 61)
      sub_20BDDF5B4();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v12 = *v7;
      if (*v7)
      {
        v18 = v9.u32[0];
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            v7 = (unsigned __int8 **)v12;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
          {
            v14 = *(unsigned __int8 **)v12;
            if (*(_QWORD *)v12)
            {
              v15 = v12;
              while (1)
              {
                v16 = sub_20BEB4EF8(a1 + 32, v12 + 16, v14 + 16);
                v17 = *(unsigned __int8 **)v15;
                if (!v16)
                  break;
                v14 = *(unsigned __int8 **)v17;
                v15 = *(unsigned __int8 **)v15;
                if (!*(_QWORD *)v17)
                  goto LABEL_32;
              }
              v14 = *(unsigned __int8 **)v15;
              v17 = v15;
LABEL_32:
              v10 = v18;
            }
            else
            {
              v17 = v12;
            }
            *v7 = v14;
            *(_QWORD *)v17 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
            v7 = (unsigned __int8 **)v12;
            v8 = v13;
          }
          v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_20BFF29AC(uint64_t a1, _QWORD *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  if (a2)
  {
    sub_20BFF29AC(a1, *a2);
    sub_20BFF29AC(a1, a2[1]);
    v4 = (unsigned int *)a2[5];
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
    operator delete(a2);
  }
}

uint64_t *sub_20BFF2A18(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;

  v5 = (uint64_t **)sub_20BFF2AB0((uint64_t)a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    v8 = a3[1];
    v6[4] = *a3;
    v6[5] = v8;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_20BDDE1B4(a1, v12, v7, v6);
  }
  return v6;
}

_QWORD *sub_20BFF2AB0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!sub_20BFF2B40(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_20BFF2B40(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL sub_20BFF2B40(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = (uint64_t *)(a1 + 8);
  if (v4)
  {
    v5 = sub_20BEB47BC(v3);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    v6 = 0;
  }
  v8 = *(_QWORD *)(a2 + 8);
  v7 = (uint64_t *)(a2 + 8);
  if (v8)
  {
    v9 = sub_20BEB47BC(v7);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  else
  {
    v10 = 0;
  }
  return v6 < v10;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::GetValueFactoryForMenvaName(const void **a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 v8;
  uint64_t **v9;
  char *v10;
  void *__p[2];
  char v12;
  void **v13;

  v4 = atomic_load(&qword_2549858D0);
  if (!v4)
    v4 = sub_20BFF34A8();
  v5 = sub_20BDEEBA4(v4, a1);
  v6 = atomic_load(&qword_2549858D0);
  if (!v6)
    v6 = sub_20BFF34A8();
  if (v6 + 8 == v5)
  {
    v8 = atomic_load((unsigned __int8 *)&qword_2549858E0);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2549858E0))
    {
      v9 = (uint64_t **)atomic_load(&qword_2549858D0);
      if (!v9)
        v9 = (uint64_t **)sub_20BFF34A8();
      sub_20BDDC0E4(__p, "None");
      v13 = __p;
      v10 = (char *)sub_20BFF32C4(v9, (const void **)__p, (uint64_t)&unk_20CAC184C, (_OWORD **)&v13) + 56;
      if (v12 < 0)
        operator delete(__p[0]);
      qword_2549858D8 = (uint64_t)v10;
      __cxa_guard_release(&qword_2549858E0);
    }
    *a2 = 0;
    return qword_2549858D8;
  }
  else
  {
    *a2 = 1;
    return v5 + 56;
  }
}

void sub_20BFF2CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_guard_abort(&qword_2549858E0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_BoolFromString(uint64_t a1, _BYTE *a2)
{
  char v3;
  char *v4;
  char **v5;
  uint64_t v7;
  char *v8;
  int v9;
  char *__s1[2];
  uint64_t v12;

  if (a2)
    *a2 = 1;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20BDDBFAC(__s1, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__s1 = *(_OWORD *)a1;
    v12 = *(_QWORD *)(a1 + 16);
  }
  v3 = HIBYTE(v12);
  if (v12 >= 0)
    v4 = (char *)__s1 + HIBYTE(v12);
  else
    v4 = &__s1[0][(unint64_t)__s1[1]];
  if (v12 >= 0)
    v5 = __s1;
  else
    v5 = (char **)__s1[0];
  if (v5 != (char **)v4)
  {
    do
    {
      *(_BYTE *)v5 = __tolower(*(char *)v5);
      v5 = (char **)((char *)v5 + 1);
    }
    while (v5 != (char **)v4);
    v3 = HIBYTE(v12);
  }
  if (v3 < 0)
  {
    v8 = __s1[0];
    if (strcmp(__s1[0], "false"))
    {
      if (!strcmp(v8, "true"))
        goto LABEL_31;
      if (!strcmp(v8, "no"))
        goto LABEL_29;
      if (!strcmp(v8, "yes"))
      {
LABEL_31:
        v7 = 1;
        goto LABEL_32;
      }
      if (strcmp(v8, "0"))
        goto LABEL_35;
    }
LABEL_29:
    v7 = 0;
LABEL_30:
    v8 = __s1[0];
LABEL_32:
    operator delete(v8);
    return v7;
  }
  if (LODWORD(__s1[0]) == 1936482662 && WORD2(__s1[0]) == 101)
    return 0;
  if (!(LODWORD(__s1[0]) ^ 0x65757274 | BYTE4(__s1[0])))
    return 1;
  if (!(LOWORD(__s1[0]) ^ 0x6F6E | BYTE2(__s1[0])))
    return 0;
  if (LODWORD(__s1[0]) == 7562617)
    return 1;
  if (LOWORD(__s1[0]) == 48)
    return 0;
  v8 = (char *)__s1;
LABEL_35:
  v9 = strcmp(v8, "1");
  if (a2 && v9)
    *a2 = 0;
  v7 = 1;
  if (v3 < 0)
    goto LABEL_30;
  return v7;
}

void sub_20BFF2ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_EvalQuotedString(pxrInternal__aapl__pxrReserved__ *this@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, unsigned __int8 *a5@<X8>)
{
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  char **v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  void *__p[2];
  uint64_t v26;
  const char *v27;
  char v28;
  _BYTE *v29;
  void *__dst;
  _BYTE v31[2048];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  if ((unint64_t)a2 > 2 * a3)
  {
    v10 = (uint64_t)&a2[-2 * a3];
    if ((unint64_t)v10 < 0x801)
      v11 = v31;
    else
      v11 = malloc((size_t)&a2[-2 * a3]);
    v12 = (char *)this + a3;
    v29 = v12;
    __dst = v11;
    if (v10 < 1)
    {
LABEL_19:
      sub_20BDFC7D8(__p, v11, (_BYTE *)__dst - v11);
      v19 = v26;
      v20 = *(_OWORD *)__p;
      *(_OWORD *)__p = *(_OWORD *)a5;
      v26 = *((_QWORD *)a5 + 2);
      *(_OWORD *)a5 = v20;
      *((_QWORD *)a5 + 2) = v19;
      if (SHIBYTE(v26) < 0)
        operator delete(__p[0]);
      if (v11 != v31)
        free(v11);
      if (a4)
      {
        v21 = a5[23];
        if ((v21 & 0x80u) == 0)
          v22 = a5;
        else
          v22 = *(unsigned __int8 **)a5;
        v23 = 0;
        if ((v21 & 0x80u) != 0)
          v21 = *((_QWORD *)a5 + 1);
        for (; v21; --v21)
        {
          v24 = *v22++;
          if (v24 == 10)
            ++v23;
        }
        *a4 = v23;
      }
    }
    else
    {
      v13 = &v12[v10];
      v14 = 2048;
      if ((unint64_t)v10 > 0x800)
        v14 = v10;
      v15 = v14 + 1;
      while (*v12)
      {
        if (!--v15)
        {
          __p[0] = "sdf/parserHelpers.cpp";
          __p[1] = "Sdf_EvalQuotedString";
          v26 = 596;
          v27 = "std::string pxrInternal__aapl__pxrReserved__::Sdf_EvalQuotedString(const char *, size_t, size_t, unsigned int *)";
          v28 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unable to evaluate quoted string");
          goto LABEL_19;
        }
        v16 = memchr(v12, 92, v13 - v12);
        if (v16)
          v17 = v16;
        else
          v17 = v13;
        memcpy(__dst, v12, v17 - v12);
        __dst = (char *)__dst + v17 - v12;
        v12 = &v29[v17 - v12];
        v29 = v12;
        if (v17 != v13)
        {
          pxrInternal__aapl__pxrReserved__::TfEscapeStringReplaceChar((uint64_t *)&v29, (const char **)&__dst, v18);
          v12 = ++v29;
        }
        if (v12 >= v13)
          goto LABEL_19;
      }
      if (v11 != v31)
        free(v11);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::Sdf_EvalAssetPath(pxrInternal__aapl__pxrReserved__ *this@<X0>, const char *a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  uint64_t v6;
  std::string v7;
  void *v8;
  char v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  std::string __dst;

  if (a3)
    v6 = 3;
  else
    v6 = 1;
  sub_20BDFC7D8(&__dst, (char *)this + v6, (size_t)&a2[-(2 * v6)]);
  if (a3)
  {
    sub_20BDDC0E4(v12, "\\@@@");
    sub_20BDDC0E4(__p, "@@@");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)&__dst, (unsigned __int8 *)v12, (unsigned __int8 *)__p, &v7);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    __dst = v7;
    *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
    v7.__r_.__value_.__s.__data_[0] = 0;
    if (v11 < 0)
      operator delete(__p[0]);
    if (v13 < 0)
      operator delete(v12[0]);
  }
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&v7, &__dst);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    sub_20BDDBFAC(a4, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  else
    *a4 = v7;
  if (v9 < 0)
    operator delete(v8);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20BFF3264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  sub_20BE930F8((uint64_t)&a9);
  if (*(char *)(v26 - 25) < 0)
    operator delete(*(void **)(v26 - 48));
  _Unwind_Resume(a1);
}

_OWORD *sub_20BFF32C4(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)sub_20BDDE084((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x90uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 12) = 0;
    *((_QWORD *)v7 + 17) = 0;
    v13 = 1;
    sub_20BDDE1B4(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_20BFF3390((uint64_t)v12, 0);
  }
  return v7;
}

void sub_20BFF3390(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BFF33D4((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20BFF33D4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 80);
  v3 = *(_QWORD **)(a1 + 104);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20BFF3448(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 56);
  v3 = *(_QWORD **)(a1 + 80);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

unint64_t sub_20BFF34A8()
{
  uint64_t **v0;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v3;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v4;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v11;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v12;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v13;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v14;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v15;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v16;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v17;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v20;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v21;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v23;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v24;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v25;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v26;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v28;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v29;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v30;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v31;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v33;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v34;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v35;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v36;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v37;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v38;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v39;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v40;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v41;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v43;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v44;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v45;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v46;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v47;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v48;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v49;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v50;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v51;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v52;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v53;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v54;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v55;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v56;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v57;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v58;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v59;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v60;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v61;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v62;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v63;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v64;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v65;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v66;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v67;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v68;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v69;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v70;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v71;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v72;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v73;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v74;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v75;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v76;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v77;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v78;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v79;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v80;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v81;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v82;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v83;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v84;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v85;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v86;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v87;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v88;
  _OWORD *v89;
  void **v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  void *__p[2];
  char v98;
  __int128 v99;
  uint64_t v100;
  void *v101[2];
  char v102;
  uint64_t **v103;
  void **v104;
  _BYTE v105[24];
  _BYTE *v106;
  void *__dst[2];
  uint64_t v108;
  _OWORD v109[2];
  _BYTE v110[24];
  _BYTE *v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  v0 = (uint64_t **)operator new(0x18uLL);
  v0[1] = 0;
  v0[2] = 0;
  *v0 = (uint64_t *)(v0 + 1);
  v103 = v0;
  v1 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v1)
    v1 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF45B8(&v103, v1, 0);
  v2 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v2)
    v2 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF4BB0(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v2 + 8), 0);
  v3 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v3)
    v3 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF51A8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v3 + 16), 0);
  v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v4)
    v4 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF57A0(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v4 + 24), 0);
  v5 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v5)
    v5 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF5D98(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v5 + 32), 0);
  v6 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v6)
    v6 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF6390(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v6 + 40), 0);
  v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v7)
    v7 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF6988(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v7 + 48), 0);
  v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v8)
    v8 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF6F80(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v8 + 56), 0);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF7578(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0);
  v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v10)
    v10 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF7B70(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v10 + 72), 0);
  v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v11)
    v11 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF8168(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v11 + 80), 0);
  v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v12)
    v12 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF8760(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v12 + 88), 0);
  v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v13)
    v13 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF8D58(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v13 + 96), 0);
  v14 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v14)
    v14 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF9350(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v14 + 424), 0);
  v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15)
    v15 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF9350(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v15 + 432), 0);
  v16 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v16)
    v16 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF9948(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v16 + 440), 0);
  v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v17)
    v17 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF9F40(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v17 + 104), 0);
  v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v18)
    v18 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFA538(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v18 + 128), 0);
  v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19)
    v19 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFAB30(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v19 + 152), 0);
  v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v20)
    v20 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFB128(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v20 + 176), 0);
  v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v21)
    v21 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFB720(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v21 + 112), 0);
  v22 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v22)
    v22 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFBD18(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v22 + 136), 0);
  v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v23)
    v23 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC310(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v23 + 160), 0);
  v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v24)
    v24 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC908(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v24 + 184), 0);
  v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v25)
    v25 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFCF00(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v25 + 120), 0);
  v26 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v26)
    v26 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFD4F8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v26 + 144), 0);
  v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v27)
    v27 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFDAF0(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v27 + 168), 0);
  v28 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v28)
    v28 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFE0E8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v28 + 192), 0);
  v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v29)
    v29 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFBD18(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v29 + 200), 0);
  v30 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v30)
    v30 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC310(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v30 + 208), 0);
  v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v31)
    v31 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC908(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v31 + 216), 0);
  v32 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v32)
    v32 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFBD18(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v32 + 224), 0);
  v33 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v33)
    v33 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC310(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v33 + 232), 0);
  v34 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v34)
    v34 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC908(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v34 + 240), 0);
  v35 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v35)
    v35 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFBD18(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v35 + 248), 0);
  v36 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v36)
    v36 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC310(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v36 + 256), 0);
  v37 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v37)
    v37 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC908(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v37 + 264), 0);
  v38 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v38)
    v38 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFBD18(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v38 + 272), 0);
  v39 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v39)
    v39 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC310(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v39 + 280), 0);
  v40 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v40)
    v40 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC908(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v40 + 288), 0);
  v41 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v41)
    v41 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFD4F8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v41 + 296), 0);
  v42 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v42)
    v42 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFDAF0(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v42 + 304), 0);
  v43 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v43)
    v43 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFE0E8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v43 + 312), 0);
  v44 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v44)
    v44 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFE6E0(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v44 + 320), 0);
  v45 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v45)
    v45 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFECD8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v45 + 328), 0);
  v46 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v46)
    v46 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFF2D0(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v46 + 336), 0);
  v47 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v47)
    v47 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFF8C8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v47 + 344), 0);
  v48 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v48)
    v48 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFFEC0(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v48 + 352), 0);
  v49 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v49)
    v49 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C0004B8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v49 + 360), 0);
  v50 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v50)
    v50 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C0004B8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v50 + 368), 0);
  v51 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v51)
    v51 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFAB30(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v51 + 384), 0);
  v52 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v52)
    v52 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFB128(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v52 + 392), 0);
  v53 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v53)
    v53 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFA538(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v53 + 376), 0);
  v54 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v54)
    v54 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC310(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v54 + 408), 0);
  v55 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v55)
    v55 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC908(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v55 + 416), 0);
  v56 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v56)
    v56 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFBD18(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v56 + 400), 0);
  v57 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v57)
    v57 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF9F40(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v57 + 104), "Vec2i");
  v58 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v58)
    v58 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFA538(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v58 + 128), "Vec2h");
  v59 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v59)
    v59 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFAB30(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v59 + 152), "Vec2f");
  v60 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v60)
    v60 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFB128(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v60 + 176), "Vec2d");
  v61 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v61)
    v61 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFB720(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v61 + 112), "Vec3i");
  v62 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v62)
    v62 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFBD18(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v62 + 136), "Vec3h");
  v63 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v63)
    v63 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC310(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v63 + 160), "Vec3f");
  v64 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v64)
    v64 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC908(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v64 + 184), "Vec3d");
  v65 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v65)
    v65 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFCF00(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v65 + 120), "Vec4i");
  v66 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v66)
    v66 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFD4F8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v66 + 144), "Vec4h");
  v67 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v67)
    v67 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFDAF0(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v67 + 168), "Vec4f");
  v68 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v68)
    v68 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFE0E8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v68 + 192), "Vec4d");
  v69 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v69)
    v69 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC310(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v69 + 208), "PointFloat");
  v70 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v70)
    v70 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC908(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v70 + 216), "Point");
  v71 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v71)
    v71 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC310(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v71 + 232), "NormalFloat");
  v72 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v72)
    v72 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC908(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v72 + 240), "Normal");
  v73 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v73)
    v73 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC310(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v73 + 256), "VectorFloat");
  v74 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v74)
    v74 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC908(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v74 + 264), "Vector");
  v75 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v75)
    v75 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC310(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v75 + 280), "ColorFloat");
  v76 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v76)
    v76 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFC908(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v76 + 288), "Color");
  v77 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v77)
    v77 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFE6E0(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v77 + 320), "Quath");
  v78 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v78)
    v78 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFECD8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v78 + 328), "Quatf");
  v79 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v79)
    v79 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFF2D0(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v79 + 336), "Quatd");
  v80 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v80)
    v80 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFF8C8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v80 + 344), "Matrix2d");
  v81 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v81)
    v81 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFFFEC0(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v81 + 352), "Matrix3d");
  v82 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v82)
    v82 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C0004B8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v82 + 360), "Matrix4d");
  v83 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v83)
    v83 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C0004B8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v83 + 368), "Frame");
  v84 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v84)
    v84 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C0004B8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v84 + 360), "Transform");
  v85 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v85)
    v85 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF51A8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v85 + 16), "PointIndex");
  v86 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v86)
    v86 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF51A8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v86 + 16), "EdgeIndex");
  v87 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v87)
    v87 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF51A8(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v87 + 16), "FaceIndex");
  v88 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v88)
    v88 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BFF8760(&v103, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v88 + 88), "Schema");
  sub_20BDDC0E4(v101, "");
  v100 = 0;
  v106 = 0;
  sub_20C017DB0((char *)__dst, (__int128 *)v101, &v99, 0, (uint64_t)v105);
  sub_20BDDC0E4(__p, "None");
  v104 = __p;
  v89 = sub_20BFF32C4(v0, (const void **)__p, (uint64_t)&unk_20CAC184C, (_OWORD **)&v104);
  v90 = (void **)v89 + 7;
  if (*((char *)v89 + 79) < 0)
    operator delete(*v90);
  *(_OWORD *)v90 = *(_OWORD *)__dst;
  *((_QWORD *)v89 + 9) = v108;
  HIBYTE(v108) = 0;
  LOBYTE(__dst[0]) = 0;
  v89[5] = v109[0];
  *(_OWORD *)((char *)v89 + 89) = *(_OWORD *)((char *)v109 + 9);
  sub_20C017E4C((_QWORD *)v89 + 14, (uint64_t)v110);
  if (v98 < 0)
    operator delete(__p[0]);
  v91 = v111;
  if (v111 == v110)
  {
    v92 = 4;
    v91 = v110;
  }
  else
  {
    if (!v111)
      goto LABEL_186;
    v92 = 5;
  }
  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_186:
  if (SHIBYTE(v108) < 0)
    operator delete(__dst[0]);
  v93 = v106;
  if (v106 == v105)
  {
    v94 = 4;
    v93 = v105;
  }
  else
  {
    if (!v106)
      goto LABEL_193;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_193:
  if (v102 < 0)
    operator delete(v101[0]);
  while (!__ldaxr(&qword_2549858D0))
  {
    if (!__stlxr((unint64_t)v0, &qword_2549858D0))
      return (unint64_t)v0;
  }
  __clrex();
  sub_20C017EDC((uint64_t)v0, v0[1]);
  operator delete(v0);
  return atomic_load(&qword_2549858D0);
}

void sub_20BFF44F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20BFF45B8(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C000AB0;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C000B88;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFF4A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFF4BA8()
{
  JUMPOUT(0x20BFF4BA0);
}

void sub_20BFF4BB0(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C001A28;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C001B00;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFF5030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFF51A0()
{
  JUMPOUT(0x20BFF5198);
}

void sub_20BFF51A8(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C0023B8;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C002490;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFF5628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFF5798()
{
  JUMPOUT(0x20BFF5790);
}

void sub_20BFF57A0(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C002DA0;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C002E78;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFF5C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFF5D90()
{
  JUMPOUT(0x20BFF5D88);
}

void sub_20BFF5D98(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C003784;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C003858;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFF6218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFF6388()
{
  JUMPOUT(0x20BFF6380);
}

void sub_20BFF6390(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C004768;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C00483C;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFF6810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFF6980()
{
  JUMPOUT(0x20BFF6978);
}

void sub_20BFF6988(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C0056C0;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C005794;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFF6E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFF6F78()
{
  JUMPOUT(0x20BFF6F70);
}

void sub_20BFF6F80(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C005ED4;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C006050;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFF7400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFF7570()
{
  JUMPOUT(0x20BFF7568);
}

void sub_20BFF7578(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C0063FC;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C006578;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFF79F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFF7B68()
{
  JUMPOUT(0x20BFF7B60);
}

void sub_20BFF7B70(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C006C38;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C006DB4;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFF7FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFF8160()
{
  JUMPOUT(0x20BFF8158);
}

void sub_20BFF8168(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C0078D0;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C0079D8;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFF85E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFF8758()
{
  JUMPOUT(0x20BFF8750);
}

void sub_20BFF8760(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C0087F4;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C008934;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFF8BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFF8D50()
{
  JUMPOUT(0x20BFF8D48);
}

void sub_20BFF8D58(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C009688;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C0097A4;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFF91D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFF9348()
{
  JUMPOUT(0x20BFF9340);
}

void sub_20BFF9350(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C00AD84;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C00AE98;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFF97D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFF9940()
{
  JUMPOUT(0x20BFF9938);
}

void sub_20BFF9948(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C00B66C;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C00B7A8;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFF9DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFF9F38()
{
  JUMPOUT(0x20BFF9F30);
}

void sub_20BFF9F40(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C00EF48;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C00F018;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFFA3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFFA530()
{
  JUMPOUT(0x20BFFA528);
}

void sub_20BFFA538(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C00FCB0;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C00FD84;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFFA9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFFAB28()
{
  JUMPOUT(0x20BFFAB20);
}

void sub_20BFFAB30(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C010224;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C0102F4;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFFAFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFFB120()
{
  JUMPOUT(0x20BFFB118);
}

void sub_20BFFB128(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C010708;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C010800;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFFB5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFFB718()
{
  JUMPOUT(0x20BFFB710);
}

void sub_20BFFB720(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C010C14;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C010D14;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFFBBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFFBD10()
{
  JUMPOUT(0x20BFFBD08);
}

void sub_20BFFBD18(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C011C10;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C011CEC;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFFC198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFFC308()
{
  JUMPOUT(0x20BFFC300);
}

void sub_20BFFC310(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C0121F4;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C0122F4;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFFC790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFFC900()
{
  JUMPOUT(0x20BFFC8F8);
}

void sub_20BFFC908(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C012728;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C012828;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFFCD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFFCEF8()
{
  JUMPOUT(0x20BFFCEF0);
}

void sub_20BFFCF00(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C012C5C;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C012D54;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFFD380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFFD4F0()
{
  JUMPOUT(0x20BFFD4E8);
}

void sub_20BFFD4F8(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C013C14;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C013CE4;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFFD978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFFDAE8()
{
  JUMPOUT(0x20BFFDAE0);
}

void sub_20BFFDAF0(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C01424C;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C014344;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFFDF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFFE0E0()
{
  JUMPOUT(0x20BFFE0D8);
}

void sub_20BFFE0E8(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C014790;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C014888;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFFE568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFFE6D8()
{
  JUMPOUT(0x20BFFE6D0);
}

void sub_20BFFE6E0(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C014CD4;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C014DA4;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFFEB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFFECD0()
{
  JUMPOUT(0x20BFFECC8);
}

void sub_20BFFECD8(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C0151B4;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C0152A8;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFFF158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFFF2C8()
{
  JUMPOUT(0x20BFFF2C0);
}

void sub_20BFFF2D0(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C015718;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C01580C;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFFF750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFFF8C0()
{
  JUMPOUT(0x20BFFF8B8);
}

void sub_20BFFF8C8(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C015C7C;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C015D74;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20BFFFD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFFFEB8()
{
  JUMPOUT(0x20BFFFEB0);
}

void sub_20BFFFEC0(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C016870;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C016980;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20C000340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C0004B0()
{
  JUMPOUT(0x20C0004A8);
}

void sub_20C0004B8(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  std::string *v6;
  std::string *v7;
  __int128 v8;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  uint64_t *EmptyString;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  void *v33[2];
  uint64_t v34;
  __n128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  uint64_t *ArrayType;
  void **p_dst;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_20BDDC0E4(&__dst, a3);
    v6 = (std::string *)sub_20BDDC0E4(&v48, a3);
    v7 = std::string::append(v6, "[]");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v39 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49) < 0)
      operator delete((void *)v48);
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v11 = *(_OWORD *)EmptyString;
      v41 = EmptyString[2];
      __dst = v11;
    }
    if ((v48 & 7) != 0)
    {
      v12 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (unsigned int **)&v48);
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = (uint64_t *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*((char *)v15 + 23) < 0)
    {
      sub_20BDDBFAC(v38, (void *)*v15, v15[1]);
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v39 = v15[2];
      *(_OWORD *)v38 = v16;
    }
    if ((v48 & 7) != 0)
    {
      v17 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = *a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v37 = v41;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v35);
  v46[0] = &unk_24C524E98;
  v46[1] = sub_20C017704;
  v47 = v46;
  sub_20C017DB0((char *)&v48, (__int128 *)__p, (__int128 *)&v35, 0, (uint64_t)v46);
  p_dst = (void **)&__dst;
  v20 = sub_20C0011E0(v19, (const void **)&__dst, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v21 = (void **)(v20 + 7);
  if (*((char *)v20 + 79) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v48;
  v20[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v20 + 5) = v50[0];
  *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v20 + 14, (uint64_t)v51);
  v22 = v52;
  if (v52 == v51)
  {
    v23 = 4;
    v22 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    sub_20BDDBFAC(v33, v38[0], (unint64_t)v38[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v38;
    v34 = v39;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v32);
  v44[0] = &unk_24C524E98;
  v44[1] = sub_20C017814;
  v45 = v44;
  sub_20C017DB0((char *)&v48, (__int128 *)v33, (__int128 *)&v32, 1, (uint64_t)v44);
  p_dst = v38;
  v26 = sub_20C0011E0(v19, (const void **)v38, (uint64_t)&unk_20CAC184C, (__int128 **)&p_dst);
  v27 = (void **)(v26 + 7);
  if (*((char *)v26 + 79) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v48;
  v26[9] = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v48) = 0;
  *((_OWORD *)v26 + 5) = v50[0];
  *(_OWORD *)((char *)v26 + 89) = *(_OWORD *)((char *)v50 + 9);
  sub_20C017E4C(v26 + 14, (uint64_t)v51);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_58;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void sub_20C000938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v50 = *(_QWORD *)(v48 - 144);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C000AA8()
{
  JUMPOUT(0x20C000AA0);
}

uint64_t sub_20C000AB0@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v5;

  v5 = 0;
  result = sub_20C000D7C(&v5, a1, a2);
  *(_QWORD *)(a3 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a3 = v5;
  return result;
}

void sub_20C000B88(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = &off_24C524F38;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20C00134C((uint64_t)v20, v8);
    sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_BYTE *)sub_20C0013BC(&v18, v14, v15);
      sub_20C000D7C(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_20C001438(&v18);
    }
    a4[1] = &off_24C524F38;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C000CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C000CF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C000C6CLL);
  }
  JUMPOUT(0x20C000CDCLL);
}

void sub_20C000D6C()
{
  __cxa_end_catch();
  JUMPOUT(0x20C000CDCLL);
}

uint64_t sub_20C000D7C(_BYTE *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  std::string *v8;
  _QWORD *exception;
  std::string v10;
  _QWORD v11[4];
  char v12;

  v3 = *a3;
  v4 = *a3 + 1;
  v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v11[0] = "sdf/parserHelpers.cpp";
    v11[1] = "MakeScalarValueImpl";
    v11[2] = 113;
    v11[3] = "std::enable_if_t<std::is_integral<Int>::value> pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeSca"
             "larValueImpl(Int *, const vector<Value> &, size_t &) [Int = BOOL]";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v10);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v10;
    else
      v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", (const char *)v8);
    std::string::~string(&v10);
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  result = sub_20C000EA4(v5 + 56 * v3);
  *a1 = result;
  return result;
}

void sub_20C000E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C000EA4(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v1 == -1)
    sub_20BF1C1FC();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_24C524E58[v1])(&v4, a1);
}

void sub_20C000EF4()
{
  __break(1u);
}

void sub_20C000F3C()
{
  __cxa_end_catch();
  JUMPOUT(0x20C000F44);
}

void sub_20C000F50(std::exception *a1)
{
  void *v1;

  std::exception::~exception(a1);
  operator delete(v1);
}

const char *sub_20C000F64()
{
  return "boost::bad_get: failed value get using boost::get";
}

BOOL sub_20C000F70(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

BOOL sub_20C000F80(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

BOOL sub_20C000F90(uint64_t a1, double *a2)
{
  return *a2 != 0.0;
}

uint64_t sub_20C000FA0(uint64_t *a1, uint64_t a2)
{
  return sub_20C000FB4(*a1, a2);
}

uint64_t sub_20C000FA8(pxrInternal__aapl__pxrReserved__::TfToken **a1, _QWORD *a2)
{
  return sub_20C001010(*a1, a2);
}

uint64_t sub_20C000FB4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *exception;
  char v4;

  v4 = 0;
  result = pxrInternal__aapl__pxrReserved__::Sdf_BoolFromString(a2, &v4);
  if (!v4)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

uint64_t sub_20C001010(pxrInternal__aapl__pxrReserved__::TfToken *a1, _QWORD *a2)
{
  uint64_t *EmptyString;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  return sub_20C000FB4((uint64_t)a1, (uint64_t)EmptyString);
}

void sub_20C00104C(uint64_t a1, __int128 *a2)
{
  _QWORD *exception;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(&v4, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 2);
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(&v6, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    v7 = *((_QWORD *)a2 + 5);
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C0010E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C001124(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C524E98;
  result[1] = v3;
  return result;
}

uint64_t sub_20C00115C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C524E98;
  a2[1] = v2;
  return result;
}

uint64_t sub_20C00117C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 8))(a2, a3, a4, *a5);
}

uint64_t sub_20C001198(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C524F18))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C0011D4()
{
  return &unk_24C524F18;
}

uint64_t *sub_20C0011E0(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C001288((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20BFF3390((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_20C001288@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x90uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C0012F0(v6 + 4, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C0012D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFF3390(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C0012F0(_QWORD *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  __dst[8] = 0;
  __dst[13] = 0;
  return __dst;
}

uint64_t sub_20C00134C(uint64_t a1, unint64_t a2)
{
  char v5;
  char *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20C001780((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20C0013A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0013BC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>::ope"
            "rator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C001430()
{
  JUMPOUT(0x20C0013E0);
}

_QWORD *sub_20C001438(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<BOOL>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    ++*a1;
  }
  return a1;
}

uint64_t *sub_20C0014B4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20C0014DC(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C00166C(a1);
}

uint64_t sub_20C0014EC()
{
  return 1;
}

unint64_t sub_20C0014F4(char ***a1)
{
  char **v1;
  char *v2;
  char *v4;
  char v5;

  v1 = *a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (pxrInternal__aapl__pxrReserved__ *)v1[4], v2);
  return bswap64(0x9E3779B97F4A7C55 * (_QWORD)v4);
}

uint64_t sub_20C001548(uint64_t *a1, uint64_t *a2)
{
  return sub_20BF65D90(*a1, *a2);
}

uint64_t sub_20C001554(uint64_t *a1, uint64_t a2)
{
  return sub_20BF65D90(*a1, a2);
}

uint64_t sub_20C001560()
{
  return 0;
}

_QWORD *sub_20C00156C(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20C00176C);
  return a2;
}

void *sub_20C0015B4()
{
  return &unk_24C51DCA8;
}

uint64_t sub_20C0015C0()
{
  return 1;
}

uint64_t sub_20C0015C8()
{
  return MEMORY[0x24BEDB770];
}

uint64_t sub_20C0015D4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20C0015DC(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20C0015E8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAC9F58 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C001620(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DCA8, a2, a3);
}

void *sub_20C001640()
{
  return &unk_24C51DCA8;
}

uint64_t sub_20C00164C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20C001654@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = &off_24C524F38;
  return sub_20BF56B40(a2, v2);
}

void **sub_20C00166C(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_20C0016C4(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20C00166C(&v13);
  }
  return (uint64_t)*a1;
}

uint64_t sub_20C00176C(_QWORD *a1)
{
  ++*a1;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut();
}

void sub_20C001780(unint64_t *a1, unint64_t a2, _BYTE **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t i;
  _BYTE *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  char v20;
  _BYTE *v21;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
  {
    sub_20BF56210(a1);
    return;
  }
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20C00190C((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                *((_BYTE *)v10 + i) = *(_BYTE *)(v9 + i);
            }
          }
          v12 = *a3;
          do
            *((_BYTE *)v7 + v3++) = *v12;
          while (a2 != v3);
        }
        v13 = v7;
        goto LABEL_28;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v17 = a2;
    else
      v17 = *a1;
    v18 = sub_20C00190C((uint64_t)a1, a2);
    v13 = v18;
    if (v17)
    {
      v19 = v18;
      do
      {
        v20 = *(_BYTE *)v7;
        v7 = (unint64_t *)((char *)v7 + 1);
        *(_BYTE *)v19 = v20;
        v19 = (unint64_t *)((char *)v19 + 1);
        --v17;
      }
      while (v17);
    }
    if (v3 < a2)
    {
      v21 = *a3;
      do
        *((_BYTE *)v18 + v3++) = *v21;
      while (a2 != v3);
    }
    goto LABEL_28;
  }
  v14 = sub_20C00190C((uint64_t)a1, a2);
  v13 = v14;
  v15 = 0;
  v16 = *a3;
  do
    *((_BYTE *)v14 + v15++) = *v16;
  while (a2 != v15);
LABEL_28:
  if (v13 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v13;
  }
  *a1 = a2;
}

_QWORD *sub_20C00190C(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew(size_t) [T = BOOL]");
  if (a2 >= 0xFFFFFFFFFFFFFFF0)
    v3 = -1;
  else
    v3 = a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20C001980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C001998(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _BYTE *v10;
  char v11;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique() [T = BOOL]", a3);
      v6 = (char *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20C00190C((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = v8;
        do
        {
          v11 = *v6++;
          *v10++ = v11;
          --v7;
        }
        while (v7);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

uint64_t sub_20C001A28@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v5;

  v5 = 0;
  result = sub_20C001CF4(&v5, a1, a2);
  *(_QWORD *)(a3 + 8) = &unk_24C51FE63;
  *(_BYTE *)a3 = v5;
  return result;
}

void sub_20C001B00(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = &off_24C51F668;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20BF65670((uint64_t)v20, v8);
    sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_BYTE *)sub_20C0022C0(&v18, v14, v15);
      sub_20C001CF4(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_20C00233C(&v18);
    }
    a4[1] = &off_24C51F668;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C001C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C001C6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C001BE4);
  }
  JUMPOUT(0x20C001C54);
}

void sub_20C001CE4()
{
  __cxa_end_catch();
  JUMPOUT(0x20C001C54);
}

uint64_t sub_20C001CF4(_BYTE *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  std::string *v8;
  _QWORD *exception;
  std::string v10;
  _QWORD v11[4];
  char v12;

  v3 = *a3;
  v4 = *a3 + 1;
  v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v11[0] = "sdf/parserHelpers.cpp";
    v11[1] = "MakeScalarValueImpl";
    v11[2] = 113;
    v11[3] = "std::enable_if_t<std::is_integral<Int>::value> pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeSca"
             "larValueImpl(Int *, const vector<Value> &, size_t &) [Int = unsigned char]";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB790] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v10);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v10;
    else
      v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", (const char *)v8);
    std::string::~string(&v10);
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  result = sub_20C001E18(v5 + 56 * v3);
  *a1 = result;
  return result;
}

void sub_20C001DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C001E18(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v1 == -1)
    sub_20BF1C1FC();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_24C524FF0[v1])(&v4, a1);
}

void sub_20C001E68()
{
  __break(1u);
}

void sub_20C001EB0()
{
  __cxa_end_catch();
  JUMPOUT(0x20C001EB8);
}

uint64_t sub_20C001EC4(uint64_t *a1, unint64_t *a2)
{
  return sub_20C001EF4(*a1, *a2);
}

uint64_t sub_20C001ED0(uint64_t *a1, uint64_t *a2)
{
  return sub_20C001F88(*a1, *a2);
}

uint64_t sub_20C001EDC(uint64_t a1, double *a2)
{
  return sub_20C002024(*a2);
}

uint64_t sub_20C001EF4(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v2;
  char v4;

  v2 = a2;
  sub_20BF6F200((uint64_t)&v4, 2 * (a2 > 0xFF));
  return v2;
}

uint64_t sub_20C001F88(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  int v3;
  char v5;

  v2 = a2;
  if (a2 < 0)
    v3 = 1;
  else
    v3 = 2 * (a2 > 255);
  sub_20BF6F200((uint64_t)&v5, v3);
  return v2;
}

uint64_t sub_20C002024(double a1)
{
  _QWORD *exception;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  return sub_20C002070(a1);
}

uint64_t sub_20C002070(double a1)
{
  return sub_20BF7357C(a1);
}

void sub_20C0020E4(uint64_t a1, __int128 *a2)
{
  _QWORD *exception;
  __int128 v3;
  uint64_t v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(&v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    v4 = *((_QWORD *)a2 + 2);
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C002150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C00216C(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *exception;

  if ((*a2 & 7) != 0)
  {
    v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 2, v2));
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C0021F0(uint64_t a1, __int128 *a2)
{
  _QWORD *exception;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(&v4, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 2);
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(&v6, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    v7 = *((_QWORD *)a2 + 5);
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C00228C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0022C0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<unsigned ch"
            "ar>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C002334()
{
  JUMPOUT(0x20C0022E4);
}

_QWORD *sub_20C00233C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<unsigned char>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    ++*a1;
  }
  return a1;
}

uint64_t sub_20C0023B8@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v5;

  v5 = 0;
  result = sub_20C002684(&v5, a1, a2);
  *(_QWORD *)(a3 + 8) = &unk_24C52008B;
  *(_DWORD *)a3 = v5;
  return result;
}

void sub_20C002490(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = &off_24C51F5B0;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20BF64CC4((uint64_t)v20, v8);
    sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 4 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_DWORD *)sub_20C002CA8(&v18, v14, v15);
      sub_20C002684(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_20C002D24(&v18);
    }
    a4[1] = &off_24C51F5B0;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C0025CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C0025FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C002574);
  }
  JUMPOUT(0x20C0025E4);
}

void sub_20C002674()
{
  __cxa_end_catch();
  JUMPOUT(0x20C0025E4);
}

uint64_t sub_20C002684(_DWORD *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  std::string *v8;
  _QWORD *exception;
  std::string v10;
  _QWORD v11[4];
  char v12;

  v3 = *a3;
  v4 = *a3 + 1;
  v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v11[0] = "sdf/parserHelpers.cpp";
    v11[1] = "MakeScalarValueImpl";
    v11[2] = 113;
    v11[3] = "std::enable_if_t<std::is_integral<Int>::value> pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeSca"
             "larValueImpl(Int *, const vector<Value> &, size_t &) [Int = int]";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v10);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v10;
    else
      v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", (const char *)v8);
    std::string::~string(&v10);
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  result = sub_20C0027A8(v5 + 56 * v3);
  *a1 = result;
  return result;
}

void sub_20C00278C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0027A8(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v1 == -1)
    sub_20BF1C1FC();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_24C525020[v1])(&v4, a1);
}

void sub_20C0027F8()
{
  __break(1u);
}

void sub_20C002840()
{
  __cxa_end_catch();
  JUMPOUT(0x20C002848);
}

uint64_t sub_20C002854(uint64_t *a1, uint64_t *a2)
{
  return sub_20C002884(*a1, *a2);
}

int64_t sub_20C002860(uint64_t *a1, int64_t *a2)
{
  return sub_20C002918(*a1, *a2);
}

uint64_t sub_20C00286C(uint64_t a1, double *a2)
{
  return sub_20C0029BC(*a2);
}

uint64_t sub_20C002884(uint64_t a1, uint64_t a2)
{
  char v4;

  sub_20BF6F200((uint64_t)&v4, 2 * ((a2 & 0xFFFFFFFF80000000) != 0));
  return a2;
}

int64_t sub_20C002918(uint64_t a1, int64_t a2)
{
  int v3;
  char v5;

  if (a2 <= (uint64_t)0xFFFFFFFF7FFFFFFFLL)
    v3 = 1;
  else
    v3 = 2 * (a2 > 0x7FFFFFFF);
  sub_20BF6F200((uint64_t)&v5, v3);
  return a2;
}

uint64_t sub_20C0029BC(double a1)
{
  _QWORD *exception;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  return sub_20C002A08(a1);
}

uint64_t sub_20C002A08(double a1)
{
  int v2;
  double v3;
  double v4;
  char v6;

  if (a1 <= -2147483650.0)
    v2 = 1;
  else
    v2 = 2 * (a1 >= 2147483650.0);
  sub_20BF6F200((uint64_t)&v6, v2);
  v3 = ceil(a1);
  v4 = floor(a1);
  if (a1 >= 0.0)
    v3 = v4;
  return (int)v3;
}

void sub_20C002ACC(uint64_t a1, __int128 *a2)
{
  _QWORD *exception;
  __int128 v3;
  uint64_t v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(&v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    v4 = *((_QWORD *)a2 + 2);
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C002B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C002B54(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *exception;

  if ((*a2 & 7) != 0)
  {
    v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 2, v2));
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C002BD8(uint64_t a1, __int128 *a2)
{
  _QWORD *exception;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(&v4, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 2);
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(&v6, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    v7 = *((_QWORD *)a2 + 5);
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C002C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C002CA8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<int>>::oper"
            "ator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<int>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C002D1C()
{
  JUMPOUT(0x20C002CCCLL);
}

_QWORD *sub_20C002D24(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<int>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<int>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

uint64_t sub_20C002DA0@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v5;

  v5 = 0;
  result = sub_20C00306C(&v5, a1, a2);
  *(_QWORD *)(a3 + 8) = &unk_24C520143;
  *(_DWORD *)a3 = v5;
  return result;
}

void sub_20C002E78(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = &off_24C51F4F8;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20BF640F0((uint64_t)v20, v8);
    sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 4 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_DWORD *)sub_20C00368C(&v18, v14, v15);
      sub_20C00306C(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_20C003708(&v18);
    }
    a4[1] = &off_24C51F4F8;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C002FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C002FE4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C002F5CLL);
  }
  JUMPOUT(0x20C002FCCLL);
}

void sub_20C00305C()
{
  __cxa_end_catch();
  JUMPOUT(0x20C002FCCLL);
}

uint64_t sub_20C00306C(_DWORD *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  std::string *v8;
  _QWORD *exception;
  std::string v10;
  _QWORD v11[4];
  char v12;

  v3 = *a3;
  v4 = *a3 + 1;
  v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v11[0] = "sdf/parserHelpers.cpp";
    v11[1] = "MakeScalarValueImpl";
    v11[2] = 113;
    v11[3] = "std::enable_if_t<std::is_integral<Int>::value> pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeSca"
             "larValueImpl(Int *, const vector<Value> &, size_t &) [Int = unsigned int]";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB7A0] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v10);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v10;
    else
      v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", (const char *)v8);
    std::string::~string(&v10);
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  result = sub_20C003190(v5 + 56 * v3);
  *a1 = result;
  return result;
}

void sub_20C003174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C003190(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v1 == -1)
    sub_20BF1C1FC();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_24C525050[v1])(&v4, a1);
}

void sub_20C0031E0()
{
  __break(1u);
}

void sub_20C003228()
{
  __cxa_end_catch();
  JUMPOUT(0x20C003230);
}

unint64_t sub_20C00323C(uint64_t *a1, unint64_t *a2)
{
  return sub_20C00326C(*a1, *a2);
}

uint64_t sub_20C003248(uint64_t *a1, uint64_t *a2)
{
  return sub_20C003304(*a1, *a2);
}

uint64_t sub_20C003254(uint64_t a1, double *a2)
{
  return sub_20C0033A4(*a2);
}

unint64_t sub_20C00326C(uint64_t a1, unint64_t a2)
{
  char v4;

  sub_20BF6F200((uint64_t)&v4, 2 * (HIDWORD(a2) != 0));
  return a2;
}

uint64_t sub_20C003304(uint64_t a1, uint64_t a2)
{
  int v3;
  char v5;

  if (a2 < 0)
    v3 = 1;
  else
    v3 = 2 * (a2 > 0xFFFFFFFFLL);
  sub_20BF6F200((uint64_t)&v5, v3);
  return a2;
}

uint64_t sub_20C0033A4(double a1)
{
  _QWORD *exception;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  return sub_20C0033F0(a1);
}

uint64_t sub_20C0033F0(double a1)
{
  int v2;
  double v3;
  double v4;
  char v6;

  if (a1 <= -1.0)
    v2 = 1;
  else
    v2 = 2 * (a1 >= 4294967300.0);
  sub_20BF6F200((uint64_t)&v6, v2);
  v3 = ceil(a1);
  v4 = floor(a1);
  if (a1 >= 0.0)
    return v4;
  return v3;
}

void sub_20C0034B0(uint64_t a1, __int128 *a2)
{
  _QWORD *exception;
  __int128 v3;
  uint64_t v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(&v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    v4 = *((_QWORD *)a2 + 2);
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C00351C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C003538(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *exception;

  if ((*a2 & 7) != 0)
  {
    v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 2, v2));
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C0035BC(uint64_t a1, __int128 *a2)
{
  _QWORD *exception;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(&v4, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 2);
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(&v6, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    v7 = *((_QWORD *)a2 + 5);
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C003658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C00368C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<unsigned in"
            "t>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C003700()
{
  JUMPOUT(0x20C0036B0);
}

_QWORD *sub_20C003708(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<unsigned int>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

uint64_t sub_20C003784@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  result = sub_20C003A4C(&v5, a1, a2);
  *a3 = v5;
  a3[1] = &unk_24C52036B;
  return result;
}

void sub_20C003858(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = &off_24C5250B0;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20C003FC4((uint64_t)v20, v8);
    sub_20C0046D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20C0046D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 8 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (uint64_t *)sub_20C004034(&v18, v14, v15);
      sub_20C003A4C(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_20C0040B0(&v18);
    }
    a4[1] = &off_24C5250B0;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C003994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C0039C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C00393CLL);
  }
  JUMPOUT(0x20C0039ACLL);
}

void sub_20C003A3C()
{
  __cxa_end_catch();
  JUMPOUT(0x20C0039ACLL);
}

uint64_t sub_20C003A4C(uint64_t *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  std::string *v8;
  _QWORD *exception;
  std::string v10;
  _QWORD v11[4];
  char v12;

  v3 = *a3;
  v4 = *a3 + 1;
  v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v11[0] = "sdf/parserHelpers.cpp";
    v11[1] = "MakeScalarValueImpl";
    v11[2] = 113;
    v11[3] = "std::enable_if_t<std::is_integral<Int>::value> pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeSca"
             "larValueImpl(Int *, const vector<Value> &, size_t &) [Int = long long]";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB7D0] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v10);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v10;
    else
      v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", (const char *)v8);
    std::string::~string(&v10);
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  result = sub_20C003B70(v5 + 56 * v3);
  *a1 = result;
  return result;
}

void sub_20C003B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C003B70(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v1 == -1)
    sub_20BF1C1FC();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_24C525080[v1])(&v4, a1);
}

void sub_20C003BC0()
{
  __break(1u);
}

void sub_20C003C08()
{
  __cxa_end_catch();
  JUMPOUT(0x20C003C10);
}

unint64_t sub_20C003C1C(uint64_t *a1, unint64_t *a2)
{
  return sub_20C003C48(*a1, *a2);
}

uint64_t sub_20C003C28(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t sub_20C003C30(uint64_t a1, double *a2)
{
  return sub_20C003CD8(*a2);
}

unint64_t sub_20C003C48(uint64_t a1, unint64_t a2)
{
  char v4;

  sub_20BF6F200((uint64_t)&v4, (a2 >> 62) & 2);
  return a2;
}

uint64_t sub_20C003CD8(double a1)
{
  _QWORD *exception;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  return sub_20C003D24(a1);
}

uint64_t sub_20C003D24(double a1)
{
  int v2;
  double v3;
  double v4;
  char v6;

  if (a1 <= -9.22337204e18)
    v2 = 1;
  else
    v2 = 2 * (a1 >= 9.22337204e18);
  sub_20BF6F200((uint64_t)&v6, v2);
  v3 = ceil(a1);
  v4 = floor(a1);
  if (a1 >= 0.0)
    return (uint64_t)v4;
  return (uint64_t)v3;
}

void sub_20C003DE8(uint64_t a1, __int128 *a2)
{
  _QWORD *exception;
  __int128 v3;
  uint64_t v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(&v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    v4 = *((_QWORD *)a2 + 2);
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C003E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C003E70(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *exception;

  if ((*a2 & 7) != 0)
  {
    v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 2, v2));
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C003EF4(uint64_t a1, __int128 *a2)
{
  _QWORD *exception;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(&v4, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 2);
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(&v6, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    v7 = *((_QWORD *)a2 + 5);
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C003F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C003FC4(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20C004484((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20C00401C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C004034(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<long long>>"
            "::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<long long>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0040A8()
{
  JUMPOUT(0x20C004058);
}

_QWORD *sub_20C0040B0(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<long long>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<long long>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t *sub_20C00412C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20C004154(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C0042E8(a1);
}

uint64_t sub_20C004164()
{
  return 1;
}

unint64_t sub_20C00416C(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (pxrInternal__aapl__pxrReserved__ *)v1[4], (char *)(8 * v2));
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t sub_20C0041C4(uint64_t *a1, uint64_t *a2)
{
  return sub_20C004340(*a1, *a2);
}

uint64_t sub_20C0041D0(uint64_t *a1, uint64_t a2)
{
  return sub_20C004340(*a1, a2);
}

uint64_t sub_20C0041DC()
{
  return 0;
}

_QWORD *sub_20C0041E8(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20C00446C);
  return a2;
}

void *sub_20C004230()
{
  return &unk_24C51DD50;
}

uint64_t sub_20C00423C()
{
  return 1;
}

uint64_t sub_20C004244()
{
  return MEMORY[0x24BEDB7D0];
}

uint64_t sub_20C004250(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20C004258(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20C004264(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAC1658 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C00429C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD50, a2, a3);
}

void *sub_20C0042BC()
{
  return &unk_24C51DD50;
}

uint64_t sub_20C0042C8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20C0042D0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = &off_24C5250B0;
  return sub_20BF56B40(a2, v2);
}

void **sub_20C0042E8(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_20C004340(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
    && sub_20BF569A8(a1, a2)
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = sub_20BF569A8(a1, a2);
  if ((_DWORD)result)
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 8 * *(_QWORD *)a1) == 0;
  return result;
}

uint64_t sub_20C0043C4(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20C0042E8(&v13);
  }
  return (uint64_t)*a1;
}

uint64_t sub_20C00446C(_QWORD *a1)
{
  *a1 += 8;
  return std::ostream::operator<<();
}

void sub_20C004484(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load((unint64_t *)v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20C004638((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                v10[i] = *(_QWORD *)(v9 + i * 8);
            }
          }
          v12 = *a3;
          v13 = v3;
          do
            v7[v13++] = *v12;
          while (a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (uint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20C004638((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 8 * v19;
      v22 = v20;
      do
      {
        v23 = *v7++;
        *v22++ = v23;
        v21 -= 8;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = v3;
      do
        v20[v25++] = *v24;
      while (a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 8 * a2;
  if (8 * a2 / a2 != 8)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20C004638((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    v16[v17 / 8] = *v18;
    v17 += 8;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (uint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20C004638(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<long long>::_AllocateNew(size_t) [T = long long]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20C0046BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C0046D4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique() [T = long long]", a3);
      v6 = (uint64_t *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20C004638((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 8 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

uint64_t sub_20C004768@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  result = sub_20C004A30(&v5, a1, a2);
  *a3 = v5;
  a3[1] = &unk_24C520423;
  return result;
}

void sub_20C00483C(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = &off_24C525198;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20C004FA0((uint64_t)v20, v8);
    sub_20C00562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20C00562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 8 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (uint64_t *)sub_20C005010(&v18, v14, v15);
      sub_20C004A30(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_20C00508C(&v18);
    }
    a4[1] = &off_24C525198;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C004978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C0049A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C004920);
  }
  JUMPOUT(0x20C004990);
}

void sub_20C004A20()
{
  __cxa_end_catch();
  JUMPOUT(0x20C004990);
}

uint64_t sub_20C004A30(uint64_t *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  std::string *v8;
  _QWORD *exception;
  std::string v10;
  _QWORD v11[4];
  char v12;

  v3 = *a3;
  v4 = *a3 + 1;
  v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v11[0] = "sdf/parserHelpers.cpp";
    v11[1] = "MakeScalarValueImpl";
    v11[2] = 113;
    v11[3] = "std::enable_if_t<std::is_integral<Int>::value> pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeSca"
             "larValueImpl(Int *, const vector<Value> &, size_t &) [Int = unsigned long long]";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB7D8] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v10);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v10;
    else
      v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", (const char *)v8);
    std::string::~string(&v10);
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  result = sub_20C004B54(v5 + 56 * v3);
  *a1 = result;
  return result;
}

void sub_20C004B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C004B54(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v1 == -1)
    sub_20BF1C1FC();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_24C525168[v1])(&v4, a1);
}

void sub_20C004BA4()
{
  __break(1u);
}

void sub_20C004BEC()
{
  __cxa_end_catch();
  JUMPOUT(0x20C004BF4);
}

uint64_t sub_20C004C00(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

unint64_t sub_20C004C08(uint64_t *a1, unint64_t *a2)
{
  return sub_20C004C2C(*a1, *a2);
}

unint64_t sub_20C004C14(uint64_t a1, double *a2)
{
  return sub_20C004CB8(*a2);
}

unint64_t sub_20C004C2C(uint64_t a1, unint64_t a2)
{
  char v4;

  sub_20BF6F200((uint64_t)&v4, a2 >> 63);
  return a2;
}

unint64_t sub_20C004CB8(double a1)
{
  _QWORD *exception;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  return sub_20C004D04(a1);
}

unint64_t sub_20C004D04(double a1)
{
  int v2;
  double v3;
  double v4;
  char v6;

  if (a1 <= -1.0)
    v2 = 1;
  else
    v2 = 2 * (a1 >= 1.84467441e19);
  sub_20BF6F200((uint64_t)&v6, v2);
  v3 = ceil(a1);
  v4 = floor(a1);
  if (a1 >= 0.0)
    return (unint64_t)v4;
  return (unint64_t)v3;
}

void sub_20C004DC4(uint64_t a1, __int128 *a2)
{
  _QWORD *exception;
  __int128 v3;
  uint64_t v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(&v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    v4 = *((_QWORD *)a2 + 2);
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C004E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C004E4C(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *exception;

  if ((*a2 & 7) != 0)
  {
    v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 2, v2));
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C004ED0(uint64_t a1, __int128 *a2)
{
  _QWORD *exception;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(&v4, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 2);
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(&v6, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    v7 = *((_QWORD *)a2 + 5);
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C004F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C004FA0(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20C0053DC((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20C004FF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C005010(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<unsigned lo"
            "ng long>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C005084()
{
  JUMPOUT(0x20C005034);
}

_QWORD *sub_20C00508C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<unsigned long long>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t *sub_20C005108(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20C005130(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C0052C4(a1);
}

uint64_t sub_20C005140()
{
  return 1;
}

unint64_t sub_20C005148(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (pxrInternal__aapl__pxrReserved__ *)v1[4], (char *)(8 * v2));
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t sub_20C0051A0(uint64_t *a1, uint64_t *a2)
{
  return sub_20C004340(*a1, *a2);
}

uint64_t sub_20C0051AC(uint64_t *a1, uint64_t a2)
{
  return sub_20C004340(*a1, a2);
}

uint64_t sub_20C0051B8()
{
  return 0;
}

_QWORD *sub_20C0051C4(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20C0053C4);
  return a2;
}

void *sub_20C00520C()
{
  return &unk_24C51DD68;
}

uint64_t sub_20C005218()
{
  return 1;
}

uint64_t sub_20C005220()
{
  return MEMORY[0x24BEDB7D8];
}

uint64_t sub_20C00522C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20C005234(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20C005240(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAC16BCLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C005278(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD68, a2, a3);
}

void *sub_20C005298()
{
  return &unk_24C51DD68;
}

uint64_t sub_20C0052A4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20C0052AC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = &off_24C525198;
  return sub_20BF56B40(a2, v2);
}

void **sub_20C0052C4(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_20C00531C(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20C0052C4(&v13);
  }
  return (uint64_t)*a1;
}

uint64_t sub_20C0053C4(_QWORD *a1)
{
  *a1 += 8;
  return std::ostream::operator<<();
}

void sub_20C0053DC(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load((unint64_t *)v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20C005590((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                v10[i] = *(_QWORD *)(v9 + i * 8);
            }
          }
          v12 = *a3;
          v13 = v3;
          do
            v7[v13++] = *v12;
          while (a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (uint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20C005590((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 8 * v19;
      v22 = v20;
      do
      {
        v23 = *v7++;
        *v22++ = v23;
        v21 -= 8;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = v3;
      do
        v20[v25++] = *v24;
      while (a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 8 * a2;
  if (8 * a2 / a2 != 8)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20C005590((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    v16[v17 / 8] = *v18;
    v17 += 8;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (uint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20C005590(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_AllocateNew(size_t) [T = unsigned long long]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20C005614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C00562C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique() [T = unsigned long long]", a3);
      v6 = (uint64_t *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20C005590((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 8 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

uint64_t sub_20C0056C0@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  __int16 v5;

  result = sub_20C005988(&v5, a1, a2);
  *(_QWORD *)(a3 + 8) = (char *)&off_24C5204D8 + 3;
  *(_WORD *)a3 = v5;
  return result;
}

void sub_20C005794(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C51E8C0;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20BF56CB0((uint64_t)v20, v8);
    sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 2 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_WORD *)sub_20C005DDC(&v18, v14, v15);
      sub_20C005988(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_20C005E58(&v18);
    }
    a4[1] = off_24C51E8C0;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C0058D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C005900(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C005878);
  }
  JUMPOUT(0x20C0058E8);
}

void sub_20C005978()
{
  __cxa_end_catch();
  JUMPOUT(0x20C0058E8);
}

uint64_t sub_20C005988(_WORD *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  float v7;
  uint64_t result;
  char *v9;
  _QWORD *exception;
  _QWORD v11[4];
  char v12;

  v3 = *a3;
  v4 = *a3 + 1;
  v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v9 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v11[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v9, 0x2Fu);
    v11[1] = "MakeScalarValueImpl";
    v11[2] = 99;
    v11[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfHalf *, const vector<Value> &, size_t &)";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "half");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  sub_20C005AC4(v5 + 56 * v3);
  if (v7 == 0.0)
  {
    result = HIWORD(LODWORD(v7));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23])
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23]
           + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  *a1 = result;
  return result;
}

uint64_t sub_20C005AC4(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v1 == -1)
    sub_20BF1C1FC();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_24C525250[v1])(&v4, a1);
}

void sub_20C005B14()
{
  __break(1u);
}

void sub_20C005B5C()
{
  __cxa_end_catch();
  JUMPOUT(0x20C005B64);
}

float sub_20C005B70(uint64_t a1, unint64_t *a2)
{
  return (float)*a2;
}

float sub_20C005B7C(uint64_t a1, uint64_t *a2)
{
  return (float)*a2;
}

float sub_20C005B88(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float sub_20C005B94(uint64_t *a1, uint64_t *a2)
{
  return sub_20C005BA8(*a1, a2);
}

float sub_20C005B9C(pxrInternal__aapl__pxrReserved__::TfToken **a1, _QWORD *a2)
{
  return sub_20C005CD0(*a1, a2);
}

float sub_20C005BA8(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  _QWORD *exception;

  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 != 3)
    {
      if (v2 != 4 || *(_DWORD *)a2 != 1718511917)
        goto LABEL_29;
      return -INFINITY;
    }
    if (*(_WORD *)a2 != 28265 || *((_BYTE *)a2 + 2) != 102)
      goto LABEL_20;
    return INFINITY;
  }
  v3 = a2[1];
  if (v3 == 3 && *(_WORD *)*a2 == 28265 && *(_BYTE *)(*a2 + 2) == 102)
    return INFINITY;
  if (v3 == 4)
  {
    if (*(_DWORD *)*a2 == 1718511917)
      return -INFINITY;
    v3 = a2[1];
  }
  if (v3 != 3)
    goto LABEL_29;
  a2 = (uint64_t *)*a2;
LABEL_20:
  if (*(_WORD *)a2 != 24942 || *((_BYTE *)a2 + 2) != 110)
  {
LABEL_29:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  return NAN;
}

float sub_20C005CD0(pxrInternal__aapl__pxrReserved__::TfToken *a1, _QWORD *a2)
{
  uint64_t *EmptyString;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  return sub_20C005BA8((uint64_t)a1, EmptyString);
}

void sub_20C005D0C(uint64_t a1, __int128 *a2)
{
  _QWORD *exception;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(&v4, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 2);
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(&v6, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    v7 = *((_QWORD *)a2 + 5);
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C005DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C005DDC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::pxr_half::half>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInter"
            "nal__aapl__pxrReserved__::pxr_half::half>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C005E50()
{
  JUMPOUT(0x20C005E00);
}

_QWORD *sub_20C005E58(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::operator++() [T = pxrInternal__aapl__pxrReserved__::V"
            "tArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 2;
  }
  return a1;
}

uint64_t sub_20C005ED4@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  _QWORD *exception;
  _QWORD v10[4];
  char v11;

  v4 = *a2;
  v5 = *a2 + 1;
  v6 = *a1;
  if (v5 > 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3))
  {
    v10[0] = "sdf/parserHelpers.cpp";
    v10[1] = "MakeScalarValueImpl";
    v10[2] = 93;
    v10[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(float *, const vector<Value> &, size_t &)";
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "float");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v5;
  result = sub_20C005AC4(v6 + 56 * v4);
  *(_QWORD *)(a3 + 8) = &unk_24C520593;
  *(_DWORD *)a3 = v8;
  return result;
}

void sub_20C006050(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  _QWORD *exception;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
    a4[1] = &off_24C51E808;
    sub_20BF56B40(a4, (uint64_t)&v28);
    sub_20BF5618C((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)&v28 = *a1;
    *((_QWORD *)&v28 + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)&v28, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(&v28);
    }
    while ((_QWORD)v28 != *((_QWORD *)&v28 + 1));
    sub_20BF56024((uint64_t)v26, v8);
    sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26, v9, v10);
    v11 = v27;
    sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26, v12, v13);
    v16 = 0;
    v24 = v11;
    v25 = v27 + 4 * v26[0];
    while (v24 != v25)
    {
      v17 = sub_20C006304(&v24, v14, v15);
      v18 = *(_QWORD *)a3;
      v19 = *(_QWORD *)a3 + 1;
      v20 = *a2;
      if (v19 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
      {
        *(_QWORD *)&v28 = "sdf/parserHelpers.cpp";
        *((_QWORD *)&v28 + 1) = "MakeScalarValueImpl";
        *(_QWORD *)&v29 = 93;
        *((_QWORD *)&v29 + 1) = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(float *, c"
                                "onst vector<Value> &, size_t &)";
        LOBYTE(v30) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "float");
        exception = __cxa_allocate_exception(8uLL);
        *exception = &unk_24C524E40;
        __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
      }
      v21 = (_DWORD *)v17;
      *(_QWORD *)a3 = v19;
      sub_20C005AC4(v20 + 56 * v18);
      *v21 = v22;
      ++v16;
      sub_20C006380(&v24);
    }
    a4[1] = &off_24C51E808;
    sub_20BF56B40(a4, (uint64_t)v26);
    sub_20BF5618C((uint64_t)v26);
  }
}

void sub_20C006250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C006280(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  char *v15;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v14, v15);
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    *(_OWORD *)v13 = a11;
    *(_QWORD *)(v13 + 16) = a12;
    *(_QWORD *)(v12 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C00617CLL);
  }
  JUMPOUT(0x20C006268);
}

void sub_20C0062F4()
{
  __cxa_end_catch();
  JUMPOUT(0x20C006268);
}

uint64_t sub_20C006304(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<float>>::op"
            "erator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<float>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C006378()
{
  JUMPOUT(0x20C006328);
}

_QWORD *sub_20C006380(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<float>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<float>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

uint64_t sub_20C0063FC@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *exception;
  _QWORD v10[4];
  char v11;

  v4 = *a2;
  v5 = *a2 + 1;
  v6 = *a1;
  if (v5 > 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3))
  {
    v10[0] = "sdf/parserHelpers.cpp";
    v10[1] = "MakeScalarValueImpl";
    v10[2] = 87;
    v10[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(double *, const vector<Value> &, size_t &)";
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "double");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v5;
  result = sub_20C00682C(v6 + 56 * v4);
  a3[1] = &unk_24C52064B;
  *a3 = v8;
  return result;
}

void sub_20C006578(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *exception;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
    a4[1] = &off_24C51E978;
    sub_20BF56B40(a4, (uint64_t)&v28);
    sub_20BF5618C((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)&v28 = *a1;
    *((_QWORD *)&v28 + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)&v28, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(&v28);
    }
    while ((_QWORD)v28 != *((_QWORD *)&v28 + 1));
    sub_20BF577E4((uint64_t)v26, v8);
    sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26, v9, v10);
    v11 = v27;
    sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26, v12, v13);
    v16 = 0;
    v24 = v11;
    v25 = v27 + 8 * v26[0];
    while (v24 != v25)
    {
      v17 = sub_20C006B40(&v24, v14, v15);
      v18 = *(_QWORD *)a3;
      v19 = *(_QWORD *)a3 + 1;
      v20 = *a2;
      if (v19 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
      {
        *(_QWORD *)&v28 = "sdf/parserHelpers.cpp";
        *((_QWORD *)&v28 + 1) = "MakeScalarValueImpl";
        *(_QWORD *)&v29 = 87;
        *((_QWORD *)&v29 + 1) = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(double *, "
                                "const vector<Value> &, size_t &)";
        LOBYTE(v30) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "double");
        exception = __cxa_allocate_exception(8uLL);
        *exception = &unk_24C524E40;
        __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
      }
      v21 = (_QWORD *)v17;
      *(_QWORD *)a3 = v19;
      sub_20C00682C(v20 + 56 * v18);
      *v21 = v22;
      ++v16;
      sub_20C006BBC(&v24);
    }
    a4[1] = &off_24C51E978;
    sub_20BF56B40(a4, (uint64_t)v26);
    sub_20BF5618C((uint64_t)v26);
  }
}

void sub_20C006778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C0067A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  char *v15;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v14, v15);
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    *(_OWORD *)v13 = a11;
    *(_QWORD *)(v13 + 16) = a12;
    *(_QWORD *)(v12 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C0066A4);
  }
  JUMPOUT(0x20C006790);
}

void sub_20C00681C()
{
  __cxa_end_catch();
  JUMPOUT(0x20C006790);
}

uint64_t sub_20C00682C(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v1 == -1)
    sub_20BF1C1FC();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_24C525280[v1])(&v4, a1);
}

void sub_20C00687C()
{
  __break(1u);
}

void sub_20C0068C4()
{
  __cxa_end_catch();
  JUMPOUT(0x20C0068CCLL);
}

double sub_20C0068D8(uint64_t a1, unint64_t *a2)
{
  return (double)*a2;
}

double sub_20C0068E4(uint64_t a1, uint64_t *a2)
{
  return (double)*a2;
}

double sub_20C0068F0(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

double sub_20C0068F8(uint64_t *a1, uint64_t *a2)
{
  return sub_20C00690C(*a1, a2);
}

double sub_20C006900(pxrInternal__aapl__pxrReserved__::TfToken **a1, _QWORD *a2)
{
  return sub_20C006A34(*a1, a2);
}

double sub_20C00690C(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  _QWORD *exception;

  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 != 3)
    {
      if (v2 != 4 || *(_DWORD *)a2 != 1718511917)
        goto LABEL_29;
      return -INFINITY;
    }
    if (*(_WORD *)a2 != 28265 || *((_BYTE *)a2 + 2) != 102)
      goto LABEL_20;
    return INFINITY;
  }
  v3 = a2[1];
  if (v3 == 3 && *(_WORD *)*a2 == 28265 && *(_BYTE *)(*a2 + 2) == 102)
    return INFINITY;
  if (v3 == 4)
  {
    if (*(_DWORD *)*a2 == 1718511917)
      return -INFINITY;
    v3 = a2[1];
  }
  if (v3 != 3)
    goto LABEL_29;
  a2 = (uint64_t *)*a2;
LABEL_20:
  if (*(_WORD *)a2 != 24942 || *((_BYTE *)a2 + 2) != 110)
  {
LABEL_29:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  return NAN;
}

double sub_20C006A34(pxrInternal__aapl__pxrReserved__::TfToken *a1, _QWORD *a2)
{
  uint64_t *EmptyString;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  return sub_20C00690C((uint64_t)a1, EmptyString);
}

void sub_20C006A70(uint64_t a1, __int128 *a2)
{
  _QWORD *exception;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(&v4, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 2);
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(&v6, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    v7 = *((_QWORD *)a2 + 5);
  }
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C006B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C006B40(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<double>>::o"
            "perator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<double>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C006BB4()
{
  JUMPOUT(0x20C006B64);
}

_QWORD *sub_20C006BBC(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<double>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<double>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_20C006C38@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *exception;
  _QWORD v10[4];
  char v11;

  v4 = *a2;
  v5 = *a2 + 1;
  v6 = *a1;
  if (v5 > 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3))
  {
    v10[0] = "sdf/parserHelpers.cpp";
    v10[1] = "MakeScalarValueImpl";
    v10[2] = 106;
    v10[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(SdfTimeCode *, const vector<V"
             "alue> &, size_t &)";
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "timecode");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v5;
  result = sub_20C00682C(v6 + 56 * v4);
  a3[1] = (char *)&off_24C5252B0 + 1;
  *a3 = v8;
  return result;
}

void sub_20C006DB4(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *exception;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
    a4[1] = &off_24C525378;
    sub_20BF56B40(a4, (uint64_t)&v28);
    sub_20BF5618C((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)&v28 = *a1;
    *((_QWORD *)&v28 + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)&v28, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(&v28);
    }
    while ((_QWORD)v28 != *((_QWORD *)&v28 + 1));
    sub_20C0071B0((uint64_t)v26, v8);
    sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26, v9, v10);
    v11 = v27;
    sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26, v12, v13);
    v16 = 0;
    v24 = v11;
    v25 = v27 + 8 * v26[0];
    while (v24 != v25)
    {
      v17 = sub_20C007220(&v24, v14, v15);
      v18 = *(_QWORD *)a3;
      v19 = *(_QWORD *)a3 + 1;
      v20 = *a2;
      if (v19 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
      {
        *(_QWORD *)&v28 = "sdf/parserHelpers.cpp";
        *((_QWORD *)&v28 + 1) = "MakeScalarValueImpl";
        *(_QWORD *)&v29 = 106;
        *((_QWORD *)&v29 + 1) = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(SdfTimeCod"
                                "e *, const vector<Value> &, size_t &)";
        LOBYTE(v30) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "timecode");
        exception = __cxa_allocate_exception(8uLL);
        *exception = &unk_24C524E40;
        __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
      }
      v21 = (_QWORD *)v17;
      *(_QWORD *)a3 = v19;
      sub_20C00682C(v20 + 56 * v18);
      *v21 = v22;
      ++v16;
      sub_20C00729C(&v24);
    }
    a4[1] = &off_24C525378;
    sub_20BF56B40(a4, (uint64_t)v26);
    sub_20BF5618C((uint64_t)v26);
  }
}

void sub_20C006FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C006FE4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  char *v15;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v14, v15);
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    *(_OWORD *)v13 = a11;
    *(_QWORD *)(v13 + 16) = a12;
    *(_QWORD *)(v12 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C006EE0);
  }
  JUMPOUT(0x20C006FCCLL);
}

void sub_20C007058()
{
  __cxa_end_catch();
  JUMPOUT(0x20C006FCCLL);
}

_QWORD *sub_20C007068(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_20C007078(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20C007084()
{
  return 1;
}

unint64_t sub_20C00708C(double *a1)
{
  unint64_t v1;

  v1 = 0x9E3779B97F4A7C55 * *(_QWORD *)a1;
  if (*a1 == 0.0)
    v1 = 0;
  return bswap64(v1);
}

BOOL sub_20C0070B8(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL sub_20C0070CC(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20C0070E4()
{
  return 0;
}

uint64_t sub_20C0070F0()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_20C007100()
{
  return &unk_24C525368;
}

uint64_t sub_20C00710C()
{
  return 0;
}

uint64_t sub_20C007114()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C007120()
{
  return 0;
}

uint64_t sub_20C007128()
{
  return 0;
}

BOOL sub_20C007130(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CACA312 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C007168(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C525368, a2, a3);
}

void *sub_20C007188()
{
  return &unk_24C525368;
}

_QWORD *sub_20C007198@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_24C5252B0 + 1;
  return result;
}

uint64_t sub_20C0071B0(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20C0075EC((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20C007208(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C007220(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::SdfTimeCode>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::SdfTimeCode>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C007294()
{
  JUMPOUT(0x20C007244);
}

_QWORD *sub_20C00729C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtAr"
            "ray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t *sub_20C007318(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20C007340(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C007484(a1);
}

uint64_t sub_20C007350()
{
  return 1;
}

unint64_t sub_20C007358(unint64_t **a1)
{
  return sub_20C0074DC(*a1);
}

BOOL sub_20C007360(_QWORD **a1, uint64_t *a2)
{
  return sub_20BF57F48(*a1, *a2);
}

BOOL sub_20C00736C(_QWORD **a1, uint64_t a2)
{
  return sub_20BF57F48(*a1, a2);
}

uint64_t sub_20C007378()
{
  return 0;
}

_QWORD *sub_20C007384(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20C0075D4);
  return a2;
}

void *sub_20C0073CC()
{
  return &unk_24C525430;
}

uint64_t sub_20C0073D8()
{
  return 1;
}

void *sub_20C0073E0()
{
  return &unk_24C525368;
}

uint64_t sub_20C0073EC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20C0073F4(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20C007400(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CACA2D2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C007438(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C525430, a2, a3);
}

void *sub_20C007458()
{
  return &unk_24C525430;
}

uint64_t sub_20C007464(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20C00746C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = &off_24C525378;
  return sub_20BF56B40(a2, v2);
}

void **sub_20C007484(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20C0074DC(unint64_t *a1)
{
  unint64_t v1;
  double *v2;
  unint64_t v3;
  double v4;
  double v5;

  v1 = *a1;
  if (*a1)
  {
    v2 = (double *)a1[4];
    v3 = *a1;
    do
    {
      v4 = *v2++;
      v5 = v4;
      if (v4 == 0.0)
        v5 = 0.0;
      v1 = *(_QWORD *)&v5 + ((*(_QWORD *)&v5 + v1 + (*(_QWORD *)&v5 + v1) * (*(_QWORD *)&v5 + v1)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

uint64_t sub_20C00752C(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20C007484(&v13);
  }
  return (uint64_t)*a1;
}

uint64_t sub_20C0075D4(_QWORD *a1)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_20C0075EC(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load((unint64_t *)v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20C0077A0((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                v10[i] = *(_QWORD *)(v9 + i * 8);
            }
          }
          v12 = *a3;
          v13 = v3;
          do
            v7[v13++] = *v12;
          while (a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (uint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20C0077A0((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 8 * v19;
      v22 = v20;
      do
      {
        v23 = *v7++;
        *v22++ = v23;
        v21 -= 8;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = v3;
      do
        v20[v25++] = *v24;
      while (a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 8 * a2;
  if (8 * a2 / a2 != 8)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20C0077A0((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    v16[v17 / 8] = *v18;
    v17 += 8;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (uint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20C0077A0(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>::_AllocateNew(size_t) [ELEM = pxrInternal__aapl__pxrReserved__::SdfTimeCode]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20C007824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C00783C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::SdfTimeCode]", a3);
      v6 = (uint64_t *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20C0077A0((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 8 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

void sub_20C0078D0(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  sub_20C007BD0(&__p, a1, a2);
  *(_QWORD *)(a3 + 8) = &off_24C520700;
  sub_20BF77444((unsigned int **)a3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C007948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C0079C8()
{
  __cxa_end_catch();
  JUMPOUT(0x20C00794CLL);
}

void sub_20C0079D8(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C525448;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20C008280(v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20C007D50((uint64_t)v20, v8);
    sub_20C008768((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20C008768((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 24 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (std::string *)sub_20C007DE4(&v18, v14, v15);
      sub_20C007BD0(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_20C007E60(&v18);
    }
    a4[1] = off_24C525448;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20C008280(v20);
  }
}

void sub_20C007B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C008280((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20C007B48(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C007AC0);
  }
  JUMPOUT(0x20C007B30);
}

void sub_20C007BC0()
{
  __cxa_end_catch();
  JUMPOUT(0x20C007B30);
}

std::string *sub_20C007BD0(std::string *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  const std::string *v7;
  char *v9;
  _QWORD *exception;
  _QWORD v11[4];
  char v12;

  v3 = *a3;
  v4 = *a3 + 1;
  v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v9 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v11[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v9, 0x2Fu);
    v11[1] = "MakeScalarValueImpl";
    v11[2] = 74;
    v11[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(string *, const vector<Value> &, size_t &)";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "string");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  v7 = (const std::string *)sub_20C007CCC(v5 + 56 * v3);
  return std::string::operator=(a1, v7);
}

uint64_t sub_20C007CCC(uint64_t result)
{
  if (*(_DWORD *)(result + 48) != 3)
    sub_20BF1C1FC();
  return result;
}

void sub_20C007CF4()
{
  __break(1u);
}

void sub_20C007D3C()
{
  __cxa_end_catch();
  JUMPOUT(0x20C007D44);
}

uint64_t sub_20C007D50(uint64_t a1, unint64_t a2)
{
  void *__p[2];
  uint64_t v6;
  void **v7;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __p[0] = 0;
  __p[1] = 0;
  v6 = 0;
  sub_20C008340((_QWORD *)a1);
  v7 = __p;
  sub_20C0083C4((unint64_t *)a1, a2, (__int128 **)&v7);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20C007DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;

  if (a14 < 0)
    operator delete(__p);
  sub_20C008280(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C007DE4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<std::string"
            ">>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<std::string>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C007E58()
{
  JUMPOUT(0x20C007E08);
}

_QWORD *sub_20C007E60(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<std::string>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<std::string>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 24;
  }
  return a1;
}

uint64_t *sub_20C007EDC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

unsigned int **sub_20C007F04(unsigned int **a1, unsigned int **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C008094(a1);
}

uint64_t sub_20C007F14()
{
  return 1;
}

unint64_t sub_20C007F1C(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  sub_20BFB7FC4((unint64_t)&v4, (uint64_t *)v1[4], v2);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t sub_20C007F70(uint64_t **a1, uint64_t *a2)
{
  return sub_20C0080EC(*a1, *a2);
}

uint64_t sub_20C007F7C(uint64_t **a1, uint64_t a2)
{
  return sub_20C0080EC(*a1, a2);
}

uint64_t sub_20C007F88()
{
  return 0;
}

_QWORD *sub_20C007F94(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20C008250);
  return a2;
}

void *sub_20C007FDC()
{
  return &unk_24C51DDC8;
}

uint64_t sub_20C007FE8()
{
  return 1;
}

void *sub_20C007FF0()
{
  return &unk_24C516910;
}

uint64_t sub_20C007FFC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20C008004(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20C008010(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAB12F6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C008048(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DDC8, a2, a3);
}

void *sub_20C008068()
{
  return &unk_24C51DDC8;
}

uint64_t sub_20C008074(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20C00807C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C525448;
  return sub_20BF56B40(a2, v2);
}

unsigned int **sub_20C008094(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20C008280(v2);
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_20C0080EC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (unsigned __int8 *)a1[4];
  v7 = *(unsigned __int8 **)(a2 + 32);
  v8 = 24 * v5 - 24;
  do
  {
    result = sub_20BEB4EF8((uint64_t)&v10, v6, v7);
    if (!(_DWORD)result)
      break;
    v6 += 24;
    v7 += 24;
    v9 = v8;
    v8 -= 24;
  }
  while (v9);
  return result;
}

uint64_t sub_20C0081A8(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = (unsigned int *)v4;
    *a1 = v3;
    sub_20C008094(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20C008250(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  *a1 += 24;
  v4 = *(char *)(v3 + 23);
  if (v4 >= 0)
    v5 = v3;
  else
    v5 = *(_QWORD *)v3;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 23);
  else
    v6 = *(_QWORD *)(v3 + 8);
  return sub_20BDDC1C8(a2, v5, v6);
}

void sub_20C008280(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v10 = __ldxr(v3);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v3));
      if (!v11)
      {
        __dmb(9u);
        v12 = *(void (**)(void))(*v4 + 8);
        if (v12)
          v12();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 24 * *a1;
          do
          {
            if (*(char *)(v8 + 23) < 0)
              operator delete(*(void **)v8);
            v8 += 24;
            v9 -= 24;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C008340(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      sub_20C008280(a1);
    }
    else if (*a1)
    {
      v4 = a1[4];
      v5 = 24 * *a1;
      do
      {
        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        v4 += 24;
        v5 -= 24;
      }
      while (v5);
    }
    *a1 = 0;
  }
}

void sub_20C0083C4(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_11;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 >= a2)
        {
          v13 = 3 * a2;
          do
          {
            if (SHIBYTE(v7[v13 + 2]) < 0)
              operator delete((void *)v7[v13]);
            v13 += 3;
          }
          while (3 * v3 != v13);
          goto LABEL_23;
        }
        v9 = a1[4];
        if (*(_QWORD *)(v9 - 8) < a2)
        {
          v7 = sub_20C008558((uint64_t)a1, a2);
          sub_20C0086AC(v9, v9 + 24 * v3, (uint64_t)v7);
        }
LABEL_17:
        v10 = (uint64_t)&v7[3 * v3];
        goto LABEL_18;
      }
      v7 = (_QWORD *)a1[4];
    }
    v11 = (uint64_t)v7;
    if (v3 >= a2)
      v12 = a2;
    else
      v12 = *a1;
    v7 = sub_20C008558((uint64_t)a1, a2);
    sub_20C0086AC(v11, v11 + 24 * v12, (uint64_t)v7);
    if (v3 >= a2)
      goto LABEL_23;
    goto LABEL_17;
  }
  if (a2 > 0xAAAAAAAAAAAAAAALL)
  {
LABEL_11:
    sub_20C008340(a1);
    return;
  }
  v7 = sub_20C008558((uint64_t)a1, a2);
  v10 = (uint64_t)v7;
LABEL_18:
  sub_20C0085FC(a3, v10, (uint64_t)&v7[3 * a2]);
LABEL_23:
  if (v7 != (_QWORD *)a1[4])
  {
    sub_20C008280(a1);
    a1[4] = (unint64_t)v7;
  }
  *a1 = a2;
}

_QWORD *sub_20C008558(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew(size_t) [T = std::string]");
  if (a2 > 0xAAAAAAAAAAAAAA9)
    v3 = -1;
  else
    v3 = 24 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20C0085E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 **sub_20C0085FC(__int128 **result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 *v6;
  __int128 v7;

  if (a2 != a3)
  {
    v5 = 0;
    v6 = *result;
    do
    {
      result = (__int128 **)(a2 + v5);
      if (*((char *)v6 + 23) < 0)
      {
        result = (__int128 **)sub_20BDDBFAC(result, *(void **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v7 = *v6;
        result[2] = (__int128 *)*((_QWORD *)v6 + 2);
        *(_OWORD *)result = v7;
      }
      v5 += 24;
    }
    while (a2 + v5 != a3);
  }
  return result;
}

void sub_20C00866C(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 24)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
  __cxa_rethrow();
}

void sub_20C008698(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20C0086AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = (__int128 *)(a1 + v6);
      if (*(char *)(a1 + v6 + 23) < 0)
      {
        sub_20BDDBFAC((_BYTE *)v7, *(void **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
        *(_OWORD *)v7 = v9;
      }
      v6 += 24;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_20C008728(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 24)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
  __cxa_rethrow();
}

void sub_20C008754(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20C008768(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique() [T = std::string]", a3);
      v6 = *((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20C008558((uint64_t)this, *(_QWORD *)this);
      sub_20C0086AC(v6, v6 + 24 * v7, (uint64_t)v8);
      sub_20C008280(this);
      *((_QWORD *)this + 4) = v8;
    }
  }
}

uint64_t sub_20C0087F4@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, unsigned int **a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;

  v10 = 0;
  result = sub_20C008B28(&v10, a1, a2);
  v5 = v10;
  *a3 = (unsigned int *)v10;
  a3[1] = (unsigned int *)((char *)&off_24C5207B8 + 1);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *a3 = v6;
  }
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return result;
}

void sub_20C008934(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C525500;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20C00918C(v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20C008C78((uint64_t)v20, v8);
    sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 8 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (uint64_t *)sub_20C008D28(&v18, v14, v15);
      sub_20C008B28(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_20C008DA4(&v18);
    }
    a4[1] = off_24C525500;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20C00918C(v20);
  }
}

void sub_20C008A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C00918C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20C008AA0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C008A18);
  }
  JUMPOUT(0x20C008A88);
}

void sub_20C008B18()
{
  __cxa_end_catch();
  JUMPOUT(0x20C008A88);
}

uint64_t sub_20C008B28(uint64_t *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  _QWORD *exception;
  _QWORD v16[4];
  char v17;

  v3 = *a3;
  v4 = *a3 + 1;
  v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v14 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v16[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v14, 0x2Fu);
    v16[1] = "MakeScalarValueImpl";
    v16[2] = 80;
    v16[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(TfToken *, const vector<Value> &, size_t &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "token");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  sub_20C007CCC(v5 + 56 * v3);
  result = pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v16);
  v8 = *a1;
  v9 = *a1 & 7;
  if (v16 == a1)
  {
    if (v9)
    {
      v12 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  else
  {
    if (v9)
    {
      v10 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    *a1 = v16[0];
  }
  return result;
}

uint64_t sub_20C008C78(uint64_t a1, unint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t *v8;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v7 = 0;
  sub_20C00924C((_QWORD *)a1);
  v8 = &v7;
  sub_20C0092D4((uint64_t *)a1, a2, &v8);
  if ((v7 & 7) != 0)
  {
    v4 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  return a1;
}

void sub_20C008CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  unsigned int *v11;
  unsigned int v12;

  if ((a9 & 7) != 0)
  {
    v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  sub_20C00918C(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C008D28(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::TfToken>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::TfToken>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C008D9C()
{
  JUMPOUT(0x20C008D4CLL);
}

_QWORD *sub_20C008DA4(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::TfToken>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::TfToken>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t *sub_20C008E20(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

unsigned int **sub_20C008E48(unsigned int **a1, unsigned int **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C008FD0(a1);
}

uint64_t sub_20C008E58()
{
  return 1;
}

unint64_t sub_20C008E60(unint64_t **a1)
{
  unint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;

  v1 = **a1;
  if (v1)
  {
    v2 = (uint64_t *)(*a1)[4];
    v3 = **a1;
    do
    {
      v4 = *v2++;
      v1 = (v4 & 0xFFFFFFFFFFFFFFF8)
         + (((v4 & 0xFFFFFFFFFFFFFFF8) + v1 + ((v4 & 0xFFFFFFFFFFFFFFF8) + v1) * ((v4 & 0xFFFFFFFFFFFFFFF8) + v1)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_20C008EAC(_QWORD **a1, uint64_t *a2)
{
  return sub_20C009028(*a1, *a2);
}

BOOL sub_20C008EB8(_QWORD **a1, uint64_t a2)
{
  return sub_20C009028(*a1, a2);
}

uint64_t sub_20C008EC4()
{
  return 0;
}

_QWORD *sub_20C008ED0(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20C009174);
  return a2;
}

void *sub_20C008F18()
{
  return &unk_24C51DDE0;
}

uint64_t sub_20C008F24()
{
  return 1;
}

void *sub_20C008F2C()
{
  return &unk_24C51BCE0;
}

uint64_t sub_20C008F38(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20C008F40(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20C008F4C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAB1366 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C008F84(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DDE0, a2, a3);
}

void *sub_20C008FA4()
{
  return &unk_24C51DDE0;
}

uint64_t sub_20C008FB0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20C008FB8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C525500;
  return sub_20BF56B40(a2, v2);
}

unsigned int **sub_20C008FD0(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20C00918C(v2);
      operator delete(v2);
    }
  }
  return a1;
}

BOOL sub_20C009028(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (uint64_t *)a1[4];
  v6 = *(uint64_t **)(a2 + 32);
  v7 = 8 * *a1 - 8;
  do
  {
    v8 = *v5++;
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    v10 = *v6++;
    result = v9 == (v10 & 0xFFFFFFFFFFFFFFF8);
    v11 = v9 != (v10 & 0xFFFFFFFFFFFFFFF8) || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t sub_20C0090CC(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = (unsigned int *)v4;
    *a1 = v3;
    sub_20C008FD0(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20C009174(_QWORD **a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (*a1)++;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

void sub_20C00918C(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);

  v1 = a1[4];
  if (v1)
  {
    v3 = a1 + 3;
    v2 = (unint64_t *)a1[3];
    if (v2)
    {
      do
      {
        v11 = __ldxr(v2);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v2));
      if (!v12)
      {
        __dmb(9u);
        v13 = *(void (**)(void))(*v3 + 8);
        if (v13)
          v13();
      }
    }
    else
    {
      v4 = (unint64_t *)(v1 - 16);
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        __dmb(9u);
        v7 = (_QWORD *)a1[4];
        if (*a1)
        {
          v8 = &v7[*a1];
          do
          {
            if ((*v7 & 7) != 0)
            {
              v9 = (unsigned int *)(*v7 & 0xFFFFFFFFFFFFFFF8);
              do
                v10 = __ldxr(v9);
              while (__stlxr(v10 - 2, v9));
            }
            ++v7;
          }
          while (v7 != v8);
          v7 = (_QWORD *)a1[4];
        }
        operator delete(v7 - 2);
      }
    }
    *v3 = 0;
    v3[1] = 0;
  }
}

void sub_20C00924C(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;

  v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      sub_20C00918C(a1);
    }
    else if (*a1)
    {
      v4 = (_QWORD *)a1[4];
      v5 = &v4[*a1];
      do
      {
        if ((*v4 & 7) != 0)
        {
          v6 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
          do
            v7 = __ldxr(v6);
          while (__stlxr(v7 - 2, v6));
        }
        ++v4;
      }
      while (v4 != v5);
    }
    *a1 = 0;
  }
}

void sub_20C0092D4(uint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t *v27;
  unsigned int *v28;
  unsigned int v29;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_26;
  v7 = (uint64_t *)a1[4];
  if (!v7)
  {
    if (8 * a2 / a2 == 8)
    {
      v7 = sub_20C009504((uint64_t)a1, a2);
      v15 = *a3;
      v16 = v7;
      do
      {
        v17 = *v15;
        *v16 = *v15;
        if ((v17 & 7) != 0)
        {
          v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 2, v18));
          if ((v19 & 1) == 0)
            *v16 &= 0xFFFFFFFFFFFFFFF8;
        }
        ++v16;
      }
      while (v16 != &v7[a2]);
      goto LABEL_45;
    }
LABEL_26:
    sub_20C00924C(a1);
    return;
  }
  if (a1[3])
    goto LABEL_28;
  v8 = atomic_load((unint64_t *)v7 - 2);
  if (v8 != 1)
  {
    v7 = (uint64_t *)a1[4];
LABEL_28:
    if (v3 >= a2)
      v20 = a2;
    else
      v20 = *a1;
    v21 = sub_20C0095A0((uint64_t)a1, v7, a2, v20);
    v7 = v21;
    if (v3 < a2)
    {
      v22 = &v21[v3];
      v23 = *a3;
      do
      {
        v24 = *v23;
        *v22 = *v23;
        if ((v24 & 7) != 0)
        {
          v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 2, v25));
          if ((v26 & 1) == 0)
            *v22 &= 0xFFFFFFFFFFFFFFF8;
        }
        ++v22;
      }
      while (v22 != &v21[a2]);
    }
    goto LABEL_45;
  }
  if (v3 >= a2)
  {
    v27 = &v7[a2];
    do
    {
      if ((*v27 & 7) != 0)
      {
        v28 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      ++v27;
    }
    while (v27 != &v7[v3]);
  }
  else
  {
    v9 = (uint64_t *)a1[4];
    if (*(v9 - 1) < a2)
      v7 = sub_20C0095A0((uint64_t)a1, v9, a2, *a1);
    v10 = *a3;
    v11 = &v7[v3];
    do
    {
      v12 = *v10;
      *v11 = *v10;
      if ((v12 & 7) != 0)
      {
        v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 2, v13));
        if ((v14 & 1) == 0)
          *v11 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v11;
    }
    while (v11 != &v7[a2]);
  }
LABEL_45:
  if (v7 != (uint64_t *)a1[4])
  {
    sub_20C00918C(a1);
    a1[4] = (uint64_t)v7;
  }
  *a1 = a2;
}

_QWORD *sub_20C009504(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::TfToken]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20C009588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C0095A0(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t *result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  result = sub_20C009504(a1, a3);
  if (a4)
  {
    v7 = &a2[a4];
    v8 = result;
    do
    {
      v9 = *a2;
      *v8 = *a2;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          *v8 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++a2;
      ++v8;
    }
    while (a2 != v7);
  }
  return result;
}

void sub_20C009618(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t *v6;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::TfToken]", a3);
      v6 = sub_20C0095A0((uint64_t)this, *((uint64_t **)this + 4), *(_QWORD *)this, *(_QWORD *)this);
      sub_20C00918C(this);
      *((_QWORD *)this + 4) = v6;
    }
  }
}

void sub_20C009688(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  void *v6[2];
  char v7;
  void *__p;
  char v9;

  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v6);
  sub_20C00999C((uint64_t)v6, a1, a2);
  *(_QWORD *)(a3 + 8) = &off_24C5255B8;
  sub_20C00A0DC((char **)a3, (__int128 *)v6);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_20C00971C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BE930F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C009794()
{
  __cxa_end_catch();
  JUMPOUT(0x20C009720);
}

void sub_20C0097A4(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = &off_24C525670;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20C00A724(v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20C00A144((uint64_t)v20, v8);
    sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 48 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = sub_20C00A1EC(&v18, v14, v15);
      sub_20C00999C(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_20C00A268(&v18);
    }
    a4[1] = &off_24C525670;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20C00A724(v20);
  }
}

void sub_20C0098E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C00A724((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20C009914(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C00988CLL);
  }
  JUMPOUT(0x20C0098FCLL);
}

void sub_20C00998C()
{
  __cxa_end_catch();
  JUMPOUT(0x20C0098FCLL);
}

void sub_20C00999C(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void **v7;
  int v8;
  char *v9;
  _QWORD *exception;
  void *__p[2];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v3 = *a3;
  v4 = *a3 + 1;
  v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v9 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    __p[0] = (void *)sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v9, 0x2Fu);
    __p[1] = "MakeScalarValueImpl";
    v12 = 294;
    *(_QWORD *)&v13 = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(SdfAssetPath *, cons"
                      "t vector<Value> &, size_t &)";
    BYTE8(v13) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "asset");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  sub_20C009B0C(v5 + 56 * v3, (uint64_t)__p);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 16) = v12;
  HIBYTE(v12) = 0;
  LOBYTE(__p[0]) = 0;
  v7 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*v7);
    v8 = SHIBYTE(v12);
    *(_OWORD *)v7 = v13;
    *(_QWORD *)(a1 + 40) = v14;
    HIBYTE(v14) = 0;
    LOBYTE(v13) = 0;
    if (v8 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v7 = v13;
    *(_QWORD *)(a1 + 40) = v14;
  }
}

_BYTE *sub_20C009B0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20C009B90(a1, a2);
}

_BYTE *sub_20C009B90@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v4;
  _BYTE *result;

  v4 = *(_DWORD *)(a1 + 48);
  if (v4 == 5)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
    }
    result = (_BYTE *)(a2 + 24);
    if (*(char *)(a1 + 47) < 0)
    {
      return sub_20BDDBFAC(result, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      *(_OWORD *)result = *(_OWORD *)(a1 + 24);
      *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    }
  }
  else
  {
    if (v4 != 3)
      sub_20BF1C1FC();
    return (_BYTE *)pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(a2, a1);
  }
  return result;
}

void sub_20C009C30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C009C4C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 48);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_20C009C74(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C009DC8(a1);
}

uint64_t sub_20C009C84()
{
  return 1;
}

unint64_t sub_20C009C8C(pxrInternal__aapl__pxrReserved__ **a1)
{
  pxrInternal__aapl__pxrReserved__ *v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = (uint64_t)*a1 + 24;
  v4 = 0;
  v5 = 0;
  sub_20C009E34((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1, v2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

uint64_t sub_20C009CE0(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return sub_20C009E8C(*a1, *a2);
}

uint64_t sub_20C009CEC(unsigned __int8 **a1, unsigned __int8 *a2)
{
  return sub_20C009E8C(*a1, a2);
}

uint64_t sub_20C009CF8()
{
  return 0;
}

_QWORD *sub_20C009D04(uint64_t *a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20C009D14()
{
  return &unk_24C524DB0;
}

uint64_t sub_20C009D20()
{
  return 0;
}

uint64_t sub_20C009D28()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C009D34()
{
  return 0;
}

uint64_t sub_20C009D3C()
{
  return 0;
}

BOOL sub_20C009D44(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAC983ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C009D7C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C524DB0, a2, a3);
}

void *sub_20C009D9C()
{
  return &unk_24C524DB0;
}

uint64_t sub_20C009DA8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20C009DB0@<X0>(__int128 **a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;

  v2 = *a1;
  *(_QWORD *)(a2 + 8) = &off_24C5255B8;
  return sub_20C00A0DC((char **)a2, v2);
}

uint64_t *sub_20C009DC8(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 48);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      if (*(char *)(v2 + 47) < 0)
        operator delete(*(void **)(v2 + 24));
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      operator delete((void *)v2);
    }
  }
  return a1;
}

unint64_t sub_20C009E34(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3)
{
  char *v5;
  char *v6;
  int v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  char *v9;

  v5 = (char *)*((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(pxrInternal__aapl__pxrReserved__ **)a2;
    v6 = v5;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2, v6);
  v7 = *(char *)(a3 + 23);
  if (v7 >= 0)
    v8 = (pxrInternal__aapl__pxrReserved__ *)a3;
  else
    v8 = *(pxrInternal__aapl__pxrReserved__ **)a3;
  if (v7 >= 0)
    v9 = (char *)*(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(char **)(a3 + 8);
  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, v8, v9);
}

uint64_t sub_20C009E8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v24;
  uint64_t result;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v9 = a1[47];
  if ((v9 & 0x80u) == 0)
    v10 = a1[47];
  else
    v10 = *((_QWORD *)a1 + 4);
  v11 = v6[47];
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)v6 + 4);
  if (v10 != v11)
    return 0;
  v13 = (const void **)(a1 + 24);
  v16 = (unsigned __int8 *)*((_QWORD *)v6 + 3);
  v15 = v6 + 24;
  v14 = v16;
  if (v12 >= 0)
    v17 = v15;
  else
    v17 = v14;
  if ((v9 & 0x80) != 0)
    return memcmp(*v13, v17, *((_QWORD *)a1 + 4)) == 0;
  if (!a1[47])
    return 1;
  v18 = v9 - 1;
  do
  {
    v20 = *(unsigned __int8 *)v13;
    v13 = (const void **)((char *)v13 + 1);
    v19 = v20;
    v22 = *v17++;
    v21 = v22;
    v24 = v18-- != 0;
    result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

__int128 *sub_20C009FB4(__int128 **a1)
{
  unsigned int v2;
  char *v3;
  unsigned int *v4;
  unsigned int v5;
  __int128 *v7;

  v2 = atomic_load((unsigned int *)*a1 + 12);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x38uLL);
    sub_20C00A040(v3, *a1);
    v4 = (unsigned int *)(v3 + 48);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v7 = *a1;
    *a1 = (__int128 *)v3;
    sub_20C009DC8((uint64_t *)&v7);
  }
  return *a1;
}

void sub_20C00A02C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20C00A040(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  atomic_store(0, (unsigned int *)__dst + 12);
  return __dst;
}

void sub_20C00A0C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20C00A0DC(char **a1, __int128 *a2)
{
  char *v4;
  char *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (char *)operator new(0x38uLL);
  result = sub_20C00A040(v4, a2);
  *a1 = v4;
  v6 = (unsigned int *)(v4 + 48);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20C00A130(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C00A144(uint64_t a1, unint64_t a2)
{
  void *v5[2];
  char v6;
  void *__p;
  char v8;
  void **v9;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v5);
  sub_20C00A7F8((_QWORD *)a1);
  v9 = v5;
  sub_20C00A890((unint64_t *)a1, a2, (__int128 **)&v9);
  if (v8 < 0)
    operator delete(__p);
  if (v6 < 0)
    operator delete(v5[0]);
  return a1;
}

void sub_20C00A1C4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20C00A724(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C00A1EC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::SdfAssetPath>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInterna"
            "l__aapl__pxrReserved__::SdfAssetPath>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C00A260()
{
  JUMPOUT(0x20C00A210);
}

_QWORD *sub_20C00A268(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtA"
            "rray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 48;
  }
  return a1;
}

uint64_t *sub_20C00A2E4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

unsigned int **sub_20C00A30C(unsigned int **a1, unsigned int **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C00A46C(a1);
}

uint64_t sub_20C00A31C()
{
  return 1;
}

unint64_t sub_20C00A324(uint64_t **a1)
{
  char v2;

  return sub_20C00A4C4((uint64_t)&v2, *a1);
}

uint64_t sub_20C00A348(uint64_t **a1, uint64_t *a2)
{
  return sub_20C00A5B4(*a1, *a2);
}

uint64_t sub_20C00A354(uint64_t **a1, uint64_t a2)
{
  return sub_20C00A5B4(*a1, a2);
}

uint64_t sub_20C00A360()
{
  return 0;
}

_QWORD *sub_20C00A36C(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20C00A70C);
  return a2;
}

void *sub_20C00A3B4()
{
  return &unk_24C524DC0;
}

uint64_t sub_20C00A3C0()
{
  return 1;
}

void *sub_20C00A3C8()
{
  return &unk_24C524DB0;
}

uint64_t sub_20C00A3D4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20C00A3DC(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20C00A3E8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAC97F8 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C00A420(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C524DC0, a2, a3);
}

void *sub_20C00A440()
{
  return &unk_24C524DC0;
}

uint64_t sub_20C00A44C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20C00A454@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = &off_24C525670;
  return sub_20BF56B40(a2, v2);
}

unsigned int **sub_20C00A46C(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20C00A724(v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20C00A4C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__ *v3;
  pxrInternal__aapl__pxrReserved__ *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
    do
    {
      --v2;
      v4 = (pxrInternal__aapl__pxrReserved__ *)((char *)v3 + 48);
      sub_20C00A538((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

unint64_t sub_20C00A538(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2)
{
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = sub_20C009E34((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v5, a2, (uint64_t)a2 + 24);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_20C00A5B4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (unsigned __int8 *)a1[4];
  v7 = *(unsigned __int8 **)(a2 + 32);
  v8 = 48 * v5 - 48;
  do
  {
    result = sub_20C009E8C(v6, v7);
    if (!(_DWORD)result)
      break;
    v6 += 48;
    v7 += 48;
    v9 = v8;
    v8 -= 48;
  }
  while (v9);
  return result;
}

uint64_t sub_20C00A664(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = (unsigned int *)v4;
    *a1 = v3;
    sub_20C00A46C(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20C00A70C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 += 48;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

void sub_20C00A724(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v11 = __ldxr(v3);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v3));
      if (!v12)
      {
        __dmb(9u);
        v13 = *(void (**)(void))(*v4 + 8);
        if (v13)
          v13();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 48 * *a1;
          v10 = (char *)(v8 + 23);
          do
          {
            if (v10[24] < 0)
              operator delete(*(void **)(v10 + 1));
            if (*v10 < 0)
              operator delete(*(void **)(v10 - 23));
            v10 += 48;
            v9 -= 48;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C00A7F8(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  char *v5;

  v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      sub_20C00A724(a1);
    }
    else if (*a1)
    {
      v4 = 48 * *a1;
      v5 = (char *)(a1[4] + 23);
      do
      {
        if (v5[24] < 0)
          operator delete(*(void **)(v5 + 1));
        if (*v5 < 0)
          operator delete(*(void **)(v5 - 23));
        v5 += 48;
        v4 -= 48;
      }
      while (v4);
    }
    *a1 = 0;
  }
}

void sub_20C00A890(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_11;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 >= a2)
        {
          v13 = 48 * v3;
          v14 = 48 * a2;
          do
          {
            v15 = &v7[(unint64_t)v14 / 8];
            if (SHIBYTE(v7[(unint64_t)v14 / 8 + 5]) < 0)
              operator delete((void *)v15[3]);
            if (*((char *)v15 + 23) < 0)
              operator delete((void *)v7[(unint64_t)v14 / 8]);
            v14 += 48;
          }
          while (v13 != v14);
          goto LABEL_25;
        }
        v9 = a1[4];
        if (*(_QWORD *)(v9 - 8) < a2)
        {
          v7 = sub_20C00AA30((uint64_t)a1, a2);
          sub_20C00ABDC(v9, v9 + 48 * v3, (uint64_t)v7);
        }
LABEL_17:
        v10 = &v7[6 * v3];
        goto LABEL_18;
      }
      v7 = (_QWORD *)a1[4];
    }
    v11 = (uint64_t)v7;
    if (v3 >= a2)
      v12 = a2;
    else
      v12 = *a1;
    v7 = sub_20C00AA30((uint64_t)a1, a2);
    sub_20C00ABDC(v11, v11 + 48 * v12, (uint64_t)v7);
    if (v3 >= a2)
      goto LABEL_25;
    goto LABEL_17;
  }
  if (a2 > 0x555555555555555)
  {
LABEL_11:
    sub_20C00A7F8(a1);
    return;
  }
  v10 = sub_20C00AA30((uint64_t)a1, a2);
  v7 = v10;
LABEL_18:
  sub_20C00AAD0((uint64_t)v10, (uint64_t)&v7[6 * a2], *a3);
LABEL_25:
  if (v7 != (_QWORD *)a1[4])
  {
    sub_20C00A724(a1);
    a1[4] = (unint64_t)v7;
  }
  *a1 = a2;
}

_QWORD *sub_20C00AA30(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_AllocateNew(size_t) [ELEM = pxrInternal__aapl__pxrReserved__::SdfAssetPath]");
  if (a2 > 0x555555555555554)
    v3 = -1;
  else
    v3 = 48 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20C00AAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C00AAD0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  _BYTE *v10;
  __int128 v11;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = 0;
    v7 = (__int128 *)((char *)a3 + 24);
    do
    {
      v8 = v3 + v6;
      if (*((char *)a3 + 23) < 0)
      {
        sub_20BDDBFAC((_BYTE *)v8, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        v9 = *a3;
        *(_QWORD *)(v8 + 16) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v8 = v9;
      }
      v10 = (_BYTE *)(v3 + v6 + 24);
      if (*((char *)a3 + 47) < 0)
      {
        sub_20BDDBFAC(v10, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
      }
      else
      {
        v11 = *v7;
        *(_QWORD *)(v3 + v6 + 40) = *((_QWORD *)v7 + 2);
        *(_OWORD *)v10 = v11;
      }
      v6 += 48;
    }
    while (v3 + v6 != a2);
    return a2;
  }
  return v3;
}

void sub_20C00AB80(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 48)
  {
    sub_20BDDE3E4(v1);
    v1 += 48;
  }
  __cxa_rethrow();
}

void sub_20C00ABC8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20C00ABDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  _BYTE *v10;
  void **v11;
  __int128 v12;

  if (a1 == a2)
    return a1;
  v5 = a2;
  v6 = 0;
  do
  {
    v7 = a3 + v6;
    v8 = (__int128 *)(a1 + v6);
    if (*(char *)(a1 + v6 + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)v7, *(void **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v7 = v9;
    }
    v10 = (_BYTE *)(a3 + v6 + 24);
    v11 = (void **)(a1 + v6 + 24);
    if (*(char *)(a1 + v6 + 47) < 0)
    {
      sub_20BDDBFAC(v10, *v11, *(_QWORD *)(a1 + v6 + 32));
    }
    else
    {
      v12 = *(_OWORD *)v11;
      *(_QWORD *)(a3 + v6 + 40) = *(_QWORD *)(a1 + v6 + 40);
      *(_OWORD *)v10 = v12;
    }
    v6 += 48;
  }
  while (a1 + v6 != v5);
  return v5;
}

void sub_20C00AC9C(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 48)
  {
    sub_20BDDE3E4(v1);
    v1 += 48;
  }
  __cxa_rethrow();
}

void sub_20C00ACE4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20C00ACF8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::SdfAssetPath]", a3);
      v6 = *((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20C00AA30((uint64_t)this, *(_QWORD *)this);
      sub_20C00ABDC(v6, v6 + 48 * v7, (uint64_t)v8);
      sub_20C00A724(this);
      *((_QWORD *)this + 4) = v8;
    }
  }
}

void sub_20C00AD84()
{
  _QWORD *exception;
  _QWORD v1[4];
  char v2;

  v1[0] = "sdf/parserHelpers.cpp";
  v1[1] = "MakeScalarValueImpl";
  v1[2] = 308;
  v1[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(SdfOpaqueValue *, const vector<V"
          "alue> &, size_t &)";
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Found authored opinion for opaque attribute");
  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C524E40;
  __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
}

void sub_20C00AE98(_QWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *exception;
  uint64_t v15[3];
  _QWORD v16[4];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    a4[1] = &off_24C525728;
    sub_20BF56B40(a4, (uint64_t)&v18);
    sub_20BF5618C((uint64_t)&v18);
  }
  else
  {
    *(_QWORD *)&v18 = *a1;
    *((_QWORD *)&v18 + 1) = v5;
    LODWORD(v6) = 1;
    do
    {
      v6 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)&v18, a2, a3) * v6);
      sub_20BFEEE24(&v18);
    }
    while ((_QWORD)v18 != *((_QWORD *)&v18 + 1));
    sub_20C00B0B4((uint64_t)v16, v6);
    sub_20C00B604((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16, v7, v8);
    v9 = v17;
    sub_20C00B604((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16, v10, v11);
    v15[0] = v9;
    v15[1] = v17 + v16[0];
    if (v9 != v17 + v16[0])
    {
      sub_20C00B120(v15, v12, v13);
      *(_QWORD *)&v18 = "sdf/parserHelpers.cpp";
      *((_QWORD *)&v18 + 1) = "MakeScalarValueImpl";
      *(_QWORD *)&v19 = 308;
      *((_QWORD *)&v19 + 1) = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(SdfOpaqueVal"
                              "ue *, const vector<Value> &, size_t &)";
      LOBYTE(v20) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Found authored opinion for opaque attribute");
      exception = __cxa_allocate_exception(8uLL);
      *exception = &unk_24C524E40;
      __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
    }
    a4[1] = &off_24C525728;
    sub_20BF56B40(a4, (uint64_t)v16);
    sub_20BF5618C((uint64_t)v16);
  }
}

void sub_20C00B010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C00B0B4(uint64_t a1, unint64_t a2)
{
  char v5;
  char *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20C00B4C8((unint64_t *)a1, a2);
  return a1;
}

void sub_20C00B108(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C00B120(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::SdfOpaqueValue>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInter"
            "nal__aapl__pxrReserved__::SdfOpaqueValue>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C00B194()
{
  JUMPOUT(0x20C00B144);
}

uint64_t *sub_20C00B19C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20C00B1C4(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C00B348(a1);
}

uint64_t sub_20C00B1D4()
{
  return 1;
}

unint64_t sub_20C00B1DC(unint64_t **a1)
{
  unint64_t v1;
  unint64_t v2;

  v1 = **a1;
  if (v1)
  {
    v2 = **a1;
    do
    {
      v1 = (((v1 + 10) * (v1 + 9)) >> 1) + 9;
      --v2;
    }
    while (v2);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_20C00B224(uint64_t *a1, uint64_t *a2)
{
  return sub_20C00B3A0(*a1, *a2);
}

BOOL sub_20C00B230(uint64_t *a1, uint64_t a2)
{
  return sub_20C00B3A0(*a1, a2);
}

uint64_t sub_20C00B23C()
{
  return 0;
}

_QWORD *sub_20C00B248(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20C00B4B0);
  return a2;
}

void *sub_20C00B290()
{
  return &unk_24C5257E0;
}

uint64_t sub_20C00B29C()
{
  return 1;
}

void *sub_20C00B2A4()
{
  return &unk_24C524D80;
}

uint64_t sub_20C00B2B0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20C00B2B8(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20C00B2C4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAE8B54 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C00B2FC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C5257E0, a2, a3);
}

void *sub_20C00B31C()
{
  return &unk_24C5257E0;
}

uint64_t sub_20C00B328(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20C00B330@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = &off_24C525728;
  return sub_20BF56B40(a2, v2);
}

void **sub_20C00B348(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

BOOL sub_20C00B3A0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
      && sub_20BF569A8(a1, a2)
      && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
      || sub_20BF569A8(a1, a2);
}

uint64_t sub_20C00B408(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20C00B348(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20C00B4B0(_QWORD *a1, _QWORD *a2)
{
  ++*a1;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void sub_20C00B4C8(unint64_t *a1, unint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;

  if (*a1 != a2)
  {
    if (a2)
    {
      v4 = (_QWORD *)a1[4];
      if (!v4 || a1[3] || (v5 = atomic_load(v4 - 2), v5 != 1) || *a1 < a2 && *(_QWORD *)(a1[4] - 8) < a2)
        v4 = sub_20C00B578((uint64_t)a1, a2);
      if (v4 != (_QWORD *)a1[4])
      {
        sub_20BF5618C((uint64_t)a1);
        a1[4] = (unint64_t)v4;
      }
      *a1 = a2;
    }
    else
    {
      sub_20BF56210(a1);
    }
  }
}

_QWORD *sub_20C00B578(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>::_AllocateNew(size_t) [ELEM = pxrInternal__aapl__pxrReserved__::SdfOpaqueValue]");
  if (a2 >= 0xFFFFFFFFFFFFFFF0)
    v3 = -1;
  else
    v3 = a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20C00B5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C00B604(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  _QWORD *v6;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::SdfOpaqueValue]", a3);
      v6 = sub_20C00B578((uint64_t)this, *(_QWORD *)this);
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v6;
    }
  }
}

void sub_20C00B66C(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  void **v4[3];
  void *v5[2];
  _OWORD v6[2];
  __int128 v7;
  void *__p[2];
  __int128 v9;

  *(_OWORD *)__p = 0u;
  v9 = 0u;
  v7 = 0u;
  *(_OWORD *)v5 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_20C00B9A0((uint64_t)v5, a1, a2);
  *(_QWORD *)(a3 + 8) = &off_24C5257F8;
  sub_20C00E2E0((unsigned int **)a3, (uint64_t)v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[1]);
  v4[0] = (void **)&v7;
  sub_20C00E25C(v4);
  v4[0] = (void **)v6 + 1;
  sub_20C00D5A8(v4);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_20C00B720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20C00BBB0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C00B798()
{
  __cxa_end_catch();
  JUMPOUT(0x20C00B724);
}

void sub_20C00B7A8(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C5258B0;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20C00E910(v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20C00E34C((uint64_t)v20, v8);
    sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 96 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = sub_20C00E410(&v18, v14, v15);
      sub_20C00B9A0(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_20C00E48C(&v18);
    }
    a4[1] = off_24C5258B0;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20C00E910(v20);
  }
}

void sub_20C00B8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C00E910((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20C00B918(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C00B890);
  }
  JUMPOUT(0x20C00B900);
}

void sub_20C00B990()
{
  __cxa_end_catch();
  JUMPOUT(0x20C00B900);
}

void sub_20C00B9A0(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  void **v9;
  char *v10;
  _QWORD *exception;
  void *v12[2];
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void **v22;

  v3 = *a3;
  v4 = *a3 + 1;
  v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v10 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    __p[0] = (void *)sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v10, 0x2Fu);
    __p[1] = "MakeScalarValueImpl";
    v15 = 301;
    *(_QWORD *)&v16 = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(SdfPathExpression *,"
                      " const vector<Value> &, size_t &)";
    BYTE8(v16) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "pathExpression");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  v7 = sub_20C007CCC(v5 + 56 * v3);
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::SdfPathExpression(__p, v7, v12);
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 16) = v15;
  __p[1] = 0;
  v15 = 0;
  __p[0] = 0;
  sub_20C00BC18((void **)(a1 + 24));
  *(_OWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 40) = v17;
  v17 = 0;
  v16 = 0uLL;
  sub_20C00BCC0((void **)(a1 + 48));
  *(_OWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 64) = v19;
  v19 = 0;
  v18 = 0uLL;
  v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = v20;
  *(_QWORD *)(a1 + 88) = v21;
  HIBYTE(v21) = 0;
  LOBYTE(v20) = 0;
  v22 = (void **)&v18;
  sub_20C00E25C(&v22);
  v22 = (void **)&v16;
  sub_20C00D5A8(&v22);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
}

void sub_20C00BB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C00BBB0(uint64_t a1)
{
  void *v2;
  void **v4;

  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v4 = (void **)(a1 + 48);
  sub_20C00E25C(&v4);
  v4 = (void **)(a1 + 24);
  sub_20C00D5A8(&v4);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20C00BC18(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 32;
        sub_20C00BC84((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_DWORD *sub_20C00BC84(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));
  return sub_20BFD265C((_DWORD *)a2);
}

void sub_20C00BCC0(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 64;
        sub_20C00BD2C((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_DWORD *sub_20C00BD2C(uint64_t a1, uint64_t a2)
{
  void **v4;

  v4 = (void **)(a2 + 32);
  sub_20C00BD84(&v4);
  v4 = (void **)(a2 + 8);
  sub_20BED2E10(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));
  return sub_20BFD265C((_DWORD *)a2);
}

void sub_20C00BD84(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_20C00BE08((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C00BE08(uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  v4 = (void **)(a2 + 24);
  sub_20C00BE5C(&v4);
  v3 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

void sub_20C00BE5C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_20C00BEE0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C00BEE0(uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 32);
  sub_20C00BF24(&v3);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void sub_20C00BF24(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        sub_20C00BFA8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C00BFA8(uint64_t a1, uint64_t a2)
{
  sub_20BF4C2D8(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t *sub_20C00BFE4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 96);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20C00C00C(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C00C1C8(a1);
}

uint64_t sub_20C00C01C()
{
  return 1;
}

unint64_t sub_20C00C024(_QWORD **a1)
{
  char v2;

  return sub_20C00C25C((uint64_t)&v2, *a1);
}

uint64_t sub_20C00C048(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];
  _QWORD v8[4];
  char v9;

  v2 = *a2;
  v3 = *a1 + 24;
  v4 = *a1 + 48;
  v5 = *a1 + 72;
  v8[0] = *a1;
  v8[1] = v3;
  v8[2] = v4;
  v8[3] = v5;
  v7[0] = v2;
  v7[1] = v2 + 24;
  v7[2] = v2 + 48;
  v7[3] = v2 + 72;
  return sub_20C00C814((uint64_t)&v9, (uint64_t)v8, (uint64_t)v7);
}

uint64_t sub_20C00C0A0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  _QWORD v7[4];
  char v8;

  v2 = *a1 + 24;
  v3 = *a1 + 48;
  v4 = *a1 + 72;
  v7[0] = *a1;
  v7[1] = v2;
  v7[2] = v3;
  v7[3] = v4;
  v6[0] = a2;
  v6[1] = a2 + 24;
  v6[2] = a2 + 48;
  v6[3] = a2 + 72;
  return sub_20C00C814((uint64_t)&v8, (uint64_t)v7, (uint64_t)v6);
}

uint64_t sub_20C00C0F8()
{
  return 0;
}

_QWORD *sub_20C00C104(pxrInternal__aapl__pxrReserved__::SdfPathExpression **a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20C00C114()
{
  return &unk_24C524DD8;
}

uint64_t sub_20C00C120()
{
  return 0;
}

uint64_t sub_20C00C128()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C00C134()
{
  return 0;
}

uint64_t sub_20C00C13C()
{
  return 0;
}

BOOL sub_20C00C144(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAC1850 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C00C17C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524DD8, a2, a3);
}

void *sub_20C00C19C()
{
  return &unk_24C524DD8;
}

uint64_t sub_20C00C1A8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *sub_20C00C1B0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *(_QWORD *)(a2 + 8) = &off_24C5257F8;
  return sub_20C00E2E0((unsigned int **)a2, v2);
}

void **sub_20C00C1C8(void **a1)
{
  char *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  void **v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 96);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      if (v2[95] < 0)
        operator delete(*((void **)v2 + 9));
      v8 = (void **)(v2 + 48);
      sub_20C00E25C(&v8);
      v8 = (void **)(v2 + 24);
      sub_20C00D5A8(&v8);
      v6 = *(void **)v2;
      if (*(_QWORD *)v2)
      {
        *((_QWORD *)v2 + 1) = v6;
        operator delete(v6);
      }
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20C00C25C(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  char v12;

  v11 = 0;
  v12 = 0;
  v2 = (unsigned int *)*a2;
  v3 = a2[1];
  v4 = v3 - *a2;
  if (v3 != *a2)
  {
    v5 = 0;
    v6 = 0;
    v7 = v4 >> 2;
    do
    {
      v9 = *v2++;
      v8 = v9;
      if (v5)
        v8 += (unint64_t)(v6 + v8 + (v6 + v8) * (v6 + v8)) >> 1;
      else
        v5 = 1;
      v11 = v8;
      v6 = v8;
      --v7;
    }
    while (v7);
    v12 = v5;
  }
  sub_20C00C340((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v11, a2 + 3, a2 + 6, (uint64_t)(a2 + 9));
  return bswap64(0x9E3779B97F4A7C55 * v11);
}

uint64_t *sub_20C00C2F4(uint64_t *result, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *a2;
  v3 = (char *)a2[1] - (char *)*a2;
  if (v3)
  {
    v4 = v3 >> 2;
    v5 = *((unsigned __int8 *)result + 8);
    v6 = *result;
    do
    {
      v8 = *v2++;
      v7 = v8;
      if (v5)
      {
        v7 += (unint64_t)(v6 + v7 + (v6 + v7) * (v6 + v7)) >> 1;
      }
      else
      {
        v5 = 1;
        *((_BYTE *)result + 8) = 1;
      }
      *result = v7;
      v6 = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

unint64_t sub_20C00C340(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *a2;
  v9 = a2[1] - v8;
  if (v9)
  {
    v10 = v9 >> 5;
    do
    {
      --v10;
      v11 = v8 + 32;
      sub_20C00C400(a1, v8);
      v8 = v11;
    }
    while (v10);
  }
  return sub_20C00C3B0(a1, a3, a4);
}

unint64_t sub_20C00C3B0(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  char *v7;

  sub_20C00C444((unint64_t)a1, *a2, (a2[1] - *a2) >> 6);
  v5 = *(char *)(a3 + 23);
  if (v5 >= 0)
    v6 = (pxrInternal__aapl__pxrReserved__ *)a3;
  else
    v6 = *(pxrInternal__aapl__pxrReserved__ **)a3;
  if (v5 >= 0)
    v7 = (char *)*(unsigned __int8 *)(a3 + 23);
  else
    v7 = *(char **)(a3 + 8);
  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, v6, v7);
}

unint64_t sub_20C00C400(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__ *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  int v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  char *v9;

  sub_20BFD84AC((uint64_t)a1, (unsigned int *)a2);
  v6 = *(pxrInternal__aapl__pxrReserved__ **)(a2 + 8);
  v5 = a2 + 8;
  v4 = v6;
  v7 = *(char *)(v5 + 23);
  if (v7 >= 0)
    v8 = (pxrInternal__aapl__pxrReserved__ *)v5;
  else
    v8 = v4;
  if (v7 >= 0)
    v9 = (char *)*(unsigned __int8 *)(v5 + 23);
  else
    v9 = *(char **)(v5 + 8);
  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, v8, v9);
}

unint64_t sub_20C00C444(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::Tf_HashState *v5;

  if (a3)
  {
    v3 = a3;
    v5 = (pxrInternal__aapl__pxrReserved__::Tf_HashState *)result;
    do
    {
      --v3;
      sub_20BFD84AC((uint64_t)v5, (unsigned int *)a2);
      result = sub_20C00C4A0(v5, a2 + 8, a2 + 32, (unsigned __int8 *)(a2 + 56));
      a2 += 64;
    }
    while (v3);
  }
  return result;
}

unint64_t sub_20C00C4A0(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v8 = *(uint64_t **)a2;
  v9 = *(_QWORD *)(a2 + 8) - (_QWORD)v8;
  if (v9)
  {
    v10 = v9 >> 5;
    do
    {
      --v10;
      v11 = v8 + 4;
      sub_20C00C560(a1, v8);
      v8 = v11;
    }
    while (v10);
  }
  return sub_20C00C510((unint64_t)a1, a3, a4);
}

unint64_t sub_20C00C510(unint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t result;
  uint64_t v6;

  result = sub_20C00C5F8(a1, a2);
  v6 = *a3;
  if (*(_BYTE *)(a1 + 8))
    v6 += (unint64_t)(*(_QWORD *)a1 + v6 + (*(_QWORD *)a1 + v6) * (*(_QWORD *)a1 + v6)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v6;
  return result;
}

uint64_t sub_20C00C560(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t *a2)
{
  int *v3;
  unsigned __int8 *v4;
  char *v5;
  char *v6;

  v3 = (int *)(a2 + 3);
  v4 = (unsigned __int8 *)a2 + 28;
  v5 = (char *)a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    v6 = v5;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, (pxrInternal__aapl__pxrReserved__ *)a2, v6);
  return sub_20C00C5B4((uint64_t)a1, v3, v4);
}

uint64_t sub_20C00C5B4(uint64_t result, int *a2, unsigned __int8 *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(result + 8))
    v3 += (unint64_t)(*(_QWORD *)result + v3 + (*(_QWORD *)result + v3) * (*(_QWORD *)result + v3)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v3;
  *(_QWORD *)result = *a3 + ((v3 + *a3 + (v3 + *a3) * (v3 + (unint64_t)*a3)) >> 1);
  return result;
}

unint64_t sub_20C00C5F8(unint64_t result, uint64_t a2)
{
  unsigned int **v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;

  v2 = *(unsigned int ***)a2;
  v3 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v3)
  {
    v4 = (uint64_t *)result;
    v5 = 0x8E38E38E38E38E39 * (v3 >> 3);
    do
    {
      --v5;
      result = sub_20C00C660(v4, v2, (uint64_t)(v2 + 3), (uint64_t)(v2 + 6));
      v2 += 9;
    }
    while (v5);
  }
  return result;
}

unint64_t sub_20C00C660(uint64_t *a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  int v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  char *v9;

  sub_20C00C2F4(a1, a2);
  sub_20C00C6B8((unint64_t)a1, a3);
  v7 = *(char *)(a4 + 23);
  if (v7 >= 0)
    v8 = (pxrInternal__aapl__pxrReserved__ *)a4;
  else
    v8 = *(pxrInternal__aapl__pxrReserved__ **)a4;
  if (v7 >= 0)
    v9 = (char *)*(unsigned __int8 *)(a4 + 23);
  else
    v9 = *(char **)(a4 + 8);
  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)a1, v8, v9);
}

unint64_t sub_20C00C6B8(unint64_t result, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::Tf_HashState *v4;
  uint64_t v5;

  v2 = *(unsigned int **)a2;
  v3 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v3)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::Tf_HashState *)result;
    v5 = 0x6DB6DB6DB6DB6DB7 * (v3 >> 3);
    do
    {
      --v5;
      result = sub_20C00C720(v4, v2, (pxrInternal__aapl__pxrReserved__ *)(v2 + 2), (uint64_t)(v2 + 8));
      v2 += 14;
    }
    while (v5);
  }
  return result;
}

unint64_t sub_20C00C720(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, unsigned int *a2, pxrInternal__aapl__pxrReserved__ *a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *a2;
  if (*((_BYTE *)a1 + 8))
    v4 += (unint64_t)(*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *((_BYTE *)a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return sub_20C00C758(a1, a3, a4);
}

unint64_t sub_20C00C758(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3)
{
  char *v5;
  char *v6;
  unint64_t result;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;

  v5 = (char *)*((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(pxrInternal__aapl__pxrReserved__ **)a2;
    v6 = v5;
  }
  result = pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2, v6);
  v8 = *(uint64_t **)a3;
  v9 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v9)
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v9 >> 3);
    do
    {
      --v10;
      v11 = v8 + 5;
      result = sub_20C00C7D0(a1, v8);
      v8 = v11;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_20C00C7D0(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v3;
  char *v4;
  char *v5;

  v3 = (pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 3);
  v4 = (char *)a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    v5 = v4;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, (pxrInternal__aapl__pxrReserved__ *)a2, v5);
  return sub_20BF4CF7C((uint64_t)a1, v3);
}

uint64_t sub_20C00C814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v19;
  char v20;

  result = sub_20C00C8DC((uint64_t)&v20, a2, a3);
  if ((_DWORD)result)
  {
    v6 = *(unsigned __int8 **)(a2 + 24);
    v7 = *(unsigned __int8 ***)(a3 + 24);
    v8 = v6[23];
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)v6[23];
    else
      v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    v11 = (char)v10;
    if ((char)v10 < 0)
      v10 = v7[1];
    if (v9 == v10)
    {
      if (v11 >= 0)
        v12 = *(unsigned __int8 **)(a3 + 24);
      else
        v12 = *v7;
      if ((v8 & 0x80) != 0)
      {
        return memcmp(*(const void **)v6, v12, *((_QWORD *)v6 + 1)) == 0;
      }
      else if (v6[23])
      {
        v13 = v8 - 1;
        do
        {
          v15 = *v6++;
          v14 = v15;
          v17 = *v12++;
          v16 = v17;
          v19 = v13-- != 0;
          result = v14 == v16;
        }
        while (v14 == v16 && v19);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_20C00C8DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;

  result = sub_20C00C970((uint64_t)&v11, a2, a3);
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a3 + 16);
    v8 = *(_QWORD **)v6;
    v9 = *(_QWORD **)(v6 + 8);
    v10 = *(_QWORD **)v7;
    if ((_QWORD *)((char *)v9 - *(_QWORD *)v6) == (_QWORD *)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7))
    {
      if (v8 == v9)
      {
        return 1;
      }
      else
      {
        do
        {
          result = sub_20C00CB10(v8, v10);
          if (!(_DWORD)result)
            break;
          v8 += 8;
          v10 += 8;
        }
        while (v8 != v9);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_20C00C970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  _DWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  BOOL v13;
  _QWORD v14[2];
  _QWORD v15[2];
  char v16;

  v4 = **(char ***)a2;
  v3 = *(char **)(*(_QWORD *)a2 + 8);
  v5 = **(_DWORD ***)a3;
  if (v3 - v4 != *(_QWORD *)(*(_QWORD *)a3 + 8) - (_QWORD)v5)
    return 0;
  while (v4 != v3)
  {
    if (*(_DWORD *)v4 != *v5)
      return 0;
    v4 += 4;
    ++v5;
  }
  v6 = *(uint64_t **)(a2 + 8);
  v7 = *(uint64_t **)(a3 + 8);
  v9 = *v6;
  v8 = v6[1];
  v10 = *v7;
  if (v8 - *v6 != v7[1] - *v7)
    return 0;
  if (v9 == v8)
    return 1;
  v11 = v9 + 32;
  do
  {
    v15[0] = v9;
    v15[1] = v9 + 8;
    v14[0] = v10;
    v14[1] = v10 + 8;
    result = sub_20C00CA54((uint64_t)&v16, (uint64_t)v15, (uint64_t)v14);
    if (!(_DWORD)result)
      break;
    v10 += 32;
    v9 += 32;
    v13 = v11 == v8;
    v11 += 32;
  }
  while (!v13);
  return result;
}

uint64_t sub_20C00CA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unsigned __int8 **v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  uint64_t result;

  if (**(_QWORD **)a2 != **(_QWORD **)a3)
    return 0;
  v3 = *(unsigned __int8 **)(a2 + 8);
  v4 = *(unsigned __int8 ***)(a3 + 8);
  v5 = v3[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v3[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v4[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a3 + 8);
  else
    v9 = *v4;
  if ((v5 & 0x80) != 0)
    return memcmp(*(const void **)v3, v9, *((_QWORD *)v3 + 1)) == 0;
  if (!v3[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v3++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t sub_20C00CB10(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  _QWORD *v3[3];
  unsigned __int8 *v4;
  _QWORD *v5[3];
  unsigned __int8 *v6;
  char v7;

  v5[0] = a1;
  v5[1] = a1 + 1;
  v5[2] = a1 + 4;
  v6 = (unsigned __int8 *)(a1 + 7);
  v3[0] = a2;
  v3[1] = a2 + 1;
  v3[2] = a2 + 4;
  v4 = (unsigned __int8 *)(a2 + 7);
  result = sub_20C00CB7C((uint64_t)&v7, v5, v3);
  if ((_DWORD)result)
    return *v6 == *v4;
  return result;
}

uint64_t sub_20C00CB7C(uint64_t a1, _QWORD **a2, _QWORD **a3)
{
  uint64_t result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  _QWORD v13[3];
  char v14;

  result = sub_20C00CC34((uint64_t)&v11, a2, a3);
  if ((_DWORD)result)
  {
    v6 = a2[2];
    v7 = a3[2];
    v9 = *v6;
    v8 = v6[1];
    v10 = *v7;
    if (v8 - *v6 == v7[1] - *v7)
    {
      if (v9 == v8)
      {
        return 1;
      }
      else
      {
        do
        {
          v13[0] = v9;
          v13[1] = v9 + 24;
          v13[2] = v9 + 48;
          v12[0] = v10;
          v12[1] = v10 + 24;
          v12[2] = v10 + 48;
          result = sub_20C00CE00((uint64_t)&v14, (uint64_t)v13, (uint64_t)v12);
          if (!(_DWORD)result)
            break;
          v9 += 72;
          v10 += 72;
        }
        while (v9 != v8);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_20C00CC34(uint64_t a1, _QWORD **a2, _QWORD **a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  _QWORD v9[3];
  _QWORD v10[3];
  char v11;

  if (**a2 != **a3)
    return 0;
  v3 = a2[1];
  v4 = a3[1];
  v6 = *v3;
  v5 = v3[1];
  v7 = *v4;
  if (v5 - *v3 != v4[1] - *v4)
    return 0;
  if (v6 == v5)
    return 1;
  do
  {
    v10[0] = v6;
    v10[1] = v6 + 24;
    v10[2] = v6 + 28;
    v9[0] = v7;
    v9[1] = v7 + 24;
    v9[2] = v7 + 28;
    result = sub_20C00CCF0((uint64_t)&v11, (uint64_t)v10, (uint64_t)v9);
    if (!result)
      break;
    v6 += 32;
    v7 += 32;
  }
  while (v6 != v5);
  return result;
}

BOOL sub_20C00CCF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;

  return (sub_20C00CD5C((uint64_t)&v6, (const void ***)a2, (unsigned __int8 **)a3) & 1) != 0
      && **(_DWORD **)(a2 + 8) == **(_DWORD **)(a3 + 8)
      && **(unsigned __int8 **)(a2 + 16) == **(unsigned __int8 **)(a3 + 16);
}

uint64_t sub_20C00CD5C(uint64_t a1, const void ***a2, unsigned __int8 **a3)
{
  const void **v3;
  unsigned __int8 *v4;
  uint64_t v5;
  size_t v6;
  const void *v7;
  const void *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;
  uint64_t result;

  v3 = *a2;
  v4 = *a3;
  v5 = *((unsigned __int8 *)*a2 + 23);
  v6 = (size_t)(*a2)[1];
  if ((v5 & 0x80u) == 0)
    v7 = (const void *)*((unsigned __int8 *)*a2 + 23);
  else
    v7 = (*a2)[1];
  v8 = (const void *)v4[23];
  v9 = (char)v8;
  if ((char)v8 < 0)
    v8 = (const void *)*((_QWORD *)v4 + 1);
  if (v7 != v8)
    return 0;
  if (v9 >= 0)
    v10 = v4;
  else
    v10 = *(unsigned __int8 **)v4;
  if ((v5 & 0x80) != 0)
    return memcmp(*v3, v10, v6) == 0;
  if (!(_DWORD)v5)
    return 1;
  v11 = v5 - 1;
  do
  {
    v13 = *(unsigned __int8 *)v3;
    v3 = (const void **)((char *)v3 + 1);
    v12 = v13;
    v15 = *v10++;
    v14 = v15;
    v17 = v11-- != 0;
    result = v12 == v14;
  }
  while (v12 == v14 && v17);
  return result;
}

uint64_t sub_20C00CE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v19;
  char v20;

  result = sub_20C00CEC8((uint64_t)&v20, a2, a3);
  if ((_DWORD)result)
  {
    v6 = *(unsigned __int8 **)(a2 + 16);
    v7 = *(unsigned __int8 ***)(a3 + 16);
    v8 = v6[23];
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)v6[23];
    else
      v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    v11 = (char)v10;
    if ((char)v10 < 0)
      v10 = v7[1];
    if (v9 == v10)
    {
      if (v11 >= 0)
        v12 = *(unsigned __int8 **)(a3 + 16);
      else
        v12 = *v7;
      if ((v8 & 0x80) != 0)
      {
        return memcmp(*(const void **)v6, v12, *((_QWORD *)v6 + 1)) == 0;
      }
      else if (v6[23])
      {
        v13 = v8 - 1;
        do
        {
          v15 = *v6++;
          v14 = v15;
          v17 = *v12++;
          v16 = v17;
          v19 = v13-- != 0;
          result = v14 == v16;
        }
        while (v14 == v16 && v19);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_20C00CEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  _DWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[3];
  _QWORD v13[3];
  char v14;

  v4 = **(char ***)a2;
  v3 = *(char **)(*(_QWORD *)a2 + 8);
  v5 = **(_DWORD ***)a3;
  if (v3 - v4 != *(_QWORD *)(*(_QWORD *)a3 + 8) - (_QWORD)v5)
    return 0;
  while (v4 != v3)
  {
    if (*(_DWORD *)v4 != *v5)
      return 0;
    v4 += 4;
    ++v5;
  }
  v6 = *(uint64_t **)(a2 + 8);
  v7 = *(uint64_t **)(a3 + 8);
  v9 = *v6;
  v8 = v6[1];
  v10 = *v7;
  if (v8 - *v6 != v7[1] - *v7)
    return 0;
  if (v9 == v8)
    return 1;
  do
  {
    v13[0] = v9;
    v13[1] = v9 + 8;
    v13[2] = v9 + 32;
    v12[0] = v10;
    v12[1] = v10 + 8;
    v12[2] = v10 + 32;
    result = sub_20C00CFB0((uint64_t)&v14, (uint64_t)v13, (uint64_t)v12);
    if (!(_DWORD)result)
      break;
    v9 += 56;
    v10 += 56;
  }
  while (v9 != v8);
  return result;
}

uint64_t sub_20C00CFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  _QWORD v14[2];
  _QWORD v15[2];
  char v16;

  result = sub_20C00D064((uint64_t)&v13, a2, a3);
  if ((_DWORD)result)
  {
    v6 = *(uint64_t **)(a2 + 16);
    v7 = *(uint64_t **)(a3 + 16);
    v9 = *v6;
    v8 = v6[1];
    v10 = *v7;
    if (v8 - *v6 == v7[1] - *v7)
    {
      if (v9 == v8)
      {
        return 1;
      }
      else
      {
        v11 = v9 + 40;
        do
        {
          v15[0] = v9;
          v15[1] = v9 + 24;
          v14[0] = v10;
          v14[1] = v10 + 24;
          result = sub_20C00D120((uint64_t)&v16, (uint64_t)v15, (uint64_t)v14);
          if (!(_DWORD)result)
            break;
          v10 += 40;
          v9 += 40;
          v12 = v11 == v8;
          v11 += 40;
        }
        while (!v12);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_20C00D064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unsigned __int8 **v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  uint64_t result;

  if (**(_DWORD **)a2 != **(_DWORD **)a3)
    return 0;
  v3 = *(unsigned __int8 **)(a2 + 8);
  v4 = *(unsigned __int8 ***)(a3 + 8);
  v5 = v3[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v3[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v4[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a3 + 8);
  else
    v9 = *v4;
  if ((v5 & 0x80) != 0)
    return memcmp(*(const void **)v3, v9, *((_QWORD *)v3 + 1)) == 0;
  if (!v3[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v3++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t sub_20C00D120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char *v6;
  char v7;

  result = sub_20C00CD5C((uint64_t)&v7, (const void ***)a2, (unsigned __int8 **)a3);
  if ((_DWORD)result)
    return pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(*(pxrInternal__aapl__pxrReserved__::VtValue **)(a2 + 8), *(std::type_info **)(a3 + 8), v6);
  return result;
}

uint64_t sub_20C00D160(uint64_t *a1)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;

  v2 = atomic_load((unsigned int *)(*a1 + 96));
  if (v2 != 1)
  {
    v3 = (unsigned int *)operator new(0x68uLL);
    sub_20C00D1F0(v3, *a1);
    v4 = v3 + 24;
    atomic_store(0, v3 + 24);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v7 = *a1;
    *a1 = (uint64_t)v3;
    sub_20C00C1C8((void **)&v7);
  }
  return *a1;
}

void sub_20C00D1DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C00D1F0(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_20C00D2F0(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_20C00D368(a1 + 3, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 5);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  sub_20C00D62C(a1 + 6, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 6);
  v4 = a1 + 9;
  if (*(char *)(a2 + 95) < 0)
  {
    sub_20BDDBFAC(v4, *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 72);
    a1[11] = *(_QWORD *)(a2 + 88);
    *(_OWORD *)v4 = v5;
  }
  return a1;
}

void sub_20C00D2AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  sub_20C00E25C((void ***)va);
  sub_20C00D5A8((void ***)va);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20C00D2F0(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BDE3738(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20C00D34C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C00D368(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BF25370(result, a4);
    result = (_QWORD *)sub_20C00D3EC((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C00D3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C00D5A8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C00D3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C00D494(a1, v4, v6);
      v6 += 32;
      v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C00D524((uint64_t)v9);
  return v4;
}

void sub_20C00D480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00D524((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_20C00D494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *result;
  __int128 v6;

  sub_20BFD6E54((_DWORD *)a2, (_DWORD *)a3);
  sub_20BFD6EA4((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  result = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
    return sub_20BDDBFAC(result, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  v6 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_OWORD *)result = v6;
  return result;
}

void sub_20C00D504(_Unwind_Exception *a1)
{
  _DWORD *v1;
  _DWORD *v2;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_20BFD265C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C00D524(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C00D558((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C00D558(uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)result[1];
  v1 = (uint64_t *)result[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *result;
    do
    {
      v3 -= 32;
      result = (uint64_t *)sub_20C00BC84(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

void sub_20C00D5A8(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_20C00BC84((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_20C00D62C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20C00D6B0(result, a4);
    result = (_QWORD *)sub_20C00D724((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C00D690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C00E25C(&a9);
  _Unwind_Resume(a1);
}

char *sub_20C00D6B0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    sub_20BDDF694();
  result = (char *)sub_20C00D6F0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *sub_20C00D6F0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    sub_20BDDF5B4();
  return operator new(a2 << 6);
}

uint64_t sub_20C00D724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C00D7C4(v4, v6);
      v6 += 64;
      v4 = v11 + 64;
      v11 += 64;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20C00E1D8((uint64_t)v8);
  return v4;
}

void sub_20C00D7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00E1D8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C00D7C4(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_20BFD6E54((_DWORD *)a1, (_DWORD *)a2);
  sub_20BFD6EA4(v4 + 1, (_DWORD *)(a2 + 4));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_20C00D898((_QWORD *)(a1 + 8), *(__int128 **)(a2 + 8), *(__int128 **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 5);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_20C00DA64((_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

void sub_20C00D864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _DWORD *v2;
  _DWORD *v3;
  va_list va;

  va_start(va, a2);
  sub_20BED2E10((void ***)va);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_20BFD265C(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C00D898(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BF25370(result, a4);
    result = sub_20C00D91C((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C00D8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BED2E10(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C00D91C(uint64_t a1, __int128 *a2, __int128 *a3, _QWORD *__dst)
{
  _QWORD *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD *v8;
  int v9;
  _QWORD v11[3];
  char v12;
  void *v13;
  _QWORD *v14;

  v4 = __dst;
  v13 = __dst;
  v14 = __dst;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_20BDDBFAC(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v8 = v14;
      }
      else
      {
        v7 = *v6;
        v4[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
        v8 = v4;
      }
      v9 = *((_DWORD *)v6 + 6);
      *((_BYTE *)v4 + 28) = *((_BYTE *)v6 + 28);
      *((_DWORD *)v4 + 6) = v9;
      v6 += 2;
      v4 = v8 + 4;
      v14 = v8 + 4;
    }
    while (v6 != a3);
  }
  v12 = 1;
  sub_20C00D9EC((uint64_t)v11);
  return v4;
}

void sub_20C00D9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00D9EC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C00D9EC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C00DA20(a1);
  return a1;
}

void sub_20C00DA20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0)
      operator delete(*(void **)(v1 - 32));
    v1 -= 32;
  }
}

_QWORD *sub_20C00DA64(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BED5B44(result, a4);
    result = sub_20C00DAE8((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C00DAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C00BD84(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C00DAE8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C00DB88(v4, v6);
      v6 += 72;
      v4 = v11 + 9;
      v11 += 9;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20C00E154((uint64_t)v8);
  return v4;
}

void sub_20C00DB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00E154((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C00DB88(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_20C00DC68(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_20C00DCE0(a1 + 3, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  v4 = a1 + 6;
  if (*(char *)(a2 + 71) < 0)
  {
    sub_20BDDBFAC(v4, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 48);
    a1[8] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)v4 = v5;
  }
  return a1;
}

void sub_20C00DC38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  sub_20C00BE5C((void ***)va);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20C00DC68(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BDE3738(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20C00DCC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C00DCE0(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BE1B554(result, a4);
    result = (_QWORD *)sub_20C00DD64((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C00DD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C00BE5C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C00DD64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C00DE0C(a1, v4, v6);
      v6 += 56;
      v4 = v12 + 56;
      v12 += 56;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C00E0D0((uint64_t)v9);
  return v4;
}

void sub_20C00DDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00E0D0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C00DE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  __int128 v6;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v5 = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_20BDDBFAC(v5, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)v5 = v6;
  }
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return sub_20C00DEB0((_QWORD *)(a2 + 32), *(__int128 **)(a3 + 32), *(__int128 **)(a3 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3));
}

void sub_20C00DE94(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C00DEB0(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BED4B34(result, a4);
    result = sub_20C00DF34((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C00DF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C00BF24(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C00DF34(uint64_t a1, __int128 *a2, __int128 *a3, _QWORD *__dst)
{
  _QWORD *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  void *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = (char *)__dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      sub_20C00DFDC(v7, v4, v6);
      v6 = (__int128 *)((char *)v6 + 40);
      v4 = v12 + 40;
      v12 += 40;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C00E04C((uint64_t)v9);
  return v4;
}

void sub_20C00DFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00E04C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C00DFDC(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v5;

  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    __dst[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  return sub_20BF4C6D0(__dst + 3, (_QWORD *)a3 + 3);
}

void sub_20C00E030(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C00E04C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C00E080((uint64_t *)a1);
  return a1;
}

void sub_20C00E080(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 40;
      sub_20C00BFA8(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_20C00E0D0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C00E104((uint64_t *)a1);
  return a1;
}

void sub_20C00E104(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 56;
      sub_20C00BEE0(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_20C00E154(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C00E188((uint64_t *)a1);
  return a1;
}

void sub_20C00E188(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 72;
      sub_20C00BE08(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_20C00E1D8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C00E20C((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C00E20C(uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)result[1];
  v1 = (uint64_t *)result[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *result;
    do
    {
      v3 -= 64;
      result = (uint64_t *)sub_20C00BD2C(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

void sub_20C00E25C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        sub_20C00BD2C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_20C00E2E0(unsigned int **a1, uint64_t a2)
{
  unsigned int *v4;
  _QWORD *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (unsigned int *)operator new(0x68uLL);
  result = sub_20C00D1F0(v4, a2);
  v6 = v4 + 24;
  atomic_store(0, v4 + 24);
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20C00E338(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C00E34C(uint64_t a1, unint64_t a2)
{
  void *v5[2];
  _OWORD v6[2];
  __int128 v7;
  void *__p[2];
  __int128 v9;
  void **v10;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)__p = 0u;
  v9 = 0u;
  v7 = 0u;
  *(_OWORD *)v5 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_20C00EA08((_QWORD *)a1);
  v10 = v5;
  sub_20C00EAC4((unint64_t *)a1, a2, (uint64_t *)&v10);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[1]);
  v10 = (void **)&v7;
  sub_20C00E25C(&v10);
  v10 = (void **)v6 + 1;
  sub_20C00D5A8(&v10);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  return a1;
}

void sub_20C00E3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  sub_20C00BBB0((uint64_t)&a9);
  sub_20C00E910(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C00E410(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::SdfPathExpression>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrIn"
            "ternal__aapl__pxrReserved__::SdfPathExpression>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C00E484()
{
  JUMPOUT(0x20C00E434);
}

_QWORD *sub_20C00E48C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>::operator++() [T = pxrInternal__aapl__pxrReserved__"
            "::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 96;
  }
  return a1;
}

uint64_t *sub_20C00E508(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

unsigned int **sub_20C00E530(unsigned int **a1, unsigned int **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C00E6C0(a1);
}

uint64_t sub_20C00E540()
{
  return 1;
}

unint64_t sub_20C00E548(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  sub_20C00E718((unint64_t)&v4, v1[4], v2);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t sub_20C00E59C(uint64_t **a1, uint64_t *a2)
{
  return sub_20C00E774(*a1, *a2);
}

uint64_t sub_20C00E5A8(uint64_t **a1, uint64_t a2)
{
  return sub_20C00E774(*a1, a2);
}

uint64_t sub_20C00E5B4()
{
  return 0;
}

_QWORD *sub_20C00E5C0(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20C00E8F8);
  return a2;
}

void *sub_20C00E608()
{
  return &unk_24C524DE8;
}

uint64_t sub_20C00E614()
{
  return 1;
}

void *sub_20C00E61C()
{
  return &unk_24C524DD8;
}

uint64_t sub_20C00E628(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20C00E630(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20C00E63C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAC1888 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C00E674(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524DE8, a2, a3);
}

void *sub_20C00E694()
{
  return &unk_24C524DE8;
}

uint64_t sub_20C00E6A0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20C00E6A8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C5258B0;
  return sub_20BF56B40(a2, v2);
}

unsigned int **sub_20C00E6C0(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20C00E910(v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20C00E718(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v5;

  if (a3)
  {
    v3 = a3;
    v5 = (uint64_t *)result;
    do
    {
      --v3;
      sub_20C00C2F4(v5, (unsigned int **)a2);
      result = sub_20C00C340((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v5, (uint64_t *)(a2 + 24), (uint64_t *)(a2 + 48), a2 + 72);
      a2 += 96;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_20C00E774(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  _QWORD v10[4];
  char v11;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = a1[4];
  v7 = v6 + 96 * v5;
  v8 = *(_QWORD *)(a2 + 32);
  do
  {
    v10[0] = v6;
    v10[1] = v6 + 24;
    v10[2] = v6 + 48;
    v10[3] = v6 + 72;
    v9[0] = v8;
    v9[1] = v8 + 24;
    v9[2] = v8 + 48;
    v9[3] = v8 + 72;
    result = sub_20C00C814((uint64_t)&v11, (uint64_t)v10, (uint64_t)v9);
    if (!(_DWORD)result)
      break;
    v6 += 96;
    v8 += 96;
  }
  while (v6 != v7);
  return result;
}

uint64_t sub_20C00E850(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = (unsigned int *)v4;
    *a1 = v3;
    sub_20C00E6C0(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20C00E8F8(pxrInternal__aapl__pxrReserved__::SdfPathExpression **a1, _QWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v3;

  v3 = *a1;
  *a1 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)((char *)*a1 + 96);
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

void sub_20C00E910(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(void);
  void **v15;

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v12 = __ldxr(v3);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v3));
      if (!v13)
      {
        __dmb(9u);
        v14 = *(void (**)(void))(*v4 + 8);
        if (v14)
          v14();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 96 * *a1;
          v10 = v8 + 48;
          do
          {
            if (*(char *)(v10 + 47) < 0)
              operator delete(*(void **)(v10 + 24));
            v15 = (void **)v10;
            sub_20C00E25C(&v15);
            v15 = (void **)(v10 - 24);
            sub_20C00D5A8(&v15);
            v11 = *(void **)(v10 - 48);
            if (v11)
            {
              *(_QWORD *)(v10 - 40) = v11;
              operator delete(v11);
            }
            v10 += 96;
            v9 -= 96;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C00EA08(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void **v7;

  v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      sub_20C00E910(a1);
    }
    else if (*a1)
    {
      v4 = 96 * *a1;
      v5 = a1[4] + 48;
      do
      {
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        v7 = (void **)v5;
        sub_20C00E25C(&v7);
        v7 = (void **)(v5 - 24);
        sub_20C00D5A8(&v7);
        v6 = *(void **)(v5 - 48);
        if (v6)
        {
          *(_QWORD *)(v5 - 40) = v6;
          operator delete(v6);
        }
        v5 += 96;
        v4 -= 96;
      }
      while (v4);
    }
    *a1 = 0;
  }
}

void sub_20C00EAC4(unint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void *v16;
  void **v17;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_11;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 >= a2)
        {
          v13 = 96 * v3;
          v14 = 96 * a2;
          do
          {
            v15 = (void **)&v7[(unint64_t)v14 / 8];
            if (SHIBYTE(v7[(unint64_t)v14 / 8 + 11]) < 0)
              operator delete(v15[9]);
            v17 = v15 + 6;
            sub_20C00E25C(&v17);
            v17 = v15 + 3;
            sub_20C00D5A8(&v17);
            v16 = *v15;
            if (*v15)
            {
              v7[(unint64_t)v14 / 8 + 1] = v16;
              operator delete(v16);
            }
            v14 += 96;
          }
          while (v13 != v14);
          goto LABEL_25;
        }
        v9 = a1[4];
        if (*(_QWORD *)(v9 - 8) < a2)
        {
          v7 = sub_20C00EC98((uint64_t)a1, a2);
          sub_20C00EE28(v9, v9 + 96 * v3, (uint64_t)v7);
        }
LABEL_17:
        v10 = (uint64_t)&v7[12 * v3];
        goto LABEL_18;
      }
      v7 = (_QWORD *)a1[4];
    }
    v11 = (uint64_t)v7;
    if (v3 >= a2)
      v12 = a2;
    else
      v12 = *a1;
    v7 = sub_20C00EC98((uint64_t)a1, a2);
    sub_20C00EE28(v11, v11 + 96 * v12, (uint64_t)v7);
    if (v3 >= a2)
      goto LABEL_25;
    goto LABEL_17;
  }
  if (a2 > 0x2AAAAAAAAAAAAAALL)
  {
LABEL_11:
    sub_20C00EA08(a1);
    return;
  }
  v7 = sub_20C00EC98((uint64_t)a1, a2);
  v10 = (uint64_t)v7;
LABEL_18:
  sub_20C00ED38(a3, v10, (uint64_t)&v7[12 * a2]);
LABEL_25:
  if (v7 != (_QWORD *)a1[4])
  {
    sub_20C00E910(a1);
    a1[4] = (unint64_t)v7;
  }
  *a1 = a2;
}

_QWORD *sub_20C00EC98(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>::_AllocateNew(size_t) [ELEM = pxrInternal__aapl__pxrReserved__::SdfPathExpression]");
  if (a2 > 0x2AAAAAAAAAAAAAALL)
    v3 = -1;
  else
    v3 = (96 * a2) | 0x10;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20C00ED20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C00ED38(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2 != a3)
  {
    v5 = 0;
    v6 = *result;
    do
    {
      result = sub_20C00D1F0((_QWORD *)(a2 + v5), v6);
      v5 += 96;
    }
    while (a2 + v5 != a3);
  }
  return result;
}

void sub_20C00ED8C(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 96)
  {
    sub_20C00EDC4(v1);
    v1 += 96;
  }
  __cxa_rethrow();
}

void sub_20C00EDB0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20C00EDC4(uint64_t a1)
{
  void *v2;
  void **v3;

  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v3 = (void **)(a1 + 48);
  sub_20C00E25C(&v3);
  v3 = (void **)(a1 + 24);
  sub_20C00D5A8(&v3);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

uint64_t sub_20C00EE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      sub_20C00D1F0((_QWORD *)(a3 + v6), a1 + v6);
      v6 += 96;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_20C00EE84(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 96)
  {
    sub_20C00EDC4(v1);
    v1 += 96;
  }
  __cxa_rethrow();
}

void sub_20C00EEA8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20C00EEBC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::SdfPathExpression]", a3);
      v6 = *((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20C00EC98((uint64_t)this, *(_QWORD *)this);
      sub_20C00EE28(v6, v6 + 96 * v7, (uint64_t)v8);
      sub_20C00E910(this);
      *((_QWORD *)this + 4) = v8;
    }
  }
}

uint64_t sub_20C00EF48@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = sub_20C00F20C(&v5, a1, a2);
  *a3 = v5;
  a3[1] = (char *)&off_24C525968 + 3;
  return result;
}

void sub_20C00F018(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C525A20;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20C00F4D0((uint64_t)v20, v8);
    sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 8 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_DWORD *)sub_20C00F540(&v18, v14, v15);
      sub_20C00F20C(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_20C00F5BC(&v18);
    }
    a4[1] = off_24C525A20;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C00F154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C00F184(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C00F0FCLL);
  }
  JUMPOUT(0x20C00F16CLL);
}

void sub_20C00F1FC()
{
  __cxa_end_catch();
  JUMPOUT(0x20C00F16CLL);
}

uint64_t sub_20C00F20C(_DWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t result;
  char *v10;
  _QWORD *exception;
  _QWORD v12[4];
  char v13;

  v3 = *a3;
  v4 = *a2;
  if (*a3 + 2 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    v10 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v12[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v10, 0x2Fu);
    v12[1] = "MakeScalarValueImpl";
    v12[2] = 141;
    v12[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec2i *, const vector<Value> &, size_t &)";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec2i");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  *a1 = sub_20C0027A8(v4 + 56 * v3);
  v8 = (*a3)++;
  result = sub_20C0027A8(*a2 + 56 * v8);
  a1[1] = result;
  return result;
}

_QWORD *sub_20C00F334(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_20C00F344(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20C00F350()
{
  return 1;
}

unint64_t sub_20C00F358(int *a1)
{
  return bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (a1[1] + ((unint64_t)(a1[1] + (uint64_t)*a1 + (a1[1] + (uint64_t)*a1) * (a1[1] + (uint64_t)*a1)) >> 1))));
}

BOOL sub_20C00F38C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL sub_20C00F3A4(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_20C00F3C0()
{
  return 0;
}

_QWORD *sub_20C00F3CC(uint64_t a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_20C00F3DC()
{
  return &unk_24C51C140;
}

uint64_t sub_20C00F3E8()
{
  return 0;
}

uint64_t sub_20C00F3F0()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C00F3FC()
{
  return 0;
}

uint64_t sub_20C00F404()
{
  return 0;
}

BOOL sub_20C00F40C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CACA0A2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C00F444(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C140, a2, a3);
}

void *sub_20C00F464()
{
  return &unk_24C51C140;
}

_QWORD *sub_20C00F474@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_24C525968 + 3;
  return result;
}

uint64_t sub_20C00F48C(uint64_t result, int *a2, int *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(result + 8))
    v3 += (unint64_t)(*(_QWORD *)result + v3 + (*(_QWORD *)result + v3) * (*(_QWORD *)result + v3)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v3;
  *(_QWORD *)result = *a3 + ((unint64_t)(v3 + *a3 + (v3 + *a3) * (v3 + *a3)) >> 1);
  return result;
}

uint64_t sub_20C00F4D0(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20C00F9CC((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20C00F528(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C00F540(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec2i>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec2i>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C00F5B4()
{
  JUMPOUT(0x20C00F564);
}

_QWORD *sub_20C00F5BC(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec2i>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec2i>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t *sub_20C00F638(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20C00F660(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C00F7C0(a1);
}

uint64_t sub_20C00F670()
{
  return 1;
}

unint64_t sub_20C00F678(unint64_t **a1)
{
  char v2;

  return sub_20C00F818((uint64_t)&v2, *a1);
}

BOOL sub_20C00F69C(_QWORD **a1, uint64_t *a2)
{
  return sub_20C00F870(*a1, *a2);
}

BOOL sub_20C00F6A8(_QWORD **a1, uint64_t a2)
{
  return sub_20C00F870(*a1, a2);
}

uint64_t sub_20C00F6B4()
{
  return 0;
}

_QWORD *sub_20C00F6C0(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20C00F9B4);
  return a2;
}

void *sub_20C00F708()
{
  return &unk_24C51D9C0;
}

uint64_t sub_20C00F714()
{
  return 1;
}

void *sub_20C00F71C()
{
  return &unk_24C51C140;
}

uint64_t sub_20C00F728(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20C00F730(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20C00F73C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB2EA58 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C00F774(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51D9C0, a2, a3);
}

void *sub_20C00F794()
{
  return &unk_24C51D9C0;
}

uint64_t sub_20C00F7A0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20C00F7A8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C525A20;
  return sub_20BF56B40(a2, v2);
}

void **sub_20C00F7C0(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20C00F818(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *a2;
  if (*a2)
  {
    v3 = (int *)a2[4];
    v4 = *a2;
    do
    {
      v5 = *v3;
      v6 = v3[1];
      v3 += 2;
      v7 = bswap64(0x9E3779B97F4A7C55 * (v6 + ((unint64_t)(v6 + v5 + (v6 + v5) * (v6 + v5)) >> 1)));
      v2 = v7 + ((v7 + v2 + (v7 + v2) * (v7 + v2)) >> 1);
      --v4;
    }
    while (v4);
    v2 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v2);
}

BOOL sub_20C00F870(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  int *v5;
  int *v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (int *)a1[4];
  v6 = &v5[2 * *a1];
  v7 = *(int **)(a2 + 32);
  do
  {
    v8 = *v5;
    v9 = v5[1];
    v5 += 2;
    v10 = *v7;
    v11 = v7[1];
    v7 += 2;
    result = v8 == v10 && v9 == v11;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t sub_20C00F90C(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20C00F7C0(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20C00F9B4(_QWORD *a1, _QWORD *a2)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void sub_20C00F9CC(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load((unint64_t *)v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20C00FB80((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                v10[i] = *(_QWORD *)(v9 + i * 8);
            }
          }
          v12 = *a3;
          v13 = v3;
          do
            v7[v13++] = *v12;
          while (a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (uint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20C00FB80((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 8 * v19;
      v22 = v20;
      do
      {
        v23 = *v7++;
        *v22++ = v23;
        v21 -= 8;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = v3;
      do
        v20[v25++] = *v24;
      while (a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 8 * a2;
  if (8 * a2 / a2 != 8)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20C00FB80((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    v16[v17 / 8] = *v18;
    v17 += 8;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (uint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20C00FB80(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec2i]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20C00FC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C00FC1C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2i]", a3);
      v6 = (uint64_t *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20C00FB80((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 8 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

uint64_t sub_20C00FCB0@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v5;

  result = sub_20C00FF78(&v5, a1, a2);
  *(_QWORD *)(a3 + 8) = (char *)&off_24C51DDF8 + 3;
  *(_DWORD *)a3 = v5;
  return result;
}

void sub_20C00FD84(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C51EAE8;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20BF590CC((uint64_t)v20, v8);
    sub_20BF5944C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20BF5944C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 4 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_WORD *)sub_20C01012C(&v18, v14, v15);
      sub_20C00FF78(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_20C0101A8(&v18);
    }
    a4[1] = off_24C51EAE8;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C00FEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C00FEF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C00FE68);
  }
  JUMPOUT(0x20C00FED8);
}

void sub_20C00FF68()
{
  __cxa_end_catch();
  JUMPOUT(0x20C00FED8);
}

uint64_t sub_20C00FF78(_WORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  float v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  uint64_t result;
  char *v13;
  _QWORD *exception;
  _QWORD v15[4];
  char v16;

  v3 = *a3;
  v4 = *a2;
  if (*a3 + 2 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    v13 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v15[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v13, 0x2Fu);
    v15[1] = "MakeScalarValueImpl";
    v15[2] = 134;
    v15[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec2h *, const vector<Value> &, size_t &)";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec2h");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_20C005AC4(v4 + 56 * v3);
  if (v8 == 0.0)
  {
    v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  *a1 = v9;
  v10 = (*a3)++;
  sub_20C005AC4(*a2 + 56 * v10);
  if (v11 == 0.0)
  {
    result = HIWORD(LODWORD(v11));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v11) >> 23])
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v11) >> 23]
           + (((LODWORD(v11) & 0x7FFFFF) + ((LODWORD(v11) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v11));
  }
  a1[1] = result;
  return result;
}

uint64_t sub_20C01012C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec2h>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec2h>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0101A0()
{
  JUMPOUT(0x20C010150);
}

_QWORD *sub_20C0101A8(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec2h>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec2h>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

uint64_t sub_20C010224@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = sub_20C0104E8(&v5, a1, a2);
  *a3 = v5;
  a3[1] = (char *)&off_24C51DEB0 + 3;
  return result;
}

void sub_20C0102F4(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C51EA30;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20BF585AC((uint64_t)v20, v8);
    sub_20BF58964((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20BF58964((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 8 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_DWORD *)sub_20C010610(&v18, v14, v15);
      sub_20C0104E8(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_20C01068C(&v18);
    }
    a4[1] = off_24C51EA30;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C010430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C010460(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C0103D8);
  }
  JUMPOUT(0x20C010448);
}

void sub_20C0104D8()
{
  __cxa_end_catch();
  JUMPOUT(0x20C010448);
}

uint64_t sub_20C0104E8(_DWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  char *v12;
  _QWORD *exception;
  _QWORD v14[4];
  char v15;

  v3 = *a3;
  v4 = *a2;
  if (*a3 + 2 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    v12 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v14[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v12, 0x2Fu);
    v14[1] = "MakeScalarValueImpl";
    v14[2] = 127;
    v14[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec2f *, const vector<Value> &, size_t &)";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec2f");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_20C005AC4(v4 + 56 * v3);
  *a1 = v8;
  v9 = (*a3)++;
  result = sub_20C005AC4(*a2 + 56 * v9);
  a1[1] = v11;
  return result;
}

uint64_t sub_20C010610(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec2f>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec2f>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C010684()
{
  JUMPOUT(0x20C010634);
}

_QWORD *sub_20C01068C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec2f>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec2f>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

unsigned int *sub_20C010708@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, unsigned int **a3@<X8>)
{
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;
  __int128 v7;

  sub_20C0109F4(&v7, a1, a2);
  a3[1] = (unsigned int *)((char *)&off_24C51DF68 + 2);
  result = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)result = v7;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a3 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

void sub_20C010800(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C51EBA0;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20BF59CB4((uint64_t)v20, v8);
    sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 16 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_QWORD *)sub_20C010B1C(&v18, v14, v15);
      sub_20C0109F4(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_20C010B98(&v18);
    }
    a4[1] = off_24C51EBA0;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C01093C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C01096C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C0108E4);
  }
  JUMPOUT(0x20C010954);
}

void sub_20C0109E4()
{
  __cxa_end_catch();
  JUMPOUT(0x20C010954);
}

uint64_t sub_20C0109F4(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  _QWORD *exception;
  _QWORD v14[4];
  char v15;

  v3 = *a3;
  v4 = *a2;
  if (*a3 + 2 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    v12 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v14[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v12, 0x2Fu);
    v14[1] = "MakeScalarValueImpl";
    v14[2] = 120;
    v14[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec2d *, const vector<Value> &, size_t &)";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec2d");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_20C00682C(v4 + 56 * v3);
  *a1 = v8;
  v9 = (*a3)++;
  result = sub_20C00682C(*a2 + 56 * v9);
  a1[1] = v11;
  return result;
}

uint64_t sub_20C010B1C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec2d>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec2d>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C010B90()
{
  JUMPOUT(0x20C010B40);
}

_QWORD *sub_20C010B98(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec2d>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec2d>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

_DWORD *sub_20C010C14@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _DWORD *result;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;

  sub_20C010F0C(&v7, a1, a2);
  a3[1] = (char *)&off_24C525AD8 + 2;
  result = operator new(0x10uLL);
  *(_QWORD *)result = v7;
  result[2] = v8;
  v5 = result + 3;
  atomic_store(0, result + 3);
  *a3 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

void sub_20C010D14(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C525B90;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20C0112EC((uint64_t)v20, v8);
    sub_20C011B6C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20C011B6C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 12 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_DWORD *)sub_20C011360(&v18, v14, v15);
      sub_20C010F0C(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_20C0113DC(&v18);
    }
    a4[1] = off_24C525B90;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C010E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C010E84(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C010DFCLL);
  }
  JUMPOUT(0x20C010E6CLL);
}

void sub_20C010EFC()
{
  __cxa_end_catch();
  JUMPOUT(0x20C010E6CLL);
}

uint64_t sub_20C010F0C(_DWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char *v11;
  _QWORD *exception;
  _QWORD v13[4];
  char v14;

  v3 = *a3;
  v4 = *a2;
  if (*a3 + 3 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    v11 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v13[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v11, 0x2Fu);
    v13[1] = "MakeScalarValueImpl";
    v13[2] = 172;
    v13[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec3i *, const vector<Value> &, size_t &)";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec3i");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  *a1 = sub_20C0027A8(v4 + 56 * v3);
  v8 = (*a3)++;
  a1[1] = sub_20C0027A8(*a2 + 56 * v8);
  v9 = (*a3)++;
  result = sub_20C0027A8(*a2 + 56 * v9);
  a1[2] = result;
  return result;
}

uint64_t *sub_20C011050(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 12);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_20C011074(void **a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*a1;
  if (v1)
  {
    v2 = v1 + 3;
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

_QWORD *sub_20C0110A0(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_20C0110B0()
{
  return 1;
}

unint64_t sub_20C0110B8(int **a1)
{
  int *v1;
  int *v2;
  int *v3;
  uint64_t v5;
  char v6;

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v5 = 0;
  v6 = 0;
  sub_20C0112B4((uint64_t)&v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5));
}

BOOL sub_20C011110(_QWORD *a1, _QWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = (_DWORD *)*a1;
  v3 = (_DWORD *)*a2;
  return *(_DWORD *)*a1 == *(_DWORD *)*a2 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_20C011154(_QWORD *a1, _DWORD *a2)
{
  _DWORD *v2;

  v2 = (_DWORD *)*a1;
  return *(_DWORD *)*a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_20C011198()
{
  return 0;
}

_QWORD *sub_20C0111A4(uint64_t a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_20C0111B4()
{
  return &unk_24C51C180;
}

uint64_t sub_20C0111C0()
{
  return 0;
}

uint64_t sub_20C0111C8()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C0111D4()
{
  return 0;
}

uint64_t sub_20C0111DC()
{
  return 0;
}

BOOL sub_20C0111E4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CACA15ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C01121C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C180, a2, a3);
}

void *sub_20C01123C()
{
  return &unk_24C51C180;
}

uint64_t sub_20C011248(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_DWORD *sub_20C011250@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _DWORD *result;
  int v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = (char *)&off_24C525AD8 + 2;
  result = operator new(0x10uLL);
  v5 = *(_DWORD *)(v3 + 8);
  *(_QWORD *)result = *(_QWORD *)v3;
  result[2] = v5;
  v6 = result + 3;
  atomic_store(0, result + 3);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_20C0112B4(uint64_t a1, int *a2, int *a3, int *a4)
{
  uint64_t v4;

  v4 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v4 += (unint64_t)(*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return sub_20C00F48C(a1, a3, a4);
}

uint64_t sub_20C0112EC(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  int v6;
  uint64_t *v7;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = 0;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v7 = &v5;
  sub_20C0118B0((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_20C011348(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C011360(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec3i>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec3i>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0113D4()
{
  JUMPOUT(0x20C011384);
}

_QWORD *sub_20C0113DC(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec3i>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec3i>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 12;
  }
  return a1;
}

uint64_t *sub_20C011458(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20C011480(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C0115E0(a1);
}

uint64_t sub_20C011490()
{
  return 1;
}

unint64_t sub_20C011498(uint64_t **a1)
{
  char v2;

  return sub_20C011638((uint64_t)&v2, *a1);
}

BOOL sub_20C0114BC(_QWORD **a1, uint64_t *a2)
{
  return sub_20C01172C(*a1, *a2);
}

BOOL sub_20C0114C8(_QWORD **a1, uint64_t a2)
{
  return sub_20C01172C(*a1, a2);
}

uint64_t sub_20C0114D4()
{
  return 0;
}

_QWORD *sub_20C0114E0(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20C011898);
  return a2;
}

void *sub_20C011528()
{
  return &unk_24C51D9A8;
}

uint64_t sub_20C011534()
{
  return 1;
}

void *sub_20C01153C()
{
  return &unk_24C51C180;
}

uint64_t sub_20C011548(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20C011550(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20C01155C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAEA21ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C011594(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51D9A8, a2, a3);
}

void *sub_20C0115B4()
{
  return &unk_24C51D9A8;
}

uint64_t sub_20C0115C0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20C0115C8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C525B90;
  return sub_20BF56B40(a2, v2);
}

void **sub_20C0115E0(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20C011638(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int *v3;
  int *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (int *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 3;
      sub_20C0116AC((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20C0116AC(uint64_t a1, int *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = sub_20C0112B4((uint64_t)&v5, a2, a2 + 1, a2 + 2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL sub_20C01172C(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (_DWORD *)a1[4];
  v6 = &v5[3 * *a1];
  for (i = *(_DWORD **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t sub_20C0117F0(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20C0115E0(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20C011898(_QWORD *a1, _QWORD *a2)
{
  *a1 += 12;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void sub_20C0118B0(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20C011AC8((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = (char *)v10 + v11;
                v13 = *(_QWORD *)(v9 + v11);
                *((_DWORD *)v12 + 2) = *(_DWORD *)(v9 + v11 + 8);
                *(_QWORD *)v12 = v13;
                v11 += 12;
              }
              while (12 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 12 * v3;
          do
          {
            v16 = (char *)v7 + v15;
            v17 = *v14;
            *((_DWORD *)v16 + 2) = *((_DWORD *)v14 + 2);
            *(_QWORD *)v16 = v17;
            v15 += 12;
          }
          while (12 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (_QWORD *)a1[4];
    }
    if (v3 >= a2)
      v24 = a2;
    else
      v24 = *a1;
    v25 = sub_20C011AC8((uint64_t)a1, a2);
    v18 = v25;
    if (v24)
    {
      v26 = 12 * v24;
      v27 = v25;
      do
      {
        v28 = *v7;
        *((_DWORD *)v27 + 2) = *((_DWORD *)v7 + 2);
        *v27 = v28;
        v27 = (_QWORD *)((char *)v27 + 12);
        v7 = (_QWORD *)((char *)v7 + 12);
        v26 -= 12;
      }
      while (v26);
    }
    if (v3 < a2)
    {
      v29 = *a3;
      v30 = 12 * v3;
      do
      {
        v31 = (char *)v25 + v30;
        v32 = *v29;
        *((_DWORD *)v31 + 2) = *((_DWORD *)v29 + 2);
        *(_QWORD *)v31 = v32;
        v30 += 12;
      }
      while (12 * a2 != v30);
    }
    goto LABEL_29;
  }
  if (a2 >= 0x1555555555555556)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v19 = sub_20C011AC8((uint64_t)a1, a2);
  v18 = v19;
  v20 = 0;
  v21 = *a3;
  do
  {
    v22 = (char *)v19 + v20;
    v23 = *v21;
    *((_DWORD *)v22 + 2) = *((_DWORD *)v21 + 2);
    *(_QWORD *)v22 = v23;
    v20 += 12;
  }
  while (12 * a2 != v20);
LABEL_29:
  if (v18 != (_QWORD *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

_QWORD *sub_20C011AC8(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec3i]");
  if (a2 > 0x1555555555555553)
    v3 = -1;
  else
    v3 = 12 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20C011B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C011B6C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3i]", a3);
      v6 = (uint64_t *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20C011AC8((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 12 * v7;
        v11 = v8;
        do
        {
          v12 = *v6;
          *((_DWORD *)v11 + 2) = *((_DWORD *)v6 + 2);
          *v11 = v12;
          v11 = (_QWORD *)((char *)v11 + 12);
          v6 = (uint64_t *)((char *)v6 + 12);
          v10 -= 12;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

uint64_t sub_20C011C10@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v5;
  __int16 v6;

  result = sub_20C011EE4(&v5, a1, a2);
  *(_QWORD *)(a3 + 8) = (char *)&off_24C51E020 + 3;
  *(_DWORD *)a3 = v5;
  *(_WORD *)(a3 + 4) = v6;
  return result;
}

void sub_20C011CEC(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C51ED10;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20BF5B6EC((uint64_t)v20, v8);
    sub_20BF5BADC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20BF5BADC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 6 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_WORD *)sub_20C0120FC(&v18, v14, v15);
      sub_20C011EE4(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_20C012178(&v18);
    }
    a4[1] = off_24C51ED10;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C011E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C011E5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C011DD4);
  }
  JUMPOUT(0x20C011E44);
}

void sub_20C011ED4()
{
  __cxa_end_catch();
  JUMPOUT(0x20C011E44);
}

uint64_t sub_20C011EE4(_WORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  float v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  unsigned int v12;
  uint64_t v13;
  float v14;
  uint64_t result;
  char *v16;
  _QWORD *exception;
  _QWORD v18[4];
  char v19;

  v3 = *a3;
  v4 = *a2;
  if (*a3 + 3 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    v16 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v18[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v16, 0x2Fu);
    v18[1] = "MakeScalarValueImpl";
    v18[2] = 164;
    v18[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec3h *, const vector<Value> &, size_t &)";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec3h");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_20C005AC4(v4 + 56 * v3);
  if (v8 == 0.0)
  {
    v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  *a1 = v9;
  v10 = (*a3)++;
  sub_20C005AC4(*a2 + 56 * v10);
  if (v11 == 0.0)
  {
    v12 = HIWORD(LODWORD(v11));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v11) >> 23])
  {
    v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v11) >> 23]
        + (((LODWORD(v11) & 0x7FFFFF) + ((LODWORD(v11) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v12) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v11));
  }
  a1[1] = v12;
  v13 = (*a3)++;
  sub_20C005AC4(*a2 + 56 * v13);
  if (v14 == 0.0)
  {
    result = HIWORD(LODWORD(v14));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23])
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23]
           + (((LODWORD(v14) & 0x7FFFFF) + ((LODWORD(v14) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v14));
  }
  a1[2] = result;
  return result;
}

uint64_t sub_20C0120FC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec3h>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec3h>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C012170()
{
  JUMPOUT(0x20C012120);
}

_QWORD *sub_20C012178(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec3h>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec3h>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 6;
  }
  return a1;
}

_DWORD *sub_20C0121F4@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _DWORD *result;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;

  sub_20C0124EC(&v7, a1, a2);
  a3[1] = (char *)&off_24C51E0D8 + 2;
  result = operator new(0x10uLL);
  *(_QWORD *)result = v7;
  result[2] = v8;
  v5 = result + 3;
  atomic_store(0, result + 3);
  *a3 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

void sub_20C0122F4(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C51EC58;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20BF5AB98((uint64_t)v20, v8);
    sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 12 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_DWORD *)sub_20C012630(&v18, v14, v15);
      sub_20C0124EC(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_20C0126AC(&v18);
    }
    a4[1] = off_24C51EC58;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C012434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C012464(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C0123DCLL);
  }
  JUMPOUT(0x20C01244CLL);
}

void sub_20C0124DC()
{
  __cxa_end_catch();
  JUMPOUT(0x20C01244CLL);
}

uint64_t sub_20C0124EC(_DWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  char *v14;
  _QWORD *exception;
  _QWORD v16[4];
  char v17;

  v3 = *a3;
  v4 = *a2;
  if (*a3 + 3 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    v14 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v16[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v14, 0x2Fu);
    v16[1] = "MakeScalarValueImpl";
    v16[2] = 156;
    v16[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec3f *, const vector<Value> &, size_t &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec3f");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_20C005AC4(v4 + 56 * v3);
  *a1 = v8;
  v9 = (*a3)++;
  sub_20C005AC4(*a2 + 56 * v9);
  a1[1] = v10;
  v11 = (*a3)++;
  result = sub_20C005AC4(*a2 + 56 * v11);
  a1[2] = v13;
  return result;
}

uint64_t sub_20C012630(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec3f>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec3f>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0126A4()
{
  JUMPOUT(0x20C012654);
}

_QWORD *sub_20C0126AC(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec3f>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec3f>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 12;
  }
  return a1;
}

char *sub_20C012728@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  char *result;
  unsigned int *v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;

  sub_20C012A20(&v7, a1, a2);
  a3[1] = (char *)&off_24C51E190 + 2;
  result = (char *)operator new(0x20uLL);
  *(_OWORD *)result = v7;
  *((_QWORD *)result + 2) = v8;
  v5 = (unsigned int *)(result + 24);
  atomic_store(0, (unsigned int *)result + 6);
  *a3 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

void sub_20C012828(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C51EDC8;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20BF5C3C4((uint64_t)v20, v8);
    sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 24 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_QWORD *)sub_20C012B64(&v18, v14, v15);
      sub_20C012A20(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_20C012BE0(&v18);
    }
    a4[1] = off_24C51EDC8;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C012968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C012998(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C012910);
  }
  JUMPOUT(0x20C012980);
}

void sub_20C012A10()
{
  __cxa_end_catch();
  JUMPOUT(0x20C012980);
}

uint64_t sub_20C012A20(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  _QWORD *exception;
  _QWORD v16[4];
  char v17;

  v3 = *a3;
  v4 = *a2;
  if (*a3 + 3 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    v14 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v16[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v14, 0x2Fu);
    v16[1] = "MakeScalarValueImpl";
    v16[2] = 148;
    v16[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec3d *, const vector<Value> &, size_t &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec3d");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_20C00682C(v4 + 56 * v3);
  *a1 = v8;
  v9 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v9);
  a1[1] = v10;
  v11 = (*a3)++;
  result = sub_20C00682C(*a2 + 56 * v11);
  a1[2] = v13;
  return result;
}

uint64_t sub_20C012B64(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec3d>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec3d>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C012BD8()
{
  JUMPOUT(0x20C012B88);
}

_QWORD *sub_20C012BE0(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec3d>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec3d>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 24;
  }
  return a1;
}

unsigned int *sub_20C012C5C@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, unsigned int **a3@<X8>)
{
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;
  __int128 v7;

  sub_20C012F48(&v7, a1, a2);
  a3[1] = (unsigned int *)((char *)&off_24C525C48 + 2);
  result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)result = v7;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a3 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

void sub_20C012D54(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = &off_24C525D00;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20C013364((uint64_t)v20, v8);
    sub_20C013B80((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20C013B80((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 16 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_DWORD *)sub_20C0133D4(&v18, v14, v15);
      sub_20C012F48(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_20C013450(&v18);
    }
    a4[1] = &off_24C525D00;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C012E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C012EC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C012E38);
  }
  JUMPOUT(0x20C012EA8);
}

void sub_20C012F38()
{
  __cxa_end_catch();
  JUMPOUT(0x20C012EA8);
}

uint64_t sub_20C012F48(_DWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char *v12;
  _QWORD *exception;
  _QWORD v14[4];
  char v15;

  v3 = *a3;
  v4 = *a2;
  if (*a3 + 4 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    v12 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v14[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v12, 0x2Fu);
    v14[1] = "MakeScalarValueImpl";
    v14[2] = 207;
    v14[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec4i *, const vector<Value> &, size_t &)";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec4i");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  *a1 = sub_20C0027A8(v4 + 56 * v3);
  v8 = (*a3)++;
  a1[1] = sub_20C0027A8(*a2 + 56 * v8);
  v9 = (*a3)++;
  a1[2] = sub_20C0027A8(*a2 + 56 * v9);
  v10 = (*a3)++;
  result = sub_20C0027A8(*a2 + 56 * v10);
  a1[3] = result;
  return result;
}

uint64_t *sub_20C0130A8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_20C0130CC(void **a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*a1;
  if (v1)
  {
    v2 = v1 + 4;
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

_QWORD *sub_20C0130F8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_20C013108()
{
  return 1;
}

unint64_t sub_20C013110(int **a1)
{
  int *v1;
  int *v2;
  int *v3;
  int *v4;
  uint64_t v6;
  char v7;

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v4 = *a1 + 3;
  v6 = 0;
  v7 = 0;
  sub_20C013328((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

BOOL sub_20C01316C(_QWORD *a1, _QWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = (_DWORD *)*a1;
  v3 = (_DWORD *)*a2;
  return *(_DWORD *)*a1 == *(_DWORD *)*a2 && v2[1] == v3[1] && v2[2] == v3[2] && v2[3] == v3[3];
}

BOOL sub_20C0131C0(_QWORD *a1, _DWORD *a2)
{
  _DWORD *v2;

  v2 = (_DWORD *)*a1;
  return *(_DWORD *)*a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2] && v2[3] == a2[3];
}

uint64_t sub_20C013214()
{
  return 0;
}

_QWORD *sub_20C013220(uint64_t a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_20C013230()
{
  return &unk_24C51C1C0;
}

uint64_t sub_20C01323C()
{
  return 0;
}

uint64_t sub_20C013244()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C013250()
{
  return 0;
}

uint64_t sub_20C013258()
{
  return 0;
}

BOOL sub_20C013260(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CACA212 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C013298(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C51C1C0, a2, a3);
}

void *sub_20C0132B8()
{
  return &unk_24C51C1C0;
}

uint64_t sub_20C0132C4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

unsigned int *sub_20C0132CC@<X0>(_OWORD **a1@<X0>, unsigned int **a2@<X8>)
{
  _OWORD *v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *a1;
  a2[1] = (unsigned int *)((char *)&off_24C525C48 + 2);
  result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)result = *v3;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_20C013328(uint64_t a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t v5;

  v5 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v5 += (unint64_t)(*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return sub_20C0112B4(a1, a3, a4, a5);
}

uint64_t sub_20C013364(uint64_t a1, unint64_t a2)
{
  _QWORD v5[2];
  _OWORD *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5[0] = 0;
  v5[1] = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = v5;
  sub_20C013934((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20C0133BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0133D4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec4i>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec4i>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C013448()
{
  JUMPOUT(0x20C0133F8);
}

_QWORD *sub_20C013450(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec4i>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec4i>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

uint64_t *sub_20C0134CC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20C0134F4(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C013654(a1);
}

uint64_t sub_20C013504()
{
  return 1;
}

unint64_t sub_20C01350C(uint64_t **a1)
{
  char v2;

  return sub_20C0136AC((uint64_t)&v2, *a1);
}

BOOL sub_20C013530(_QWORD **a1, uint64_t *a2)
{
  return sub_20C0137A4(*a1, *a2);
}

BOOL sub_20C01353C(_QWORD **a1, uint64_t a2)
{
  return sub_20C0137A4(*a1, a2);
}

uint64_t sub_20C013548()
{
  return 0;
}

_QWORD *sub_20C013554(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20C01391C);
  return a2;
}

void *sub_20C01359C()
{
  return &unk_24C51D990;
}

uint64_t sub_20C0135A8()
{
  return 1;
}

void *sub_20C0135B0()
{
  return &unk_24C51C1C0;
}

uint64_t sub_20C0135BC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20C0135C4(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20C0135D0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAEA9C8 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C013608(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51D990, a2, a3);
}

void *sub_20C013628()
{
  return &unk_24C51D990;
}

uint64_t sub_20C013634(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20C01363C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = &off_24C525D00;
  return sub_20BF56B40(a2, v2);
}

void **sub_20C013654(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20C0136AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int *v3;
  int *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (int *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      sub_20C013720((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20C013720(uint64_t a1, int *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = sub_20C013328((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL sub_20C0137A4(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (_DWORD *)a1[4];
  v6 = &v5[4 * *a1];
  for (i = *(_DWORD **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t sub_20C013874(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20C013654(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20C01391C(_QWORD *a1, _QWORD *a2)
{
  *a1 += 16;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void sub_20C013934(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20C013AE8((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                v11 += 2;
              }
              while (2 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 2 * v3;
          do
          {
            *(_OWORD *)&v7[v13] = *v12;
            v13 += 2;
          }
          while (2 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20C013AE8((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 16 * v19;
      v22 = v20;
      do
      {
        v23 = *(_OWORD *)v7;
        v7 += 2;
        *(_OWORD *)v22 = v23;
        v22 += 2;
        v21 -= 16;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 2 * v3;
      do
      {
        *(_OWORD *)&v20[v25] = *v24;
        v25 += 2;
      }
      while (2 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 16 * a2;
  if (16 * a2 / a2 != 16)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20C013AE8((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_OWORD *)&v16[v17 / 8] = *v18;
    v17 += 16;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20C013AE8(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec4i]");
  if (a2 > 0xFFFFFFFFFFFFFFELL)
    v3 = -1;
  else
    v3 = 16 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20C013B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C013B80(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4i]", a3);
      v6 = (__int128 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20C013AE8((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 16 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 16;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

uint64_t sub_20C013C14@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = sub_20C013ED8(&v5, a1, a2);
  *a3 = v5;
  a3[1] = (char *)&off_24C51E248 + 3;
  return result;
}

void sub_20C013CE4(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C51EF38;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20BF5DD9C((uint64_t)v20, v8);
    sub_20BF5E11C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20BF5E11C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 8 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_WORD *)sub_20C014154(&v18, v14, v15);
      sub_20C013ED8(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_20C0141D0(&v18);
    }
    a4[1] = off_24C51EF38;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C013E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C013E50(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C013DC8);
  }
  JUMPOUT(0x20C013E38);
}

void sub_20C013EC8()
{
  __cxa_end_catch();
  JUMPOUT(0x20C013E38);
}

uint64_t sub_20C013ED8(_WORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  float v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  unsigned int v12;
  uint64_t v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  float v17;
  uint64_t result;
  char *v19;
  _QWORD *exception;
  _QWORD v21[4];
  char v22;

  v3 = *a3;
  v4 = *a2;
  if (*a3 + 4 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    v19 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v21[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v19, 0x2Fu);
    v21[1] = "MakeScalarValueImpl";
    v21[2] = 198;
    v21[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec4h *, const vector<Value> &, size_t &)";
    v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec4h");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_20C005AC4(v4 + 56 * v3);
  if (v8 == 0.0)
  {
    v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  *a1 = v9;
  v10 = (*a3)++;
  sub_20C005AC4(*a2 + 56 * v10);
  if (v11 == 0.0)
  {
    v12 = HIWORD(LODWORD(v11));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v11) >> 23])
  {
    v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v11) >> 23]
        + (((LODWORD(v11) & 0x7FFFFF) + ((LODWORD(v11) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v12) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v11));
  }
  a1[1] = v12;
  v13 = (*a3)++;
  sub_20C005AC4(*a2 + 56 * v13);
  if (v14 == 0.0)
  {
    v15 = HIWORD(LODWORD(v14));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23])
  {
    v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23]
        + (((LODWORD(v14) & 0x7FFFFF) + ((LODWORD(v14) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v15) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v14));
  }
  a1[2] = v15;
  v16 = (*a3)++;
  sub_20C005AC4(*a2 + 56 * v16);
  if (v17 == 0.0)
  {
    result = HIWORD(LODWORD(v17));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v17) >> 23])
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v17) >> 23]
           + (((LODWORD(v17) & 0x7FFFFF) + ((LODWORD(v17) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v17));
  }
  a1[3] = result;
  return result;
}

uint64_t sub_20C014154(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec4h>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec4h>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0141C8()
{
  JUMPOUT(0x20C014178);
}

_QWORD *sub_20C0141D0(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec4h>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec4h>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

unsigned int *sub_20C01424C@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, unsigned int **a3@<X8>)
{
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;
  __int128 v7;

  sub_20C014538(&v7, a1, a2);
  a3[1] = (unsigned int *)((char *)&off_24C51E300 + 2);
  result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)result = v7;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a3 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

void sub_20C014344(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C51EE80;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20BF5D23C((uint64_t)v20, v8);
    sub_20BF5D5F0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20BF5D5F0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 16 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_DWORD *)sub_20C014698(&v18, v14, v15);
      sub_20C014538(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_20C014714(&v18);
    }
    a4[1] = off_24C51EE80;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C014480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C0144B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C014428);
  }
  JUMPOUT(0x20C014498);
}

void sub_20C014528()
{
  __cxa_end_catch();
  JUMPOUT(0x20C014498);
}

uint64_t sub_20C014538(_DWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t result;
  int v15;
  char *v16;
  _QWORD *exception;
  _QWORD v18[4];
  char v19;

  v3 = *a3;
  v4 = *a2;
  if (*a3 + 4 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    v16 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v18[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v16, 0x2Fu);
    v18[1] = "MakeScalarValueImpl";
    v18[2] = 189;
    v18[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec4f *, const vector<Value> &, size_t &)";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec4f");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_20C005AC4(v4 + 56 * v3);
  *a1 = v8;
  v9 = (*a3)++;
  sub_20C005AC4(*a2 + 56 * v9);
  a1[1] = v10;
  v11 = (*a3)++;
  sub_20C005AC4(*a2 + 56 * v11);
  a1[2] = v12;
  v13 = (*a3)++;
  result = sub_20C005AC4(*a2 + 56 * v13);
  a1[3] = v15;
  return result;
}

uint64_t sub_20C014698(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec4f>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec4f>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C01470C()
{
  JUMPOUT(0x20C0146BCLL);
}

_QWORD *sub_20C014714(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec4f>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec4f>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

char *sub_20C014790@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  char *result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  _OWORD v8[2];

  sub_20C014A7C(v8, a1, a2);
  a3[1] = (char *)&off_24C51E3B8 + 2;
  result = (char *)operator new(0x28uLL);
  v5 = v8[1];
  *(_OWORD *)result = v8[0];
  *((_OWORD *)result + 1) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20C014888(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C51EFF0;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20BF5E990((uint64_t)v20, v8);
    sub_20BF5ECA0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20BF5ECA0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 32 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_QWORD *)sub_20C014BDC(&v18, v14, v15);
      sub_20C014A7C(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_20C014C58(&v18);
    }
    a4[1] = off_24C51EFF0;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C0149C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C0149F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C01496CLL);
  }
  JUMPOUT(0x20C0149DCLL);
}

void sub_20C014A6C()
{
  __cxa_end_catch();
  JUMPOUT(0x20C0149DCLL);
}

uint64_t sub_20C014A7C(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  _QWORD *exception;
  _QWORD v18[4];
  char v19;

  v3 = *a3;
  v4 = *a2;
  if (*a3 + 4 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    v16 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v18[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v16, 0x2Fu);
    v18[1] = "MakeScalarValueImpl";
    v18[2] = 180;
    v18[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec4d *, const vector<Value> &, size_t &)";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec4d");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_20C00682C(v4 + 56 * v3);
  *a1 = v8;
  v9 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v9);
  a1[1] = v10;
  v11 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v11);
  a1[2] = v12;
  v13 = (*a3)++;
  result = sub_20C00682C(*a2 + 56 * v13);
  a1[3] = v15;
  return result;
}

uint64_t sub_20C014BDC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec4d>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec4d>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C014C50()
{
  JUMPOUT(0x20C014C00);
}

_QWORD *sub_20C014C58(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec4d>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec4d>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 32;
  }
  return a1;
}

uint64_t sub_20C014CD4@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = sub_20C014F98((uint64_t)&v5, a1, a2);
  *a3 = v5;
  a3[1] = (char *)&off_24C51E698 + 1;
  return result;
}

void sub_20C014DA4(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C51F2D0;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20BF61C74((uint64_t)v20, v8);
    sub_20BF61FF0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20BF61FF0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 8 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = sub_20C0150BC(&v18, v14, v15);
      sub_20C014F98(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_20C015138(&v18);
    }
    a4[1] = off_24C51F2D0;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C014EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C014F10(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C014E88);
  }
  JUMPOUT(0x20C014EF8);
}

void sub_20C014F88()
{
  __cxa_end_catch();
  JUMPOUT(0x20C014EF8);
}

uint64_t sub_20C014F98(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t result;
  char *v7;
  _QWORD *exception;
  __int16 v9;
  _QWORD v10[4];
  char v11;

  if (*a3 + 4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v10[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v7, 0x2Fu);
    v10[1] = "MakeScalarValueImpl";
    v10[2] = 282;
    v10[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfQuath *, const vector<Value> &, size_t &)";
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Quath");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  sub_20C005988(&v9, a2, a3);
  *(_WORD *)(a1 + 6) = v9;
  result = sub_20C011EE4(v10, a2, (uint64_t *)a3);
  *(_DWORD *)a1 = v10[0];
  *(_WORD *)(a1 + 4) = WORD2(v10[0]);
  return result;
}

uint64_t sub_20C0150BC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfQuath>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfQuath>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C015130()
{
  JUMPOUT(0x20C0150E0);
}

_QWORD *sub_20C015138(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfQuath>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfQuath>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

unsigned int *sub_20C0151B4@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, unsigned int **a3@<X8>)
{
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;
  __int128 v7;

  sub_20C01549C((uint64_t)&v7, a1, a2);
  a3[1] = (unsigned int *)&off_24C51E5E0;
  result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)result = v7;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a3 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

void sub_20C0152A8(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C51F218;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20BF6110C((uint64_t)v20, v8);
    sub_20BF614BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20BF614BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 16 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = sub_20C015620(&v18, v14, v15);
      sub_20C01549C(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_20C01569C(&v18);
    }
    a4[1] = off_24C51F218;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C0153E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C015414(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C01538CLL);
  }
  JUMPOUT(0x20C0153FCLL);
}

void sub_20C01548C()
{
  __cxa_end_catch();
  JUMPOUT(0x20C0153FCLL);
}

uint64_t sub_20C01549C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v9;
  uint64_t result;
  char *v11;
  const char *v12;
  char *v13;
  _QWORD *exception;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;

  v3 = *a3;
  v4 = *a2;
  v5 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3);
  if (*a3 + 4 > v5)
  {
    v11 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v15 = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v11, 0x2Fu);
    v16 = "MakeScalarValueImpl";
    v17 = 271;
    v18 = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfQuatf *, const vector<Value> &, size_t &)";
    v19 = 0;
    v12 = "Quatf";
    goto LABEL_6;
  }
  if (v3 + 1 > v5)
  {
    v13 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v15 = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v13, 0x2Fu);
    v16 = "MakeScalarValueImpl";
    v17 = 93;
    v18 = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(float *, const vector<Value> &, size_t &)";
    v19 = 0;
    v12 = "float";
LABEL_6:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", v12);
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_20C005AC4(v4 + 56 * v3);
  *(_DWORD *)(a1 + 12) = v9;
  result = sub_20C0124EC(&v15, a2, a3);
  *(_QWORD *)a1 = v15;
  *(_DWORD *)(a1 + 8) = (_DWORD)v16;
  return result;
}

uint64_t sub_20C015620(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfQuatf>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfQuatf>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C015694()
{
  JUMPOUT(0x20C015644);
}

_QWORD *sub_20C01569C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfQuatf>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfQuatf>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

char *sub_20C015718@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  char *result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  _OWORD v8[2];

  sub_20C015A00((uint64_t)v8, a1, a2);
  a3[1] = &off_24C51E750;
  result = (char *)operator new(0x28uLL);
  v5 = v8[1];
  *(_OWORD *)result = v8[0];
  *((_OWORD *)result + 1) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20C01580C(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C51F388;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20BF62858((uint64_t)v20, v8);
    sub_20BF62B64((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20BF62B64((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 32 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = sub_20C015B84(&v18, v14, v15);
      sub_20C015A00(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_20C015C00(&v18);
    }
    a4[1] = off_24C51F388;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C015948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C015978(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C0158F0);
  }
  JUMPOUT(0x20C015960);
}

void sub_20C0159F0()
{
  __cxa_end_catch();
  JUMPOUT(0x20C015960);
}

double sub_20C015A00(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v9;
  double result;
  char *v11;
  const char *v12;
  char *v13;
  _QWORD *exception;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  char v18;

  v3 = *a3;
  v4 = *a2;
  v5 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3);
  if (*a3 + 4 > v5)
  {
    v11 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    *(_QWORD *)&v15 = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v11, 0x2Fu);
    *((_QWORD *)&v15 + 1) = "MakeScalarValueImpl";
    v16 = 260;
    v17 = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfQuatd *, const vector<Value> &, size_t &)";
    v18 = 0;
    v12 = "Quatd";
    goto LABEL_6;
  }
  if (v3 + 1 > v5)
  {
    v13 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    *(_QWORD *)&v15 = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v13, 0x2Fu);
    *((_QWORD *)&v15 + 1) = "MakeScalarValueImpl";
    v16 = 87;
    v17 = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(double *, const vector<Value> &, size_t &)";
    v18 = 0;
    v12 = "double";
LABEL_6:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", v12);
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_20C00682C(v4 + 56 * v3);
  *(_QWORD *)(a1 + 24) = v9;
  sub_20C012A20(&v15, a2, a3);
  result = *(double *)&v15;
  *(_OWORD *)a1 = v15;
  *(_QWORD *)(a1 + 16) = v16;
  return result;
}

uint64_t sub_20C015B84(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfQuatd>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfQuatd>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C015BF8()
{
  JUMPOUT(0x20C015BA8);
}

_QWORD *sub_20C015C00(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfQuatd>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfQuatd>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 32;
  }
  return a1;
}

char *sub_20C015C7C@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  char *result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  _OWORD v8[2];

  sub_20C015F68(v8, a1, a2);
  a3[1] = (char *)&off_24C5221E8 + 2;
  result = (char *)operator new(0x28uLL);
  v5 = v8[1];
  *(_OWORD *)result = v8[0];
  *((_OWORD *)result + 1) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20C015D74(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C525DB8;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20C0160C8((uint64_t)v20, v8);
    sub_20C0167DC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20C0167DC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 32 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_QWORD *)sub_20C016138(&v18, v14, v15);
      sub_20C015F68(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_20C0161B4(&v18);
    }
    a4[1] = off_24C525DB8;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C015EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C015EE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C015E58);
  }
  JUMPOUT(0x20C015EC8);
}

void sub_20C015F58()
{
  __cxa_end_catch();
  JUMPOUT(0x20C015EC8);
}

uint64_t sub_20C015F68(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  _QWORD *exception;
  _QWORD v18[4];
  char v19;

  v3 = *a3;
  v4 = *a2;
  if (*a3 + 4 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    v16 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v18[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v16, 0x2Fu);
    v18[1] = "MakeScalarValueImpl";
    v18[2] = 216;
    v18[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfMatrix2d *, const vector<Va"
             "lue> &, size_t &)";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Matrix2d");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_20C00682C(v4 + 56 * v3);
  *a1 = v8;
  v9 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v9);
  a1[1] = v10;
  v11 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v11);
  a1[2] = v12;
  v13 = (*a3)++;
  result = sub_20C00682C(*a2 + 56 * v13);
  a1[3] = v15;
  return result;
}

uint64_t sub_20C0160C8(uint64_t a1, unint64_t a2)
{
  _OWORD v5[2];
  _OWORD *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_20BF56210((_QWORD *)a1);
  v6 = v5;
  sub_20C01657C((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20C016120(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C016138(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfMatrix2d>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal_"
            "_aapl__pxrReserved__::GfMatrix2d>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0161AC()
{
  JUMPOUT(0x20C01615CLL);
}

_QWORD *sub_20C0161B4(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfMatrix2d>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 32;
  }
  return a1;
}

uint64_t *sub_20C016230(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20C016258(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C0163B8(a1);
}

uint64_t sub_20C016268()
{
  return 1;
}

unint64_t sub_20C016270(uint64_t **a1)
{
  char v2;

  return sub_20BF5F0CC((uint64_t)&v2, *a1);
}

BOOL sub_20C016294(uint64_t **a1, uint64_t *a2)
{
  return sub_20C016410(*a1, *a2);
}

BOOL sub_20C0162A0(uint64_t **a1, uint64_t a2)
{
  return sub_20C016410(*a1, a2);
}

uint64_t sub_20C0162AC()
{
  return 0;
}

_QWORD *sub_20C0162B8(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20C016564);
  return a2;
}

void *sub_20C016300()
{
  return &unk_24C51DB28;
}

uint64_t sub_20C01630C()
{
  return 1;
}

void *sub_20C016314()
{
  return &unk_24C51BF90;
}

uint64_t sub_20C016320(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20C016328(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20C016334(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB2069ELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C01636C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DB28, a2, a3);
}

void *sub_20C01638C()
{
  return &unk_24C51DB28;
}

uint64_t sub_20C016398(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20C0163A0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C525DB8;
  return sub_20BF56B40(a2, v2);
}

void **sub_20C0163B8(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

BOOL sub_20C016410(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  double *v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (double *)a1[4];
  v7 = *(double **)(a2 + 32);
  v8 = 32 * v5 - 32;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==(v6, v7);
    if (!result)
      break;
    v6 += 4;
    v7 += 4;
    v9 = v8;
    v8 -= 32;
  }
  while (v9);
  return result;
}

uint64_t sub_20C0164BC(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20C0163B8(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20C016564(double **a1, _QWORD *a2)
{
  double *v3;

  v3 = *a1;
  *a1 += 4;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

void sub_20C01657C(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  __int128 v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  __int128 v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _OWORD *v22;
  unint64_t *v23;
  __int128 v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  __int128 v34;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20C016744((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11];
                v13 = *(_OWORD *)(v9 + v11 * 8 + 16);
                *(_OWORD *)v12 = *(_OWORD *)(v9 + v11 * 8);
                *((_OWORD *)v12 + 1) = v13;
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 4 * v3;
          do
          {
            v16 = &v7[v15];
            v17 = v14[1];
            *(_OWORD *)v16 = *v14;
            *((_OWORD *)v16 + 1) = v17;
            v15 += 4;
          }
          while (4 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v25 = a2;
    else
      v25 = *a1;
    v26 = sub_20C016744((uint64_t)a1, a2);
    v18 = v26;
    if (v25)
    {
      v27 = 32 * v25;
      v28 = v26;
      do
      {
        v29 = *(_OWORD *)v7;
        v30 = *((_OWORD *)v7 + 1);
        v7 += 4;
        *(_OWORD *)v28 = v29;
        *((_OWORD *)v28 + 1) = v30;
        v28 += 4;
        v27 -= 32;
      }
      while (v27);
    }
    if (v3 < a2)
    {
      v31 = *a3;
      v32 = 4 * v3;
      do
      {
        v33 = &v26[v32];
        v34 = v31[1];
        *(_OWORD *)v33 = *v31;
        *((_OWORD *)v33 + 1) = v34;
        v32 += 4;
      }
      while (4 * a2 != v32);
    }
    goto LABEL_29;
  }
  v19 = 32 * a2;
  if (32 * a2 / a2 != 32)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v20 = sub_20C016744((uint64_t)a1, a2);
  v18 = v20;
  v21 = 0;
  v22 = *a3;
  do
  {
    v23 = &v20[v21 / 8];
    v24 = v22[1];
    *(_OWORD *)v23 = *v22;
    *((_OWORD *)v23 + 1) = v24;
    v21 += 32;
  }
  while (v19 != v21);
LABEL_29:
  if (v18 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

_QWORD *sub_20C016744(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]");
  if (a2 >> 59)
    v3 = -1;
  else
    v3 = (32 * a2) | 0x10;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20C0167C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C0167DC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]", a3);
      v6 = (__int128 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20C016744((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 32 * v7;
        v11 = v8;
        do
        {
          v12 = *v6;
          v13 = v6[1];
          v6 += 2;
          *v11 = v12;
          v11[1] = v13;
          v11 += 2;
          v10 -= 32;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

char *sub_20C016870@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  char *result;
  __int128 v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;
  _OWORD v9[4];
  uint64_t v10;

  sub_20C016B78(v9, a1, a2);
  a3[1] = (char *)&off_24C522470 + 2;
  result = (char *)operator new(0x50uLL);
  v5 = v9[3];
  *((_OWORD *)result + 2) = v9[2];
  *((_OWORD *)result + 3) = v5;
  *((_QWORD *)result + 8) = v10;
  v6 = v9[1];
  *(_OWORD *)result = v9[0];
  *((_OWORD *)result + 1) = v6;
  v7 = (unsigned int *)(result + 72);
  atomic_store(0, (unsigned int *)result + 18);
  *a3 = result;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  return result;
}

void sub_20C016980(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C525E70;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20C016D64((uint64_t)v20, v8);
    sub_20C01764C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20C01764C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + 72 * *(_QWORD *)&v20[0];
    while (v18 != v19)
    {
      v17 = (_QWORD *)sub_20C016DDC(&v18, v14, v15);
      sub_20C016B78(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_20C016E58(&v18);
    }
    a4[1] = off_24C525E70;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C016AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C016AF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C016A68);
  }
  JUMPOUT(0x20C016AD8);
}

void sub_20C016B68()
{
  __cxa_end_catch();
  JUMPOUT(0x20C016AD8);
}

uint64_t sub_20C016B78(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  char *v26;
  _QWORD *exception;
  _QWORD v28[4];
  char v29;

  v3 = *a3;
  v4 = *a2;
  if (*a3 + 9 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    v26 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v28[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v26, 0x2Fu);
    v28[1] = "MakeScalarValueImpl";
    v28[2] = 225;
    v28[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfMatrix3d *, const vector<Va"
             "lue> &, size_t &)";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Matrix3d");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_20C00682C(v4 + 56 * v3);
  *a1 = v8;
  v9 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v9);
  a1[1] = v10;
  v11 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v11);
  a1[2] = v12;
  v13 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v13);
  a1[3] = v14;
  v15 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v15);
  a1[4] = v16;
  v17 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v17);
  a1[5] = v18;
  v19 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v19);
  a1[6] = v20;
  v21 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v21);
  a1[7] = v22;
  v23 = (*a3)++;
  result = sub_20C00682C(*a2 + 56 * v23);
  a1[8] = v25;
  return result;
}

uint64_t sub_20C016D64(uint64_t a1, unint64_t a2)
{
  _OWORD v5[4];
  uint64_t v6;
  _OWORD *v7;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  sub_20BF56210((_QWORD *)a1);
  v7 = v5;
  sub_20C017334((unint64_t *)a1, a2, (uint64_t *)&v7);
  return a1;
}

void sub_20C016DC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C016DDC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfMatrix3d>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal_"
            "_aapl__pxrReserved__::GfMatrix3d>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C016E50()
{
  JUMPOUT(0x20C016E00);
}

_QWORD *sub_20C016E58(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfMatrix3d>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 72;
  }
  return a1;
}

uint64_t *sub_20C016ED4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20C016EFC(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C01705C(a1);
}

uint64_t sub_20C016F0C()
{
  return 1;
}

unint64_t sub_20C016F14(uint64_t **a1)
{
  char v2;

  return sub_20C0170B4((uint64_t)&v2, *a1);
}

BOOL sub_20C016F38(uint64_t **a1, uint64_t *a2)
{
  return sub_20C0171C4(*a1, *a2);
}

BOOL sub_20C016F44(uint64_t **a1, uint64_t a2)
{
  return sub_20C0171C4(*a1, a2);
}

uint64_t sub_20C016F50()
{
  return 0;
}

_QWORD *sub_20C016F5C(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20C01731C);
  return a2;
}

void *sub_20C016FA4()
{
  return &unk_24C51DB10;
}

uint64_t sub_20C016FB0()
{
  return 1;
}

void *sub_20C016FB8()
{
  return &unk_24C51BFC0;
}

uint64_t sub_20C016FC4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20C016FCC(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20C016FD8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB2039ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C017010(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DB10, a2, a3);
}

void *sub_20C017030()
{
  return &unk_24C51DB10;
}

uint64_t sub_20C01703C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20C017044@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C525E70;
  return sub_20BF56B40(a2, v2);
}

void **sub_20C01705C(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20C0170B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (double *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 9;
      sub_20C017128((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20C017128(uint64_t a1, double *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v6 = 0;
  v5 = 0;
  result = sub_20BF54774((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL sub_20C0171C4(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  double *v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (double *)a1[4];
  v7 = *(double **)(a2 + 32);
  v8 = 72 * v5 - 72;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==(v6, v7);
    if (!result)
      break;
    v6 += 9;
    v7 += 9;
    v9 = v8;
    v8 -= 72;
  }
  while (v9);
  return result;
}

uint64_t sub_20C017274(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20C01705C(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20C01731C(double **a1, _QWORD *a2)
{
  double *v3;

  v3 = *a1;
  *a1 += 9;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

void sub_20C017334(unint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20C0175A4((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11 / 8];
                *(_OWORD *)v12 = *(_OWORD *)(v9 + v11);
                v13 = *(_OWORD *)(v9 + v11 + 16);
                v14 = *(_OWORD *)(v9 + v11 + 32);
                v15 = *(_OWORD *)(v9 + v11 + 48);
                v12[8] = *(_QWORD *)(v9 + v11 + 64);
                *((_OWORD *)v12 + 2) = v14;
                *((_OWORD *)v12 + 3) = v15;
                *((_OWORD *)v12 + 1) = v13;
                v11 += 72;
              }
              while (72 * v3 != v11);
            }
          }
          v16 = *a3;
          v17 = 9 * v3;
          do
          {
            v18 = &v7[v17];
            *(_OWORD *)v18 = *(_OWORD *)v16;
            v19 = *(_OWORD *)(v16 + 16);
            v20 = *(_OWORD *)(v16 + 32);
            v21 = *(_OWORD *)(v16 + 48);
            v18[8] = *(_QWORD *)(v16 + 64);
            *((_OWORD *)v18 + 2) = v20;
            *((_OWORD *)v18 + 3) = v21;
            *((_OWORD *)v18 + 1) = v19;
            v17 += 9;
          }
          while (9 * a2 != v17);
        }
        v22 = v7;
        goto LABEL_29;
      }
      v7 = (_QWORD *)a1[4];
    }
    if (v3 >= a2)
      v30 = a2;
    else
      v30 = *a1;
    v31 = sub_20C0175A4((uint64_t)a1, a2);
    v22 = v31;
    if (v30)
    {
      v32 = 72 * v30;
      v33 = v31;
      do
      {
        *(_OWORD *)v33 = *(_OWORD *)v7;
        v34 = *((_OWORD *)v7 + 1);
        v35 = *((_OWORD *)v7 + 2);
        v36 = *((_OWORD *)v7 + 3);
        v33[8] = v7[8];
        *((_OWORD *)v33 + 2) = v35;
        *((_OWORD *)v33 + 3) = v36;
        *((_OWORD *)v33 + 1) = v34;
        v7 += 9;
        v33 += 9;
        v32 -= 72;
      }
      while (v32);
    }
    if (v3 < a2)
    {
      v37 = *a3;
      v38 = 9 * v3;
      do
      {
        v39 = &v31[v38];
        *(_OWORD *)v39 = *(_OWORD *)v37;
        v40 = *(_OWORD *)(v37 + 16);
        v41 = *(_OWORD *)(v37 + 32);
        v42 = *(_OWORD *)(v37 + 48);
        v39[8] = *(_QWORD *)(v37 + 64);
        *((_OWORD *)v39 + 2) = v41;
        *((_OWORD *)v39 + 3) = v42;
        *((_OWORD *)v39 + 1) = v40;
        v38 += 9;
      }
      while (9 * a2 != v38);
    }
    goto LABEL_29;
  }
  if (a2 >= 0x38E38E38E38E38FLL)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v23 = sub_20C0175A4((uint64_t)a1, a2);
  v22 = v23;
  v24 = 0;
  v25 = *a3;
  do
  {
    v26 = &v23[v24];
    *(_OWORD *)v26 = *(_OWORD *)v25;
    v27 = *(_OWORD *)(v25 + 16);
    v28 = *(_OWORD *)(v25 + 32);
    v29 = *(_OWORD *)(v25 + 48);
    v26[8] = *(_QWORD *)(v25 + 64);
    *((_OWORD *)v26 + 2) = v28;
    *((_OWORD *)v26 + 3) = v29;
    *((_OWORD *)v26 + 1) = v27;
    v24 += 9;
  }
  while (9 * a2 != v24);
LABEL_29:
  if (v22 != (_QWORD *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v22;
  }
  *a1 = a2;
}

_QWORD *sub_20C0175A4(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]");
  if (a2 > 0x38E38E38E38E38DLL)
    v3 = -1;
  else
    v3 = 72 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20C017634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C01764C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]", a3);
      v6 = *((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20C0175A4((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 72 * v7;
        v11 = v8;
        do
        {
          *(_OWORD *)v11 = *(_OWORD *)v6;
          v12 = *(_OWORD *)(v6 + 16);
          v13 = *(_OWORD *)(v6 + 32);
          v14 = *(_OWORD *)(v6 + 48);
          v11[8] = *(_QWORD *)(v6 + 64);
          *((_OWORD *)v11 + 2) = v13;
          *((_OWORD *)v11 + 3) = v14;
          *((_OWORD *)v11 + 1) = v12;
          v6 += 72;
          v11 += 9;
          v10 -= 72;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

char *sub_20C017704@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  char *result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unsigned int *v9;
  unsigned int v10;
  _OWORD v11[8];

  sub_20C017A08(v11, a1, a2);
  a3[1] = (char *)&off_24C51E470 + 2;
  result = (char *)operator new(0x88uLL);
  v5 = v11[5];
  *((_OWORD *)result + 4) = v11[4];
  *((_OWORD *)result + 5) = v5;
  v6 = v11[7];
  *((_OWORD *)result + 6) = v11[6];
  *((_OWORD *)result + 7) = v6;
  v7 = v11[1];
  *(_OWORD *)result = v11[0];
  *((_OWORD *)result + 1) = v7;
  v8 = v11[3];
  *((_OWORD *)result + 2) = v11[2];
  *((_OWORD *)result + 3) = v8;
  v9 = (unsigned int *)(result + 128);
  atomic_store(0, (unsigned int *)result + 32);
  *a3 = result;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

void sub_20C017814(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v5 = a1[1];
  if (*a1 == v5)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_24C51F0A8;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
  else
  {
    *(_QWORD *)&v20[0] = *a1;
    *((_QWORD *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      v8 = (*(_DWORD *)sub_20BFEEDA8((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_20BFEEE24(v20);
    }
    while (*(_QWORD *)&v20[0] != *((_QWORD *)&v20[0] + 1));
    sub_20BF5F80C((uint64_t)v20, v8);
    sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    v11 = v21;
    sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    v16 = 0;
    v18 = v11;
    v19 = v21 + (*(_QWORD *)&v20[0] << 7);
    while (v18 != v19)
    {
      v17 = (_QWORD *)sub_20C017CB8(&v18, v14, v15);
      sub_20C017A08(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_20C017D34(&v18);
    }
    a4[1] = off_24C51F0A8;
    sub_20BF56B40(a4, (uint64_t)v20);
    sub_20BF5618C((uint64_t)v20);
  }
}

void sub_20C017950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C017980(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    *(_OWORD *)v14 = a12;
    *(_QWORD *)(v14 + 16) = a13;
    *(_QWORD *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x20C0178F8);
  }
  JUMPOUT(0x20C017968);
}

void sub_20C0179F8()
{
  __cxa_end_catch();
  JUMPOUT(0x20C017968);
}

uint64_t sub_20C017A08(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  char *v40;
  _QWORD *exception;
  _QWORD v42[4];
  char v43;

  v3 = *a3;
  v4 = *a2;
  if (*a3 + 16 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    v40 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v42[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v40, 0x2Fu);
    v42[1] = "MakeScalarValueImpl";
    v42[2] = 239;
    v42[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfMatrix4d *, const vector<Va"
             "lue> &, size_t &)";
    v43 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Matrix4d");
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_24C524E40;
    __cxa_throw(exception, (struct type_info *)&unk_24C524E18, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_20C00682C(v4 + 56 * v3);
  *a1 = v8;
  v9 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v9);
  a1[1] = v10;
  v11 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v11);
  a1[2] = v12;
  v13 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v13);
  a1[3] = v14;
  v15 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v15);
  a1[4] = v16;
  v17 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v17);
  a1[5] = v18;
  v19 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v19);
  a1[6] = v20;
  v21 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v21);
  a1[7] = v22;
  v23 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v23);
  a1[8] = v24;
  v25 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v25);
  a1[9] = v26;
  v27 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v27);
  a1[10] = v28;
  v29 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v29);
  a1[11] = v30;
  v31 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v31);
  a1[12] = v32;
  v33 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v33);
  a1[13] = v34;
  v35 = (*a3)++;
  sub_20C00682C(*a2 + 56 * v35);
  a1[14] = v36;
  v37 = (*a3)++;
  result = sub_20C00682C(*a2 + 56 * v37);
  a1[15] = v39;
  return result;
}

uint64_t sub_20C017CB8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfMatrix4d>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal_"
            "_aapl__pxrReserved__::GfMatrix4d>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C017D2C()
{
  JUMPOUT(0x20C017CDCLL);
}

_QWORD *sub_20C017D34(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfMatrix4d>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 128;
  }
  return a1;
}

char *sub_20C017DB0(char *__dst, __int128 *a2, __int128 *a3, char a4, uint64_t a5)
{
  __int128 v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v9;
  }
  v10 = *a3;
  *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(__dst + 24) = v10;
  __dst[48] = a4;
  sub_20BE9E6E8((uint64_t)(__dst + 56), a5);
  return __dst;
}

void sub_20C017E30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C017E4C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void sub_20C017EDC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C017EDC(a1, *a2);
    sub_20C017EDC(a1, a2[1]);
    sub_20BFF33D4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::Sdf_ParserValueContext(pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_BYTE *)this + 208) = 0;
  *((_QWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 30) = &unk_24C525F68;
  *((_BYTE *)this + 144) = 0;
  *((_QWORD *)this + 31) = sub_20C017FB0;
  *((_QWORD *)this + 33) = (char *)this + 240;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 35) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::Clear(this);
  return this;
}

{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_BYTE *)this + 208) = 0;
  *((_QWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 30) = &unk_24C525F68;
  *((_BYTE *)this + 144) = 0;
  *((_QWORD *)this + 31) = sub_20C017FB0;
  *((_QWORD *)this + 33) = (char *)this + 240;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 35) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::Clear(this);
  return this;
}

uint64_t sub_20C017FB0()
{
  _QWORD v1[4];
  char v2;

  v1[0] = "sdf/parserValueContext.cpp";
  v1[1] = "ReportCodingError";
  v1[2] = 49;
  v1[3] = "void pxrInternal__aapl__pxrReserved__::ReportCodingError(const std::string &)";
  v2 = 0;
  return pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::Clear(pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *this)
{
  uint64_t result;
  uint64_t v3;

  *(_DWORD *)this = 0;
  *((_DWORD *)this + 28) = -1;
  *((_QWORD *)this + 2) = *((_QWORD *)this + 1);
  *((_DWORD *)this + 8) = 0;
  result = *((_QWORD *)this + 9);
  v3 = *((_QWORD *)this + 8);
  while (result != v3)
    result = sub_20BFCD42C(result - 56);
  *((_QWORD *)this + 9) = v3;
  *((_QWORD *)this + 12) = *((_QWORD *)this + 11);
  *((_WORD *)this + 136) = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory(uint64_t a1, std::string *a2)
{
  std::string *v4;
  uint64_t v5;
  size_t size;
  std::string::size_type v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  std::string *i;
  uint64_t ValueFactoryForMenvaName;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = (std::string *)(a1 + 152);
  v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  if ((v5 & 0x80u) == 0)
    v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v7 = a2->__r_.__value_.__l.__size_;
  v8 = *(unsigned __int8 *)(a1 + 175);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 160);
  if (v7 != v8)
    goto LABEL_17;
  if (v9 >= 0)
    v10 = (unsigned __int8 *)(a1 + 152);
  else
    v10 = (unsigned __int8 *)v4->__r_.__value_.__r.__words[0];
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(a2->__r_.__value_.__l.__data_, v10, size))
      goto LABEL_17;
  }
  else if ((_DWORD)v5)
  {
    for (i = a2; i->__r_.__value_.__s.__data_[0] == *v10; i = (std::string *)((char *)i + 1))
    {
      ++v10;
      if (!--v5)
        return *(unsigned __int8 *)(a1 + 144);
    }
LABEL_17:
    ValueFactoryForMenvaName = pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::GetValueFactoryForMenvaName((const void **)&a2->__r_.__value_.__l.__data_, (_BYTE *)(a1 + 144));
    std::string::operator=((std::string *)(a1 + 120), a2);
    if (*(_BYTE *)(a1 + 144))
    {
      sub_20C018274((_QWORD *)(a1 + 176), ValueFactoryForMenvaName + 56);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(ValueFactoryForMenvaName + 48);
      v13 = *(_OWORD *)(ValueFactoryForMenvaName + 24);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(ValueFactoryForMenvaName + 40);
      *(_OWORD *)(a1 + 216) = v13;
LABEL_25:
      std::string::operator=(v4, a2);
      return *(unsigned __int8 *)(a1 + 144);
    }
    v18 = 0;
    sub_20C017E4C((_QWORD *)(a1 + 176), (uint64_t)v17);
    v14 = v18;
    if (v18 == v17)
    {
      v15 = 4;
      v14 = v17;
    }
    else
    {
      if (!v18)
      {
LABEL_24:
        *(_BYTE *)(a1 + 208) = 0;
        *(_QWORD *)(a1 + 232) = 0;
        goto LABEL_25;
      }
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
    goto LABEL_24;
  }
  return *(unsigned __int8 *)(a1 + 144);
}

void sub_20C018268(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20BDC12F4(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C018274(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sub_20BE9E6E8((uint64_t)v6, a2);
  sub_20C019030(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::ProduceValue@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12[2];
  char v13;
  void *__p[2];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v16[1] = 0;
  if (*(_BYTE *)(a1 + 273))
  {
    if (*(char *)(a1 + 303) < 0)
    {
      sub_20BDDBFAC(__p, *(void **)(a1 + 280), *(_QWORD *)(a1 + 288));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a1 + 280);
      v15 = *(_QWORD *)(a1 + 296);
    }
    pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v12, (uint64_t)__p);
    sub_20C018558((uint64_t)v16, v12);
    sub_20BF4C2D8((uint64_t)v12);
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(a1 + 200);
  if (v6)
  {
    v11 = 0;
    v12[0] = a2;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t *, void **))(*(_QWORD *)v6 + 48))(__p, v6, a1 + 8, a1 + 64, &v11, v12);
    sub_20BF4B5D8(v16, __p);
    sub_20BF4C2D8((uint64_t)__p);
LABEL_9:
    pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::Clear((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)a1);
    sub_20BF4C200(a4, v16);
    return sub_20BF4C2D8((uint64_t)v16);
  }
  v8 = (_QWORD *)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    v8 = (_QWORD *)*v8;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unrecognized type name '%s'", (const char *)a2, a3, v8);
  if (v13 >= 0)
    v9 = (char *)v12;
  else
    v9 = (char *)v12[0];
  sub_20BDDC0E4(__p, v9);
  v10 = *(_QWORD *)(a1 + 264);
  if (!v10)
    sub_20BE9E974();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 48))(v10, __p);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  a4[1] = 0;
  return sub_20BF4C2D8((uint64_t)v16);
}

void sub_20C0184BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  sub_20BF4C2D8(v23 - 56);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::GetRecordedString@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  if (this[303] < 0)
    return (char *)sub_20BDDBFAC((_BYTE *)a2, *((void **)this + 35), *((_QWORD *)this + 36));
  *(_OWORD *)a2 = *(_OWORD *)(this + 280);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 37);
  return this;
}

uint64_t sub_20C018558(uint64_t a1, _QWORD *a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, a1);
  *(_QWORD *)(a1 + 8) = &off_24C526038;
  sub_20C0193D8((unsigned int **)a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C0185E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::AppendValue(int *a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  std::string::size_type v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  void *__p[2];
  unsigned __int8 v14;
  char v15;
  char *v16;

  if (*((_BYTE *)a1 + 273))
  {
    if (*((_BYTE *)a1 + 272))
      std::string::append((std::string *)(a1 + 70), ", ");
    v4 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v4 == -1)
      sub_20BF1C1FC();
    v16 = &v15;
    ((void (*)(void **__return_ptr, char **, uint64_t))off_24C525F28[v4])(__p, &v16, a2);
    if ((v14 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v6 = v14;
    else
      v6 = (std::string::size_type)__p[1];
    std::string::append((std::string *)(a1 + 70), (const std::string::value_type *)v5, v6);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    *((_BYTE *)a1 + 272) = 1;
  }
  else
  {
    v7 = *((_QWORD *)a1 + 9);
    if (v7 >= *((_QWORD *)a1 + 10))
    {
      v8 = sub_20C019444((uint64_t *)a1 + 8, a2);
    }
    else
    {
      sub_20C019560(*((_QWORD *)a1 + 9), a2);
      v8 = v7 + 56;
      *((_QWORD *)a1 + 9) = v7 + 56;
    }
    *((_QWORD *)a1 + 9) = v8;
  }
  v9 = a1[28];
  v10 = *a1;
  if (v9 == -1)
  {
    a1[28] = v10;
    v9 = v10;
  }
  else if (v9 != v10)
  {
    sub_20BDDC0E4(__p, "Non-square shaped value");
    v11 = *((_QWORD *)a1 + 33);
    if (!v11)
      sub_20BE9E974();
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, __p);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    return;
  }
  v12 = a1[8];
  if (v12 || v9 && (++*(_DWORD *)(*((_QWORD *)a1 + 11) + 4 * (v9 - 1)), (v12 = a1[8]) != 0))
  {
    if (*((_QWORD *)a1 + 29) == v12)
      --*(_QWORD *)&a1[2 * v12 + 8];
  }
}

void sub_20C0187C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 72) = v16;
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::BeginList(pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *this)
{
  unint64_t v2;
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  unint64_t v15;
  char *v16;
  _DWORD *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;

  if (*((_BYTE *)this + 273))
  {
    if (*((_BYTE *)this + 272))
    {
      *((_BYTE *)this + 272) = 0;
      std::string::append((std::string *)((char *)this + 280), ", ");
    }
    std::string::push_back((std::string *)((char *)this + 280), 91);
  }
  v2 = *(int *)this + 1;
  *(_DWORD *)this = v2;
  v3 = (char *)*((_QWORD *)this + 1);
  v4 = (char *)*((_QWORD *)this + 2);
  v5 = (v4 - v3) >> 2;
  if (v5 < v2)
  {
    v6 = *((_QWORD *)this + 3);
    if ((unint64_t)v4 >= v6)
    {
      if ((v5 + 1) >> 62)
        goto LABEL_40;
      v8 = v6 - (_QWORD)v3;
      v9 = (uint64_t)(v6 - (_QWORD)v3) >> 1;
      if (v9 <= v5 + 1)
        v9 = v5 + 1;
      if (v8 >= 0x7FFFFFFFFFFFFFFCLL)
        v10 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      if (v10)
      {
        v11 = (char *)sub_20BDE1330((uint64_t)this + 24, v10);
        v3 = (char *)*((_QWORD *)this + 1);
        v4 = (char *)*((_QWORD *)this + 2);
      }
      else
      {
        v11 = 0;
      }
      v12 = &v11[4 * v5];
      v13 = &v11[4 * v10];
      *(_DWORD *)v12 = 0;
      v7 = v12 + 4;
      while (v4 != v3)
      {
        v14 = *((_DWORD *)v4 - 1);
        v4 -= 4;
        *((_DWORD *)v12 - 1) = v14;
        v12 -= 4;
      }
      *((_QWORD *)this + 1) = v12;
      *((_QWORD *)this + 2) = v7;
      *((_QWORD *)this + 3) = v13;
      if (v3)
        operator delete(v3);
    }
    else
    {
      *(_DWORD *)v4 = 0;
      v7 = v4 + 4;
    }
    v15 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 2) = v7;
    v16 = (char *)*((_QWORD *)this + 12);
    if ((unint64_t)v16 < v15)
    {
      *(_DWORD *)v16 = 0;
      v17 = v16 + 4;
LABEL_38:
      *((_QWORD *)this + 12) = v17;
      return;
    }
    v18 = (char *)*((_QWORD *)this + 11);
    v19 = (v16 - v18) >> 2;
    if (!((unint64_t)(v19 + 1) >> 62))
    {
      v20 = v15 - (_QWORD)v18;
      v21 = (uint64_t)(v15 - (_QWORD)v18) >> 1;
      if (v21 <= v19 + 1)
        v21 = v19 + 1;
      if (v20 >= 0x7FFFFFFFFFFFFFFCLL)
        v22 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
      {
        v23 = (char *)sub_20BDE1330((uint64_t)this + 104, v22);
        v18 = (char *)*((_QWORD *)this + 11);
        v16 = (char *)*((_QWORD *)this + 12);
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[4 * v19];
      v25 = &v23[4 * v22];
      *(_DWORD *)v24 = 0;
      v17 = v24 + 4;
      while (v16 != v18)
      {
        v26 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v24 - 1) = v26;
        v24 -= 4;
      }
      *((_QWORD *)this + 11) = v24;
      *((_QWORD *)this + 12) = v17;
      *((_QWORD *)this + 13) = v25;
      if (v18)
        operator delete(v18);
      goto LABEL_38;
    }
LABEL_40:
    sub_20BDDF694();
  }
}

void pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::EndList(pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  void *__p[2];
  char v13;

  if (*((_BYTE *)this + 273))
  {
    std::string::push_back((std::string *)((char *)this + 280), 93);
    *((_BYTE *)this + 272) = 1;
  }
  v2 = *(_DWORD *)this;
  if (!*(_DWORD *)this)
  {
    sub_20BDDC0E4(__p, "Mismatched [ ] in shaped value");
    v8 = *((_QWORD *)this + 33);
    if (!v8)
      sub_20BE9E974();
    goto LABEL_9;
  }
  v3 = v2 - 1;
  v4 = *((_QWORD *)this + 1);
  v5 = *(_DWORD *)(v4 + 4 * v3);
  v6 = *((_QWORD *)this + 11);
  v7 = *(_DWORD *)(v6 + 4 * v3);
  if (v5)
  {
    if (v5 != v7)
    {
      sub_20BDDC0E4(__p, "Non-square shaped value");
      v8 = *((_QWORD *)this + 33);
      if (!v8)
        sub_20BE9E974();
LABEL_9:
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 48))(v8, __p);
      if (v13 < 0)
        operator delete(__p[0]);
      return;
    }
  }
  else
  {
    *(_DWORD *)(v4 + 4 * v3) = v7;
    v2 = *(_DWORD *)this;
    if (!*(_DWORD *)(v4 + 4 * (*(_DWORD *)this - 1)))
    {
      sub_20BDDC0E4(__p, "Shaped value with a zero dimension");
      v8 = *((_QWORD *)this + 33);
      if (!v8)
        sub_20BE9E974();
      goto LABEL_9;
    }
    if (!v2)
      return;
  }
  *(_DWORD *)(v6 + 4 * (v2 - 1)) = 0;
  v9 = (*(_DWORD *)this)--;
  v10 = __OFSUB__(v9, 2);
  v11 = v9 - 2;
  if (v11 < 0 == v10)
    ++*(_DWORD *)(v6 + 4 * v11);
}

void sub_20C018B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::BeginTuple(pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *this, const char *a2, char *a3)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *__p;
  char v8;

  if (*((_BYTE *)this + 273))
  {
    if (*((_BYTE *)this + 272))
    {
      *((_BYTE *)this + 272) = 0;
      std::string::append((std::string *)((char *)this + 280), ", ");
    }
    std::string::push_back((std::string *)((char *)this + 280), 40);
  }
  v4 = *((int *)this + 8);
  if (*((_QWORD *)this + 29) <= v4)
  {
    v5 = (_QWORD *)((char *)this + 120);
    if (*((char *)this + 143) < 0)
      v5 = (_QWORD *)*v5;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Tuple nesting too deep! Should not be deeper than %d for attribute of type %s.", a2, a3, *((int *)this + 8), v5);
    v6 = *((_QWORD *)this + 33);
    if (!v6)
      sub_20BE9E974();
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 48))(v6, &__p);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    *((_QWORD *)this + v4 + 5) = *((_QWORD *)this + v4 + 27);
    *((_DWORD *)this + 8) = v4 + 1;
  }
}

void sub_20C018C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::EndTuple(pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *this, const char *a2, char *a3)
{
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;
  int v10;
  void *__p;
  char v12;

  if (*((_BYTE *)this + 273))
  {
    std::string::push_back((std::string *)((char *)this + 280), 41);
    *((_BYTE *)this + 272) = 1;
  }
  v4 = *((_DWORD *)this + 8);
  if (!v4)
  {
    v8 = (_QWORD *)((char *)this + 120);
    if (*((char *)this + 143) < 0)
      v8 = (_QWORD *)*v8;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Mismatched() for attribute of type %s.", a2, a3, v8);
    v7 = *((_QWORD *)this + 33);
    if (!v7)
      sub_20BE9E974();
    goto LABEL_12;
  }
  v5 = v4 - 1;
  *((_DWORD *)this + 8) = v4 - 1;
  if (*((_QWORD *)this + v4 + 4))
  {
    v6 = (_QWORD *)((char *)this + 120);
    if (*((char *)this + 143) < 0)
      v6 = (_QWORD *)*v6;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Tuple dimensions error for attribute of type %s.", a2, a3, v6);
    v7 = *((_QWORD *)this + 33);
    if (!v7)
      sub_20BE9E974();
LABEL_12:
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 48))(v7, &__p);
    if (v12 < 0)
      operator delete(__p);
    return;
  }
  v9 = __OFSUB__(v4, 2);
  v10 = v4 - 2;
  if (v10 < 0 != v9)
  {
    if (!v5 && *(_DWORD *)this)
      ++*(_DWORD *)(*((_QWORD *)this + 11) + 4 * (*(_DWORD *)this - 1));
  }
  else
  {
    --*((_QWORD *)this + v10 + 5);
  }
}

void sub_20C018D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::StartRecordingString(uint64_t this)
{
  *(_WORD *)(this + 272) = 256;
  if (*(char *)(this + 303) < 0)
  {
    **(_BYTE **)(this + 280) = 0;
    *(_QWORD *)(this + 288) = 0;
  }
  else
  {
    *(_BYTE *)(this + 280) = 0;
    *(_BYTE *)(this + 303) = 0;
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::StopRecordingString(uint64_t this)
{
  *(_BYTE *)(this + 273) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString(pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *this)
{
  return *((unsigned __int8 *)this + 273);
}

std::string *pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetRecordedString(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 280), a2);
}

uint64_t sub_20C018DBC()
{
  return sub_20BFEF228();
}

uint64_t sub_20C018DC4()
{
  return sub_20BFEEA50();
}

_QWORD *sub_20C018DCC@<X0>(double *a1@<X1>, _QWORD *a2@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::TfStringify(*a1, a2);
}

std::string *sub_20C018DD4@<X0>(const std::string *a1@<X1>, std::string *a2@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(a1, a2);
}

uint64_t sub_20C018DDC(uint64_t a1, _QWORD *a2)
{
  return sub_20C018DEC(a2);
}

uint64_t sub_20C018DE4(uint64_t a1, uint64_t a2)
{
  return sub_20C018EB4(a2);
}

uint64_t sub_20C018DEC(_QWORD *a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C018EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C018EB4(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C018F68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C018F84(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C525F68;
  result[1] = v3;
  return result;
}

uint64_t sub_20C018FBC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C525F68;
  a2[1] = v2;
  return result;
}

uint64_t sub_20C018FDC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_20C018FE8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C525FE8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C019024()
{
  return &unk_24C525FE8;
}

_QWORD *sub_20C019030(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20C019198(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20BDC12F4(a1);
}

uint64_t *sub_20C0191A4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_20C0191CC(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C0192FC(a1);
}

uint64_t sub_20C0191DC()
{
  return 1;
}

unint64_t sub_20C0191E4(pxrInternal__aapl__pxrReserved__::VtValue **a1)
{
  return bswap64(0x9E3779B97F4A7C55 * pxrInternal__aapl__pxrReserved__::VtValue::GetHash(*a1));
}

uint64_t sub_20C019214(_QWORD *a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(*a1, *a2);
}

uint64_t sub_20C019220(_QWORD *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(*a1, a2);
}

uint64_t sub_20C01922C()
{
  return 0;
}

uint64_t sub_20C019238(_QWORD *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20C019248()
{
  return &unk_24C524D50;
}

uint64_t sub_20C019254()
{
  return 0;
}

uint64_t sub_20C01925C()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C019268()
{
  return 0;
}

uint64_t sub_20C019270()
{
  return 0;
}

BOOL sub_20C019278(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAB052CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C0192B0(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C524D50, a2, a3);
}

void *sub_20C0192D0()
{
  return &unk_24C524D50;
}

uint64_t sub_20C0192DC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *sub_20C0192E4@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;

  v2 = *a1;
  *(_QWORD *)(a2 + 8) = &off_24C526038;
  return sub_20C0193D8((unsigned int **)a2, v2);
}

uint64_t *sub_20C0192FC(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;

  v2 = *a1;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v6 = (void *)sub_20BF4C2D8(v2);
      operator delete(v6);
    }
  }
  return a1;
}

unsigned int *sub_20C019348(unsigned int **a1)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;

  v2 = atomic_load(*a1 + 4);
  if (v2 != 1)
  {
    v3 = (unsigned int *)operator new(0x18uLL);
    sub_20BF4C6D0(v3, *a1);
    v4 = v3 + 4;
    atomic_store(0, v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v7 = *a1;
    *a1 = v3;
    sub_20C0192FC((uint64_t *)&v7);
  }
  return *a1;
}

void sub_20C0193C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C0193D8(unsigned int **a1, _QWORD *a2)
{
  unsigned int *v4;
  _QWORD *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (unsigned int *)operator new(0x18uLL);
  result = sub_20BF4C6D0(v4, a2);
  v6 = v4 + 4;
  atomic_store(0, v4 + 4);
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20C019430(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C019444(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE16B34(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[56 * v4];
  v16 = &v10[56 * v9];
  sub_20C019560((uint64_t)v14, a2);
  v15 = v14 + 56;
  sub_20C019758(a1, &v13);
  v11 = a1[1];
  sub_20C019920((uint64_t)&v13);
  return v11;
}

void sub_20C01954C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C019920((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C019560(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 48) = -1;
  sub_20C0195A4(a1, a2);
  return a1;
}

void sub_20C019590(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFCD42C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0195A4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 48);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24C526008[v4])(&v7, result);
  *(_DWORD *)(v3 + 48) = -1;
  v5 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C5260F0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 48) = v5;
  }
  return result;
}

void sub_20C019630(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void sub_20C01963C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

double sub_20C019648(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void *sub_20C019654(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_20BDDBFAC(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void sub_20C019680(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a3;
  *a2 = *a3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
}

char *sub_20C0196B8(int a1, char *__dst, __int128 *a3)
{
  return sub_20C0196C4(__dst, a3);
}

char *sub_20C0196C4(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_20C01973C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C019758(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 56;
    result = sub_20C0197DC(result - 56, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C0197DC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 48) = -1;
  sub_20C019810(a1, a2);
  return a1;
}

uint64_t sub_20C019810(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 48);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24C526008[v4])(&v7, result);
  *(_DWORD *)(v3 + 48) = -1;
  v5 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C526120[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 48) = v5;
  }
  return result;
}

void sub_20C01989C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void sub_20C0198A8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

double sub_20C0198B4(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

__n128 sub_20C0198C0(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void sub_20C0198DC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

__n128 sub_20C0198EC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  result = *(__n128 *)((char *)a3 + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
  *(__n128 *)(a2 + 24) = result;
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 3) = 0;
  return result;
}

uint64_t sub_20C019920(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    sub_20BFCD42C(i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

int *pxrInternal__aapl__pxrReserved__::Sdf_ParsePath(__int128 *a1, int *a2, uint64_t a3)
{
  char v6;
  char v7;
  const char *v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 __dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17[2];
  void *__p[2];
  __int128 v19;

  sub_20C019C58(&v15, 1uLL);
  *(_OWORD *)__p = 0u;
  v19 = 0u;
  *(_OWORD *)v17 = 0u;
  sub_20C019D64((unsigned __int8 *)&__dst, a1, "");
  sub_20C019E0C((uint64_t)&__dst, &v15);
  v7 = v6;
  sub_20C019D24((uint64_t)&__dst);
  if ((v7 & 1) != 0)
  {
    if (a2)
    {
      v10 = v16;
      sub_20BFD3EBC(a2, (int *)(v16 - 8));
      sub_20BFD3F10(a2 + 1, (int *)(v10 - 4));
    }
    a2 = (int *)1;
  }
  else
  {
    if (a3)
    {
      if (*((char *)a1 + 23) >= 0)
        v11 = (uint64_t *)a1;
      else
        v11 = *(uint64_t **)a1;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Ill-formed SdfPath with no exception parsing <%s>", v8, v9, v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = __dst;
      *(_QWORD *)(a3 + 16) = v14;
    }
    if (a2)
    {
      *(_QWORD *)&__dst = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&__dst);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&__dst + 1);
      sub_20BFD3EBC(a2, (int *)&__dst);
      sub_20BFD3F10(a2 + 1, (int *)&__dst + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__dst + 1);
      sub_20BFD265C(&__dst);
      a2 = 0;
    }
  }
  if (SHIBYTE(v19) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v17[0]);
  *(_QWORD *)&__dst = &v15;
  sub_20BFD6F90((void ***)&__dst);
  return a2;
}

void sub_20C019AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  int *v22;
  uint64_t v23;
  void *v25;
  const char *v26;
  char *v27;

  if (a2 == 1)
  {
    v25 = __cxa_begin_catch(a1);
    if (v23)
    {
      (*(void (**)(void *))(*(_QWORD *)v25 + 16))(v25);
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Ill-formed SdfPath <%s>: %s", v26, v27);
      if (*(char *)(v23 + 23) < 0)
        operator delete(*(void **)v23);
      *(_OWORD *)v23 = a11;
      *(_QWORD *)(v23 + 16) = a12;
    }
    if (v22)
    {
      *(_QWORD *)&a11 = 0;
      sub_20C019BD0(&a11);
      sub_20BFD3EBC(v22, (int *)&a11);
      sub_20BFD3F10(v22 + 1, (int *)&a11 + 1);
      sub_20BFD1A18(&a11);
    }
    __cxa_end_catch();
    JUMPOUT(0x20C019A98);
  }
  sub_20C019C04((uint64_t)&a22);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C019BD0(_DWORD *a1)
{
  _DWORD *v2;

  v2 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v2 + 1);
  return a1;
}

uint64_t sub_20C019C04(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v3 = (void **)a1;
  sub_20BFD6F90(&v3);
  return a1;
}

_QWORD *sub_20C019C58(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    sub_20C019CC0((uint64_t)a1, a2);
  }
  return a1;
}

void sub_20C019CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BFD6F90(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C019CC0(uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v4;
  _QWORD *v5;
  _DWORD *v6;
  _DWORD *v7;

  result = *(_DWORD **)(a1 + 8);
  if (a2)
  {
    v4 = 8 * a2;
    v5 = result;
    v6 = &result[2 * a2];
    do
    {
      *v5++ = 0;
      v7 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(result);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v7 + 1);
      result = v5;
      v4 -= 8;
    }
    while (v4);
    result = v6;
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_20C019D24(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

unsigned __int8 *sub_20C019D64(unsigned __int8 *__dst, __int128 *a2, char *__s)
{
  __int128 v5;
  uint64_t v6;
  unsigned __int8 *v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  if ((char)__dst[23] < 0)
  {
    v7 = *(unsigned __int8 **)__dst;
    v6 = *((_QWORD *)__dst + 1);
  }
  else
  {
    v6 = __dst[23];
    v7 = __dst;
  }
  *((_QWORD *)__dst + 3) = v7;
  *((_QWORD *)__dst + 4) = v7;
  *(_OWORD *)(__dst + 40) = xmmword_20CA59F70;
  *((_QWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 8) = &v7[v6];
  sub_20BDDC0E4((_QWORD *)__dst + 9, __s);
  return __dst;
}

void sub_20C019DF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C019E0C(uint64_t a1, uint64_t *a2)
{
  __n128 *v3;
  __n128 result;
  __n128 v5;
  __n128 v6;

  v3 = (__n128 *)(a1 + 32);
  v5 = *(__n128 *)(a1 + 32);
  v6 = *(__n128 *)(a1 + 48);
  if ((sub_20C019ED4(a1, a2) & 1) == 0)
    sub_20C019E80(a1);
  if ((sub_20C01EA3C(a1) & 1) == 0)
  {
    result = v5;
    *v3 = v5;
    v3[1] = v6;
  }
  return result;
}

void sub_20C019E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_20C019E80(uint64_t a1)
{
  sub_20C01E8C0(a1);
}

void sub_20C019E90()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_20C019EC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C019ED4(uint64_t a1, uint64_t *a2)
{
  char v4;

  if ((sub_20C019F34(a1, a2) & 1) != 0)
    return 1;
  if ((sub_20C01E320(a1, (uint64_t)a2) & 1) != 0)
    return 1;
  sub_20C01E7A8(a1, (uint64_t)a2);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_20C01E82C(a1, (uint64_t)a2);
}

uint64_t sub_20C019F34(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;

  v4 = (_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 48);
  v5 = sub_20C019FA4(a1, (uint64_t)a2);
  if ((_DWORD)v5)
  {
    sub_20C01A110(a1, a2);
  }
  else
  {
    *v4 = v7;
    v4[1] = v8;
  }
  return v5;
}

void sub_20C019F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C019FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  v4 = *(_OWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 48);
  if ((_QWORD)v4 == *(_QWORD *)(a1 + 64) || *(_BYTE *)v4 != 47)
    return 0;
  v2 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v4 + 1;
  *(_QWORD *)(a1 + 40) = v2;
  ++*(_QWORD *)(a1 + 56);
  v6[0] = v4;
  v6[1] = v5;
  v7 = a1 + 24;
  sub_20C01A038((pxrInternal__aapl__pxrReserved__::SdfPath *)v6, a2);
  return 1;
}

void sub_20C01A02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

int *sub_20C01A038(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  v4 = *(_QWORD *)(a2 + 8);
  sub_20C01A074((int *)(v4 - 8), v3);
  return sub_20C01A0C8((int *)(v4 - 4), v3 + 1);
}

int *sub_20C01A074(int *a1, _DWORD *a2)
{
  int v5;

  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator==(a1, a2))
  {
    sub_20BFD6E54(&v5, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(&v5, a1);
    sub_20BFD265C(&v5);
  }
  return a1;
}

int *sub_20C01A0C8(int *a1, _DWORD *a2)
{
  int v4;

  sub_20BFD6EA4(&v4, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(&v4, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v4);
  return a1;
}

uint64_t sub_20C01A110(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;

  v4 = (_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 48);
  v5 = sub_20C01A18C(a1, (uint64_t)a2);
  if ((_DWORD)v5)
  {
    sub_20C01C310(a1, (uint64_t)a2);
    sub_20C01C358(a1, a2);
  }
  else
  {
    *v4 = v7;
    v4[1] = v8;
  }
  return v5;
}

void sub_20C01A180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C01A18C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = sub_20C01A1D4(a1, a2);
  if ((_DWORD)v4)
  {
    do
      sub_20C01A820(a1, a2);
    while ((v5 & 1) != 0);
  }
  return v4;
}

uint64_t sub_20C01A1D4(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;

  v4 = (_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 48);
  v5 = sub_20C01A26C((_QWORD *)a1);
  if ((_DWORD)v5)
  {
    while ((sub_20C01A510((_QWORD *)a1) & 1) != 0)
      ;
    v9[0] = v7;
    v9[1] = v8;
    v10 = a1 + 24;
    sub_20C01A56C((uint64_t)v9, a2);
  }
  else
  {
    *v4 = v7;
    v4[1] = v8;
  }
  return v5;
}

void sub_20C01A25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C01A26C(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v2;

  v1 = (_BYTE *)a1[4];
  if (v1 == (_BYTE *)a1[8] || *v1 != 95)
    return sub_20C01A2B0(a1);
  v2 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v2;
  ++a1[7];
  return 1;
}

uint64_t sub_20C01A2B0(_QWORD *a1)
{
  unint64_t v2;
  unsigned __int8 v3;
  uint64_t result;

  if (a1[4] == a1[8])
    return 0;
  v2 = sub_20C01A30C((uint64_t)a1);
  if ((v2 & 0xFF00000000) == 0)
    return 0;
  v3 = BYTE4(v2);
  result = pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidStart((pxrInternal__aapl__pxrReserved__ *)v2);
  if ((_DWORD)result)
  {
    sub_20C01A370(a1 + 3, v3);
    return 1;
  }
  return result;
}

unint64_t sub_20C01A30C(uint64_t a1)
{
  char *v1;
  int v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(char **)(a1 + 32);
  if (v1 == *(char **)(a1 + 64))
  {
    v5 = 0;
    v3 = 0;
    v4 = 0;
  }
  else
  {
    v2 = *v1;
    v3 = v2;
    if (v2 < 0)
    {
      v6 = sub_20C01A3C4(a1, v2);
      v3 = v6;
      v4 = v6 & 0xFFFFFF0000000000;
      v5 = v6 & 0xFF00000000;
    }
    else
    {
      v4 = 0;
      v5 = 0x100000000;
    }
  }
  return v4 | v5 | v3;
}

_QWORD *sub_20C01A370(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v2 = result[1];
  if (a2)
  {
    v4 = result[3];
    v3 = result[4];
    v5 = (unsigned __int8 *)result[1];
    v6 = a2;
    do
    {
      v7 = *v5++;
      if (v7 == 10)
      {
        v3 = 0;
        result[3] = ++v4;
      }
      else
      {
        ++v3;
      }
      result[4] = v3;
      --v6;
    }
    while (v6);
  }
  v8 = result[2] + a2;
  result[1] = v2 + a2;
  result[2] = v8;
  return result;
}

uint64_t sub_20C01A3C4(uint64_t a1, char a2)
{
  uint64_t v2;
  char v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  int v9;
  _BYTE *v10;
  char v11;
  char v12;
  char v13;
  int v14;

  if ((a2 & 0xE0) == 0xC0)
  {
    v2 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(*(_QWORD *)(a1 + 64) - v2) >= 2)
    {
      v3 = *(_BYTE *)(v2 + 1);
      if ((v3 & 0xC0) == 0x80)
      {
        v4 = v3 & 0x3F | ((a2 & 0x1F) << 6);
        if (v4 > 0x7F)
        {
          v5 = 0x200000000;
          return v5 | v4;
        }
      }
    }
LABEL_20:
    v4 = 0;
    v5 = 0;
    return v5 | v4;
  }
  if ((a2 & 0xF0) == 0xE0)
  {
    v6 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(*(_QWORD *)(a1 + 64) - v6) >= 3)
    {
      v7 = *(_BYTE *)(v6 + 1);
      if ((v7 & 0xC0) == 0x80)
      {
        v8 = *(_BYTE *)(v6 + 2);
        if ((v8 & 0xC0) == 0x80)
        {
          v9 = v7 & 0x3F | ((a2 & 0xF) << 6);
          if ((v9 & 0x3E0) != 0x360)
          {
            v4 = v8 & 0x3F | (v9 << 6);
            if (v4 > 0x7FF)
            {
              v5 = 0x300000000;
              return v5 | v4;
            }
          }
        }
      }
    }
    goto LABEL_20;
  }
  if ((a2 & 0xF8) != 0xF0)
    goto LABEL_20;
  v10 = *(_BYTE **)(a1 + 32);
  if (*(_QWORD *)(a1 + 64) - (_QWORD)v10 < 4uLL)
    goto LABEL_20;
  v5 = 0;
  v4 = 0;
  v11 = v10[1];
  if ((v11 & 0xC0) == 0x80)
  {
    v12 = v10[2];
    if ((v12 & 0xC0) == 0x80)
    {
      v13 = v10[3];
      if ((v13 & 0xC0) == 0x80)
      {
        v14 = (v11 & 0x3F | ((a2 & 7) << 6)) << 12;
        if (!((v14 - 0x10000) >> 20))
        {
          v4 = v13 & 0x3F | ((v12 & 0x3F) << 6) | v14;
          v5 = 0x400000000;
          return v5 | v4;
        }
        goto LABEL_20;
      }
    }
  }
  return v5 | v4;
}

uint64_t sub_20C01A510(_QWORD *a1)
{
  unint64_t v2;
  unsigned __int8 v3;
  uint64_t result;

  if (a1[4] == a1[8])
    return 0;
  v2 = sub_20C01A30C((uint64_t)a1);
  if ((v2 & 0xFF00000000) == 0)
    return 0;
  v3 = BYTE4(v2);
  result = pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidContinue((pxrInternal__aapl__pxrReserved__ *)v2);
  if ((_DWORD)result)
  {
    sub_20C01A370(a1 + 3, v3);
    return 1;
  }
  return result;
}

_DWORD *sub_20C01A56C(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  _DWORD *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  uint64_t v8;
  _DWORD *result;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(*(_QWORD *)(a2 + 8) - 8));
  if (!v4)
  {
    v5 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v4);
    v6 = *(_QWORD *)(a2 + 8);
    sub_20C01A074((int *)(v6 - 8), v5);
    sub_20C01A0C8((int *)(v6 - 4), v5 + 1);
  }
  v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(_QWORD *)(a2 + 8) - 8);
  sub_20C01A674(a1, &v12);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, &v13);
  v8 = *(_QWORD *)(a2 + 8);
  sub_20BFD3EBC((int *)(v8 - 8), &v13);
  sub_20BFD3F10((int *)(v8 - 4), &v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  result = sub_20BFD265C(&v13);
  if ((v12 & 7) != 0)
  {
    v10 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  return result;
}

void sub_20C01A674(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  char __dst[32];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v3 = *(char **)a1;
  v4 = *(char **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (unint64_t)&v4[-*(_QWORD *)a1];
  *a2 = 0;
  if (v5 > 0x1F)
  {
    sub_20BE93368(__p, v3, v4, v5);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v20);
    v10 = *a2;
    v11 = *a2 & 7;
    if (&v20 == a2)
    {
      if (v11)
      {
        v16 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    else
    {
      if (v11)
      {
        v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
      *a2 = v20;
      v20 = 0;
    }
    if (v19 < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (v4 != v3)
      memmove(__dst, v3, v5);
    __dst[v5] = 0;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, __dst);
    v6 = *a2;
    v7 = *a2 & 7;
    if (__p == (void **)a2)
    {
      if (v7)
      {
        v14 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
    }
    else
    {
      if (v7)
      {
        v8 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stlxr(v9 - 2, v8));
      }
      *a2 = (uint64_t)__p[0];
    }
  }
}

void sub_20C01A7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  unsigned int *v17;
  unsigned int v18;

  if (a15 < 0)
    operator delete(__p);
  if ((*v15 & 7) != 0)
  {
    v17 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_20C01A820(uint64_t a1, uint64_t a2)
{
  __n128 *v4;
  int v5;
  __n128 result;
  __n128 v7;
  __n128 v8;

  v4 = (__n128 *)(a1 + 32);
  v7 = *(__n128 *)(a1 + 32);
  v8 = *(__n128 *)(a1 + 48);
  v5 = sub_20C01A8C0((_QWORD *)a1);
  *v4 = v7;
  v4[1] = v8;
  if (!v5 || !sub_20C01BD08((_QWORD *)a1, a2) || (sub_20C01A1D4(a1, a2) & 1) == 0)
  {
    result = v7;
    *v4 = v7;
    v4[1] = v8;
  }
  return result;
}

void sub_20C01A8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C01A8C0(_QWORD *a1)
{
  uint64_t result;

  result = sub_20C01A908(a1);
  if ((_DWORD)result)
  {
    result = sub_20C01A26C(a1);
    if ((_DWORD)result)
    {
      while ((sub_20C01A510(a1) & 1) != 0)
        ;
      return 1;
    }
  }
  return result;
}

uint64_t sub_20C01A908(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v2;

  v1 = (_BYTE *)a1[4];
  if (v1 == (_BYTE *)a1[8] || *v1 != 47)
    return sub_20C01A94C(a1);
  v2 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v2;
  ++a1[7];
  return 1;
}

uint64_t sub_20C01A94C(_QWORD *a1)
{
  uint64_t result;

  result = sub_20C01A994(a1);
  if ((_DWORD)result)
  {
    sub_20C01AAA4(a1);
    return sub_20C01BB88(a1);
  }
  return result;
}

uint64_t sub_20C01A994(_QWORD *a1)
{
  _BYTE *v2;
  uint64_t v3;

  while ((sub_20C01AA0C(a1) & 1) != 0)
    ;
  v2 = (_BYTE *)a1[4];
  if (v2 == (_BYTE *)a1[8] || *v2 != 123)
    return 0;
  v3 = a1[5] + 1;
  a1[4] = v2 + 1;
  a1[5] = v3;
  ++a1[7];
  while ((sub_20C01AA0C(a1) & 1) != 0)
    ;
  return 1;
}

uint64_t sub_20C01AA0C(_QWORD *a1)
{
  char *v1;
  int v3;
  uint64_t *v4;
  char *v5;
  uint64_t v7;
  __int16 __s;
  uint64_t v9;

  v1 = (char *)a1[4];
  if (v1 == (char *)a1[8])
    return 0;
  v3 = *v1;
  __s = 2336;
  v4 = (uint64_t *)memchr(&__s, v3, 2uLL);
  v5 = (char *)(v4 ? v4 : &v9);
  if (v5 - (char *)&__s == 2)
    return 0;
  v7 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v7;
  ++a1[7];
  return 1;
}

uint64_t sub_20C01AAA4(_QWORD *a1)
{
  if ((sub_20C01AB74(a1) & 1) == 0)
    sub_20C01AB20((uint64_t)a1);
  if ((sub_20C01B624(a1) & 1) == 0)
    sub_20C01B5D0((uint64_t)a1);
  sub_20C01B818((uint64_t)a1);
  if ((sub_20C01B994(a1) & 1) == 0)
    sub_20C01B940((uint64_t)a1);
  return 1;
}

void sub_20C01AB20(uint64_t a1)
{
  sub_20C01AC24(a1);
}

void sub_20C01AB30()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_20C01AB60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C01AB74(_QWORD *a1)
{
  uint64_t v2;

  v2 = sub_20C01A26C(a1);
  if ((_DWORD)v2)
  {
    while ((sub_20C01ABBC(a1) & 1) != 0)
      ;
  }
  return v2;
}

uint64_t sub_20C01ABBC(_QWORD *a1)
{
  _BYTE *v2;
  uint64_t v3;

  if ((sub_20C01A510(a1) & 1) != 0)
    return 1;
  v2 = (_BYTE *)a1[4];
  if (v2 != (_BYTE *)a1[8] && *v2 == 45)
  {
    v3 = a1[5] + 1;
    a1[4] = v2 + 1;
    a1[5] = v3;
    ++a1[7];
    return 1;
  }
  return 0;
}

void sub_20C01AC24(uint64_t a1)
{
  void *exception;
  std::string *v3;
  __int128 v4;
  std::string v5;
  __int128 v6;
  std::string::size_type v7;

  exception = __cxa_allocate_exception(0x28uLL);
  sub_20C01AD10(&v5);
  v3 = std::string::insert(&v5, 0, "parse error matching ");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7 = v3->__r_.__value_.__r.__words[2];
  v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_20C01ADA0((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C01ACB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_20C01AD10(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB0A64 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB0A64 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C01AD8C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C01ADA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  void *__p;
  char v8;

  sub_20C01AE64((uint64_t)&v6, a3 + 32, (__int128 *)(a3 + 72));
  sub_20C01AEBC(a1, a2, &v6);
  if (v8 < 0)
    operator delete(__p);
  return a1;
}

void sub_20C01ADFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C01AE18(std::runtime_error *a1)
{
  void **v2;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24C526178;
  v2 = (void **)&a1[1].__vftable;
  sub_20C01B544(&v2);
  std::runtime_error::~runtime_error(a1);
}

uint64_t sub_20C01AE64(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  __int128 v5;

  *(_OWORD *)a1 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 24);
  v4 = a1 + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v4 = v5;
  }
  return a1;
}

uint64_t sub_20C01AEBC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::string *v6;
  __int128 v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string v14;
  std::string v15;
  std::string v16;

  sub_20C01B02C((uint64_t)a3);
  v6 = std::string::append(&v14, ": ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)a2;
  else
    v9 = *(const std::string::value_type **)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  v11 = std::string::append(&v15, v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v16);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &unk_24C526178;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_20C01B178((uint64_t *)(a1 + 16), a3);
  return a1;
}

void sub_20C01AFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::runtime_error *v28;

  sub_20C01B544((void ***)&__p);
  std::runtime_error::~runtime_error(v28);
  _Unwind_Resume(a1);
}

uint64_t sub_20C01B02C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  char v13;

  sub_20BDDE5E0((uint64_t)v10);
  v2 = *(char *)(a1 + 47);
  if (v2 >= 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 47);
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = sub_20BDDC1C8(v10, v3, v4);
  v13 = 58;
  sub_20BDDC1C8(v5, (uint64_t)&v13, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  v13 = 58;
  sub_20BDDC1C8(v6, (uint64_t)&v13, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v13 = 40;
  sub_20BDDC1C8(v7, (uint64_t)&v13, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  v13 = 41;
  sub_20BDDC1C8(v8, (uint64_t)&v13, 1);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v12);
}

void sub_20C01B164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BDDE6CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C01B178(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  _QWORD v20[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      sub_20BDDF694();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    v20[4] = v4;
    if (v14)
      v15 = (char *)sub_20BE6D0B4(v4, v14);
    else
      v15 = 0;
    v16 = &v15[48 * v11];
    v20[0] = v15;
    v20[1] = v16;
    v20[3] = &v15[48 * v14];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    v18 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v16 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v20[2] = v16 + 48;
    sub_20C01B324(a1, v20);
    v10 = a1[1];
    sub_20C01B4BC((uint64_t)v20);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return v10 - 48;
}

