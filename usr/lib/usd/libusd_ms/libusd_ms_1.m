void sub_20BE185DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,char a37)
{
  void *v39;

  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a31);
    v39 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
      sub_20BE02570((uint64_t)&a37, (uint64_t)v39);
    else
      sub_20BE02504((uint64_t)&a37, 0);
    __cxa_end_catch();
    JUMPOUT(0x20BE185A0);
  }
  _Unwind_Resume(exception_object);
}

void sub_20BE18768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  v13 = 0uLL;
  Alembic::Abc::v12::IArrayProperty::get(a1, (uint64_t)&v13, a3);
  v12 = v13;
  if (*((_QWORD *)&v13 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20BDE82DC(a2, &v12);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20BE18834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE18848(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20BE18884(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  unsigned __int8 v11;
  _QWORD *v12;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  if ((v11 & 1) == 0)
  {
    {
      v12 = operator new(0x50uLL);
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      *((_DWORD *)v12 + 6) = 1;
      v12[6] = 0;
      v12[5] = 0;
      v12[4] = v12 + 5;
      *((_DWORD *)v12 + 14) = 127;
      *((_BYTE *)v12 + 60) = 0;
      v12[8] = 0;
      v12[9] = 0;
      Alembic::Abc::v12::IBasePropertyT<std::shared_ptr<Alembic::AbcCoreAbstract::v12::ScalarPropertyReader>>::getHeader(void)const::phd = (uint64_t)v12;
    }
  }
  JUMPOUT(0x20BE18874);
}

void sub_20BE1892C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void **sub_20BE18960(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  Alembic::AbcGeom::v12::FilmBackXformOp *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  Alembic::AbcGeom::v12::FilmBackXformOp *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18[2];
  char *v19;
  char *v20;
  void **v21;

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (Alembic::AbcGeom::v12::FilmBackXformOp *)*(result - 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = (Alembic::AbcGeom::v12::FilmBackXformOp *)((char *)v7 + 56 * a2);
      v14 = 56 * a2;
      do
      {
        result = (void **)Alembic::AbcGeom::v12::FilmBackXformOp::FilmBackXformOp(v7);
        v7 = (Alembic::AbcGeom::v12::FilmBackXformOp *)((char *)v7 + 56);
        v14 -= 56;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492)
      sub_20BDDF694();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v9;
    v21 = result;
    if (v11)
      v12 = (char *)sub_20BE16B34((uint64_t)result, v11);
    else
      v12 = 0;
    v15 = &v12[56 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v19 = v15;
    v20 = &v12[56 * v11];
    v16 = 56 * a2;
    v17 = &v15[56 * a2];
    do
    {
      Alembic::AbcGeom::v12::FilmBackXformOp::FilmBackXformOp((Alembic::AbcGeom::v12::FilmBackXformOp *)v15);
      v15 += 56;
      v16 -= 56;
    }
    while (v16);
    v19 = v17;
    sub_20BE16AC0(a1, v18);
    return sub_20BE16CC0(v18);
  }
  return result;
}

void sub_20BE18AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE16CC0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE18AF0(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *exception;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49[2];
  char v50;
  void *__p[2];
  unsigned __int8 v52;
  __int128 v53;
  _QWORD v54[34];
  std::__shared_weak_count *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61[4];
  std::__shared_weak_count *v62;
  int v63;
  uint64_t v64;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *a2;
  *((_QWORD *)&v53 + 1) = 0;
  v54[0] = 0;
  *(_QWORD *)&v53 = (char *)&v53 + 8;
  v58 = 0;
  v59 = 0;
  v60 = v10;
  sub_20BDEBF8C(v61, (const void ***)&v53);
  v61[3] = 0;
  v62 = 0;
  v63 = 0;
  v64 = 1;
  sub_20BDE9D48((uint64_t)&v53, *((_QWORD **)&v53 + 1));
  sub_20BE02E30(a4, (uint64_t)&v60);
  sub_20BE02E30(a5, (uint64_t)&v60);
  *(_DWORD *)a1 = v60;
  v56 = a1;
  v57 = "ITypedArrayProperty::ITypedArrayProperty()";
  v12 = *((_QWORD *)a2 + 4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v54[33] = v12;
  v55 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v39 = sub_20BDDC1C8(v54, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v39, (uint64_t)"ITypedArrayProperty ctor", 24);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v41 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v41, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  v16 = v15;
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v42 = sub_20BDDC1C8(v54, (uint64_t)"Nonexistent array property: ", 28);
    v43 = *(char *)(a3 + 23);
    if (v43 >= 0)
      v44 = a3;
    else
      v44 = *(_QWORD *)a3;
    if (v43 >= 0)
      v45 = *(unsigned __int8 *)(a3 + 23);
    else
      v45 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v42, v44, v45);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    v46 = __cxa_allocate_exception(0x20uLL);
    v47 = sub_20BDDC09C(v46, (uint64_t)__p);
    __cxa_throw(v47, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v17 = *(_DWORD *)(v15 + 56) == 12 && *(_DWORD *)(v15 + 24) == 2;
  if (!v17 || (sub_20BE190D8(v15 + 32, v64) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v28 = sub_20BDDC1C8(v54, (uint64_t)"Incorrect match of header datatype: ", 36);
    v29 = sub_20BDE00F4(v28, (int *)(v16 + 56));
    v30 = sub_20BDDC1C8(v29, (uint64_t)" to expected: ", 14);
    v48 = 0x10000000CLL;
    v31 = sub_20BDE00F4(v30, (int *)&v48);
    v32 = sub_20BDDC1C8(v31, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_20BDDC0E4(v49, "interpretation");
    sub_20BE01E1C(v16 + 32, (const void **)v49, __p);
    if ((v52 & 0x80u) == 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if ((v52 & 0x80u) == 0)
      v34 = v52;
    else
      v34 = (uint64_t)__p[1];
    v35 = sub_20BDDC1C8(v32, (uint64_t)v33, v34);
    v36 = sub_20BDDC1C8(v35, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v36, (uint64_t)"", 0);
    if ((char)v52 < 0)
      operator delete(__p[0]);
    if (v50 < 0)
      operator delete(v49[0]);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    v37 = __cxa_allocate_exception(0x20uLL);
    v38 = sub_20BDDC09C(v37, (uint64_t)__p);
    __cxa_throw(v38, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 96))(&v53, v12, a3);
  sub_20BDE82DC(a1 + 32, &v53);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v55;
  if (v55)
  {
    v22 = (unint64_t *)&v55->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v62;
  if (v62)
  {
    v25 = (unint64_t *)&v62->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  sub_20BDE9D48((uint64_t)v61, (_QWORD *)v61[1]);
  return a1;
}

void sub_20BE18F74(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 192));
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v26);
  MEMORY[0x212B929D0](v25, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 176, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE18CC0);
}

void sub_20BE19098()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 144);
  JUMPOUT(0x20BE190C8);
}

uint64_t sub_20BE190D8(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (a2)
    return 1;
  sub_20BDDC0E4(__p, "interpretation");
  sub_20BE01E1C(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    v2 = v7[1] == 0;
    operator delete(v7[0]);
  }
  else
  {
    v2 = v8 == 0;
  }
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE19160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE1917C(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *exception;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49[2];
  char v50;
  void *__p[2];
  unsigned __int8 v52;
  __int128 v53;
  _QWORD v54[34];
  std::__shared_weak_count *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61[4];
  std::__shared_weak_count *v62;
  int v63;
  uint64_t v64;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *a2;
  *((_QWORD *)&v53 + 1) = 0;
  v54[0] = 0;
  *(_QWORD *)&v53 = (char *)&v53 + 8;
  v58 = 0;
  v59 = 0;
  v60 = v10;
  sub_20BDEBF8C(v61, (const void ***)&v53);
  v61[3] = 0;
  v62 = 0;
  v63 = 0;
  v64 = 1;
  sub_20BDE9D48((uint64_t)&v53, *((_QWORD **)&v53 + 1));
  sub_20BE02E30(a4, (uint64_t)&v60);
  sub_20BE02E30(a5, (uint64_t)&v60);
  *(_DWORD *)a1 = v60;
  v56 = a1;
  v57 = "ITypedArrayProperty::ITypedArrayProperty()";
  v12 = *((_QWORD *)a2 + 4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v54[33] = v12;
  v55 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v39 = sub_20BDDC1C8(v54, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v39, (uint64_t)"ITypedArrayProperty ctor", 24);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v41 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v41, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  v16 = v15;
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v42 = sub_20BDDC1C8(v54, (uint64_t)"Nonexistent array property: ", 28);
    v43 = *(char *)(a3 + 23);
    if (v43 >= 0)
      v44 = a3;
    else
      v44 = *(_QWORD *)a3;
    if (v43 >= 0)
      v45 = *(unsigned __int8 *)(a3 + 23);
    else
      v45 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v42, v44, v45);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    v46 = __cxa_allocate_exception(0x20uLL);
    v47 = sub_20BDDC09C(v46, (uint64_t)__p);
    __cxa_throw(v47, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v17 = *(_DWORD *)(v15 + 56) == 11 && *(_DWORD *)(v15 + 24) == 2;
  if (!v17 || (sub_20BE19764(v15 + 32, v64) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v28 = sub_20BDDC1C8(v54, (uint64_t)"Incorrect match of header datatype: ", 36);
    v29 = sub_20BDE00F4(v28, (int *)(v16 + 56));
    v30 = sub_20BDDC1C8(v29, (uint64_t)" to expected: ", 14);
    v48 = 0x10000000BLL;
    v31 = sub_20BDE00F4(v30, (int *)&v48);
    v32 = sub_20BDDC1C8(v31, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_20BDDC0E4(v49, "interpretation");
    sub_20BE01E1C(v16 + 32, (const void **)v49, __p);
    if ((v52 & 0x80u) == 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if ((v52 & 0x80u) == 0)
      v34 = v52;
    else
      v34 = (uint64_t)__p[1];
    v35 = sub_20BDDC1C8(v32, (uint64_t)v33, v34);
    v36 = sub_20BDDC1C8(v35, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v36, (uint64_t)"", 0);
    if ((char)v52 < 0)
      operator delete(__p[0]);
    if (v50 < 0)
      operator delete(v49[0]);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    v37 = __cxa_allocate_exception(0x20uLL);
    v38 = sub_20BDDC09C(v37, (uint64_t)__p);
    __cxa_throw(v38, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 96))(&v53, v12, a3);
  sub_20BDE82DC(a1 + 32, &v53);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v55;
  if (v55)
  {
    v22 = (unint64_t *)&v55->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v62;
  if (v62)
  {
    v25 = (unint64_t *)&v62->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  sub_20BDE9D48((uint64_t)v61, (_QWORD *)v61[1]);
  return a1;
}

void sub_20BE19600(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 192));
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v26);
  MEMORY[0x212B929D0](v25, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 176, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE1934CLL);
}

void sub_20BE19724()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 144);
  JUMPOUT(0x20BE19754);
}

uint64_t sub_20BE19764(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (a2)
    return 1;
  sub_20BDDC0E4(__p, "interpretation");
  sub_20BE01E1C(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    v2 = v7[1] == 0;
    operator delete(v7[0]);
  }
  else
  {
    v2 = v8 == 0;
  }
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE197EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Alembic::AbcGeom::v12::OCameraSchema::set(Alembic::AbcGeom::v12::OCameraSchema *this, uint64_t **a2)
{
  uint64_t v4;
  _OWORD *v5;
  Alembic::Abc::v12::OScalarProperty *v6;
  unint64_t NumOps;
  unint64_t NumOpChannels;
  uint64_t v9;
  Alembic::AbcGeom::v12::FilmBackXformOp *v10;
  Alembic::AbcGeom::v12::FilmBackXformOp *v11;
  int Type;
  uint64_t NumChannels;
  unint64_t i;
  double ChannelValue;
  uint64_t (*v16)();
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  Alembic::AbcGeom::v12::FilmBackXformOp *v26;
  char *v27;
  unint64_t v28;
  __int128 v29;
  double v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  Alembic::Abc::v12::OScalarProperty *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t (*v50)();
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *exception;
  _QWORD *v63;
  __int128 v64;
  void *v65;
  void *v66;
  uint64_t v67[31];
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  void *__p[2];
  void *v73;
  void *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t *v77;
  int v78;
  uint64_t *v79;
  int v80;
  uint64_t *v81;
  int v82;
  uint64_t *v83;
  int v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  int v87;
  char v88;
  void *v89[2];
  char v90;
  void *v91[2];
  char v92;
  char *v93;
  const char *v94;
  _QWORD v95[18];

  v4 = 0;
  v95[16] = *MEMORY[0x24BDAC8D0];
  v5 = (_OWORD *)((char *)this + 472);
  v93 = (char *)this + 8;
  v94 = "OCameraSchema::set()";
  do
  {
    *(double *)&v95[v4] = Alembic::AbcGeom::v12::CameraSample::getCoreValue((Alembic::AbcGeom::v12::CameraSample *)a2, v4);
    ++v4;
  }
  while (v4 != 16);
  v6 = (Alembic::AbcGeom::v12::OCameraSchema *)((char *)this + 56);
  if (Alembic::Abc::v12::OScalarProperty::getNumSamples((Alembic::AbcGeom::v12::OCameraSchema *)((char *)this + 56)))
  {
    NumOps = Alembic::AbcGeom::v12::CameraSample::getNumOps((Alembic::AbcGeom::v12::CameraSample *)a2);
    if (NumOps != Alembic::AbcGeom::v12::CameraSample::getNumOps((Alembic::AbcGeom::v12::OCameraSchema *)((char *)this + 344)))
    {
      sub_20BDDBD68((uint64_t)&v64);
      sub_20BDDC1C8(&v65, (uint64_t)"Number of Film Back Xform Ops differ expected: ", 47);
      Alembic::AbcGeom::v12::CameraSample::getNumOps((Alembic::AbcGeom::v12::OCameraSchema *)((char *)this + 344));
      v61 = (_QWORD *)std::ostream::operator<<();
      sub_20BDDC1C8(v61, (uint64_t)" got: ", 6);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_20BDDBF20(__p, (__int128 *)v91);
      if (v92 < 0)
        operator delete(v91[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      v63 = sub_20BDDC09C(exception, (uint64_t)__p);
      __cxa_throw(v63, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    NumOpChannels = Alembic::AbcGeom::v12::CameraSample::getNumOpChannels((Alembic::AbcGeom::v12::OCameraSchema *)((char *)this + 344));
    sub_20BDE48D4(v91, NumOpChannels);
    v83 = 0;
    if (NumOps)
    {
      v9 = 0;
      do
      {
        v10 = (Alembic::AbcGeom::v12::FilmBackXformOp *)Alembic::AbcGeom::v12::CameraSample::operator[]((uint64_t)a2, &v83);
        v11 = (Alembic::AbcGeom::v12::FilmBackXformOp *)Alembic::AbcGeom::v12::CameraSample::operator[]((uint64_t)this + 344, &v83);
        Type = Alembic::AbcGeom::v12::FilmBackXformOp::getType(v11);
        if (Type != Alembic::AbcGeom::v12::FilmBackXformOp::getType(v10))
        {
          sub_20BDDBD68((uint64_t)&v64);
          sub_20BDDC1C8(&v65, (uint64_t)"Film Back Xform Operation type differs from initial sample at index: ", 69);
          std::ostream::operator<<();
          std::stringbuf::str();
          sub_20BDDBF20(__p, (__int128 *)v89);
          if (v90 < 0)
            operator delete(v89[0]);
          v59 = __cxa_allocate_exception(0x20uLL);
          v60 = sub_20BDDC09C(v59, (uint64_t)__p);
          __cxa_throw(v60, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
        }
        NumChannels = Alembic::AbcGeom::v12::FilmBackXformOp::getNumChannels(v10);
        if (NumChannels)
        {
          for (i = 0; i != NumChannels; ++i)
          {
            ChannelValue = Alembic::AbcGeom::v12::FilmBackXformOp::getChannelValue(v10, i);
            *((double *)v91[0] + v9 + i) = ChannelValue;
          }
          v9 += i;
        }
        v83 = (uint64_t *)((char *)v83 + 1);
      }
      while ((unint64_t)v83 < NumOps);
    }
    if (*((char *)this + 327) < 0)
    {
      if (*((_QWORD *)this + 39))
        goto LABEL_15;
    }
    else if (*((_BYTE *)this + 327))
    {
LABEL_15:
      v16 = 0;
      goto LABEL_68;
    }
    if (*((_QWORD *)this + 41))
      v16 = nullsub_6;
    else
      v16 = 0;
LABEL_68:
    if (v16)
    {
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OCameraSchema *)((char *)this + 296), v91[0]);
LABEL_70:
      if (v91[0])
      {
        v91[1] = v91[0];
        operator delete(v91[0]);
      }
      return Alembic::Abc::v12::OScalarProperty::set(v6, v95);
    }
    if (*((char *)this + 279) < 0)
    {
      if (*((_QWORD *)this + 33))
        goto LABEL_74;
    }
    else if (*((_BYTE *)this + 279))
    {
LABEL_74:
      v50 = 0;
      goto LABEL_96;
    }
    if (*((_QWORD *)this + 35))
      v50 = nullsub_7;
    else
      v50 = 0;
LABEL_96:
    if (v50)
    {
      sub_20BE1C4BC(&v64, (uint64_t)v91[0], ((char *)v91[1] - (char *)v91[0]) >> 3);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 248);
      if (v65)
      {
        v66 = v65;
        operator delete(v65);
      }
    }
    goto LABEL_70;
  }
  v17 = *(_OWORD *)a2;
  v18 = *((_OWORD *)a2 + 1);
  v19 = *((_OWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 376) = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 392) = v19;
  *(_OWORD *)((char *)this + 344) = v17;
  *(_OWORD *)((char *)this + 360) = v18;
  v20 = *((_OWORD *)a2 + 4);
  v21 = *((_OWORD *)a2 + 5);
  v22 = *((_OWORD *)a2 + 7);
  *(_OWORD *)((char *)this + 440) = *((_OWORD *)a2 + 6);
  *(_OWORD *)((char *)this + 456) = v22;
  *(_OWORD *)((char *)this + 408) = v20;
  *(_OWORD *)((char *)this + 424) = v21;
  *v5 = *((_OWORD *)a2 + 8);
  v5[1] = *((_OWORD *)a2 + 9);
  v5[2] = *((_OWORD *)a2 + 10);
  if ((uint64_t **)((char *)this + 344) != a2)
    sub_20BE1B348((uint64_t)this + 520, a2[22], a2[23], 0x6DB6DB6DB6DB6DB7 * (a2[23] - a2[22]));
  v23 = Alembic::AbcGeom::v12::CameraSample::getNumOpChannels((Alembic::AbcGeom::v12::CameraSample *)a2);
  v24 = (void *)Alembic::AbcGeom::v12::CameraSample::getNumOps((Alembic::AbcGeom::v12::CameraSample *)a2);
  sub_20BDE4F04(v91, (unint64_t)v24);
  sub_20BDE48D4(v89, v23);
  __p[0] = 0;
  if (!v24)
    goto LABEL_38;
  v25 = 0;
  do
  {
    v26 = (Alembic::AbcGeom::v12::FilmBackXformOp *)Alembic::AbcGeom::v12::CameraSample::operator[]((uint64_t)a2, __p);
    Alembic::AbcGeom::v12::FilmBackXformOp::getTypeAndHint(v26, &v64);
    v27 = (char *)v91[0] + 24 * (uint64_t)__p[0];
    if (v27[23] < 0)
      operator delete(*(void **)v27);
    v28 = 0;
    v29 = v64;
    *((_QWORD *)v27 + 2) = v65;
    *(_OWORD *)v27 = v29;
    while (v28 < Alembic::AbcGeom::v12::FilmBackXformOp::getNumChannels(v26))
    {
      v30 = Alembic::AbcGeom::v12::FilmBackXformOp::getChannelValue(v26, v28);
      *((double *)v89[0] + v25 + v28++) = v30;
    }
    ++__p[0];
    v25 += v28;
  }
  while (__p[0] < v24);
  if ((unint64_t)v24 < 0x100)
  {
    v87 = 12;
    v88 = (char)v24;
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    v85 = *((_QWORD *)this + 5);
    v86 = v31;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
    }
    sub_20BDDC0E4(__p, ".filmBackOps");
    LODWORD(v83) = 0;
    v84 = 0;
    LODWORD(v81) = 0;
    v82 = 0;
    LODWORD(v79) = 0;
    v80 = 0;
    LODWORD(v77) = 0;
    v78 = 0;
    Alembic::Abc::v12::OScalarProperty::OScalarProperty(&v64, &v85, __p, &v87, &v83, &v81, &v79, &v77);
    if (SHIBYTE(v73) < 0)
      operator delete(__p[0]);
    v34 = v86;
    if (v86)
    {
      v35 = (unint64_t *)&v86->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v64, v91[0]);
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v64);
  }
  else
  {
LABEL_38:
    if (v23 >= 0x100)
    {
      v37 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
      v75 = *((_QWORD *)this + 5);
      v76 = v37;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      sub_20BDDC0E4(__p, ".filmBackOps");
      LODWORD(v83) = 0;
      v84 = 0;
      LODWORD(v81) = 0;
      v82 = 0;
      LODWORD(v79) = 0;
      v80 = 0;
      LODWORD(v77) = 0;
      v78 = 0;
      sub_20BE1B910((uint64_t)&v64, &v75, (uint64_t)__p, &v83, &v81, &v79, &v77);
      if (SHIBYTE(v73) < 0)
        operator delete(__p[0]);
      v40 = v76;
      if (v76)
      {
        v41 = (unint64_t *)&v76->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      sub_20BE1BE9C(__p, (uint64_t)v91[0], 0xAAAAAAAAAAAAAAABLL * (((char *)v91[1] - (char *)v91[0]) >> 3));
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v64);
      if (v73)
      {
        v74 = v73;
        operator delete(v73);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v64);
      goto LABEL_76;
    }
  }
  if (v23 - 1 <= 0xFE)
  {
    v87 = 11;
    v88 = v23;
    v43 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    v70 = *((_QWORD *)this + 5);
    v71 = v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    sub_20BDDC0E4(__p, ".filmBackChannels");
    LODWORD(v83) = 0;
    v84 = 0;
    LODWORD(v81) = 0;
    v82 = 0;
    LODWORD(v79) = 0;
    v80 = 0;
    LODWORD(v77) = 0;
    v78 = 0;
    Alembic::Abc::v12::OScalarProperty::OScalarProperty(&v64, &v70, __p, &v87, &v83, &v81, &v79, &v77);
    *((_DWORD *)this + 74) = v64;
    std::string::operator=((std::string *)((char *)this + 304), (const std::string *)((char *)&v64 + 8));
    v46 = (Alembic::AbcGeom::v12::OCameraSchema *)((char *)this + 296);
    sub_20BDE881C((_QWORD *)this + 41, v67);
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v64);
    if (SHIBYTE(v73) < 0)
      operator delete(__p[0]);
    v47 = v71;
    if (v71)
    {
      v48 = (unint64_t *)&v71->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    Alembic::Abc::v12::OScalarProperty::set(v46, v89[0]);
    goto LABEL_88;
  }
  if (v23 >= 0x100)
  {
LABEL_76:
    v51 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    v68 = *((_QWORD *)this + 5);
    v69 = v51;
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    sub_20BDDC0E4(__p, ".filmBackChannels");
    LODWORD(v83) = 0;
    v84 = 0;
    LODWORD(v81) = 0;
    v82 = 0;
    LODWORD(v79) = 0;
    v80 = 0;
    LODWORD(v77) = 0;
    v78 = 0;
    sub_20BE1BF30((uint64_t)&v64, &v68, (uint64_t)__p, &v83, &v81, &v79, &v77);
    *((_DWORD *)this + 62) = v64;
    v54 = (char *)this + 248;
    std::string::operator=((std::string *)((char *)this + 256), (const std::string *)((char *)&v64 + 8));
    sub_20BDE881C((_QWORD *)this + 35, v67);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v64);
    if (SHIBYTE(v73) < 0)
      operator delete(__p[0]);
    v55 = v69;
    if (v69)
    {
      v56 = (unint64_t *)&v69->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    sub_20BE1C4BC(&v64, (uint64_t)v89[0], ((char *)v89[1] - (char *)v89[0]) >> 3);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)v54);
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
  }
LABEL_88:
  if (v89[0])
  {
    v89[1] = v89[0];
    operator delete(v89[0]);
  }
  *(_QWORD *)&v64 = v91;
  sub_20BDE5038((void ***)&v64);
  return Alembic::Abc::v12::OScalarProperty::set(v6, v95);
}

void sub_20BE1A128(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  uint64_t v49;
  void *v52;

  if (a2)
  {
    sub_20BDDC194((std::exception *)&a49);
    sub_20BDDBE98((uint64_t)&a10);
    v52 = __cxa_begin_catch(a1);
    if (a2 == 2)
      sub_20BE02570(v49 - 240, (uint64_t)v52);
    else
      sub_20BE02504(v49 - 240, 0);
    __cxa_end_catch();
    JUMPOUT(0x20BE19F6CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OCameraSchema::setFromPrevious(Alembic::AbcGeom::v12::OCameraSchema *this)
{
  uint64_t result;
  uint64_t (*v3)();
  uint64_t (*v4)();

  result = Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OCameraSchema *)((char *)this + 56));
  if (*((char *)this + 327) < 0)
  {
    if (*((_QWORD *)this + 39))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 327))
  {
LABEL_3:
    v3 = 0;
    goto LABEL_8;
  }
  if (*((_QWORD *)this + 41))
    v3 = nullsub_6;
  else
    v3 = 0;
LABEL_8:
  if (v3)
    result = Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OCameraSchema *)((char *)this + 296));
  if (*((char *)this + 279) < 0)
  {
    if (*((_QWORD *)this + 33))
      goto LABEL_12;
LABEL_14:
    if (*((_QWORD *)this + 35))
      v4 = nullsub_7;
    else
      v4 = 0;
    goto LABEL_17;
  }
  if (!*((_BYTE *)this + 279))
    goto LABEL_14;
LABEL_12:
  v4 = 0;
LABEL_17:
  if (v4)
    return Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OCameraSchema *)((char *)this + 248));
  return result;
}

void sub_20BE1A574(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE1A564);
}

void sub_20BE1A5A8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OCameraSchema::setTimeSampling(Alembic::AbcGeom::v12::OCameraSchema *this)
{
  return Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OCameraSchema *)((char *)this + 56));
}

void sub_20BE1A600(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE1A5F0);
}

void sub_20BE1A634(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

int *Alembic::AbcGeom::v12::OCameraSchema::setTimeSampling(Alembic::AbcGeom::v12::OCameraSchema *a1, _QWORD *a2)
{
  int *result;
  _BYTE v4[56];
  _BYTE v5[48];
  int *v6;
  const char *v7;

  result = (int *)((char *)a1 + 8);
  v6 = result;
  v7 = "OCameraSchema::setTimeSampling( TimeSamplingPtr)";
  if (*a2)
  {
    sub_20BE1A75C(result, (uint64_t)v4);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v4, (uint64_t)v5);
    Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v5);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v5);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v4);
    return (int *)Alembic::AbcGeom::v12::OCameraSchema::setTimeSampling(a1);
  }
  return result;
}

void sub_20BE1A6D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void *v19;

  v19 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v17 - 32, (uint64_t)v19);
  else
    sub_20BE02504(v17 - 32, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE1A6C4);
}

void sub_20BE1A73C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE1A75C(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int *v16;
  const char *v17;

  v16 = a1;
  v17 = "OBaseProperty::getObject()";
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)a1 + 4) + 24))(&v14);
  v4 = *a1;
  LODWORD(v12) = 1;
  v13 = v4;
  LODWORD(v10) = 0;
  v11 = 0;
  LODWORD(v8) = 0;
  v9 = 0;
  sub_20BE08884(a2, &v14, &v12, &v10, &v8);
  v5 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20BE1A81C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  void *v12;
  va_list va;

  va_start(va, a8);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  v12 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v9 - 48, (uint64_t)v12);
  else
    sub_20BE02504(v9 - 48, 0);
  __cxa_end_catch();
  *(_DWORD *)(v8 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(v8 + 16), "");
  *(_QWORD *)v8 = off_24C518EC0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  JUMPOUT(0x20BE1A808);
}

void sub_20BE1A898(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OCameraSchema::init(Alembic::AbcGeom::v12::OCameraSchema *this, int a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD v15[4];
  _DWORD v16[4];
  _DWORD v17[4];
  _DWORD v18[4];
  void *__p[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  int v23;
  std::string v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  char *v30;
  const char *v31;

  v30 = (char *)this + 8;
  v31 = "OCameraSchema::init()";
  v4 = *((_QWORD *)this + 5);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v28 = v4;
  v29 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v26 = 11;
    v27 = 16;
    v21 = v4;
    v22 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v26 = 11;
    v27 = 16;
    v21 = v4;
    v22 = 0;
  }
  sub_20BDDC0E4(__p, ".core");
  v18[0] = 2;
  v18[2] = a2;
  v17[0] = 0;
  v17[2] = 0;
  v16[0] = 0;
  v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  Alembic::Abc::v12::OScalarProperty::OScalarProperty(&v23, &v21, __p, &v26, v18, v17, v16, v15);
  *((_DWORD *)this + 14) = v23;
  std::string::operator=((std::string *)((char *)this + 64), &v24);
  sub_20BDE881C((_QWORD *)this + 11, &v25);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v23);
  if (v20 < 0)
    operator delete(__p[0]);
  v9 = v22;
  if (v22)
  {
    v10 = (unint64_t *)&v22->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v29;
  if (v29)
  {
    v13 = (unint64_t *)&v29->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20BE1AA5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  _QWORD *v25;
  uint64_t v26;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&a25);
  if (a22 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a23);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v26 - 64));
  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE1AB0C(v25);
  sub_20BE1AB0C(v25);
}

void sub_20BE1AAD8()
{
  uint64_t v0;

  sub_20BE02504(v0 - 48, 0);
  JUMPOUT(0x20BE1AAE4);
}

void sub_20BE1AAEC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE1AB0C(_QWORD *a1)
{
  sub_20BDEBF08(a1 + 11);
  MEMORY[0x212B929D0](a1 + 8, "");
  sub_20BDEBF08(a1 + 17);
  MEMORY[0x212B929D0](a1 + 14, "");
  sub_20BDEBF08(a1 + 23);
  MEMORY[0x212B929D0](a1 + 20, "");
  sub_20BDEBF08(a1 + 29);
  MEMORY[0x212B929D0](a1 + 26, "");
  sub_20BDEBF08(a1 + 35);
  MEMORY[0x212B929D0](a1 + 32, "");
  sub_20BDEBF08(a1 + 41);
  MEMORY[0x212B929D0](a1 + 38, "");
  sub_20BDEBF08(a1 + 5);
  JUMPOUT(0x212B929D0);
}

_BYTE *Alembic::AbcGeom::v12::OCameraSchema::getArbGeomParams@<X0>(Alembic::AbcGeom::v12::OCameraSchema *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD v15[4];
  _DWORD v16[4];
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  std::string v22;
  uint64_t v23[4];

  v23[2] = (uint64_t)this + 8;
  v23[3] = (uint64_t)"OCameraSchema::getArbGeomParams()";
  v4 = *((char *)this + 231);
  if (v4 < 0)
  {
    if (!*((_QWORD *)this + 27))
      goto LABEL_5;
  }
  else if (!*((_BYTE *)this + 231))
  {
LABEL_5:
    if (*((_QWORD *)this + 29))
      goto LABEL_17;
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v19 = *((_QWORD *)this + 5);
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".arbGeomParams");
  v16[0] = 0;
  v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v21, &v19, __p, v16, v15);
  *((_DWORD *)this + 50) = v21;
  std::string::operator=((std::string *)((char *)this + 208), &v22);
  sub_20BDE881C((_QWORD *)this + 29, v23);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  if (v18 < 0)
    operator delete(__p[0]);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LOBYTE(v4) = *((_BYTE *)this + 231);
LABEL_17:
  *(_DWORD *)a2 = *((_DWORD *)this + 50);
  result = (_BYTE *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    result = sub_20BDDBFAC(result, *((void **)this + 26), *((_QWORD *)this + 27));
  }
  else
  {
    *(_OWORD *)result = *((_OWORD *)this + 13);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 28);
  }
  v12 = *((_QWORD *)this + 30);
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 29);
  *(_QWORD *)(a2 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_20BE1AD3C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v23 - 48, (uint64_t)v25);
  else
    sub_20BE02504(v23 - 48, 0);
  __cxa_end_catch();
  *(_DWORD *)v22 = 2;
  sub_20BDDC0E4((_QWORD *)(v22 + 8), "");
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  JUMPOUT(0x20BE1AD28);
}

void sub_20BE1ADD8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_BYTE *Alembic::AbcGeom::v12::OCameraSchema::getUserProperties@<X0>(Alembic::AbcGeom::v12::OCameraSchema *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD v15[4];
  _DWORD v16[4];
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  std::string v22;
  uint64_t v23[4];

  v23[2] = (uint64_t)this + 8;
  v23[3] = (uint64_t)"OCameraSchema::getUserProperties()";
  v4 = *((char *)this + 183);
  if (v4 < 0)
  {
    if (!*((_QWORD *)this + 21))
      goto LABEL_5;
  }
  else if (!*((_BYTE *)this + 183))
  {
LABEL_5:
    if (*((_QWORD *)this + 23))
      goto LABEL_17;
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v19 = *((_QWORD *)this + 5);
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".userProperties");
  v16[0] = 0;
  v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v21, &v19, __p, v16, v15);
  *((_DWORD *)this + 38) = v21;
  std::string::operator=((std::string *)((char *)this + 160), &v22);
  sub_20BDE881C((_QWORD *)this + 23, v23);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  if (v18 < 0)
    operator delete(__p[0]);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LOBYTE(v4) = *((_BYTE *)this + 183);
LABEL_17:
  *(_DWORD *)a2 = *((_DWORD *)this + 38);
  result = (_BYTE *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    result = sub_20BDDBFAC(result, *((void **)this + 20), *((_QWORD *)this + 21));
  }
  else
  {
    *(_OWORD *)result = *((_OWORD *)this + 10);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 22);
  }
  v12 = *((_QWORD *)this + 24);
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 23);
  *(_QWORD *)(a2 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_20BE1AF7C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v23 - 48, (uint64_t)v25);
  else
    sub_20BE02504(v23 - 48, 0);
  __cxa_end_catch();
  *(_DWORD *)v22 = 2;
  sub_20BDDC0E4((_QWORD *)(v22 + 8), "");
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  JUMPOUT(0x20BE1AF68);
}

void sub_20BE1B018(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_BYTE *Alembic::AbcGeom::v12::OCameraSchema::getChildBoundsProperty@<X0>(Alembic::AbcGeom::v12::OCameraSchema *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _BYTE *result;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t *v28;
  int v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t *v34[2];
  void *__p[2];
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *v39;
  std::string v40;
  uint64_t v41[3];
  std::__shared_weak_count *v42;
  char *v43;
  const char *v44;

  v43 = (char *)this + 8;
  v44 = "OCameraSchema::getChildBoundsProperty()";
  if (*((char *)this + 135) < 0)
  {
    if (!*((_QWORD *)this + 15))
      goto LABEL_5;
  }
  else if (!*((_BYTE *)this + 135))
  {
LABEL_5:
    if (*((_QWORD *)this + 17))
      goto LABEL_33;
  }
  v4 = *((_QWORD *)this + 5);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v41[2] = v4;
  v42 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v37 = v4;
    v38 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v37 = v4;
    v38 = 0;
  }
  sub_20BDDC0E4(__p, ".childBnds");
  v9 = sub_20BE1B7F8((uint64_t)this + 56);
  v10 = *(std::__shared_weak_count **)(v9 + 72);
  v32 = *(_QWORD *)(v9 + 64);
  v33 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  LODWORD(v34[0]) = 4;
  v34[1] = &v32;
  LODWORD(v30) = 0;
  v31 = 0;
  LODWORD(v28) = 0;
  v29 = 0;
  LODWORD(v26) = 0;
  v27 = 0;
  sub_20BE1C558((uint64_t)&v39, &v37, (uint64_t)__p, v34, &v30, &v28, &v26);
  *((_DWORD *)this + 26) = (_DWORD)v39;
  std::string::operator=((std::string *)((char *)this + 112), &v40);
  sub_20BDE881C((_QWORD *)this + 17, v41);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v39);
  v13 = v33;
  if (v33)
  {
    v14 = (unint64_t *)&v33->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v36 < 0)
    operator delete(__p[0]);
  v16 = v38;
  if (v38)
  {
    v17 = (unint64_t *)&v38->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v42;
  if (v42)
  {
    v20 = (unint64_t *)&v42->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_33:
  *(_DWORD *)a2 = *((_DWORD *)this + 26);
  result = (_BYTE *)(a2 + 8);
  if (*((char *)this + 135) < 0)
  {
    result = sub_20BDDBFAC(result, *((void **)this + 14), *((_QWORD *)this + 15));
  }
  else
  {
    *(_OWORD *)result = *((_OWORD *)this + 7);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 16);
  }
  v23 = *((_QWORD *)this + 18);
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 17);
  *(_QWORD *)(a2 + 40) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  return result;
}

void sub_20BE1B298(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,void *a28)
{
  uint64_t v28;
  void *v31;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&a28);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a16);
  if (a25 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a26);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v28 - 80));
  v31 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v28 - 64, (uint64_t)v31);
  else
    sub_20BE02504(v28 - 64, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE1B22CLL);
}

void sub_20BE1B328(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE1B348(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_20BE1B4E8((void **)a1);
    if (a4 > 0x492492492492492)
      sub_20BDDF694();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v10;
    sub_20BE1B554((_QWORD *)a1, v11);
    v12 = sub_20BE1B5A8(v8, (uint64_t)a2, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    sub_20BE1B76C((uint64_t)&v17, a2, v13, (uint64_t)v9);
    v12 = sub_20BE1B5A8(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_20BE1B76C((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 56;
      sub_20BE168C0(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_20BE1B4D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20BE1B4E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20BE1B4E8(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        sub_20BE168C0((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_20BE1B554(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    sub_20BDDF694();
  result = (char *)sub_20BE16B34((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t sub_20BE1B5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20BE1B650(a1, v4, v6);
      v6 += 56;
      v4 = v12 + 56;
      v12 += 56;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20BE1B6E8((uint64_t)v9);
  return v4;
}

void sub_20BE1B63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE1B6E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE1B650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  __int128 v6;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v5 = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_20BDDBFAC(v5, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)v5 = v6;
  }
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return sub_20BDDF5DC((_QWORD *)(a2 + 32), *(const void **)(a3 + 32), *(_QWORD *)(a3 + 40), (uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3);
}

void sub_20BE1B6CC(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE1B6E8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BE1B71C((uint64_t *)a1);
  return a1;
}

void sub_20BE1B71C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 56;
      sub_20BE168C0(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t *sub_20BE1B76C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 5;
  do
  {
    v7 = v6 - 5;
    *(_DWORD *)a4 = *((_DWORD *)v6 - 10);
    std::string::operator=((std::string *)(a4 + 8), (const std::string *)(v6 - 4));
    if ((uint64_t *)a4 != v6 - 5)
      sub_20BDDF7E4((char *)(a4 + 32), (char *)*(v6 - 1), *v6, (*v6 - *(v6 - 1)) >> 3);
    a4 += 56;
    v6 += 7;
  }
  while (v7 + 7 != v5);
  return v5;
}

uint64_t sub_20BE1B7F8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20BE1B834(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  unsigned __int8 v11;
  _QWORD *v12;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  if ((v11 & 1) == 0)
  {
    {
      v12 = operator new(0x50uLL);
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      *((_DWORD *)v12 + 6) = 1;
      v12[6] = 0;
      v12[5] = 0;
      v12[4] = v12 + 5;
      *((_DWORD *)v12 + 14) = 127;
      *((_BYTE *)v12 + 60) = 0;
      v12[8] = 0;
      v12[9] = 0;
      Alembic::Abc::v12::OBasePropertyT<std::shared_ptr<Alembic::AbcCoreAbstract::v12::ScalarPropertyWriter>>::getHeader(void)const::g_phd = (uint64_t)v12;
    }
  }
  JUMPOUT(0x20BE1B824);
}

void sub_20BE1B8DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20BE1B910(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20BE1BA14((int *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE1B9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v9);
  _Unwind_Resume(a1);
}

void sub_20BE1BA14(int *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *exception;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  const void **v42;
  _QWORD *v43;
  _QWORD v44[37];
  int v45;
  const void **v46[3];
  uint64_t v47;
  std::__shared_weak_count *v48;
  unsigned int v49;
  uint64_t v50;

  v43 = 0;
  v44[0] = 0;
  v42 = (const void **)&v43;
  v44[35] = 0;
  v44[36] = 0;
  v45 = 2;
  sub_20BDEBF8C((uint64_t *)v46, &v42);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  sub_20BDE9D48((uint64_t)&v42, v43);
  sub_20BE02E30(a4, (uint64_t)&v45);
  sub_20BE02E30(a5, (uint64_t)&v45);
  sub_20BE02E30(a6, (uint64_t)&v45);
  sub_20BE02E30(a7, (uint64_t)&v45);
  *a1 = v45;
  v44[33] = a1;
  v44[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v42);
    sub_20BDDC1C8(v44, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_20BDDBF20(&v40, (__int128 *)__p);
    if (v39 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v35 = sub_20BDDC09C(exception, (uint64_t)&v40);
    __cxa_throw(v35, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v42, v46);
  v14 = v47;
  v40 = v47;
  v41 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = *a2;
  if (v14)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v17 + 24))(&v36);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v36 + 24))(__p);
    v18 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)__p[0] + 48))(__p[0], v14);
    v19 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v20 = (unint64_t *)((char *)__p[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v37;
    if (v37)
    {
      v23 = (unint64_t *)&v37->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = *a2;
  }
  else
  {
    v18 = v49;
  }
  v36 = 0x10000000CLL;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const void ***, uint64_t *, uint64_t))(*(_QWORD *)v17 + 104))(__p, v17, a3, &v42, &v36, v18);
  sub_20BDE82DC((uint64_t)(a1 + 8), (__int128 *)__p);
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v26 = (unint64_t *)((char *)__p[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_20BDE9D48((uint64_t)&v42, v43);
  v31 = v48;
  if (v48)
  {
    v32 = (unint64_t *)&v48->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  sub_20BDE9D48((uint64_t)v46, v46[1]);
}

void sub_20BE1BD64(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  void *v11;
  std::exception v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  v11 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v7 + 32));
  MEMORY[0x212B929D0](v7 + 8, "");
  if (a2 == 2)
    sub_20BE02570(v8 - 176, (uint64_t)v11);
  else
    sub_20BE02504(v8 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE1BC8CLL);
}

void sub_20BE1BE48(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 144);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE1BE9C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *__p;
  _BYTE *v8;

  v6 = a3;
  sub_20BDE8894(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x10000000CLL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v8, (v8 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20BE1BF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE1BF30(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20BE1C034((int *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE1C018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v9);
  _Unwind_Resume(a1);
}

void sub_20BE1C034(int *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *exception;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  const void **v42;
  _QWORD *v43;
  _QWORD v44[37];
  int v45;
  const void **v46[3];
  uint64_t v47;
  std::__shared_weak_count *v48;
  unsigned int v49;
  uint64_t v50;

  v43 = 0;
  v44[0] = 0;
  v42 = (const void **)&v43;
  v44[35] = 0;
  v44[36] = 0;
  v45 = 2;
  sub_20BDEBF8C((uint64_t *)v46, &v42);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  sub_20BDE9D48((uint64_t)&v42, v43);
  sub_20BE02E30(a4, (uint64_t)&v45);
  sub_20BE02E30(a5, (uint64_t)&v45);
  sub_20BE02E30(a6, (uint64_t)&v45);
  sub_20BE02E30(a7, (uint64_t)&v45);
  *a1 = v45;
  v44[33] = a1;
  v44[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v42);
    sub_20BDDC1C8(v44, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_20BDDBF20(&v40, (__int128 *)__p);
    if (v39 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v35 = sub_20BDDC09C(exception, (uint64_t)&v40);
    __cxa_throw(v35, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v42, v46);
  v14 = v47;
  v40 = v47;
  v41 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = *a2;
  if (v14)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v17 + 24))(&v36);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v36 + 24))(__p);
    v18 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)__p[0] + 48))(__p[0], v14);
    v19 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v20 = (unint64_t *)((char *)__p[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v37;
    if (v37)
    {
      v23 = (unint64_t *)&v37->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = *a2;
  }
  else
  {
    v18 = v49;
  }
  v36 = 0x10000000BLL;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const void ***, uint64_t *, uint64_t))(*(_QWORD *)v17 + 104))(__p, v17, a3, &v42, &v36, v18);
  sub_20BDE82DC((uint64_t)(a1 + 8), (__int128 *)__p);
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v26 = (unint64_t *)((char *)__p[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_20BDE9D48((uint64_t)&v42, v43);
  v31 = v48;
  if (v48)
  {
    v32 = (unint64_t *)&v48->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  sub_20BDE9D48((uint64_t)v46, v46[1]);
}

void sub_20BE1C384(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  void *v11;
  std::exception v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  v11 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v7 + 32));
  MEMORY[0x212B929D0](v7 + 8, "");
  if (a2 == 2)
    sub_20BE02570(v8 - 176, (uint64_t)v11);
  else
    sub_20BE02504(v8 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE1C2ACLL);
}

void sub_20BE1C468(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 144);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE1C4BC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *__p;
  _BYTE *v8;

  v6 = a3;
  sub_20BDE8894(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x10000000BLL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v8, (v8 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20BE1C534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE1C558(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20BE14264((int *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE1C640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v9);
  _Unwind_Resume(a1);
}

_QWORD *Alembic::AbcGeom::v12::GetBasisNameFromBasisType@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 - 1) > 4)
    v2 = "none";
  else
    v2 = off_24C519320[a1 - 1];
  return sub_20BDDC0E4(a2, v2);
}

uint64_t Alembic::AbcGeom::v12::GetStepFromBasisType(int a1)
{
  if ((a1 - 1) > 4)
    return 1;
  else
    return dword_20CA52268[a1 - 1];
}

uint64_t Alembic::AbcGeom::v12::ICurvesSchema::getTopologyVariance(Alembic::AbcGeom::v12::ICurvesSchema *this)
{
  if (!Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::ICurvesSchema *)((char *)this + 248)))
    goto LABEL_11;
  if (*((char *)this + 927) < 0)
  {
    if (!*((_QWORD *)this + 114))
    {
LABEL_6:
      if (*((_QWORD *)this + 116)
        && !Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::ICurvesSchema *)((char *)this + 896)))
      {
        goto LABEL_11;
      }
    }
  }
  else if (!*((_BYTE *)this + 927))
  {
    goto LABEL_6;
  }
  if (Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::ICurvesSchema *)((char *)this + 344))
    && (Alembic::Abc::v12::IScalarProperty::isConstant((Alembic::AbcGeom::v12::ICurvesSchema *)((char *)this + 392)) & 1) != 0)
  {
    return 0;
  }
LABEL_11:
  if (Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::ICurvesSchema *)((char *)this + 344))
    && (Alembic::Abc::v12::IScalarProperty::isConstant((Alembic::AbcGeom::v12::ICurvesSchema *)((char *)this + 392)) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return 2;
  }
}

void sub_20BE1C790(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::ICurvesSchema::init(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t PropertyHeader;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  void *v91;
  std::string v92;
  uint64_t v93[2];
  void *v94;
  std::string v95;
  uint64_t v96[2];
  int v97;
  std::string v98;
  uint64_t v99[2];
  char v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t *v107;
  int v108;
  uint64_t *v109;
  int v110;
  void *__p[2];
  char v112;
  int v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  void *v119[2];
  char v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126[4];
  std::__shared_weak_count *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;

  v6 = a1 + 8;
  v130 = a1 + 8;
  v131 = "ICurvesSchema::init()";
  *(_OWORD *)&v92.__r_.__value_.__l.__data_ = 0uLL;
  v91 = &v92;
  v125 = 2;
  v123 = 0;
  v124 = 0;
  sub_20BDEBF8C(v126, (const void ***)&v91);
  v126[3] = 0;
  v127 = 0;
  v128 = 0;
  v129 = 1;
  sub_20BDE9D48((uint64_t)&v91, v92.__r_.__value_.__l.__data_);
  sub_20BE02E30(a2, (uint64_t)&v125);
  sub_20BE02E30(a3, (uint64_t)&v125);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(std::__shared_weak_count **)(a1 + 48);
  v121 = v7;
  v122 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v117 = v7;
    v118 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v117 = v7;
    v118 = 0;
  }
  v115 = 0;
  v116 = 0;
  v113 = 0;
  v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v117, &v115, &v113);
  sub_20BDDC0E4(__p, "P");
  LODWORD(v109) = 5;
  v110 = 1;
  LODWORD(v107) = 1;
  v108 = v125;
  sub_20BE1DFF8((uint64_t)&v91, (int *)v119, (uint64_t)__p, &v109, &v107);
  *(_DWORD *)(a1 + 248) = (_DWORD)v91;
  std::string::operator=((std::string *)(a1 + 256), &v92);
  sub_20BDE881C((_QWORD *)(a1 + 280), v93);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v91);
  if (v112 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  v12 = v118;
  if (v118)
  {
    v13 = (unint64_t *)&v118->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v105 = v121;
  v106 = v122;
  if (v122)
  {
    v15 = (unint64_t *)&v122->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v115 = 0;
  v116 = 0;
  v113 = 0;
  v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v105, &v115, &v113);
  sub_20BDDC0E4(__p, "nVertices");
  sub_20BE1E6DC((uint64_t)&v91, (int *)v119, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 344) = (_DWORD)v91;
  std::string::operator=((std::string *)(a1 + 352), &v92);
  sub_20BDE881C((_QWORD *)(a1 + 376), v93);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v91);
  if (v112 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  v17 = v106;
  if (v106)
  {
    v18 = (unint64_t *)&v106->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v103 = v121;
  v104 = v122;
  if (v122)
  {
    v20 = (unint64_t *)&v122->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v115 = 0;
  v116 = 0;
  v113 = 0;
  v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v103, &v115, &v113);
  sub_20BDDC0E4(__p, "curveBasisAndType");
  LODWORD(v109) = 1;
  v110 = v125;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(&v91, v119, __p, &v109);
  *(_DWORD *)(a1 + 392) = (_DWORD)v91;
  std::string::operator=((std::string *)(a1 + 400), &v92);
  sub_20BDE881C((_QWORD *)(a1 + 424), v93);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v91);
  if (v112 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  v22 = v104;
  if (v104)
  {
    v23 = (unint64_t *)&v104->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  sub_20BDDC0E4(&v91, "w");
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v26 = PropertyHeader;
  if (v92.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v91);
    if (!v26)
      goto LABEL_49;
  }
  else if (!PropertyHeader)
  {
    goto LABEL_49;
  }
  v101 = v121;
  v102 = v122;
  if (v122)
  {
    v27 = (unint64_t *)&v122->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v115 = 0;
  v116 = 0;
  v113 = 0;
  v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v101, &v115, &v113);
  sub_20BDDC0E4(__p, "w");
  sub_20BE1ED68((uint64_t)&v91, (int *)v119, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 896) = (_DWORD)v91;
  std::string::operator=((std::string *)(a1 + 904), &v92);
  sub_20BDE881C((_QWORD *)(a1 + 928), v93);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v91);
  if (v112 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  v29 = v102;
  if (v102)
  {
    v30 = (unint64_t *)&v102->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
LABEL_49:
  sub_20BDDC0E4(&v91, "uv");
  v32 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v33 = v32;
  if (v92.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v91);
    if (!v33)
      goto LABEL_63;
  }
  else if (!v32)
  {
    goto LABEL_63;
  }
  v89 = v121;
  v90 = v122;
  if (v122)
  {
    v34 = (unint64_t *)&v122->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  sub_20BDDC0E4(v119, "uv");
  sub_20BE1F3F4((uint64_t)&v91, &v89, (uint64_t)v119, a2, a3);
  *(_DWORD *)(a1 + 592) = (_DWORD)v91;
  std::string::operator=((std::string *)(a1 + 600), &v92);
  sub_20BDE881C((_QWORD *)(a1 + 624), v93);
  *(_DWORD *)(a1 + 640) = (_DWORD)v94;
  std::string::operator=((std::string *)(a1 + 648), &v95);
  sub_20BDE881C((_QWORD *)(a1 + 672), v96);
  *(_DWORD *)(a1 + 688) = v97;
  std::string::operator=((std::string *)(a1 + 696), &v98);
  sub_20BDE881C((_QWORD *)(a1 + 720), v99);
  *(_BYTE *)(a1 + 736) = v100;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v97);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v94);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v91);
  if (v120 < 0)
    operator delete(v119[0]);
  v36 = v90;
  if (v90)
  {
    v37 = (unint64_t *)&v90->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
LABEL_63:
  sub_20BDDC0E4(&v91, "N");
  v39 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v40 = v39;
  if (v92.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v91);
    if (!v40)
      goto LABEL_77;
  }
  else if (!v39)
  {
    goto LABEL_77;
  }
  v87 = v121;
  v88 = v122;
  if (v122)
  {
    v41 = (unint64_t *)&v122->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  sub_20BDDC0E4(v119, "N");
  sub_20BE208E8((uint64_t)&v91, &v87, (uint64_t)v119, a2, a3);
  *(_DWORD *)(a1 + 744) = (_DWORD)v91;
  std::string::operator=((std::string *)(a1 + 752), &v92);
  sub_20BDE881C((_QWORD *)(a1 + 776), v93);
  *(_DWORD *)(a1 + 792) = (_DWORD)v94;
  std::string::operator=((std::string *)(a1 + 800), &v95);
  sub_20BDE881C((_QWORD *)(a1 + 824), v96);
  *(_DWORD *)(a1 + 840) = v97;
  std::string::operator=((std::string *)(a1 + 848), &v98);
  sub_20BDE881C((_QWORD *)(a1 + 872), v99);
  *(_BYTE *)(a1 + 888) = v100;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v97);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v94);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v91);
  if (v120 < 0)
    operator delete(v119[0]);
  v43 = v88;
  if (v88)
  {
    v44 = (unint64_t *)&v88->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
LABEL_77:
  sub_20BDDC0E4(&v91, "width");
  v46 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v47 = v46;
  if (v92.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v91);
    if (!v47)
      goto LABEL_91;
  }
  else if (!v46)
  {
    goto LABEL_91;
  }
  v85 = v121;
  v86 = v122;
  if (v122)
  {
    v48 = (unint64_t *)&v122->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  sub_20BDDC0E4(v119, "width");
  sub_20BE21844((uint64_t)&v91, &v85, (uint64_t)v119, a2, a3);
  *(_DWORD *)(a1 + 440) = (_DWORD)v91;
  std::string::operator=((std::string *)(a1 + 448), &v92);
  sub_20BDE881C((_QWORD *)(a1 + 472), v93);
  *(_DWORD *)(a1 + 488) = (_DWORD)v94;
  std::string::operator=((std::string *)(a1 + 496), &v95);
  sub_20BDE881C((_QWORD *)(a1 + 520), v96);
  *(_DWORD *)(a1 + 536) = v97;
  std::string::operator=((std::string *)(a1 + 544), &v98);
  sub_20BDE881C((_QWORD *)(a1 + 568), v99);
  *(_BYTE *)(a1 + 584) = v100;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v97);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v94);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v91);
  if (v120 < 0)
    operator delete(v119[0]);
  v50 = v86;
  if (v86)
  {
    v51 = (unint64_t *)&v86->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
LABEL_91:
  sub_20BDDC0E4(&v91, ".velocities");
  v53 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v54 = v53;
  if (v92.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v91);
    if (!v54)
      goto LABEL_105;
  }
  else if (!v53)
  {
    goto LABEL_105;
  }
  v83 = v121;
  v84 = v122;
  if (v122)
  {
    v55 = (unint64_t *)&v122->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  v115 = 0;
  v116 = 0;
  v113 = 0;
  v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v83, &v115, &v113);
  sub_20BDDC0E4(__p, ".velocities");
  sub_20BE220BC((uint64_t)&v91, (int *)v119, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 296) = (_DWORD)v91;
  std::string::operator=((std::string *)(a1 + 304), &v92);
  sub_20BDE881C((_QWORD *)(a1 + 328), v93);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v91);
  if (v112 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  v57 = v84;
  if (v84)
  {
    v58 = (unint64_t *)&v84->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
LABEL_105:
  sub_20BDDC0E4(&v91, ".orders");
  v60 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v61 = v60;
  if (v92.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v91);
    if (!v61)
      goto LABEL_119;
  }
  else if (!v60)
  {
    goto LABEL_119;
  }
  v81 = v121;
  v82 = v122;
  if (v122)
  {
    v62 = (unint64_t *)&v122->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v115 = 0;
  v116 = 0;
  v113 = 0;
  v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v81, &v115, &v113);
  sub_20BDDC0E4(__p, ".orders");
  sub_20BE227A0((uint64_t)&v91, (int *)v119, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 944) = (_DWORD)v91;
  std::string::operator=((std::string *)(a1 + 952), &v92);
  sub_20BDE881C((_QWORD *)(a1 + 976), v93);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v91);
  if (v112 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  v64 = v82;
  if (v82)
  {
    v65 = (unint64_t *)&v82->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
LABEL_119:
  sub_20BDDC0E4(&v91, ".knots");
  v67 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  if (v92.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v91);
  v68 = v122;
  if (v67)
  {
    v79 = v121;
    v80 = v122;
    if (v122)
    {
      v69 = (unint64_t *)&v122->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v115 = 0;
    v116 = 0;
    v113 = 0;
    v114 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v79, &v115, &v113);
    sub_20BDDC0E4(__p, ".knots");
    sub_20BE1ED68((uint64_t)&v91, (int *)v119, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 992) = (_DWORD)v91;
    std::string::operator=((std::string *)(a1 + 1000), &v92);
    sub_20BDE881C((_QWORD *)(a1 + 1024), v93);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v91);
    if (v112 < 0)
      operator delete(__p[0]);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
    v71 = v80;
    if (v80)
    {
      v72 = (unint64_t *)&v80->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v68 = v122;
  }
  if (v68)
  {
    v74 = (unint64_t *)&v68->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v76 = v127;
  if (v127)
  {
    v77 = (unint64_t *)&v127->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  sub_20BDE9D48((uint64_t)v126, (_QWORD *)v126[1]);
}

void sub_20BE1D4AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;
  uint64_t v59;
  void *v62;
  void (*v63)(uint64_t);
  uint64_t v64;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&a21);
  if (a58 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v59 - 224));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v59 - 176));
  sub_20BE02EB0(v59 - 144);
  v62 = __cxa_begin_catch(a1);
  v63 = *(void (**)(uint64_t))(*(_QWORD *)v58 + 16);
  if (a2 == 2)
  {
    v64 = (uint64_t)v62;
    v63(v58);
    sub_20BE02570(v59 - 80, v64);
  }
  else
  {
    v63(v58);
    sub_20BE02504(v59 - 80, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE1D490);
}

void sub_20BE1D890(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE1D8B0()
{
  JUMPOUT(0x20BE1D838);
}

void sub_20BE1D8BC(void **a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 12));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 6);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1);
}

void Alembic::AbcGeom::v12::ICurvesSchema::get(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t (*v9)();
  uint64_t (*v10)();
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t (*v13)();
  Alembic::Abc::v12::IArrayProperty *v14;
  _BYTE v15[4];
  uint64_t *v16;
  const char *v17;

  v6 = *a1;
  v16 = a1 + 1;
  v17 = "ICurvesSchema::get()";
  if (((*(uint64_t (**)(void))(v6 + 24))() & 1) == 0)
    return;
  sub_20BE1DB98((uint64_t)(a1 + 31), (uint64_t)a2, a3);
  sub_20BE1DC78((uint64_t)(a1 + 43), (uint64_t)(a2 + 24), a3);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)(a1 + 49), (uint64_t)v15, a3, 4);
  v7 = v15[1];
  v8 = v15[2];
  a2[36] = v15[0];
  a2[37] = v8;
  a2[38] = v7;
  if (*((char *)a1 + 927) < 0)
  {
    if (a1[114])
      goto LABEL_4;
  }
  else if (*((_BYTE *)a1 + 927))
  {
LABEL_4:
    v9 = 0;
    goto LABEL_9;
  }
  if (a1[116])
    v9 = nullsub_5;
  else
    v9 = 0;
LABEL_9:
  if (v9)
    sub_20BE1DD58((uint64_t)(a1 + 112), (uint64_t)(a2 + 8), a3);
  if (*((char *)a1 + 975) < 0)
  {
    if (a1[120])
      goto LABEL_13;
  }
  else if (*((_BYTE *)a1 + 975))
  {
LABEL_13:
    v10 = 0;
    goto LABEL_18;
  }
  if (a1[122])
    v10 = nullsub_5;
  else
    v10 = 0;
LABEL_18:
  if (v10)
    sub_20BE1DE38((uint64_t)(a1 + 118), (uint64_t)(a2 + 28), a3);
  if (*((char *)a1 + 1023) < 0)
  {
    if (a1[126])
      goto LABEL_22;
  }
  else if (*((_BYTE *)a1 + 1023))
  {
LABEL_22:
    v11 = 0;
    goto LABEL_27;
  }
  if (a1[128])
    v11 = nullsub_5;
  else
    v11 = 0;
LABEL_27:
  if (v11)
    sub_20BE1DD58((uint64_t)(a1 + 124), (uint64_t)(a2 + 32), a3);
  if (*((char *)a1 + 87) < 0)
  {
    if (a1[9])
      goto LABEL_31;
  }
  else if (*((_BYTE *)a1 + 87))
  {
LABEL_31:
    v12 = 0;
    goto LABEL_36;
  }
  if (a1[11])
    v12 = nullsub_4;
  else
    v12 = 0;
LABEL_36:
  if (v12)
    Alembic::Abc::v12::IScalarProperty::get((uint64_t)(a1 + 7), (uint64_t)(a2 + 12), a3, 48);
  if (*((char *)a1 + 327) < 0)
  {
    if (a1[39])
      goto LABEL_40;
  }
  else if (*((_BYTE *)a1 + 327))
  {
LABEL_40:
    v13 = 0;
    goto LABEL_45;
  }
  if (a1[41])
    v13 = nullsub_5;
  else
    v13 = 0;
LABEL_45:
  if (v13)
  {
    v14 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 37);
    if (Alembic::Abc::v12::IArrayProperty::getNumSamples(v14))
      sub_20BE1DF18((uint64_t)v14, (uint64_t)(a2 + 4), a3);
  }
}

void sub_20BE1DB40(void *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  v5 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)va, (uint64_t)v5);
  else
    sub_20BE02504((uint64_t)va, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE1DB2CLL);
}

void sub_20BE1DB78(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE1DB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  v13 = 0uLL;
  Alembic::Abc::v12::IArrayProperty::get(a1, (uint64_t)&v13, a3);
  v12 = v13;
  if (*((_QWORD *)&v13 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20BDE82DC(a2, &v12);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20BE1DC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20BE1DC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  v13 = 0uLL;
  Alembic::Abc::v12::IArrayProperty::get(a1, (uint64_t)&v13, a3);
  v12 = v13;
  if (*((_QWORD *)&v13 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20BDE82DC(a2, &v12);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20BE1DD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20BE1DD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  v13 = 0uLL;
  Alembic::Abc::v12::IArrayProperty::get(a1, (uint64_t)&v13, a3);
  v12 = v13;
  if (*((_QWORD *)&v13 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20BDE82DC(a2, &v12);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20BE1DE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20BE1DE38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  v13 = 0uLL;
  Alembic::Abc::v12::IArrayProperty::get(a1, (uint64_t)&v13, a3);
  v12 = v13;
  if (*((_QWORD *)&v13 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20BDE82DC(a2, &v12);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20BE1DF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20BE1DF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  v13 = 0uLL;
  Alembic::Abc::v12::IArrayProperty::get(a1, (uint64_t)&v13, a3);
  v12 = v13;
  if (*((_QWORD *)&v13 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20BDE82DC(a2, &v12);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20BE1DFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE1DFF8(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void **v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *exception;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50[2];
  char v51;
  void *__p[2];
  unsigned __int8 v53;
  __int128 v54;
  _QWORD v55[34];
  std::__shared_weak_count *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62[4];
  std::__shared_weak_count *v63;
  int v64;
  uint64_t v65;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *a2;
  *((_QWORD *)&v54 + 1) = 0;
  v55[0] = 0;
  *(_QWORD *)&v54 = (char *)&v54 + 8;
  v59 = 0;
  v60 = 0;
  v61 = v10;
  sub_20BDEBF8C(v62, (const void ***)&v54);
  v62[3] = 0;
  v63 = 0;
  v64 = 0;
  v65 = 1;
  sub_20BDE9D48((uint64_t)&v54, *((_QWORD **)&v54 + 1));
  sub_20BE02E30(a4, (uint64_t)&v61);
  sub_20BE02E30(a5, (uint64_t)&v61);
  *(_DWORD *)a1 = v61;
  v57 = a1;
  v58 = "ITypedArrayProperty::ITypedArrayProperty()";
  v12 = *((_QWORD *)a2 + 4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v55[33] = v12;
  v56 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v40 = sub_20BDDC1C8(v55, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v40, (uint64_t)"ITypedArrayProperty ctor", 24);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v42 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v42, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  v16 = v15;
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v43 = sub_20BDDC1C8(v55, (uint64_t)"Nonexistent array property: ", 28);
    v44 = *(char *)(a3 + 23);
    if (v44 >= 0)
      v45 = a3;
    else
      v45 = *(_QWORD *)a3;
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(a3 + 23);
    else
      v46 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v43, v45, v46);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v47 = __cxa_allocate_exception(0x20uLL);
    v48 = sub_20BDDC09C(v47, (uint64_t)__p);
    __cxa_throw(v48, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v18 = *(_DWORD *)(v15 + 56) == 10 && *(_BYTE *)(v15 + 60) == 3 && *(_DWORD *)(v15 + 24) == 2;
  if (!v18 || (sub_20BE1E5E8(v15 + 32, v65) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v29 = sub_20BDDC1C8(v55, (uint64_t)"Incorrect match of header datatype: ", 36);
    v30 = sub_20BDE00F4(v29, (int *)(v16 + 56));
    v31 = sub_20BDDC1C8(v30, (uint64_t)" to expected: ", 14);
    v49 = 0x30000000ALL;
    v32 = sub_20BDE00F4(v31, (int *)&v49);
    v33 = sub_20BDDC1C8(v32, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_20BDDC0E4(v50, "interpretation");
    sub_20BE01E1C(v16 + 32, (const void **)v50, __p);
    if ((v53 & 0x80u) == 0)
      v34 = __p;
    else
      v34 = (void **)__p[0];
    if ((v53 & 0x80u) == 0)
      v35 = v53;
    else
      v35 = (uint64_t)__p[1];
    v36 = sub_20BDDC1C8(v33, (uint64_t)v34, v35);
    v37 = sub_20BDDC1C8(v36, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v37, (uint64_t)"point", 5);
    if ((char)v53 < 0)
      operator delete(__p[0]);
    if (v51 < 0)
      operator delete(v50[0]);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v38 = __cxa_allocate_exception(0x20uLL);
    v39 = sub_20BDDC09C(v38, (uint64_t)__p);
    __cxa_throw(v39, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 96))(&v54, v12, a3);
  sub_20BDE82DC(a1 + 32, &v54);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v56;
  if (v56)
  {
    v23 = (unint64_t *)&v56->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v63;
  if (v63)
  {
    v26 = (unint64_t *)&v63->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  sub_20BDE9D48((uint64_t)v62, (_QWORD *)v62[1]);
  return a1;
}

void sub_20BE1E484(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 192));
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v26);
  MEMORY[0x212B929D0](v25, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 176, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE1E1D0);
}

void sub_20BE1E5A8()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 144);
  JUMPOUT(0x20BE1E5D8);
}

uint64_t sub_20BE1E5E8(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  if (a2)
    return 1;
  sub_20BDDC0E4(__p, "interpretation");
  sub_20BE01E1C(a1, (const void **)__p, v9);
  if (v10 < 0)
  {
    v2 = v9[1] == (void *)5 && *(_DWORD *)v9[0] == 1852403568 && *((_BYTE *)v9[0] + 4) == 116;
    operator delete(v9[0]);
  }
  else
  {
    v2 = v10 == 5 && LODWORD(v9[0]) == 1852403568 && BYTE4(v9[0]) == 116;
  }
  if (v8 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE1E6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE1E6DC(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *exception;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49[2];
  char v50;
  void *__p[2];
  unsigned __int8 v52;
  __int128 v53;
  _QWORD v54[34];
  std::__shared_weak_count *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61[4];
  std::__shared_weak_count *v62;
  int v63;
  uint64_t v64;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *a2;
  *((_QWORD *)&v53 + 1) = 0;
  v54[0] = 0;
  *(_QWORD *)&v53 = (char *)&v53 + 8;
  v58 = 0;
  v59 = 0;
  v60 = v10;
  sub_20BDEBF8C(v61, (const void ***)&v53);
  v61[3] = 0;
  v62 = 0;
  v63 = 0;
  v64 = 1;
  sub_20BDE9D48((uint64_t)&v53, *((_QWORD **)&v53 + 1));
  sub_20BE02E30(a4, (uint64_t)&v60);
  sub_20BE02E30(a5, (uint64_t)&v60);
  *(_DWORD *)a1 = v60;
  v56 = a1;
  v57 = "ITypedArrayProperty::ITypedArrayProperty()";
  v12 = *((_QWORD *)a2 + 4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v54[33] = v12;
  v55 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v39 = sub_20BDDC1C8(v54, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v39, (uint64_t)"ITypedArrayProperty ctor", 24);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v41 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v41, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  v16 = v15;
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v42 = sub_20BDDC1C8(v54, (uint64_t)"Nonexistent array property: ", 28);
    v43 = *(char *)(a3 + 23);
    if (v43 >= 0)
      v44 = a3;
    else
      v44 = *(_QWORD *)a3;
    if (v43 >= 0)
      v45 = *(unsigned __int8 *)(a3 + 23);
    else
      v45 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v42, v44, v45);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    v46 = __cxa_allocate_exception(0x20uLL);
    v47 = sub_20BDDC09C(v46, (uint64_t)__p);
    __cxa_throw(v47, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v17 = *(_DWORD *)(v15 + 56) == 6 && *(_DWORD *)(v15 + 24) == 2;
  if (!v17 || (sub_20BE1ECC4(v15 + 32, v64) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v28 = sub_20BDDC1C8(v54, (uint64_t)"Incorrect match of header datatype: ", 36);
    v29 = sub_20BDE00F4(v28, (int *)(v16 + 56));
    v30 = sub_20BDDC1C8(v29, (uint64_t)" to expected: ", 14);
    v48 = 0x100000006;
    v31 = sub_20BDE00F4(v30, (int *)&v48);
    v32 = sub_20BDDC1C8(v31, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_20BDDC0E4(v49, "interpretation");
    sub_20BE01E1C(v16 + 32, (const void **)v49, __p);
    if ((v52 & 0x80u) == 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if ((v52 & 0x80u) == 0)
      v34 = v52;
    else
      v34 = (uint64_t)__p[1];
    v35 = sub_20BDDC1C8(v32, (uint64_t)v33, v34);
    v36 = sub_20BDDC1C8(v35, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v36, (uint64_t)"", 0);
    if ((char)v52 < 0)
      operator delete(__p[0]);
    if (v50 < 0)
      operator delete(v49[0]);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    v37 = __cxa_allocate_exception(0x20uLL);
    v38 = sub_20BDDC09C(v37, (uint64_t)__p);
    __cxa_throw(v38, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 96))(&v53, v12, a3);
  sub_20BDE82DC(a1 + 32, &v53);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v55;
  if (v55)
  {
    v22 = (unint64_t *)&v55->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v62;
  if (v62)
  {
    v25 = (unint64_t *)&v62->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  sub_20BDE9D48((uint64_t)v61, (_QWORD *)v61[1]);
  return a1;
}

void sub_20BE1EB60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 192));
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v26);
  MEMORY[0x212B929D0](v25, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 176, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE1E8ACLL);
}

void sub_20BE1EC84()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 144);
  JUMPOUT(0x20BE1ECB4);
}

uint64_t sub_20BE1ECC4(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (a2)
    return 1;
  sub_20BDDC0E4(__p, "interpretation");
  sub_20BE01E1C(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    v2 = v7[1] == 0;
    operator delete(v7[0]);
  }
  else
  {
    v2 = v8 == 0;
  }
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE1ED4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE1ED68(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *exception;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49[2];
  char v50;
  void *__p[2];
  unsigned __int8 v52;
  __int128 v53;
  _QWORD v54[34];
  std::__shared_weak_count *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61[4];
  std::__shared_weak_count *v62;
  int v63;
  uint64_t v64;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *a2;
  *((_QWORD *)&v53 + 1) = 0;
  v54[0] = 0;
  *(_QWORD *)&v53 = (char *)&v53 + 8;
  v58 = 0;
  v59 = 0;
  v60 = v10;
  sub_20BDEBF8C(v61, (const void ***)&v53);
  v61[3] = 0;
  v62 = 0;
  v63 = 0;
  v64 = 1;
  sub_20BDE9D48((uint64_t)&v53, *((_QWORD **)&v53 + 1));
  sub_20BE02E30(a4, (uint64_t)&v60);
  sub_20BE02E30(a5, (uint64_t)&v60);
  *(_DWORD *)a1 = v60;
  v56 = a1;
  v57 = "ITypedArrayProperty::ITypedArrayProperty()";
  v12 = *((_QWORD *)a2 + 4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v54[33] = v12;
  v55 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v39 = sub_20BDDC1C8(v54, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v39, (uint64_t)"ITypedArrayProperty ctor", 24);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v41 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v41, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  v16 = v15;
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v42 = sub_20BDDC1C8(v54, (uint64_t)"Nonexistent array property: ", 28);
    v43 = *(char *)(a3 + 23);
    if (v43 >= 0)
      v44 = a3;
    else
      v44 = *(_QWORD *)a3;
    if (v43 >= 0)
      v45 = *(unsigned __int8 *)(a3 + 23);
    else
      v45 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v42, v44, v45);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    v46 = __cxa_allocate_exception(0x20uLL);
    v47 = sub_20BDDC09C(v46, (uint64_t)__p);
    __cxa_throw(v47, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v17 = *(_DWORD *)(v15 + 56) == 10 && *(_DWORD *)(v15 + 24) == 2;
  if (!v17 || (sub_20BE1F350(v15 + 32, v64) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v28 = sub_20BDDC1C8(v54, (uint64_t)"Incorrect match of header datatype: ", 36);
    v29 = sub_20BDE00F4(v28, (int *)(v16 + 56));
    v30 = sub_20BDDC1C8(v29, (uint64_t)" to expected: ", 14);
    v48 = 0x10000000ALL;
    v31 = sub_20BDE00F4(v30, (int *)&v48);
    v32 = sub_20BDDC1C8(v31, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_20BDDC0E4(v49, "interpretation");
    sub_20BE01E1C(v16 + 32, (const void **)v49, __p);
    if ((v52 & 0x80u) == 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if ((v52 & 0x80u) == 0)
      v34 = v52;
    else
      v34 = (uint64_t)__p[1];
    v35 = sub_20BDDC1C8(v32, (uint64_t)v33, v34);
    v36 = sub_20BDDC1C8(v35, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v36, (uint64_t)"", 0);
    if ((char)v52 < 0)
      operator delete(__p[0]);
    if (v50 < 0)
      operator delete(v49[0]);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    v37 = __cxa_allocate_exception(0x20uLL);
    v38 = sub_20BDDC09C(v37, (uint64_t)__p);
    __cxa_throw(v38, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 96))(&v53, v12, a3);
  sub_20BDE82DC(a1 + 32, &v53);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v55;
  if (v55)
  {
    v22 = (unint64_t *)&v55->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v62;
  if (v62)
  {
    v25 = (unint64_t *)&v62->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  sub_20BDE9D48((uint64_t)v61, (_QWORD *)v61[1]);
  return a1;
}

void sub_20BE1F1EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 192));
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v26);
  MEMORY[0x212B929D0](v25, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 176, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE1EF38);
}

void sub_20BE1F310()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 144);
  JUMPOUT(0x20BE1F340);
}

uint64_t sub_20BE1F350(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (a2)
    return 1;
  sub_20BDDC0E4(__p, "interpretation");
  sub_20BE01E1C(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    v2 = v7[1] == 0;
    operator delete(v7[0]);
  }
  else
  {
    v2 = v8 == 0;
  }
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE1F3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE1F3F4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  std::string *v10;
  _QWORD *v11;
  _QWORD *v12;
  std::string *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v46;
  _QWORD *exception;
  _QWORD *v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  std::string *v61;
  int *v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  _DWORD v67[4];
  int v68;
  int v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  void *__p[2];
  char v73;
  void *v74[2];
  char v75;
  std::string *v76;
  std::string v77;
  uint64_t v78[32];
  std::__shared_weak_count *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  int v86;
  uint64_t v87[4];
  std::__shared_weak_count *v88;
  int v89;
  uint64_t v90;

  *(_DWORD *)a1 = 2;
  v10 = (std::string *)(a1 + 8);
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_DWORD *)(a1 + 48) = 2;
  *(_QWORD *)(a1 + 32) = 0;
  v11 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  v63 = (_DWORD *)(a1 + 48);
  v61 = (std::string *)(a1 + 56);
  v64 = a1;
  sub_20BDDC0E4((_QWORD *)(a1 + 56), "");
  *(_DWORD *)(a1 + 96) = 2;
  *(_QWORD *)(a1 + 80) = 0;
  v12 = (_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 88) = 0;
  v62 = (int *)(a1 + 96);
  v13 = (std::string *)(a1 + 104);
  sub_20BDDC0E4((_QWORD *)(a1 + 104), "");
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v14 = (_QWORD *)(a1 + 128);
  v15 = (std::__shared_weak_count *)a2[1];
  v84 = *a2;
  v85 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  *(_OWORD *)&v77.__r_.__value_.__l.__data_ = 0uLL;
  v76 = &v77;
  v82 = 0;
  v83 = 0;
  v86 = 2;
  sub_20BDEBF8C(v87, (const void ***)&v76);
  v87[3] = 0;
  v88 = 0;
  v89 = 0;
  v90 = 1;
  sub_20BDE9D48((uint64_t)&v76, v77.__r_.__value_.__l.__data_);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sub_20BE02E30(a4, (uint64_t)&v86);
  sub_20BE02E30(a5, (uint64_t)&v86);
  *(_DWORD *)v64 = v86;
  v80 = v64;
  v81 = "ITypedGeomParam::ITypedGeomParam()";
  v20 = *a2;
  v21 = (std::__shared_weak_count *)a2[1];
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v78[31] = v20;
  v79 = v21;
  if (!v20)
  {
    sub_20BDDBD68((uint64_t)&v76);
    v46 = sub_20BDDC1C8(&v77.__r_.__value_.__l.__size_, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v46, (uint64_t)"ITypedGeomParam ctor", 20);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v74);
    if (v75 < 0)
      operator delete(v74[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v48 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v48, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 80))(v20, a3);
  if (!v24)
  {
    sub_20BDDBD68((uint64_t)&v76);
    v49 = sub_20BDDC1C8(&v77.__r_.__value_.__l.__size_, (uint64_t)"Nonexistent GeomParam: ", 23);
    v50 = *(char *)(a3 + 23);
    if (v50 >= 0)
      v51 = a3;
    else
      v51 = *(_QWORD *)a3;
    if (v50 >= 0)
      v52 = *(unsigned __int8 *)(a3 + 23);
    else
      v52 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v49, v51, v52);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v74);
    if (v75 < 0)
      operator delete(v74[0]);
    v53 = __cxa_allocate_exception(0x20uLL);
    v54 = sub_20BDDC09C(v53, (uint64_t)__p);
    __cxa_throw(v54, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v25 = *(_DWORD *)(v24 + 24);
  if (v25 == 2)
  {
    v33 = (std::__shared_weak_count *)a2[1];
    v65 = *a2;
    v66 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    LODWORD(v74[0]) = 0;
    LODWORD(v74[1]) = 0;
    v68 = 0;
    v69 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(__p, &v65, v74, &v68);
    sub_20BE202F8((uint64_t)&v76, (int *)__p, a3, a4, a5);
    *(_DWORD *)v64 = (_DWORD)v76;
    std::string::operator=(v10, &v77);
    sub_20BDE881C(v11, v78);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v76);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)__p);
    v36 = v66;
    if (v66)
    {
      v37 = (unint64_t *)&v66->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v32 = 0;
  }
  else
  {
    if (v25)
    {
      sub_20BDDBD68((uint64_t)&v76);
      v55 = sub_20BDDC1C8(&v77.__r_.__value_.__l.__size_, (uint64_t)"Invalid ITypedGeomParam: ", 25);
      v56 = *(char *)(a3 + 23);
      if (v56 >= 0)
        v57 = a3;
      else
        v57 = *(_QWORD *)a3;
      if (v56 >= 0)
        v58 = *(unsigned __int8 *)(a3 + 23);
      else
        v58 = *(_QWORD *)(a3 + 8);
      sub_20BDDC1C8(v55, v57, v58);
      std::stringbuf::str();
      sub_20BDDBF20(__p, (__int128 *)v74);
      if (v75 < 0)
        operator delete(v74[0]);
      v59 = __cxa_allocate_exception(0x20uLL);
      v60 = sub_20BDDC09C(v59, (uint64_t)__p);
      __cxa_throw(v60, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v26 = (std::__shared_weak_count *)a2[1];
    v70 = *a2;
    v71 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    LODWORD(v74[0]) = 0;
    LODWORD(v74[1]) = 0;
    v68 = 0;
    v69 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(__p, &v70, v74, &v68);
    v67[0] = 1;
    v67[2] = v86;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v76, __p, a3, v67);
    *v62 = (int)v76;
    std::string::operator=(v13, &v77);
    sub_20BDE881C(v14, v78);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v76);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)__p);
    v29 = v71;
    if (v71)
    {
      v30 = (unint64_t *)&v71->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    sub_20BDDC0E4(__p, ".indices");
    sub_20BE1FC6C((uint64_t)&v76, v62, (uint64_t)__p, a4, a5);
    *v63 = (_DWORD)v76;
    std::string::operator=(v61, &v77);
    sub_20BDE881C(v12, v78);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v76);
    if (v73 < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, ".vals");
    sub_20BE202F8((uint64_t)&v76, v62, (uint64_t)__p, a4, a5);
    *(_DWORD *)v64 = (_DWORD)v76;
    std::string::operator=(v10, &v77);
    sub_20BDE881C(v11, v78);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v76);
    if (v73 < 0)
      operator delete(__p[0]);
    v32 = 1;
  }
  *(_BYTE *)(v64 + 144) = v32;
  v39 = v79;
  if (v79)
  {
    v40 = (unint64_t *)&v79->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v88;
  if (v88)
  {
    v43 = (unint64_t *)&v88->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_20BDE9D48((uint64_t)v87, (_QWORD *)v87[1]);
  return v64;
}

void sub_20BE1FA94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  void *v37;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a34);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v34 - 216));
  v37 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v34 - 200, (uint64_t)v37);
  else
    sub_20BE02504(v34 - 200, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE1F888);
}

void sub_20BE1FBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Alembic::Abc::v12::ICompoundProperty *a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32)
{
  uint64_t v32;

  sub_20BE02EB0(v32 - 152);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(a10);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a11);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE1FC6C(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *exception;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49[2];
  char v50;
  void *__p[2];
  unsigned __int8 v52;
  __int128 v53;
  _QWORD v54[34];
  std::__shared_weak_count *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61[4];
  std::__shared_weak_count *v62;
  int v63;
  uint64_t v64;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *a2;
  *((_QWORD *)&v53 + 1) = 0;
  v54[0] = 0;
  *(_QWORD *)&v53 = (char *)&v53 + 8;
  v58 = 0;
  v59 = 0;
  v60 = v10;
  sub_20BDEBF8C(v61, (const void ***)&v53);
  v61[3] = 0;
  v62 = 0;
  v63 = 0;
  v64 = 1;
  sub_20BDE9D48((uint64_t)&v53, *((_QWORD **)&v53 + 1));
  sub_20BE02E30(a4, (uint64_t)&v60);
  sub_20BE02E30(a5, (uint64_t)&v60);
  *(_DWORD *)a1 = v60;
  v56 = a1;
  v57 = "ITypedArrayProperty::ITypedArrayProperty()";
  v12 = *((_QWORD *)a2 + 4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v54[33] = v12;
  v55 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v39 = sub_20BDDC1C8(v54, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v39, (uint64_t)"ITypedArrayProperty ctor", 24);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v41 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v41, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  v16 = v15;
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v42 = sub_20BDDC1C8(v54, (uint64_t)"Nonexistent array property: ", 28);
    v43 = *(char *)(a3 + 23);
    if (v43 >= 0)
      v44 = a3;
    else
      v44 = *(_QWORD *)a3;
    if (v43 >= 0)
      v45 = *(unsigned __int8 *)(a3 + 23);
    else
      v45 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v42, v44, v45);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    v46 = __cxa_allocate_exception(0x20uLL);
    v47 = sub_20BDDC09C(v46, (uint64_t)__p);
    __cxa_throw(v47, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v17 = *(_DWORD *)(v15 + 56) == 5 && *(_DWORD *)(v15 + 24) == 2;
  if (!v17 || (sub_20BE20254(v15 + 32, v64) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v28 = sub_20BDDC1C8(v54, (uint64_t)"Incorrect match of header datatype: ", 36);
    v29 = sub_20BDE00F4(v28, (int *)(v16 + 56));
    v30 = sub_20BDDC1C8(v29, (uint64_t)" to expected: ", 14);
    v48 = 0x100000005;
    v31 = sub_20BDE00F4(v30, (int *)&v48);
    v32 = sub_20BDDC1C8(v31, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_20BDDC0E4(v49, "interpretation");
    sub_20BE01E1C(v16 + 32, (const void **)v49, __p);
    if ((v52 & 0x80u) == 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if ((v52 & 0x80u) == 0)
      v34 = v52;
    else
      v34 = (uint64_t)__p[1];
    v35 = sub_20BDDC1C8(v32, (uint64_t)v33, v34);
    v36 = sub_20BDDC1C8(v35, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v36, (uint64_t)"", 0);
    if ((char)v52 < 0)
      operator delete(__p[0]);
    if (v50 < 0)
      operator delete(v49[0]);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    v37 = __cxa_allocate_exception(0x20uLL);
    v38 = sub_20BDDC09C(v37, (uint64_t)__p);
    __cxa_throw(v38, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 96))(&v53, v12, a3);
  sub_20BDE82DC(a1 + 32, &v53);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v55;
  if (v55)
  {
    v22 = (unint64_t *)&v55->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v62;
  if (v62)
  {
    v25 = (unint64_t *)&v62->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  sub_20BDE9D48((uint64_t)v61, (_QWORD *)v61[1]);
  return a1;
}

void sub_20BE200F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 192));
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v26);
  MEMORY[0x212B929D0](v25, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 176, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE1FE3CLL);
}

void sub_20BE20214()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 144);
  JUMPOUT(0x20BE20244);
}

uint64_t sub_20BE20254(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (a2)
    return 1;
  sub_20BDDC0E4(__p, "interpretation");
  sub_20BE01E1C(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    v2 = v7[1] == 0;
    operator delete(v7[0]);
  }
  else
  {
    v2 = v8 == 0;
  }
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE202DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE202F8(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void **v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *exception;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50[2];
  char v51;
  void *__p[2];
  unsigned __int8 v53;
  __int128 v54;
  _QWORD v55[34];
  std::__shared_weak_count *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62[4];
  std::__shared_weak_count *v63;
  int v64;
  uint64_t v65;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *a2;
  *((_QWORD *)&v54 + 1) = 0;
  v55[0] = 0;
  *(_QWORD *)&v54 = (char *)&v54 + 8;
  v59 = 0;
  v60 = 0;
  v61 = v10;
  sub_20BDEBF8C(v62, (const void ***)&v54);
  v62[3] = 0;
  v63 = 0;
  v64 = 0;
  v65 = 1;
  sub_20BDE9D48((uint64_t)&v54, *((_QWORD **)&v54 + 1));
  sub_20BE02E30(a4, (uint64_t)&v61);
  sub_20BE02E30(a5, (uint64_t)&v61);
  *(_DWORD *)a1 = v61;
  v57 = a1;
  v58 = "ITypedArrayProperty::ITypedArrayProperty()";
  v12 = *((_QWORD *)a2 + 4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v55[33] = v12;
  v56 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v40 = sub_20BDDC1C8(v55, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v40, (uint64_t)"ITypedArrayProperty ctor", 24);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v42 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v42, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  v16 = v15;
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v43 = sub_20BDDC1C8(v55, (uint64_t)"Nonexistent array property: ", 28);
    v44 = *(char *)(a3 + 23);
    if (v44 >= 0)
      v45 = a3;
    else
      v45 = *(_QWORD *)a3;
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(a3 + 23);
    else
      v46 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v43, v45, v46);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v47 = __cxa_allocate_exception(0x20uLL);
    v48 = sub_20BDDC09C(v47, (uint64_t)__p);
    __cxa_throw(v48, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v18 = *(_DWORD *)(v15 + 56) == 10 && *(_BYTE *)(v15 + 60) == 2 && *(_DWORD *)(v15 + 24) == 2;
  if (!v18 || (sub_20BE15084(v15 + 32, v65) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v29 = sub_20BDDC1C8(v55, (uint64_t)"Incorrect match of header datatype: ", 36);
    v30 = sub_20BDE00F4(v29, (int *)(v16 + 56));
    v31 = sub_20BDDC1C8(v30, (uint64_t)" to expected: ", 14);
    v49 = 0x20000000ALL;
    v32 = sub_20BDE00F4(v31, (int *)&v49);
    v33 = sub_20BDDC1C8(v32, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_20BDDC0E4(v50, "interpretation");
    sub_20BE01E1C(v16 + 32, (const void **)v50, __p);
    if ((v53 & 0x80u) == 0)
      v34 = __p;
    else
      v34 = (void **)__p[0];
    if ((v53 & 0x80u) == 0)
      v35 = v53;
    else
      v35 = (uint64_t)__p[1];
    v36 = sub_20BDDC1C8(v33, (uint64_t)v34, v35);
    v37 = sub_20BDDC1C8(v36, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v37, (uint64_t)"vector", 6);
    if ((char)v53 < 0)
      operator delete(__p[0]);
    if (v51 < 0)
      operator delete(v50[0]);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v38 = __cxa_allocate_exception(0x20uLL);
    v39 = sub_20BDDC09C(v38, (uint64_t)__p);
    __cxa_throw(v39, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 96))(&v54, v12, a3);
  sub_20BDE82DC(a1 + 32, &v54);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v56;
  if (v56)
  {
    v23 = (unint64_t *)&v56->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v63;
  if (v63)
  {
    v26 = (unint64_t *)&v63->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  sub_20BDE9D48((uint64_t)v62, (_QWORD *)v62[1]);
  return a1;
}

void sub_20BE20784(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 192));
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v26);
  MEMORY[0x212B929D0](v25, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 176, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE204D0);
}

void sub_20BE208A8()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 144);
  JUMPOUT(0x20BE208D8);
}

uint64_t sub_20BE208E8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  std::string *v10;
  _QWORD *v11;
  _QWORD *v12;
  std::string *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v46;
  _QWORD *exception;
  _QWORD *v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  std::string *v61;
  int *v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  _DWORD v67[4];
  int v68;
  int v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  void *__p[2];
  char v73;
  void *v74[2];
  char v75;
  std::string *v76;
  std::string v77;
  uint64_t v78[32];
  std::__shared_weak_count *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  int v86;
  uint64_t v87[4];
  std::__shared_weak_count *v88;
  int v89;
  uint64_t v90;

  *(_DWORD *)a1 = 2;
  v10 = (std::string *)(a1 + 8);
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_DWORD *)(a1 + 48) = 2;
  *(_QWORD *)(a1 + 32) = 0;
  v11 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  v63 = (_DWORD *)(a1 + 48);
  v61 = (std::string *)(a1 + 56);
  v64 = a1;
  sub_20BDDC0E4((_QWORD *)(a1 + 56), "");
  *(_DWORD *)(a1 + 96) = 2;
  *(_QWORD *)(a1 + 80) = 0;
  v12 = (_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 88) = 0;
  v62 = (int *)(a1 + 96);
  v13 = (std::string *)(a1 + 104);
  sub_20BDDC0E4((_QWORD *)(a1 + 104), "");
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v14 = (_QWORD *)(a1 + 128);
  v15 = (std::__shared_weak_count *)a2[1];
  v84 = *a2;
  v85 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  *(_OWORD *)&v77.__r_.__value_.__l.__data_ = 0uLL;
  v76 = &v77;
  v82 = 0;
  v83 = 0;
  v86 = 2;
  sub_20BDEBF8C(v87, (const void ***)&v76);
  v87[3] = 0;
  v88 = 0;
  v89 = 0;
  v90 = 1;
  sub_20BDE9D48((uint64_t)&v76, v77.__r_.__value_.__l.__data_);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sub_20BE02E30(a4, (uint64_t)&v86);
  sub_20BE02E30(a5, (uint64_t)&v86);
  *(_DWORD *)v64 = v86;
  v80 = v64;
  v81 = "ITypedGeomParam::ITypedGeomParam()";
  v20 = *a2;
  v21 = (std::__shared_weak_count *)a2[1];
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v78[31] = v20;
  v79 = v21;
  if (!v20)
  {
    sub_20BDDBD68((uint64_t)&v76);
    v46 = sub_20BDDC1C8(&v77.__r_.__value_.__l.__size_, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v46, (uint64_t)"ITypedGeomParam ctor", 20);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v74);
    if (v75 < 0)
      operator delete(v74[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v48 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v48, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 80))(v20, a3);
  if (!v24)
  {
    sub_20BDDBD68((uint64_t)&v76);
    v49 = sub_20BDDC1C8(&v77.__r_.__value_.__l.__size_, (uint64_t)"Nonexistent GeomParam: ", 23);
    v50 = *(char *)(a3 + 23);
    if (v50 >= 0)
      v51 = a3;
    else
      v51 = *(_QWORD *)a3;
    if (v50 >= 0)
      v52 = *(unsigned __int8 *)(a3 + 23);
    else
      v52 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v49, v51, v52);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v74);
    if (v75 < 0)
      operator delete(v74[0]);
    v53 = __cxa_allocate_exception(0x20uLL);
    v54 = sub_20BDDC09C(v53, (uint64_t)__p);
    __cxa_throw(v54, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v25 = *(_DWORD *)(v24 + 24);
  if (v25 == 2)
  {
    v33 = (std::__shared_weak_count *)a2[1];
    v65 = *a2;
    v66 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    LODWORD(v74[0]) = 0;
    LODWORD(v74[1]) = 0;
    v68 = 0;
    v69 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(__p, &v65, v74, &v68);
    sub_20BE21160((uint64_t)&v76, (int *)__p, a3, a4, a5);
    *(_DWORD *)v64 = (_DWORD)v76;
    std::string::operator=(v10, &v77);
    sub_20BDE881C(v11, v78);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v76);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)__p);
    v36 = v66;
    if (v66)
    {
      v37 = (unint64_t *)&v66->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v32 = 0;
  }
  else
  {
    if (v25)
    {
      sub_20BDDBD68((uint64_t)&v76);
      v55 = sub_20BDDC1C8(&v77.__r_.__value_.__l.__size_, (uint64_t)"Invalid ITypedGeomParam: ", 25);
      v56 = *(char *)(a3 + 23);
      if (v56 >= 0)
        v57 = a3;
      else
        v57 = *(_QWORD *)a3;
      if (v56 >= 0)
        v58 = *(unsigned __int8 *)(a3 + 23);
      else
        v58 = *(_QWORD *)(a3 + 8);
      sub_20BDDC1C8(v55, v57, v58);
      std::stringbuf::str();
      sub_20BDDBF20(__p, (__int128 *)v74);
      if (v75 < 0)
        operator delete(v74[0]);
      v59 = __cxa_allocate_exception(0x20uLL);
      v60 = sub_20BDDC09C(v59, (uint64_t)__p);
      __cxa_throw(v60, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v26 = (std::__shared_weak_count *)a2[1];
    v70 = *a2;
    v71 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    LODWORD(v74[0]) = 0;
    LODWORD(v74[1]) = 0;
    v68 = 0;
    v69 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(__p, &v70, v74, &v68);
    v67[0] = 1;
    v67[2] = v86;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v76, __p, a3, v67);
    *v62 = (int)v76;
    std::string::operator=(v13, &v77);
    sub_20BDE881C(v14, v78);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v76);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)__p);
    v29 = v71;
    if (v71)
    {
      v30 = (unint64_t *)&v71->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    sub_20BDDC0E4(__p, ".indices");
    sub_20BE1FC6C((uint64_t)&v76, v62, (uint64_t)__p, a4, a5);
    *v63 = (_DWORD)v76;
    std::string::operator=(v61, &v77);
    sub_20BDE881C(v12, v78);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v76);
    if (v73 < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, ".vals");
    sub_20BE21160((uint64_t)&v76, v62, (uint64_t)__p, a4, a5);
    *(_DWORD *)v64 = (_DWORD)v76;
    std::string::operator=(v10, &v77);
    sub_20BDE881C(v11, v78);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v76);
    if (v73 < 0)
      operator delete(__p[0]);
    v32 = 1;
  }
  *(_BYTE *)(v64 + 144) = v32;
  v39 = v79;
  if (v79)
  {
    v40 = (unint64_t *)&v79->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v88;
  if (v88)
  {
    v43 = (unint64_t *)&v88->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_20BDE9D48((uint64_t)v87, (_QWORD *)v87[1]);
  return v64;
}

void sub_20BE20F88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  void *v37;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a34);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v34 - 216));
  v37 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v34 - 200, (uint64_t)v37);
  else
    sub_20BE02504(v34 - 200, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE20D7CLL);
}

void sub_20BE210DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Alembic::Abc::v12::ICompoundProperty *a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32)
{
  uint64_t v32;

  sub_20BE02EB0(v32 - 152);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(a10);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a11);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE21160(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void **v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *exception;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50[2];
  char v51;
  void *__p[2];
  unsigned __int8 v53;
  __int128 v54;
  _QWORD v55[34];
  std::__shared_weak_count *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62[4];
  std::__shared_weak_count *v63;
  int v64;
  uint64_t v65;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *a2;
  *((_QWORD *)&v54 + 1) = 0;
  v55[0] = 0;
  *(_QWORD *)&v54 = (char *)&v54 + 8;
  v59 = 0;
  v60 = 0;
  v61 = v10;
  sub_20BDEBF8C(v62, (const void ***)&v54);
  v62[3] = 0;
  v63 = 0;
  v64 = 0;
  v65 = 1;
  sub_20BDE9D48((uint64_t)&v54, *((_QWORD **)&v54 + 1));
  sub_20BE02E30(a4, (uint64_t)&v61);
  sub_20BE02E30(a5, (uint64_t)&v61);
  *(_DWORD *)a1 = v61;
  v57 = a1;
  v58 = "ITypedArrayProperty::ITypedArrayProperty()";
  v12 = *((_QWORD *)a2 + 4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v55[33] = v12;
  v56 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v40 = sub_20BDDC1C8(v55, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v40, (uint64_t)"ITypedArrayProperty ctor", 24);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v42 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v42, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  v16 = v15;
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v43 = sub_20BDDC1C8(v55, (uint64_t)"Nonexistent array property: ", 28);
    v44 = *(char *)(a3 + 23);
    if (v44 >= 0)
      v45 = a3;
    else
      v45 = *(_QWORD *)a3;
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(a3 + 23);
    else
      v46 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v43, v45, v46);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v47 = __cxa_allocate_exception(0x20uLL);
    v48 = sub_20BDDC09C(v47, (uint64_t)__p);
    __cxa_throw(v48, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v18 = *(_DWORD *)(v15 + 56) == 10 && *(_BYTE *)(v15 + 60) == 3 && *(_DWORD *)(v15 + 24) == 2;
  if (!v18 || (sub_20BE21750(v15 + 32, v65) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v29 = sub_20BDDC1C8(v55, (uint64_t)"Incorrect match of header datatype: ", 36);
    v30 = sub_20BDE00F4(v29, (int *)(v16 + 56));
    v31 = sub_20BDDC1C8(v30, (uint64_t)" to expected: ", 14);
    v49 = 0x30000000ALL;
    v32 = sub_20BDE00F4(v31, (int *)&v49);
    v33 = sub_20BDDC1C8(v32, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_20BDDC0E4(v50, "interpretation");
    sub_20BE01E1C(v16 + 32, (const void **)v50, __p);
    if ((v53 & 0x80u) == 0)
      v34 = __p;
    else
      v34 = (void **)__p[0];
    if ((v53 & 0x80u) == 0)
      v35 = v53;
    else
      v35 = (uint64_t)__p[1];
    v36 = sub_20BDDC1C8(v33, (uint64_t)v34, v35);
    v37 = sub_20BDDC1C8(v36, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v37, (uint64_t)"normal", 6);
    if ((char)v53 < 0)
      operator delete(__p[0]);
    if (v51 < 0)
      operator delete(v50[0]);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v38 = __cxa_allocate_exception(0x20uLL);
    v39 = sub_20BDDC09C(v38, (uint64_t)__p);
    __cxa_throw(v39, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 96))(&v54, v12, a3);
  sub_20BDE82DC(a1 + 32, &v54);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v56;
  if (v56)
  {
    v23 = (unint64_t *)&v56->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v63;
  if (v63)
  {
    v26 = (unint64_t *)&v63->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  sub_20BDE9D48((uint64_t)v62, (_QWORD *)v62[1]);
  return a1;
}

void sub_20BE215EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 192));
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v26);
  MEMORY[0x212B929D0](v25, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 176, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE21338);
}

void sub_20BE21710()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 144);
  JUMPOUT(0x20BE21740);
}

uint64_t sub_20BE21750(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  if (a2)
    return 1;
  sub_20BDDC0E4(__p, "interpretation");
  sub_20BE01E1C(a1, (const void **)__p, v9);
  if (v10 < 0)
  {
    v2 = v9[1] == (void *)6 && *(_DWORD *)v9[0] == 1836216174 && *((_WORD *)v9[0] + 2) == 27745;
    operator delete(v9[0]);
  }
  else
  {
    v2 = v10 == 6 && LODWORD(v9[0]) == 1836216174 && WORD2(v9[0]) == 27745;
  }
  if (v8 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE21828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE21844(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  std::string *v10;
  _QWORD *v11;
  _QWORD *v12;
  std::string *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v46;
  _QWORD *exception;
  _QWORD *v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  std::string *v61;
  int *v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  _DWORD v67[4];
  int v68;
  int v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  void *__p[2];
  char v73;
  void *v74[2];
  char v75;
  std::string *v76;
  std::string v77;
  uint64_t v78[32];
  std::__shared_weak_count *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  int v86;
  uint64_t v87[4];
  std::__shared_weak_count *v88;
  int v89;
  uint64_t v90;

  *(_DWORD *)a1 = 2;
  v10 = (std::string *)(a1 + 8);
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_DWORD *)(a1 + 48) = 2;
  *(_QWORD *)(a1 + 32) = 0;
  v11 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  v63 = (_DWORD *)(a1 + 48);
  v61 = (std::string *)(a1 + 56);
  v64 = a1;
  sub_20BDDC0E4((_QWORD *)(a1 + 56), "");
  *(_DWORD *)(a1 + 96) = 2;
  *(_QWORD *)(a1 + 80) = 0;
  v12 = (_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 88) = 0;
  v62 = (int *)(a1 + 96);
  v13 = (std::string *)(a1 + 104);
  sub_20BDDC0E4((_QWORD *)(a1 + 104), "");
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v14 = (_QWORD *)(a1 + 128);
  v15 = (std::__shared_weak_count *)a2[1];
  v84 = *a2;
  v85 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  *(_OWORD *)&v77.__r_.__value_.__l.__data_ = 0uLL;
  v76 = &v77;
  v82 = 0;
  v83 = 0;
  v86 = 2;
  sub_20BDEBF8C(v87, (const void ***)&v76);
  v87[3] = 0;
  v88 = 0;
  v89 = 0;
  v90 = 1;
  sub_20BDE9D48((uint64_t)&v76, v77.__r_.__value_.__l.__data_);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sub_20BE02E30(a4, (uint64_t)&v86);
  sub_20BE02E30(a5, (uint64_t)&v86);
  *(_DWORD *)v64 = v86;
  v80 = v64;
  v81 = "ITypedGeomParam::ITypedGeomParam()";
  v20 = *a2;
  v21 = (std::__shared_weak_count *)a2[1];
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v78[31] = v20;
  v79 = v21;
  if (!v20)
  {
    sub_20BDDBD68((uint64_t)&v76);
    v46 = sub_20BDDC1C8(&v77.__r_.__value_.__l.__size_, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v46, (uint64_t)"ITypedGeomParam ctor", 20);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v74);
    if (v75 < 0)
      operator delete(v74[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v48 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v48, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 80))(v20, a3);
  if (!v24)
  {
    sub_20BDDBD68((uint64_t)&v76);
    v49 = sub_20BDDC1C8(&v77.__r_.__value_.__l.__size_, (uint64_t)"Nonexistent GeomParam: ", 23);
    v50 = *(char *)(a3 + 23);
    if (v50 >= 0)
      v51 = a3;
    else
      v51 = *(_QWORD *)a3;
    if (v50 >= 0)
      v52 = *(unsigned __int8 *)(a3 + 23);
    else
      v52 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v49, v51, v52);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v74);
    if (v75 < 0)
      operator delete(v74[0]);
    v53 = __cxa_allocate_exception(0x20uLL);
    v54 = sub_20BDDC09C(v53, (uint64_t)__p);
    __cxa_throw(v54, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v25 = *(_DWORD *)(v24 + 24);
  if (v25 == 2)
  {
    v33 = (std::__shared_weak_count *)a2[1];
    v65 = *a2;
    v66 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    LODWORD(v74[0]) = 0;
    LODWORD(v74[1]) = 0;
    v68 = 0;
    v69 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(__p, &v65, v74, &v68);
    sub_20BE1ED68((uint64_t)&v76, (int *)__p, a3, a4, a5);
    *(_DWORD *)v64 = (_DWORD)v76;
    std::string::operator=(v10, &v77);
    sub_20BDE881C(v11, v78);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v76);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)__p);
    v36 = v66;
    if (v66)
    {
      v37 = (unint64_t *)&v66->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v32 = 0;
  }
  else
  {
    if (v25)
    {
      sub_20BDDBD68((uint64_t)&v76);
      v55 = sub_20BDDC1C8(&v77.__r_.__value_.__l.__size_, (uint64_t)"Invalid ITypedGeomParam: ", 25);
      v56 = *(char *)(a3 + 23);
      if (v56 >= 0)
        v57 = a3;
      else
        v57 = *(_QWORD *)a3;
      if (v56 >= 0)
        v58 = *(unsigned __int8 *)(a3 + 23);
      else
        v58 = *(_QWORD *)(a3 + 8);
      sub_20BDDC1C8(v55, v57, v58);
      std::stringbuf::str();
      sub_20BDDBF20(__p, (__int128 *)v74);
      if (v75 < 0)
        operator delete(v74[0]);
      v59 = __cxa_allocate_exception(0x20uLL);
      v60 = sub_20BDDC09C(v59, (uint64_t)__p);
      __cxa_throw(v60, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v26 = (std::__shared_weak_count *)a2[1];
    v70 = *a2;
    v71 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    LODWORD(v74[0]) = 0;
    LODWORD(v74[1]) = 0;
    v68 = 0;
    v69 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(__p, &v70, v74, &v68);
    v67[0] = 1;
    v67[2] = v86;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v76, __p, a3, v67);
    *v62 = (int)v76;
    std::string::operator=(v13, &v77);
    sub_20BDE881C(v14, v78);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v76);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)__p);
    v29 = v71;
    if (v71)
    {
      v30 = (unint64_t *)&v71->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    sub_20BDDC0E4(__p, ".indices");
    sub_20BE1FC6C((uint64_t)&v76, v62, (uint64_t)__p, a4, a5);
    *v63 = (_DWORD)v76;
    std::string::operator=(v61, &v77);
    sub_20BDE881C(v12, v78);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v76);
    if (v73 < 0)
      operator delete(__p[0]);
    sub_20BDDC0E4(__p, ".vals");
    sub_20BE1ED68((uint64_t)&v76, v62, (uint64_t)__p, a4, a5);
    *(_DWORD *)v64 = (_DWORD)v76;
    std::string::operator=(v10, &v77);
    sub_20BDE881C(v11, v78);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v76);
    if (v73 < 0)
      operator delete(__p[0]);
    v32 = 1;
  }
  *(_BYTE *)(v64 + 144) = v32;
  v39 = v79;
  if (v79)
  {
    v40 = (unint64_t *)&v79->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v88;
  if (v88)
  {
    v43 = (unint64_t *)&v88->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_20BDE9D48((uint64_t)v87, (_QWORD *)v87[1]);
  return v64;
}

void sub_20BE21EE4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  void *v37;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a34);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v34 - 216));
  v37 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v34 - 200, (uint64_t)v37);
  else
    sub_20BE02504(v34 - 200, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE21CD8);
}

void sub_20BE22038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Alembic::Abc::v12::ICompoundProperty *a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32)
{
  uint64_t v32;

  sub_20BE02EB0(v32 - 152);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(a10);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a11);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE220BC(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void **v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *exception;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50[2];
  char v51;
  void *__p[2];
  unsigned __int8 v53;
  __int128 v54;
  _QWORD v55[34];
  std::__shared_weak_count *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62[4];
  std::__shared_weak_count *v63;
  int v64;
  uint64_t v65;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *a2;
  *((_QWORD *)&v54 + 1) = 0;
  v55[0] = 0;
  *(_QWORD *)&v54 = (char *)&v54 + 8;
  v59 = 0;
  v60 = 0;
  v61 = v10;
  sub_20BDEBF8C(v62, (const void ***)&v54);
  v62[3] = 0;
  v63 = 0;
  v64 = 0;
  v65 = 1;
  sub_20BDE9D48((uint64_t)&v54, *((_QWORD **)&v54 + 1));
  sub_20BE02E30(a4, (uint64_t)&v61);
  sub_20BE02E30(a5, (uint64_t)&v61);
  *(_DWORD *)a1 = v61;
  v57 = a1;
  v58 = "ITypedArrayProperty::ITypedArrayProperty()";
  v12 = *((_QWORD *)a2 + 4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v55[33] = v12;
  v56 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v40 = sub_20BDDC1C8(v55, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v40, (uint64_t)"ITypedArrayProperty ctor", 24);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v42 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v42, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  v16 = v15;
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v43 = sub_20BDDC1C8(v55, (uint64_t)"Nonexistent array property: ", 28);
    v44 = *(char *)(a3 + 23);
    if (v44 >= 0)
      v45 = a3;
    else
      v45 = *(_QWORD *)a3;
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(a3 + 23);
    else
      v46 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v43, v45, v46);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v47 = __cxa_allocate_exception(0x20uLL);
    v48 = sub_20BDDC09C(v47, (uint64_t)__p);
    __cxa_throw(v48, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v18 = *(_DWORD *)(v15 + 56) == 10 && *(_BYTE *)(v15 + 60) == 3 && *(_DWORD *)(v15 + 24) == 2;
  if (!v18 || (sub_20BE226AC(v15 + 32, v65) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v29 = sub_20BDDC1C8(v55, (uint64_t)"Incorrect match of header datatype: ", 36);
    v30 = sub_20BDE00F4(v29, (int *)(v16 + 56));
    v31 = sub_20BDDC1C8(v30, (uint64_t)" to expected: ", 14);
    v49 = 0x30000000ALL;
    v32 = sub_20BDE00F4(v31, (int *)&v49);
    v33 = sub_20BDDC1C8(v32, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_20BDDC0E4(v50, "interpretation");
    sub_20BE01E1C(v16 + 32, (const void **)v50, __p);
    if ((v53 & 0x80u) == 0)
      v34 = __p;
    else
      v34 = (void **)__p[0];
    if ((v53 & 0x80u) == 0)
      v35 = v53;
    else
      v35 = (uint64_t)__p[1];
    v36 = sub_20BDDC1C8(v33, (uint64_t)v34, v35);
    v37 = sub_20BDDC1C8(v36, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v37, (uint64_t)"vector", 6);
    if ((char)v53 < 0)
      operator delete(__p[0]);
    if (v51 < 0)
      operator delete(v50[0]);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v38 = __cxa_allocate_exception(0x20uLL);
    v39 = sub_20BDDC09C(v38, (uint64_t)__p);
    __cxa_throw(v39, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 96))(&v54, v12, a3);
  sub_20BDE82DC(a1 + 32, &v54);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v56;
  if (v56)
  {
    v23 = (unint64_t *)&v56->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v63;
  if (v63)
  {
    v26 = (unint64_t *)&v63->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  sub_20BDE9D48((uint64_t)v62, (_QWORD *)v62[1]);
  return a1;
}

void sub_20BE22548(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 192));
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v26);
  MEMORY[0x212B929D0](v25, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 176, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE22294);
}

void sub_20BE2266C()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 144);
  JUMPOUT(0x20BE2269CLL);
}

uint64_t sub_20BE226AC(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  if (a2)
    return 1;
  sub_20BDDC0E4(__p, "interpretation");
  sub_20BE01E1C(a1, (const void **)__p, v9);
  if (v10 < 0)
  {
    v2 = v9[1] == (void *)6 && *(_DWORD *)v9[0] == 1952671094 && *((_WORD *)v9[0] + 2) == 29295;
    operator delete(v9[0]);
  }
  else
  {
    v2 = v10 == 6 && LODWORD(v9[0]) == 1952671094 && WORD2(v9[0]) == 29295;
  }
  if (v8 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE22784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE227A0(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *exception;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49[2];
  char v50;
  void *__p[2];
  unsigned __int8 v52;
  __int128 v53;
  _QWORD v54[34];
  std::__shared_weak_count *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61[4];
  std::__shared_weak_count *v62;
  int v63;
  uint64_t v64;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *a2;
  *((_QWORD *)&v53 + 1) = 0;
  v54[0] = 0;
  *(_QWORD *)&v53 = (char *)&v53 + 8;
  v58 = 0;
  v59 = 0;
  v60 = v10;
  sub_20BDEBF8C(v61, (const void ***)&v53);
  v61[3] = 0;
  v62 = 0;
  v63 = 0;
  v64 = 1;
  sub_20BDE9D48((uint64_t)&v53, *((_QWORD **)&v53 + 1));
  sub_20BE02E30(a4, (uint64_t)&v60);
  sub_20BE02E30(a5, (uint64_t)&v60);
  *(_DWORD *)a1 = v60;
  v56 = a1;
  v57 = "ITypedArrayProperty::ITypedArrayProperty()";
  v12 = *((_QWORD *)a2 + 4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v54[33] = v12;
  v55 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v39 = sub_20BDDC1C8(v54, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v39, (uint64_t)"ITypedArrayProperty ctor", 24);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v41 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v41, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  v16 = v15;
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v42 = sub_20BDDC1C8(v54, (uint64_t)"Nonexistent array property: ", 28);
    v43 = *(char *)(a3 + 23);
    if (v43 >= 0)
      v44 = a3;
    else
      v44 = *(_QWORD *)a3;
    if (v43 >= 0)
      v45 = *(unsigned __int8 *)(a3 + 23);
    else
      v45 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v42, v44, v45);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    v46 = __cxa_allocate_exception(0x20uLL);
    v47 = sub_20BDDC09C(v46, (uint64_t)__p);
    __cxa_throw(v47, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v17 = *(_DWORD *)(v15 + 56) == 1 && *(_DWORD *)(v15 + 24) == 2;
  if (!v17 || (sub_20BE22D84(v15 + 32, v64) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v28 = sub_20BDDC1C8(v54, (uint64_t)"Incorrect match of header datatype: ", 36);
    v29 = sub_20BDE00F4(v28, (int *)(v16 + 56));
    v30 = sub_20BDDC1C8(v29, (uint64_t)" to expected: ", 14);
    v48 = 0x100000001;
    v31 = sub_20BDE00F4(v30, (int *)&v48);
    v32 = sub_20BDDC1C8(v31, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_20BDDC0E4(v49, "interpretation");
    sub_20BE01E1C(v16 + 32, (const void **)v49, __p);
    if ((v52 & 0x80u) == 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if ((v52 & 0x80u) == 0)
      v34 = v52;
    else
      v34 = (uint64_t)__p[1];
    v35 = sub_20BDDC1C8(v32, (uint64_t)v33, v34);
    v36 = sub_20BDDC1C8(v35, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v36, (uint64_t)"", 0);
    if ((char)v52 < 0)
      operator delete(__p[0]);
    if (v50 < 0)
      operator delete(v49[0]);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    v37 = __cxa_allocate_exception(0x20uLL);
    v38 = sub_20BDDC09C(v37, (uint64_t)__p);
    __cxa_throw(v38, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 96))(&v53, v12, a3);
  sub_20BDE82DC(a1 + 32, &v53);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v55;
  if (v55)
  {
    v22 = (unint64_t *)&v55->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v62;
  if (v62)
  {
    v25 = (unint64_t *)&v62->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  sub_20BDE9D48((uint64_t)v61, (_QWORD *)v61[1]);
  return a1;
}

void sub_20BE22C20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 192));
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v26);
  MEMORY[0x212B929D0](v25, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 176, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE22970);
}

void sub_20BE22D44()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 144);
  JUMPOUT(0x20BE22D74);
}

uint64_t sub_20BE22D84(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (a2)
    return 1;
  sub_20BDDC0E4(__p, "interpretation");
  sub_20BE01E1C(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    v2 = v7[1] == 0;
    operator delete(v7[0]);
  }
  else
  {
    v2 = v8 == 0;
  }
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE22E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::OCurvesSchema::set(Alembic::AbcGeom::v12::OCurvesSchema *this, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  uint64_t (*v6)();
  _QWORD *v7;
  uint64_t (*v8)();
  uint64_t (*v9)();
  _QWORD *v10;
  uint64_t (*v11)();
  uint64_t (*v12)();
  _QWORD *v13;
  uint64_t (*v14)();
  _QWORD *v15;
  uint64_t (*v16)();
  _QWORD *v17;
  uint64_t (*v18)();
  uint64_t (*v19)();
  uint64_t (*v20)();
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (*v25)();
  uint64_t (*v26)();
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t (*v31)();
  uint64_t (*v32)();
  uint64_t (*v33)();
  Alembic::Abc::v12::OScalarProperty *v34;
  int v35;
  uint64_t (*v36)();
  uint64_t (*v37)();
  uint64_t (*v38)();
  uint64_t (*v39)();
  uint64_t (*v40)();
  uint64_t (*v41)();
  uint64_t (*v42)();
  uint64_t (*v43)();
  uint64_t (*v44)();
  uint64_t (*v45)();
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t (*v50)();
  uint64_t (*v51)();
  int v52;
  uint64_t (*v53)();
  int v54;
  uint64_t (*v55)();
  int v56;
  uint64_t (*v57)();
  int v58;
  uint64_t (*v59)();
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t (*v64)();
  uint64_t (*v65)();
  int v66;
  uint64_t (*v67)();
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t (*v72)();
  uint64_t (*v73)();
  int v74;
  uint64_t (*v75)();
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t (*v79)();
  uint64_t (*v80)();
  uint64_t (*v81)();
  _QWORD *exception;
  _QWORD *v83;
  _QWORD *v84;
  _BYTE v85[13];
  void *v86;
  void *v87;
  uint64_t v88;
  void *v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE v94[13];
  void *v95;
  void *v96;
  uint64_t v97;
  void *v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[13];
  void *v104;
  void *v105;
  uint64_t v106;
  void *v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE v112[13];
  void *v113;
  void *v114;
  uint64_t v115;
  void *v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE v121[13];
  void *v122;
  void *v123;
  uint64_t v124;
  void *v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE v130[13];
  void *__p;
  void *v132;
  uint64_t v133;
  void *v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  char v140;
  _QWORD v141[4];
  _BYTE v142[16];
  _QWORD v143[33];
  _BYTE v144[2];
  char v145;
  char v146;
  char *v147;
  const char *v148;

  if (*((_BYTE *)this + 344) || sub_20BE240B8(a2))
  {
    Alembic::AbcGeom::v12::OCurvesSchema::selectiveSet(this, a2);
    return;
  }
  v147 = (char *)this + 8;
  v148 = "OCurvesSchema::set()";
  v4 = *(_DWORD *)(a2 + 124);
  v144[0] = *(_DWORD *)(a2 + 120);
  v144[1] = v4;
  v145 = *(_BYTE *)(a2 + 392);
  v146 = v145;
  v5 = (_QWORD *)(a2 + 40);
  if (*(_DWORD *)(a2 + 48) == 127 || !*v5 && *(_QWORD *)(a2 + 64) == *(_QWORD *)(a2 + 56))
    v6 = 0;
  else
    v6 = nullsub_10;
  if (!v6)
    goto LABEL_16;
  if (*((char *)this + 927) < 0)
  {
    if (!*((_QWORD *)this + 114))
      goto LABEL_14;
LABEL_15:
    Alembic::AbcGeom::v12::OCurvesSchema::createVelocityProperty(this);
    goto LABEL_16;
  }
  if (*((_BYTE *)this + 927))
    goto LABEL_15;
LABEL_14:
  if (!*((_QWORD *)this + 116))
    goto LABEL_15;
LABEL_16:
  v7 = (_QWORD *)(a2 + 216);
  if (*(_DWORD *)(a2 + 224) == 127 || !*v7 && *(_QWORD *)(a2 + 240) == *(_QWORD *)(a2 + 232))
    v8 = 0;
  else
    v8 = nullsub_8;
  if (v8)
    v9 = nullsub_11;
  else
    v9 = 0;
  if (v9 && (sub_20BE296FC((uint64_t)this + 368) & 1) == 0)
    Alembic::AbcGeom::v12::OCurvesSchema::createUVsProperty((uint64_t)this, a2);
  v10 = (_QWORD *)(a2 + 304);
  if (*(_DWORD *)(a2 + 312) == 127 || !*v10 && *(_QWORD *)(a2 + 328) == *(_QWORD *)(a2 + 320))
    v11 = 0;
  else
    v11 = nullsub_9;
  if (v11)
    v12 = nullsub_12;
  else
    v12 = 0;
  if (v12 && (sub_20BE296FC((uint64_t)this + 544) & 1) == 0)
    Alembic::AbcGeom::v12::OCurvesSchema::createNormalsProperty((uint64_t)this, a2);
  v13 = (_QWORD *)(a2 + 128);
  if (*(_DWORD *)(a2 + 136) == 127 || !*v13 && *(_QWORD *)(a2 + 152) == *(_QWORD *)(a2 + 144))
    v14 = 0;
  else
    v14 = nullsub_13;
  if (v14 && (sub_20BE296FC((uint64_t)this + 720) & 1) == 0)
    Alembic::AbcGeom::v12::OCurvesSchema::createWidthProperty((uint64_t)this, a2);
  v15 = (_QWORD *)(a2 + 400);
  if (*(_DWORD *)(a2 + 408) == 127 || !*v15 && *(_QWORD *)(a2 + 424) == *(_QWORD *)(a2 + 416))
    v16 = 0;
  else
    v16 = nullsub_13;
  if (!v16)
    goto LABEL_58;
  if (*((char *)this + 975) < 0)
  {
    if (!*((_QWORD *)this + 120))
      goto LABEL_56;
LABEL_57:
    Alembic::AbcGeom::v12::OCurvesSchema::createPositionWeightsProperty(this);
    goto LABEL_58;
  }
  if (*((_BYTE *)this + 975))
    goto LABEL_57;
LABEL_56:
  if (!*((_QWORD *)this + 122))
    goto LABEL_57;
LABEL_58:
  v17 = (_QWORD *)(a2 + 440);
  if (*(_DWORD *)(a2 + 448) == 127 || !*v17 && *(_QWORD *)(a2 + 464) == *(_QWORD *)(a2 + 456))
    v18 = 0;
  else
    v18 = nullsub_14;
  if (!v18)
    goto LABEL_70;
  if (*((char *)this + 1023) < 0)
  {
    if (!*((_QWORD *)this + 126))
      goto LABEL_68;
LABEL_69:
    Alembic::AbcGeom::v12::OCurvesSchema::createOrdersProperty(this);
    goto LABEL_70;
  }
  if (*((_BYTE *)this + 1023))
    goto LABEL_69;
LABEL_68:
  if (!*((_QWORD *)this + 128))
    goto LABEL_69;
LABEL_70:
  v84 = (_QWORD *)(a2 + 480);
  if (*(_DWORD *)(a2 + 488) == 127 || !*(_QWORD *)(a2 + 480) && *(_QWORD *)(a2 + 504) == *(_QWORD *)(a2 + 496))
    v19 = 0;
  else
    v19 = nullsub_13;
  if (v19)
  {
    if (*((char *)this + 1071) < 0)
    {
      if (!*((_QWORD *)this + 132))
        goto LABEL_80;
    }
    else if (!*((_BYTE *)this + 1071))
    {
LABEL_80:
      if (*((_QWORD *)this + 134))
        goto LABEL_82;
    }
    Alembic::AbcGeom::v12::OCurvesSchema::createKnotsProperty(this);
  }
LABEL_82:
  if (!*((_QWORD *)this + 44))
  {
    if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
    {
      sub_20BDDBD68((uint64_t)v142);
      sub_20BDDC1C8(v143, (uint64_t)"Sample 0 must have valid data for all mesh components", 53);
      std::stringbuf::str();
      sub_20BDDBF20(v141, &v139);
      if (v140 < 0)
        operator delete((void *)v139);
      exception = __cxa_allocate_exception(0x20uLL);
      v83 = sub_20BDDC09C(exception, (uint64_t)v141);
      __cxa_throw(v83, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 248);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 296);
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 1088), v144);
    if (*((char *)this + 927) < 0)
    {
      if (*((_QWORD *)this + 114))
        goto LABEL_90;
    }
    else if (*((_BYTE *)this + 927))
    {
LABEL_90:
      v20 = 0;
LABEL_161:
      if (v20)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 896);
      if (*(double *)(a2 + 544) >= *(double *)(a2 + 520)
        && *(double *)(a2 + 552) >= *(double *)(a2 + 528)
        && *(double *)(a2 + 560) >= *(double *)(a2 + 536))
      {
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 56), (const void *)(a2 + 520));
      }
      else
      {
        sub_20BE27074((_QWORD *)a2, (uint64_t)v142);
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 56), v142);
      }
      if (*(_DWORD *)(a2 + 224) == 127 || !*v7 && *(_QWORD *)(a2 + 240) == *(_QWORD *)(a2 + 232))
        v37 = 0;
      else
        v37 = nullsub_8;
      if (v37)
        v38 = nullsub_11;
      else
        v38 = 0;
      if (v38)
        sub_20BE2717C((uint64_t)this + 368, a2 + 216);
      if (*(_DWORD *)(a2 + 312) == 127 || !*v10 && *(_QWORD *)(a2 + 328) == *(_QWORD *)(a2 + 320))
        v39 = 0;
      else
        v39 = nullsub_9;
      if (v39)
        v40 = nullsub_12;
      else
        v40 = 0;
      if (v40)
        sub_20BE27540((uint64_t)this + 544, a2 + 304);
      if (*(_DWORD *)(a2 + 136) == 127 || !*v13 && *(_QWORD *)(a2 + 152) == *(_QWORD *)(a2 + 144))
        v41 = 0;
      else
        v41 = nullsub_13;
      if (v41)
        v42 = nullsub_15;
      else
        v42 = 0;
      if (v42)
        sub_20BE27904((uint64_t)this + 720, a2 + 128);
      if (*(_DWORD *)(a2 + 408) == 127 || !*v15 && *(_QWORD *)(a2 + 424) == *(_QWORD *)(a2 + 416))
        v43 = 0;
      else
        v43 = nullsub_13;
      if (v43)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 944);
      if (*(_DWORD *)(a2 + 448) == 127 || !*v17 && *(_QWORD *)(a2 + 464) == *(_QWORD *)(a2 + 456))
        v44 = 0;
      else
        v44 = nullsub_14;
      if (v44)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 992);
      if (*(_DWORD *)(a2 + 488) == 127 || !*v84 && *(_QWORD *)(a2 + 504) == *(_QWORD *)(a2 + 496))
        v45 = 0;
      else
        v45 = nullsub_13;
      if (v45)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1040);
      goto LABEL_365;
    }
    if (*((_QWORD *)this + 116))
      v20 = nullsub_7;
    else
      v20 = 0;
    goto LABEL_161;
  }
  LODWORD(v134) = *((_DWORD *)this + 62);
  if (*((char *)this + 279) < 0)
  {
    sub_20BDDBFAC(&v135, *((void **)this + 32), *((_QWORD *)this + 33));
  }
  else
  {
    v135 = *((_OWORD *)this + 16);
    v136 = *((_QWORD *)this + 34);
  }
  v21 = *((_QWORD *)this + 36);
  v137 = *((_QWORD *)this + 35);
  v138 = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(_QWORD *)(a2 + 5);
  *(_QWORD *)v130 = *(_QWORD *)a2;
  *(_QWORD *)&v130[5] = v24;
  __p = 0;
  v132 = 0;
  v133 = 0;
  sub_20BDE1364(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  if (SHIBYTE(v136) < 0)
  {
    if (*((_QWORD *)&v135 + 1))
      goto LABEL_97;
  }
  else if (HIBYTE(v136))
  {
LABEL_97:
    v25 = 0;
    goto LABEL_102;
  }
  if (v137)
    v25 = nullsub_7;
  else
    v25 = 0;
LABEL_102:
  if (v25)
  {
    if (*(_DWORD *)&v130[8] == 127 || !*(_QWORD *)v130 && v132 == __p)
      v26 = 0;
    else
      v26 = nullsub_19;
    if (v26)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v134);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v134);
  }
  if (__p)
  {
    v132 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v134);
  LODWORD(v125) = *((_DWORD *)this + 74);
  if (*((char *)this + 327) < 0)
  {
    sub_20BDDBFAC(&v126, *((void **)this + 38), *((_QWORD *)this + 39));
  }
  else
  {
    v126 = *((_OWORD *)this + 19);
    v127 = *((_QWORD *)this + 40);
  }
  v27 = *((_QWORD *)this + 42);
  v128 = *((_QWORD *)this + 41);
  v129 = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = *(_QWORD *)(a2 + 85);
  *(_QWORD *)v121 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)&v121[5] = v30;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  sub_20BDE1364(&v122, *(const void **)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3);
  if (SHIBYTE(v127) < 0)
  {
    if (*((_QWORD *)&v126 + 1))
      goto LABEL_121;
  }
  else if (HIBYTE(v127))
  {
LABEL_121:
    v31 = 0;
    goto LABEL_126;
  }
  if (v128)
    v31 = nullsub_7;
  else
    v31 = 0;
LABEL_126:
  if (v31)
  {
    if (*(_DWORD *)&v121[8] == 127 || !*(_QWORD *)v121 && v123 == v122)
      v32 = 0;
    else
      v32 = nullsub_20;
    if (v32)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v125);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v125);
  }
  if (v122)
  {
    v123 = v122;
    operator delete(v122);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v125);
  if (*((char *)this + 327) < 0)
  {
    if (*((_QWORD *)this + 39))
      goto LABEL_139;
LABEL_141:
    if (*((_QWORD *)this + 41))
      v33 = nullsub_7;
    else
      v33 = 0;
    goto LABEL_144;
  }
  if (!*((_BYTE *)this + 327))
    goto LABEL_141;
LABEL_139:
  v33 = 0;
LABEL_144:
  v34 = (Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 1088);
  if (v33)
    Alembic::Abc::v12::OScalarProperty::set(v34, v144);
  else
    Alembic::Abc::v12::OScalarProperty::setFromPrevious(v34);
  v35 = *((char *)this + 927);
  if (v35 < 0)
  {
    if (*((_QWORD *)this + 114))
      goto LABEL_242;
  }
  else if (*((_BYTE *)this + 927))
  {
    goto LABEL_242;
  }
  if (*((_QWORD *)this + 116))
    v36 = nullsub_7;
  else
    v36 = 0;
  if (v36)
  {
    LODWORD(v116) = *((_DWORD *)this + 224);
    if (v35 < 0)
    {
      sub_20BDDBFAC(&v117, *((void **)this + 113), *((_QWORD *)this + 114));
    }
    else
    {
      v117 = *(_OWORD *)((char *)this + 904);
      v118 = *((_QWORD *)this + 115);
    }
    v46 = *((_QWORD *)this + 117);
    v119 = *((_QWORD *)this + 116);
    v120 = v46;
    if (v46)
    {
      v47 = (unint64_t *)(v46 + 8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    v49 = *(_QWORD *)(a2 + 45);
    *(_QWORD *)v112 = *v5;
    *(_QWORD *)&v112[5] = v49;
    v113 = 0;
    v114 = 0;
    v115 = 0;
    sub_20BDE1364(&v113, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    if (SHIBYTE(v118) < 0)
    {
      if (*((_QWORD *)&v117 + 1))
        goto LABEL_224;
    }
    else if (HIBYTE(v118))
    {
LABEL_224:
      v50 = 0;
LABEL_229:
      if (v50)
      {
        if (*(_DWORD *)&v112[8] == 127 || !*(_QWORD *)v112 && v114 == v113)
          v51 = 0;
        else
          v51 = nullsub_10;
        if (v51)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v116);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v116);
      }
      if (v113)
      {
        v114 = v113;
        operator delete(v113);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v116);
      goto LABEL_242;
    }
    if (v119)
      v50 = nullsub_7;
    else
      v50 = 0;
    goto LABEL_229;
  }
LABEL_242:
  v52 = sub_20BE296FC((uint64_t)this + 368);
  v53 = nullsub_16;
  if (!v52)
    v53 = 0;
  if (v53)
    sub_20BE2717C((uint64_t)this + 368, a2 + 216);
  v54 = sub_20BE296FC((uint64_t)this + 544);
  v55 = nullsub_17;
  if (!v54)
    v55 = 0;
  if (v55)
    sub_20BE27540((uint64_t)this + 544, a2 + 304);
  v56 = sub_20BE296FC((uint64_t)this + 720);
  v57 = nullsub_18;
  if (!v56)
    v57 = 0;
  if (v57)
    sub_20BE27904((uint64_t)this + 720, a2 + 128);
  v58 = *((char *)this + 975);
  if (v58 < 0)
  {
    if (*((_QWORD *)this + 120))
      goto LABEL_287;
  }
  else if (*((_BYTE *)this + 975))
  {
    goto LABEL_287;
  }
  if (*((_QWORD *)this + 122))
    v59 = nullsub_7;
  else
    v59 = 0;
  if (v59)
  {
    LODWORD(v107) = *((_DWORD *)this + 236);
    if (v58 < 0)
    {
      sub_20BDDBFAC(&v108, *((void **)this + 119), *((_QWORD *)this + 120));
    }
    else
    {
      v108 = *(_OWORD *)((char *)this + 952);
      v109 = *((_QWORD *)this + 121);
    }
    v60 = *((_QWORD *)this + 123);
    v110 = *((_QWORD *)this + 122);
    v111 = v60;
    if (v60)
    {
      v61 = (unint64_t *)(v60 + 8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    v63 = *(_QWORD *)(a2 + 405);
    *(_QWORD *)v103 = *v15;
    *(_QWORD *)&v103[5] = v63;
    v104 = 0;
    v105 = 0;
    v106 = 0;
    sub_20BDE1364(&v104, *(const void **)(a2 + 416), *(_QWORD *)(a2 + 424), (uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 3);
    if (SHIBYTE(v109) < 0)
    {
      if (*((_QWORD *)&v108 + 1))
        goto LABEL_270;
    }
    else if (HIBYTE(v109))
    {
LABEL_270:
      v64 = 0;
LABEL_275:
      if (v64)
      {
        if (*(_DWORD *)&v103[8] == 127 || !*(_QWORD *)v103 && v105 == v104)
          v65 = 0;
        else
          v65 = nullsub_13;
        if (v65)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v107);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v107);
      }
      if (v104)
      {
        v105 = v104;
        operator delete(v104);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v107);
      goto LABEL_287;
    }
    if (v110)
      v64 = nullsub_7;
    else
      v64 = 0;
    goto LABEL_275;
  }
LABEL_287:
  v66 = *((char *)this + 1023);
  if (v66 < 0)
  {
    if (*((_QWORD *)this + 126))
      goto LABEL_320;
  }
  else if (*((_BYTE *)this + 1023))
  {
    goto LABEL_320;
  }
  if (*((_QWORD *)this + 128))
    v67 = nullsub_7;
  else
    v67 = 0;
  if (v67)
  {
    LODWORD(v98) = *((_DWORD *)this + 248);
    if (v66 < 0)
    {
      sub_20BDDBFAC(&v99, *((void **)this + 125), *((_QWORD *)this + 126));
    }
    else
    {
      v99 = *(_OWORD *)((char *)this + 1000);
      v100 = *((_QWORD *)this + 127);
    }
    v68 = *((_QWORD *)this + 129);
    v101 = *((_QWORD *)this + 128);
    v102 = v68;
    if (v68)
    {
      v69 = (unint64_t *)(v68 + 8);
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v71 = *(_QWORD *)(a2 + 445);
    *(_QWORD *)v94 = *v17;
    *(_QWORD *)&v94[5] = v71;
    v95 = 0;
    v96 = 0;
    v97 = 0;
    sub_20BDE1364(&v95, *(const void **)(a2 + 456), *(_QWORD *)(a2 + 464), (uint64_t)(*(_QWORD *)(a2 + 464) - *(_QWORD *)(a2 + 456)) >> 3);
    if (SHIBYTE(v100) < 0)
    {
      if (*((_QWORD *)&v99 + 1))
        goto LABEL_303;
    }
    else if (HIBYTE(v100))
    {
LABEL_303:
      v72 = 0;
LABEL_308:
      if (v72)
      {
        if (*(_DWORD *)&v94[8] == 127 || !*(_QWORD *)v94 && v96 == v95)
          v73 = 0;
        else
          v73 = nullsub_14;
        if (v73)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v98);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v98);
      }
      if (v95)
      {
        v96 = v95;
        operator delete(v95);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v98);
      goto LABEL_320;
    }
    if (v101)
      v72 = nullsub_7;
    else
      v72 = 0;
    goto LABEL_308;
  }
LABEL_320:
  v74 = *((char *)this + 1071);
  if (v74 < 0)
  {
    if (*((_QWORD *)this + 132))
      goto LABEL_353;
  }
  else if (*((_BYTE *)this + 1071))
  {
    goto LABEL_353;
  }
  if (*((_QWORD *)this + 134))
    v75 = nullsub_7;
  else
    v75 = 0;
  if (v75)
  {
    LODWORD(v89) = *((_DWORD *)this + 260);
    if (v74 < 0)
    {
      sub_20BDDBFAC(&v90, *((void **)this + 131), *((_QWORD *)this + 132));
    }
    else
    {
      v90 = *(_OWORD *)((char *)this + 1048);
      v91 = *((_QWORD *)this + 133);
    }
    v76 = *((_QWORD *)this + 135);
    v92 = *((_QWORD *)this + 134);
    v93 = v76;
    if (v76)
    {
      v77 = (unint64_t *)(v76 + 8);
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
    }
    *(_QWORD *)v85 = *v84;
    *(_QWORD *)&v85[5] = *(_QWORD *)(a2 + 485);
    v86 = 0;
    v87 = 0;
    v88 = 0;
    sub_20BDE1364(&v86, *(const void **)(a2 + 496), *(_QWORD *)(a2 + 504), (uint64_t)(*(_QWORD *)(a2 + 504) - *(_QWORD *)(a2 + 496)) >> 3);
    if (SHIBYTE(v91) < 0)
    {
      if (*((_QWORD *)&v90 + 1))
        goto LABEL_336;
    }
    else if (HIBYTE(v91))
    {
LABEL_336:
      v79 = 0;
LABEL_341:
      if (v79)
      {
        if (*(_DWORD *)&v85[8] == 127 || !*(_QWORD *)v85 && v87 == v86)
          v80 = 0;
        else
          v80 = nullsub_13;
        if (v80)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v89);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v89);
      }
      if (v86)
      {
        v87 = v86;
        operator delete(v86);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v89);
      goto LABEL_353;
    }
    if (v92)
      v79 = nullsub_7;
    else
      v79 = 0;
    goto LABEL_341;
  }
LABEL_353:
  if (*(double *)(a2 + 544) <= *(double *)(a2 + 520)
    || *(double *)(a2 + 552) <= *(double *)(a2 + 528)
    || *(double *)(a2 + 560) <= *(double *)(a2 + 536))
  {
    if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
      v81 = 0;
    else
      v81 = nullsub_19;
    if (v81)
    {
      sub_20BE27074((_QWORD *)a2, (uint64_t)v142);
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 56), v142);
    }
    else
    {
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 56));
    }
  }
  else
  {
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 56), (const void *)(a2 + 520));
  }
LABEL_365:
  ++*((_QWORD *)this + 44);
}

void sub_20BE23F18(void *a1, int a2)
{
  uint64_t v2;
  void *v5;

  sub_20BDDC194((std::exception *)&STACK[0x238]);
  sub_20BDDBE98((uint64_t)&STACK[0x258]);
  v5 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v2 - 104, (uint64_t)v5);
  else
    sub_20BE02504(v2 - 104, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE23E84);
}

void sub_20BE24098(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL sub_20BE240B8(uint64_t a1)
{
  _BOOL8 result;
  uint64_t (*v3)();

  result = 0;
  if (!*(_QWORD *)a1)
  {
    if (*(_DWORD *)(a1 + 224) == 127 || !*(_QWORD *)(a1 + 216) && *(_QWORD *)(a1 + 240) == *(_QWORD *)(a1 + 232)
       ? 0
       : nullsub_8)
    {
      return 1;
    }
    v3 = *(_DWORD *)(a1 + 312) == 127 || !*(_QWORD *)(a1 + 304) && *(_QWORD *)(a1 + 328) == *(_QWORD *)(a1 + 320)
       ? 0
       : nullsub_9;
    if (v3 || *(_QWORD *)(a1 + 40))
      return 1;
  }
  return result;
}

void Alembic::AbcGeom::v12::OCurvesSchema::selectiveSet(Alembic::AbcGeom::v12::OCurvesSchema *this, uint64_t a2)
{
  int v4;
  uint64_t (*v5)();
  int v6;
  uint64_t (*v7)();
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t (*v13)();
  uint64_t (*v14)();
  _QWORD *v15;
  uint64_t (*v16)();
  int v17;
  uint64_t (*v18)();
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t (*v24)();
  _QWORD *v25;
  uint64_t (*v26)();
  int v27;
  uint64_t (*v28)();
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t (*v33)();
  uint64_t (*v34)();
  uint64_t (*v35)();
  uint64_t (*v36)();
  int v37;
  uint64_t (*v38)();
  uint64_t (*v39)();
  uint64_t (*v40)();
  int v41;
  uint64_t (*v42)();
  uint64_t (*v43)();
  int v44;
  uint64_t (*v45)();
  _QWORD *v46;
  uint64_t (*v47)();
  int v48;
  uint64_t (*v49)();
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t (*v54)();
  uint64_t (*v55)();
  _QWORD *v56;
  uint64_t (*v57)();
  int v58;
  uint64_t (*v59)();
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t (*v64)();
  uint64_t (*v65)();
  _QWORD *v66;
  uint64_t (*v67)();
  int v68;
  uint64_t (*v69)();
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t (*v73)();
  uint64_t (*v74)();
  _BYTE v75[13];
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[13];
  void *v85;
  void *v86;
  uint64_t v87;
  void *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE v93[13];
  void *v94;
  void *v95;
  uint64_t v96;
  void *v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE v102[13];
  void *v103;
  void *v104;
  uint64_t v105;
  void *v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE v111[13];
  void *__p;
  void *v113;
  uint64_t v114;
  void *v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE v120[48];
  _BYTE v121[13];
  void *v122;
  void *v123;
  uint64_t v124;
  void *v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE v130[2];
  char v131;
  char v132;
  char *v133;
  const char *v134;

  v133 = (char *)this + 8;
  v134 = "OCurvesSchema::selectiveSet()";
  v4 = *(_DWORD *)(a2 + 124);
  v130[0] = *(_DWORD *)(a2 + 120);
  v130[1] = v4;
  v131 = *(_BYTE *)(a2 + 392);
  v132 = v131;
  if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
    v5 = 0;
  else
    v5 = nullsub_19;
  if (v5)
  {
    if (*((char *)this + 279) < 0)
    {
      if (!*((_QWORD *)this + 33))
        goto LABEL_11;
    }
    else if (!*((_BYTE *)this + 279))
    {
LABEL_11:
      if (*((_QWORD *)this + 35))
        goto LABEL_13;
    }
    Alembic::AbcGeom::v12::OCurvesSchema::createPositionProperty(this);
  }
LABEL_13:
  v6 = *((char *)this + 279);
  if (v6 < 0)
  {
    if (*((_QWORD *)this + 33))
      goto LABEL_57;
  }
  else if (*((_BYTE *)this + 279))
  {
    goto LABEL_57;
  }
  if (*((_QWORD *)this + 35))
    v7 = nullsub_7;
  else
    v7 = 0;
  if (!v7)
    goto LABEL_57;
  LODWORD(v125) = *((_DWORD *)this + 62);
  if (v6 < 0)
  {
    sub_20BDDBFAC(&v126, *((void **)this + 32), *((_QWORD *)this + 33));
  }
  else
  {
    v126 = *((_OWORD *)this + 16);
    v127 = *((_QWORD *)this + 34);
  }
  v8 = *((_QWORD *)this + 36);
  v128 = *((_QWORD *)this + 35);
  v129 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(a2 + 5);
  *(_QWORD *)v121 = *(_QWORD *)a2;
  *(_QWORD *)&v121[5] = v11;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  sub_20BDE1364(&v122, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  if (SHIBYTE(v127) < 0)
  {
    if (*((_QWORD *)&v126 + 1))
      goto LABEL_29;
LABEL_31:
    if (v128)
      v12 = nullsub_7;
    else
      v12 = 0;
    goto LABEL_34;
  }
  if (!HIBYTE(v127))
    goto LABEL_31;
LABEL_29:
  v12 = 0;
LABEL_34:
  if (v12)
  {
    if (*(_DWORD *)&v121[8] == 127 || !*(_QWORD *)v121 && v123 == v122)
      v13 = 0;
    else
      v13 = nullsub_19;
    if (v13)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v125);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v125);
  }
  if (v122)
  {
    v123 = v122;
    operator delete(v122);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v125);
  if (*(double *)(a2 + 544) <= *(double *)(a2 + 520)
    || *(double *)(a2 + 552) <= *(double *)(a2 + 528)
    || *(double *)(a2 + 560) <= *(double *)(a2 + 536))
  {
    if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
      v14 = 0;
    else
      v14 = nullsub_19;
    if (v14)
    {
      sub_20BE27074((_QWORD *)a2, (uint64_t)v120);
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 56), v120);
    }
    else
    {
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 56));
    }
  }
  else
  {
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 56), (const void *)(a2 + 520));
  }
LABEL_57:
  v15 = (_QWORD *)(a2 + 80);
  if (*(_DWORD *)(a2 + 88) == 127 || !*v15 && *(_QWORD *)(a2 + 104) == *(_QWORD *)(a2 + 96))
    v16 = 0;
  else
    v16 = nullsub_20;
  if (v16)
  {
    if (*((char *)this + 327) < 0)
    {
      if (!*((_QWORD *)this + 39))
        goto LABEL_67;
    }
    else if (!*((_BYTE *)this + 327))
    {
LABEL_67:
      if (*((_QWORD *)this + 41))
        goto LABEL_69;
    }
    Alembic::AbcGeom::v12::OCurvesSchema::createVertexProperties(this);
  }
LABEL_69:
  v17 = *((char *)this + 327);
  if (v17 < 0)
  {
    if (*((_QWORD *)this + 39))
      goto LABEL_102;
  }
  else if (*((_BYTE *)this + 327))
  {
    goto LABEL_102;
  }
  if (*((_QWORD *)this + 41))
    v18 = nullsub_7;
  else
    v18 = 0;
  if (!v18)
    goto LABEL_102;
  LODWORD(v115) = *((_DWORD *)this + 74);
  if (v17 < 0)
  {
    sub_20BDDBFAC(&v116, *((void **)this + 38), *((_QWORD *)this + 39));
  }
  else
  {
    v116 = *((_OWORD *)this + 19);
    v117 = *((_QWORD *)this + 40);
  }
  v19 = *((_QWORD *)this + 42);
  v118 = *((_QWORD *)this + 41);
  v119 = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *(_QWORD *)(a2 + 85);
  *(_QWORD *)v111 = *v15;
  *(_QWORD *)&v111[5] = v22;
  __p = 0;
  v113 = 0;
  v114 = 0;
  sub_20BDE1364(&__p, *(const void **)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3);
  if (SHIBYTE(v117) < 0)
  {
    if (*((_QWORD *)&v116 + 1))
      goto LABEL_85;
LABEL_87:
    if (v118)
      v23 = nullsub_7;
    else
      v23 = 0;
    goto LABEL_90;
  }
  if (!HIBYTE(v117))
    goto LABEL_87;
LABEL_85:
  v23 = 0;
LABEL_90:
  if (v23)
  {
    if (*(_DWORD *)&v111[8] == 127 || !*(_QWORD *)v111 && v113 == __p)
      v24 = 0;
    else
      v24 = nullsub_20;
    if (v24)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v115);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v115);
  }
  if (__p)
  {
    v113 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v115);
  Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 1088), v130);
LABEL_102:
  v25 = (_QWORD *)(a2 + 40);
  if (*(_DWORD *)(a2 + 48) == 127 || !*v25 && *(_QWORD *)(a2 + 64) == *(_QWORD *)(a2 + 56))
    v26 = 0;
  else
    v26 = nullsub_10;
  if (v26)
  {
    if (*((char *)this + 927) < 0)
    {
      if (!*((_QWORD *)this + 114))
        goto LABEL_112;
    }
    else if (!*((_BYTE *)this + 927))
    {
LABEL_112:
      if (*((_QWORD *)this + 116))
        goto LABEL_114;
    }
    Alembic::AbcGeom::v12::OCurvesSchema::createVelocityProperty(this);
  }
LABEL_114:
  v27 = *((char *)this + 927);
  if (v27 < 0)
  {
    if (*((_QWORD *)this + 114))
      goto LABEL_147;
  }
  else if (*((_BYTE *)this + 927))
  {
    goto LABEL_147;
  }
  if (*((_QWORD *)this + 116))
    v28 = nullsub_7;
  else
    v28 = 0;
  if (!v28)
    goto LABEL_147;
  LODWORD(v106) = *((_DWORD *)this + 224);
  if (v27 < 0)
  {
    sub_20BDDBFAC(&v107, *((void **)this + 113), *((_QWORD *)this + 114));
  }
  else
  {
    v107 = *(_OWORD *)((char *)this + 904);
    v108 = *((_QWORD *)this + 115);
  }
  v29 = *((_QWORD *)this + 117);
  v109 = *((_QWORD *)this + 116);
  v110 = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *(_QWORD *)(a2 + 45);
  *(_QWORD *)v102 = *v25;
  *(_QWORD *)&v102[5] = v32;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  sub_20BDE1364(&v103, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  if (SHIBYTE(v108) < 0)
  {
    if (*((_QWORD *)&v107 + 1))
      goto LABEL_130;
LABEL_132:
    if (v109)
      v33 = nullsub_7;
    else
      v33 = 0;
    goto LABEL_135;
  }
  if (!HIBYTE(v108))
    goto LABEL_132;
LABEL_130:
  v33 = 0;
LABEL_135:
  if (v33)
  {
    if (*(_DWORD *)&v102[8] == 127 || !*(_QWORD *)v102 && v104 == v103)
      v34 = 0;
    else
      v34 = nullsub_10;
    if (v34)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v106);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v106);
  }
  if (v103)
  {
    v104 = v103;
    operator delete(v103);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v106);
LABEL_147:
  if (*(_DWORD *)(a2 + 224) == 127 || !*(_QWORD *)(a2 + 216) && *(_QWORD *)(a2 + 240) == *(_QWORD *)(a2 + 232))
    v35 = 0;
  else
    v35 = nullsub_8;
  if (v35)
    v36 = nullsub_11;
  else
    v36 = 0;
  if (v36 && (sub_20BE296FC((uint64_t)this + 368) & 1) == 0)
    Alembic::AbcGeom::v12::OCurvesSchema::createUVsProperty((uint64_t)this, a2);
  v37 = sub_20BE296FC((uint64_t)this + 368);
  v38 = nullsub_16;
  if (!v37)
    v38 = 0;
  if (v38)
    sub_20BE2717C((uint64_t)this + 368, a2 + 216);
  if (*(_DWORD *)(a2 + 312) == 127 || !*(_QWORD *)(a2 + 304) && *(_QWORD *)(a2 + 328) == *(_QWORD *)(a2 + 320))
    v39 = 0;
  else
    v39 = nullsub_9;
  if (v39)
    v40 = nullsub_12;
  else
    v40 = 0;
  if (v40 && (sub_20BE296FC((uint64_t)this + 544) & 1) == 0)
    Alembic::AbcGeom::v12::OCurvesSchema::createNormalsProperty((uint64_t)this, a2);
  v41 = sub_20BE296FC((uint64_t)this + 544);
  v42 = nullsub_17;
  if (!v41)
    v42 = 0;
  if (v42)
    sub_20BE27540((uint64_t)this + 544, a2 + 304);
  if (*(_DWORD *)(a2 + 136) == 127 || !*(_QWORD *)(a2 + 128) && *(_QWORD *)(a2 + 152) == *(_QWORD *)(a2 + 144))
    v43 = 0;
  else
    v43 = nullsub_13;
  if (v43 && (sub_20BE296FC((uint64_t)this + 720) & 1) == 0)
    Alembic::AbcGeom::v12::OCurvesSchema::createWidthProperty((uint64_t)this, a2);
  v44 = sub_20BE296FC((uint64_t)this + 720);
  v45 = nullsub_18;
  if (!v44)
    v45 = 0;
  if (v45)
    sub_20BE27904((uint64_t)this + 720, a2 + 128);
  v46 = (_QWORD *)(a2 + 400);
  if (*(_DWORD *)(a2 + 408) == 127 || !*v46 && *(_QWORD *)(a2 + 424) == *(_QWORD *)(a2 + 416))
    v47 = 0;
  else
    v47 = nullsub_13;
  if (v47)
  {
    if (*((char *)this + 975) < 0)
    {
      if (!*((_QWORD *)this + 120))
        goto LABEL_199;
    }
    else if (!*((_BYTE *)this + 975))
    {
LABEL_199:
      if (*((_QWORD *)this + 122))
        goto LABEL_201;
    }
    Alembic::AbcGeom::v12::OCurvesSchema::createPositionWeightsProperty(this);
  }
LABEL_201:
  v48 = *((char *)this + 975);
  if (v48 < 0)
  {
    if (*((_QWORD *)this + 120))
      goto LABEL_234;
  }
  else if (*((_BYTE *)this + 975))
  {
    goto LABEL_234;
  }
  if (*((_QWORD *)this + 122))
    v49 = nullsub_7;
  else
    v49 = 0;
  if (!v49)
    goto LABEL_234;
  LODWORD(v97) = *((_DWORD *)this + 236);
  if (v48 < 0)
  {
    sub_20BDDBFAC(&v98, *((void **)this + 119), *((_QWORD *)this + 120));
  }
  else
  {
    v98 = *(_OWORD *)((char *)this + 952);
    v99 = *((_QWORD *)this + 121);
  }
  v50 = *((_QWORD *)this + 123);
  v100 = *((_QWORD *)this + 122);
  v101 = v50;
  if (v50)
  {
    v51 = (unint64_t *)(v50 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = *(_QWORD *)(a2 + 405);
  *(_QWORD *)v93 = *v46;
  *(_QWORD *)&v93[5] = v53;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  sub_20BDE1364(&v94, *(const void **)(a2 + 416), *(_QWORD *)(a2 + 424), (uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 3);
  if (SHIBYTE(v99) < 0)
  {
    if (*((_QWORD *)&v98 + 1))
      goto LABEL_217;
LABEL_219:
    if (v100)
      v54 = nullsub_7;
    else
      v54 = 0;
    goto LABEL_222;
  }
  if (!HIBYTE(v99))
    goto LABEL_219;
LABEL_217:
  v54 = 0;
LABEL_222:
  if (v54)
  {
    if (*(_DWORD *)&v93[8] == 127 || !*(_QWORD *)v93 && v95 == v94)
      v55 = 0;
    else
      v55 = nullsub_13;
    if (v55)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v97);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v97);
  }
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v97);
LABEL_234:
  v56 = (_QWORD *)(a2 + 440);
  if (*(_DWORD *)(a2 + 448) == 127 || !*v56 && *(_QWORD *)(a2 + 464) == *(_QWORD *)(a2 + 456))
    v57 = 0;
  else
    v57 = nullsub_14;
  if (v57)
  {
    if (*((char *)this + 1023) < 0)
    {
      if (!*((_QWORD *)this + 126))
        goto LABEL_244;
    }
    else if (!*((_BYTE *)this + 1023))
    {
LABEL_244:
      if (*((_QWORD *)this + 128))
        goto LABEL_246;
    }
    Alembic::AbcGeom::v12::OCurvesSchema::createOrdersProperty(this);
  }
LABEL_246:
  v58 = *((char *)this + 1023);
  if (v58 < 0)
  {
    if (*((_QWORD *)this + 126))
      goto LABEL_279;
  }
  else if (*((_BYTE *)this + 1023))
  {
    goto LABEL_279;
  }
  if (*((_QWORD *)this + 128))
    v59 = nullsub_7;
  else
    v59 = 0;
  if (!v59)
    goto LABEL_279;
  LODWORD(v88) = *((_DWORD *)this + 248);
  if (v58 < 0)
  {
    sub_20BDDBFAC(&v89, *((void **)this + 125), *((_QWORD *)this + 126));
  }
  else
  {
    v89 = *(_OWORD *)((char *)this + 1000);
    v90 = *((_QWORD *)this + 127);
  }
  v60 = *((_QWORD *)this + 129);
  v91 = *((_QWORD *)this + 128);
  v92 = v60;
  if (v60)
  {
    v61 = (unint64_t *)(v60 + 8);
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = *(_QWORD *)(a2 + 445);
  *(_QWORD *)v84 = *v56;
  *(_QWORD *)&v84[5] = v63;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  sub_20BDE1364(&v85, *(const void **)(a2 + 456), *(_QWORD *)(a2 + 464), (uint64_t)(*(_QWORD *)(a2 + 464) - *(_QWORD *)(a2 + 456)) >> 3);
  if (SHIBYTE(v90) < 0)
  {
    if (*((_QWORD *)&v89 + 1))
      goto LABEL_262;
LABEL_264:
    if (v91)
      v64 = nullsub_7;
    else
      v64 = 0;
    goto LABEL_267;
  }
  if (!HIBYTE(v90))
    goto LABEL_264;
LABEL_262:
  v64 = 0;
LABEL_267:
  if (v64)
  {
    if (*(_DWORD *)&v84[8] == 127 || !*(_QWORD *)v84 && v86 == v85)
      v65 = 0;
    else
      v65 = nullsub_14;
    if (v65)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v88);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v88);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v88);
LABEL_279:
  v66 = (_QWORD *)(a2 + 480);
  if (*(_DWORD *)(a2 + 488) == 127 || !*v66 && *(_QWORD *)(a2 + 504) == *(_QWORD *)(a2 + 496))
    v67 = 0;
  else
    v67 = nullsub_13;
  if (v67)
  {
    if (*((char *)this + 1071) < 0)
    {
      if (!*((_QWORD *)this + 132))
        goto LABEL_289;
    }
    else if (!*((_BYTE *)this + 1071))
    {
LABEL_289:
      if (*((_QWORD *)this + 134))
        goto LABEL_291;
    }
    Alembic::AbcGeom::v12::OCurvesSchema::createKnotsProperty(this);
  }
LABEL_291:
  v68 = *((char *)this + 1071);
  if (v68 < 0)
  {
    if (*((_QWORD *)this + 132))
      goto LABEL_324;
  }
  else if (*((_BYTE *)this + 1071))
  {
    goto LABEL_324;
  }
  if (*((_QWORD *)this + 134))
    v69 = nullsub_7;
  else
    v69 = 0;
  if (v69)
  {
    LODWORD(v79) = *((_DWORD *)this + 260);
    if (v68 < 0)
    {
      sub_20BDDBFAC(&v80, *((void **)this + 131), *((_QWORD *)this + 132));
    }
    else
    {
      v80 = *(_OWORD *)((char *)this + 1048);
      v81 = *((_QWORD *)this + 133);
    }
    v70 = *((_QWORD *)this + 135);
    v82 = *((_QWORD *)this + 134);
    v83 = v70;
    if (v70)
    {
      v71 = (unint64_t *)(v70 + 8);
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    *(_QWORD *)v75 = *v66;
    *(_QWORD *)&v75[5] = *(_QWORD *)(a2 + 485);
    v76 = 0;
    v77 = 0;
    v78 = 0;
    sub_20BDE1364(&v76, *(const void **)(a2 + 496), *(_QWORD *)(a2 + 504), (uint64_t)(*(_QWORD *)(a2 + 504) - *(_QWORD *)(a2 + 496)) >> 3);
    if (SHIBYTE(v81) < 0)
    {
      if (*((_QWORD *)&v80 + 1))
        goto LABEL_307;
    }
    else if (HIBYTE(v81))
    {
LABEL_307:
      v73 = 0;
LABEL_312:
      if (v73)
      {
        if (*(_DWORD *)&v75[8] == 127 || !*(_QWORD *)v75 && v77 == v76)
          v74 = 0;
        else
          v74 = nullsub_13;
        if (v74)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v79);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v79);
      }
      if (v76)
      {
        v77 = v76;
        operator delete(v76);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v79);
      goto LABEL_324;
    }
    if (v82)
      v73 = nullsub_7;
    else
      v73 = 0;
    goto LABEL_312;
  }
LABEL_324:
  ++*((_QWORD *)this + 44);
}

void sub_20BE24F5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57)
{
  uint64_t v57;
  void *v59;

  v59 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v57 - 64, (uint64_t)v59);
  else
    sub_20BE02504(v57 - 64, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE24F44);
}

void sub_20BE250A8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OCurvesSchema::calcBasisAndType(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  char v3;

  *a2 = *(_DWORD *)(a3 + 120);
  a2[1] = *(_DWORD *)(a3 + 124);
  v3 = *(_BYTE *)(a3 + 392);
  a2[2] = v3;
  a2[3] = v3;
}

void Alembic::AbcGeom::v12::OCurvesSchema::createVelocityProperty(Alembic::AbcGeom::v12::OCurvesSchema *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  int v17;
  void *__p;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v23;
  std::string v24;
  uint64_t v25;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v21 = *((_QWORD *)this + 5);
  v22 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(&__p, ".velocities");
  v5 = *((_DWORD *)this + 90);
  LODWORD(v16) = 2;
  v17 = v5;
  LODWORD(v14) = 0;
  v15 = 0;
  LODWORD(v12) = 0;
  v13 = 0;
  LODWORD(v10) = 0;
  v11 = 0;
  sub_20BE2A6A0((uint64_t)&v23, &v21, (uint64_t)&__p, &v16, &v14, &v12, &v10);
  *((_DWORD *)this + 224) = (_DWORD)v23;
  std::string::operator=((std::string *)((char *)this + 904), &v24);
  sub_20BDE881C((_QWORD *)this + 116, &v25);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v23);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  v6 = v22;
  if (v22)
  {
    v7 = (unint64_t *)&v22->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_20BE29E5C(&v23, (uint64_t *)&__p);
  if (*((_QWORD *)this + 44))
  {
    v9 = 0;
    do
    {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 896);
      ++v9;
    }
    while (v9 < *((_QWORD *)this + 44));
  }
  if (v24.__r_.__value_.__l.__size_)
  {
    v24.__r_.__value_.__r.__words[2] = v24.__r_.__value_.__l.__size_;
    operator delete((void *)v24.__r_.__value_.__l.__size_);
  }
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
}

void sub_20BE25264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::OCurvesSchema::createUVsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t *v29;
  int v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  void *__dst[2];
  void *v38;
  _BYTE *v39;
  std::string v40;
  void *__p;
  _BYTE *v42;
  void *v43;
  std::string v44;
  uint64_t v45[2];
  uint64_t v46;
  int v47;
  std::string v48;
  uint64_t v49[2];
  uint64_t *v50;
  uint64_t *v51;
  void *v52;
  void *v53;
  _BYTE v54[13];
  _BYTE *v55;
  _BYTE *v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[24];
  void *v60;
  void *v61;
  uint64_t v62;
  int data;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;

  v67 = 0;
  v68 = 0;
  v69 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  *(_QWORD *)&v57 = 0;
  *((_QWORD *)&v57 + 1) = 0x20000000ALL;
  v58 = 0u;
  *(_OWORD *)v59 = 0u;
  *(_QWORD *)&v59[16] = 0x100000005;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  data = 127;
  if (*(_DWORD *)(a2 + 264) == 127 || !*(_QWORD *)(a2 + 256) && *(_QWORD *)(a2 + 280) == *(_QWORD *)(a2 + 272))
    v4 = 0;
  else
    v4 = nullsub_21;
  if (v4)
  {
    sub_20BE2ACE4(v54, (uint64_t *)&v67);
    sub_20BE2AD84(&v50, (uint64_t *)&v64);
    sub_20BE2AE24((uint64_t)__dst, (uint64_t *)v54, (uint64_t *)&v50, *(_DWORD *)(a2 + 296));
    *(void **)&v57 = __dst[0];
    *(void **)((char *)&v57 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v58, (char *)v38, (uint64_t)v39, (v39 - (_BYTE *)v38) >> 3);
    *(_QWORD *)&v59[8] = v40.__r_.__value_.__l.__size_;
    *(_QWORD *)&v59[13] = *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v60, (char *)__p, (uint64_t)v42, (v42 - (_BYTE *)__p) >> 3);
    data = (int)v44.__r_.__value_.__l.__data_;
    if (__p)
    {
      v42 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    if (v52)
    {
      v53 = v52;
      operator delete(v52);
    }
    if (v55)
    {
      v56 = v55;
      operator delete(v55);
    }
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    v35 = *(uint64_t **)(a1 + 40);
    v36 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    sub_20BDDC0E4(v54, "uv");
    v8 = data;
    sub_20BE28D6C(a1, &v33);
    LODWORD(v50) = 4;
    v51 = &v33;
    LODWORD(v31) = 0;
    v32 = 0;
    LODWORD(v29) = 0;
    v30 = 0;
    sub_20BE2AED4((char *)__dst, &v35, (uint64_t)v54, 1, v8, 1, &v50, &v31, &v29);
    v9 = (void **)(a1 + 368);
    if (*(char *)(a1 + 391) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 384) = v38;
    HIBYTE(v38) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 392) = (_DWORD)v39;
    std::string::operator=((std::string *)(a1 + 400), &v40);
    sub_20BDE881C((_QWORD *)(a1 + 424), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 440) = (_DWORD)v43;
    std::string::operator=((std::string *)(a1 + 448), &v44);
    sub_20BDE881C((_QWORD *)(a1 + 472), v45);
    *(_QWORD *)(a1 + 488) = v46;
    *(_DWORD *)(a1 + 496) = v47;
    std::string::operator=((std::string *)(a1 + 504), &v48);
    sub_20BDE881C((_QWORD *)(a1 + 528), v49);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v47);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v43);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v39);
    if (SHIBYTE(v38) < 0)
      operator delete(__dst[0]);
    v10 = v34;
    if (v34)
    {
      v11 = (unint64_t *)&v34->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (SHIBYTE(v55) < 0)
      operator delete(*(void **)v54);
    v13 = v36;
    if (v36)
    {
      v14 = (unint64_t *)&v36->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      goto LABEL_56;
    }
  }
  else
  {
    sub_20BE2ACE4(v54, (uint64_t *)&v67);
    v16 = *(_DWORD *)(a2 + 296);
    __dst[0] = *(void **)v54;
    *(void **)((char *)__dst + 5) = *(void **)&v54[5];
    v38 = 0;
    v39 = 0;
    v40.__r_.__value_.__r.__words[0] = 0;
    sub_20BDE1364(&v38, v55, (uint64_t)v56, (v56 - v55) >> 3);
    v40.__r_.__value_.__l.__size_ = 0;
    v40.__r_.__value_.__r.__words[2] = 0x100000005;
    v42 = 0;
    v43 = 0;
    __p = 0;
    LODWORD(v44.__r_.__value_.__l.__data_) = v16;
    *(void **)&v57 = __dst[0];
    *(void **)((char *)&v57 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v58, (char *)v38, (uint64_t)v39, (v39 - (_BYTE *)v38) >> 3);
    *(_QWORD *)&v59[8] = v40.__r_.__value_.__l.__size_;
    *(_QWORD *)&v59[13] = *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v60, (char *)__p, (uint64_t)v42, (v42 - (_BYTE *)__p) >> 3);
    data = (int)v44.__r_.__value_.__l.__data_;
    if (__p)
    {
      v42 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    if (v55)
    {
      v56 = v55;
      operator delete(v55);
    }
    v17 = *(std::__shared_weak_count **)(a1 + 48);
    v27 = *(uint64_t **)(a1 + 40);
    v28 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    sub_20BDDC0E4(v54, "uv");
    v20 = data;
    sub_20BE28D6C(a1, &v33);
    LODWORD(v50) = 4;
    v51 = &v33;
    LODWORD(v31) = 0;
    v32 = 0;
    LODWORD(v29) = 0;
    v30 = 0;
    sub_20BE2AED4((char *)__dst, &v27, (uint64_t)v54, 0, v20, 1, &v50, &v31, &v29);
    v21 = (void **)(a1 + 368);
    if (*(char *)(a1 + 391) < 0)
      operator delete(*v21);
    *(_OWORD *)v21 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 384) = v38;
    HIBYTE(v38) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 392) = (_DWORD)v39;
    std::string::operator=((std::string *)(a1 + 400), &v40);
    sub_20BDE881C((_QWORD *)(a1 + 424), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 440) = (_DWORD)v43;
    std::string::operator=((std::string *)(a1 + 448), &v44);
    sub_20BDE881C((_QWORD *)(a1 + 472), v45);
    *(_QWORD *)(a1 + 488) = v46;
    *(_DWORD *)(a1 + 496) = v47;
    std::string::operator=((std::string *)(a1 + 504), &v48);
    sub_20BDE881C((_QWORD *)(a1 + 528), v49);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v47);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v43);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v39);
    if (SHIBYTE(v38) < 0)
      operator delete(__dst[0]);
    v22 = v34;
    if (v34)
    {
      v23 = (unint64_t *)&v34->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (SHIBYTE(v55) < 0)
      operator delete(*(void **)v54);
    v13 = v28;
    if (v28)
    {
      v25 = (unint64_t *)&v28->__shared_owners_;
      do
        v15 = __ldaxr(v25);
      while (__stlxr(v15 - 1, v25));
LABEL_56:
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  if (*(_QWORD *)(a1 + 352))
  {
    v26 = 0;
    do
    {
      sub_20BE2717C(a1 + 368, (uint64_t)&v57);
      ++v26;
    }
    while (v26 < *(_QWORD *)(a1 + 352));
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if ((_QWORD)v58)
  {
    *((_QWORD *)&v58 + 1) = v58;
    operator delete((void *)v58);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
}

void sub_20BE25940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  uint64_t v45;
  void *v47;
  void *v48;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a16);
  if (*(char *)(v45 - 217) < 0)
    operator delete(*(void **)(v45 - 240));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  sub_20BE28D2C((_QWORD *)(v45 - 200));
  v47 = *(void **)(v45 - 112);
  if (v47)
  {
    *(_QWORD *)(v45 - 104) = v47;
    operator delete(v47);
  }
  v48 = *(void **)(v45 - 88);
  if (v48)
  {
    *(_QWORD *)(v45 - 80) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OCurvesSchema::createNormalsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t *v29;
  int v30;
  uint64_t *v31;
  int v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  void *__dst[2];
  void *v36;
  _BYTE *v37;
  std::string v38;
  void *__p;
  _BYTE *v40;
  void *v41;
  std::string v42;
  uint64_t v43[2];
  uint64_t v44;
  int v45;
  std::string v46;
  uint64_t v47[2];
  uint64_t v48;
  std::__shared_weak_count *v49;
  void *v50;
  void *v51;
  uint64_t *v52;
  uint64_t *v53;
  void *v54;
  void *v55;
  _BYTE v56[13];
  _BYTE *v57;
  _BYTE *v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[24];
  void *v62;
  void *v63;
  uint64_t v64;
  int data;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;

  v69 = 0;
  v70 = 0;
  v71 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  *(_QWORD *)&v59 = 0;
  *((_QWORD *)&v59 + 1) = 0x30000000ALL;
  v60 = 0u;
  *(_OWORD *)v61 = 0u;
  *(_QWORD *)&v61[16] = 0x100000005;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  data = 127;
  if (*(_DWORD *)(a2 + 352) == 127 || !*(_QWORD *)(a2 + 344) && *(_QWORD *)(a2 + 368) == *(_QWORD *)(a2 + 360))
    v4 = 0;
  else
    v4 = nullsub_21;
  if (v4)
  {
    sub_20BE29E5C(&v52, (uint64_t *)&v69);
    sub_20BE2C884(v56, (uint64_t *)&v52);
    sub_20BE2AD84(&v48, (uint64_t *)&v66);
    sub_20BE2C9F0((uint64_t)__dst, (uint64_t *)v56, &v48, *(_DWORD *)(a2 + 384));
    *(void **)&v59 = __dst[0];
    *(void **)((char *)&v59 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v60, (char *)v36, (uint64_t)v37, (v37 - (_BYTE *)v36) >> 3);
    *(_QWORD *)&v61[8] = v38.__r_.__value_.__l.__size_;
    *(_QWORD *)&v61[13] = *(std::string::size_type *)((char *)&v38.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v62, (char *)__p, (uint64_t)v40, (v40 - (_BYTE *)__p) >> 3);
    data = (int)v42.__r_.__value_.__l.__data_;
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    if (v36)
    {
      v37 = v36;
      operator delete(v36);
    }
    if (v50)
    {
      v51 = v50;
      operator delete(v50);
    }
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    v33 = *(uint64_t **)(a1 + 40);
    v34 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    sub_20BDDC0E4(v56, "N");
    v8 = data;
    sub_20BE28D6C(a1, &v48);
    LODWORD(v52) = 4;
    v53 = &v48;
    LODWORD(v31) = 0;
    v32 = 0;
    LODWORD(v29) = 0;
    v30 = 0;
    sub_20BE2CAA0((char *)__dst, &v33, (uint64_t)v56, 1, v8, 1, &v52, &v31, &v29);
    v9 = (void **)(a1 + 544);
    if (*(char *)(a1 + 567) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 560) = v36;
    HIBYTE(v36) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 568) = (_DWORD)v37;
    std::string::operator=((std::string *)(a1 + 576), &v38);
    sub_20BDE881C((_QWORD *)(a1 + 600), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 616) = (_DWORD)v41;
    std::string::operator=((std::string *)(a1 + 624), &v42);
    sub_20BDE881C((_QWORD *)(a1 + 648), v43);
    *(_QWORD *)(a1 + 664) = v44;
    *(_DWORD *)(a1 + 672) = v45;
    std::string::operator=((std::string *)(a1 + 680), &v46);
    sub_20BDE881C((_QWORD *)(a1 + 704), v47);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v45);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v41);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v37);
    if (SHIBYTE(v36) < 0)
      operator delete(__dst[0]);
    v10 = v49;
    if (v49)
    {
      v11 = (unint64_t *)&v49->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (SHIBYTE(v57) < 0)
      operator delete(*(void **)v56);
    v13 = v34;
    if (v34)
    {
      v14 = (unint64_t *)&v34->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      goto LABEL_60;
    }
  }
  else
  {
    sub_20BE29E5C(&v52, (uint64_t *)&v69);
    sub_20BE2C884(v56, (uint64_t *)&v52);
    v16 = *(_DWORD *)(a2 + 384);
    __dst[0] = *(void **)v56;
    *(void **)((char *)__dst + 5) = *(void **)&v56[5];
    v36 = 0;
    v37 = 0;
    v38.__r_.__value_.__r.__words[0] = 0;
    sub_20BDE1364(&v36, v57, (uint64_t)v58, (v58 - v57) >> 3);
    v38.__r_.__value_.__l.__size_ = 0;
    v38.__r_.__value_.__r.__words[2] = 0x100000005;
    v40 = 0;
    v41 = 0;
    __p = 0;
    LODWORD(v42.__r_.__value_.__l.__data_) = v16;
    *(void **)&v59 = __dst[0];
    *(void **)((char *)&v59 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v60, (char *)v36, (uint64_t)v37, (v37 - (_BYTE *)v36) >> 3);
    *(_QWORD *)&v61[8] = v38.__r_.__value_.__l.__size_;
    *(_QWORD *)&v61[13] = *(std::string::size_type *)((char *)&v38.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v62, (char *)__p, (uint64_t)v40, (v40 - (_BYTE *)__p) >> 3);
    data = (int)v42.__r_.__value_.__l.__data_;
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    if (v36)
    {
      v37 = v36;
      operator delete(v36);
    }
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    v17 = *(std::__shared_weak_count **)(a1 + 48);
    v27 = *(uint64_t **)(a1 + 40);
    v28 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    sub_20BDDC0E4(v56, "N");
    v20 = data;
    sub_20BE28D6C(a1, &v48);
    LODWORD(v52) = 4;
    v53 = &v48;
    LODWORD(v31) = 0;
    v32 = 0;
    LODWORD(v29) = 0;
    v30 = 0;
    sub_20BE2CAA0((char *)__dst, &v27, (uint64_t)v56, 0, v20, 1, &v52, &v31, &v29);
    v21 = (void **)(a1 + 544);
    if (*(char *)(a1 + 567) < 0)
      operator delete(*v21);
    *(_OWORD *)v21 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 560) = v36;
    HIBYTE(v36) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 568) = (_DWORD)v37;
    std::string::operator=((std::string *)(a1 + 576), &v38);
    sub_20BDE881C((_QWORD *)(a1 + 600), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 616) = (_DWORD)v41;
    std::string::operator=((std::string *)(a1 + 624), &v42);
    sub_20BDE881C((_QWORD *)(a1 + 648), v43);
    *(_QWORD *)(a1 + 664) = v44;
    *(_DWORD *)(a1 + 672) = v45;
    std::string::operator=((std::string *)(a1 + 680), &v46);
    sub_20BDE881C((_QWORD *)(a1 + 704), v47);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v45);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v41);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v37);
    if (SHIBYTE(v36) < 0)
      operator delete(__dst[0]);
    v22 = v49;
    if (v49)
    {
      v23 = (unint64_t *)&v49->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (SHIBYTE(v57) < 0)
      operator delete(*(void **)v56);
    v13 = v28;
    if (v28)
    {
      v25 = (unint64_t *)&v28->__shared_owners_;
      do
        v15 = __ldaxr(v25);
      while (__stlxr(v15 - 1, v25));
LABEL_60:
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  if (*(_QWORD *)(a1 + 352))
  {
    v26 = 0;
    do
    {
      sub_20BE27540(a1 + 544, (uint64_t)&v59);
      ++v26;
    }
    while (v26 < *(_QWORD *)(a1 + 352));
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if ((_QWORD)v60)
  {
    *((_QWORD *)&v60 + 1) = v60;
    operator delete((void *)v60);
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
}

void sub_20BE26104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  uint64_t v49;
  void *v51;
  void *v52;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a41);
  if (*(char *)(v49 - 217) < 0)
    operator delete(*(void **)(v49 - 240));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  sub_20BE28D2C((_QWORD *)(v49 - 200));
  v51 = *(void **)(v49 - 112);
  if (v51)
  {
    *(_QWORD *)(v49 - 104) = v51;
    operator delete(v51);
  }
  v52 = *(void **)(v49 - 88);
  if (v52)
  {
    *(_QWORD *)(v49 - 80) = v52;
    operator delete(v52);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OCurvesSchema::createWidthProperty(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t *v29;
  int v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  void *__dst[2];
  void *v38;
  _BYTE *v39;
  std::string v40;
  void *__p;
  _BYTE *v42;
  void *v43;
  std::string v44;
  uint64_t v45[2];
  uint64_t v46;
  int v47;
  std::string v48;
  uint64_t v49[2];
  uint64_t *v50;
  uint64_t *v51;
  void *v52;
  void *v53;
  _BYTE v54[13];
  _BYTE *v55;
  _BYTE *v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[24];
  void *v60;
  void *v61;
  uint64_t v62;
  int data;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;

  v67 = 0;
  v68 = 0;
  v69 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  *(_QWORD *)&v57 = 0;
  *((_QWORD *)&v57 + 1) = 0x10000000ALL;
  v58 = 0u;
  *(_OWORD *)v59 = 0u;
  *(_QWORD *)&v59[16] = 0x100000005;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  data = 127;
  if (*(_DWORD *)(a2 + 176) == 127 || !*(_QWORD *)(a2 + 168) && *(_QWORD *)(a2 + 192) == *(_QWORD *)(a2 + 184))
    v4 = 0;
  else
    v4 = nullsub_21;
  if (v4)
  {
    sub_20BE2DEC0(v54, (uint64_t *)&v67);
    sub_20BE2AD84(&v50, (uint64_t *)&v64);
    sub_20BE2DF60((uint64_t)__dst, (uint64_t *)v54, (uint64_t *)&v50, *(_DWORD *)(a2 + 208));
    *(void **)&v57 = __dst[0];
    *(void **)((char *)&v57 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v58, (char *)v38, (uint64_t)v39, (v39 - (_BYTE *)v38) >> 3);
    *(_QWORD *)&v59[8] = v40.__r_.__value_.__l.__size_;
    *(_QWORD *)&v59[13] = *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v60, (char *)__p, (uint64_t)v42, (v42 - (_BYTE *)__p) >> 3);
    data = (int)v44.__r_.__value_.__l.__data_;
    if (__p)
    {
      v42 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    if (v52)
    {
      v53 = v52;
      operator delete(v52);
    }
    if (v55)
    {
      v56 = v55;
      operator delete(v55);
    }
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    v35 = *(uint64_t **)(a1 + 40);
    v36 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    sub_20BDDC0E4(v54, "width");
    v8 = *(_DWORD *)(a2 + 208);
    sub_20BE28D6C(a1, &v33);
    LODWORD(v50) = 4;
    v51 = &v33;
    LODWORD(v31) = 0;
    v32 = 0;
    LODWORD(v29) = 0;
    v30 = 0;
    sub_20BE2E010((char *)__dst, &v35, (uint64_t)v54, 1, v8, 1, &v50, &v31, &v29);
    v9 = (void **)(a1 + 720);
    if (*(char *)(a1 + 743) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 736) = v38;
    HIBYTE(v38) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 744) = (_DWORD)v39;
    std::string::operator=((std::string *)(a1 + 752), &v40);
    sub_20BDE881C((_QWORD *)(a1 + 776), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 792) = (_DWORD)v43;
    std::string::operator=((std::string *)(a1 + 800), &v44);
    sub_20BDE881C((_QWORD *)(a1 + 824), v45);
    *(_QWORD *)(a1 + 840) = v46;
    *(_DWORD *)(a1 + 848) = v47;
    std::string::operator=((std::string *)(a1 + 856), &v48);
    sub_20BDE881C((_QWORD *)(a1 + 880), v49);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v47);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v43);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v39);
    if (SHIBYTE(v38) < 0)
      operator delete(__dst[0]);
    v10 = v34;
    if (v34)
    {
      v11 = (unint64_t *)&v34->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (SHIBYTE(v55) < 0)
      operator delete(*(void **)v54);
    v13 = v36;
    if (v36)
    {
      v14 = (unint64_t *)&v36->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      goto LABEL_56;
    }
  }
  else
  {
    sub_20BE2DEC0(v54, (uint64_t *)&v67);
    v16 = *(_DWORD *)(a2 + 208);
    __dst[0] = *(void **)v54;
    *(void **)((char *)__dst + 5) = *(void **)&v54[5];
    v38 = 0;
    v39 = 0;
    v40.__r_.__value_.__r.__words[0] = 0;
    sub_20BDE1364(&v38, v55, (uint64_t)v56, (v56 - v55) >> 3);
    v40.__r_.__value_.__l.__size_ = 0;
    v40.__r_.__value_.__r.__words[2] = 0x100000005;
    v42 = 0;
    v43 = 0;
    __p = 0;
    LODWORD(v44.__r_.__value_.__l.__data_) = v16;
    *(void **)&v57 = __dst[0];
    *(void **)((char *)&v57 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v58, (char *)v38, (uint64_t)v39, (v39 - (_BYTE *)v38) >> 3);
    *(_QWORD *)&v59[8] = v40.__r_.__value_.__l.__size_;
    *(_QWORD *)&v59[13] = *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v60, (char *)__p, (uint64_t)v42, (v42 - (_BYTE *)__p) >> 3);
    data = (int)v44.__r_.__value_.__l.__data_;
    if (__p)
    {
      v42 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    if (v55)
    {
      v56 = v55;
      operator delete(v55);
    }
    v17 = *(std::__shared_weak_count **)(a1 + 48);
    v27 = *(uint64_t **)(a1 + 40);
    v28 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    sub_20BDDC0E4(v54, "width");
    v20 = *(_DWORD *)(a2 + 208);
    sub_20BE28D6C(a1, &v33);
    LODWORD(v50) = 4;
    v51 = &v33;
    LODWORD(v31) = 0;
    v32 = 0;
    LODWORD(v29) = 0;
    v30 = 0;
    sub_20BE2E010((char *)__dst, &v27, (uint64_t)v54, 0, v20, 1, &v50, &v31, &v29);
    v21 = (void **)(a1 + 720);
    if (*(char *)(a1 + 743) < 0)
      operator delete(*v21);
    *(_OWORD *)v21 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 736) = v38;
    HIBYTE(v38) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 744) = (_DWORD)v39;
    std::string::operator=((std::string *)(a1 + 752), &v40);
    sub_20BDE881C((_QWORD *)(a1 + 776), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 792) = (_DWORD)v43;
    std::string::operator=((std::string *)(a1 + 800), &v44);
    sub_20BDE881C((_QWORD *)(a1 + 824), v45);
    *(_QWORD *)(a1 + 840) = v46;
    *(_DWORD *)(a1 + 848) = v47;
    std::string::operator=((std::string *)(a1 + 856), &v48);
    sub_20BDE881C((_QWORD *)(a1 + 880), v49);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v47);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v43);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v39);
    if (SHIBYTE(v38) < 0)
      operator delete(__dst[0]);
    v22 = v34;
    if (v34)
    {
      v23 = (unint64_t *)&v34->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (SHIBYTE(v55) < 0)
      operator delete(*(void **)v54);
    v13 = v28;
    if (v28)
    {
      v25 = (unint64_t *)&v28->__shared_owners_;
      do
        v15 = __ldaxr(v25);
      while (__stlxr(v15 - 1, v25));
LABEL_56:
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  if (*(_QWORD *)(a1 + 352))
  {
    v26 = 0;
    do
    {
      sub_20BE27904(a1 + 720, (uint64_t)&v57);
      ++v26;
    }
    while (v26 < *(_QWORD *)(a1 + 352));
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if ((_QWORD)v58)
  {
    *((_QWORD *)&v58 + 1) = v58;
    operator delete((void *)v58);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
}

void sub_20BE268B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  uint64_t v45;
  void *v47;
  void *v48;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a16);
  if (*(char *)(v45 - 233) < 0)
    operator delete(*(void **)(v45 - 256));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  sub_20BE28D2C((_QWORD *)(v45 - 216));
  v47 = *(void **)(v45 - 128);
  if (v47)
  {
    *(_QWORD *)(v45 - 120) = v47;
    operator delete(v47);
  }
  v48 = *(void **)(v45 - 104);
  if (v48)
  {
    *(_QWORD *)(v45 - 96) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OCurvesSchema::createPositionWeightsProperty(Alembic::AbcGeom::v12::OCurvesSchema *this)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15[2];
  void *__p;
  void *v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  std::string v25;
  uint64_t v26;

  v19 = *((_DWORD *)this + 2);
  if (*((char *)this + 39) < 0)
  {
    sub_20BDDBFAC(&v20, *((void **)this + 2), *((_QWORD *)this + 3));
  }
  else
  {
    v20 = *((_OWORD *)this + 1);
    v21 = *((_QWORD *)this + 4);
  }
  v2 = *((_QWORD *)this + 6);
  v22 = *((_QWORD *)this + 5);
  v23 = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  sub_20BDDC0E4(&__p, "w");
  sub_20BE28D6C((uint64_t)this, &v13);
  LODWORD(v15[0]) = 4;
  v15[1] = &v13;
  LODWORD(v11) = 0;
  v12 = 0;
  LODWORD(v9) = 0;
  v10 = 0;
  sub_20BE2F274((uint64_t)&v24, &v19, (uint64_t)&__p, v15, &v11, &v9);
  *((_DWORD *)this + 236) = (_DWORD)v24;
  std::string::operator=((std::string *)((char *)this + 952), &v25);
  sub_20BDE881C((_QWORD *)this + 122, &v26);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v24);
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v19);
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_20BE2DEC0(&v24, (uint64_t *)&__p);
  if (*((_QWORD *)this + 44))
  {
    v8 = 0;
    do
    {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 944);
      ++v8;
    }
    while (v8 < *((_QWORD *)this + 44));
  }
  if (v25.__r_.__value_.__l.__size_)
  {
    v25.__r_.__value_.__r.__words[2] = v25.__r_.__value_.__l.__size_;
    operator delete((void *)v25.__r_.__value_.__l.__size_);
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20BE26B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::OCurvesSchema::createOrdersProperty(Alembic::AbcGeom::v12::OCurvesSchema *this)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15[2];
  void *__p;
  void *v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  std::string v25;
  uint64_t v26;

  v19 = *((_DWORD *)this + 2);
  if (*((char *)this + 39) < 0)
  {
    sub_20BDDBFAC(&v20, *((void **)this + 2), *((_QWORD *)this + 3));
  }
  else
  {
    v20 = *((_OWORD *)this + 1);
    v21 = *((_QWORD *)this + 4);
  }
  v2 = *((_QWORD *)this + 6);
  v22 = *((_QWORD *)this + 5);
  v23 = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  sub_20BDDC0E4(&__p, ".orders");
  sub_20BE28D6C((uint64_t)this, &v13);
  LODWORD(v15[0]) = 4;
  v15[1] = &v13;
  LODWORD(v11) = 0;
  v12 = 0;
  LODWORD(v9) = 0;
  v10 = 0;
  sub_20BE2F37C((uint64_t)&v24, &v19, (uint64_t)&__p, v15, &v11, &v9);
  *((_DWORD *)this + 248) = (_DWORD)v24;
  std::string::operator=((std::string *)((char *)this + 1000), &v25);
  sub_20BDE881C((_QWORD *)this + 128, &v26);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v24);
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v19);
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_20BE2F908(&v24, (uint64_t *)&__p);
  if (*((_QWORD *)this + 44))
  {
    v8 = 0;
    do
    {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 992);
      ++v8;
    }
    while (v8 < *((_QWORD *)this + 44));
  }
  if (v25.__r_.__value_.__l.__size_)
  {
    v25.__r_.__value_.__r.__words[2] = v25.__r_.__value_.__l.__size_;
    operator delete((void *)v25.__r_.__value_.__l.__size_);
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20BE26DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::OCurvesSchema::createKnotsProperty(Alembic::AbcGeom::v12::OCurvesSchema *this)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15[2];
  void *__p;
  void *v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  std::string v25;
  uint64_t v26;

  v19 = *((_DWORD *)this + 2);
  if (*((char *)this + 39) < 0)
  {
    sub_20BDDBFAC(&v20, *((void **)this + 2), *((_QWORD *)this + 3));
  }
  else
  {
    v20 = *((_OWORD *)this + 1);
    v21 = *((_QWORD *)this + 4);
  }
  v2 = *((_QWORD *)this + 6);
  v22 = *((_QWORD *)this + 5);
  v23 = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  sub_20BDDC0E4(&__p, ".knots");
  sub_20BE28D6C((uint64_t)this, &v13);
  LODWORD(v15[0]) = 4;
  v15[1] = &v13;
  LODWORD(v11) = 0;
  v12 = 0;
  LODWORD(v9) = 0;
  v10 = 0;
  sub_20BE2F274((uint64_t)&v24, &v19, (uint64_t)&__p, v15, &v11, &v9);
  *((_DWORD *)this + 260) = (_DWORD)v24;
  std::string::operator=((std::string *)((char *)this + 1048), &v25);
  sub_20BDE881C((_QWORD *)this + 134, &v26);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v24);
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v19);
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_20BE2DEC0(&v24, (uint64_t *)&__p);
  if (*((_QWORD *)this + 44))
  {
    v8 = 0;
    do
    {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1040);
      ++v8;
    }
    while (v8 < *((_QWORD *)this + 44));
  }
  if (v25.__r_.__value_.__l.__size_)
  {
    v25.__r_.__value_.__r.__words[2] = v25.__r_.__value_.__l.__size_;
    operator delete((void *)v25.__r_.__value_.__l.__size_);
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20BE26FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BE27074@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  *(int64x2_t *)a2 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a2 + 16) = xmmword_20CA521E0;
  *(int64x2_t *)(a2 + 32) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v2 = (uint64_t *)result[2];
  v3 = result[3] - (_QWORD)v2;
  if (v3)
  {
    v4 = v3 >> 3;
    if (v4 <= 1)
      v4 = 1;
    v5 = 1;
    do
    {
      v6 = v5;
      v8 = *v2++;
      v7 = v8;
      v5 *= v8;
      --v4;
    }
    while (v4);
    if (v5)
    {
      v9 = v6 * v7;
      v10 = (float *)(*result + 8);
      v11 = -1.79769313e308;
      v12 = 1.79769313e308;
      v13 = 1.79769313e308;
      v14 = 1.79769313e308;
      v15 = -1.79769313e308;
      v16 = -1.79769313e308;
      do
      {
        v17 = *(v10 - 2);
        if (v14 > v17)
        {
          *(double *)a2 = v17;
          v14 = v17;
        }
        if (v11 < v17)
        {
          *(double *)(a2 + 24) = v17;
          v11 = v17;
        }
        v18 = *(v10 - 1);
        if (v13 > v18)
        {
          *(double *)(a2 + 8) = v18;
          v13 = v18;
        }
        if (v15 < v18)
        {
          *(double *)(a2 + 32) = v18;
          v15 = v18;
        }
        v19 = *v10;
        if (v12 > v19)
        {
          *(double *)(a2 + 16) = v19;
          v12 = v19;
        }
        if (v16 < v19)
        {
          *(double *)(a2 + 40) = v19;
          v16 = v19;
        }
        v10 += 3;
        --v9;
      }
      while (v9);
    }
  }
  return result;
}

void sub_20BE2717C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t (*v10)();
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t (*v14)();
  uint64_t (*v15)();
  _BYTE v16[13];
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[13];
  void *__p;
  void *v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;

  v4 = a1 + 24;
  v34 = a1 + 24;
  v35 = "OTypedGeomParam::set()";
  if (!Alembic::Abc::v12::OArrayProperty::getNumSamples((Alembic::Abc::v12::OArrayProperty *)(a1 + 24)))
  {
    Alembic::Abc::v12::OArrayProperty::set(v4);
    if (*(_BYTE *)(a1 + 120))
      Alembic::Abc::v12::OArrayProperty::set(a1 + 72);
    return;
  }
  LODWORD(v29) = *(_DWORD *)(a1 + 24);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_20BDDBFAC(&v30, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    v30 = *(_OWORD *)(a1 + 32);
    v31 = *(_QWORD *)(a1 + 48);
  }
  v5 = *(_QWORD *)(a1 + 64);
  v32 = *(_QWORD *)(a1 + 56);
  v33 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(a2 + 5);
  *(_QWORD *)v25 = *(_QWORD *)a2;
  *(_QWORD *)&v25[5] = v8;
  __p = 0;
  v27 = 0;
  v28 = 0;
  sub_20BDE1364(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  if (SHIBYTE(v31) < 0)
  {
    if (*((_QWORD *)&v30 + 1))
      goto LABEL_12;
  }
  else if (HIBYTE(v31))
  {
LABEL_12:
    v9 = 0;
    goto LABEL_17;
  }
  if (v32)
    v9 = nullsub_7;
  else
    v9 = 0;
LABEL_17:
  if (v9)
  {
    if (*(_DWORD *)&v25[8] == 127 || !*(_QWORD *)v25 && v27 == __p)
      v10 = 0;
    else
      v10 = nullsub_8;
    if (v10)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v29);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v29);
  }
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v29);
  if (*(_BYTE *)(a1 + 120))
  {
    LODWORD(v20) = *(_DWORD *)(a1 + 72);
    if (*(char *)(a1 + 103) < 0)
    {
      sub_20BDDBFAC(&v21, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v21 = *(_OWORD *)(a1 + 80);
      v22 = *(_QWORD *)(a1 + 96);
    }
    v11 = *(_QWORD *)(a1 + 112);
    v23 = *(_QWORD *)(a1 + 104);
    v24 = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    *(_QWORD *)v16 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)&v16[5] = *(_QWORD *)(a2 + 45);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    sub_20BDE1364(&v17, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    if (SHIBYTE(v22) < 0)
    {
      if (*((_QWORD *)&v21 + 1))
        goto LABEL_37;
    }
    else if (HIBYTE(v22))
    {
LABEL_37:
      v14 = 0;
LABEL_42:
      if (v14)
      {
        if (*(_DWORD *)&v16[8] == 127 || !*(_QWORD *)v16 && v18 == v17)
          v15 = 0;
        else
          v15 = nullsub_21;
        if (v15)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v20);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v20);
      }
      if (v17)
      {
        v18 = v17;
        operator delete(v17);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v20);
      return;
    }
    if (v23)
      v14 = nullsub_7;
    else
      v14 = 0;
    goto LABEL_42;
  }
}

void sub_20BE27474(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v27;
  uint64_t v28;

  if (__p)
    operator delete(__p);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&a14);
  v27 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v28 = (uint64_t)v27;
    sub_20BE29790(v23);
    sub_20BE02570(v24 - 48, v28);
  }
  else
  {
    sub_20BE29790(v23);
    sub_20BE02504(v24 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE27460);
}

void sub_20BE27520(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE27540(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t (*v10)();
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t (*v14)();
  uint64_t (*v15)();
  _BYTE v16[13];
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[13];
  void *__p;
  void *v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;

  v4 = a1 + 24;
  v34 = a1 + 24;
  v35 = "OTypedGeomParam::set()";
  if (!Alembic::Abc::v12::OArrayProperty::getNumSamples((Alembic::Abc::v12::OArrayProperty *)(a1 + 24)))
  {
    Alembic::Abc::v12::OArrayProperty::set(v4);
    if (*(_BYTE *)(a1 + 120))
      Alembic::Abc::v12::OArrayProperty::set(a1 + 72);
    return;
  }
  LODWORD(v29) = *(_DWORD *)(a1 + 24);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_20BDDBFAC(&v30, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    v30 = *(_OWORD *)(a1 + 32);
    v31 = *(_QWORD *)(a1 + 48);
  }
  v5 = *(_QWORD *)(a1 + 64);
  v32 = *(_QWORD *)(a1 + 56);
  v33 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(a2 + 5);
  *(_QWORD *)v25 = *(_QWORD *)a2;
  *(_QWORD *)&v25[5] = v8;
  __p = 0;
  v27 = 0;
  v28 = 0;
  sub_20BDE1364(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  if (SHIBYTE(v31) < 0)
  {
    if (*((_QWORD *)&v30 + 1))
      goto LABEL_12;
  }
  else if (HIBYTE(v31))
  {
LABEL_12:
    v9 = 0;
    goto LABEL_17;
  }
  if (v32)
    v9 = nullsub_7;
  else
    v9 = 0;
LABEL_17:
  if (v9)
  {
    if (*(_DWORD *)&v25[8] == 127 || !*(_QWORD *)v25 && v27 == __p)
      v10 = 0;
    else
      v10 = nullsub_9;
    if (v10)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v29);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v29);
  }
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v29);
  if (*(_BYTE *)(a1 + 120))
  {
    LODWORD(v20) = *(_DWORD *)(a1 + 72);
    if (*(char *)(a1 + 103) < 0)
    {
      sub_20BDDBFAC(&v21, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v21 = *(_OWORD *)(a1 + 80);
      v22 = *(_QWORD *)(a1 + 96);
    }
    v11 = *(_QWORD *)(a1 + 112);
    v23 = *(_QWORD *)(a1 + 104);
    v24 = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    *(_QWORD *)v16 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)&v16[5] = *(_QWORD *)(a2 + 45);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    sub_20BDE1364(&v17, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    if (SHIBYTE(v22) < 0)
    {
      if (*((_QWORD *)&v21 + 1))
        goto LABEL_37;
    }
    else if (HIBYTE(v22))
    {
LABEL_37:
      v14 = 0;
LABEL_42:
      if (v14)
      {
        if (*(_DWORD *)&v16[8] == 127 || !*(_QWORD *)v16 && v18 == v17)
          v15 = 0;
        else
          v15 = nullsub_21;
        if (v15)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v20);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v20);
      }
      if (v17)
      {
        v18 = v17;
        operator delete(v17);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v20);
      return;
    }
    if (v23)
      v14 = nullsub_7;
    else
      v14 = 0;
    goto LABEL_42;
  }
}

void sub_20BE27838(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v27;
  uint64_t v28;

  if (__p)
    operator delete(__p);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&a14);
  v27 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v28 = (uint64_t)v27;
    sub_20BE29790(v23);
    sub_20BE02570(v24 - 48, v28);
  }
  else
  {
    sub_20BE29790(v23);
    sub_20BE02504(v24 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE27824);
}

void sub_20BE278E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE27904(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t (*v10)();
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t (*v14)();
  uint64_t (*v15)();
  _BYTE v16[13];
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[13];
  void *__p;
  void *v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;

  v4 = a1 + 24;
  v34 = a1 + 24;
  v35 = "OTypedGeomParam::set()";
  if (!Alembic::Abc::v12::OArrayProperty::getNumSamples((Alembic::Abc::v12::OArrayProperty *)(a1 + 24)))
  {
    Alembic::Abc::v12::OArrayProperty::set(v4);
    if (*(_BYTE *)(a1 + 120))
      Alembic::Abc::v12::OArrayProperty::set(a1 + 72);
    return;
  }
  LODWORD(v29) = *(_DWORD *)(a1 + 24);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_20BDDBFAC(&v30, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    v30 = *(_OWORD *)(a1 + 32);
    v31 = *(_QWORD *)(a1 + 48);
  }
  v5 = *(_QWORD *)(a1 + 64);
  v32 = *(_QWORD *)(a1 + 56);
  v33 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(a2 + 5);
  *(_QWORD *)v25 = *(_QWORD *)a2;
  *(_QWORD *)&v25[5] = v8;
  __p = 0;
  v27 = 0;
  v28 = 0;
  sub_20BDE1364(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  if (SHIBYTE(v31) < 0)
  {
    if (*((_QWORD *)&v30 + 1))
      goto LABEL_12;
  }
  else if (HIBYTE(v31))
  {
LABEL_12:
    v9 = 0;
    goto LABEL_17;
  }
  if (v32)
    v9 = nullsub_7;
  else
    v9 = 0;
LABEL_17:
  if (v9)
  {
    if (*(_DWORD *)&v25[8] == 127 || !*(_QWORD *)v25 && v27 == __p)
      v10 = 0;
    else
      v10 = nullsub_13;
    if (v10)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v29);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v29);
  }
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v29);
  if (*(_BYTE *)(a1 + 120))
  {
    LODWORD(v20) = *(_DWORD *)(a1 + 72);
    if (*(char *)(a1 + 103) < 0)
    {
      sub_20BDDBFAC(&v21, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v21 = *(_OWORD *)(a1 + 80);
      v22 = *(_QWORD *)(a1 + 96);
    }
    v11 = *(_QWORD *)(a1 + 112);
    v23 = *(_QWORD *)(a1 + 104);
    v24 = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    *(_QWORD *)v16 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)&v16[5] = *(_QWORD *)(a2 + 45);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    sub_20BDE1364(&v17, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    if (SHIBYTE(v22) < 0)
    {
      if (*((_QWORD *)&v21 + 1))
        goto LABEL_37;
    }
    else if (HIBYTE(v22))
    {
LABEL_37:
      v14 = 0;
LABEL_42:
      if (v14)
      {
        if (*(_DWORD *)&v16[8] == 127 || !*(_QWORD *)v16 && v18 == v17)
          v15 = 0;
        else
          v15 = nullsub_21;
        if (v15)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v20);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v20);
      }
      if (v17)
      {
        v18 = v17;
        operator delete(v17);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v20);
      return;
    }
    if (v23)
      v14 = nullsub_7;
    else
      v14 = 0;
    goto LABEL_42;
  }
}

void sub_20BE27BFC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v27;
  uint64_t v28;

  if (__p)
    operator delete(__p);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&a14);
  v27 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v28 = (uint64_t)v27;
    sub_20BE29790(v23);
    sub_20BE02570(v24 - 48, v28);
  }
  else
  {
    sub_20BE29790(v23);
    sub_20BE02504(v24 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE27BE8);
}

void sub_20BE27CA8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OCurvesSchema::createPositionProperty(Alembic::AbcGeom::v12::OCurvesSchema *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p[2];
  void *v17;
  void *v18;
  void *v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t *v24;
  int v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *v30;
  std::string v31;
  uint64_t v32[3];
  std::__shared_weak_count *v33;
  uint64_t *v34;
  _QWORD *v35[2];

  v35[0] = 0;
  v35[1] = 0;
  v34 = (uint64_t *)v35;
  sub_20BE288A4(&v34, 3);
  v2 = *((_QWORD *)this + 5);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v32[2] = v2;
  v33 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v28 = v2;
    v29 = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v28 = v2;
    v29 = 0;
  }
  sub_20BDDC0E4(__p, "P");
  LODWORD(v19) = 3;
  v20 = &v34;
  v7 = *((_DWORD *)this + 90);
  LODWORD(v26) = 2;
  v27 = v7;
  LODWORD(v24) = 0;
  v25 = 0;
  LODWORD(v22) = 0;
  v23 = 0;
  sub_20BE2981C((uint64_t)&v30, &v28, (uint64_t)__p, (uint64_t **)&v19, &v26, &v24, &v22);
  *((_DWORD *)this + 62) = (_DWORD)v30;
  std::string::operator=((std::string *)((char *)this + 256), &v31);
  sub_20BDE881C((_QWORD *)this + 35, v32);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v30);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  v8 = v29;
  if (v29)
  {
    v9 = (unint64_t *)&v29->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  sub_20BE29E5C(&v30, (uint64_t *)&v19);
  if (*((_QWORD *)this + 44))
  {
    v11 = 0;
    do
    {
      sub_20BE29F08(__p, (uint64_t *)&v30);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 248);
      if (v17)
      {
        v18 = v17;
        operator delete(v17);
      }
      ++v11;
      v12 = *((_QWORD *)this + 44);
    }
    while (v11 < v12);
  }
  else
  {
    v12 = 0;
  }
  sub_20BE28B00((uint64_t)this, *((_DWORD *)this + 90), v12);
  if (v31.__r_.__value_.__l.__size_)
  {
    v31.__r_.__value_.__r.__words[2] = v31.__r_.__value_.__l.__size_;
    operator delete((void *)v31.__r_.__value_.__l.__size_);
  }
  if (v19)
  {
    v20 = (uint64_t **)v19;
    operator delete(v19);
  }
  v13 = v33;
  if (v33)
  {
    v14 = (unint64_t *)&v33->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20BDE9D48((uint64_t)&v34, v35[0]);
}

void sub_20BE27EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 104);
  if (v29)
  {
    *(_QWORD *)(v27 - 96) = v29;
    operator delete(v29);
  }
  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 72));
  sub_20BDE9D48(v27 - 56, *(_QWORD **)(v27 - 48));
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OCurvesSchema::createVertexProperties(Alembic::AbcGeom::v12::OCurvesSchema *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t *v25;
  int v26;
  uint64_t *v27;
  int v28;
  uint64_t *v29;
  int v30;
  uint64_t *v31;
  int v32;
  void *__p;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  std::string v39;
  uint64_t v40[2];
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t *v43;
  _QWORD *v44[2];

  v44[0] = 0;
  v44[1] = 0;
  v43 = (uint64_t *)v44;
  sub_20BE288A4(&v43, 3);
  v2 = *((_QWORD *)this + 5);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v41 = v2;
  v42 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v36 = v2;
    v37 = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v36 = v2;
    v37 = 0;
  }
  sub_20BDDC0E4(&__p, "nVertices");
  v7 = *((_DWORD *)this + 90);
  LODWORD(v31) = 2;
  v32 = v7;
  LODWORD(v29) = 0;
  v30 = 0;
  LODWORD(v27) = 0;
  v28 = 0;
  LODWORD(v25) = 0;
  v26 = 0;
  sub_20BE2A074((uint64_t)&v38, &v36, (uint64_t)&__p, &v31, &v29, &v27, &v25);
  *((_DWORD *)this + 74) = (_DWORD)v38;
  std::string::operator=((std::string *)((char *)this + 304), &v39);
  sub_20BDE881C((_QWORD *)this + 41, v40);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v38);
  if (SHIBYTE(v35) < 0)
    operator delete(__p);
  v8 = v37;
  if (v37)
  {
    v9 = (unint64_t *)&v37->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v23 = v41;
  v24 = v42;
  if (v42)
  {
    v11 = (unint64_t *)&v42->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_20BDDC0E4(&__p, "curveBasisAndType");
  v21 = 1;
  v22 = 4;
  v13 = *((_DWORD *)this + 90);
  LODWORD(v31) = 2;
  v32 = v13;
  LODWORD(v29) = 0;
  v30 = 0;
  LODWORD(v27) = 0;
  v28 = 0;
  LODWORD(v25) = 0;
  v26 = 0;
  Alembic::Abc::v12::OScalarProperty::OScalarProperty(&v38, &v23, &__p, &v21, &v31, &v29, &v27, &v25);
  *((_DWORD *)this + 272) = (_DWORD)v38;
  std::string::operator=((std::string *)((char *)this + 1096), &v39);
  sub_20BDE881C((_QWORD *)this + 140, v40);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v38);
  if (SHIBYTE(v35) < 0)
    operator delete(__p);
  v14 = v24;
  if (v24)
  {
    v15 = (unint64_t *)&v24->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  LODWORD(v31) = 0;
  __p = 0;
  v34 = 0;
  v35 = 0;
  sub_20BE2A600(&v38, (uint64_t *)&__p);
  if (*((_QWORD *)this + 44))
  {
    v17 = 0;
    do
    {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 296);
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 1088), &v31);
      ++v17;
    }
    while (v17 < *((_QWORD *)this + 44));
  }
  if (v39.__r_.__value_.__l.__size_)
  {
    v39.__r_.__value_.__r.__words[2] = v39.__r_.__value_.__l.__size_;
    operator delete((void *)v39.__r_.__value_.__l.__size_);
  }
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  v18 = v42;
  if (v42)
  {
    v19 = (unint64_t *)&v42->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  sub_20BDE9D48((uint64_t)&v43, v44[0]);
}

void sub_20BE282B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,void *a31,uint64_t a32)
{
  uint64_t v32;

  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v32 - 88));
  sub_20BDE9D48(v32 - 72, *(_QWORD **)(v32 - 64));
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OCurvesSchema::setFromPrevious(Alembic::AbcGeom::v12::OCurvesSchema *this)
{
  uint64_t (*v2)();
  uint64_t (*v3)();
  uint64_t (*v4)();
  uint64_t (*v5)();
  uint64_t (*v6)();
  int v7;
  uint64_t (*v8)();
  int v9;
  uint64_t (*v10)();
  uint64_t result;
  uint64_t (*v12)();
  uint64_t (*v13)();
  uint64_t (*v14)();
  uint64_t (*v15)();

  if (*((char *)this + 279) < 0)
  {
    if (*((_QWORD *)this + 33))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 279))
  {
LABEL_3:
    v2 = 0;
    goto LABEL_8;
  }
  if (*((_QWORD *)this + 35))
    v2 = nullsub_7;
  else
    v2 = 0;
LABEL_8:
  if (v2)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 248));
  if (*((char *)this + 327) < 0)
  {
    if (*((_QWORD *)this + 39))
      goto LABEL_12;
  }
  else if (*((_BYTE *)this + 327))
  {
LABEL_12:
    v3 = 0;
    goto LABEL_17;
  }
  if (*((_QWORD *)this + 41))
    v3 = nullsub_7;
  else
    v3 = 0;
LABEL_17:
  if (v3)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 296));
  if (*((char *)this + 1119) < 0)
  {
    if (*((_QWORD *)this + 138))
      goto LABEL_21;
  }
  else if (*((_BYTE *)this + 1119))
  {
LABEL_21:
    v4 = 0;
    goto LABEL_26;
  }
  if (*((_QWORD *)this + 140))
    v4 = nullsub_6;
  else
    v4 = 0;
LABEL_26:
  if (v4)
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 1088));
  if (*((char *)this + 87) < 0)
  {
    if (*((_QWORD *)this + 9))
      goto LABEL_30;
  }
  else if (*((_BYTE *)this + 87))
  {
LABEL_30:
    v5 = 0;
    goto LABEL_35;
  }
  if (*((_QWORD *)this + 11))
    v5 = nullsub_6;
  else
    v5 = 0;
LABEL_35:
  if (v5)
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 56));
  if (*((char *)this + 927) < 0)
  {
    if (*((_QWORD *)this + 114))
      goto LABEL_39;
  }
  else if (*((_BYTE *)this + 927))
  {
LABEL_39:
    v6 = 0;
    goto LABEL_44;
  }
  if (*((_QWORD *)this + 116))
    v6 = nullsub_7;
  else
    v6 = 0;
LABEL_44:
  if (v6)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 896));
  v7 = sub_20BE296FC((uint64_t)this + 368);
  v8 = nullsub_16;
  if (!v7)
    v8 = 0;
  if (v8)
    sub_20BE286D0((_BYTE *)this + 368);
  v9 = sub_20BE296FC((uint64_t)this + 544);
  v10 = nullsub_17;
  if (!v9)
    v10 = 0;
  if (v10)
    sub_20BE2876C((_BYTE *)this + 544);
  result = sub_20BE296FC((uint64_t)this + 720);
  v12 = nullsub_18;
  if (!(_DWORD)result)
    v12 = 0;
  if (v12)
    result = sub_20BE28808((_BYTE *)this + 720);
  if (*((char *)this + 975) < 0)
  {
    if (*((_QWORD *)this + 120))
      goto LABEL_60;
  }
  else if (*((_BYTE *)this + 975))
  {
LABEL_60:
    v13 = 0;
    goto LABEL_65;
  }
  if (*((_QWORD *)this + 122))
    v13 = nullsub_7;
  else
    v13 = 0;
LABEL_65:
  if (v13)
    result = Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 944));
  if (*((char *)this + 1023) < 0)
  {
    if (*((_QWORD *)this + 126))
      goto LABEL_69;
  }
  else if (*((_BYTE *)this + 1023))
  {
LABEL_69:
    v14 = 0;
    goto LABEL_74;
  }
  if (*((_QWORD *)this + 128))
    v14 = nullsub_7;
  else
    v14 = 0;
LABEL_74:
  if (v14)
    result = Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 992));
  if (*((char *)this + 1071) < 0)
  {
    if (*((_QWORD *)this + 132))
      goto LABEL_78;
LABEL_80:
    if (*((_QWORD *)this + 134))
      v15 = nullsub_7;
    else
      v15 = 0;
    goto LABEL_83;
  }
  if (!*((_BYTE *)this + 1071))
    goto LABEL_80;
LABEL_78:
  v15 = 0;
LABEL_83:
  if (v15)
    return Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 1040));
  return result;
}

void sub_20BE2867C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE2866CLL);
}

void sub_20BE286B0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BE286D0(_BYTE *a1)
{
  uint64_t result;

  result = Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)(a1 + 24));
  if (a1[120])
    return Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)(a1 + 72));
  return result;
}

void sub_20BE28718(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE28708);
}

void sub_20BE2874C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BE2876C(_BYTE *a1)
{
  uint64_t result;

  result = Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)(a1 + 24));
  if (a1[120])
    return Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)(a1 + 72));
  return result;
}

void sub_20BE287B4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE287A4);
}

void sub_20BE287E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BE28808(_BYTE *a1)
{
  uint64_t result;

  result = Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)(a1 + 24));
  if (a1[120])
    return Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)(a1 + 72));
  return result;
}

void sub_20BE28850(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE28840);
}

void sub_20BE28884(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE288A4(uint64_t **a1, int a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  std::string __p;
  void *v9[2];
  char v10;
  void **v11;

  switch(a2)
  {
    case 0:
      sub_20BDDC0E4(v9, "geoScope");
      sub_20BDDC0E4(&__p, "con");
      v11 = v9;
      v3 = sub_20BDDDFDC(a1, (const void **)v9, (uint64_t)&unk_20CA52281, (__int128 **)&v11);
      std::string::operator=((std::string *)(v3 + 7), &__p);
      goto LABEL_7;
    case 1:
      sub_20BDDC0E4(v9, "geoScope");
      sub_20BDDC0E4(&__p, "uni");
      v11 = v9;
      v7 = sub_20BDDDFDC(a1, (const void **)v9, (uint64_t)&unk_20CA52281, (__int128 **)&v11);
      std::string::operator=((std::string *)(v7 + 7), &__p);
      goto LABEL_7;
    case 2:
      sub_20BDDC0E4(v9, "geoScope");
      sub_20BDDC0E4(&__p, "var");
      v11 = v9;
      v4 = sub_20BDDDFDC(a1, (const void **)v9, (uint64_t)&unk_20CA52281, (__int128 **)&v11);
      std::string::operator=((std::string *)(v4 + 7), &__p);
      goto LABEL_7;
    case 3:
      sub_20BDDC0E4(v9, "geoScope");
      sub_20BDDC0E4(&__p, "vtx");
      v11 = v9;
      v5 = sub_20BDDDFDC(a1, (const void **)v9, (uint64_t)&unk_20CA52281, (__int128 **)&v11);
      std::string::operator=((std::string *)(v5 + 7), &__p);
      goto LABEL_7;
    case 4:
      sub_20BDDC0E4(v9, "geoScope");
      sub_20BDDC0E4(&__p, "fvr");
      v11 = v9;
      v6 = sub_20BDDDFDC(a1, (const void **)v9, (uint64_t)&unk_20CA52281, (__int128 **)&v11);
      std::string::operator=((std::string *)(v6 + 7), &__p);
LABEL_7:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v10 < 0)
        operator delete(v9[0]);
      break;
    default:
      return;
  }
}

void sub_20BE28AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BE28B00(uint64_t a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  Alembic::Abc::v12::OScalarProperty *v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  int v20;
  void *__p[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _OWORD v25[2];
  int64x2_t v26;
  uint64_t v27;
  const char *v28;

  v27 = a1 + 8;
  v28 = "OGeomBaseSchema::createSelfBoundsProperty()";
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(_QWORD *)(a1 + 72))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 87))
  {
LABEL_5:
    if (*(_QWORD *)(a1 + 88))
      return;
  }
  v6 = *(std::__shared_weak_count **)(a1 + 48);
  v23 = *(_QWORD *)(a1 + 40);
  v24 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".selfBnds");
  LODWORD(v19) = 2;
  v20 = a2;
  LODWORD(v17) = 0;
  v18 = 0;
  LODWORD(v15) = 0;
  v16 = 0;
  LODWORD(v13) = 0;
  v14 = 0;
  sub_20BE1C558((uint64_t)v25, &v23, (uint64_t)__p, &v19, &v17, &v15, &v13);
  *(_DWORD *)(a1 + 56) = v25[0];
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)((char *)v25 + 8));
  sub_20BDE881C((_QWORD *)(a1 + 88), v26.i64);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)v25);
  if (v22 < 0)
    operator delete(__p[0]);
  v9 = v24;
  if (v24)
  {
    v10 = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v25[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v25[1] = xmmword_20CA521E0;
  v26 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (a3)
  {
    v12 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 56);
    do
    {
      Alembic::Abc::v12::OScalarProperty::set(v12, v25);
      --a3;
    }
    while (a3);
  }
}

void sub_20BE28C8C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;
  void *v27;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v24 - 96));
  if (a23 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a24);
  v27 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v24 - 48, (uint64_t)v27);
  else
    sub_20BE02504(v24 - 48, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE28C78);
}

void sub_20BE28D0C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE28D2C(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20BE28D6C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE v7[56];
  _BYTE v8[48];

  if (*(char *)(a1 + 279) < 0)
  {
    if (!*(_QWORD *)(a1 + 264))
      goto LABEL_5;
LABEL_10:
    sub_20BE1A75C((int *)(a1 + 8), (uint64_t)v7);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v7, (uint64_t)v8);
    Alembic::Abc::v12::OArchive::getTimeSampling((Alembic::Abc::v12::OArchive *)v8, a2);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v8);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v7);
    return;
  }
  if (*(_BYTE *)(a1 + 279))
    goto LABEL_10;
LABEL_5:
  if (!*(_QWORD *)(a1 + 280))
    goto LABEL_10;
  v3 = sub_20BE295E0(a1 + 248);
  v4 = *(_QWORD *)(v3 + 72);
  *a2 = *(_QWORD *)(v3 + 64);
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_20BE28E14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)va1);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE28E38(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 128));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 72));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t Alembic::AbcGeom::v12::OCurvesSchema::setTimeSampling(Alembic::AbcGeom::v12::OCurvesSchema *this, int a2)
{
  uint64_t (*v3)();
  uint64_t (*v4)();
  uint64_t (*v5)();
  uint64_t (*v6)();
  uint64_t (*v7)();
  int v8;
  uint64_t (*v9)();
  int v10;
  uint64_t (*v11)();
  uint64_t result;
  uint64_t (*v13)();
  uint64_t (*v14)();
  uint64_t (*v15)();
  uint64_t (*v16)();

  *((_DWORD *)this + 90) = a2;
  if (*((char *)this + 279) < 0)
  {
    if (*((_QWORD *)this + 33))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 279))
  {
LABEL_3:
    v3 = 0;
    goto LABEL_8;
  }
  if (*((_QWORD *)this + 35))
    v3 = nullsub_7;
  else
    v3 = 0;
LABEL_8:
  if (v3)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 248));
  if (*((char *)this + 327) < 0)
  {
    if (*((_QWORD *)this + 39))
      goto LABEL_12;
  }
  else if (*((_BYTE *)this + 327))
  {
LABEL_12:
    v4 = 0;
    goto LABEL_17;
  }
  if (*((_QWORD *)this + 41))
    v4 = nullsub_7;
  else
    v4 = 0;
LABEL_17:
  if (v4)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 296));
  if (*((char *)this + 1119) < 0)
  {
    if (*((_QWORD *)this + 138))
      goto LABEL_21;
  }
  else if (*((_BYTE *)this + 1119))
  {
LABEL_21:
    v5 = 0;
    goto LABEL_26;
  }
  if (*((_QWORD *)this + 140))
    v5 = nullsub_6;
  else
    v5 = 0;
LABEL_26:
  if (v5)
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 1088));
  if (*((char *)this + 87) < 0)
  {
    if (*((_QWORD *)this + 9))
      goto LABEL_30;
  }
  else if (*((_BYTE *)this + 87))
  {
LABEL_30:
    v6 = 0;
    goto LABEL_35;
  }
  if (*((_QWORD *)this + 11))
    v6 = nullsub_6;
  else
    v6 = 0;
LABEL_35:
  if (v6)
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 56));
  if (*((char *)this + 927) < 0)
  {
    if (*((_QWORD *)this + 114))
      goto LABEL_39;
  }
  else if (*((_BYTE *)this + 927))
  {
LABEL_39:
    v7 = 0;
    goto LABEL_44;
  }
  if (*((_QWORD *)this + 116))
    v7 = nullsub_7;
  else
    v7 = 0;
LABEL_44:
  if (v7)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 896));
  v8 = sub_20BE296FC((uint64_t)this + 368);
  v9 = nullsub_16;
  if (!v8)
    v9 = 0;
  if (v9)
    sub_20BE2921C((_BYTE *)this + 368);
  v10 = sub_20BE296FC((uint64_t)this + 544);
  v11 = nullsub_17;
  if (!v10)
    v11 = 0;
  if (v11)
    sub_20BE292C0((_BYTE *)this + 544);
  result = sub_20BE296FC((uint64_t)this + 720);
  v13 = nullsub_18;
  if (!(_DWORD)result)
    v13 = 0;
  if (v13)
    result = sub_20BE29364((_BYTE *)this + 720);
  if (*((char *)this + 975) < 0)
  {
    if (*((_QWORD *)this + 120))
      goto LABEL_60;
  }
  else if (*((_BYTE *)this + 975))
  {
LABEL_60:
    v14 = 0;
    goto LABEL_65;
  }
  if (*((_QWORD *)this + 122))
    v14 = nullsub_7;
  else
    v14 = 0;
LABEL_65:
  if (v14)
    result = Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 944));
  if (*((char *)this + 1023) < 0)
  {
    if (*((_QWORD *)this + 126))
      goto LABEL_69;
  }
  else if (*((_BYTE *)this + 1023))
  {
LABEL_69:
    v15 = 0;
    goto LABEL_74;
  }
  if (*((_QWORD *)this + 128))
    v15 = nullsub_7;
  else
    v15 = 0;
LABEL_74:
  if (v15)
    result = Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 992));
  if (*((char *)this + 1071) < 0)
  {
    if (*((_QWORD *)this + 132))
      goto LABEL_78;
LABEL_80:
    if (*((_QWORD *)this + 134))
      v16 = nullsub_7;
    else
      v16 = 0;
    goto LABEL_83;
  }
  if (!*((_BYTE *)this + 1071))
    goto LABEL_80;
LABEL_78:
  v16 = 0;
LABEL_83:
  if (v16)
    return Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 1040));
  return result;
}

void sub_20BE291C8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE291B4);
}

void sub_20BE291FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BE2921C(_BYTE *a1)
{
  uint64_t result;

  result = Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::Abc::v12::OArrayProperty *)(a1 + 24));
  if (a1[120])
    return Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::Abc::v12::OArrayProperty *)(a1 + 72));
  return result;
}

void sub_20BE2926C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE2925CLL);
}

void sub_20BE292A0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BE292C0(_BYTE *a1)
{
  uint64_t result;

  result = Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::Abc::v12::OArrayProperty *)(a1 + 24));
  if (a1[120])
    return Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::Abc::v12::OArrayProperty *)(a1 + 72));
  return result;
}

void sub_20BE29310(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE29300);
}

void sub_20BE29344(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BE29364(_BYTE *a1)
{
  uint64_t result;

  result = Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::Abc::v12::OArrayProperty *)(a1 + 24));
  if (a1[120])
    return Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::Abc::v12::OArrayProperty *)(a1 + 72));
  return result;
}

void sub_20BE293B4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE293A4);
}

void sub_20BE293E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

int *Alembic::AbcGeom::v12::OCurvesSchema::setTimeSampling(Alembic::AbcGeom::v12::OCurvesSchema *a1, _QWORD *a2)
{
  int *result;
  int v4;
  _BYTE v5[56];
  _BYTE v6[48];
  int *v7;
  const char *v8;

  result = (int *)((char *)a1 + 8);
  v7 = result;
  v8 = "OCurvesSchema::setTimeSampling( TimeSamplingPtr)";
  if (*a2)
  {
    sub_20BE1A75C(result, (uint64_t)v5);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v5, (uint64_t)v6);
    v4 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v6);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v6);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v5);
    return (int *)Alembic::AbcGeom::v12::OCurvesSchema::setTimeSampling(a1, v4);
  }
  return result;
}

void sub_20BE29488(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void *v19;

  v19 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v17 - 32, (uint64_t)v19);
  else
    sub_20BE02504(v17 - 32, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE29478);
}

void sub_20BE294F0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OCurvesSchema::init(Alembic::AbcGeom::v12::OCurvesSchema *this, int a2, char a3)
{
  *((_BYTE *)this + 344) = a3;
  *((_QWORD *)this + 44) = 0;
  *((_DWORD *)this + 90) = a2;
  if ((a3 & 1) == 0)
  {
    Alembic::AbcGeom::v12::OCurvesSchema::createPositionProperty(this);
    Alembic::AbcGeom::v12::OCurvesSchema::createVertexProperties(this);
  }
}

void sub_20BE29568(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;
  void (*v12)(uint64_t);
  uint64_t v13;

  v11 = __cxa_begin_catch(a1);
  v12 = *(void (**)(uint64_t))(*(_QWORD *)v9 + 16);
  if (a2 == 2)
  {
    v13 = (uint64_t)v11;
    v12(v9);
    sub_20BE02570((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_20BE02504((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE29554);
}

void sub_20BE295B8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BE295E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20BE2961C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  unsigned __int8 v11;
  _QWORD *v12;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  if ((v11 & 1) == 0)
  {
    {
      v12 = operator new(0x50uLL);
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      *((_DWORD *)v12 + 6) = 1;
      v12[6] = 0;
      v12[5] = 0;
      v12[4] = v12 + 5;
      *((_DWORD *)v12 + 14) = 127;
      *((_BYTE *)v12 + 60) = 0;
      v12[8] = 0;
      v12[9] = 0;
      Alembic::Abc::v12::OBasePropertyT<std::shared_ptr<Alembic::AbcCoreAbstract::v12::ArrayPropertyWriter>>::getHeader(void)const::g_phd = (uint64_t)v12;
    }
  }
  JUMPOUT(0x20BE2960CLL);
}

void sub_20BE296C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20BE296FC(uint64_t a1)
{
  uint64_t (*v1)();

  if (*(char *)(a1 + 55) < 0)
  {
    if (!*(_QWORD *)(a1 + 40))
      goto LABEL_5;
    return 0;
  }
  if (*(_BYTE *)(a1 + 55))
    return 0;
LABEL_5:
  if (!*(_QWORD *)(a1 + 56))
    return 0;
  if (!*(_BYTE *)(a1 + 120))
    return 1;
  if (*(char *)(a1 + 103) < 0)
  {
    if (*(_QWORD *)(a1 + 88))
      goto LABEL_9;
LABEL_13:
    if (*(_QWORD *)(a1 + 104))
      v1 = nullsub_7;
    else
      v1 = 0;
    return v1 != 0;
  }
  if (!*(_BYTE *)(a1 + 103))
    goto LABEL_13;
LABEL_9:
  v1 = 0;
  return v1 != 0;
}

uint64_t sub_20BE29790(uint64_t a1)
{
  uint64_t result;

  MEMORY[0x212B929D0](a1, "");
  sub_20BDEBF08((_QWORD *)(a1 + 56));
  MEMORY[0x212B929D0](a1 + 32, "");
  sub_20BDEBF08((_QWORD *)(a1 + 104));
  MEMORY[0x212B929D0](a1 + 80, "");
  sub_20BDEBF08((_QWORD *)(a1 + 160));
  result = MEMORY[0x212B929D0](a1 + 136, "");
  *(_DWORD *)(a1 + 124) = 127;
  *(_BYTE *)(a1 + 120) = 0;
  return result;
}

uint64_t sub_20BE2981C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20BE29920((int *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE29904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v9);
  _Unwind_Resume(a1);
}

void sub_20BE29920(int *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t *v14;
  void *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *exception;
  _QWORD *v36;
  uint64_t p_p;
  std::__shared_weak_count *v38;
  std::string __str;
  void *__p;
  std::__shared_weak_count *v41;
  char v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD v45[37];
  int v46;
  const void **v47[3];
  void *v48;
  std::__shared_weak_count *v49;
  unsigned int v50;
  uint64_t v51;

  v44 = 0;
  v45[0] = 0;
  v43 = (uint64_t *)&v44;
  v45[35] = 0;
  v45[36] = 0;
  v46 = 2;
  sub_20BDEBF8C((uint64_t *)v47, (const void ***)&v43);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 1;
  sub_20BDE9D48((uint64_t)&v43, v44);
  sub_20BE02E30(a4, (uint64_t)&v46);
  sub_20BE02E30(a5, (uint64_t)&v46);
  sub_20BE02E30(a6, (uint64_t)&v46);
  sub_20BE02E30(a7, (uint64_t)&v46);
  *a1 = v46;
  v45[33] = a1;
  v45[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v43);
    sub_20BDDC1C8(v45, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_20BDDBF20(&__p, (__int128 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    v36 = sub_20BDDC09C(exception, (uint64_t)&__p);
    __cxa_throw(v36, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v43, v47);
  sub_20BDDC0E4(&__p, "interpretation");
  sub_20BDDC0E4(&__str, "point");
  p_p = (uint64_t)&__p;
  v14 = sub_20BDDDFDC(&v43, (const void **)&__p, (uint64_t)&unk_20CA52281, (__int128 **)&p_p);
  std::string::operator=((std::string *)(v14 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v42 < 0)
    operator delete(__p);
  v15 = v48;
  __p = v48;
  v41 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = *a2;
  if (v15)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v18 + 24))(&p_p);
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)p_p + 24))(&__str);
    v19 = (*(uint64_t (**)(std::string::size_type, void *))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 48))(__str.__r_.__value_.__r.__words[0], v15);
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v21 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v23 = v38;
    if (v38)
    {
      v24 = (unint64_t *)&v38->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v18 = *a2;
  }
  else
  {
    v19 = v50;
  }
  p_p = 0x30000000ALL;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t **, uint64_t *, uint64_t))(*(_QWORD *)v18 + 104))(&__str, v18, a3, &v43, &p_p, v19);
  sub_20BDE82DC((uint64_t)(a1 + 8), (__int128 *)&__str);
  v26 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v27 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v41;
  if (v41)
  {
    v30 = (unint64_t *)&v41->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  sub_20BDE9D48((uint64_t)&v43, v44);
  v32 = v49;
  if (v49)
  {
    v33 = (unint64_t *)&v49->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  sub_20BDE9D48((uint64_t)v47, v47[1]);
}

void sub_20BE29CE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a25);
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v26 + 32));
  MEMORY[0x212B929D0](v26 + 8, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 184, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 184, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE29C08);
}

void sub_20BE29E24()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 152);
  JUMPOUT(0x20BE29E54);
}

_QWORD *sub_20BE29E5C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;
  void *__p;
  _BYTE *v7;

  if (a2[1] == *a2)
    v3 = 0;
  else
    v3 = *a2;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  sub_20BDE8894(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x30000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20BE29EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BE29F08(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *exception;
  _QWORD *v12;
  __int128 __p;
  char v14;
  int v15[8];
  _BYTE v16[16];
  _QWORD v17[33];

  v4 = *a2;
  *(_QWORD *)((char *)a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_20BDE1364(a1 + 2, (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  v6 = *((_DWORD *)a2 + 2);
  v5 = a2 + 1;
  if (v6 != 10 || *((_BYTE *)v5 + 4) != 3)
  {
    sub_20BDDBD68((uint64_t)v16);
    v8 = sub_20BDDC1C8(v17, (uint64_t)"Invalid DataType in TypedArraySample. Expected: ", 48);
    *(_QWORD *)v15 = 0x30000000ALL;
    v9 = sub_20BDE00F4(v8, v15);
    v10 = sub_20BDDC1C8(v9, (uint64_t)", but got: ", 11);
    sub_20BDE00F4(v10, (int *)v5);
    std::stringbuf::str();
    sub_20BDDBF20(v15, &__p);
    if (v14 < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    v12 = sub_20BDDC09C(exception, (uint64_t)v15);
    __cxa_throw(v12, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  return a1;
}

void sub_20BE2A030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void **v5;
  void *v7;
  std::exception v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v8.__vftable = va_arg(va1, std::exception_vtbl *);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v4 + 24) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20BE2A074(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20BE2A178((int *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE2A15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v9);
  _Unwind_Resume(a1);
}

void sub_20BE2A178(int *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *exception;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  const void **v42;
  _QWORD *v43;
  _QWORD v44[37];
  int v45;
  const void **v46[3];
  uint64_t v47;
  std::__shared_weak_count *v48;
  unsigned int v49;
  uint64_t v50;

  v43 = 0;
  v44[0] = 0;
  v42 = (const void **)&v43;
  v44[35] = 0;
  v44[36] = 0;
  v45 = 2;
  sub_20BDEBF8C((uint64_t *)v46, &v42);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  sub_20BDE9D48((uint64_t)&v42, v43);
  sub_20BE02E30(a4, (uint64_t)&v45);
  sub_20BE02E30(a5, (uint64_t)&v45);
  sub_20BE02E30(a6, (uint64_t)&v45);
  sub_20BE02E30(a7, (uint64_t)&v45);
  *a1 = v45;
  v44[33] = a1;
  v44[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v42);
    sub_20BDDC1C8(v44, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_20BDDBF20(&v40, (__int128 *)__p);
    if (v39 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v35 = sub_20BDDC09C(exception, (uint64_t)&v40);
    __cxa_throw(v35, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v42, v46);
  v14 = v47;
  v40 = v47;
  v41 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = *a2;
  if (v14)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v17 + 24))(&v36);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v36 + 24))(__p);
    v18 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)__p[0] + 48))(__p[0], v14);
    v19 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v20 = (unint64_t *)((char *)__p[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v37;
    if (v37)
    {
      v23 = (unint64_t *)&v37->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = *a2;
  }
  else
  {
    v18 = v49;
  }
  v36 = 0x100000006;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const void ***, uint64_t *, uint64_t))(*(_QWORD *)v17 + 104))(__p, v17, a3, &v42, &v36, v18);
  sub_20BDE82DC((uint64_t)(a1 + 8), (__int128 *)__p);
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v26 = (unint64_t *)((char *)__p[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_20BDE9D48((uint64_t)&v42, v43);
  v31 = v48;
  if (v48)
  {
    v32 = (unint64_t *)&v48->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  sub_20BDE9D48((uint64_t)v46, v46[1]);
}

void sub_20BE2A4C8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  void *v11;
  std::exception v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  v11 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v7 + 32));
  MEMORY[0x212B929D0](v7 + 8, "");
  if (a2 == 2)
    sub_20BE02570(v8 - 176, (uint64_t)v11);
  else
    sub_20BE02504(v8 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE2A3F0);
}

void sub_20BE2A5AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 144);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE2A600(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  void *__p;
  _BYTE *v7;

  if (a2[1] == *a2)
    v3 = 0;
  else
    v3 = *a2;
  v5 = (a2[1] - *a2) >> 2;
  sub_20BDE8894(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x100000006;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20BE2A684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE2A6A0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20BE2A7A4((int *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE2A788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v9);
  _Unwind_Resume(a1);
}

void sub_20BE2A7A4(int *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t *v14;
  void *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *exception;
  _QWORD *v36;
  uint64_t p_p;
  std::__shared_weak_count *v38;
  std::string __str;
  void *__p;
  std::__shared_weak_count *v41;
  char v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD v45[37];
  int v46;
  const void **v47[3];
  void *v48;
  std::__shared_weak_count *v49;
  unsigned int v50;
  uint64_t v51;

  v44 = 0;
  v45[0] = 0;
  v43 = (uint64_t *)&v44;
  v45[35] = 0;
  v45[36] = 0;
  v46 = 2;
  sub_20BDEBF8C((uint64_t *)v47, (const void ***)&v43);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 1;
  sub_20BDE9D48((uint64_t)&v43, v44);
  sub_20BE02E30(a4, (uint64_t)&v46);
  sub_20BE02E30(a5, (uint64_t)&v46);
  sub_20BE02E30(a6, (uint64_t)&v46);
  sub_20BE02E30(a7, (uint64_t)&v46);
  *a1 = v46;
  v45[33] = a1;
  v45[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v43);
    sub_20BDDC1C8(v45, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_20BDDBF20(&__p, (__int128 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    v36 = sub_20BDDC09C(exception, (uint64_t)&__p);
    __cxa_throw(v36, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v43, v47);
  sub_20BDDC0E4(&__p, "interpretation");
  sub_20BDDC0E4(&__str, "vector");
  p_p = (uint64_t)&__p;
  v14 = sub_20BDDDFDC(&v43, (const void **)&__p, (uint64_t)&unk_20CA52281, (__int128 **)&p_p);
  std::string::operator=((std::string *)(v14 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v42 < 0)
    operator delete(__p);
  v15 = v48;
  __p = v48;
  v41 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = *a2;
  if (v15)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v18 + 24))(&p_p);
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)p_p + 24))(&__str);
    v19 = (*(uint64_t (**)(std::string::size_type, void *))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 48))(__str.__r_.__value_.__r.__words[0], v15);
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v21 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v23 = v38;
    if (v38)
    {
      v24 = (unint64_t *)&v38->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v18 = *a2;
  }
  else
  {
    v19 = v50;
  }
  p_p = 0x30000000ALL;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t **, uint64_t *, uint64_t))(*(_QWORD *)v18 + 104))(&__str, v18, a3, &v43, &p_p, v19);
  sub_20BDE82DC((uint64_t)(a1 + 8), (__int128 *)&__str);
  v26 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v27 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v41;
  if (v41)
  {
    v30 = (unint64_t *)&v41->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  sub_20BDE9D48((uint64_t)&v43, v44);
  v32 = v49;
  if (v49)
  {
    v33 = (unint64_t *)&v49->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  sub_20BDE9D48((uint64_t)v47, v47[1]);
}

void sub_20BE2AB64(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a25);
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v26 + 32));
  MEMORY[0x212B929D0](v26 + 8, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 184, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 184, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE2AA8CLL);
}

void sub_20BE2ACA8()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 152);
  JUMPOUT(0x20BE2ACD8);
}

_QWORD *sub_20BE2ACE4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  void *__p;
  _BYTE *v7;

  if (a2[1] == *a2)
    v3 = 0;
  else
    v3 = *a2;
  v5 = (a2[1] - *a2) >> 3;
  sub_20BDE8894(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x20000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20BE2AD68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BE2AD84(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  void *__p;
  _BYTE *v7;

  if (a2[1] == *a2)
    v3 = 0;
  else
    v3 = *a2;
  v5 = (a2[1] - *a2) >> 2;
  sub_20BDE8894(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x100000005;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20BE2AE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE2AE24(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *a2;
  *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_20BDE1364((_QWORD *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  v8 = *a3;
  v9 = *(uint64_t *)((char *)a3 + 5);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 45) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_20BDE1364((_QWORD *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  *(_DWORD *)(a1 + 80) = a4;
  return a1;
}

void sub_20BE2AEB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20BE2AED4(char *__dst, uint64_t **a2, uint64_t a3, char a4, int a5, int a6, uint64_t **a7, uint64_t **a8, uint64_t **a9)
{
  __int128 v16;
  std::string *v17;
  __int128 *v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  int v30;
  __int128 *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t *v34;
  std::string::size_type v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  std::__shared_weak_count *size;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  void *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::string *v76;
  _QWORD *v77;
  std::string *v78;
  _DWORD *v79;
  uint64_t *v80;
  std::__shared_weak_count *v81;
  int v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  int v88;
  uint64_t *v89;
  int v90;
  int v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  std::__shared_weak_count *v97;
  void *p_p;
  std::string v99;
  uint64_t v100[2];
  uint64_t *v101;
  uint64_t **v102;
  void **p_p_p;
  std::__shared_weak_count *v104;
  std::string v105;
  std::string v106;
  std::string __str;
  void *v108;
  char v109;
  uint64_t v110;
  std::string v111;
  void *__p;
  _QWORD *v113;
  uint64_t v114;
  void *v115;
  char v116;
  uint64_t v117;
  std::string v118;
  uint64_t *v119[7];
  int v120;
  const void **v121[3];
  __int128 *v122;
  std::__shared_weak_count *v123;
  int v124;
  uint64_t v125;

  if (*(char *)(a3 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v16 = *(_OWORD *)a3;
    *((_QWORD *)__dst + 2) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  v79 = __dst + 24;
  sub_20BDDC0E4((_QWORD *)__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  *((_QWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 8) = 0;
  v17 = (std::string *)sub_20BDDC0E4((_QWORD *)__dst + 10, "");
  v78 = (std::string *)(__dst + 32);
  v77 = __dst + 56;
  *((_DWORD *)__dst + 32) = 2;
  *((_QWORD *)__dst + 13) = 0;
  v76 = v17;
  *((_QWORD *)__dst + 14) = 0;
  __dst[120] = a4;
  *((_DWORD *)__dst + 31) = a5;
  v18 = (__int128 *)(__dst + 136);
  sub_20BDDC0E4((_QWORD *)__dst + 17, "");
  *((_QWORD *)__dst + 20) = 0;
  *((_QWORD *)__dst + 21) = 0;
  v19 = a2[1];
  v119[5] = *a2;
  v119[6] = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 1);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v114 = 0;
  v113 = 0;
  __p = &v113;
  v119[3] = 0;
  v119[4] = 0;
  v120 = 2;
  sub_20BDEBF8C((uint64_t *)v121, (const void ***)&__p);
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v125 = 1;
  sub_20BDE9D48((uint64_t)&__p, v113);
  if (v19)
  {
    v22 = (unint64_t *)(v19 + 1);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      (*(void (**)(uint64_t *))(*v19 + 16))(v19);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v19);
    }
  }
  sub_20BE02E30(a7, (uint64_t)&v120);
  sub_20BE02E30(a8, (uint64_t)&v120);
  sub_20BE02E30(a9, (uint64_t)&v120);
  v24 = sub_20BDEBF8C((uint64_t *)v119, v121);
  sub_20BE288A4((uint64_t **)v24, a5);
  sub_20BDDC0E4(&__p, "isGeomParam");
  sub_20BDDC0E4(&__str, "true");
  p_p = &__p;
  v25 = sub_20BDDDFDC(v119, (const void **)&__p, (uint64_t)&unk_20CA52281, (__int128 **)&p_p);
  std::string::operator=((std::string *)(v25 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v114) < 0)
    operator delete(__p);
  sub_20BDDC0E4(&v118, "float32_t");
  sub_20BDDC0E4(&__p, "podName");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v26 = sub_20BDDDFDC(v119, (const void **)&__p, (uint64_t)&unk_20CA52281, (__int128 **)&__str);
  std::string::operator=((std::string *)(v26 + 7), &v118);
  if (SHIBYTE(v114) < 0)
    operator delete(__p);
  sub_20BDDE5E0((uint64_t)&__p);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_20BDDC0E4(&__str, "podExtent");
  p_p = &__str;
  v27 = sub_20BDDDFDC(v119, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_20CA52281, (__int128 **)&p_p);
  std::string::operator=((std::string *)(v27 + 7), &v111);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_20BDDE5E0((uint64_t)&__str);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_20BDDC0E4(&p_p, "arrayExtent");
  v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
  v28 = sub_20BDDDFDC(v119, (const void **)&p_p, (uint64_t)&unk_20CA52281, (__int128 **)&v105);
  std::string::operator=((std::string *)(v28 + 7), &v106);
  if (v99.__r_.__value_.__s.__data_[15] < 0)
    operator delete(p_p);
  sub_20BDDC0E4(&p_p, "interpretation");
  sub_20BDDC0E4(&v105, "vector");
  p_p_p = &p_p;
  v29 = sub_20BDDDFDC(v119, (const void **)&p_p, (uint64_t)&unk_20CA52281, (__int128 **)&p_p_p);
  std::string::operator=((std::string *)(v29 + 7), &v105);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if (v99.__r_.__value_.__s.__data_[15] < 0)
    operator delete(p_p);
  v30 = v120;
  v31 = v122;
  p_p_p = (void **)v122;
  v104 = v123;
  if (v123)
  {
    p_shared_owners = (unint64_t *)&v123->__shared_owners_;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
  }
  if (v31)
  {
    v34 = *a2;
    v35 = (std::string::size_type)a2[1];
    if (v35)
    {
      v36 = (unint64_t *)(v35 + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    p_p = v34;
    v99.__r_.__value_.__r.__words[0] = v35;
    (*(void (**)(uint64_t **__return_ptr))(*v34 + 24))(&v101);
    (*(void (**)(std::string *__return_ptr))(*v101 + 24))(&v105);
    v38 = (*(uint64_t (**)(std::string::size_type, __int128 *))(*(_QWORD *)v105.__r_.__value_.__l.__data_
                                                                        + 48))(v105.__r_.__value_.__r.__words[0], v31);
    size = (std::__shared_weak_count *)v105.__r_.__value_.__l.__size_;
    if (v105.__r_.__value_.__l.__size_)
    {
      v40 = (unint64_t *)(v105.__r_.__value_.__l.__size_ + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v42 = (std::__shared_weak_count *)v102;
    if (v102)
    {
      v43 = (unint64_t *)(v102 + 1);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = (std::__shared_weak_count *)v99.__r_.__value_.__r.__words[0];
    if (v99.__r_.__value_.__r.__words[0])
    {
      v46 = (unint64_t *)(v99.__r_.__value_.__r.__words[0] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  else
  {
    v38 = v124;
  }
  if (__dst[120])
  {
    v48 = (std::__shared_weak_count *)a2[1];
    v96 = *a2;
    v97 = v48;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    LODWORD(v105.__r_.__value_.__l.__data_) = 3;
    v105.__r_.__value_.__l.__size_ = (std::string::size_type)v119;
    LODWORD(v101) = 1;
    LODWORD(v102) = v30;
    Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&p_p, &v96, a3, &v105, &v101);
    *((_DWORD *)__dst + 32) = (_DWORD)p_p;
    std::string::operator=((std::string *)(__dst + 136), &v99);
    sub_20BDE881C((_QWORD *)__dst + 20, v100);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&p_p);
    v51 = v97;
    if (v97)
    {
      v52 = (unint64_t *)&v97->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v91 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_20BDDBFAC(&v92, *((void **)__dst + 17), *((_QWORD *)__dst + 18));
    }
    else
    {
      v92 = *v18;
      v93 = *((_QWORD *)__dst + 19);
    }
    v60 = *((_QWORD *)__dst + 21);
    v94 = *((_QWORD *)__dst + 20);
    v95 = v60;
    if (v60)
    {
      v61 = (unint64_t *)(v60 + 8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    sub_20BDDC0E4(&v105, ".vals");
    LODWORD(v101) = 3;
    v102 = v119;
    LODWORD(v89) = 1;
    v90 = v30;
    LODWORD(v87) = 2;
    v88 = v38;
    sub_20BE2BBAC((uint64_t)&p_p, &v91, (uint64_t)&v105, &v101, &v89, &v87);
    *v79 = (_DWORD)p_p;
    std::string::operator=(v78, &v99);
    sub_20BDE881C(v77, v100);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&p_p);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v91);
    v82 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_20BDDBFAC(&v83, *((void **)__dst + 17), *((_QWORD *)__dst + 18));
    }
    else
    {
      v83 = *v18;
      v84 = *((_QWORD *)__dst + 19);
    }
    v63 = *((_QWORD *)__dst + 21);
    v85 = *((_QWORD *)__dst + 20);
    v86 = v63;
    if (v63)
    {
      v64 = (unint64_t *)(v63 + 8);
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    sub_20BDDC0E4(&v105, ".indices");
    LODWORD(v101) = 2;
    LODWORD(v102) = v38;
    LODWORD(v89) = 0;
    v90 = 0;
    LODWORD(v87) = 0;
    v88 = 0;
    sub_20BE2C1F0((uint64_t)&p_p, &v82, (uint64_t)&v105, &v101, &v89, &v87);
    *((_DWORD *)__dst + 18) = (_DWORD)p_p;
    std::string::operator=(v76, &v99);
    sub_20BDE881C((_QWORD *)__dst + 13, v100);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&p_p);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v82);
  }
  else
  {
    v54 = (std::__shared_weak_count *)a2[1];
    v80 = *a2;
    v81 = v54;
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    LODWORD(v105.__r_.__value_.__l.__data_) = 3;
    v105.__r_.__value_.__l.__size_ = (std::string::size_type)v119;
    LODWORD(v101) = 1;
    LODWORD(v102) = v30;
    LODWORD(v89) = 2;
    v90 = v38;
    LODWORD(v87) = 0;
    v88 = 0;
    sub_20BE2C780((uint64_t)&p_p, (uint64_t *)&v80, a3, (uint64_t **)&v105, &v101, &v89, &v87);
    *v79 = (_DWORD)p_p;
    std::string::operator=(v78, &v99);
    sub_20BDE881C(v77, v100);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&p_p);
    v57 = v81;
    if (v81)
    {
      v58 = (unint64_t *)&v81->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  v66 = v104;
  if (v104)
  {
    v67 = (unint64_t *)&v104->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  v69 = (_QWORD *)*MEMORY[0x24BEDB800];
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
  v70 = *(void **)(MEMORY[0x24BEDB800] + 24);
  *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + *(v69 - 3)) = (std::string::size_type)v70;
  v71 = MEMORY[0x24BEDB848];
  __str.__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
  if (v109 < 0)
    operator delete(v108);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212B92EB0](&v110);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  __p = v69;
  *(void **)((char *)&__p + *(v69 - 3)) = v70;
  v113 = (_QWORD *)(v71 + 16);
  if (v116 < 0)
    operator delete(v115);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212B92EB0](&v117);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  sub_20BDE9D48((uint64_t)v119, v119[1]);
  v72 = v123;
  if (v123)
  {
    v73 = (unint64_t *)&v123->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  sub_20BDE9D48((uint64_t)v121, v121[1]);
  return __dst;
}

void sub_20BE2B920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  uint64_t v56;
  Alembic::Abc::v12::OCompoundProperty *v57;
  uint64_t v58;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a45);
  if (a55 < 0)
    operator delete(__p);
  sub_20BDDE6CC((uint64_t)&a56);
  if (SLOBYTE(STACK[0x27F]) < 0)
    operator delete((void *)STACK[0x268]);
  sub_20BDDE6CC((uint64_t)&STACK[0x280]);
  if (*(char *)(v58 - 209) < 0)
    operator delete(*(void **)(v58 - 232));
  sub_20BDE9D48(v58 - 208, *(_QWORD **)(v58 - 200));
  sub_20BE02EB0(v58 - 152);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v57);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a11);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a15);
  if (*(char *)(v56 + 23) < 0)
    operator delete(*(void **)v56);
  _Unwind_Resume(a1);
}

void sub_20BE2BB50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
    operator delete(__p);
  JUMPOUT(0x20BE2BAE4);
}

void sub_20BE2BB68()
{
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  JUMPOUT(0x20BE2BAFCLL);
}

void sub_20BE2BB80(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x297]) < 0)
    JUMPOUT(0x20BE2BB08);
  JUMPOUT(0x20BE2BB0CLL);
}

uint64_t sub_20BE2BBAC(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v22 = *((_QWORD *)a2 + 4);
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = *a2;
  LODWORD(v20) = 1;
  v21 = v15;
  sub_20BE2BCB4((int *)a1, &v22, a3, &v20, a4, a5, a6);
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return a1;
}

void sub_20BE2BC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v3;
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  _Unwind_Resume(a1);
}

void sub_20BE2BCB4(int *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t *v14;
  void *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *exception;
  _QWORD *v36;
  uint64_t p_p;
  std::__shared_weak_count *v38;
  std::string __str;
  void *__p;
  std::__shared_weak_count *v41;
  char v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD v45[37];
  int v46;
  const void **v47[3];
  void *v48;
  std::__shared_weak_count *v49;
  unsigned int v50;
  uint64_t v51;

  v44 = 0;
  v45[0] = 0;
  v43 = (uint64_t *)&v44;
  v45[35] = 0;
  v45[36] = 0;
  v46 = 2;
  sub_20BDEBF8C((uint64_t *)v47, (const void ***)&v43);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 1;
  sub_20BDE9D48((uint64_t)&v43, v44);
  sub_20BE02E30(a4, (uint64_t)&v46);
  sub_20BE02E30(a5, (uint64_t)&v46);
  sub_20BE02E30(a6, (uint64_t)&v46);
  sub_20BE02E30(a7, (uint64_t)&v46);
  *a1 = v46;
  v45[33] = a1;
  v45[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v43);
    sub_20BDDC1C8(v45, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_20BDDBF20(&__p, (__int128 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    v36 = sub_20BDDC09C(exception, (uint64_t)&__p);
    __cxa_throw(v36, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v43, v47);
  sub_20BDDC0E4(&__p, "interpretation");
  sub_20BDDC0E4(&__str, "vector");
  p_p = (uint64_t)&__p;
  v14 = sub_20BDDDFDC(&v43, (const void **)&__p, (uint64_t)&unk_20CA52281, (__int128 **)&p_p);
  std::string::operator=((std::string *)(v14 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v42 < 0)
    operator delete(__p);
  v15 = v48;
  __p = v48;
  v41 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = *a2;
  if (v15)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v18 + 24))(&p_p);
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)p_p + 24))(&__str);
    v19 = (*(uint64_t (**)(std::string::size_type, void *))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 48))(__str.__r_.__value_.__r.__words[0], v15);
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v21 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v23 = v38;
    if (v38)
    {
      v24 = (unint64_t *)&v38->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v18 = *a2;
  }
  else
  {
    v19 = v50;
  }
  p_p = 0x20000000ALL;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t **, uint64_t *, uint64_t))(*(_QWORD *)v18 + 104))(&__str, v18, a3, &v43, &p_p, v19);
  sub_20BDE82DC((uint64_t)(a1 + 8), (__int128 *)&__str);
  v26 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v27 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v41;
  if (v41)
  {
    v30 = (unint64_t *)&v41->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  sub_20BDE9D48((uint64_t)&v43, v44);
  v32 = v49;
  if (v49)
  {
    v33 = (unint64_t *)&v49->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  sub_20BDE9D48((uint64_t)v47, v47[1]);
}

void sub_20BE2C074(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a25);
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v26 + 32));
  MEMORY[0x212B929D0](v26 + 8, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 184, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 184, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE2BF9CLL);
}

void sub_20BE2C1B8()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 152);
  JUMPOUT(0x20BE2C1E8);
}

uint64_t sub_20BE2C1F0(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v22 = *((_QWORD *)a2 + 4);
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = *a2;
  LODWORD(v20) = 1;
  v21 = v15;
  sub_20BE2C2F8((int *)a1, &v22, a3, &v20, a4, a5, a6);
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return a1;
}

void sub_20BE2C2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v3;
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  _Unwind_Resume(a1);
}

void sub_20BE2C2F8(int *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *exception;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  const void **v42;
  _QWORD *v43;
  _QWORD v44[37];
  int v45;
  const void **v46[3];
  uint64_t v47;
  std::__shared_weak_count *v48;
  unsigned int v49;
  uint64_t v50;

  v43 = 0;
  v44[0] = 0;
  v42 = (const void **)&v43;
  v44[35] = 0;
  v44[36] = 0;
  v45 = 2;
  sub_20BDEBF8C((uint64_t *)v46, &v42);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  sub_20BDE9D48((uint64_t)&v42, v43);
  sub_20BE02E30(a4, (uint64_t)&v45);
  sub_20BE02E30(a5, (uint64_t)&v45);
  sub_20BE02E30(a6, (uint64_t)&v45);
  sub_20BE02E30(a7, (uint64_t)&v45);
  *a1 = v45;
  v44[33] = a1;
  v44[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v42);
    sub_20BDDC1C8(v44, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_20BDDBF20(&v40, (__int128 *)__p);
    if (v39 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v35 = sub_20BDDC09C(exception, (uint64_t)&v40);
    __cxa_throw(v35, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v42, v46);
  v14 = v47;
  v40 = v47;
  v41 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = *a2;
  if (v14)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v17 + 24))(&v36);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v36 + 24))(__p);
    v18 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)__p[0] + 48))(__p[0], v14);
    v19 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v20 = (unint64_t *)((char *)__p[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v37;
    if (v37)
    {
      v23 = (unint64_t *)&v37->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = *a2;
  }
  else
  {
    v18 = v49;
  }
  v36 = 0x100000005;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const void ***, uint64_t *, uint64_t))(*(_QWORD *)v17 + 104))(__p, v17, a3, &v42, &v36, v18);
  sub_20BDE82DC((uint64_t)(a1 + 8), (__int128 *)__p);
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v26 = (unint64_t *)((char *)__p[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_20BDE9D48((uint64_t)&v42, v43);
  v31 = v48;
  if (v48)
  {
    v32 = (unint64_t *)&v48->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  sub_20BDE9D48((uint64_t)v46, v46[1]);
}

void sub_20BE2C648(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  void *v11;
  std::exception v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  v11 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v7 + 32));
  MEMORY[0x212B929D0](v7 + 8, "");
  if (a2 == 2)
    sub_20BE02570(v8 - 176, (uint64_t)v11);
  else
    sub_20BE02504(v8 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE2C570);
}

void sub_20BE2C72C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE2C780(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20BE2BCB4((int *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE2C868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE2C884(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *exception;
  _QWORD *v12;
  __int128 __p;
  char v14;
  int v15[8];
  _BYTE v16[16];
  _QWORD v17[33];

  v4 = *a2;
  *(_QWORD *)((char *)a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_20BDE1364(a1 + 2, (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  v6 = *((_DWORD *)a2 + 2);
  v5 = a2 + 1;
  if (v6 != 10 || *((_BYTE *)v5 + 4) != 3)
  {
    sub_20BDDBD68((uint64_t)v16);
    v8 = sub_20BDDC1C8(v17, (uint64_t)"Invalid DataType in TypedArraySample. Expected: ", 48);
    *(_QWORD *)v15 = 0x30000000ALL;
    v9 = sub_20BDE00F4(v8, v15);
    v10 = sub_20BDDC1C8(v9, (uint64_t)", but got: ", 11);
    sub_20BDE00F4(v10, (int *)v5);
    std::stringbuf::str();
    sub_20BDDBF20(v15, &__p);
    if (v14 < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    v12 = sub_20BDDC09C(exception, (uint64_t)v15);
    __cxa_throw(v12, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  return a1;
}

void sub_20BE2C9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void **v5;
  void *v7;
  std::exception v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v8.__vftable = va_arg(va1, std::exception_vtbl *);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v4 + 24) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20BE2C9F0(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *a2;
  *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_20BDE1364((_QWORD *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  v8 = *a3;
  v9 = *(uint64_t *)((char *)a3 + 5);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 45) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_20BDE1364((_QWORD *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  *(_DWORD *)(a1 + 80) = a4;
  return a1;
}

void sub_20BE2CA84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20BE2CAA0(char *__dst, uint64_t **a2, uint64_t a3, char a4, int a5, int a6, uint64_t **a7, uint64_t **a8, uint64_t **a9)
{
  __int128 v16;
  std::string *v17;
  __int128 *v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  int v30;
  __int128 *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t *v34;
  std::string::size_type v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  std::__shared_weak_count *size;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  void *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::string *v76;
  _QWORD *v77;
  std::string *v78;
  _DWORD *v79;
  uint64_t *v80;
  std::__shared_weak_count *v81;
  int v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  int v88;
  uint64_t *v89;
  int v90;
  int v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  std::__shared_weak_count *v97;
  void *p_p;
  std::string v99;
  uint64_t v100[2];
  uint64_t *v101;
  uint64_t **v102;
  void **p_p_p;
  std::__shared_weak_count *v104;
  std::string v105;
  std::string v106;
  std::string __str;
  void *v108;
  char v109;
  uint64_t v110;
  std::string v111;
  void *__p;
  _QWORD *v113;
  uint64_t v114;
  void *v115;
  char v116;
  uint64_t v117;
  std::string v118;
  uint64_t *v119[7];
  int v120;
  const void **v121[3];
  __int128 *v122;
  std::__shared_weak_count *v123;
  int v124;
  uint64_t v125;

  if (*(char *)(a3 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v16 = *(_OWORD *)a3;
    *((_QWORD *)__dst + 2) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  v79 = __dst + 24;
  sub_20BDDC0E4((_QWORD *)__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  *((_QWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 8) = 0;
  v17 = (std::string *)sub_20BDDC0E4((_QWORD *)__dst + 10, "");
  v78 = (std::string *)(__dst + 32);
  v77 = __dst + 56;
  *((_DWORD *)__dst + 32) = 2;
  *((_QWORD *)__dst + 13) = 0;
  v76 = v17;
  *((_QWORD *)__dst + 14) = 0;
  __dst[120] = a4;
  *((_DWORD *)__dst + 31) = a5;
  v18 = (__int128 *)(__dst + 136);
  sub_20BDDC0E4((_QWORD *)__dst + 17, "");
  *((_QWORD *)__dst + 20) = 0;
  *((_QWORD *)__dst + 21) = 0;
  v19 = a2[1];
  v119[5] = *a2;
  v119[6] = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 1);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v114 = 0;
  v113 = 0;
  __p = &v113;
  v119[3] = 0;
  v119[4] = 0;
  v120 = 2;
  sub_20BDEBF8C((uint64_t *)v121, (const void ***)&__p);
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v125 = 1;
  sub_20BDE9D48((uint64_t)&__p, v113);
  if (v19)
  {
    v22 = (unint64_t *)(v19 + 1);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      (*(void (**)(uint64_t *))(*v19 + 16))(v19);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v19);
    }
  }
  sub_20BE02E30(a7, (uint64_t)&v120);
  sub_20BE02E30(a8, (uint64_t)&v120);
  sub_20BE02E30(a9, (uint64_t)&v120);
  v24 = sub_20BDEBF8C((uint64_t *)v119, v121);
  sub_20BE288A4((uint64_t **)v24, a5);
  sub_20BDDC0E4(&__p, "isGeomParam");
  sub_20BDDC0E4(&__str, "true");
  p_p = &__p;
  v25 = sub_20BDDDFDC(v119, (const void **)&__p, (uint64_t)&unk_20CA52281, (__int128 **)&p_p);
  std::string::operator=((std::string *)(v25 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v114) < 0)
    operator delete(__p);
  sub_20BDDC0E4(&v118, "float32_t");
  sub_20BDDC0E4(&__p, "podName");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v26 = sub_20BDDDFDC(v119, (const void **)&__p, (uint64_t)&unk_20CA52281, (__int128 **)&__str);
  std::string::operator=((std::string *)(v26 + 7), &v118);
  if (SHIBYTE(v114) < 0)
    operator delete(__p);
  sub_20BDDE5E0((uint64_t)&__p);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_20BDDC0E4(&__str, "podExtent");
  p_p = &__str;
  v27 = sub_20BDDDFDC(v119, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_20CA52281, (__int128 **)&p_p);
  std::string::operator=((std::string *)(v27 + 7), &v111);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_20BDDE5E0((uint64_t)&__str);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_20BDDC0E4(&p_p, "arrayExtent");
  v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
  v28 = sub_20BDDDFDC(v119, (const void **)&p_p, (uint64_t)&unk_20CA52281, (__int128 **)&v105);
  std::string::operator=((std::string *)(v28 + 7), &v106);
  if (v99.__r_.__value_.__s.__data_[15] < 0)
    operator delete(p_p);
  sub_20BDDC0E4(&p_p, "interpretation");
  sub_20BDDC0E4(&v105, "normal");
  p_p_p = &p_p;
  v29 = sub_20BDDDFDC(v119, (const void **)&p_p, (uint64_t)&unk_20CA52281, (__int128 **)&p_p_p);
  std::string::operator=((std::string *)(v29 + 7), &v105);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if (v99.__r_.__value_.__s.__data_[15] < 0)
    operator delete(p_p);
  v30 = v120;
  v31 = v122;
  p_p_p = (void **)v122;
  v104 = v123;
  if (v123)
  {
    p_shared_owners = (unint64_t *)&v123->__shared_owners_;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
  }
  if (v31)
  {
    v34 = *a2;
    v35 = (std::string::size_type)a2[1];
    if (v35)
    {
      v36 = (unint64_t *)(v35 + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    p_p = v34;
    v99.__r_.__value_.__r.__words[0] = v35;
    (*(void (**)(uint64_t **__return_ptr))(*v34 + 24))(&v101);
    (*(void (**)(std::string *__return_ptr))(*v101 + 24))(&v105);
    v38 = (*(uint64_t (**)(std::string::size_type, __int128 *))(*(_QWORD *)v105.__r_.__value_.__l.__data_
                                                                        + 48))(v105.__r_.__value_.__r.__words[0], v31);
    size = (std::__shared_weak_count *)v105.__r_.__value_.__l.__size_;
    if (v105.__r_.__value_.__l.__size_)
    {
      v40 = (unint64_t *)(v105.__r_.__value_.__l.__size_ + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v42 = (std::__shared_weak_count *)v102;
    if (v102)
    {
      v43 = (unint64_t *)(v102 + 1);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = (std::__shared_weak_count *)v99.__r_.__value_.__r.__words[0];
    if (v99.__r_.__value_.__r.__words[0])
    {
      v46 = (unint64_t *)(v99.__r_.__value_.__r.__words[0] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  else
  {
    v38 = v124;
  }
  if (__dst[120])
  {
    v48 = (std::__shared_weak_count *)a2[1];
    v96 = *a2;
    v97 = v48;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    LODWORD(v105.__r_.__value_.__l.__data_) = 3;
    v105.__r_.__value_.__l.__size_ = (std::string::size_type)v119;
    LODWORD(v101) = 1;
    LODWORD(v102) = v30;
    Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&p_p, &v96, a3, &v105, &v101);
    *((_DWORD *)__dst + 32) = (_DWORD)p_p;
    std::string::operator=((std::string *)(__dst + 136), &v99);
    sub_20BDE881C((_QWORD *)__dst + 20, v100);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&p_p);
    v51 = v97;
    if (v97)
    {
      v52 = (unint64_t *)&v97->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v91 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_20BDDBFAC(&v92, *((void **)__dst + 17), *((_QWORD *)__dst + 18));
    }
    else
    {
      v92 = *v18;
      v93 = *((_QWORD *)__dst + 19);
    }
    v60 = *((_QWORD *)__dst + 21);
    v94 = *((_QWORD *)__dst + 20);
    v95 = v60;
    if (v60)
    {
      v61 = (unint64_t *)(v60 + 8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    sub_20BDDC0E4(&v105, ".vals");
    LODWORD(v101) = 3;
    v102 = v119;
    LODWORD(v89) = 1;
    v90 = v30;
    LODWORD(v87) = 2;
    v88 = v38;
    sub_20BE2D778((uint64_t)&p_p, &v91, (uint64_t)&v105, &v101, &v89, &v87);
    *v79 = (_DWORD)p_p;
    std::string::operator=(v78, &v99);
    sub_20BDE881C(v77, v100);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&p_p);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v91);
    v82 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_20BDDBFAC(&v83, *((void **)__dst + 17), *((_QWORD *)__dst + 18));
    }
    else
    {
      v83 = *v18;
      v84 = *((_QWORD *)__dst + 19);
    }
    v63 = *((_QWORD *)__dst + 21);
    v85 = *((_QWORD *)__dst + 20);
    v86 = v63;
    if (v63)
    {
      v64 = (unint64_t *)(v63 + 8);
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    sub_20BDDC0E4(&v105, ".indices");
    LODWORD(v101) = 2;
    LODWORD(v102) = v38;
    LODWORD(v89) = 0;
    v90 = 0;
    LODWORD(v87) = 0;
    v88 = 0;
    sub_20BE2C1F0((uint64_t)&p_p, &v82, (uint64_t)&v105, &v101, &v89, &v87);
    *((_DWORD *)__dst + 18) = (_DWORD)p_p;
    std::string::operator=(v76, &v99);
    sub_20BDE881C((_QWORD *)__dst + 13, v100);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&p_p);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v82);
  }
  else
  {
    v54 = (std::__shared_weak_count *)a2[1];
    v80 = *a2;
    v81 = v54;
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    LODWORD(v105.__r_.__value_.__l.__data_) = 3;
    v105.__r_.__value_.__l.__size_ = (std::string::size_type)v119;
    LODWORD(v101) = 1;
    LODWORD(v102) = v30;
    LODWORD(v89) = 2;
    v90 = v38;
    LODWORD(v87) = 0;
    v88 = 0;
    sub_20BE2DDBC((uint64_t)&p_p, (uint64_t *)&v80, a3, (uint64_t **)&v105, &v101, &v89, &v87);
    *v79 = (_DWORD)p_p;
    std::string::operator=(v78, &v99);
    sub_20BDE881C(v77, v100);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&p_p);
    v57 = v81;
    if (v81)
    {
      v58 = (unint64_t *)&v81->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  v66 = v104;
  if (v104)
  {
    v67 = (unint64_t *)&v104->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  v69 = (_QWORD *)*MEMORY[0x24BEDB800];
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
  v70 = *(void **)(MEMORY[0x24BEDB800] + 24);
  *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + *(v69 - 3)) = (std::string::size_type)v70;
  v71 = MEMORY[0x24BEDB848];
  __str.__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
  if (v109 < 0)
    operator delete(v108);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212B92EB0](&v110);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  __p = v69;
  *(void **)((char *)&__p + *(v69 - 3)) = v70;
  v113 = (_QWORD *)(v71 + 16);
  if (v116 < 0)
    operator delete(v115);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212B92EB0](&v117);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  sub_20BDE9D48((uint64_t)v119, v119[1]);
  v72 = v123;
  if (v123)
  {
    v73 = (unint64_t *)&v123->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  sub_20BDE9D48((uint64_t)v121, v121[1]);
  return __dst;
}

void sub_20BE2D4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  uint64_t v56;
  Alembic::Abc::v12::OCompoundProperty *v57;
  uint64_t v58;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a45);
  if (a55 < 0)
    operator delete(__p);
  sub_20BDDE6CC((uint64_t)&a56);
  if (SLOBYTE(STACK[0x27F]) < 0)
    operator delete((void *)STACK[0x268]);
  sub_20BDDE6CC((uint64_t)&STACK[0x280]);
  if (*(char *)(v58 - 209) < 0)
    operator delete(*(void **)(v58 - 232));
  sub_20BDE9D48(v58 - 208, *(_QWORD **)(v58 - 200));
  sub_20BE02EB0(v58 - 152);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v57);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a11);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a15);
  if (*(char *)(v56 + 23) < 0)
    operator delete(*(void **)v56);
  _Unwind_Resume(a1);
}

void sub_20BE2D71C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
    operator delete(__p);
  JUMPOUT(0x20BE2D6B0);
}

void sub_20BE2D734()
{
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  JUMPOUT(0x20BE2D6C8);
}

void sub_20BE2D74C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x297]) < 0)
    JUMPOUT(0x20BE2D6D4);
  JUMPOUT(0x20BE2D6D8);
}

uint64_t sub_20BE2D778(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v22 = *((_QWORD *)a2 + 4);
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = *a2;
  LODWORD(v20) = 1;
  v21 = v15;
  sub_20BE2D880((int *)a1, &v22, a3, &v20, a4, a5, a6);
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return a1;
}

void sub_20BE2D864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v3;
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  _Unwind_Resume(a1);
}

void sub_20BE2D880(int *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t *v14;
  void *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *exception;
  _QWORD *v36;
  uint64_t p_p;
  std::__shared_weak_count *v38;
  std::string __str;
  void *__p;
  std::__shared_weak_count *v41;
  char v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD v45[37];
  int v46;
  const void **v47[3];
  void *v48;
  std::__shared_weak_count *v49;
  unsigned int v50;
  uint64_t v51;

  v44 = 0;
  v45[0] = 0;
  v43 = (uint64_t *)&v44;
  v45[35] = 0;
  v45[36] = 0;
  v46 = 2;
  sub_20BDEBF8C((uint64_t *)v47, (const void ***)&v43);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 1;
  sub_20BDE9D48((uint64_t)&v43, v44);
  sub_20BE02E30(a4, (uint64_t)&v46);
  sub_20BE02E30(a5, (uint64_t)&v46);
  sub_20BE02E30(a6, (uint64_t)&v46);
  sub_20BE02E30(a7, (uint64_t)&v46);
  *a1 = v46;
  v45[33] = a1;
  v45[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v43);
    sub_20BDDC1C8(v45, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_20BDDBF20(&__p, (__int128 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    v36 = sub_20BDDC09C(exception, (uint64_t)&__p);
    __cxa_throw(v36, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v43, v47);
  sub_20BDDC0E4(&__p, "interpretation");
  sub_20BDDC0E4(&__str, "normal");
  p_p = (uint64_t)&__p;
  v14 = sub_20BDDDFDC(&v43, (const void **)&__p, (uint64_t)&unk_20CA52281, (__int128 **)&p_p);
  std::string::operator=((std::string *)(v14 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v42 < 0)
    operator delete(__p);
  v15 = v48;
  __p = v48;
  v41 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = *a2;
  if (v15)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v18 + 24))(&p_p);
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)p_p + 24))(&__str);
    v19 = (*(uint64_t (**)(std::string::size_type, void *))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 48))(__str.__r_.__value_.__r.__words[0], v15);
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v21 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v23 = v38;
    if (v38)
    {
      v24 = (unint64_t *)&v38->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v18 = *a2;
  }
  else
  {
    v19 = v50;
  }
  p_p = 0x30000000ALL;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t **, uint64_t *, uint64_t))(*(_QWORD *)v18 + 104))(&__str, v18, a3, &v43, &p_p, v19);
  sub_20BDE82DC((uint64_t)(a1 + 8), (__int128 *)&__str);
  v26 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v27 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v41;
  if (v41)
  {
    v30 = (unint64_t *)&v41->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  sub_20BDE9D48((uint64_t)&v43, v44);
  v32 = v49;
  if (v49)
  {
    v33 = (unint64_t *)&v49->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  sub_20BDE9D48((uint64_t)v47, v47[1]);
}

void sub_20BE2DC40(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a25);
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v26 + 32));
  MEMORY[0x212B929D0](v26 + 8, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 184, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 184, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE2DB68);
}

void sub_20BE2DD84()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 152);
  JUMPOUT(0x20BE2DDB4);
}

uint64_t sub_20BE2DDBC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20BE2D880((int *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE2DEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE2DEC0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  void *__p;
  _BYTE *v7;

  if (a2[1] == *a2)
    v3 = 0;
  else
    v3 = *a2;
  v5 = (a2[1] - *a2) >> 2;
  sub_20BDE8894(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x10000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20BE2DF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE2DF60(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *a2;
  *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_20BDE1364((_QWORD *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  v8 = *a3;
  v9 = *(uint64_t *)((char *)a3 + 5);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 45) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_20BDE1364((_QWORD *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  *(_DWORD *)(a1 + 80) = a4;
  return a1;
}

void sub_20BE2DFF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20BE2E010(char *__dst, uint64_t **a2, uint64_t a3, char a4, int a5, int a6, uint64_t **a7, uint64_t **a8, uint64_t **a9)
{
  __int128 v16;
  std::string *v17;
  __int128 *v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  int v30;
  __int128 *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t *v34;
  std::string::size_type v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  std::__shared_weak_count *size;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  void *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::string *v76;
  _QWORD *v77;
  std::string *v78;
  _DWORD *v79;
  uint64_t *v80;
  std::__shared_weak_count *v81;
  int v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  int v88;
  uint64_t *v89;
  int v90;
  int v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  std::__shared_weak_count *v97;
  void *p_p;
  std::string v99;
  uint64_t v100[2];
  uint64_t *v101;
  uint64_t **v102;
  void **p_p_p;
  std::__shared_weak_count *v104;
  std::string v105;
  std::string v106;
  std::string __str;
  void *v108;
  char v109;
  uint64_t v110;
  std::string v111;
  void *__p;
  _QWORD *v113;
  uint64_t v114;
  void *v115;
  char v116;
  uint64_t v117;
  std::string v118;
  uint64_t *v119[7];
  int v120;
  const void **v121[3];
  __int128 *v122;
  std::__shared_weak_count *v123;
  int v124;
  uint64_t v125;

  if (*(char *)(a3 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v16 = *(_OWORD *)a3;
    *((_QWORD *)__dst + 2) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  v79 = __dst + 24;
  sub_20BDDC0E4((_QWORD *)__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  *((_QWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 8) = 0;
  v17 = (std::string *)sub_20BDDC0E4((_QWORD *)__dst + 10, "");
  v78 = (std::string *)(__dst + 32);
  v77 = __dst + 56;
  *((_DWORD *)__dst + 32) = 2;
  *((_QWORD *)__dst + 13) = 0;
  v76 = v17;
  *((_QWORD *)__dst + 14) = 0;
  __dst[120] = a4;
  *((_DWORD *)__dst + 31) = a5;
  v18 = (__int128 *)(__dst + 136);
  sub_20BDDC0E4((_QWORD *)__dst + 17, "");
  *((_QWORD *)__dst + 20) = 0;
  *((_QWORD *)__dst + 21) = 0;
  v19 = a2[1];
  v119[5] = *a2;
  v119[6] = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 1);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v114 = 0;
  v113 = 0;
  __p = &v113;
  v119[3] = 0;
  v119[4] = 0;
  v120 = 2;
  sub_20BDEBF8C((uint64_t *)v121, (const void ***)&__p);
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v125 = 1;
  sub_20BDE9D48((uint64_t)&__p, v113);
  if (v19)
  {
    v22 = (unint64_t *)(v19 + 1);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      (*(void (**)(uint64_t *))(*v19 + 16))(v19);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v19);
    }
  }
  sub_20BE02E30(a7, (uint64_t)&v120);
  sub_20BE02E30(a8, (uint64_t)&v120);
  sub_20BE02E30(a9, (uint64_t)&v120);
  v24 = sub_20BDEBF8C((uint64_t *)v119, v121);
  sub_20BE288A4((uint64_t **)v24, a5);
  sub_20BDDC0E4(&__p, "isGeomParam");
  sub_20BDDC0E4(&__str, "true");
  p_p = &__p;
  v25 = sub_20BDDDFDC(v119, (const void **)&__p, (uint64_t)&unk_20CA52281, (__int128 **)&p_p);
  std::string::operator=((std::string *)(v25 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v114) < 0)
    operator delete(__p);
  sub_20BDDC0E4(&v118, "float32_t");
  sub_20BDDC0E4(&__p, "podName");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v26 = sub_20BDDDFDC(v119, (const void **)&__p, (uint64_t)&unk_20CA52281, (__int128 **)&__str);
  std::string::operator=((std::string *)(v26 + 7), &v118);
  if (SHIBYTE(v114) < 0)
    operator delete(__p);
  sub_20BDDE5E0((uint64_t)&__p);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_20BDDC0E4(&__str, "podExtent");
  p_p = &__str;
  v27 = sub_20BDDDFDC(v119, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_20CA52281, (__int128 **)&p_p);
  std::string::operator=((std::string *)(v27 + 7), &v111);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_20BDDE5E0((uint64_t)&__str);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_20BDDC0E4(&p_p, "arrayExtent");
  v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
  v28 = sub_20BDDDFDC(v119, (const void **)&p_p, (uint64_t)&unk_20CA52281, (__int128 **)&v105);
  std::string::operator=((std::string *)(v28 + 7), &v106);
  if (v99.__r_.__value_.__s.__data_[15] < 0)
    operator delete(p_p);
  sub_20BDDC0E4(&p_p, "interpretation");
  sub_20BDDC0E4(&v105, "");
  p_p_p = &p_p;
  v29 = sub_20BDDDFDC(v119, (const void **)&p_p, (uint64_t)&unk_20CA52281, (__int128 **)&p_p_p);
  std::string::operator=((std::string *)(v29 + 7), &v105);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if (v99.__r_.__value_.__s.__data_[15] < 0)
    operator delete(p_p);
  v30 = v120;
  v31 = v122;
  p_p_p = (void **)v122;
  v104 = v123;
  if (v123)
  {
    p_shared_owners = (unint64_t *)&v123->__shared_owners_;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
  }
  if (v31)
  {
    v34 = *a2;
    v35 = (std::string::size_type)a2[1];
    if (v35)
    {
      v36 = (unint64_t *)(v35 + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    p_p = v34;
    v99.__r_.__value_.__r.__words[0] = v35;
    (*(void (**)(uint64_t **__return_ptr))(*v34 + 24))(&v101);
    (*(void (**)(std::string *__return_ptr))(*v101 + 24))(&v105);
    v38 = (*(uint64_t (**)(std::string::size_type, __int128 *))(*(_QWORD *)v105.__r_.__value_.__l.__data_
                                                                        + 48))(v105.__r_.__value_.__r.__words[0], v31);
    size = (std::__shared_weak_count *)v105.__r_.__value_.__l.__size_;
    if (v105.__r_.__value_.__l.__size_)
    {
      v40 = (unint64_t *)(v105.__r_.__value_.__l.__size_ + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v42 = (std::__shared_weak_count *)v102;
    if (v102)
    {
      v43 = (unint64_t *)(v102 + 1);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = (std::__shared_weak_count *)v99.__r_.__value_.__r.__words[0];
    if (v99.__r_.__value_.__r.__words[0])
    {
      v46 = (unint64_t *)(v99.__r_.__value_.__r.__words[0] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  else
  {
    v38 = v124;
  }
  if (__dst[120])
  {
    v48 = (std::__shared_weak_count *)a2[1];
    v96 = *a2;
    v97 = v48;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    LODWORD(v105.__r_.__value_.__l.__data_) = 3;
    v105.__r_.__value_.__l.__size_ = (std::string::size_type)v119;
    LODWORD(v101) = 1;
    LODWORD(v102) = v30;
    Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&p_p, &v96, a3, &v105, &v101);
    *((_DWORD *)__dst + 32) = (_DWORD)p_p;
    std::string::operator=((std::string *)(__dst + 136), &v99);
    sub_20BDE881C((_QWORD *)__dst + 20, v100);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&p_p);
    v51 = v97;
    if (v97)
    {
      v52 = (unint64_t *)&v97->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v91 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_20BDDBFAC(&v92, *((void **)__dst + 17), *((_QWORD *)__dst + 18));
    }
    else
    {
      v92 = *v18;
      v93 = *((_QWORD *)__dst + 19);
    }
    v60 = *((_QWORD *)__dst + 21);
    v94 = *((_QWORD *)__dst + 20);
    v95 = v60;
    if (v60)
    {
      v61 = (unint64_t *)(v60 + 8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    sub_20BDDC0E4(&v105, ".vals");
    LODWORD(v101) = 3;
    v102 = v119;
    LODWORD(v89) = 1;
    v90 = v30;
    LODWORD(v87) = 2;
    v88 = v38;
    sub_20BE2F274((uint64_t)&p_p, &v91, (uint64_t)&v105, &v101, &v89, &v87);
    *v79 = (_DWORD)p_p;
    std::string::operator=(v78, &v99);
    sub_20BDE881C(v77, v100);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&p_p);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v91);
    v82 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_20BDDBFAC(&v83, *((void **)__dst + 17), *((_QWORD *)__dst + 18));
    }
    else
    {
      v83 = *v18;
      v84 = *((_QWORD *)__dst + 19);
    }
    v63 = *((_QWORD *)__dst + 21);
    v85 = *((_QWORD *)__dst + 20);
    v86 = v63;
    if (v63)
    {
      v64 = (unint64_t *)(v63 + 8);
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    sub_20BDDC0E4(&v105, ".indices");
    LODWORD(v101) = 2;
    LODWORD(v102) = v38;
    LODWORD(v89) = 0;
    v90 = 0;
    LODWORD(v87) = 0;
    v88 = 0;
    sub_20BE2C1F0((uint64_t)&p_p, &v82, (uint64_t)&v105, &v101, &v89, &v87);
    *((_DWORD *)__dst + 18) = (_DWORD)p_p;
    std::string::operator=(v76, &v99);
    sub_20BDE881C((_QWORD *)__dst + 13, v100);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&p_p);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v82);
  }
  else
  {
    v54 = (std::__shared_weak_count *)a2[1];
    v80 = *a2;
    v81 = v54;
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    LODWORD(v105.__r_.__value_.__l.__data_) = 3;
    v105.__r_.__value_.__l.__size_ = (std::string::size_type)v119;
    LODWORD(v101) = 1;
    LODWORD(v102) = v30;
    LODWORD(v89) = 2;
    v90 = v38;
    LODWORD(v87) = 0;
    v88 = 0;
    sub_20BE2ECE8((uint64_t)&p_p, (uint64_t *)&v80, a3, (uint64_t **)&v105, &v101, &v89, &v87);
    *v79 = (_DWORD)p_p;
    std::string::operator=(v78, &v99);
    sub_20BDE881C(v77, v100);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&p_p);
    v57 = v81;
    if (v81)
    {
      v58 = (unint64_t *)&v81->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  v66 = v104;
  if (v104)
  {
    v67 = (unint64_t *)&v104->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  v69 = (_QWORD *)*MEMORY[0x24BEDB800];
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
  v70 = *(void **)(MEMORY[0x24BEDB800] + 24);
  *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + *(v69 - 3)) = (std::string::size_type)v70;
  v71 = MEMORY[0x24BEDB848];
  __str.__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
  if (v109 < 0)
    operator delete(v108);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212B92EB0](&v110);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  __p = v69;
  *(void **)((char *)&__p + *(v69 - 3)) = v70;
  v113 = (_QWORD *)(v71 + 16);
  if (v116 < 0)
    operator delete(v115);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212B92EB0](&v117);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  sub_20BDE9D48((uint64_t)v119, v119[1]);
  v72 = v123;
  if (v123)
  {
    v73 = (unint64_t *)&v123->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  sub_20BDE9D48((uint64_t)v121, v121[1]);
  return __dst;
}

void sub_20BE2EA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  uint64_t v56;
  Alembic::Abc::v12::OCompoundProperty *v57;
  uint64_t v58;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a45);
  if (a55 < 0)
    operator delete(__p);
  sub_20BDDE6CC((uint64_t)&a56);
  if (SLOBYTE(STACK[0x27F]) < 0)
    operator delete((void *)STACK[0x268]);
  sub_20BDDE6CC((uint64_t)&STACK[0x280]);
  if (*(char *)(v58 - 209) < 0)
    operator delete(*(void **)(v58 - 232));
  sub_20BDE9D48(v58 - 208, *(_QWORD **)(v58 - 200));
  sub_20BE02EB0(v58 - 152);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v57);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a11);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a15);
  if (*(char *)(v56 + 23) < 0)
    operator delete(*(void **)v56);
  _Unwind_Resume(a1);
}

void sub_20BE2EC8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
    operator delete(__p);
  JUMPOUT(0x20BE2EC20);
}

void sub_20BE2ECA4()
{
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  JUMPOUT(0x20BE2EC38);
}

void sub_20BE2ECBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x297]) < 0)
    JUMPOUT(0x20BE2EC44);
  JUMPOUT(0x20BE2EC48);
}

uint64_t sub_20BE2ECE8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20BE2EDEC((int *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE2EDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v9);
  _Unwind_Resume(a1);
}

void sub_20BE2EDEC(int *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *exception;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  const void **v42;
  _QWORD *v43;
  _QWORD v44[37];
  int v45;
  const void **v46[3];
  uint64_t v47;
  std::__shared_weak_count *v48;
  unsigned int v49;
  uint64_t v50;

  v43 = 0;
  v44[0] = 0;
  v42 = (const void **)&v43;
  v44[35] = 0;
  v44[36] = 0;
  v45 = 2;
  sub_20BDEBF8C((uint64_t *)v46, &v42);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  sub_20BDE9D48((uint64_t)&v42, v43);
  sub_20BE02E30(a4, (uint64_t)&v45);
  sub_20BE02E30(a5, (uint64_t)&v45);
  sub_20BE02E30(a6, (uint64_t)&v45);
  sub_20BE02E30(a7, (uint64_t)&v45);
  *a1 = v45;
  v44[33] = a1;
  v44[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v42);
    sub_20BDDC1C8(v44, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_20BDDBF20(&v40, (__int128 *)__p);
    if (v39 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v35 = sub_20BDDC09C(exception, (uint64_t)&v40);
    __cxa_throw(v35, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v42, v46);
  v14 = v47;
  v40 = v47;
  v41 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = *a2;
  if (v14)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v17 + 24))(&v36);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v36 + 24))(__p);
    v18 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)__p[0] + 48))(__p[0], v14);
    v19 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v20 = (unint64_t *)((char *)__p[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v37;
    if (v37)
    {
      v23 = (unint64_t *)&v37->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = *a2;
  }
  else
  {
    v18 = v49;
  }
  v36 = 0x10000000ALL;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const void ***, uint64_t *, uint64_t))(*(_QWORD *)v17 + 104))(__p, v17, a3, &v42, &v36, v18);
  sub_20BDE82DC((uint64_t)(a1 + 8), (__int128 *)__p);
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v26 = (unint64_t *)((char *)__p[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_20BDE9D48((uint64_t)&v42, v43);
  v31 = v48;
  if (v48)
  {
    v32 = (unint64_t *)&v48->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  sub_20BDE9D48((uint64_t)v46, v46[1]);
}

void sub_20BE2F13C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  void *v11;
  std::exception v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  v11 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v7 + 32));
  MEMORY[0x212B929D0](v7 + 8, "");
  if (a2 == 2)
    sub_20BE02570(v8 - 176, (uint64_t)v11);
  else
    sub_20BE02504(v8 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE2F064);
}

void sub_20BE2F220(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE2F274(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v22 = *((_QWORD *)a2 + 4);
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = *a2;
  LODWORD(v20) = 1;
  v21 = v15;
  sub_20BE2EDEC((int *)a1, &v22, a3, &v20, a4, a5, a6);
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return a1;
}

void sub_20BE2F360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v3;
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE2F37C(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v22 = *((_QWORD *)a2 + 4);
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = *a2;
  LODWORD(v20) = 1;
  v21 = v15;
  sub_20BE2F484((int *)a1, &v22, a3, &v20, a4, a5, a6);
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return a1;
}

void sub_20BE2F468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v3;
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  _Unwind_Resume(a1);
}

void sub_20BE2F484(int *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *exception;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  const void **v42;
  _QWORD *v43;
  _QWORD v44[37];
  int v45;
  const void **v46[3];
  uint64_t v47;
  std::__shared_weak_count *v48;
  unsigned int v49;
  uint64_t v50;

  v43 = 0;
  v44[0] = 0;
  v42 = (const void **)&v43;
  v44[35] = 0;
  v44[36] = 0;
  v45 = 2;
  sub_20BDEBF8C((uint64_t *)v46, &v42);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  sub_20BDE9D48((uint64_t)&v42, v43);
  sub_20BE02E30(a4, (uint64_t)&v45);
  sub_20BE02E30(a5, (uint64_t)&v45);
  sub_20BE02E30(a6, (uint64_t)&v45);
  sub_20BE02E30(a7, (uint64_t)&v45);
  *a1 = v45;
  v44[33] = a1;
  v44[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v42);
    sub_20BDDC1C8(v44, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_20BDDBF20(&v40, (__int128 *)__p);
    if (v39 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v35 = sub_20BDDC09C(exception, (uint64_t)&v40);
    __cxa_throw(v35, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v42, v46);
  v14 = v47;
  v40 = v47;
  v41 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = *a2;
  if (v14)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v17 + 24))(&v36);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v36 + 24))(__p);
    v18 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)__p[0] + 48))(__p[0], v14);
    v19 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v20 = (unint64_t *)((char *)__p[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v37;
    if (v37)
    {
      v23 = (unint64_t *)&v37->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = *a2;
  }
  else
  {
    v18 = v49;
  }
  v36 = 0x100000001;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const void ***, uint64_t *, uint64_t))(*(_QWORD *)v17 + 104))(__p, v17, a3, &v42, &v36, v18);
  sub_20BDE82DC((uint64_t)(a1 + 8), (__int128 *)__p);
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v26 = (unint64_t *)((char *)__p[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_20BDE9D48((uint64_t)&v42, v43);
  v31 = v48;
  if (v48)
  {
    v32 = (unint64_t *)&v48->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  sub_20BDE9D48((uint64_t)v46, v46[1]);
}

void sub_20BE2F7D0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  void *v11;
  std::exception v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  v11 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v7 + 32));
  MEMORY[0x212B929D0](v7 + 8, "");
  if (a2 == 2)
    sub_20BE02570(v8 - 176, (uint64_t)v11);
  else
    sub_20BE02504(v8 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE2F6F8);
}

void sub_20BE2F8B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 144);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE2F908(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  void *__p;
  _BYTE *v7;

  if (a2[1] == *a2)
    v3 = 0;
  else
    v3 = *a2;
  v5 = a2[1] - *a2;
  sub_20BDE8894(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x100000001;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20BE2F984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Alembic::AbcGeom::v12::OFaceSetSchema::OFaceSetSchema(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  std::__shared_weak_count *v28;

  v13 = (std::__shared_weak_count *)a2[1];
  v27 = *a2;
  v28 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_20BE2FB70(a1, &v27, a3, a4, a5, a6, a7);
  v16 = v28;
  if (v28)
  {
    v17 = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = &unk_24C519358;
  *(_DWORD *)(a1 + 248) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  v19 = *a2;
  v20 = (std::__shared_weak_count *)a2[1];
  v26[0] = v19;
  v26[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  Alembic::AbcGeom::v12::OFaceSetSchema::init(a1, (uint64_t)v26, a4, a5, a6, a7);
  if (v20)
  {
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return a1;
}

void sub_20BE2FB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void **v12;
  void **v13;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v13);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v12);
  sub_20BE30270(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE2FB70(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v13 = (std::__shared_weak_count *)a2[1];
  v38 = *a2;
  v39 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_20BE310F4(a1, &v38, a3, a4, a5, a6, a7);
  v16 = v39;
  if (v39)
  {
    v17 = (unint64_t *)&v39->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = off_24C519410;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_20BE304B4(a4, a5, a6, a7, &v36);
  v19 = sub_20BE3060C(a4, a5, a6, a7);
  if (v36)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 24))(&v32);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v32 + 24))(&v34);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 48))(v34, v36);
    v21 = v35;
    if (v35)
    {
      v22 = (unint64_t *)&v35->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v33;
    if (v33)
    {
      v25 = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v20 = v19;
  }
  v27 = sub_20BE312C4(a4, a5, a6, a7);
  sub_20BE3120C(a1, v20, v27);
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return a1;
}

void sub_20BE2FE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void **v18;
  Alembic::Abc::v12::OCompoundProperty *v19;
  Alembic::Abc::v12::OCompoundProperty *v20;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v20);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v19);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v18);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a10);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(v17 + 8));
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OFaceSetSchema::init(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  int v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t *v36;
  int v37;
  uint64_t *v38;
  int v39;
  uint64_t *v40;
  int v41;
  void *__p;
  std::__shared_weak_count *v43;
  char v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  void *v47;
  std::string v48;
  uint64_t v49[3];
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  const char *v54;

  v53 = a1 + 8;
  v54 = "OFaceSetSchema::init()";
  sub_20BE304B4(a3, a4, a5, a6, &v51);
  v12 = sub_20BE3060C(a3, a4, a5, a6);
  if (v51)
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)a2 + 24))(&__p);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)__p + 24))(&v47);
    v13 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v47 + 48))(v47, v51);
    v14 = (std::__shared_weak_count *)v48.__r_.__value_.__r.__words[0];
    if (v48.__r_.__value_.__r.__words[0])
    {
      v15 = (unint64_t *)(v48.__r_.__value_.__r.__words[0] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    v13 = v12;
  }
  v20 = *(_QWORD *)(a1 + 40);
  v21 = *(std::__shared_weak_count **)(a1 + 48);
  v49[2] = v20;
  v50 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v45 = v20;
    v46 = v21;
    do
      v24 = __ldxr(v22);
    while (__stxr(v24 + 1, v22));
  }
  else
  {
    v45 = v20;
    v46 = 0;
  }
  sub_20BDDC0E4(&__p, ".faces");
  LODWORD(v40) = 2;
  v41 = v13;
  LODWORD(v38) = 0;
  v39 = 0;
  LODWORD(v36) = 0;
  v37 = 0;
  LODWORD(v34) = 0;
  v35 = 0;
  sub_20BE2A074((uint64_t)&v47, &v45, (uint64_t)&__p, &v40, &v38, &v36, &v34);
  *(_DWORD *)(a1 + 248) = (_DWORD)v47;
  std::string::operator=((std::string *)(a1 + 256), &v48);
  sub_20BDE881C((_QWORD *)(a1 + 280), v49);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v47);
  if (v44 < 0)
    operator delete(__p);
  v25 = v46;
  if (v46)
  {
    v26 = (unint64_t *)&v46->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_DWORD *)(a1 + 344) = 0;
  v28 = v50;
  if (v50)
  {
    v29 = (unint64_t *)&v50->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v52;
  if (v52)
  {
    v32 = (unint64_t *)&v52->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20BE3016C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  void *v30;
  void (*v31)(uint64_t);
  uint64_t v32;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a26);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 96));
  v30 = __cxa_begin_catch(a1);
  v31 = *(void (**)(uint64_t))(*(_QWORD *)v26 + 16);
  if (a2 == 2)
  {
    v32 = (uint64_t)v30;
    v31(v26);
    sub_20BE02570(v27 - 80, v32);
  }
  else
  {
    v31(v26);
    sub_20BE02504(v27 - 80, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE30150);
}

void sub_20BE30244(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE30264()
{
  JUMPOUT(0x20BE301F4);
}

uint64_t sub_20BE30270(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_24C519410;
  v2 = (void **)(a1 + 8);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

uint64_t Alembic::AbcGeom::v12::OFaceSetSchema::OFaceSetSchema(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v25[2];
  uint64_t *v26;
  int v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v28 = *((_QWORD *)a2 + 4);
  v29 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *a2;
  LODWORD(v26) = 1;
  v27 = v14;
  sub_20BE2FB70(a1, &v28, a3, &v26, a4, a5, a6);
  v15 = v29;
  if (v29)
  {
    v16 = (unint64_t *)&v29->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)a1 = &unk_24C519358;
  *(_DWORD *)(a1 + 248) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  v18 = *((_QWORD *)a2 + 4);
  v19 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v25[0] = v18;
  v25[1] = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  LODWORD(v26) = 0;
  v27 = 0;
  Alembic::AbcGeom::v12::OFaceSetSchema::init(a1, (uint64_t)v25, a4, a5, a6, &v26);
  if (v19)
  {
    v22 = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return a1;
}

void sub_20BE30464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void **v14;
  void **v15;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v15);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v14);
  sub_20BE30270(v13);
  _Unwind_Resume(a1);
}

void sub_20BE304B4(uint64_t **a1@<X0>, uint64_t **a2@<X1>, uint64_t **a3@<X2>, uint64_t **a4@<X3>, _QWORD *a5@<X8>)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const void **v16;
  _QWORD *v17[2];
  int v18;
  uint64_t v19[3];
  uint64_t v20;
  std::__shared_weak_count *v21;
  int v22;
  uint64_t v23;

  v17[0] = 0;
  v17[1] = 0;
  v16 = (const void **)v17;
  v18 = 2;
  sub_20BDEBF8C(v19, &v16);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 1;
  sub_20BDE9D48((uint64_t)&v16, v17[0]);
  sub_20BE02E30(a1, (uint64_t)&v18);
  sub_20BE02E30(a2, (uint64_t)&v18);
  sub_20BE02E30(a3, (uint64_t)&v18);
  sub_20BE02E30(a4, (uint64_t)&v18);
  v10 = v21;
  *a5 = v20;
  a5[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = v21;
    if (v21)
    {
      v14 = (unint64_t *)&v21->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  sub_20BDE9D48((uint64_t)v19, (_QWORD *)v19[1]);
}

void sub_20BE305DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, _QWORD *a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  sub_20BDE9D48((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE3060C(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void **v13;
  _QWORD *v14[2];
  int v15;
  uint64_t v16[4];
  std::__shared_weak_count *v17;
  unsigned int v18;
  uint64_t v19;

  v14[0] = 0;
  v14[1] = 0;
  v13 = (const void **)v14;
  v15 = 2;
  sub_20BDEBF8C(v16, &v13);
  v16[3] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  sub_20BDE9D48((uint64_t)&v13, v14[0]);
  sub_20BE02E30(a1, (uint64_t)&v15);
  sub_20BE02E30(a2, (uint64_t)&v15);
  sub_20BE02E30(a3, (uint64_t)&v15);
  sub_20BE02E30(a4, (uint64_t)&v15);
  v8 = v18;
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_20BDE9D48((uint64_t)v16, (_QWORD *)v16[1]);
  return v8;
}

void sub_20BE30718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, _QWORD *a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  sub_20BDE9D48((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OFaceSetSchema::setTimeSampling(Alembic::AbcGeom::v12::OFaceSetSchema *this)
{
  Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OFaceSetSchema *)((char *)this + 248));
  return Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OFaceSetSchema *)((char *)this + 56));
}

void sub_20BE30794(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE30784);
}

void sub_20BE307C8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

int *Alembic::AbcGeom::v12::OFaceSetSchema::setTimeSampling(Alembic::AbcGeom::v12::OFaceSetSchema *a1, _QWORD *a2)
{
  int *result;
  _BYTE v4[56];
  _BYTE v5[48];
  int *v6;
  const char *v7;

  result = (int *)((char *)a1 + 8);
  v6 = result;
  v7 = "OFaceSetSchema::setTimeSampling( AbcA::TimeSamplingPtr iTimeSampling)";
  if (*a2)
  {
    sub_20BE1A75C(result, (uint64_t)v4);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v4, (uint64_t)v5);
    Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v5);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v5);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v4);
    return (int *)Alembic::AbcGeom::v12::OFaceSetSchema::setTimeSampling(a1);
  }
  return result;
}

void sub_20BE30868(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void *v19;

  v19 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v17 - 32, (uint64_t)v19);
  else
    sub_20BE02504(v17 - 32, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE30858);
}

void sub_20BE308D0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OFaceSetSchema::set(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t (*v8)();
  uint64_t (*v9)();
  uint64_t result;
  _QWORD *exception;
  _QWORD *v12;
  _BYTE v13[13];
  void *__p;
  void *v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  char v23;
  _QWORD v24[4];
  _BYTE v25[16];
  _QWORD v26[35];

  v26[33] = a1 + 8;
  v26[34] = "OFaceSetSchema::set()";
  v4 = a1 + 248;
  if (Alembic::Abc::v12::OArrayProperty::getNumSamples((Alembic::Abc::v12::OArrayProperty *)(a1 + 248)))
  {
    LODWORD(v17) = *(_DWORD *)(a1 + 248);
    if (*(char *)(a1 + 279) < 0)
    {
      sub_20BDDBFAC(&v18, *(void **)(a1 + 256), *(_QWORD *)(a1 + 264));
    }
    else
    {
      v18 = *(_OWORD *)(a1 + 256);
      v19 = *(_QWORD *)(a1 + 272);
    }
    v5 = *(_QWORD *)(a1 + 288);
    v20 = *(_QWORD *)(a1 + 280);
    v21 = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    *(_QWORD *)v13 = *(_QWORD *)a2;
    *(_QWORD *)&v13[5] = *(_QWORD *)(a2 + 5);
    __p = 0;
    v15 = 0;
    v16 = 0;
    sub_20BDE1364(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
    if (SHIBYTE(v19) < 0)
    {
      if (*((_QWORD *)&v18 + 1))
        goto LABEL_14;
    }
    else if (HIBYTE(v19))
    {
LABEL_14:
      v8 = 0;
LABEL_19:
      if (v8)
      {
        if (*(_DWORD *)&v13[8] == 127 || !*(_QWORD *)v13 && v15 == __p)
          v9 = 0;
        else
          v9 = nullsub_20;
        if (v9)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v17);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v17);
      }
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v17);
      goto LABEL_31;
    }
    if (v20)
      v8 = nullsub_7;
    else
      v8 = 0;
    goto LABEL_19;
  }
  if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
  {
    sub_20BDDBD68((uint64_t)v25);
    sub_20BDDC1C8(v26, (uint64_t)"Sample 0 must provide the faces that make up the faceset.", 57);
    std::stringbuf::str();
    sub_20BDDBF20(v24, &v22);
    if (v23 < 0)
      operator delete((void *)v22);
    exception = __cxa_allocate_exception(0x20uLL);
    v12 = sub_20BDDC09C(exception, (uint64_t)v24);
    __cxa_throw(v12, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  Alembic::Abc::v12::OArrayProperty::set(v4);
LABEL_31:
  result = Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)(a1 + 56), (const void *)(a2 + 40));
  if (*(_DWORD *)(a1 + 344))
    return Alembic::AbcGeom::v12::OFaceSetSchema::_recordExclusivityHint((Alembic::AbcGeom::v12::OFaceSetSchema *)a1);
  return result;
}

void sub_20BE30B40(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::exception a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  void *v31;

  sub_20BDDC194(&a24);
  sub_20BDDBE98((uint64_t)&a28);
  v31 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v28 - 48, (uint64_t)v31);
  else
    sub_20BE02504(v28 - 48, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE30AB8);
}

void sub_20BE30BDC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OFaceSetSchema::_recordExclusivityHint(Alembic::AbcGeom::v12::OFaceSetSchema *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t *v24[2];
  void *__p[2];
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *v29;
  std::string v30;
  uint64_t v31;

  if (*((char *)this + 327) < 0)
  {
    if (!*((_QWORD *)this + 39))
      goto LABEL_5;
  }
  else if (!*((_BYTE *)this + 327))
  {
LABEL_5:
    if (*((_QWORD *)this + 41))
      goto LABEL_24;
  }
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v27 = *((_QWORD *)this + 5);
  v28 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".facesExclusive");
  v5 = sub_20BE295E0((uint64_t)this + 248);
  v6 = *(std::__shared_weak_count **)(v5 + 72);
  v22 = *(_QWORD *)(v5 + 64);
  v23 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  LODWORD(v24[0]) = 4;
  v24[1] = &v22;
  LODWORD(v20) = 0;
  v21 = 0;
  LODWORD(v18) = 0;
  v19 = 0;
  LODWORD(v16) = 0;
  v17 = 0;
  sub_20BE31B6C((uint64_t)&v29, &v27, (uint64_t)__p, v24, &v20, &v18, &v16);
  *((_DWORD *)this + 74) = (_DWORD)v29;
  std::string::operator=((std::string *)((char *)this + 304), &v30);
  sub_20BDE881C((_QWORD *)this + 41, &v31);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v29);
  v9 = v23;
  if (v23)
  {
    v10 = (unint64_t *)&v23->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v26 < 0)
    operator delete(__p[0]);
  v12 = v28;
  if (v28)
  {
    v13 = (unint64_t *)&v28->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_24:
  LODWORD(v29) = *((_DWORD *)this + 86);
  return Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OFaceSetSchema *)((char *)this + 296), &v29);
}

void sub_20BE30DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v25 - 64));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a16);
  if (a25 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v25 - 80));
  _Unwind_Resume(a1);
}

Alembic::AbcGeom::v12::OFaceSetSchema *Alembic::AbcGeom::v12::OFaceSetSchema::setFaceExclusivity(Alembic::AbcGeom::v12::OFaceSetSchema *result, int a2)
{
  if (*((_DWORD *)result + 86) != a2)
  {
    *((_DWORD *)result + 86) = a2;
    return (Alembic::AbcGeom::v12::OFaceSetSchema *)Alembic::AbcGeom::v12::OFaceSetSchema::_recordExclusivityHint(result);
  }
  return result;
}

uint64_t sub_20BE30E08(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C519358;
  v2 = (void **)(a1 + 56);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 248));
  *(_QWORD *)a1 = off_24C519410;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20BE30E8C(void **a1)
{
  void **v2;

  *a1 = &unk_24C519358;
  v2 = a1 + 7;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a1 + 37);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a1 + 31);
  *a1 = off_24C519410;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a1 + 13);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(a1 + 1);
  operator delete(a1);
}

void sub_20BE30F10(_QWORD *a1)
{
  sub_20BDEBF08(a1 + 35);
  MEMORY[0x212B929D0](a1 + 32, "");
  sub_20BE31044(a1);
}

BOOL sub_20BE30F48(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(_QWORD *)(a1 + 24))
      goto LABEL_5;
    return 0;
  }
  if (*(_BYTE *)(a1 + 39))
    return 0;
LABEL_5:
  if (!*(_QWORD *)(a1 + 40))
    return 0;
  if (*(char *)(a1 + 279) < 0)
  {
    if (*(_QWORD *)(a1 + 264))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 279))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 280) != 0;
}

uint64_t sub_20BE30F94(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_24C519410;
  v2 = (void **)(a1 + 8);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_20BE30FEC(void **a1)
{
  void **v2;

  *a1 = off_24C519410;
  v2 = a1 + 1;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a1 + 13);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a1 + 7);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  operator delete(a1);
}

void sub_20BE31044(_QWORD *a1)
{
  sub_20BDEBF08(a1 + 11);
  MEMORY[0x212B929D0](a1 + 8, "");
  sub_20BDEBF08(a1 + 17);
  MEMORY[0x212B929D0](a1 + 14, "");
  sub_20BDEBF08(a1 + 23);
  MEMORY[0x212B929D0](a1 + 20, "");
  sub_20BDEBF08(a1 + 29);
  MEMORY[0x212B929D0](a1 + 26, "");
  sub_20BDEBF08(a1 + 5);
  JUMPOUT(0x212B929D0);
}

BOOL sub_20BE310C8(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 40) != 0;
}

uint64_t sub_20BE310F4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C519440;
  v14 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  sub_20BE31408(a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE311F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v9);
  _Unwind_Resume(a1);
}

void sub_20BE3120C(uint64_t a1, int a2, char a3)
{
  if ((a3 & 1) == 0)
    sub_20BE318C8(a1, a2, 0);
}

void sub_20BE31254(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;
  void (*v12)(uint64_t);
  uint64_t v13;

  v11 = __cxa_begin_catch(a1);
  v12 = *(void (**)(uint64_t))(*(_QWORD *)v9 + 16);
  if (a2 == 2)
  {
    v13 = (uint64_t)v11;
    v12(v9);
    sub_20BE02570((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_20BE02504((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE31240);
}

void sub_20BE312A4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL sub_20BE312C4(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void **v13;
  _QWORD *v14[2];
  int v15;
  uint64_t v16[4];
  std::__shared_weak_count *v17;
  int v18;
  uint64_t v19;

  v14[0] = 0;
  v14[1] = 0;
  v13 = (const void **)v14;
  v15 = 2;
  sub_20BDEBF8C(v16, &v13);
  v16[3] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  sub_20BDE9D48((uint64_t)&v13, v14[0]);
  sub_20BE02E30(a1, (uint64_t)&v15);
  sub_20BE02E30(a2, (uint64_t)&v15);
  sub_20BE02E30(a3, (uint64_t)&v15);
  sub_20BE02E30(a4, (uint64_t)&v15);
  v8 = HIDWORD(v19);
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_20BDE9D48((uint64_t)v16, (_QWORD *)v16[1]);
  return v8 == 1;
}

void sub_20BE313D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, _QWORD *a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  sub_20BDE9D48((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20BE31408(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t *v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *exception;
  _QWORD *v23;
  std::string __p;
  void *v25[2];
  char v26;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD v29[37];
  int v30;
  const void **v31[4];
  std::__shared_weak_count *v32;
  int v33;
  uint64_t v34;
  void **v35;

  v28 = 0;
  v29[0] = 0;
  v27 = (uint64_t *)&v28;
  v29[35] = 0;
  v29[36] = 0;
  v30 = 2;
  sub_20BDEBF8C((uint64_t *)v31, (const void ***)&v27);
  v31[3] = 0;
  v32 = 0;
  v33 = 0;
  v34 = 1;
  sub_20BDE9D48((uint64_t)&v27, v28);
  sub_20BE02E30(a4, (uint64_t)&v30);
  sub_20BE02E30(a5, (uint64_t)&v30);
  sub_20BE02E30(a6, (uint64_t)&v30);
  sub_20BE02E30(a7, (uint64_t)&v30);
  *(_DWORD *)(a1 + 8) = v30;
  v29[33] = a1 + 8;
  v29[34] = "OSchema::OSchema::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v27);
    sub_20BDDC1C8(v29, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_20BDDBF20(v25, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    v23 = sub_20BDDC09C(exception, (uint64_t)v25);
    __cxa_throw(v23, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v27, v31);
  if (HIDWORD(v34) != 1)
  {
    sub_20BDDC0E4(v25, "schema");
    sub_20BDDC0E4(&__p, "AbcGeom_FaceSet_v1");
    v35 = v25;
    v14 = sub_20BDDDFDC(&v27, (const void **)v25, (uint64_t)&unk_20CA522A9, (__int128 **)&v35);
    std::string::operator=((std::string *)(v14 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v26 < 0)
      operator delete(v25[0]);
    if (HIDWORD(v34) != 1)
    {
      sub_20BDDC0E4(v25, "schemaBaseType");
      sub_20BDDC0E4(&__p, "AbcGeom_GeomBase_v1");
      v35 = v25;
      v15 = sub_20BDDDFDC(&v27, (const void **)v25, (uint64_t)&unk_20CA522A9, (__int128 **)&v35);
      std::string::operator=((std::string *)(v15 + 7), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v26 < 0)
        operator delete(v25[0]);
    }
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t **))(*(_QWORD *)*a2 + 112))(v25, *a2, a3, &v27);
  sub_20BDE82DC(a1 + 40, (__int128 *)v25);
  v16 = (std::__shared_weak_count *)v25[1];
  if (v25[1])
  {
    v17 = (unint64_t *)((char *)v25[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  sub_20BDE9D48((uint64_t)&v27, v28);
  v19 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  sub_20BDE9D48((uint64_t)v31, v31[1]);
}

void sub_20BE3172C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v27;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a22);
  v27 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v23 + 40));
  MEMORY[0x212B929D0](v23 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v24 - 192, (uint64_t)v27);
  else
    sub_20BE02504(v24 - 192, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE31654);
}

void sub_20BE31824(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE31878(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20BE318A0(void **a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(a1 + 1);
  operator delete(a1);
}

void sub_20BE318C8(uint64_t a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  Alembic::Abc::v12::OScalarProperty *v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  int v20;
  void *__p[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _OWORD v25[2];
  int64x2_t v26;
  uint64_t v27;
  const char *v28;

  v27 = a1 + 8;
  v28 = "OGeomBaseSchema::createSelfBoundsProperty()";
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(_QWORD *)(a1 + 72))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 87))
  {
LABEL_5:
    if (*(_QWORD *)(a1 + 88))
      return;
  }
  v6 = *(std::__shared_weak_count **)(a1 + 48);
  v23 = *(_QWORD *)(a1 + 40);
  v24 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".selfBnds");
  LODWORD(v19) = 2;
  v20 = a2;
  LODWORD(v17) = 0;
  v18 = 0;
  LODWORD(v15) = 0;
  v16 = 0;
  LODWORD(v13) = 0;
  v14 = 0;
  sub_20BE1C558((uint64_t)v25, &v23, (uint64_t)__p, &v19, &v17, &v15, &v13);
  *(_DWORD *)(a1 + 56) = v25[0];
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)((char *)v25 + 8));
  sub_20BDE881C((_QWORD *)(a1 + 88), v26.i64);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)v25);
  if (v22 < 0)
    operator delete(__p[0]);
  v9 = v24;
  if (v24)
  {
    v10 = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v25[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v25[1] = xmmword_20CA521E0;
  v26 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (a3)
  {
    v12 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 56);
    do
    {
      Alembic::Abc::v12::OScalarProperty::set(v12, v25);
      --a3;
    }
    while (a3);
  }
}

void sub_20BE31A54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;
  void *v27;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v24 - 96));
  if (a23 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a24);
  v27 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v24 - 48, (uint64_t)v27);
  else
    sub_20BE02504(v24 - 48, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE31A40);
}

void sub_20BE31AD4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE31AF4(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BDE3738(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20BE31B50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE31B6C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20BE31C70((int *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE31C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v9);
  _Unwind_Resume(a1);
}

void sub_20BE31C70(int *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *exception;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  const void **v42;
  _QWORD *v43;
  _QWORD v44[37];
  int v45;
  const void **v46[3];
  uint64_t v47;
  std::__shared_weak_count *v48;
  unsigned int v49;
  uint64_t v50;

  v43 = 0;
  v44[0] = 0;
  v42 = (const void **)&v43;
  v44[35] = 0;
  v44[36] = 0;
  v45 = 2;
  sub_20BDEBF8C((uint64_t *)v46, &v42);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  sub_20BDE9D48((uint64_t)&v42, v43);
  sub_20BE02E30(a4, (uint64_t)&v45);
  sub_20BE02E30(a5, (uint64_t)&v45);
  sub_20BE02E30(a6, (uint64_t)&v45);
  sub_20BE02E30(a7, (uint64_t)&v45);
  *a1 = v45;
  v44[33] = a1;
  v44[34] = "OTypedScalarProperty::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v42);
    sub_20BDDC1C8(v44, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_20BDDBF20(&v40, (__int128 *)__p);
    if (v39 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v35 = sub_20BDDC09C(exception, (uint64_t)&v40);
    __cxa_throw(v35, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v42, v46);
  v14 = v47;
  v40 = v47;
  v41 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = *a2;
  if (v14)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v17 + 24))(&v36);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v36 + 24))(__p);
    v18 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)__p[0] + 48))(__p[0], v14);
    v19 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v20 = (unint64_t *)((char *)__p[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v37;
    if (v37)
    {
      v23 = (unint64_t *)&v37->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = *a2;
  }
  else
  {
    v18 = v49;
  }
  v36 = 0x100000005;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const void ***, uint64_t *, uint64_t))(*(_QWORD *)v17 + 96))(__p, v17, a3, &v42, &v36, v18);
  sub_20BDE82DC((uint64_t)(a1 + 8), (__int128 *)__p);
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v26 = (unint64_t *)((char *)__p[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_20BDE9D48((uint64_t)&v42, v43);
  v31 = v48;
  if (v48)
  {
    v32 = (unint64_t *)&v48->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  sub_20BDE9D48((uint64_t)v46, v46[1]);
}

void sub_20BE31FC0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  void *v11;
  std::exception v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  v11 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v7 + 32));
  MEMORY[0x212B929D0](v7 + 8, "");
  if (a2 == 2)
    sub_20BE02570(v8 - 176, (uint64_t)v11);
  else
    sub_20BE02504(v8 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE31EE8);
}

void sub_20BE320A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 144);
  _Unwind_Resume(a1);
}

unint64_t Alembic::AbcGeom::v12::IFaceSetSchema::getNumSamples(Alembic::AbcGeom::v12::IFaceSetSchema *this)
{
  Alembic::Abc::v12::ICompoundProperty *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t PropertyHeader;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  Alembic::Abc::v12::IArrayProperty *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  Alembic::Abc::v12::IScalarProperty *v18;
  unint64_t NumSamples;
  unint64_t *v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _DWORD v24[4];
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE v33[48];
  _BYTE v34[48];

  v2 = (Alembic::AbcGeom::v12::IFaceSetSchema *)((char *)this + 8);
  if (Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::AbcGeom::v12::IFaceSetSchema *)((char *)this + 8)))
  {
    v3 = 0;
    v4 = 0;
    while (1)
    {
      PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v2);
      v6 = *(_DWORD *)(PropertyHeader + 24);
      if (v6 == 1)
      {
        v15 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
        v22 = *((_QWORD *)this + 5);
        v23 = v15;
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }
        v29 = 0;
        v30 = 0;
        v27 = 0;
        v28 = 0;
        Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v33, &v22, &v29, &v27);
        v25 = 0;
        v26 = 0;
        v18 = (Alembic::Abc::v12::IScalarProperty *)Alembic::Abc::v12::IScalarProperty::IScalarProperty(v34, v33, PropertyHeader, &v25);
        NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(v18);
        if (v4 <= NumSamples)
          v4 = NumSamples;
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v34);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v33);
        v12 = v23;
        if (!v23)
          goto LABEL_24;
        v20 = (unint64_t *)&v23->__shared_owners_;
        do
          v14 = __ldaxr(v20);
        while (__stlxr(v14 - 1, v20));
      }
      else
      {
        if (v6 != 2)
          goto LABEL_24;
        v7 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
        v31 = *((_QWORD *)this + 5);
        v32 = v7;
        if (v7)
        {
          v8 = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
        }
        v29 = 0;
        v30 = 0;
        v27 = 0;
        v28 = 0;
        Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v33, &v31, &v29, &v27);
        v25 = 0;
        v26 = 0;
        v24[0] = 0;
        v24[2] = 0;
        v10 = (Alembic::Abc::v12::IArrayProperty *)Alembic::Abc::v12::IArrayProperty::IArrayProperty(v34, v33, PropertyHeader, &v25, v24);
        v11 = Alembic::Abc::v12::IArrayProperty::getNumSamples(v10);
        if (v4 <= v11)
          v4 = v11;
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v34);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v33);
        v12 = v32;
        if (!v32)
          goto LABEL_24;
        v13 = (unint64_t *)&v32->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
      }
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_24:
      if (++v3 >= (unint64_t)Alembic::Abc::v12::ICompoundProperty::getNumProperties(v2))
        return v4;
    }
  }
  return 0;
}

void sub_20BE322E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(v21 - 96));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a21);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::IFaceSetSchema::get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_20BE1DC78(a1 + 248, a2, a3);
}

void sub_20BE3237C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE3236CLL);
}

void sub_20BE323B0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::IFaceSetSchema::init(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p[2];
  char v18;
  _DWORD v19[4];
  _DWORD v20[4];
  uint64_t v21;
  std::__shared_weak_count *v22;
  int v23[12];
  void *v24;
  std::string v25;
  uint64_t v26[3];
  std::__shared_weak_count *v27;
  uint64_t v28;
  const char *v29;

  v28 = a1 + 8;
  v29 = "IFaceSetSchema::init()";
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(std::__shared_weak_count **)(a1 + 48);
  v26[2] = v6;
  v27 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v21 = v6;
    v22 = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v21 = v6;
    v22 = 0;
  }
  v20[0] = 0;
  v20[2] = 0;
  v19[0] = 0;
  v19[2] = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v23, &v21, v20, v19);
  sub_20BDDC0E4(__p, ".faces");
  sub_20BE1E6DC((uint64_t)&v24, v23, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 248) = (_DWORD)v24;
  std::string::operator=((std::string *)(a1 + 256), &v25);
  sub_20BDE881C((_QWORD *)(a1 + 280), v26);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v24);
  if (v18 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v23);
  v11 = v22;
  if (v22)
  {
    v12 = (unint64_t *)&v22->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v27;
  if (v27)
  {
    v15 = (unint64_t *)&v27->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_20BE3255C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  uint64_t v28;
  uint64_t v29;
  void *v32;
  void (*v33)(uint64_t);
  uint64_t v34;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&a28);
  if (a15 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a22);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a20);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v29 - 80));
  v32 = __cxa_begin_catch(a1);
  v33 = *(void (**)(uint64_t))(*(_QWORD *)v28 + 16);
  if (a2 == 2)
  {
    v34 = (uint64_t)v32;
    v33(v28);
    sub_20BE02570(v29 - 64, v34);
  }
  else
  {
    v33(v28);
    sub_20BE02504(v29 - 64, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE32544);
}

void sub_20BE32608(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::IFaceSetSchema::getFaceExclusivity(Alembic::AbcGeom::v12::IFaceSetSchema *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  int v13;
  void *__p[2];
  char v15;
  _DWORD v16[4];
  _DWORD v17[4];
  uint64_t v18;
  std::__shared_weak_count *v19;
  _QWORD v20[2];
  int v21;
  void *v22[3];
  char v23;
  uint64_t v24;
  char *v25;
  const char *v26;

  v25 = (char *)this + 8;
  v26 = "IFaceSetSchema::getFaceExclusivity";
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v18 = *((_QWORD *)this + 5);
  v19 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v17[0] = 0;
  v17[2] = 0;
  v16[0] = 0;
  v16[2] = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v20, &v18, v17, v16);
  sub_20BDDC0E4(__p, ".facesExclusive");
  LODWORD(v12) = 1;
  v13 = 0;
  LODWORD(v10) = 0;
  v11 = 0;
  sub_20BE32870((uint64_t)v22, (int *)v20, (uint64_t)__p, &v12, &v10);
  if (v15 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v20);
  v4 = v19;
  if (v19)
  {
    v5 = (unint64_t *)&v19->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v23 < 0)
  {
    if (v22[2])
      goto LABEL_13;
LABEL_15:
    if (v24)
      v7 = nullsub_4;
    else
      v7 = 0;
    goto LABEL_18;
  }
  if (!v23)
    goto LABEL_15;
LABEL_13:
  v7 = 0;
LABEL_18:
  if (v7)
  {
    v20[0] = Alembic::Abc::v12::IScalarProperty::getNumSamples((Alembic::Abc::v12::IScalarProperty *)v22) - 1;
    v20[1] = 0;
    v21 = 2;
    LODWORD(__p[0]) = 0;
    Alembic::Abc::v12::IScalarProperty::get((uint64_t)v22, (uint64_t)__p, (uint64_t)v20, 4);
    v8 = LODWORD(__p[0]);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v22);
  }
  else
  {
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v22);
    return 0;
  }
  return v8;
}

void sub_20BE327C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;
  void *v29;

  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(v26 - 96));
  v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v26 - 48, (uint64_t)v29);
  else
    sub_20BE02504(v26 - 48, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE327A8);
}

void sub_20BE32850(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BE32870(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void **v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *exception;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50[2];
  char v51;
  void *__p[2];
  unsigned __int8 v53;
  __int128 v54;
  _QWORD v55[34];
  std::__shared_weak_count *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62[4];
  std::__shared_weak_count *v63;
  int v64;
  uint64_t v65;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *a2;
  *((_QWORD *)&v54 + 1) = 0;
  v55[0] = 0;
  *(_QWORD *)&v54 = (char *)&v54 + 8;
  v59 = 0;
  v60 = 0;
  v61 = v10;
  sub_20BDEBF8C(v62, (const void ***)&v54);
  v62[3] = 0;
  v63 = 0;
  v64 = 0;
  v65 = 1;
  sub_20BDE9D48((uint64_t)&v54, *((_QWORD **)&v54 + 1));
  sub_20BE02E30(a4, (uint64_t)&v61);
  sub_20BE02E30(a5, (uint64_t)&v61);
  *(_DWORD *)a1 = v61;
  v57 = a1;
  v58 = "ITypedScalarProperty::ITypedScalarProperty()";
  v12 = *((_QWORD *)a2 + 4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v55[33] = v12;
  v56 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v40 = sub_20BDDC1C8(v55, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v40, (uint64_t)"ITypedScalarProperty ctor", 25);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v42 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v42, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  v16 = v15;
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v43 = sub_20BDDC1C8(v55, (uint64_t)"Nonexistent scalar property: ", 29);
    v44 = *(char *)(a3 + 23);
    if (v44 >= 0)
      v45 = a3;
    else
      v45 = *(_QWORD *)a3;
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(a3 + 23);
    else
      v46 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v43, v45, v46);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v47 = __cxa_allocate_exception(0x20uLL);
    v48 = sub_20BDDC09C(v47, (uint64_t)__p);
    __cxa_throw(v48, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v18 = *(_DWORD *)(v15 + 56) == 5 && *(_BYTE *)(v15 + 60) == 1 && *(_DWORD *)(v15 + 24) == 1;
  if (!v18 || (sub_20BE32E60(v15 + 32, v65) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v29 = sub_20BDDC1C8(v55, (uint64_t)"Incorrect match of header datatype: ", 36);
    v30 = sub_20BDE00F4(v29, (int *)(v16 + 56));
    v31 = sub_20BDDC1C8(v30, (uint64_t)" to expected: ", 14);
    v49 = 0x100000005;
    v32 = sub_20BDE00F4(v31, (int *)&v49);
    v33 = sub_20BDDC1C8(v32, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_20BDDC0E4(v50, "interpretation");
    sub_20BE01E1C(v16 + 32, (const void **)v50, __p);
    if ((v53 & 0x80u) == 0)
      v34 = __p;
    else
      v34 = (void **)__p[0];
    if ((v53 & 0x80u) == 0)
      v35 = v53;
    else
      v35 = (uint64_t)__p[1];
    v36 = sub_20BDDC1C8(v33, (uint64_t)v34, v35);
    v37 = sub_20BDDC1C8(v36, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v37, (uint64_t)"", 0);
    if ((char)v53 < 0)
      operator delete(__p[0]);
    if (v51 < 0)
      operator delete(v50[0]);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v38 = __cxa_allocate_exception(0x20uLL);
    v39 = sub_20BDDC09C(v38, (uint64_t)__p);
    __cxa_throw(v39, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 88))(&v54, v12, a3);
  sub_20BDE82DC(a1 + 32, &v54);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v56;
  if (v56)
  {
    v23 = (unint64_t *)&v56->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v63;
  if (v63)
  {
    v26 = (unint64_t *)&v63->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  sub_20BDE9D48((uint64_t)v62, (_QWORD *)v62[1]);
  return a1;
}

void sub_20BE32CFC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 192));
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v26);
  MEMORY[0x212B929D0](v25, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 176, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE32A48);
}

void sub_20BE32E20()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 144);
  JUMPOUT(0x20BE32E50);
}

uint64_t sub_20BE32E60(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (a2)
    return 1;
  sub_20BDDC0E4(__p, "interpretation");
  sub_20BE01E1C(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    v2 = v7[1] == 0;
    operator delete(v7[0]);
  }
  else
  {
    v2 = v8 == 0;
  }
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE32EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Alembic::AbcGeom::v12::OLightSchema::OLightSchema(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  std::__shared_weak_count *v28;

  v13 = a2[1];
  v27 = *a2;
  v28 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  sub_20BE33140(a1, &v27, a3, a4, a5, a6, a7);
  v16 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = &unk_24C519460;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 80), "");
  *(_DWORD *)(a1 + 120) = 2;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 128), "");
  *(_DWORD *)(a1 + 168) = 2;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 176), "");
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  sub_20BE34914((int64x2_t *)(a1 + 216));
  v19 = *a2;
  v20 = (std::__shared_weak_count *)a2[1];
  v26[0] = v19;
  v26[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  Alembic::AbcGeom::v12::OLightSchema::init(a1, (uint64_t)v26, a4, a5, a6, a7);
  if (v20)
  {
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return a1;
}

void sub_20BE330CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a10, char a11)
{
  uint64_t v11;
  uint64_t v12;
  void **v13;
  Alembic::Abc::v12::OCompoundProperty *v14;
  Alembic::Abc::v12::OCompoundProperty *v15;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  sub_20BE33518(v12);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v15);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v14);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(a10);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(v11 + 8));
  _Unwind_Resume(a1);
}

void sub_20BE33130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  JUMPOUT(0x20BE33128);
}

uint64_t sub_20BE33140(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C519540;
  v14 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  sub_20BE3555C(a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE3323C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v9);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OLightSchema::init(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  sub_20BE304B4(a3, a4, a5, a6, &v37);
  v12 = sub_20BE3060C(a3, a4, a5, a6);
  if (v37)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 24))(&v34);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v34 + 24))(&v36);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v36 + 48))(v36, v37);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    sub_20BDE881C((_QWORD *)(a1 + 56), &v37);
  }
  else
  {
    v22 = v12;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 24))(&v32);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v32 + 24))(&v34);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v34 + 56))(&v36, v34, v22);
    sub_20BDE82DC(a1 + 56, &v36);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v35;
    if (v35)
    {
      v27 = (unint64_t *)&v35->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v33;
    if (v33)
    {
      v30 = (unint64_t *)&v33->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  v19 = v38;
  if (v38)
  {
    v20 = (unint64_t *)&v38->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20BE334C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE33518(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24C5194C0;
  v2 = (void **)(a1 + 8);
  v4 = (void **)(a1 + 520);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 248));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

uint64_t Alembic::AbcGeom::v12::OLightSchema::OLightSchema(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v25[2];
  uint64_t *v26;
  int v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v28 = *((_QWORD *)a2 + 4);
  v29 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *a2;
  LODWORD(v26) = 1;
  v27 = v14;
  sub_20BE33140(a1, &v28, a3, &v26, a4, a5, a6);
  v15 = v29;
  if (v29)
  {
    v16 = (unint64_t *)&v29->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)a1 = &unk_24C519460;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 80), "");
  *(_DWORD *)(a1 + 120) = 2;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 128), "");
  *(_DWORD *)(a1 + 168) = 2;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 176), "");
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  sub_20BE34914((int64x2_t *)(a1 + 216));
  v18 = *((_QWORD *)a2 + 4);
  v19 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v25[0] = v18;
  v25[1] = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  LODWORD(v26) = 0;
  v27 = 0;
  Alembic::AbcGeom::v12::OLightSchema::init(a1, (uint64_t)v25, a4, a5, a6, &v26);
  if (v19)
  {
    v22 = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return a1;
}

void sub_20BE33778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;
  void **v11;
  Alembic::Abc::v12::OCompoundProperty *v12;
  Alembic::Abc::v12::OCompoundProperty *v13;
  uint64_t v14;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  sub_20BE33518(v14);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v13);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v12);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(v9 + 8));
  _Unwind_Resume(a1);
}

void sub_20BE337DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  JUMPOUT(0x20BE337D4);
}

void Alembic::AbcGeom::v12::OLightSchema::setCameraSample(Alembic::AbcGeom::v12::OLightSchema *this, const Alembic::AbcGeom::v12::CameraSample *a2)
{
  Alembic::AbcGeom::v12::OCameraSchema *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  int64x2_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  int v21;
  uint64_t *v22;
  int v23;
  uint64_t *v24[2];
  void *__p[2];
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  int64x2_t v29[3];
  _OWORD v30[3];
  _OWORD v31[2];
  int64x2_t v32;
  __int128 v33;
  int64x2_t v34;
  _QWORD v35[3];
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[6];
  void **v40;

  v39[4] = (char *)this + 8;
  v39[5] = "OLightSchema::setCameraSample";
  v4 = (Alembic::AbcGeom::v12::OLightSchema *)((char *)this + 216);
  if (!sub_20BE33AD0((uint64_t)this + 216))
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    v27 = *((_QWORD *)this + 5);
    v28 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    sub_20BDDC0E4(__p, ".camera");
    LODWORD(v24[0]) = 4;
    v24[1] = (uint64_t *)((char *)this + 56);
    LODWORD(v22) = 0;
    v23 = 0;
    LODWORD(v20) = 0;
    v21 = 0;
    LODWORD(v18) = 0;
    v19 = 0;
    sub_20BE34C18(v29, &v27, (uint64_t)__p, v24, &v22, &v20, &v18);
    sub_20BE33B1C((uint64_t)v4, (uint64_t)v29);
    v29[0].i64[0] = (uint64_t)&unk_24C5194C0;
    v40 = (void **)v39;
    sub_20BE34B94(&v40);
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v38);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v37);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v36);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)((char *)&v33 + 8));
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)v31 + 1);
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)((char *)v30 + 8));
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)&v29[0].i64[1]);
    if (v26 < 0)
      operator delete(__p[0]);
    v8 = v28;
    if (v28)
    {
      v9 = (unint64_t *)&v28->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = *((_OWORD *)a2 + 5);
  v30[1] = *((_OWORD *)a2 + 4);
  v30[2] = v11;
  v12 = *((_OWORD *)a2 + 7);
  v31[0] = *((_OWORD *)a2 + 6);
  v31[1] = v12;
  v13 = *((int64x2_t *)a2 + 1);
  v29[0] = *(int64x2_t *)a2;
  v29[1] = v13;
  v14 = *((_OWORD *)a2 + 3);
  v29[2] = *((int64x2_t *)a2 + 2);
  v30[0] = v14;
  v15 = *((_OWORD *)a2 + 9);
  v32 = *((int64x2_t *)a2 + 8);
  v33 = v15;
  v34 = *((int64x2_t *)a2 + 10);
  v16 = *((_QWORD *)a2 + 22);
  v17 = *((_QWORD *)a2 + 23);
  memset(v35, 0, sizeof(v35));
  sub_20BE354D4(v35, v16, v17, 0x6DB6DB6DB6DB6DB7 * ((v17 - v16) >> 3));
  v32 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v33 = xmmword_20CA521E0;
  v34 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  Alembic::AbcGeom::v12::OCameraSchema::set(v4, (uint64_t **)v29);
  __p[0] = v35;
  sub_20BE34B94((void ***)__p);
}

void sub_20BE33A14(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;
  void *v29;

  sub_20BE33518((uint64_t)&a26);
  if (a23 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a24);
  v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v26 - 72, (uint64_t)v29);
  else
    sub_20BE02504(v26 - 72, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE339FCLL);
}

void sub_20BE33AB0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL sub_20BE33AD0(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(_QWORD *)(a1 + 24))
      goto LABEL_5;
    return 0;
  }
  if (*(_BYTE *)(a1 + 39))
    return 0;
LABEL_5:
  if (!*(_QWORD *)(a1 + 40))
    return 0;
  if (*(char *)(a1 + 87) < 0)
  {
    if (*(_QWORD *)(a1 + 72))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 87))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 88) != 0;
}

uint64_t sub_20BE33B1C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  sub_20BDE881C((_QWORD *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  sub_20BDE881C((_QWORD *)(a1 + 88), (uint64_t *)(a2 + 88));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  sub_20BDE881C((_QWORD *)(a1 + 136), (uint64_t *)(a2 + 136));
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  sub_20BDE881C((_QWORD *)(a1 + 184), (uint64_t *)(a2 + 184));
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  sub_20BDE881C((_QWORD *)(a1 + 232), (uint64_t *)(a2 + 232));
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  sub_20BDE881C((_QWORD *)(a1 + 280), (uint64_t *)(a2 + 280));
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  sub_20BDE881C((_QWORD *)(a1 + 328), (uint64_t *)(a2 + 328));
  v4 = *(_OWORD *)(a2 + 392);
  v6 = *(_OWORD *)(a2 + 344);
  v5 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v4;
  *(_OWORD *)(a1 + 344) = v6;
  *(_OWORD *)(a1 + 360) = v5;
  v7 = *(_OWORD *)(a2 + 456);
  v9 = *(_OWORD *)(a2 + 408);
  v8 = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 456) = v7;
  *(_OWORD *)(a1 + 408) = v9;
  *(_OWORD *)(a1 + 424) = v8;
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  sub_20BE1B4E8((void **)(a1 + 520));
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a2 + 528) = 0;
  *(_QWORD *)(a2 + 520) = 0;
  *(_QWORD *)(a2 + 536) = 0;
  return a1;
}

uint64_t Alembic::AbcGeom::v12::OLightSchema::setFromPrevious(Alembic::AbcGeom::v12::OLightSchema *this)
{
  Alembic::AbcGeom::v12::OCameraSchema *v1;
  uint64_t result;
  uint64_t (*v3)();

  v1 = (Alembic::AbcGeom::v12::OLightSchema *)((char *)this + 216);
  result = sub_20BE33AD0((uint64_t)this + 216);
  v3 = nullsub_22;
  if (!(_DWORD)result)
    v3 = 0;
  if (v3)
    return Alembic::AbcGeom::v12::OCameraSchema::setFromPrevious(v1);
  return result;
}

void sub_20BE33CEC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE33CDCLL);
}

void sub_20BE33D20(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OLightSchema::setTimeSampling(Alembic::AbcGeom::v12::OLightSchema *this)
{
  int *v2;
  Alembic::AbcGeom::v12::OCameraSchema *v3;
  _BOOL4 v4;
  uint64_t (*v5)();
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE v9[56];
  _BYTE v10[48];
  __int128 v11;
  char *v12;
  const char *v13;

  v2 = (int *)((char *)this + 8);
  v12 = (char *)this + 8;
  v13 = "OLightSchema::setTimeSampling( uint32_t)";
  v3 = (Alembic::AbcGeom::v12::OLightSchema *)((char *)this + 216);
  v4 = sub_20BE33AD0((uint64_t)this + 216);
  v5 = nullsub_22;
  if (!v4)
    v5 = 0;
  if (v5)
    Alembic::AbcGeom::v12::OCameraSchema::setTimeSampling(v3);
  sub_20BE1A75C(v2, (uint64_t)v9);
  Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v9, (uint64_t)v10);
  Alembic::Abc::v12::OArchive::getTimeSampling((Alembic::Abc::v12::OArchive *)v10, &v11);
  sub_20BDE82DC((uint64_t)this + 56, &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v10);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v9);
}

void sub_20BE33E28(void *a1, int a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)va1);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)va);
  v6 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v3 - 48, (uint64_t)v6);
  else
    sub_20BE02504(v3 - 48, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE33E14);
}

void sub_20BE33E90(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OLightSchema::setTimeSampling(Alembic::AbcGeom::v12::OLightSchema *a1, _QWORD *a2)
{
  int *v3;
  _BYTE v4[56];
  _BYTE v5[48];
  int *v6;
  const char *v7;

  v3 = (int *)((char *)a1 + 8);
  v6 = v3;
  v7 = "OLightSchema::setTimeSampling( TimeSamplingPtr)";
  if (*a2)
  {
    sub_20BE1A75C(v3, (uint64_t)v4);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v4, (uint64_t)v5);
    Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v5);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v5);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v4);
    Alembic::AbcGeom::v12::OLightSchema::setTimeSampling(a1);
  }
}

void sub_20BE33F30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void *v19;

  v19 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v17 - 32, (uint64_t)v19);
  else
    sub_20BE02504(v17 - 32, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE33F20);
}

void sub_20BE33F98(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OLightSchema::getNumSamples(Alembic::AbcGeom::v12::OLightSchema *this)
{
  uint64_t (*v1)();

  if (*((char *)this + 103) < 0)
  {
    if (*((_QWORD *)this + 11))
      goto LABEL_3;
LABEL_5:
    if (*((_QWORD *)this + 13))
      v1 = nullsub_6;
    else
      v1 = 0;
    goto LABEL_8;
  }
  if (!*((_BYTE *)this + 103))
    goto LABEL_5;
LABEL_3:
  v1 = 0;
LABEL_8:
  if (v1)
    return Alembic::Abc::v12::OScalarProperty::getNumSamples((Alembic::AbcGeom::v12::OLightSchema *)((char *)this + 72));
  else
    return 0;
}

void sub_20BE3406C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_BYTE *Alembic::AbcGeom::v12::OLightSchema::getArbGeomParams@<X0>(Alembic::AbcGeom::v12::OLightSchema *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD v15[4];
  _DWORD v16[4];
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  std::string v22;
  uint64_t v23[4];

  v23[2] = (uint64_t)this + 8;
  v23[3] = (uint64_t)"OLightSchema::getArbGeomParams()";
  v4 = *((char *)this + 199);
  if (v4 < 0)
  {
    if (!*((_QWORD *)this + 23))
      goto LABEL_5;
  }
  else if (!*((_BYTE *)this + 199))
  {
LABEL_5:
    if (*((_QWORD *)this + 25))
      goto LABEL_17;
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v19 = *((_QWORD *)this + 5);
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".arbGeomParams");
  v16[0] = 0;
  v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v21, &v19, __p, v16, v15);
  *((_DWORD *)this + 42) = v21;
  std::string::operator=((std::string *)((char *)this + 176), &v22);
  sub_20BDE881C((_QWORD *)this + 25, v23);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  if (v18 < 0)
    operator delete(__p[0]);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LOBYTE(v4) = *((_BYTE *)this + 199);
LABEL_17:
  *(_DWORD *)a2 = *((_DWORD *)this + 42);
  result = (_BYTE *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    result = sub_20BDDBFAC(result, *((void **)this + 22), *((_QWORD *)this + 23));
  }
  else
  {
    *(_OWORD *)result = *((_OWORD *)this + 11);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 24);
  }
  v12 = *((_QWORD *)this + 26);
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 25);
  *(_QWORD *)(a2 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_20BE34210(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v23 - 48, (uint64_t)v25);
  else
    sub_20BE02504(v23 - 48, 0);
  __cxa_end_catch();
  *(_DWORD *)v22 = 2;
  sub_20BDDC0E4((_QWORD *)(v22 + 8), "");
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  JUMPOUT(0x20BE341FCLL);
}

void sub_20BE342AC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_BYTE *Alembic::AbcGeom::v12::OLightSchema::getUserProperties@<X0>(Alembic::AbcGeom::v12::OLightSchema *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD v15[4];
  _DWORD v16[4];
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  std::string v22;
  uint64_t v23[4];

  v23[2] = (uint64_t)this + 8;
  v23[3] = (uint64_t)"OLightSchema::getUserProperties()";
  v4 = *((char *)this + 151);
  if (v4 < 0)
  {
    if (!*((_QWORD *)this + 17))
      goto LABEL_5;
  }
  else if (!*((_BYTE *)this + 151))
  {
LABEL_5:
    if (*((_QWORD *)this + 19))
      goto LABEL_17;
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v19 = *((_QWORD *)this + 5);
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".userProperties");
  v16[0] = 0;
  v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v21, &v19, __p, v16, v15);
  *((_DWORD *)this + 30) = v21;
  std::string::operator=((std::string *)((char *)this + 128), &v22);
  sub_20BDE881C((_QWORD *)this + 19, v23);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  if (v18 < 0)
    operator delete(__p[0]);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LOBYTE(v4) = *((_BYTE *)this + 151);
LABEL_17:
  *(_DWORD *)a2 = *((_DWORD *)this + 30);
  result = (_BYTE *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    result = sub_20BDDBFAC(result, *((void **)this + 16), *((_QWORD *)this + 17));
  }
  else
  {
    *(_OWORD *)result = *((_OWORD *)this + 8);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 18);
  }
  v12 = *((_QWORD *)this + 20);
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 19);
  *(_QWORD *)(a2 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_20BE34450(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v23 - 48, (uint64_t)v25);
  else
    sub_20BE02504(v23 - 48, 0);
  __cxa_end_catch();
  *(_DWORD *)v22 = 2;
  sub_20BDDC0E4((_QWORD *)(v22 + 8), "");
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  JUMPOUT(0x20BE3443CLL);
}

void sub_20BE344EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_BYTE *Alembic::AbcGeom::v12::OLightSchema::getChildBoundsProperty@<X0>(Alembic::AbcGeom::v12::OLightSchema *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE *result;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  int v24;
  uint64_t *v25[2];
  void *__p[2];
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *v30;
  std::string v31;
  uint64_t v32[3];
  std::__shared_weak_count *v33;
  char *v34;
  const char *v35;

  v34 = (char *)this + 8;
  v35 = "OLightSchema::getChildBoundsProperty()";
  if (*((char *)this + 103) < 0)
  {
    if (!*((_QWORD *)this + 11))
      goto LABEL_5;
  }
  else if (!*((_BYTE *)this + 103))
  {
LABEL_5:
    if (*((_QWORD *)this + 13))
      goto LABEL_25;
  }
  v4 = *((_QWORD *)this + 5);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v32[2] = v4;
  v33 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v28 = v4;
    v29 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v28 = v4;
    v29 = 0;
  }
  sub_20BDDC0E4(__p, ".childBnds");
  LODWORD(v25[0]) = 4;
  v25[1] = (uint64_t *)((char *)this + 56);
  LODWORD(v23) = 0;
  v24 = 0;
  LODWORD(v21) = 0;
  v22 = 0;
  LODWORD(v19) = 0;
  v20 = 0;
  sub_20BE1C558((uint64_t)&v30, &v28, (uint64_t)__p, v25, &v23, &v21, &v19);
  *((_DWORD *)this + 18) = (_DWORD)v30;
  std::string::operator=((std::string *)((char *)this + 80), &v31);
  sub_20BDE881C((_QWORD *)this + 13, v32);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v30);
  if (v27 < 0)
    operator delete(__p[0]);
  v9 = v29;
  if (v29)
  {
    v10 = (unint64_t *)&v29->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v33;
  if (v33)
  {
    v13 = (unint64_t *)&v33->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_25:
  *(_DWORD *)a2 = *((_DWORD *)this + 18);
  result = (_BYTE *)(a2 + 8);
  if (*((char *)this + 103) < 0)
  {
    result = sub_20BDDBFAC(result, *((void **)this + 10), *((_QWORD *)this + 11));
  }
  else
  {
    *(_OWORD *)result = *((_OWORD *)this + 5);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 12);
  }
  v16 = *((_QWORD *)this + 14);
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 13);
  *(_QWORD *)(a2 + 40) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  return result;
}

void sub_20BE34704(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26)
{
  uint64_t v26;
  void *v29;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&a26);
  if (a23 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v26 - 64));
  v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v26 - 48, (uint64_t)v29);
  else
    sub_20BE02504(v26 - 48, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE3469CLL);
}

void sub_20BE34780(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BE347A0(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C519460;
  *(_QWORD *)(a1 + 216) = &unk_24C5194C0;
  v3 = (void **)(a1 + 736);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 512));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 464));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 416));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 368));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 320));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 272));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 224));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 168));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 120));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 72));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20BE34858(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C519460;
  *((_QWORD *)a1 + 27) = &unk_24C5194C0;
  v2 = (void **)(a1 + 736);
  sub_20BE34B94(&v2);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 512));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)a1 + 58);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 416));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 368));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)a1 + 40);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 272));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)a1 + 28);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 168));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 120));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)a1 + 9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)a1 + 1);
  operator delete(a1);
}

int64x2_t *sub_20BE34914(int64x2_t *a1)
{
  a1->i32[2] = 2;
  sub_20BDDC0E4((int64x2_t *)a1[1].i64, "");
  a1[2].i64[1] = 0;
  a1[3].i64[0] = 0;
  a1->i64[0] = (uint64_t)&unk_24C5194C0;
  a1[3].i32[2] = 2;
  sub_20BDDC0E4((int64x2_t *)a1[4].i64, "");
  a1[6].i32[2] = 2;
  a1[5].i64[1] = 0;
  a1[6].i64[0] = 0;
  sub_20BDDC0E4((int64x2_t *)a1[7].i64, "");
  a1[9].i32[2] = 2;
  a1[8].i64[1] = 0;
  a1[9].i64[0] = 0;
  sub_20BDDC0E4((int64x2_t *)a1[10].i64, "");
  a1[12].i32[2] = 2;
  a1[11].i64[1] = 0;
  a1[12].i64[0] = 0;
  sub_20BDDC0E4((int64x2_t *)a1[13].i64, "");
  a1[15].i32[2] = 2;
  a1[14].i64[1] = 0;
  a1[15].i64[0] = 0;
  sub_20BDDC0E4((int64x2_t *)a1[16].i64, "");
  a1[17].i64[1] = 0;
  a1[18].i64[0] = 0;
  a1[18].i32[2] = 2;
  sub_20BDDC0E4((int64x2_t *)a1[19].i64, "");
  a1[20].i64[1] = 0;
  a1[21].i64[0] = 0;
  a1[29].i64[1] = 0x7FEFFFFFFFFFFFFFLL;
  a1[30] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  a1[31] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  a1[32].i64[0] = 0xFFEFFFFFFFFFFFFFLL;
  a1[32].i64[1] = 0;
  a1[33].i64[1] = 0;
  a1[33].i64[0] = 0;
  sub_20BE15D04((uint64_t)&a1[21].i64[1]);
  return a1;
}

void sub_20BE34A58(_Unwind_Exception *a1)
{
  void **v1;
  Alembic::Abc::v12::OScalarProperty *v2;
  void **v3;
  Alembic::Abc::v12::OCompoundProperty *v4;
  Alembic::Abc::v12::OCompoundProperty *v5;
  void **v6;

  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v6);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v5);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_20BE34AB4()
{
  JUMPOUT(0x20BE34AA4);
}

void sub_20BE34ABC(void **a1)
{
  void **v2;
  void **v3;

  *a1 = &unk_24C5194C0;
  v2 = a1 + 1;
  v3 = a1 + 65;
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a1 + 31);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a1 + 13);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  operator delete(a1);
}

uint64_t sub_20BE34B44(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20BE34B6C(void **a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(a1 + 1);
  operator delete(a1);
}

void sub_20BE34B94(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_20BE168C0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

int64x2_t *sub_20BE34C18(int64x2_t *a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  v13 = (std::__shared_weak_count *)a2[1];
  v37 = *a2;
  v38 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_20BE34FD4((uint64_t)a1, &v37, a3, a4, a5, a6, a7);
  v16 = v38;
  if (v38)
  {
    v17 = (unint64_t *)&v38->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  a1->i64[0] = (uint64_t)&unk_24C5194C0;
  a1[3].i32[2] = 2;
  sub_20BDDC0E4((int64x2_t *)a1[4].i64, "");
  a1[6].i32[2] = 2;
  a1[5].i64[1] = 0;
  a1[6].i64[0] = 0;
  sub_20BDDC0E4((int64x2_t *)a1[7].i64, "");
  a1[9].i32[2] = 2;
  a1[8].i64[1] = 0;
  a1[9].i64[0] = 0;
  sub_20BDDC0E4((int64x2_t *)a1[10].i64, "");
  a1[12].i32[2] = 2;
  a1[11].i64[1] = 0;
  a1[12].i64[0] = 0;
  sub_20BDDC0E4((int64x2_t *)a1[13].i64, "");
  a1[15].i32[2] = 2;
  a1[14].i64[1] = 0;
  a1[15].i64[0] = 0;
  sub_20BDDC0E4((int64x2_t *)a1[16].i64, "");
  a1[17].i64[1] = 0;
  a1[18].i64[0] = 0;
  a1[18].i32[2] = 2;
  sub_20BDDC0E4((int64x2_t *)a1[19].i64, "");
  a1[20].i64[1] = 0;
  a1[21].i64[0] = 0;
  a1[29].i64[1] = 0x7FEFFFFFFFFFFFFFLL;
  a1[30] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  a1[31] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  a1[32].i64[0] = 0xFFEFFFFFFFFFFFFFLL;
  a1[32].i64[1] = 0;
  a1[33].i64[1] = 0;
  a1[33].i64[0] = 0;
  sub_20BE15D04((uint64_t)&a1[21].i64[1]);
  sub_20BE304B4(a4, a5, a6, a7, &v35);
  v19 = sub_20BE3060C(a4, a5, a6, a7);
  if (v35)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 24))(&v31);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v31 + 24))(&v33);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 48))(v33, v35);
    v21 = v34;
    if (v34)
    {
      v22 = (unint64_t *)&v34->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v32;
    if (v32)
    {
      v25 = (unint64_t *)&v32->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v20 = v19;
  }
  Alembic::AbcGeom::v12::OCameraSchema::init((Alembic::AbcGeom::v12::OCameraSchema *)a1, v20);
  v27 = v36;
  if (v36)
  {
    v28 = (unint64_t *)&v36->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return a1;
}

void sub_20BE34F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, Alembic::Abc::v12::OScalarProperty *a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  Alembic::Abc::v12::OCompoundProperty *v18;
  Alembic::Abc::v12::OCompoundProperty *v19;
  void **v20;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  a15 = v17 + 520;
  sub_20BE34B94((void ***)&a15);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v17 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v20);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v19);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v18);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a9);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a10);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(v17 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20BE34FD4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C519520;
  v14 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  sub_20BE350EC(a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE350D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v9);
  _Unwind_Resume(a1);
}

void sub_20BE350EC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *exception;
  _QWORD *v22;
  std::string __p;
  void *v24[2];
  char v25;
  uint64_t *v26;
  _QWORD *v27;
  _QWORD v28[37];
  int v29;
  const void **v30[4];
  std::__shared_weak_count *v31;
  int v32;
  uint64_t v33;
  void **v34;

  v27 = 0;
  v28[0] = 0;
  v26 = (uint64_t *)&v27;
  v28[35] = 0;
  v28[36] = 0;
  v29 = 2;
  sub_20BDEBF8C((uint64_t *)v30, (const void ***)&v26);
  v30[3] = 0;
  v31 = 0;
  v32 = 0;
  v33 = 1;
  sub_20BDE9D48((uint64_t)&v26, v27);
  sub_20BE02E30(a4, (uint64_t)&v29);
  sub_20BE02E30(a5, (uint64_t)&v29);
  sub_20BE02E30(a6, (uint64_t)&v29);
  sub_20BE02E30(a7, (uint64_t)&v29);
  *(_DWORD *)(a1 + 8) = v29;
  v28[33] = a1 + 8;
  v28[34] = "OSchema::OSchema::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v26);
    sub_20BDDC1C8(v28, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_20BDDBF20(v24, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    v22 = sub_20BDDC09C(exception, (uint64_t)v24);
    __cxa_throw(v22, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v26, v30);
  if (HIDWORD(v33) != 1)
  {
    sub_20BDDC0E4(v24, "schema");
    sub_20BDDC0E4(&__p, "AbcGeom_Camera_v1");
    v34 = v24;
    v14 = sub_20BDDDFDC(&v26, (const void **)v24, (uint64_t)&unk_20CA52372, (__int128 **)&v34);
    std::string::operator=((std::string *)(v14 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v25 < 0)
      operator delete(v24[0]);
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t **))(*(_QWORD *)*a2 + 112))(v24, *a2, a3, &v26);
  sub_20BDE82DC(a1 + 40, (__int128 *)v24);
  v15 = (std::__shared_weak_count *)v24[1];
  if (v24[1])
  {
    v16 = (unint64_t *)((char *)v24[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sub_20BDE9D48((uint64_t)&v26, v27);
  v18 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  sub_20BDE9D48((uint64_t)v30, v30[1]);
}

void sub_20BE35394(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v27;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a22);
  v27 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v23 + 40));
  MEMORY[0x212B929D0](v23 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v24 - 192, (uint64_t)v27);
  else
    sub_20BE02504(v24 - 192, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE352BCLL);
}

void sub_20BE35480(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 160);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE354D4(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BE1B554(result, a4);
    result = (_QWORD *)sub_20BE1B5A8((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20BE35538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BE34B94(&a9);
  _Unwind_Resume(a1);
}

void sub_20BE3555C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *exception;
  _QWORD *v22;
  std::string __p;
  void *v24[2];
  char v25;
  uint64_t *v26;
  _QWORD *v27;
  _QWORD v28[37];
  int v29;
  const void **v30[4];
  std::__shared_weak_count *v31;
  int v32;
  uint64_t v33;
  void **v34;

  v27 = 0;
  v28[0] = 0;
  v26 = (uint64_t *)&v27;
  v28[35] = 0;
  v28[36] = 0;
  v29 = 2;
  sub_20BDEBF8C((uint64_t *)v30, (const void ***)&v26);
  v30[3] = 0;
  v31 = 0;
  v32 = 0;
  v33 = 1;
  sub_20BDE9D48((uint64_t)&v26, v27);
  sub_20BE02E30(a4, (uint64_t)&v29);
  sub_20BE02E30(a5, (uint64_t)&v29);
  sub_20BE02E30(a6, (uint64_t)&v29);
  sub_20BE02E30(a7, (uint64_t)&v29);
  *(_DWORD *)(a1 + 8) = v29;
  v28[33] = a1 + 8;
  v28[34] = "OSchema::OSchema::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v26);
    sub_20BDDC1C8(v28, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_20BDDBF20(v24, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    v22 = sub_20BDDC09C(exception, (uint64_t)v24);
    __cxa_throw(v22, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v26, v30);
  if (HIDWORD(v33) != 1)
  {
    sub_20BDDC0E4(v24, "schema");
    sub_20BDDC0E4(&__p, "AbcGeom_Light_v1");
    v34 = v24;
    v14 = sub_20BDDDFDC(&v26, (const void **)v24, (uint64_t)&unk_20CA52372, (__int128 **)&v34);
    std::string::operator=((std::string *)(v14 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v25 < 0)
      operator delete(v24[0]);
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t **))(*(_QWORD *)*a2 + 112))(v24, *a2, a3, &v26);
  sub_20BDE82DC(a1 + 40, (__int128 *)v24);
  v15 = (std::__shared_weak_count *)v24[1];
  if (v24[1])
  {
    v16 = (unint64_t *)((char *)v24[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sub_20BDE9D48((uint64_t)&v26, v27);
  v18 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  sub_20BDE9D48((uint64_t)v30, v30[1]);
}

void sub_20BE35804(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v27;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a22);
  v27 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v23 + 40));
  MEMORY[0x212B929D0](v23 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v24 - 192, (uint64_t)v27);
  else
    sub_20BE02504(v24 - 192, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE3572CLL);
}

void sub_20BE358F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE35944(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20BE3596C(void **a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(a1 + 1);
  operator delete(a1);
}

void Alembic::AbcGeom::v12::ILightSchema::init(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t PropertyHeader;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  void **v46;
  int v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  void *v52[2];
  char v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  int v60[12];
  void *__p;
  std::string v62;
  uint64_t v63[3];
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76[4];
  std::__shared_weak_count *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;

  v6 = a1 + 8;
  v80 = a1 + 8;
  v81 = "ILightSchema::init()";
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = 0uLL;
  __p = &v62;
  v75 = 2;
  v73 = 0;
  v74 = 0;
  sub_20BDEBF8C(v76, (const void ***)&__p);
  v76[3] = 0;
  v77 = 0;
  v78 = 0;
  v79 = 1;
  sub_20BDE9D48((uint64_t)&__p, v62.__r_.__value_.__l.__data_);
  sub_20BE02E30(a2, (uint64_t)&v75);
  sub_20BE02E30(a3, (uint64_t)&v75);
  v8 = *(_QWORD *)(a1 + 40);
  v7 = *(std::__shared_weak_count **)(a1 + 48);
  v71 = v8;
  v72 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(&__p, ".camera");
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v12 = PropertyHeader;
  if (v62.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v12)
      goto LABEL_18;
  }
  else if (!PropertyHeader)
  {
    goto LABEL_18;
  }
  v58 = v8;
  v59 = v7;
  if (v7)
  {
    v13 = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v56 = 0;
  v57 = 0;
  v54 = 0;
  v55 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v60, &v58, &v56, &v54);
  sub_20BDDC0E4(v52, ".camera");
  sub_20BE366BC((uint64_t)&__p, (uint64_t)v60, (uint64_t)v52, a2, a3);
  sub_20BE36210(a1 + 200, (uint64_t)&__p);
  __p = &unk_24C519560;
  v46 = (void **)&v70;
  sub_20BE34B94(&v46);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v69);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v68);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v67);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v66);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v65);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v64);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)&v62.__r_.__value_.__l.__data_);
  if (v53 < 0)
    operator delete(v52[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v60);
  v15 = v59;
  if (v59)
  {
    v16 = (unint64_t *)&v59->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_18:
  sub_20BDDC0E4(&__p, ".childBnds");
  v18 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v19 = v18;
  if (v62.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v19)
      goto LABEL_32;
  }
  else if (!v18)
  {
    goto LABEL_32;
  }
  v50 = v71;
  v51 = v72;
  if (v72)
  {
    v20 = (unint64_t *)&v72->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v56 = 0;
  v57 = 0;
  v54 = 0;
  v55 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v60, &v50, &v56, &v54);
  sub_20BDDC0E4(v52, ".childBnds");
  sub_20BE13A80((uint64_t)&__p, v60, (uint64_t)v52, a2, a3);
  *(_DWORD *)(a1 + 56) = (_DWORD)__p;
  std::string::operator=((std::string *)(a1 + 64), &v62);
  sub_20BDE881C((_QWORD *)(a1 + 88), v63);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&__p);
  if (v53 < 0)
    operator delete(v52[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v60);
  v22 = v51;
  if (v51)
  {
    v23 = (unint64_t *)&v51->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_32:
  sub_20BDDC0E4(&__p, ".arbGeomParams");
  v25 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v26 = v25;
  if (v62.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v26)
      goto LABEL_46;
  }
  else if (!v25)
  {
    goto LABEL_46;
  }
  v48 = v71;
  v49 = v72;
  if (v72)
  {
    v27 = (unint64_t *)&v72->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v56 = 0;
  v57 = 0;
  v54 = 0;
  v55 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v60, &v48, &v56, &v54);
  sub_20BDDC0E4(v52, ".arbGeomParams");
  LODWORD(v46) = 1;
  v47 = v75;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&__p, v60, v52, &v46);
  *(_DWORD *)(a1 + 104) = (_DWORD)__p;
  std::string::operator=((std::string *)(a1 + 112), &v62);
  sub_20BDE881C((_QWORD *)(a1 + 136), v63);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
  if (v53 < 0)
    operator delete(v52[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v60);
  v29 = v49;
  if (v49)
  {
    v30 = (unint64_t *)&v49->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
LABEL_46:
  sub_20BDDC0E4(&__p, ".userProperties");
  v32 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  if (v62.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  v33 = v72;
  if (v32)
  {
    v44 = v71;
    v45 = v72;
    if (v72)
    {
      v34 = (unint64_t *)&v72->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v56 = 0;
    v57 = 0;
    v54 = 0;
    v55 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v60, &v44, &v56, &v54);
    sub_20BDDC0E4(v52, ".userProperties");
    LODWORD(v46) = 1;
    v47 = v75;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&__p, v60, v52, &v46);
    *(_DWORD *)(a1 + 152) = (_DWORD)__p;
    std::string::operator=((std::string *)(a1 + 160), &v62);
    sub_20BDE881C((_QWORD *)(a1 + 184), v63);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
    if (v53 < 0)
      operator delete(v52[0]);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v60);
    v36 = v45;
    if (v45)
    {
      v37 = (unint64_t *)&v45->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v33 = v72;
  }
  if (v33)
  {
    v39 = (unint64_t *)&v33->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v41 = v77;
  if (v77)
  {
    v42 = (unint64_t *)&v77->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  sub_20BDE9D48((uint64_t)v76, (_QWORD *)v76[1]);
}

void sub_20BE35FDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  _QWORD *v41;
  uint64_t v42;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a36);
  if (a23 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a30);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v42 - 192));
  sub_20BE02EB0(v42 - 160);
  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE363B8(v41);
  sub_20BE363B8(v41);
}

void sub_20BE361B0()
{
  uint64_t v0;

  sub_20BE02504(v0 - 96, 0);
  JUMPOUT(0x20BE361BCLL);
}

void sub_20BE361C4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE361E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,_QWORD *a34)
{
  uint64_t v34;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v34 - 176));
  sub_20BDE9D48((uint64_t)&a33, a34);
  JUMPOUT(0x20BE3617CLL);
}

void sub_20BE36204()
{
  JUMPOUT(0x20BE36174);
}

uint64_t sub_20BE36210(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  sub_20BDE881C((_QWORD *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  sub_20BDE881C((_QWORD *)(a1 + 88), (uint64_t *)(a2 + 88));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  sub_20BDE881C((_QWORD *)(a1 + 136), (uint64_t *)(a2 + 136));
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  sub_20BDE881C((_QWORD *)(a1 + 184), (uint64_t *)(a2 + 184));
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  sub_20BDE881C((_QWORD *)(a1 + 232), (uint64_t *)(a2 + 232));
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  sub_20BDE881C((_QWORD *)(a1 + 280), (uint64_t *)(a2 + 280));
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  sub_20BDE881C((_QWORD *)(a1 + 328), (uint64_t *)(a2 + 328));
  sub_20BE1B4E8((void **)(a1 + 344));
  v4 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = v4;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a2 + 344) = 0;
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a2 + 360) = 0;
  return a1;
}

uint64_t sub_20BE36334(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24C519560;
  v2 = (void **)(a1 + 8);
  v4 = (void **)(a1 + 344);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 296));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 248));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 56));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  return a1;
}

void sub_20BE363B8(_QWORD *a1)
{
  sub_20BDEBF08(a1 + 11);
  MEMORY[0x212B929D0](a1 + 8, "");
  sub_20BDEBF08(a1 + 17);
  MEMORY[0x212B929D0](a1 + 14, "");
  sub_20BDEBF08(a1 + 23);
  MEMORY[0x212B929D0](a1 + 20, "");
  sub_20BE17F08(a1 + 25);
}

void sub_20BE36414()
{
  uint64_t v0;

  sub_20BDEBF08((_QWORD *)(v0 + 40));
  JUMPOUT(0x212B929D0);
}

uint64_t Alembic::AbcGeom::v12::ILightSchema::getTimeSampling@<X0>(Alembic::AbcGeom::v12::ILightSchema *this@<X0>, _QWORD *a2@<X8>)
{
  Alembic::Abc::v12::IScalarProperty *v4;
  uint64_t (*v5)();
  uint64_t result;
  uint64_t (*v7)();

  v4 = (Alembic::AbcGeom::v12::ILightSchema *)((char *)this + 56);
  if (*((char *)this + 87) < 0)
  {
    if (*((_QWORD *)this + 9))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 87))
  {
LABEL_3:
    v5 = 0;
    goto LABEL_8;
  }
  if (*((_QWORD *)this + 11))
    v5 = nullsub_4;
  else
    v5 = 0;
LABEL_8:
  if (v5)
    return Alembic::Abc::v12::IScalarProperty::getTimeSampling(v4, a2);
  result = sub_20BE33AD0((uint64_t)this + 200);
  v7 = nullsub_23;
  if (!(_DWORD)result)
    v7 = 0;
  if (v7)
  {
    v4 = (Alembic::AbcGeom::v12::ILightSchema *)((char *)this + 256);
    return Alembic::Abc::v12::IScalarProperty::getTimeSampling(v4, a2);
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_20BE36510(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL Alembic::AbcGeom::v12::ILightSchema::isConstant(Alembic::AbcGeom::v12::ILightSchema *this)
{
  return (unint64_t)Alembic::AbcGeom::v12::ILightSchema::getNumSamples(this) < 2;
}

void sub_20BE3656C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE3655CLL);
}

void sub_20BE365A4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::ILightSchema::getNumSamples(Alembic::AbcGeom::v12::ILightSchema *this)
{
  Alembic::Abc::v12::IScalarProperty *v2;
  uint64_t (*v3)();
  _BOOL4 v4;
  uint64_t (*v5)();

  v2 = (Alembic::AbcGeom::v12::ILightSchema *)((char *)this + 56);
  if (*((char *)this + 87) < 0)
  {
    if (*((_QWORD *)this + 9))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 87))
  {
LABEL_3:
    v3 = 0;
    goto LABEL_8;
  }
  if (*((_QWORD *)this + 11))
    v3 = nullsub_4;
  else
    v3 = 0;
LABEL_8:
  if (v3)
    return Alembic::Abc::v12::IScalarProperty::getNumSamples(v2);
  v4 = sub_20BE33AD0((uint64_t)this + 200);
  v5 = nullsub_23;
  if (!v4)
    v5 = 0;
  if (v5)
  {
    v2 = (Alembic::AbcGeom::v12::ILightSchema *)((char *)this + 256);
    return Alembic::Abc::v12::IScalarProperty::getNumSamples(v2);
  }
  return 0;
}

void sub_20BE3669C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BE366BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v8;

  v8 = sub_20BE36870(a1, a2, a3, a4, a5);
  *(_QWORD *)v8 = &unk_24C519560;
  *(_DWORD *)(v8 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(v8 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_DWORD *)(a1 + 248) = 2;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  Alembic::AbcGeom::v12::ICameraSchema::init(a1, a4, a5);
  return a1;
}

void sub_20BE367EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  Alembic::Abc::v12::IScalarProperty *v11;
  void **v12;
  Alembic::Abc::v12::ICompoundProperty *v13;
  Alembic::Abc::v12::ICompoundProperty *v14;
  Alembic::Abc::v12::IScalarProperty *v15;
  void **v16;

  a10 = (void **)(v10 + 344);
  sub_20BE34B94(&a10);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v16);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v15);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v14);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v13);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v12);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v11);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(v10 + 8));
  _Unwind_Resume(a1);
}

void sub_20BE36860()
{
  JUMPOUT(0x20BE36848);
}

void sub_20BE36868()
{
  JUMPOUT(0x20BE36850);
}

uint64_t sub_20BE36870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C5195F0;
  sub_20BE36990(a1, a2, a3, a4, a5);
  return a1;
}

void sub_20BE368F4(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_20BE36908(void **a1)
{
  void **v2;
  void **v3;

  *a1 = &unk_24C519560;
  v2 = a1 + 1;
  v3 = a1 + 43;
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 37);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 31));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 13);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  operator delete(a1);
}

void sub_20BE36990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *exception;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  void *__p[2];
  char v41;
  void *v42[2];
  unsigned __int8 v43;
  __int128 v44;
  _QWORD v45[37];
  int v46;
  uint64_t v47[4];
  std::__shared_weak_count *v48;
  int v49;
  uint64_t v50;

  *((_QWORD *)&v44 + 1) = 0;
  v45[0] = 0;
  *(_QWORD *)&v44 = (char *)&v44 + 8;
  v45[35] = 0;
  v45[36] = 0;
  v46 = 2;
  sub_20BDEBF8C(v47, (const void ***)&v44);
  v47[3] = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  sub_20BDE9D48((uint64_t)&v44, *((_QWORD **)&v44 + 1));
  sub_20BE02E30(a4, (uint64_t)&v46);
  sub_20BE02E30(a5, (uint64_t)&v46);
  *(_DWORD *)(a1 + 8) = v46;
  v45[33] = a1 + 8;
  v45[34] = "ISchema::ISchema::init()";
  if (*(char *)(a2 + 31) < 0)
  {
    if (*(_QWORD *)(a2 + 16))
      goto LABEL_27;
  }
  else if (*(_BYTE *)(a2 + 31))
  {
LABEL_27:
    sub_20BDDBD68((uint64_t)&v44);
    sub_20BDDC1C8(v45, (uint64_t)"NULL parent passed into ISchema ctor", 36);
    std::stringbuf::str();
    sub_20BDDBF20(v42, (__int128 *)__p);
    if (v41 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v25 = sub_20BDDC09C(exception, (uint64_t)v42);
    __cxa_throw(v25, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v10 = *(_QWORD *)(a2 + 32);
  if (!v10)
    goto LABEL_27;
  v11 = *(std::__shared_weak_count **)(a2 + 40);
  v39 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 80))(v10, a3);
  if (!v14)
  {
    sub_20BDDBD68((uint64_t)&v44);
    v26 = sub_20BDDC1C8(v45, (uint64_t)"Nonexistent compound property: ", 31);
    v27 = *(char *)(a3 + 23);
    if (v27 >= 0)
      v28 = a3;
    else
      v28 = *(_QWORD *)a3;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a3 + 23);
    else
      v29 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v26, v28, v29);
    std::stringbuf::str();
    sub_20BDDBF20(v42, (__int128 *)__p);
    if (v41 < 0)
      operator delete(__p[0]);
    v30 = __cxa_allocate_exception(0x20uLL);
    v31 = sub_20BDDC09C(v30, (uint64_t)v42);
    __cxa_throw(v31, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = v14 + 32;
  if ((sub_20BE36F6C(v14 + 32, v50) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v44);
    v32 = sub_20BDDC1C8(v45, (uint64_t)"Incorrect match of schema: ", 27);
    sub_20BDDC0E4(__p, "schema");
    sub_20BE01E1C(v15, (const void **)__p, v42);
    if ((v43 & 0x80u) == 0)
      v33 = v42;
    else
      v33 = (void **)v42[0];
    if ((v43 & 0x80u) == 0)
      v34 = v43;
    else
      v34 = (uint64_t)v42[1];
    v35 = sub_20BDDC1C8(v32, (uint64_t)v33, v34);
    v36 = sub_20BDDC1C8(v35, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v36, (uint64_t)"AbcGeom_Camera_v1", 17);
    if ((char)v43 < 0)
      operator delete(v42[0]);
    if (v41 < 0)
      operator delete(__p[0]);
    std::stringbuf::str();
    sub_20BDDBF20(v42, (__int128 *)__p);
    if (v41 < 0)
      operator delete(__p[0]);
    v37 = __cxa_allocate_exception(0x20uLL);
    v38 = sub_20BDDC09C(v37, (uint64_t)v42);
    __cxa_throw(v38, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(&v44, v10, a3);
  sub_20BDE82DC(a1 + 40, &v44);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v39)
  {
    v19 = (unint64_t *)&v39->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v21 = v48;
  if (v48)
  {
    v22 = (unint64_t *)&v48->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  sub_20BDE9D48((uint64_t)v47, (_QWORD *)v47[1]);
}

void sub_20BE36DA0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  void *v29;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  v29 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v25 + 40));
  MEMORY[0x212B929D0](v25 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v26 - 160, (uint64_t)v29);
  else
    sub_20BE02504(v26 - 160, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE36B40);
}

void sub_20BE36EE4()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 128);
  JUMPOUT(0x20BE36F14);
}

uint64_t sub_20BE36F1C(uint64_t a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20BE36F44(void **a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20BE36F6C(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  char v14;

  if (a2 == 1)
    return 1;
  if ((a2 & 0xFFFFFFFD) != 0)
    return 0;
  sub_20BDDC0E4(__p, "schema");
  sub_20BE01E1C(a1, (const void **)__p, &v11);
  if (v14 < 0)
  {
    v2 = v12 == 17 && *v11 == 0x5F6D6F6547636241 && v11[1] == 0x765F6172656D6143 && *((_BYTE *)v11 + 16) == 49;
    operator delete(v11);
  }
  else
  {
    v2 = v14 == 17 && v11 == (_QWORD *)0x5F6D6F6547636241 && v12 == 0x765F6172656D6143 && v13 == 49;
  }
  if (v10 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE37090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Alembic::AbcGeom::v12::ONuPatchSchema::ONuPatchSchema(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v13 = (std::__shared_weak_count *)a2[1];
  v38 = *a2;
  v39 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_20BE376A4(a1, &v38, a3, a4, a5, a6, a7);
  v16 = v39;
  if (v39)
  {
    v17 = (unint64_t *)&v39->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = &unk_24C519610;
  *(_DWORD *)(a1 + 272) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 280), "");
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 328), "");
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 376), "");
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 424), "");
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 472), "");
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 520), "");
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 560) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 568), "");
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_DWORD *)(a1 + 608) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 616), "");
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  sub_20BE3FEAC(a1 + 656);
  sub_20BE3FF78(a1 + 832);
  *(_DWORD *)(a1 + 1008) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1016), "");
  *(_QWORD *)(a1 + 1048) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_DWORD *)(a1 + 1056) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1064), "");
  *(_QWORD *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_DWORD *)(a1 + 1104) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1112), "");
  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1136) = 0;
  *(_DWORD *)(a1 + 1152) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1160), "");
  *(_QWORD *)(a1 + 1192) = 0;
  *(_QWORD *)(a1 + 1184) = 0;
  *(_DWORD *)(a1 + 1200) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1208), "");
  *(_QWORD *)(a1 + 1240) = 0;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1248) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1256), "");
  *(_QWORD *)(a1 + 1288) = 0;
  *(_QWORD *)(a1 + 1280) = 0;
  *(_DWORD *)(a1 + 1296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1304), "");
  *(_QWORD *)(a1 + 1336) = 0;
  *(_QWORD *)(a1 + 1328) = 0;
  *(_DWORD *)(a1 + 1344) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1352), "");
  *(_QWORD *)(a1 + 1384) = 0;
  *(_QWORD *)(a1 + 1376) = 0;
  *(_DWORD *)(a1 + 1392) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1400), "");
  *(_QWORD *)(a1 + 1432) = 0;
  *(_QWORD *)(a1 + 1424) = 0;
  *(_DWORD *)(a1 + 1440) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1448), "");
  *(_QWORD *)(a1 + 1480) = 0;
  *(_QWORD *)(a1 + 1472) = 0;
  *(_DWORD *)(a1 + 1488) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1496), "");
  *(_QWORD *)(a1 + 1528) = 0;
  *(_QWORD *)(a1 + 1520) = 0;
  sub_20BE304B4(a4, a5, a6, a7, &v36);
  v19 = sub_20BE3060C(a4, a5, a6, a7);
  if (v36)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 24))(&v32);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v32 + 24))(&v34);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 48))(v34, v36);
    v21 = v35;
    if (v35)
    {
      v22 = (unint64_t *)&v35->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v33;
    if (v33)
    {
      v25 = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v20 = v19;
  }
  v27 = sub_20BE312C4(a4, a5, a6, a7);
  Alembic::AbcGeom::v12::ONuPatchSchema::init((Alembic::AbcGeom::v12::ONuPatchSchema *)a1, v20, v27);
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return a1;
}

void sub_20BE374FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void **v13;
  uint64_t v14;
  uint64_t v15;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v13 + 186);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v13 + 180);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v13 + 174);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v13 + 168);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v13 + 162);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v13 + 156);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v13 + 150);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v13 + 144);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v13 + 138);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v13 + 132);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v13 + 126);
  sub_20BE28E38(v15);
  sub_20BE28E38(v14);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v13 + 76);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v13 + 70);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v13 + 64);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v13 + 58);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v13 + 52);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v13 + 46);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v13 + 40);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v13 + 34);
  sub_20BE37A9C((uint64_t)v13);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE376A4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v13 = (std::__shared_weak_count *)a2[1];
  v38 = *a2;
  v39 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_20BE40044(a1, &v38, a3, a4, a5, a6, a7);
  v16 = v39;
  if (v39)
  {
    v17 = (unint64_t *)&v39->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = off_24C519698;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_20BE304B4(a4, a5, a6, a7, &v36);
  v19 = sub_20BE3060C(a4, a5, a6, a7);
  if (v36)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 24))(&v32);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v32 + 24))(&v34);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 48))(v34, v36);
    v21 = v35;
    if (v35)
    {
      v22 = (unint64_t *)&v35->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v33;
    if (v33)
    {
      v25 = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v20 = v19;
  }
  v27 = sub_20BE312C4(a4, a5, a6, a7);
  sub_20BE4015C(a1, v20, v27);
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return a1;
}

void sub_20BE37940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void **v18;
  Alembic::Abc::v12::OCompoundProperty *v19;
  Alembic::Abc::v12::OCompoundProperty *v20;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v20);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v19);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v18);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a10);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(v17 + 8));
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::ONuPatchSchema::init(Alembic::AbcGeom::v12::ONuPatchSchema *this, uint64_t a2, char a3)
{
  *((_BYTE *)this + 248) = a3;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = a2;
  if ((a3 & 1) == 0)
  {
    Alembic::AbcGeom::v12::ONuPatchSchema::createPositionProperties(this);
    Alembic::AbcGeom::v12::ONuPatchSchema::createKnotProperties(this);
  }
}

void sub_20BE37A2C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;
  void (*v12)(uint64_t);
  uint64_t v13;

  v11 = __cxa_begin_catch(a1);
  v12 = *(void (**)(uint64_t))(*(_QWORD *)v9 + 16);
  if (a2 == 2)
  {
    v13 = (uint64_t)v11;
    v12(v9);
    sub_20BE02570((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_20BE02504((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE37A18);
}

void sub_20BE37A7C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BE37A9C(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_24C519698;
  v2 = (void **)(a1 + 8);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

uint64_t Alembic::AbcGeom::v12::ONuPatchSchema::ONuPatchSchema(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  char v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v44 = *((_QWORD *)a2 + 4);
  v45 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *a2;
  LODWORD(v42) = 1;
  LODWORD(v43) = v14;
  sub_20BE376A4(a1, &v44, a3, &v42, a4, a5, a6);
  v15 = v45;
  if (v45)
  {
    v16 = (unint64_t *)&v45->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)a1 = &unk_24C519610;
  *(_DWORD *)(a1 + 272) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 280), "");
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 328), "");
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 376), "");
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 424), "");
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 472), "");
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 520), "");
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 560) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 568), "");
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_DWORD *)(a1 + 608) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 616), "");
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  sub_20BE3FEAC(a1 + 656);
  sub_20BE3FF78(a1 + 832);
  *(_DWORD *)(a1 + 1008) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1016), "");
  *(_QWORD *)(a1 + 1048) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_DWORD *)(a1 + 1056) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1064), "");
  *(_QWORD *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_DWORD *)(a1 + 1104) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1112), "");
  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1136) = 0;
  *(_DWORD *)(a1 + 1152) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1160), "");
  *(_QWORD *)(a1 + 1192) = 0;
  *(_QWORD *)(a1 + 1184) = 0;
  *(_DWORD *)(a1 + 1200) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1208), "");
  *(_QWORD *)(a1 + 1240) = 0;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1248) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1256), "");
  *(_QWORD *)(a1 + 1288) = 0;
  *(_QWORD *)(a1 + 1280) = 0;
  *(_DWORD *)(a1 + 1296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1304), "");
  *(_QWORD *)(a1 + 1336) = 0;
  *(_QWORD *)(a1 + 1328) = 0;
  *(_DWORD *)(a1 + 1344) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1352), "");
  *(_QWORD *)(a1 + 1384) = 0;
  *(_QWORD *)(a1 + 1376) = 0;
  *(_DWORD *)(a1 + 1392) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1400), "");
  *(_QWORD *)(a1 + 1432) = 0;
  *(_QWORD *)(a1 + 1424) = 0;
  *(_DWORD *)(a1 + 1440) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1448), "");
  *(_QWORD *)(a1 + 1480) = 0;
  *(_QWORD *)(a1 + 1472) = 0;
  *(_DWORD *)(a1 + 1488) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1496), "");
  *(_QWORD *)(a1 + 1528) = 0;
  *(_QWORD *)(a1 + 1520) = 0;
  LODWORD(v40) = 0;
  LODWORD(v41) = 0;
  sub_20BE304B4(a4, a5, a6, &v40, &v42);
  LODWORD(v40) = 0;
  LODWORD(v41) = 0;
  v18 = sub_20BE3060C(a4, a5, a6, &v40);
  if (v42)
  {
    v19 = *((_QWORD *)a2 + 4);
    v20 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
    v37 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v19 + 24))(&v38);
    (*(void (**)(uint64_t **__return_ptr))(*(_QWORD *)v38 + 24))(&v40);
    v23 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*v40 + 48))(v40, v42);
    v24 = v41;
    if (v41)
    {
      v25 = (unint64_t *)&v41->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v39;
    if (v39)
    {
      v28 = (unint64_t *)&v39->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (v37)
    {
      v30 = (unint64_t *)&v37->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  else
  {
    v23 = v18;
  }
  LODWORD(v40) = 0;
  LODWORD(v41) = 0;
  v32 = sub_20BE312C4(a4, a5, a6, &v40);
  Alembic::AbcGeom::v12::ONuPatchSchema::init((Alembic::AbcGeom::v12::ONuPatchSchema *)a1, v23, v32);
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return a1;
}

void sub_20BE37FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  void **v15;
  uint64_t v16;
  uint64_t v17;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15 + 186);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15 + 180);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15 + 174);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15 + 168);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15 + 162);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15 + 156);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15 + 150);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15 + 144);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15 + 138);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v15 + 132);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15 + 126);
  sub_20BE28E38(v17);
  sub_20BE28E38(v16);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15 + 76);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15 + 70);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15 + 64);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v15 + 58);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v15 + 52);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v15 + 46);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v15 + 40);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15 + 34);
  sub_20BE37A9C((uint64_t)v15);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::ONuPatchSchema::set(Alembic::AbcGeom::v12::ONuPatchSchema *this, uint64_t a2)
{
  _QWORD *v4;
  uint64_t (*v5)();
  uint64_t (*v6)();
  uint64_t (*v7)();
  uint64_t (*v8)();
  uint64_t (*v9)();
  _QWORD *v10;
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t (*v18)();
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  uint64_t (*v23)();
  uint64_t (*v24)();
  int v25;
  uint64_t (*v26)();
  int v27;
  uint64_t (*v28)();
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t (*v45)();
  uint64_t (*v46)();
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t (*v51)();
  uint64_t (*v52)();
  int v53;
  uint64_t (*v54)();
  int v55;
  uint64_t (*v56)();
  int v57;
  uint64_t (*v58)();
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t (*v63)();
  uint64_t (*v64)();
  int v65;
  uint64_t (*v66)();
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t (*v71)();
  uint64_t (*v72)();
  int v73;
  uint64_t (*v74)();
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t (*v83)();
  uint64_t (*v84)();
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t (*v89)();
  uint64_t (*v90)();
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t (*v95)();
  uint64_t (*v96)();
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t (*v101)();
  uint64_t (*v102)();
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t (*v107)();
  uint64_t (*v108)();
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t (*v113)();
  uint64_t (*v114)();
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t (*v119)();
  uint64_t (*v120)();
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t (*v125)();
  uint64_t (*v126)();
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t (*v130)();
  uint64_t (*v131)();
  uint64_t (*v132)();
  _QWORD *exception;
  _QWORD *v134;
  _BYTE v135[13];
  void *v136;
  void *v137;
  uint64_t v138;
  void *v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE v144[13];
  void *v145;
  void *v146;
  uint64_t v147;
  void *v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _BYTE v153[13];
  void *v154;
  void *v155;
  uint64_t v156;
  void *v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _BYTE v162[13];
  void *v163;
  void *v164;
  uint64_t v165;
  void *v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE v171[13];
  void *v172;
  void *v173;
  uint64_t v174;
  void *v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _BYTE v180[13];
  void *v181;
  void *v182;
  uint64_t v183;
  void *v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _BYTE v189[13];
  void *v190;
  void *v191;
  uint64_t v192;
  void *v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _BYTE v198[13];
  void *v199;
  void *v200;
  uint64_t v201;
  void *v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _BYTE v207[13];
  void *v208;
  void *v209;
  uint64_t v210;
  void *v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _BYTE v221[13];
  void *v222;
  void *v223;
  uint64_t v224;
  void *v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _BYTE v230[13];
  void *v231;
  void *v232;
  uint64_t v233;
  void *v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _BYTE v239[13];
  void *v240;
  void *v241;
  uint64_t v242;
  void *v243;
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _BYTE v248[13];
  void *v249;
  void *v250;
  uint64_t v251;
  void *v252;
  __int128 v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  void *v262;
  __int128 v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  __int128 v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _BYTE v277[13];
  void *__p;
  void *v279;
  uint64_t v280;
  void *v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  __int128 v286;
  char v287;
  _QWORD v288[4];
  _DWORD v289[4];
  _QWORD v290[35];

  if (*((_BYTE *)this + 248) || sub_20BE3A1FC(a2))
  {
    Alembic::AbcGeom::v12::ONuPatchSchema::selectiveSet(this, a2);
    return;
  }
  v290[33] = (char *)this + 8;
  v290[34] = "ONuPatchSchema::set()";
  v4 = (_QWORD *)(a2 + 40);
  if (*(_DWORD *)(a2 + 48) == 127 || !*v4 && *(_QWORD *)(a2 + 64) == *(_QWORD *)(a2 + 56))
    v5 = 0;
  else
    v5 = nullsub_10;
  if (!v5)
    goto LABEL_16;
  if (*((char *)this + 1039) < 0)
  {
    if (!*((_QWORD *)this + 128))
      goto LABEL_14;
LABEL_15:
    Alembic::AbcGeom::v12::ONuPatchSchema::createVelocityProperty(this);
    goto LABEL_16;
  }
  if (*((_BYTE *)this + 1039))
    goto LABEL_15;
LABEL_14:
  if (!*((_QWORD *)this + 130))
    goto LABEL_15;
LABEL_16:
  if (*(_DWORD *)(a2 + 312) == 127 || !*(_QWORD *)(a2 + 304) && *(_QWORD *)(a2 + 328) == *(_QWORD *)(a2 + 320))
    v6 = 0;
  else
    v6 = nullsub_8;
  if (v6)
    v7 = nullsub_11;
  else
    v7 = 0;
  if (v7 && (sub_20BE296FC((uint64_t)this + 832) & 1) == 0)
    Alembic::AbcGeom::v12::ONuPatchSchema::createUVsProperty((uint64_t)this, a2);
  if (*(_DWORD *)(a2 + 224) == 127 || !*(_QWORD *)(a2 + 216) && *(_QWORD *)(a2 + 240) == *(_QWORD *)(a2 + 232))
    v8 = 0;
  else
    v8 = nullsub_9;
  if (v8)
    v9 = nullsub_12;
  else
    v9 = 0;
  if (v9 && (sub_20BE296FC((uint64_t)this + 656) & 1) == 0)
    Alembic::AbcGeom::v12::ONuPatchSchema::createNormalsProperty((uint64_t)this, a2);
  v10 = (_QWORD *)(a2 + 176);
  if (*(_DWORD *)(a2 + 184) == 127 || !*v10 && *(_QWORD *)(a2 + 200) == *(_QWORD *)(a2 + 192))
    v11 = 0;
  else
    v11 = nullsub_13;
  if (v11)
  {
    if (*((char *)this + 639) < 0)
    {
      if (!*((_QWORD *)this + 78))
        goto LABEL_48;
    }
    else if (!*((_BYTE *)this + 639))
    {
LABEL_48:
      if (*((_QWORD *)this + 80))
        goto LABEL_50;
    }
    Alembic::AbcGeom::v12::ONuPatchSchema::createPositionWeightsProperty(this);
  }
LABEL_50:
  if (!*(_BYTE *)(a2 + 760))
    goto LABEL_57;
  if (*((char *)this + 1087) < 0)
  {
    if (!*((_QWORD *)this + 134))
      goto LABEL_55;
  }
  else if (!*((_BYTE *)this + 1087))
  {
LABEL_55:
    if (*((_QWORD *)this + 136))
      goto LABEL_57;
  }
  Alembic::AbcGeom::v12::ONuPatchSchema::createTrimPropreties(this);
LABEL_57:
  if (*((_QWORD *)this + 32))
  {
    LODWORD(v281) = *((_DWORD *)this + 68);
    if (*((char *)this + 303) < 0)
    {
      sub_20BDDBFAC(&v282, *((void **)this + 35), *((_QWORD *)this + 36));
    }
    else
    {
      v282 = *(_OWORD *)((char *)this + 280);
      v283 = *((_QWORD *)this + 37);
    }
    v13 = *((_QWORD *)this + 39);
    v284 = *((_QWORD *)this + 38);
    v285 = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = *(_QWORD *)(a2 + 5);
    *(_QWORD *)v277 = *(_QWORD *)a2;
    *(_QWORD *)&v277[5] = v16;
    __p = 0;
    v280 = 0;
    v279 = 0;
    sub_20BDE1364(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
    if (SHIBYTE(v283) < 0)
    {
      if (*((_QWORD *)&v282 + 1))
        goto LABEL_72;
    }
    else if (HIBYTE(v283))
    {
LABEL_72:
      v17 = 0;
      goto LABEL_77;
    }
    if (v284)
      v17 = nullsub_7;
    else
      v17 = 0;
LABEL_77:
    if (v17)
    {
      if (*(_DWORD *)&v277[8] == 127 || !*(_QWORD *)v277 && v279 == __p)
        v18 = 0;
      else
        v18 = nullsub_19;
      if (v18)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v281);
      else
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v281);
    }
    if (__p)
    {
      v279 = __p;
      operator delete(__p);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v281);
    LODWORD(v272) = *((_DWORD *)this + 80);
    if (*((char *)this + 351) < 0)
    {
      sub_20BDDBFAC(&v273, *((void **)this + 41), *((_QWORD *)this + 42));
    }
    else
    {
      v273 = *(_OWORD *)((char *)this + 328);
      v274 = *((_QWORD *)this + 43);
    }
    v19 = *((_QWORD *)this + 45);
    v275 = *((_QWORD *)this + 44);
    v276 = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *(_DWORD *)(a2 + 80);
    v289[0] = v22;
    if (SHIBYTE(v274) < 0)
    {
      if (*((_QWORD *)&v273 + 1))
        goto LABEL_138;
    }
    else if (HIBYTE(v274))
    {
      goto LABEL_138;
    }
    if (v275)
    {
      if (v22 == -536870912)
        Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v272);
      else
        Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v272, v289);
    }
LABEL_138:
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v272);
    LODWORD(v267) = *((_DWORD *)this + 92);
    if (*((char *)this + 399) < 0)
    {
      sub_20BDDBFAC(&v268, *((void **)this + 47), *((_QWORD *)this + 48));
    }
    else
    {
      v268 = *(_OWORD *)((char *)this + 376);
      v269 = *((_QWORD *)this + 49);
    }
    v29 = *((_QWORD *)this + 51);
    v270 = *((_QWORD *)this + 50);
    v271 = v29;
    if (v29)
    {
      v30 = (unint64_t *)(v29 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v32 = *(_DWORD *)(a2 + 84);
    v289[0] = v32;
    if (SHIBYTE(v269) < 0)
    {
      if (*((_QWORD *)&v268 + 1))
        goto LABEL_152;
    }
    else if (HIBYTE(v269))
    {
      goto LABEL_152;
    }
    if (v270)
    {
      if (v32 == -536870912)
        Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v267);
      else
        Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v267, v289);
    }
LABEL_152:
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v267);
    LODWORD(v262) = *((_DWORD *)this + 104);
    if (*((char *)this + 447) < 0)
    {
      sub_20BDDBFAC(&v263, *((void **)this + 53), *((_QWORD *)this + 54));
    }
    else
    {
      v263 = *(_OWORD *)((char *)this + 424);
      v264 = *((_QWORD *)this + 55);
    }
    v33 = *((_QWORD *)this + 57);
    v265 = *((_QWORD *)this + 56);
    v266 = v33;
    if (v33)
    {
      v34 = (unint64_t *)(v33 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = *(_DWORD *)(a2 + 88);
    v289[0] = v36;
    if (SHIBYTE(v264) < 0)
    {
      if (*((_QWORD *)&v263 + 1))
        goto LABEL_166;
    }
    else if (HIBYTE(v264))
    {
      goto LABEL_166;
    }
    if (v265)
    {
      if (v36 == -536870912)
        Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v262);
      else
        Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v262, v289);
    }
LABEL_166:
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v262);
    LODWORD(v257) = *((_DWORD *)this + 116);
    if (*((char *)this + 495) < 0)
    {
      sub_20BDDBFAC(&v258, *((void **)this + 59), *((_QWORD *)this + 60));
    }
    else
    {
      v258 = *(_OWORD *)((char *)this + 472);
      v259 = *((_QWORD *)this + 61);
    }
    v37 = *((_QWORD *)this + 63);
    v260 = *((_QWORD *)this + 62);
    v261 = v37;
    if (v37)
    {
      v38 = (unint64_t *)(v37 + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v40 = *(_DWORD *)(a2 + 92);
    v289[0] = v40;
    if (SHIBYTE(v259) < 0)
    {
      if (*((_QWORD *)&v258 + 1))
        goto LABEL_180;
    }
    else if (HIBYTE(v259))
    {
      goto LABEL_180;
    }
    if (v260)
    {
      if (v40 == -536870912)
        Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v257);
      else
        Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v257, v289);
    }
LABEL_180:
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v257);
    LODWORD(v252) = *((_DWORD *)this + 128);
    if (*((char *)this + 543) < 0)
    {
      sub_20BDDBFAC(&v253, *((void **)this + 65), *((_QWORD *)this + 66));
    }
    else
    {
      v253 = *(_OWORD *)((char *)this + 520);
      v254 = *((_QWORD *)this + 67);
    }
    v41 = *((_QWORD *)this + 69);
    v255 = *((_QWORD *)this + 68);
    v256 = v41;
    if (v41)
    {
      v42 = (unint64_t *)(v41 + 8);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = *(_QWORD *)(a2 + 101);
    *(_QWORD *)v248 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)&v248[5] = v44;
    v249 = 0;
    v251 = 0;
    v250 = 0;
    sub_20BDE1364(&v249, *(const void **)(a2 + 112), *(_QWORD *)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
    if (SHIBYTE(v254) < 0)
    {
      if (*((_QWORD *)&v253 + 1))
        goto LABEL_188;
    }
    else if (HIBYTE(v254))
    {
LABEL_188:
      v45 = 0;
      goto LABEL_193;
    }
    if (v255)
      v45 = nullsub_7;
    else
      v45 = 0;
LABEL_193:
    if (v45)
    {
      if (*(_DWORD *)&v248[8] == 127 || !*(_QWORD *)v248 && v250 == v249)
        v46 = 0;
      else
        v46 = nullsub_13;
      if (v46)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v252);
      else
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v252);
    }
    if (v249)
    {
      v250 = v249;
      operator delete(v249);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v252);
    LODWORD(v243) = *((_DWORD *)this + 140);
    if (*((char *)this + 591) < 0)
    {
      sub_20BDDBFAC(&v244, *((void **)this + 71), *((_QWORD *)this + 72));
    }
    else
    {
      v244 = *(_OWORD *)((char *)this + 568);
      v245 = *((_QWORD *)this + 73);
    }
    v47 = *((_QWORD *)this + 75);
    v246 = *((_QWORD *)this + 74);
    v247 = v47;
    if (v47)
    {
      v48 = (unint64_t *)(v47 + 8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v50 = *(_QWORD *)(a2 + 141);
    *(_QWORD *)v239 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)&v239[5] = v50;
    v240 = 0;
    v242 = 0;
    v241 = 0;
    sub_20BDE1364(&v240, *(const void **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 3);
    if (SHIBYTE(v245) < 0)
    {
      if (*((_QWORD *)&v244 + 1))
        goto LABEL_212;
    }
    else if (HIBYTE(v245))
    {
LABEL_212:
      v51 = 0;
      goto LABEL_217;
    }
    if (v246)
      v51 = nullsub_7;
    else
      v51 = 0;
LABEL_217:
    if (v51)
    {
      if (*(_DWORD *)&v239[8] == 127 || !*(_QWORD *)v239 && v241 == v240)
        v52 = 0;
      else
        v52 = nullsub_13;
      if (v52)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v243);
      else
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v243);
    }
    if (v240)
    {
      v241 = v240;
      operator delete(v240);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v243);
    v53 = sub_20BE296FC((uint64_t)this + 832);
    v54 = nullsub_16;
    if (!v53)
      v54 = 0;
    if (v54)
      sub_20BE2717C((uint64_t)this + 832, a2 + 304);
    v55 = sub_20BE296FC((uint64_t)this + 656);
    v56 = nullsub_17;
    if (!v55)
      v56 = 0;
    if (v56)
      sub_20BE27540((uint64_t)this + 656, a2 + 216);
    v57 = *((char *)this + 639);
    if (v57 < 0)
    {
      if (*((_QWORD *)this + 78))
        goto LABEL_269;
    }
    else if (*((_BYTE *)this + 639))
    {
      goto LABEL_269;
    }
    if (*((_QWORD *)this + 80))
      v58 = nullsub_7;
    else
      v58 = 0;
    if (!v58)
    {
LABEL_269:
      v65 = *((char *)this + 1039);
      if (v65 < 0)
      {
        if (*((_QWORD *)this + 128))
          goto LABEL_302;
      }
      else if (*((_BYTE *)this + 1039))
      {
        goto LABEL_302;
      }
      if (*((_QWORD *)this + 130))
        v66 = nullsub_7;
      else
        v66 = 0;
      if (!v66)
      {
LABEL_302:
        v73 = *((char *)this + 1087);
        if (v73 < 0)
        {
          if (*((_QWORD *)this + 134))
            goto LABEL_541;
        }
        else if (*((_BYTE *)this + 1087))
        {
          goto LABEL_541;
        }
        if (*((_QWORD *)this + 136))
          v74 = nullsub_6;
        else
          v74 = 0;
        if (!v74)
        {
LABEL_541:
          if (*(double *)(a2 + 792) <= *(double *)(a2 + 768)
            || *(double *)(a2 + 800) <= *(double *)(a2 + 776)
            || *(double *)(a2 + 808) <= *(double *)(a2 + 784))
          {
            if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
              v132 = 0;
            else
              v132 = nullsub_19;
            if (v132)
            {
              sub_20BE27074((_QWORD *)a2, (uint64_t)v289);
              Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 56), v289);
            }
            else
            {
              Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 56));
            }
            goto LABEL_553;
          }
          goto LABEL_544;
        }
        LODWORD(v216) = *((_DWORD *)this + 264);
        if (v73 < 0)
        {
          sub_20BDDBFAC(&v217, *((void **)this + 133), *((_QWORD *)this + 134));
        }
        else
        {
          v217 = *(_OWORD *)((char *)this + 1064);
          v218 = *((_QWORD *)this + 135);
        }
        v75 = *((_QWORD *)this + 137);
        v219 = *((_QWORD *)this + 136);
        v220 = v75;
        if (v75)
        {
          v76 = (unint64_t *)(v75 + 8);
          do
            v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
        }
        v78 = *(_DWORD *)(a2 + 392);
        v289[0] = v78;
        if (SHIBYTE(v218) < 0)
        {
          if (*((_QWORD *)&v217 + 1))
            goto LABEL_324;
        }
        else if (HIBYTE(v218))
        {
          goto LABEL_324;
        }
        if (v219)
        {
          if (v78 == -536870912)
            Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v216);
          else
            Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v216, v289);
        }
LABEL_324:
        Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v216);
        LODWORD(v211) = *((_DWORD *)this + 276);
        if (*((char *)this + 1135) < 0)
        {
          sub_20BDDBFAC(&v212, *((void **)this + 139), *((_QWORD *)this + 140));
        }
        else
        {
          v212 = *(_OWORD *)((char *)this + 1112);
          v213 = *((_QWORD *)this + 141);
        }
        v79 = *((_QWORD *)this + 143);
        v214 = *((_QWORD *)this + 142);
        v215 = v79;
        if (v79)
        {
          v80 = (unint64_t *)(v79 + 8);
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
        }
        v82 = *(_QWORD *)(a2 + 405);
        *(_QWORD *)v207 = *(_QWORD *)(a2 + 400);
        *(_QWORD *)&v207[5] = v82;
        v208 = 0;
        v210 = 0;
        v209 = 0;
        sub_20BDE1364(&v208, *(const void **)(a2 + 416), *(_QWORD *)(a2 + 424), (uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 3);
        if (SHIBYTE(v213) < 0)
        {
          if (*((_QWORD *)&v212 + 1))
            goto LABEL_332;
        }
        else if (HIBYTE(v213))
        {
LABEL_332:
          v83 = 0;
          goto LABEL_337;
        }
        if (v214)
          v83 = nullsub_7;
        else
          v83 = 0;
LABEL_337:
        if (v83)
        {
          if (*(_DWORD *)&v207[8] == 127 || !*(_QWORD *)v207 && v209 == v208)
            v84 = 0;
          else
            v84 = nullsub_20;
          if (v84)
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v211);
          else
            Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v211);
        }
        if (v208)
        {
          v209 = v208;
          operator delete(v208);
        }
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v211);
        LODWORD(v202) = *((_DWORD *)this + 288);
        if (*((char *)this + 1183) < 0)
        {
          sub_20BDDBFAC(&v203, *((void **)this + 145), *((_QWORD *)this + 146));
        }
        else
        {
          v203 = *(_OWORD *)((char *)this + 1160);
          v204 = *((_QWORD *)this + 147);
        }
        v85 = *((_QWORD *)this + 149);
        v205 = *((_QWORD *)this + 148);
        v206 = v85;
        if (v85)
        {
          v86 = (unint64_t *)(v85 + 8);
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
        }
        v88 = *(_QWORD *)(a2 + 445);
        *(_QWORD *)v198 = *(_QWORD *)(a2 + 440);
        *(_QWORD *)&v198[5] = v88;
        v199 = 0;
        v201 = 0;
        v200 = 0;
        sub_20BDE1364(&v199, *(const void **)(a2 + 456), *(_QWORD *)(a2 + 464), (uint64_t)(*(_QWORD *)(a2 + 464) - *(_QWORD *)(a2 + 456)) >> 3);
        if (SHIBYTE(v204) < 0)
        {
          if (*((_QWORD *)&v203 + 1))
            goto LABEL_356;
        }
        else if (HIBYTE(v204))
        {
LABEL_356:
          v89 = 0;
          goto LABEL_361;
        }
        if (v205)
          v89 = nullsub_7;
        else
          v89 = 0;
LABEL_361:
        if (v89)
        {
          if (*(_DWORD *)&v198[8] == 127 || !*(_QWORD *)v198 && v200 == v199)
            v90 = 0;
          else
            v90 = nullsub_20;
          if (v90)
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v202);
          else
            Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v202);
        }
        if (v199)
        {
          v200 = v199;
          operator delete(v199);
        }
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v202);
        LODWORD(v193) = *((_DWORD *)this + 300);
        if (*((char *)this + 1231) < 0)
        {
          sub_20BDDBFAC(&v194, *((void **)this + 151), *((_QWORD *)this + 152));
        }
        else
        {
          v194 = *(_OWORD *)((char *)this + 1208);
          v195 = *((_QWORD *)this + 153);
        }
        v91 = *((_QWORD *)this + 155);
        v196 = *((_QWORD *)this + 154);
        v197 = v91;
        if (v91)
        {
          v92 = (unint64_t *)(v91 + 8);
          do
            v93 = __ldxr(v92);
          while (__stxr(v93 + 1, v92));
        }
        v94 = *(_QWORD *)(a2 + 485);
        *(_QWORD *)v189 = *(_QWORD *)(a2 + 480);
        *(_QWORD *)&v189[5] = v94;
        v190 = 0;
        v192 = 0;
        v191 = 0;
        sub_20BDE1364(&v190, *(const void **)(a2 + 496), *(_QWORD *)(a2 + 504), (uint64_t)(*(_QWORD *)(a2 + 504) - *(_QWORD *)(a2 + 496)) >> 3);
        if (SHIBYTE(v195) < 0)
        {
          if (*((_QWORD *)&v194 + 1))
            goto LABEL_380;
        }
        else if (HIBYTE(v195))
        {
LABEL_380:
          v95 = 0;
          goto LABEL_385;
        }
        if (v196)
          v95 = nullsub_7;
        else
          v95 = 0;
LABEL_385:
        if (v95)
        {
          if (*(_DWORD *)&v189[8] == 127 || !*(_QWORD *)v189 && v191 == v190)
            v96 = 0;
          else
            v96 = nullsub_20;
          if (v96)
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v193);
          else
            Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v193);
        }
        if (v190)
        {
          v191 = v190;
          operator delete(v190);
        }
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v193);
        LODWORD(v184) = *((_DWORD *)this + 312);
        if (*((char *)this + 1279) < 0)
        {
          sub_20BDDBFAC(&v185, *((void **)this + 157), *((_QWORD *)this + 158));
        }
        else
        {
          v185 = *(_OWORD *)((char *)this + 1256);
          v186 = *((_QWORD *)this + 159);
        }
        v97 = *((_QWORD *)this + 161);
        v187 = *((_QWORD *)this + 160);
        v188 = v97;
        if (v97)
        {
          v98 = (unint64_t *)(v97 + 8);
          do
            v99 = __ldxr(v98);
          while (__stxr(v99 + 1, v98));
        }
        v100 = *(_QWORD *)(a2 + 525);
        *(_QWORD *)v180 = *(_QWORD *)(a2 + 520);
        *(_QWORD *)&v180[5] = v100;
        v181 = 0;
        v182 = 0;
        v183 = 0;
        sub_20BDE1364(&v181, *(const void **)(a2 + 536), *(_QWORD *)(a2 + 544), (uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
        if (SHIBYTE(v186) < 0)
        {
          if (*((_QWORD *)&v185 + 1))
            goto LABEL_404;
        }
        else if (HIBYTE(v186))
        {
LABEL_404:
          v101 = 0;
          goto LABEL_409;
        }
        if (v187)
          v101 = nullsub_7;
        else
          v101 = 0;
LABEL_409:
        if (v101)
        {
          if (*(_DWORD *)&v180[8] == 127 || !*(_QWORD *)v180 && v182 == v181)
            v102 = 0;
          else
            v102 = nullsub_13;
          if (v102)
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v184);
          else
            Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v184);
        }
        if (v181)
        {
          v182 = v181;
          operator delete(v181);
        }
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v184);
        LODWORD(v175) = *((_DWORD *)this + 324);
        if (*((char *)this + 1327) < 0)
        {
          sub_20BDDBFAC(&v176, *((void **)this + 163), *((_QWORD *)this + 164));
        }
        else
        {
          v176 = *(_OWORD *)((char *)this + 1304);
          v177 = *((_QWORD *)this + 165);
        }
        v103 = *((_QWORD *)this + 167);
        v178 = *((_QWORD *)this + 166);
        v179 = v103;
        if (v103)
        {
          v104 = (unint64_t *)(v103 + 8);
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 1, v104));
        }
        v106 = *(_QWORD *)(a2 + 565);
        *(_QWORD *)v171 = *(_QWORD *)(a2 + 560);
        *(_QWORD *)&v171[5] = v106;
        v172 = 0;
        v173 = 0;
        v174 = 0;
        sub_20BDE1364(&v172, *(const void **)(a2 + 576), *(_QWORD *)(a2 + 584), (uint64_t)(*(_QWORD *)(a2 + 584) - *(_QWORD *)(a2 + 576)) >> 3);
        if (SHIBYTE(v177) < 0)
        {
          if (*((_QWORD *)&v176 + 1))
            goto LABEL_428;
        }
        else if (HIBYTE(v177))
        {
LABEL_428:
          v107 = 0;
          goto LABEL_433;
        }
        if (v178)
          v107 = nullsub_7;
        else
          v107 = 0;
LABEL_433:
        if (v107)
        {
          if (*(_DWORD *)&v171[8] == 127 || !*(_QWORD *)v171 && v173 == v172)
            v108 = 0;
          else
            v108 = nullsub_13;
          if (v108)
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v175);
          else
            Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v175);
        }
        if (v172)
        {
          v173 = v172;
          operator delete(v172);
        }
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v175);
        LODWORD(v166) = *((_DWORD *)this + 336);
        if (*((char *)this + 1375) < 0)
        {
          sub_20BDDBFAC(&v167, *((void **)this + 169), *((_QWORD *)this + 170));
        }
        else
        {
          v167 = *(_OWORD *)((char *)this + 1352);
          v168 = *((_QWORD *)this + 171);
        }
        v109 = *((_QWORD *)this + 173);
        v169 = *((_QWORD *)this + 172);
        v170 = v109;
        if (v109)
        {
          v110 = (unint64_t *)(v109 + 8);
          do
            v111 = __ldxr(v110);
          while (__stxr(v111 + 1, v110));
        }
        v112 = *(_QWORD *)(a2 + 605);
        *(_QWORD *)v162 = *(_QWORD *)(a2 + 600);
        *(_QWORD *)&v162[5] = v112;
        v163 = 0;
        v164 = 0;
        v165 = 0;
        sub_20BDE1364(&v163, *(const void **)(a2 + 616), *(_QWORD *)(a2 + 624), (uint64_t)(*(_QWORD *)(a2 + 624) - *(_QWORD *)(a2 + 616)) >> 3);
        if (SHIBYTE(v168) < 0)
        {
          if (*((_QWORD *)&v167 + 1))
            goto LABEL_452;
        }
        else if (HIBYTE(v168))
        {
LABEL_452:
          v113 = 0;
          goto LABEL_457;
        }
        if (v169)
          v113 = nullsub_7;
        else
          v113 = 0;
LABEL_457:
        if (v113)
        {
          if (*(_DWORD *)&v162[8] == 127 || !*(_QWORD *)v162 && v164 == v163)
            v114 = 0;
          else
            v114 = nullsub_13;
          if (v114)
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v166);
          else
            Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v166);
        }
        if (v163)
        {
          v164 = v163;
          operator delete(v163);
        }
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v166);
        LODWORD(v157) = *((_DWORD *)this + 348);
        if (*((char *)this + 1423) < 0)
        {
          sub_20BDDBFAC(&v158, *((void **)this + 175), *((_QWORD *)this + 176));
        }
        else
        {
          v158 = *(_OWORD *)((char *)this + 1400);
          v159 = *((_QWORD *)this + 177);
        }
        v115 = *((_QWORD *)this + 179);
        v160 = *((_QWORD *)this + 178);
        v161 = v115;
        if (v115)
        {
          v116 = (unint64_t *)(v115 + 8);
          do
            v117 = __ldxr(v116);
          while (__stxr(v117 + 1, v116));
        }
        v118 = *(_QWORD *)(a2 + 645);
        *(_QWORD *)v153 = *(_QWORD *)(a2 + 640);
        *(_QWORD *)&v153[5] = v118;
        v154 = 0;
        v155 = 0;
        v156 = 0;
        sub_20BDE1364(&v154, *(const void **)(a2 + 656), *(_QWORD *)(a2 + 664), (uint64_t)(*(_QWORD *)(a2 + 664) - *(_QWORD *)(a2 + 656)) >> 3);
        if (SHIBYTE(v159) < 0)
        {
          if (*((_QWORD *)&v158 + 1))
            goto LABEL_476;
        }
        else if (HIBYTE(v159))
        {
LABEL_476:
          v119 = 0;
          goto LABEL_481;
        }
        if (v160)
          v119 = nullsub_7;
        else
          v119 = 0;
LABEL_481:
        if (v119)
        {
          if (*(_DWORD *)&v153[8] == 127 || !*(_QWORD *)v153 && v155 == v154)
            v120 = 0;
          else
            v120 = nullsub_13;
          if (v120)
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v157);
          else
            Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v157);
        }
        if (v154)
        {
          v155 = v154;
          operator delete(v154);
        }
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v157);
        LODWORD(v148) = *((_DWORD *)this + 360);
        if (*((char *)this + 1471) < 0)
        {
          sub_20BDDBFAC(&v149, *((void **)this + 181), *((_QWORD *)this + 182));
        }
        else
        {
          v149 = *(_OWORD *)((char *)this + 1448);
          v150 = *((_QWORD *)this + 183);
        }
        v121 = *((_QWORD *)this + 185);
        v151 = *((_QWORD *)this + 184);
        v152 = v121;
        if (v121)
        {
          v122 = (unint64_t *)(v121 + 8);
          do
            v123 = __ldxr(v122);
          while (__stxr(v123 + 1, v122));
        }
        v124 = *(_QWORD *)(a2 + 685);
        *(_QWORD *)v144 = *(_QWORD *)(a2 + 680);
        *(_QWORD *)&v144[5] = v124;
        v145 = 0;
        v146 = 0;
        v147 = 0;
        sub_20BDE1364(&v145, *(const void **)(a2 + 696), *(_QWORD *)(a2 + 704), (uint64_t)(*(_QWORD *)(a2 + 704) - *(_QWORD *)(a2 + 696)) >> 3);
        if (SHIBYTE(v150) < 0)
        {
          if (*((_QWORD *)&v149 + 1))
            goto LABEL_500;
        }
        else if (HIBYTE(v150))
        {
LABEL_500:
          v125 = 0;
          goto LABEL_505;
        }
        if (v151)
          v125 = nullsub_7;
        else
          v125 = 0;
LABEL_505:
        if (v125)
        {
          if (*(_DWORD *)&v144[8] == 127 || !*(_QWORD *)v144 && v146 == v145)
            v126 = 0;
          else
            v126 = nullsub_13;
          if (v126)
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v148);
          else
            Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v148);
        }
        if (v145)
        {
          v146 = v145;
          operator delete(v145);
        }
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v148);
        LODWORD(v139) = *((_DWORD *)this + 372);
        if (*((char *)this + 1519) < 0)
        {
          sub_20BDDBFAC(&v140, *((void **)this + 187), *((_QWORD *)this + 188));
        }
        else
        {
          v140 = *(_OWORD *)((char *)this + 1496);
          v141 = *((_QWORD *)this + 189);
        }
        v127 = *((_QWORD *)this + 191);
        v142 = *((_QWORD *)this + 190);
        v143 = v127;
        if (v127)
        {
          v128 = (unint64_t *)(v127 + 8);
          do
            v129 = __ldxr(v128);
          while (__stxr(v129 + 1, v128));
        }
        *(_QWORD *)v135 = *(_QWORD *)(a2 + 720);
        *(_QWORD *)&v135[5] = *(_QWORD *)(a2 + 725);
        v136 = 0;
        v137 = 0;
        v138 = 0;
        sub_20BDE1364(&v136, *(const void **)(a2 + 736), *(_QWORD *)(a2 + 744), (uint64_t)(*(_QWORD *)(a2 + 744) - *(_QWORD *)(a2 + 736)) >> 3);
        if (SHIBYTE(v141) < 0)
        {
          if (*((_QWORD *)&v140 + 1))
            goto LABEL_524;
        }
        else if (HIBYTE(v141))
        {
LABEL_524:
          v130 = 0;
LABEL_529:
          if (v130)
          {
            if (*(_DWORD *)&v135[8] == 127 || !*(_QWORD *)v135 && v137 == v136)
              v131 = 0;
            else
              v131 = nullsub_13;
            if (v131)
              Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v139);
            else
              Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v139);
          }
          if (v136)
          {
            v137 = v136;
            operator delete(v136);
          }
          Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v139);
          goto LABEL_541;
        }
        if (v142)
          v130 = nullsub_7;
        else
          v130 = 0;
        goto LABEL_529;
      }
      LODWORD(v225) = *((_DWORD *)this + 252);
      if (v65 < 0)
      {
        sub_20BDDBFAC(&v226, *((void **)this + 127), *((_QWORD *)this + 128));
      }
      else
      {
        v226 = *(_OWORD *)((char *)this + 1016);
        v227 = *((_QWORD *)this + 129);
      }
      v67 = *((_QWORD *)this + 131);
      v228 = *((_QWORD *)this + 130);
      v229 = v67;
      if (v67)
      {
        v68 = (unint64_t *)(v67 + 8);
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      v70 = *(_QWORD *)(a2 + 45);
      *(_QWORD *)v221 = *v4;
      *(_QWORD *)&v221[5] = v70;
      v222 = 0;
      v224 = 0;
      v223 = 0;
      sub_20BDE1364(&v222, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
      if (SHIBYTE(v227) < 0)
      {
        if (*((_QWORD *)&v226 + 1))
          goto LABEL_285;
      }
      else if (HIBYTE(v227))
      {
LABEL_285:
        v71 = 0;
LABEL_290:
        if (v71)
        {
          if (*(_DWORD *)&v221[8] == 127 || !*(_QWORD *)v221 && v223 == v222)
            v72 = 0;
          else
            v72 = nullsub_10;
          if (v72)
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v225);
          else
            Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v225);
        }
        if (v222)
        {
          v223 = v222;
          operator delete(v222);
        }
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v225);
        goto LABEL_302;
      }
      if (v228)
        v71 = nullsub_7;
      else
        v71 = 0;
      goto LABEL_290;
    }
    LODWORD(v234) = *((_DWORD *)this + 152);
    if (v57 < 0)
    {
      sub_20BDDBFAC(&v235, *((void **)this + 77), *((_QWORD *)this + 78));
    }
    else
    {
      v235 = *(_OWORD *)((char *)this + 616);
      v236 = *((_QWORD *)this + 79);
    }
    v59 = *((_QWORD *)this + 81);
    v237 = *((_QWORD *)this + 80);
    v238 = v59;
    if (v59)
    {
      v60 = (unint64_t *)(v59 + 8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    v62 = *(_QWORD *)(a2 + 181);
    *(_QWORD *)v230 = *v10;
    *(_QWORD *)&v230[5] = v62;
    v231 = 0;
    v233 = 0;
    v232 = 0;
    sub_20BDE1364(&v231, *(const void **)(a2 + 192), *(_QWORD *)(a2 + 200), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
    if (SHIBYTE(v236) < 0)
    {
      if (*((_QWORD *)&v235 + 1))
        goto LABEL_252;
    }
    else if (HIBYTE(v236))
    {
LABEL_252:
      v63 = 0;
LABEL_257:
      if (v63)
      {
        if (*(_DWORD *)&v230[8] == 127 || !*(_QWORD *)v230 && v232 == v231)
          v64 = 0;
        else
          v64 = nullsub_13;
        if (v64)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v234);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v234);
      }
      if (v231)
      {
        v232 = v231;
        operator delete(v231);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v234);
      goto LABEL_269;
    }
    if (v237)
      v63 = nullsub_7;
    else
      v63 = 0;
    goto LABEL_257;
  }
  if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
  {
    sub_20BDDBD68((uint64_t)v289);
    sub_20BDDC1C8(v290, (uint64_t)"Sample 0 must have valid data for all mesh components", 53);
    std::stringbuf::str();
    sub_20BDDBF20(v288, &v286);
    if (v287 < 0)
      operator delete((void *)v286);
    exception = __cxa_allocate_exception(0x20uLL);
    v134 = sub_20BDDC09C(exception, (uint64_t)v288);
    __cxa_throw(v134, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 272);
  v289[0] = *(_DWORD *)(a2 + 80);
  Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 320), v289);
  v289[0] = *(_DWORD *)(a2 + 84);
  Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 368), v289);
  v289[0] = *(_DWORD *)(a2 + 88);
  Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 416), v289);
  v289[0] = *(_DWORD *)(a2 + 92);
  Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 464), v289);
  Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 512);
  Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 560);
  if (*((char *)this + 1087) < 0)
  {
    if (*((_QWORD *)this + 134))
      goto LABEL_65;
  }
  else if (*((_BYTE *)this + 1087))
  {
LABEL_65:
    v12 = 0;
    goto LABEL_105;
  }
  if (*((_QWORD *)this + 136))
    v12 = nullsub_6;
  else
    v12 = 0;
LABEL_105:
  if (v12)
  {
    v289[0] = *(_DWORD *)(a2 + 392);
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1056), v289);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1104);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1152);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1200);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1248);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1296);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1344);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1392);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1440);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1488);
  }
  if (*((char *)this + 639) < 0)
  {
    if (*((_QWORD *)this + 78))
      goto LABEL_109;
  }
  else if (*((_BYTE *)this + 639))
  {
LABEL_109:
    v23 = 0;
    goto LABEL_114;
  }
  if (*((_QWORD *)this + 80))
    v23 = nullsub_7;
  else
    v23 = 0;
LABEL_114:
  if (v23)
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 608);
  if (*((char *)this + 1039) < 0)
  {
    if (*((_QWORD *)this + 128))
      goto LABEL_118;
  }
  else if (*((_BYTE *)this + 1039))
  {
LABEL_118:
    v24 = 0;
    goto LABEL_123;
  }
  if (*((_QWORD *)this + 130))
    v24 = nullsub_7;
  else
    v24 = 0;
LABEL_123:
  if (v24)
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1008);
  v25 = sub_20BE296FC((uint64_t)this + 832);
  v26 = nullsub_16;
  if (!v25)
    v26 = 0;
  if (v26)
    sub_20BE2717C((uint64_t)this + 832, a2 + 304);
  v27 = sub_20BE296FC((uint64_t)this + 656);
  v28 = nullsub_17;
  if (!v27)
    v28 = 0;
  if (v28)
    sub_20BE27540((uint64_t)this + 656, a2 + 216);
  if (*(double *)(a2 + 792) >= *(double *)(a2 + 768)
    && *(double *)(a2 + 800) >= *(double *)(a2 + 776)
    && *(double *)(a2 + 808) >= *(double *)(a2 + 784))
  {
LABEL_544:
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 56), (const void *)(a2 + 768));
    goto LABEL_553;
  }
  sub_20BE27074((_QWORD *)a2, (uint64_t)v289);
  Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 56), v289);
LABEL_553:
  ++*((_QWORD *)this + 32);
}

void sub_20BE39E94(void *a1, int a2)
{
  uint64_t v2;
  void *v5;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)&STACK[0x318]);
  v5 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v2 - 80, (uint64_t)v5);
  else
    sub_20BE02504(v2 - 80, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE39E04);
}

void sub_20BE3A1DC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL sub_20BE3A1FC(uint64_t a1)
{
  _BOOL8 result;
  uint64_t (*v3)();

  result = 0;
  if (!*(_QWORD *)a1)
  {
    if (*(_DWORD *)(a1 + 312) == 127 || !*(_QWORD *)(a1 + 304) && *(_QWORD *)(a1 + 328) == *(_QWORD *)(a1 + 320)
       ? 0
       : nullsub_8)
    {
      return 1;
    }
    v3 = *(_DWORD *)(a1 + 224) == 127 || !*(_QWORD *)(a1 + 216) && *(_QWORD *)(a1 + 240) == *(_QWORD *)(a1 + 232)
       ? 0
       : nullsub_9;
    if (v3 || *(_QWORD *)(a1 + 40))
      return 1;
  }
  return result;
}

void Alembic::AbcGeom::v12::ONuPatchSchema::selectiveSet(Alembic::AbcGeom::v12::ONuPatchSchema *this, uint64_t a2)
{
  uint64_t (*v4)();
  int v5;
  uint64_t (*v6)();
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t (*v13)();
  int v14;
  uint64_t (*v15)();
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t (*v36)();
  uint64_t (*v37)();
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t (*v42)();
  uint64_t (*v43)();
  _QWORD *v44;
  uint64_t (*v45)();
  int v46;
  char v47;
  uint64_t (*v48)();
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t (*v53)();
  uint64_t (*v54)();
  uint64_t (*v55)();
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t (*v60)();
  uint64_t (*v61)();
  uint64_t (*v62)();
  uint64_t (*v63)();
  int v64;
  uint64_t (*v65)();
  uint64_t (*v66)();
  uint64_t (*v67)();
  int v68;
  uint64_t (*v69)();
  _QWORD *v70;
  uint64_t (*v71)();
  int v72;
  uint64_t (*v73)();
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t (*v78)();
  uint64_t (*v79)();
  int v80;
  uint64_t (*v81)();
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t (*v90)();
  uint64_t (*v91)();
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t (*v96)();
  uint64_t (*v97)();
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t (*v102)();
  uint64_t (*v103)();
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t (*v108)();
  uint64_t (*v109)();
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t (*v114)();
  uint64_t (*v115)();
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t (*v120)();
  uint64_t (*v121)();
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t (*v126)();
  uint64_t (*v127)();
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t (*v132)();
  uint64_t (*v133)();
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t (*v137)();
  uint64_t (*v138)();
  _BYTE v139[13];
  void *v140;
  void *v141;
  uint64_t v142;
  void *v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE v148[13];
  void *v149;
  void *v150;
  uint64_t v151;
  void *v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _BYTE v157[13];
  void *v158;
  void *v159;
  uint64_t v160;
  void *v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _BYTE v166[13];
  void *v167;
  void *v168;
  uint64_t v169;
  void *v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _BYTE v175[13];
  void *v176;
  void *v177;
  uint64_t v178;
  void *v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _BYTE v184[13];
  void *v185;
  void *v186;
  uint64_t v187;
  void *v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _BYTE v193[13];
  void *v194;
  void *v195;
  uint64_t v196;
  void *v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _BYTE v202[13];
  void *v203;
  void *v204;
  uint64_t v205;
  void *v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _BYTE v211[13];
  void *v212;
  void *v213;
  uint64_t v214;
  void *v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  __int128 v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _BYTE v225[13];
  void *v226;
  void *v227;
  uint64_t v228;
  void *v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _BYTE v234[13];
  void *v235;
  void *v236;
  uint64_t v237;
  void *v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _BYTE v243[13];
  void *v244;
  void *v245;
  uint64_t v246;
  void *v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _BYTE v252[13];
  void *v253;
  void *v254;
  uint64_t v255;
  void *v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _BYTE v261[13];
  void *__p;
  void *v263;
  uint64_t v264;
  void *v265;
  __int128 v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  __int128 v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  void *v275;
  __int128 v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  __int128 v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  __int128 v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _DWORD v290[12];
  _BYTE v291[13];
  void *v292;
  void *v293;
  uint64_t v294;
  void *v295;
  __int128 v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  const char *v301;

  v300 = (char *)this + 8;
  v301 = "ONuPatchSchema::selectiveSet()";
  if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
    v4 = 0;
  else
    v4 = nullsub_19;
  if (v4)
  {
    if (*((char *)this + 303) < 0)
    {
      if (!*((_QWORD *)this + 36))
        goto LABEL_11;
    }
    else if (!*((_BYTE *)this + 303))
    {
LABEL_11:
      if (*((_QWORD *)this + 38))
        goto LABEL_13;
    }
    Alembic::AbcGeom::v12::ONuPatchSchema::createPositionProperties(this);
  }
LABEL_13:
  if (!sub_20BE3E684(a2))
    goto LABEL_20;
  if (*((char *)this + 351) < 0)
  {
    if (!*((_QWORD *)this + 42))
      goto LABEL_18;
  }
  else if (!*((_BYTE *)this + 351))
  {
LABEL_18:
    if (*((_QWORD *)this + 44))
      goto LABEL_20;
  }
  Alembic::AbcGeom::v12::ONuPatchSchema::createKnotProperties(this);
LABEL_20:
  v5 = *((char *)this + 303);
  if (v5 < 0)
  {
    if (*((_QWORD *)this + 36))
      goto LABEL_63;
  }
  else if (*((_BYTE *)this + 303))
  {
    goto LABEL_63;
  }
  if (*((_QWORD *)this + 38))
    v6 = nullsub_7;
  else
    v6 = 0;
  if (v6)
  {
    LODWORD(v295) = *((_DWORD *)this + 68);
    if (v5 < 0)
    {
      sub_20BDDBFAC(&v296, *((void **)this + 35), *((_QWORD *)this + 36));
    }
    else
    {
      v296 = *(_OWORD *)((char *)this + 280);
      v297 = *((_QWORD *)this + 37);
    }
    v7 = *((_QWORD *)this + 39);
    v298 = *((_QWORD *)this + 38);
    v299 = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = *(_QWORD *)(a2 + 5);
    *(_QWORD *)v291 = *(_QWORD *)a2;
    *(_QWORD *)&v291[5] = v10;
    v292 = 0;
    v293 = 0;
    v294 = 0;
    sub_20BDE1364(&v292, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
    if (SHIBYTE(v297) < 0)
    {
      if (*((_QWORD *)&v296 + 1))
        goto LABEL_36;
    }
    else if (HIBYTE(v297))
    {
LABEL_36:
      v11 = 0;
LABEL_41:
      if (v11)
      {
        if (*(_DWORD *)&v291[8] == 127 || !*(_QWORD *)v291 && v293 == v292)
          v12 = 0;
        else
          v12 = nullsub_19;
        if (v12)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v295);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v295);
      }
      if (v292)
      {
        v293 = v292;
        operator delete(v292);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v295);
      if (*(double *)(a2 + 792) <= *(double *)(a2 + 768)
        || *(double *)(a2 + 800) <= *(double *)(a2 + 776)
        || *(double *)(a2 + 808) <= *(double *)(a2 + 784))
      {
        if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
          v13 = 0;
        else
          v13 = nullsub_19;
        if (v13)
        {
          sub_20BE27074((_QWORD *)a2, (uint64_t)v290);
          Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 56), v290);
        }
      }
      else
      {
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 56), (const void *)(a2 + 768));
      }
      goto LABEL_63;
    }
    if (v298)
      v11 = nullsub_7;
    else
      v11 = 0;
    goto LABEL_41;
  }
LABEL_63:
  v14 = *((char *)this + 351);
  if (v14 < 0)
  {
    if (*((_QWORD *)this + 42))
      goto LABEL_176;
  }
  else if (*((_BYTE *)this + 351))
  {
    goto LABEL_176;
  }
  if (*((_QWORD *)this + 44))
    v15 = nullsub_6;
  else
    v15 = 0;
  if (!v15)
    goto LABEL_176;
  LODWORD(v285) = *((_DWORD *)this + 80);
  if (v14 < 0)
  {
    sub_20BDDBFAC(&v286, *((void **)this + 41), *((_QWORD *)this + 42));
  }
  else
  {
    v286 = *(_OWORD *)((char *)this + 328);
    v287 = *((_QWORD *)this + 43);
  }
  v16 = *((_QWORD *)this + 45);
  v288 = *((_QWORD *)this + 44);
  v289 = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_DWORD *)(a2 + 80);
  v290[0] = v19;
  if (SHIBYTE(v287) < 0)
  {
    if (*((_QWORD *)&v286 + 1))
      goto LABEL_85;
  }
  else if (HIBYTE(v287))
  {
    goto LABEL_85;
  }
  if (v288)
  {
    if (v19 == -536870912)
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v285);
    else
      Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v285, v290);
  }
LABEL_85:
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v285);
  LODWORD(v280) = *((_DWORD *)this + 92);
  if (*((char *)this + 399) < 0)
  {
    sub_20BDDBFAC(&v281, *((void **)this + 47), *((_QWORD *)this + 48));
  }
  else
  {
    v281 = *(_OWORD *)((char *)this + 376);
    v282 = *((_QWORD *)this + 49);
  }
  v20 = *((_QWORD *)this + 51);
  v283 = *((_QWORD *)this + 50);
  v284 = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(_DWORD *)(a2 + 84);
  v290[0] = v23;
  if (SHIBYTE(v282) < 0)
  {
    if (*((_QWORD *)&v281 + 1))
      goto LABEL_99;
  }
  else if (HIBYTE(v282))
  {
    goto LABEL_99;
  }
  if (v283)
  {
    if (v23 == -536870912)
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v280);
    else
      Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v280, v290);
  }
LABEL_99:
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v280);
  LODWORD(v275) = *((_DWORD *)this + 104);
  if (*((char *)this + 447) < 0)
  {
    sub_20BDDBFAC(&v276, *((void **)this + 53), *((_QWORD *)this + 54));
  }
  else
  {
    v276 = *(_OWORD *)((char *)this + 424);
    v277 = *((_QWORD *)this + 55);
  }
  v24 = *((_QWORD *)this + 57);
  v278 = *((_QWORD *)this + 56);
  v279 = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = *(_DWORD *)(a2 + 88);
  v290[0] = v27;
  if (SHIBYTE(v277) < 0)
  {
    if (*((_QWORD *)&v276 + 1))
      goto LABEL_113;
  }
  else if (HIBYTE(v277))
  {
    goto LABEL_113;
  }
  if (v278)
  {
    if (v27 == -536870912)
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v275);
    else
      Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v275, v290);
  }
LABEL_113:
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v275);
  LODWORD(v270) = *((_DWORD *)this + 116);
  if (*((char *)this + 495) < 0)
  {
    sub_20BDDBFAC(&v271, *((void **)this + 59), *((_QWORD *)this + 60));
  }
  else
  {
    v271 = *(_OWORD *)((char *)this + 472);
    v272 = *((_QWORD *)this + 61);
  }
  v28 = *((_QWORD *)this + 63);
  v273 = *((_QWORD *)this + 62);
  v274 = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = *(_DWORD *)(a2 + 92);
  v290[0] = v31;
  if (SHIBYTE(v272) < 0)
  {
    if (*((_QWORD *)&v271 + 1))
      goto LABEL_127;
  }
  else if (HIBYTE(v272))
  {
    goto LABEL_127;
  }
  if (v273)
  {
    if (v31 == -536870912)
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v270);
    else
      Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v270, v290);
  }
LABEL_127:
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v270);
  LODWORD(v265) = *((_DWORD *)this + 128);
  if (*((char *)this + 543) < 0)
  {
    sub_20BDDBFAC(&v266, *((void **)this + 65), *((_QWORD *)this + 66));
  }
  else
  {
    v266 = *(_OWORD *)((char *)this + 520);
    v267 = *((_QWORD *)this + 67);
  }
  v32 = *((_QWORD *)this + 69);
  v268 = *((_QWORD *)this + 68);
  v269 = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = *(_QWORD *)(a2 + 101);
  *(_QWORD *)v261 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)&v261[5] = v35;
  __p = 0;
  v264 = 0;
  v263 = 0;
  sub_20BDE1364(&__p, *(const void **)(a2 + 112), *(_QWORD *)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  if (SHIBYTE(v267) < 0)
  {
    if (*((_QWORD *)&v266 + 1))
      goto LABEL_135;
  }
  else if (HIBYTE(v267))
  {
LABEL_135:
    v36 = 0;
    goto LABEL_140;
  }
  if (v268)
    v36 = nullsub_7;
  else
    v36 = 0;
LABEL_140:
  if (v36)
  {
    if (*(_DWORD *)&v261[8] == 127 || !*(_QWORD *)v261 && v263 == __p)
      v37 = 0;
    else
      v37 = nullsub_13;
    if (v37)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v265);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v265);
  }
  if (__p)
  {
    v263 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v265);
  LODWORD(v256) = *((_DWORD *)this + 140);
  if (*((char *)this + 591) < 0)
  {
    sub_20BDDBFAC(&v257, *((void **)this + 71), *((_QWORD *)this + 72));
  }
  else
  {
    v257 = *(_OWORD *)((char *)this + 568);
    v258 = *((_QWORD *)this + 73);
  }
  v38 = *((_QWORD *)this + 75);
  v259 = *((_QWORD *)this + 74);
  v260 = v38;
  if (v38)
  {
    v39 = (unint64_t *)(v38 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = *(_QWORD *)(a2 + 141);
  *(_QWORD *)v252 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)&v252[5] = v41;
  v253 = 0;
  v255 = 0;
  v254 = 0;
  sub_20BDE1364(&v253, *(const void **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 3);
  if (SHIBYTE(v258) < 0)
  {
    if (*((_QWORD *)&v257 + 1))
      goto LABEL_159;
LABEL_161:
    if (v259)
      v42 = nullsub_7;
    else
      v42 = 0;
    goto LABEL_164;
  }
  if (!HIBYTE(v258))
    goto LABEL_161;
LABEL_159:
  v42 = 0;
LABEL_164:
  if (v42)
  {
    if (*(_DWORD *)&v252[8] == 127 || !*(_QWORD *)v252 && v254 == v253)
      v43 = 0;
    else
      v43 = nullsub_13;
    if (v43)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v256);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v256);
  }
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v256);
LABEL_176:
  v44 = (_QWORD *)(a2 + 40);
  if (*(_DWORD *)(a2 + 48) == 127 || !*v44 && *(_QWORD *)(a2 + 64) == *(_QWORD *)(a2 + 56))
    v45 = 0;
  else
    v45 = nullsub_10;
  if (v45)
  {
    if (*((char *)this + 1039) < 0)
    {
      if (!*((_QWORD *)this + 128))
        goto LABEL_186;
    }
    else if (!*((_BYTE *)this + 1039))
    {
LABEL_186:
      if (*((_QWORD *)this + 130))
        goto LABEL_188;
    }
    Alembic::AbcGeom::v12::ONuPatchSchema::createVelocityProperty(this);
  }
LABEL_188:
  v46 = *((unsigned __int8 *)this + 1039);
  if (*((char *)this + 1039) < 0)
  {
    if (*((_QWORD *)this + 128))
      goto LABEL_226;
  }
  else if (*((_BYTE *)this + 1039))
  {
    v47 = 0;
LABEL_227:
    v55 = 0;
    goto LABEL_228;
  }
  if (*((_QWORD *)this + 130))
    v48 = nullsub_7;
  else
    v48 = 0;
  if (!v48)
    goto LABEL_221;
  LODWORD(v247) = *((_DWORD *)this + 252);
  if ((v46 & 0x80) != 0)
  {
    sub_20BDDBFAC(&v248, *((void **)this + 127), *((_QWORD *)this + 128));
  }
  else
  {
    v248 = *(_OWORD *)((char *)this + 1016);
    v249 = *((_QWORD *)this + 129);
  }
  v49 = *((_QWORD *)this + 131);
  v250 = *((_QWORD *)this + 130);
  v251 = v49;
  if (v49)
  {
    v50 = (unint64_t *)(v49 + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = *(_QWORD *)(a2 + 45);
  *(_QWORD *)v243 = *v44;
  *(_QWORD *)&v243[5] = v52;
  v244 = 0;
  v246 = 0;
  v245 = 0;
  sub_20BDE1364(&v244, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  if (SHIBYTE(v249) < 0)
  {
    if (*((_QWORD *)&v248 + 1))
      goto LABEL_204;
LABEL_206:
    if (v250)
      v53 = nullsub_7;
    else
      v53 = 0;
    goto LABEL_209;
  }
  if (!HIBYTE(v249))
    goto LABEL_206;
LABEL_204:
  v53 = 0;
LABEL_209:
  if (v53)
  {
    if (*(_DWORD *)&v243[8] == 127 || !*(_QWORD *)v243 && v245 == v244)
      v54 = 0;
    else
      v54 = nullsub_10;
    if (v54)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v247);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v247);
  }
  if (v244)
  {
    v245 = v244;
    operator delete(v244);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v247);
  v46 = *((unsigned __int8 *)this + 1039);
LABEL_221:
  if ((v46 & 0x80) != 0)
  {
LABEL_226:
    v47 = 1;
    if (*((_QWORD *)this + 128))
      goto LABEL_227;
    goto LABEL_223;
  }
  v47 = 0;
  if (v46)
    goto LABEL_227;
LABEL_223:
  if (*((_QWORD *)this + 130))
    v55 = nullsub_7;
  else
    v55 = 0;
LABEL_228:
  if (!v55)
    goto LABEL_254;
  LODWORD(v238) = *((_DWORD *)this + 252);
  if ((v47 & 1) != 0)
  {
    sub_20BDDBFAC(&v239, *((void **)this + 127), *((_QWORD *)this + 128));
  }
  else
  {
    v239 = *(_OWORD *)((char *)this + 1016);
    v240 = *((_QWORD *)this + 129);
  }
  v56 = *((_QWORD *)this + 131);
  v241 = *((_QWORD *)this + 130);
  v242 = v56;
  if (v56)
  {
    v57 = (unint64_t *)(v56 + 8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  v59 = *(_QWORD *)(a2 + 45);
  *(_QWORD *)v234 = *v44;
  *(_QWORD *)&v234[5] = v59;
  v235 = 0;
  v237 = 0;
  v236 = 0;
  sub_20BDE1364(&v235, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  if (SHIBYTE(v240) < 0)
  {
    if (*((_QWORD *)&v239 + 1))
      goto LABEL_237;
LABEL_239:
    if (v241)
      v60 = nullsub_7;
    else
      v60 = 0;
    goto LABEL_242;
  }
  if (!HIBYTE(v240))
    goto LABEL_239;
LABEL_237:
  v60 = 0;
LABEL_242:
  if (v60)
  {
    if (*(_DWORD *)&v234[8] == 127 || !*(_QWORD *)v234 && v236 == v235)
      v61 = 0;
    else
      v61 = nullsub_10;
    if (v61)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v238);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v238);
  }
  if (v235)
  {
    v236 = v235;
    operator delete(v235);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v238);
LABEL_254:
  if (*(_DWORD *)(a2 + 312) == 127 || !*(_QWORD *)(a2 + 304) && *(_QWORD *)(a2 + 328) == *(_QWORD *)(a2 + 320))
    v62 = 0;
  else
    v62 = nullsub_8;
  if (v62)
    v63 = nullsub_11;
  else
    v63 = 0;
  if (v63 && (sub_20BE296FC((uint64_t)this + 832) & 1) == 0)
    Alembic::AbcGeom::v12::ONuPatchSchema::createUVsProperty((uint64_t)this, a2);
  v64 = sub_20BE296FC((uint64_t)this + 832);
  v65 = nullsub_16;
  if (!v64)
    v65 = 0;
  if (v65)
    sub_20BE2717C((uint64_t)this + 832, a2 + 304);
  if (*(_DWORD *)(a2 + 224) == 127 || !*(_QWORD *)(a2 + 216) && *(_QWORD *)(a2 + 240) == *(_QWORD *)(a2 + 232))
    v66 = 0;
  else
    v66 = nullsub_9;
  if (v66)
    v67 = nullsub_12;
  else
    v67 = 0;
  if (v67 && (sub_20BE296FC((uint64_t)this + 656) & 1) == 0)
    Alembic::AbcGeom::v12::ONuPatchSchema::createNormalsProperty((uint64_t)this, a2);
  v68 = sub_20BE296FC((uint64_t)this + 656);
  v69 = nullsub_17;
  if (!v68)
    v69 = 0;
  if (v69)
    sub_20BE27540((uint64_t)this + 656, a2 + 216);
  v70 = (_QWORD *)(a2 + 176);
  if (*(_DWORD *)(a2 + 184) == 127 || !*v70 && *(_QWORD *)(a2 + 200) == *(_QWORD *)(a2 + 192))
    v71 = 0;
  else
    v71 = nullsub_13;
  if (v71)
  {
    if (*((char *)this + 639) < 0)
    {
      if (!*((_QWORD *)this + 78))
        goto LABEL_294;
    }
    else if (!*((_BYTE *)this + 639))
    {
LABEL_294:
      if (*((_QWORD *)this + 80))
        goto LABEL_296;
    }
    Alembic::AbcGeom::v12::ONuPatchSchema::createPositionWeightsProperty(this);
  }
LABEL_296:
  v72 = *((char *)this + 639);
  if (v72 < 0)
  {
    if (*((_QWORD *)this + 78))
      goto LABEL_329;
  }
  else if (*((_BYTE *)this + 639))
  {
    goto LABEL_329;
  }
  if (*((_QWORD *)this + 80))
    v73 = nullsub_7;
  else
    v73 = 0;
  if (v73)
  {
    LODWORD(v229) = *((_DWORD *)this + 152);
    if (v72 < 0)
    {
      sub_20BDDBFAC(&v230, *((void **)this + 77), *((_QWORD *)this + 78));
    }
    else
    {
      v230 = *(_OWORD *)((char *)this + 616);
      v231 = *((_QWORD *)this + 79);
    }
    v74 = *((_QWORD *)this + 81);
    v232 = *((_QWORD *)this + 80);
    v233 = v74;
    if (v74)
    {
      v75 = (unint64_t *)(v74 + 8);
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    v77 = *(_QWORD *)(a2 + 181);
    *(_QWORD *)v225 = *v70;
    *(_QWORD *)&v225[5] = v77;
    v226 = 0;
    v228 = 0;
    v227 = 0;
    sub_20BDE1364(&v226, *(const void **)(a2 + 192), *(_QWORD *)(a2 + 200), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
    if (SHIBYTE(v231) < 0)
    {
      if (*((_QWORD *)&v230 + 1))
        goto LABEL_312;
    }
    else if (HIBYTE(v231))
    {
LABEL_312:
      v78 = 0;
LABEL_317:
      if (v78)
      {
        if (*(_DWORD *)&v225[8] == 127 || !*(_QWORD *)v225 && v227 == v226)
          v79 = 0;
        else
          v79 = nullsub_13;
        if (v79)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v229);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v229);
      }
      if (v226)
      {
        v227 = v226;
        operator delete(v226);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v229);
      goto LABEL_329;
    }
    if (v232)
      v78 = nullsub_7;
    else
      v78 = 0;
    goto LABEL_317;
  }
LABEL_329:
  if (!*(_BYTE *)(a2 + 760))
    goto LABEL_336;
  if (*((char *)this + 1087) < 0)
  {
    if (!*((_QWORD *)this + 134))
      goto LABEL_334;
  }
  else if (!*((_BYTE *)this + 1087))
  {
LABEL_334:
    if (*((_QWORD *)this + 136))
      goto LABEL_336;
  }
  Alembic::AbcGeom::v12::ONuPatchSchema::createTrimPropreties(this);
LABEL_336:
  v80 = *((char *)this + 1087);
  if (v80 < 0)
  {
    if (*((_QWORD *)this + 134))
      goto LABEL_575;
  }
  else if (*((_BYTE *)this + 1087))
  {
    goto LABEL_575;
  }
  if (*((_QWORD *)this + 136))
    v81 = nullsub_6;
  else
    v81 = 0;
  if (v81)
  {
    LODWORD(v220) = *((_DWORD *)this + 264);
    if (v80 < 0)
    {
      sub_20BDDBFAC(&v221, *((void **)this + 133), *((_QWORD *)this + 134));
    }
    else
    {
      v221 = *(_OWORD *)((char *)this + 1064);
      v222 = *((_QWORD *)this + 135);
    }
    v82 = *((_QWORD *)this + 137);
    v223 = *((_QWORD *)this + 136);
    v224 = v82;
    if (v82)
    {
      v83 = (unint64_t *)(v82 + 8);
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
    v85 = *(_DWORD *)(a2 + 392);
    v290[0] = v85;
    if (SHIBYTE(v222) < 0)
    {
      if (*((_QWORD *)&v221 + 1))
        goto LABEL_358;
    }
    else if (HIBYTE(v222))
    {
      goto LABEL_358;
    }
    if (v223)
    {
      if (v85 == -536870912)
        Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v220);
      else
        Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v220, v290);
    }
LABEL_358:
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v220);
    LODWORD(v215) = *((_DWORD *)this + 276);
    if (*((char *)this + 1135) < 0)
    {
      sub_20BDDBFAC(&v216, *((void **)this + 139), *((_QWORD *)this + 140));
    }
    else
    {
      v216 = *(_OWORD *)((char *)this + 1112);
      v217 = *((_QWORD *)this + 141);
    }
    v86 = *((_QWORD *)this + 143);
    v218 = *((_QWORD *)this + 142);
    v219 = v86;
    if (v86)
    {
      v87 = (unint64_t *)(v86 + 8);
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    v89 = *(_QWORD *)(a2 + 405);
    *(_QWORD *)v211 = *(_QWORD *)(a2 + 400);
    *(_QWORD *)&v211[5] = v89;
    v212 = 0;
    v214 = 0;
    v213 = 0;
    sub_20BDE1364(&v212, *(const void **)(a2 + 416), *(_QWORD *)(a2 + 424), (uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 3);
    if (SHIBYTE(v217) < 0)
    {
      if (*((_QWORD *)&v216 + 1))
        goto LABEL_366;
    }
    else if (HIBYTE(v217))
    {
LABEL_366:
      v90 = 0;
      goto LABEL_371;
    }
    if (v218)
      v90 = nullsub_7;
    else
      v90 = 0;
LABEL_371:
    if (v90)
    {
      if (*(_DWORD *)&v211[8] == 127 || !*(_QWORD *)v211 && v213 == v212)
        v91 = 0;
      else
        v91 = nullsub_20;
      if (v91)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v215);
      else
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v215);
    }
    if (v212)
    {
      v213 = v212;
      operator delete(v212);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v215);
    LODWORD(v206) = *((_DWORD *)this + 288);
    if (*((char *)this + 1183) < 0)
    {
      sub_20BDDBFAC(&v207, *((void **)this + 145), *((_QWORD *)this + 146));
    }
    else
    {
      v207 = *(_OWORD *)((char *)this + 1160);
      v208 = *((_QWORD *)this + 147);
    }
    v92 = *((_QWORD *)this + 149);
    v209 = *((_QWORD *)this + 148);
    v210 = v92;
    if (v92)
    {
      v93 = (unint64_t *)(v92 + 8);
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
    }
    v95 = *(_QWORD *)(a2 + 445);
    *(_QWORD *)v202 = *(_QWORD *)(a2 + 440);
    *(_QWORD *)&v202[5] = v95;
    v203 = 0;
    v205 = 0;
    v204 = 0;
    sub_20BDE1364(&v203, *(const void **)(a2 + 456), *(_QWORD *)(a2 + 464), (uint64_t)(*(_QWORD *)(a2 + 464) - *(_QWORD *)(a2 + 456)) >> 3);
    if (SHIBYTE(v208) < 0)
    {
      if (*((_QWORD *)&v207 + 1))
        goto LABEL_390;
    }
    else if (HIBYTE(v208))
    {
LABEL_390:
      v96 = 0;
      goto LABEL_395;
    }
    if (v209)
      v96 = nullsub_7;
    else
      v96 = 0;
LABEL_395:
    if (v96)
    {
      if (*(_DWORD *)&v202[8] == 127 || !*(_QWORD *)v202 && v204 == v203)
        v97 = 0;
      else
        v97 = nullsub_20;
      if (v97)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v206);
      else
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v206);
    }
    if (v203)
    {
      v204 = v203;
      operator delete(v203);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v206);
    LODWORD(v197) = *((_DWORD *)this + 300);
    if (*((char *)this + 1231) < 0)
    {
      sub_20BDDBFAC(&v198, *((void **)this + 151), *((_QWORD *)this + 152));
    }
    else
    {
      v198 = *(_OWORD *)((char *)this + 1208);
      v199 = *((_QWORD *)this + 153);
    }
    v98 = *((_QWORD *)this + 155);
    v200 = *((_QWORD *)this + 154);
    v201 = v98;
    if (v98)
    {
      v99 = (unint64_t *)(v98 + 8);
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    v101 = *(_QWORD *)(a2 + 485);
    *(_QWORD *)v193 = *(_QWORD *)(a2 + 480);
    *(_QWORD *)&v193[5] = v101;
    v194 = 0;
    v196 = 0;
    v195 = 0;
    sub_20BDE1364(&v194, *(const void **)(a2 + 496), *(_QWORD *)(a2 + 504), (uint64_t)(*(_QWORD *)(a2 + 504) - *(_QWORD *)(a2 + 496)) >> 3);
    if (SHIBYTE(v199) < 0)
    {
      if (*((_QWORD *)&v198 + 1))
        goto LABEL_414;
    }
    else if (HIBYTE(v199))
    {
LABEL_414:
      v102 = 0;
      goto LABEL_419;
    }
    if (v200)
      v102 = nullsub_7;
    else
      v102 = 0;
LABEL_419:
    if (v102)
    {
      if (*(_DWORD *)&v193[8] == 127 || !*(_QWORD *)v193 && v195 == v194)
        v103 = 0;
      else
        v103 = nullsub_20;
      if (v103)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v197);
      else
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v197);
    }
    if (v194)
    {
      v195 = v194;
      operator delete(v194);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v197);
    LODWORD(v188) = *((_DWORD *)this + 312);
    if (*((char *)this + 1279) < 0)
    {
      sub_20BDDBFAC(&v189, *((void **)this + 157), *((_QWORD *)this + 158));
    }
    else
    {
      v189 = *(_OWORD *)((char *)this + 1256);
      v190 = *((_QWORD *)this + 159);
    }
    v104 = *((_QWORD *)this + 161);
    v191 = *((_QWORD *)this + 160);
    v192 = v104;
    if (v104)
    {
      v105 = (unint64_t *)(v104 + 8);
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
    }
    v107 = *(_QWORD *)(a2 + 525);
    *(_QWORD *)v184 = *(_QWORD *)(a2 + 520);
    *(_QWORD *)&v184[5] = v107;
    v185 = 0;
    v186 = 0;
    v187 = 0;
    sub_20BDE1364(&v185, *(const void **)(a2 + 536), *(_QWORD *)(a2 + 544), (uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
    if (SHIBYTE(v190) < 0)
    {
      if (*((_QWORD *)&v189 + 1))
        goto LABEL_438;
    }
    else if (HIBYTE(v190))
    {
LABEL_438:
      v108 = 0;
      goto LABEL_443;
    }
    if (v191)
      v108 = nullsub_7;
    else
      v108 = 0;
LABEL_443:
    if (v108)
    {
      if (*(_DWORD *)&v184[8] == 127 || !*(_QWORD *)v184 && v186 == v185)
        v109 = 0;
      else
        v109 = nullsub_13;
      if (v109)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v188);
      else
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v188);
    }
    if (v185)
    {
      v186 = v185;
      operator delete(v185);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v188);
    LODWORD(v179) = *((_DWORD *)this + 324);
    if (*((char *)this + 1327) < 0)
    {
      sub_20BDDBFAC(&v180, *((void **)this + 163), *((_QWORD *)this + 164));
    }
    else
    {
      v180 = *(_OWORD *)((char *)this + 1304);
      v181 = *((_QWORD *)this + 165);
    }
    v110 = *((_QWORD *)this + 167);
    v182 = *((_QWORD *)this + 166);
    v183 = v110;
    if (v110)
    {
      v111 = (unint64_t *)(v110 + 8);
      do
        v112 = __ldxr(v111);
      while (__stxr(v112 + 1, v111));
    }
    v113 = *(_QWORD *)(a2 + 565);
    *(_QWORD *)v175 = *(_QWORD *)(a2 + 560);
    *(_QWORD *)&v175[5] = v113;
    v176 = 0;
    v177 = 0;
    v178 = 0;
    sub_20BDE1364(&v176, *(const void **)(a2 + 576), *(_QWORD *)(a2 + 584), (uint64_t)(*(_QWORD *)(a2 + 584) - *(_QWORD *)(a2 + 576)) >> 3);
    if (SHIBYTE(v181) < 0)
    {
      if (*((_QWORD *)&v180 + 1))
        goto LABEL_462;
    }
    else if (HIBYTE(v181))
    {
LABEL_462:
      v114 = 0;
      goto LABEL_467;
    }
    if (v182)
      v114 = nullsub_7;
    else
      v114 = 0;
LABEL_467:
    if (v114)
    {
      if (*(_DWORD *)&v175[8] == 127 || !*(_QWORD *)v175 && v177 == v176)
        v115 = 0;
      else
        v115 = nullsub_13;
      if (v115)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v179);
      else
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v179);
    }
    if (v176)
    {
      v177 = v176;
      operator delete(v176);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v179);
    LODWORD(v170) = *((_DWORD *)this + 336);
    if (*((char *)this + 1375) < 0)
    {
      sub_20BDDBFAC(&v171, *((void **)this + 169), *((_QWORD *)this + 170));
    }
    else
    {
      v171 = *(_OWORD *)((char *)this + 1352);
      v172 = *((_QWORD *)this + 171);
    }
    v116 = *((_QWORD *)this + 173);
    v173 = *((_QWORD *)this + 172);
    v174 = v116;
    if (v116)
    {
      v117 = (unint64_t *)(v116 + 8);
      do
        v118 = __ldxr(v117);
      while (__stxr(v118 + 1, v117));
    }
    v119 = *(_QWORD *)(a2 + 605);
    *(_QWORD *)v166 = *(_QWORD *)(a2 + 600);
    *(_QWORD *)&v166[5] = v119;
    v167 = 0;
    v168 = 0;
    v169 = 0;
    sub_20BDE1364(&v167, *(const void **)(a2 + 616), *(_QWORD *)(a2 + 624), (uint64_t)(*(_QWORD *)(a2 + 624) - *(_QWORD *)(a2 + 616)) >> 3);
    if (SHIBYTE(v172) < 0)
    {
      if (*((_QWORD *)&v171 + 1))
        goto LABEL_486;
    }
    else if (HIBYTE(v172))
    {
LABEL_486:
      v120 = 0;
      goto LABEL_491;
    }
    if (v173)
      v120 = nullsub_7;
    else
      v120 = 0;
LABEL_491:
    if (v120)
    {
      if (*(_DWORD *)&v166[8] == 127 || !*(_QWORD *)v166 && v168 == v167)
        v121 = 0;
      else
        v121 = nullsub_13;
      if (v121)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v170);
      else
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v170);
    }
    if (v167)
    {
      v168 = v167;
      operator delete(v167);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v170);
    LODWORD(v161) = *((_DWORD *)this + 348);
    if (*((char *)this + 1423) < 0)
    {
      sub_20BDDBFAC(&v162, *((void **)this + 175), *((_QWORD *)this + 176));
    }
    else
    {
      v162 = *(_OWORD *)((char *)this + 1400);
      v163 = *((_QWORD *)this + 177);
    }
    v122 = *((_QWORD *)this + 179);
    v164 = *((_QWORD *)this + 178);
    v165 = v122;
    if (v122)
    {
      v123 = (unint64_t *)(v122 + 8);
      do
        v124 = __ldxr(v123);
      while (__stxr(v124 + 1, v123));
    }
    v125 = *(_QWORD *)(a2 + 645);
    *(_QWORD *)v157 = *(_QWORD *)(a2 + 640);
    *(_QWORD *)&v157[5] = v125;
    v158 = 0;
    v159 = 0;
    v160 = 0;
    sub_20BDE1364(&v158, *(const void **)(a2 + 656), *(_QWORD *)(a2 + 664), (uint64_t)(*(_QWORD *)(a2 + 664) - *(_QWORD *)(a2 + 656)) >> 3);
    if (SHIBYTE(v163) < 0)
    {
      if (*((_QWORD *)&v162 + 1))
        goto LABEL_510;
    }
    else if (HIBYTE(v163))
    {
LABEL_510:
      v126 = 0;
      goto LABEL_515;
    }
    if (v164)
      v126 = nullsub_7;
    else
      v126 = 0;
LABEL_515:
    if (v126)
    {
      if (*(_DWORD *)&v157[8] == 127 || !*(_QWORD *)v157 && v159 == v158)
        v127 = 0;
      else
        v127 = nullsub_13;
      if (v127)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v161);
      else
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v161);
    }
    if (v158)
    {
      v159 = v158;
      operator delete(v158);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v161);
    LODWORD(v152) = *((_DWORD *)this + 360);
    if (*((char *)this + 1471) < 0)
    {
      sub_20BDDBFAC(&v153, *((void **)this + 181), *((_QWORD *)this + 182));
    }
    else
    {
      v153 = *(_OWORD *)((char *)this + 1448);
      v154 = *((_QWORD *)this + 183);
    }
    v128 = *((_QWORD *)this + 185);
    v155 = *((_QWORD *)this + 184);
    v156 = v128;
    if (v128)
    {
      v129 = (unint64_t *)(v128 + 8);
      do
        v130 = __ldxr(v129);
      while (__stxr(v130 + 1, v129));
    }
    v131 = *(_QWORD *)(a2 + 685);
    *(_QWORD *)v148 = *(_QWORD *)(a2 + 680);
    *(_QWORD *)&v148[5] = v131;
    v149 = 0;
    v150 = 0;
    v151 = 0;
    sub_20BDE1364(&v149, *(const void **)(a2 + 696), *(_QWORD *)(a2 + 704), (uint64_t)(*(_QWORD *)(a2 + 704) - *(_QWORD *)(a2 + 696)) >> 3);
    if (SHIBYTE(v154) < 0)
    {
      if (*((_QWORD *)&v153 + 1))
        goto LABEL_534;
    }
    else if (HIBYTE(v154))
    {
LABEL_534:
      v132 = 0;
      goto LABEL_539;
    }
    if (v155)
      v132 = nullsub_7;
    else
      v132 = 0;
LABEL_539:
    if (v132)
    {
      if (*(_DWORD *)&v148[8] == 127 || !*(_QWORD *)v148 && v150 == v149)
        v133 = 0;
      else
        v133 = nullsub_13;
      if (v133)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v152);
      else
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v152);
    }
    if (v149)
    {
      v150 = v149;
      operator delete(v149);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v152);
    LODWORD(v143) = *((_DWORD *)this + 372);
    if (*((char *)this + 1519) < 0)
    {
      sub_20BDDBFAC(&v144, *((void **)this + 187), *((_QWORD *)this + 188));
    }
    else
    {
      v144 = *(_OWORD *)((char *)this + 1496);
      v145 = *((_QWORD *)this + 189);
    }
    v134 = *((_QWORD *)this + 191);
    v146 = *((_QWORD *)this + 190);
    v147 = v134;
    if (v134)
    {
      v135 = (unint64_t *)(v134 + 8);
      do
        v136 = __ldxr(v135);
      while (__stxr(v136 + 1, v135));
    }
    *(_QWORD *)v139 = *(_QWORD *)(a2 + 720);
    *(_QWORD *)&v139[5] = *(_QWORD *)(a2 + 725);
    v140 = 0;
    v141 = 0;
    v142 = 0;
    sub_20BDE1364(&v140, *(const void **)(a2 + 736), *(_QWORD *)(a2 + 744), (uint64_t)(*(_QWORD *)(a2 + 744) - *(_QWORD *)(a2 + 736)) >> 3);
    if (SHIBYTE(v145) < 0)
    {
      if (*((_QWORD *)&v144 + 1))
        goto LABEL_558;
    }
    else if (HIBYTE(v145))
    {
LABEL_558:
      v137 = 0;
LABEL_563:
      if (v137)
      {
        if (*(_DWORD *)&v139[8] == 127 || !*(_QWORD *)v139 && v141 == v140)
          v138 = 0;
        else
          v138 = nullsub_13;
        if (v138)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v143);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v143);
      }
      if (v140)
      {
        v141 = v140;
        operator delete(v140);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v143);
      goto LABEL_575;
    }
    if (v146)
      v137 = nullsub_7;
    else
      v137 = 0;
    goto LABEL_563;
  }
LABEL_575:
  ++*((_QWORD *)this + 32);
}

void sub_20BE3BEE4(void *a1, int a2)
{
  uint64_t v2;
  void *v5;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)&STACK[0x320]);
  v5 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v2 - 64, (uint64_t)v5);
  else
    sub_20BE02504(v2 - 64, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE3BECCLL);
}

void sub_20BE3C210(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::ONuPatchSchema::createVelocityProperty(Alembic::AbcGeom::v12::ONuPatchSchema *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  int v17;
  void *__p;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v23;
  std::string v24;
  uint64_t v25;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v21 = *((_QWORD *)this + 5);
  v22 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(&__p, ".velocities");
  v5 = *((_QWORD *)this + 33);
  LODWORD(v16) = 2;
  v17 = v5;
  LODWORD(v14) = 0;
  v15 = 0;
  LODWORD(v12) = 0;
  v13 = 0;
  LODWORD(v10) = 0;
  v11 = 0;
  sub_20BE2A6A0((uint64_t)&v23, &v21, (uint64_t)&__p, &v16, &v14, &v12, &v10);
  *((_DWORD *)this + 252) = (_DWORD)v23;
  std::string::operator=((std::string *)((char *)this + 1016), &v24);
  sub_20BDE881C((_QWORD *)this + 130, &v25);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v23);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  v6 = v22;
  if (v22)
  {
    v7 = (unint64_t *)&v22->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_20BE29E5C(&v23, (uint64_t *)&__p);
  if (*((_QWORD *)this + 32))
  {
    v9 = 0;
    do
    {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1008);
      ++v9;
    }
    while (v9 < *((_QWORD *)this + 32));
  }
  if (v24.__r_.__value_.__l.__size_)
  {
    v24.__r_.__value_.__r.__words[2] = v24.__r_.__value_.__l.__size_;
    operator delete((void *)v24.__r_.__value_.__l.__size_);
  }
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
}

void sub_20BE3C3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::ONuPatchSchema::createUVsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t *v29;
  int v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  void *__dst[2];
  void *v38;
  _BYTE *v39;
  std::string v40;
  void *__p;
  _BYTE *v42;
  void *v43;
  std::string v44;
  uint64_t v45[2];
  uint64_t v46;
  int v47;
  std::string v48;
  uint64_t v49[2];
  uint64_t *v50;
  uint64_t *v51;
  void *v52;
  void *v53;
  _BYTE v54[13];
  _BYTE *v55;
  _BYTE *v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[24];
  void *v60;
  void *v61;
  uint64_t v62;
  int data;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;

  v67 = 0;
  v68 = 0;
  v69 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  *(_QWORD *)&v57 = 0;
  *((_QWORD *)&v57 + 1) = 0x20000000ALL;
  v58 = 0u;
  *(_OWORD *)v59 = 0u;
  *(_QWORD *)&v59[16] = 0x100000005;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  data = 127;
  if (*(_DWORD *)(a2 + 352) == 127 || !*(_QWORD *)(a2 + 344) && *(_QWORD *)(a2 + 368) == *(_QWORD *)(a2 + 360))
    v4 = 0;
  else
    v4 = nullsub_21;
  if (v4)
  {
    sub_20BE2ACE4(v54, (uint64_t *)&v67);
    sub_20BE2AD84(&v50, (uint64_t *)&v64);
    sub_20BE2AE24((uint64_t)__dst, (uint64_t *)v54, (uint64_t *)&v50, *(_DWORD *)(a2 + 384));
    *(void **)&v57 = __dst[0];
    *(void **)((char *)&v57 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v58, (char *)v38, (uint64_t)v39, (v39 - (_BYTE *)v38) >> 3);
    *(_QWORD *)&v59[8] = v40.__r_.__value_.__l.__size_;
    *(_QWORD *)&v59[13] = *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v60, (char *)__p, (uint64_t)v42, (v42 - (_BYTE *)__p) >> 3);
    data = (int)v44.__r_.__value_.__l.__data_;
    if (__p)
    {
      v42 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    if (v52)
    {
      v53 = v52;
      operator delete(v52);
    }
    if (v55)
    {
      v56 = v55;
      operator delete(v55);
    }
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    v35 = *(uint64_t **)(a1 + 40);
    v36 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    sub_20BDDC0E4(v54, "uv");
    v8 = data;
    sub_20BE3F210(a1, &v33);
    LODWORD(v50) = 4;
    v51 = &v33;
    LODWORD(v31) = 0;
    v32 = 0;
    LODWORD(v29) = 0;
    v30 = 0;
    sub_20BE2AED4((char *)__dst, &v35, (uint64_t)v54, 1, v8, 1, &v50, &v31, &v29);
    v9 = (void **)(a1 + 832);
    if (*(char *)(a1 + 855) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 848) = v38;
    HIBYTE(v38) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 856) = (_DWORD)v39;
    std::string::operator=((std::string *)(a1 + 864), &v40);
    sub_20BDE881C((_QWORD *)(a1 + 888), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 904) = (_DWORD)v43;
    std::string::operator=((std::string *)(a1 + 912), &v44);
    sub_20BDE881C((_QWORD *)(a1 + 936), v45);
    *(_QWORD *)(a1 + 952) = v46;
    *(_DWORD *)(a1 + 960) = v47;
    std::string::operator=((std::string *)(a1 + 968), &v48);
    sub_20BDE881C((_QWORD *)(a1 + 992), v49);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v47);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v43);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v39);
    if (SHIBYTE(v38) < 0)
      operator delete(__dst[0]);
    v10 = v34;
    if (v34)
    {
      v11 = (unint64_t *)&v34->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (SHIBYTE(v55) < 0)
      operator delete(*(void **)v54);
    v13 = v36;
    if (v36)
    {
      v14 = (unint64_t *)&v36->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      goto LABEL_56;
    }
  }
  else
  {
    sub_20BE2ACE4(v54, (uint64_t *)&v67);
    v16 = *(_DWORD *)(a2 + 384);
    __dst[0] = *(void **)v54;
    *(void **)((char *)__dst + 5) = *(void **)&v54[5];
    v38 = 0;
    v39 = 0;
    v40.__r_.__value_.__r.__words[0] = 0;
    sub_20BDE1364(&v38, v55, (uint64_t)v56, (v56 - v55) >> 3);
    v40.__r_.__value_.__l.__size_ = 0;
    v40.__r_.__value_.__r.__words[2] = 0x100000005;
    v42 = 0;
    v43 = 0;
    __p = 0;
    LODWORD(v44.__r_.__value_.__l.__data_) = v16;
    *(void **)&v57 = __dst[0];
    *(void **)((char *)&v57 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v58, (char *)v38, (uint64_t)v39, (v39 - (_BYTE *)v38) >> 3);
    *(_QWORD *)&v59[8] = v40.__r_.__value_.__l.__size_;
    *(_QWORD *)&v59[13] = *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v60, (char *)__p, (uint64_t)v42, (v42 - (_BYTE *)__p) >> 3);
    data = (int)v44.__r_.__value_.__l.__data_;
    if (__p)
    {
      v42 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    if (v55)
    {
      v56 = v55;
      operator delete(v55);
    }
    v17 = *(std::__shared_weak_count **)(a1 + 48);
    v27 = *(uint64_t **)(a1 + 40);
    v28 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    sub_20BDDC0E4(v54, "uv");
    v20 = data;
    sub_20BE3F210(a1, &v33);
    LODWORD(v50) = 4;
    v51 = &v33;
    LODWORD(v31) = 0;
    v32 = 0;
    LODWORD(v29) = 0;
    v30 = 0;
    sub_20BE2AED4((char *)__dst, &v27, (uint64_t)v54, 0, v20, 1, &v50, &v31, &v29);
    v21 = (void **)(a1 + 832);
    if (*(char *)(a1 + 855) < 0)
      operator delete(*v21);
    *(_OWORD *)v21 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 848) = v38;
    HIBYTE(v38) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 856) = (_DWORD)v39;
    std::string::operator=((std::string *)(a1 + 864), &v40);
    sub_20BDE881C((_QWORD *)(a1 + 888), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 904) = (_DWORD)v43;
    std::string::operator=((std::string *)(a1 + 912), &v44);
    sub_20BDE881C((_QWORD *)(a1 + 936), v45);
    *(_QWORD *)(a1 + 952) = v46;
    *(_DWORD *)(a1 + 960) = v47;
    std::string::operator=((std::string *)(a1 + 968), &v48);
    sub_20BDE881C((_QWORD *)(a1 + 992), v49);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v47);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v43);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v39);
    if (SHIBYTE(v38) < 0)
      operator delete(__dst[0]);
    v22 = v34;
    if (v34)
    {
      v23 = (unint64_t *)&v34->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (SHIBYTE(v55) < 0)
      operator delete(*(void **)v54);
    v13 = v28;
    if (v28)
    {
      v25 = (unint64_t *)&v28->__shared_owners_;
      do
        v15 = __ldaxr(v25);
      while (__stlxr(v15 - 1, v25));
LABEL_56:
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  if (*(_QWORD *)(a1 + 256))
  {
    v26 = 0;
    do
    {
      sub_20BE2717C(a1 + 832, (uint64_t)&v57);
      ++v26;
    }
    while (v26 < *(_QWORD *)(a1 + 256));
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if ((_QWORD)v58)
  {
    *((_QWORD *)&v58 + 1) = v58;
    operator delete((void *)v58);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
}

void sub_20BE3CA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  uint64_t v45;
  void *v47;
  void *v48;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a16);
  if (*(char *)(v45 - 217) < 0)
    operator delete(*(void **)(v45 - 240));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  sub_20BE28D2C((_QWORD *)(v45 - 200));
  v47 = *(void **)(v45 - 112);
  if (v47)
  {
    *(_QWORD *)(v45 - 104) = v47;
    operator delete(v47);
  }
  v48 = *(void **)(v45 - 88);
  if (v48)
  {
    *(_QWORD *)(v45 - 80) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::ONuPatchSchema::createNormalsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t *v29;
  int v30;
  uint64_t *v31;
  int v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  void *__dst[2];
  void *v36;
  _BYTE *v37;
  std::string v38;
  void *__p;
  _BYTE *v40;
  void *v41;
  std::string v42;
  uint64_t v43[2];
  uint64_t v44;
  int v45;
  std::string v46;
  uint64_t v47[2];
  uint64_t v48;
  std::__shared_weak_count *v49;
  void *v50;
  void *v51;
  uint64_t *v52;
  uint64_t *v53;
  void *v54;
  void *v55;
  _BYTE v56[13];
  _BYTE *v57;
  _BYTE *v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[24];
  void *v62;
  void *v63;
  uint64_t v64;
  int data;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;

  v69 = 0;
  v70 = 0;
  v71 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  *(_QWORD *)&v59 = 0;
  *((_QWORD *)&v59 + 1) = 0x30000000ALL;
  v60 = 0u;
  *(_OWORD *)v61 = 0u;
  *(_QWORD *)&v61[16] = 0x100000005;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  data = 127;
  if (*(_DWORD *)(a2 + 264) == 127 || !*(_QWORD *)(a2 + 256) && *(_QWORD *)(a2 + 280) == *(_QWORD *)(a2 + 272))
    v4 = 0;
  else
    v4 = nullsub_21;
  if (v4)
  {
    sub_20BE29E5C(&v52, (uint64_t *)&v69);
    sub_20BE2C884(v56, (uint64_t *)&v52);
    sub_20BE2AD84(&v48, (uint64_t *)&v66);
    sub_20BE2C9F0((uint64_t)__dst, (uint64_t *)v56, &v48, *(_DWORD *)(a2 + 296));
    *(void **)&v59 = __dst[0];
    *(void **)((char *)&v59 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v60, (char *)v36, (uint64_t)v37, (v37 - (_BYTE *)v36) >> 3);
    *(_QWORD *)&v61[8] = v38.__r_.__value_.__l.__size_;
    *(_QWORD *)&v61[13] = *(std::string::size_type *)((char *)&v38.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v62, (char *)__p, (uint64_t)v40, (v40 - (_BYTE *)__p) >> 3);
    data = (int)v42.__r_.__value_.__l.__data_;
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    if (v36)
    {
      v37 = v36;
      operator delete(v36);
    }
    if (v50)
    {
      v51 = v50;
      operator delete(v50);
    }
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    v33 = *(uint64_t **)(a1 + 40);
    v34 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    sub_20BDDC0E4(v56, "N");
    v8 = data;
    sub_20BE3F210(a1, &v48);
    LODWORD(v52) = 4;
    v53 = &v48;
    LODWORD(v31) = 0;
    v32 = 0;
    LODWORD(v29) = 0;
    v30 = 0;
    sub_20BE2CAA0((char *)__dst, &v33, (uint64_t)v56, 1, v8, 1, &v52, &v31, &v29);
    v9 = (void **)(a1 + 656);
    if (*(char *)(a1 + 679) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 672) = v36;
    HIBYTE(v36) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 680) = (_DWORD)v37;
    std::string::operator=((std::string *)(a1 + 688), &v38);
    sub_20BDE881C((_QWORD *)(a1 + 712), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 728) = (_DWORD)v41;
    std::string::operator=((std::string *)(a1 + 736), &v42);
    sub_20BDE881C((_QWORD *)(a1 + 760), v43);
    *(_QWORD *)(a1 + 776) = v44;
    *(_DWORD *)(a1 + 784) = v45;
    std::string::operator=((std::string *)(a1 + 792), &v46);
    sub_20BDE881C((_QWORD *)(a1 + 816), v47);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v45);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v41);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v37);
    if (SHIBYTE(v36) < 0)
      operator delete(__dst[0]);
    v10 = v49;
    if (v49)
    {
      v11 = (unint64_t *)&v49->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (SHIBYTE(v57) < 0)
      operator delete(*(void **)v56);
    v13 = v34;
    if (v34)
    {
      v14 = (unint64_t *)&v34->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      goto LABEL_60;
    }
  }
  else
  {
    sub_20BE29E5C(&v52, (uint64_t *)&v69);
    sub_20BE2C884(v56, (uint64_t *)&v52);
    v16 = *(_DWORD *)(a2 + 296);
    __dst[0] = *(void **)v56;
    *(void **)((char *)__dst + 5) = *(void **)&v56[5];
    v36 = 0;
    v37 = 0;
    v38.__r_.__value_.__r.__words[0] = 0;
    sub_20BDE1364(&v36, v57, (uint64_t)v58, (v58 - v57) >> 3);
    v38.__r_.__value_.__l.__size_ = 0;
    v38.__r_.__value_.__r.__words[2] = 0x100000005;
    v40 = 0;
    v41 = 0;
    __p = 0;
    LODWORD(v42.__r_.__value_.__l.__data_) = v16;
    *(void **)&v59 = __dst[0];
    *(void **)((char *)&v59 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v60, (char *)v36, (uint64_t)v37, (v37 - (_BYTE *)v36) >> 3);
    *(_QWORD *)&v61[8] = v38.__r_.__value_.__l.__size_;
    *(_QWORD *)&v61[13] = *(std::string::size_type *)((char *)&v38.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v62, (char *)__p, (uint64_t)v40, (v40 - (_BYTE *)__p) >> 3);
    data = (int)v42.__r_.__value_.__l.__data_;
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    if (v36)
    {
      v37 = v36;
      operator delete(v36);
    }
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    v17 = *(std::__shared_weak_count **)(a1 + 48);
    v27 = *(uint64_t **)(a1 + 40);
    v28 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    sub_20BDDC0E4(v56, "N");
    v20 = data;
    sub_20BE3F210(a1, &v48);
    LODWORD(v52) = 4;
    v53 = &v48;
    LODWORD(v31) = 0;
    v32 = 0;
    LODWORD(v29) = 0;
    v30 = 0;
    sub_20BE2CAA0((char *)__dst, &v27, (uint64_t)v56, 0, v20, 1, &v52, &v31, &v29);
    v21 = (void **)(a1 + 656);
    if (*(char *)(a1 + 679) < 0)
      operator delete(*v21);
    *(_OWORD *)v21 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 672) = v36;
    HIBYTE(v36) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 680) = (_DWORD)v37;
    std::string::operator=((std::string *)(a1 + 688), &v38);
    sub_20BDE881C((_QWORD *)(a1 + 712), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 728) = (_DWORD)v41;
    std::string::operator=((std::string *)(a1 + 736), &v42);
    sub_20BDE881C((_QWORD *)(a1 + 760), v43);
    *(_QWORD *)(a1 + 776) = v44;
    *(_DWORD *)(a1 + 784) = v45;
    std::string::operator=((std::string *)(a1 + 792), &v46);
    sub_20BDE881C((_QWORD *)(a1 + 816), v47);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v45);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v41);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v37);
    if (SHIBYTE(v36) < 0)
      operator delete(__dst[0]);
    v22 = v49;
    if (v49)
    {
      v23 = (unint64_t *)&v49->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (SHIBYTE(v57) < 0)
      operator delete(*(void **)v56);
    v13 = v28;
    if (v28)
    {
      v25 = (unint64_t *)&v28->__shared_owners_;
      do
        v15 = __ldaxr(v25);
      while (__stlxr(v15 - 1, v25));
LABEL_60:
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  if (*(_QWORD *)(a1 + 256))
  {
    v26 = 0;
    do
    {
      sub_20BE27540(a1 + 656, (uint64_t)&v59);
      ++v26;
    }
    while (v26 < *(_QWORD *)(a1 + 256));
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if ((_QWORD)v60)
  {
    *((_QWORD *)&v60 + 1) = v60;
    operator delete((void *)v60);
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
}

void sub_20BE3D24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  uint64_t v49;
  void *v51;
  void *v52;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a41);
  if (*(char *)(v49 - 217) < 0)
    operator delete(*(void **)(v49 - 240));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  sub_20BE28D2C((_QWORD *)(v49 - 200));
  v51 = *(void **)(v49 - 112);
  if (v51)
  {
    *(_QWORD *)(v49 - 104) = v51;
    operator delete(v51);
  }
  v52 = *(void **)(v49 - 88);
  if (v52)
  {
    *(_QWORD *)(v49 - 80) = v52;
    operator delete(v52);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::ONuPatchSchema::createPositionWeightsProperty(Alembic::AbcGeom::v12::ONuPatchSchema *this)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15[2];
  void *__p;
  void *v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  std::string v25;
  uint64_t v26;

  v19 = *((_DWORD *)this + 2);
  if (*((char *)this + 39) < 0)
  {
    sub_20BDDBFAC(&v20, *((void **)this + 2), *((_QWORD *)this + 3));
  }
  else
  {
    v20 = *((_OWORD *)this + 1);
    v21 = *((_QWORD *)this + 4);
  }
  v2 = *((_QWORD *)this + 6);
  v22 = *((_QWORD *)this + 5);
  v23 = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  sub_20BDDC0E4(&__p, "w");
  sub_20BE3F210((uint64_t)this, &v13);
  LODWORD(v15[0]) = 4;
  v15[1] = &v13;
  LODWORD(v11) = 0;
  v12 = 0;
  LODWORD(v9) = 0;
  v10 = 0;
  sub_20BE2F274((uint64_t)&v24, &v19, (uint64_t)&__p, v15, &v11, &v9);
  *((_DWORD *)this + 152) = (_DWORD)v24;
  std::string::operator=((std::string *)((char *)this + 616), &v25);
  sub_20BDE881C((_QWORD *)this + 80, &v26);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v24);
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v19);
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_20BE2DEC0(&v24, (uint64_t *)&__p);
  if (*((_QWORD *)this + 32))
  {
    v8 = 0;
    do
    {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 608);
      ++v8;
    }
    while (v8 < *((_QWORD *)this + 32));
  }
  if (v25.__r_.__value_.__l.__size_)
  {
    v25.__r_.__value_.__r.__words[2] = v25.__r_.__value_.__l.__size_;
    operator delete((void *)v25.__r_.__value_.__l.__size_);
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_20BE3D540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::ONuPatchSchema::createTrimPropreties(Alembic::AbcGeom::v12::ONuPatchSchema *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  Alembic::AbcGeom::v12::ONuPatchSchema *v56;
  unint64_t v57;
  char *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  char *v65;
  Alembic::Abc::v12::OScalarProperty *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t *v85;
  int v86;
  uint64_t *v87;
  int v88;
  uint64_t *v89;
  int v90;
  uint64_t *v91;
  uint64_t *v92;
  void *__p[2];
  char v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void *v97;
  std::string v98;
  uint64_t v99[2];
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  void *v103;
  void *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  uint64_t v110;
  void *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;

  v3 = *((_QWORD *)this + 5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v114 = v3;
  v115 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v111 = 0;
  v112 = 0;
  v113 = 0;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  sub_20BE2A600(&v105, (uint64_t *)&v111);
  sub_20BE2DEC0(&v102, (uint64_t *)&v108);
  sub_20BE3F210((uint64_t)this, &v100);
  v95 = v3;
  v96 = v2;
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20BDDC0E4(__p, "trim_nloops");
  LODWORD(v91) = 4;
  v92 = &v100;
  LODWORD(v89) = 0;
  v90 = 0;
  LODWORD(v87) = 0;
  v88 = 0;
  LODWORD(v85) = 0;
  v86 = 0;
  sub_20BE406D4((uint64_t)&v97, &v95, (uint64_t)__p, &v91, &v89, &v87, &v85);
  *((_DWORD *)this + 264) = (_DWORD)v97;
  std::string::operator=((std::string *)((char *)this + 1064), &v98);
  sub_20BDE881C((_QWORD *)this + 136, v99);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v97);
  if (v94 < 0)
    operator delete(__p[0]);
  v8 = v96;
  if (v96)
  {
    v9 = (unint64_t *)&v96->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v83 = v114;
  v84 = v115;
  if (v115)
  {
    v11 = (unint64_t *)&v115->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_20BDDC0E4(__p, "trim_ncurves");
  LODWORD(v91) = 4;
  v92 = &v100;
  LODWORD(v89) = 0;
  v90 = 0;
  LODWORD(v87) = 0;
  v88 = 0;
  LODWORD(v85) = 0;
  v86 = 0;
  sub_20BE2A074((uint64_t)&v97, &v83, (uint64_t)__p, &v91, &v89, &v87, &v85);
  *((_DWORD *)this + 276) = (_DWORD)v97;
  std::string::operator=((std::string *)((char *)this + 1112), &v98);
  sub_20BDE881C((_QWORD *)this + 142, v99);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v97);
  if (v94 < 0)
    operator delete(__p[0]);
  v13 = v84;
  if (v84)
  {
    v14 = (unint64_t *)&v84->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v81 = v114;
  v82 = v115;
  if (v115)
  {
    v16 = (unint64_t *)&v115->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  sub_20BDDC0E4(__p, "trim_n");
  LODWORD(v91) = 4;
  v92 = &v100;
  LODWORD(v89) = 0;
  v90 = 0;
  LODWORD(v87) = 0;
  v88 = 0;
  LODWORD(v85) = 0;
  v86 = 0;
  sub_20BE2A074((uint64_t)&v97, &v81, (uint64_t)__p, &v91, &v89, &v87, &v85);
  *((_DWORD *)this + 288) = (_DWORD)v97;
  std::string::operator=((std::string *)((char *)this + 1160), &v98);
  sub_20BDE881C((_QWORD *)this + 148, v99);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v97);
  if (v94 < 0)
    operator delete(__p[0]);
  v18 = v82;
  if (v82)
  {
    v19 = (unint64_t *)&v82->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v79 = v114;
  v80 = v115;
  if (v115)
  {
    v21 = (unint64_t *)&v115->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  sub_20BDDC0E4(__p, "trim_order");
  LODWORD(v91) = 4;
  v92 = &v100;
  LODWORD(v89) = 0;
  v90 = 0;
  LODWORD(v87) = 0;
  v88 = 0;
  LODWORD(v85) = 0;
  v86 = 0;
  sub_20BE2A074((uint64_t)&v97, &v79, (uint64_t)__p, &v91, &v89, &v87, &v85);
  *((_DWORD *)this + 300) = (_DWORD)v97;
  std::string::operator=((std::string *)((char *)this + 1208), &v98);
  sub_20BDE881C((_QWORD *)this + 154, v99);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v97);
  if (v94 < 0)
    operator delete(__p[0]);
  v23 = v80;
  if (v80)
  {
    v24 = (unint64_t *)&v80->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v77 = v114;
  v78 = v115;
  if (v115)
  {
    v26 = (unint64_t *)&v115->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  sub_20BDDC0E4(__p, "trim_knot");
  LODWORD(v91) = 4;
  v92 = &v100;
  LODWORD(v89) = 0;
  v90 = 0;
  LODWORD(v87) = 0;
  v88 = 0;
  LODWORD(v85) = 0;
  v86 = 0;
  sub_20BE2ECE8((uint64_t)&v97, &v77, (uint64_t)__p, &v91, &v89, &v87, &v85);
  *((_DWORD *)this + 312) = (_DWORD)v97;
  std::string::operator=((std::string *)((char *)this + 1256), &v98);
  sub_20BDE881C((_QWORD *)this + 160, v99);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v97);
  if (v94 < 0)
    operator delete(__p[0]);
  v28 = v78;
  if (v78)
  {
    v29 = (unint64_t *)&v78->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v75 = v114;
  v76 = v115;
  if (v115)
  {
    v31 = (unint64_t *)&v115->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  sub_20BDDC0E4(__p, "trim_min");
  LODWORD(v91) = 4;
  v92 = &v100;
  LODWORD(v89) = 0;
  v90 = 0;
  LODWORD(v87) = 0;
  v88 = 0;
  LODWORD(v85) = 0;
  v86 = 0;
  sub_20BE2ECE8((uint64_t)&v97, &v75, (uint64_t)__p, &v91, &v89, &v87, &v85);
  *((_DWORD *)this + 324) = (_DWORD)v97;
  std::string::operator=((std::string *)((char *)this + 1304), &v98);
  sub_20BDE881C((_QWORD *)this + 166, v99);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v97);
  if (v94 < 0)
    operator delete(__p[0]);
  v33 = v76;
  if (v76)
  {
    v34 = (unint64_t *)&v76->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v73 = v114;
  v74 = v115;
  if (v115)
  {
    v36 = (unint64_t *)&v115->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  sub_20BDDC0E4(__p, "trim_max");
  LODWORD(v91) = 4;
  v92 = &v100;
  LODWORD(v89) = 0;
  v90 = 0;
  LODWORD(v87) = 0;
  v88 = 0;
  LODWORD(v85) = 0;
  v86 = 0;
  sub_20BE2ECE8((uint64_t)&v97, &v73, (uint64_t)__p, &v91, &v89, &v87, &v85);
  *((_DWORD *)this + 336) = (_DWORD)v97;
  std::string::operator=((std::string *)((char *)this + 1352), &v98);
  sub_20BDE881C((_QWORD *)this + 172, v99);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v97);
  if (v94 < 0)
    operator delete(__p[0]);
  v38 = v74;
  if (v74)
  {
    v39 = (unint64_t *)&v74->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v71 = v114;
  v72 = v115;
  if (v115)
  {
    v41 = (unint64_t *)&v115->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  sub_20BDDC0E4(__p, "trim_u");
  LODWORD(v91) = 4;
  v92 = &v100;
  LODWORD(v89) = 0;
  v90 = 0;
  LODWORD(v87) = 0;
  v88 = 0;
  LODWORD(v85) = 0;
  v86 = 0;
  sub_20BE2ECE8((uint64_t)&v97, &v71, (uint64_t)__p, &v91, &v89, &v87, &v85);
  *((_DWORD *)this + 348) = (_DWORD)v97;
  std::string::operator=((std::string *)((char *)this + 1400), &v98);
  sub_20BDE881C((_QWORD *)this + 178, v99);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v97);
  if (v94 < 0)
    operator delete(__p[0]);
  v43 = v72;
  if (v72)
  {
    v44 = (unint64_t *)&v72->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v69 = v114;
  v70 = v115;
  if (v115)
  {
    v46 = (unint64_t *)&v115->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  sub_20BDDC0E4(__p, "trim_v");
  LODWORD(v91) = 4;
  v92 = &v100;
  LODWORD(v89) = 0;
  v90 = 0;
  LODWORD(v87) = 0;
  v88 = 0;
  LODWORD(v85) = 0;
  v86 = 0;
  sub_20BE2ECE8((uint64_t)&v97, &v69, (uint64_t)__p, &v91, &v89, &v87, &v85);
  *((_DWORD *)this + 360) = (_DWORD)v97;
  std::string::operator=((std::string *)((char *)this + 1448), &v98);
  sub_20BDE881C((_QWORD *)this + 184, v99);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v97);
  if (v94 < 0)
    operator delete(__p[0]);
  v48 = v70;
  if (v70)
  {
    v49 = (unint64_t *)&v70->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v67 = v114;
  v68 = v115;
  if (v115)
  {
    v51 = (unint64_t *)&v115->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  sub_20BDDC0E4(__p, "trim_w");
  LODWORD(v91) = 4;
  v92 = &v100;
  LODWORD(v89) = 0;
  v90 = 0;
  LODWORD(v87) = 0;
  v88 = 0;
  LODWORD(v85) = 0;
  v86 = 0;
  sub_20BE2ECE8((uint64_t)&v97, &v67, (uint64_t)__p, &v91, &v89, &v87, &v85);
  *((_DWORD *)this + 372) = (_DWORD)v97;
  std::string::operator=((std::string *)((char *)this + 1496), &v98);
  sub_20BDE881C((_QWORD *)this + 190, v99);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v97);
  if (v94 < 0)
    operator delete(__p[0]);
  v53 = v68;
  if (v68)
  {
    v54 = (unint64_t *)&v68->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (*((_QWORD *)this + 32))
  {
    v56 = this;
    v57 = 0;
    v65 = (char *)this + 1104;
    v66 = (Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1056);
    v58 = (char *)this + 1152;
    do
    {
      LODWORD(v97) = 0;
      Alembic::Abc::v12::OScalarProperty::set(v66, &v97);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v65);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v58);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v56 + 1200);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v56 + 1248);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v56 + 1296);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v56 + 1344);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v56 + 1392);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v56 + 1440);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v56 + 1488);
      ++v57;
    }
    while (v57 < *((_QWORD *)v56 + 32));
  }
  v59 = v101;
  if (v101)
  {
    v60 = (unint64_t *)&v101->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v103)
  {
    v104 = v103;
    operator delete(v103);
  }
  if (v106)
  {
    v107 = v106;
    operator delete(v106);
  }
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
  v62 = v115;
  if (v115)
  {
    v63 = (unint64_t *)&v115->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
}

void sub_20BE3E12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,void *a45)
{
  uint64_t v45;
  void *v47;
  void *v48;
  void *v49;
  void *v50;

  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&a45);
  if (a42 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v45 - 248));
  v47 = *(void **)(v45 - 216);
  if (v47)
  {
    *(_QWORD *)(v45 - 208) = v47;
    operator delete(v47);
  }
  v48 = *(void **)(v45 - 176);
  if (v48)
  {
    *(_QWORD *)(v45 - 168) = v48;
    operator delete(v48);
  }
  v49 = *(void **)(v45 - 152);
  if (v49)
  {
    *(_QWORD *)(v45 - 144) = v49;
    operator delete(v49);
  }
  v50 = *(void **)(v45 - 128);
  if (v50)
  {
    *(_QWORD *)(v45 - 120) = v50;
    operator delete(v50);
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v45 - 104));
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::ONuPatchSchema::createPositionProperties(Alembic::AbcGeom::v12::ONuPatchSchema *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p[2];
  void *v17;
  void *v18;
  void *v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t *v24;
  int v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *v30;
  std::string v31;
  uint64_t v32[3];
  std::__shared_weak_count *v33;
  uint64_t *v34;
  _QWORD *v35[2];

  v35[0] = 0;
  v35[1] = 0;
  v34 = (uint64_t *)v35;
  sub_20BE288A4(&v34, 3);
  v2 = *((_QWORD *)this + 5);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v32[2] = v2;
  v33 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v28 = v2;
    v29 = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v28 = v2;
    v29 = 0;
  }
  sub_20BDDC0E4(__p, "P");
  LODWORD(v19) = 3;
  v20 = &v34;
  v7 = *((_QWORD *)this + 33);
  LODWORD(v26) = 2;
  v27 = v7;
  LODWORD(v24) = 0;
  v25 = 0;
  LODWORD(v22) = 0;
  v23 = 0;
  sub_20BE2981C((uint64_t)&v30, &v28, (uint64_t)__p, (uint64_t **)&v19, &v26, &v24, &v22);
  *((_DWORD *)this + 68) = (_DWORD)v30;
  std::string::operator=((std::string *)((char *)this + 280), &v31);
  sub_20BDE881C((_QWORD *)this + 38, v32);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v30);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  v8 = v29;
  if (v29)
  {
    v9 = (unint64_t *)&v29->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  sub_20BE29E5C(&v30, (uint64_t *)&v19);
  if (*((_QWORD *)this + 32))
  {
    v11 = 0;
    do
    {
      sub_20BE29F08(__p, (uint64_t *)&v30);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 272);
      if (v17)
      {
        v18 = v17;
        operator delete(v17);
      }
      ++v11;
      v12 = *((_QWORD *)this + 32);
    }
    while (v11 < v12);
  }
  else
  {
    v12 = 0;
  }
  sub_20BE3EFE4((uint64_t)this, *((_DWORD *)this + 66), v12);
  if (v31.__r_.__value_.__l.__size_)
  {
    v31.__r_.__value_.__r.__words[2] = v31.__r_.__value_.__l.__size_;
    operator delete((void *)v31.__r_.__value_.__l.__size_);
  }
  if (v19)
  {
    v20 = (uint64_t **)v19;
    operator delete(v19);
  }
  v13 = v33;
  if (v33)
  {
    v14 = (unint64_t *)&v33->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20BDE9D48((uint64_t)&v34, v35[0]);
}

void sub_20BE3E5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 104);
  if (v29)
  {
    *(_QWORD *)(v27 - 96) = v29;
    operator delete(v29);
  }
  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 72));
  sub_20BDE9D48(v27 - 56, *(_QWORD **)(v27 - 48));
  _Unwind_Resume(a1);
}

BOOL sub_20BE3E684(uint64_t a1)
{
  uint64_t (*v3)();

  if (*(_DWORD *)(a1 + 80) != -536870912
    || *(_DWORD *)(a1 + 84) != -536870912
    || *(_DWORD *)(a1 + 88) != -536870912
    || *(_DWORD *)(a1 + 92) != -536870912)
  {
    return 1;
  }
  if (*(_DWORD *)(a1 + 104) == 127 || !*(_QWORD *)(a1 + 96) && *(_QWORD *)(a1 + 120) == *(_QWORD *)(a1 + 112)
     ? 0
     : nullsub_13)
  {
    return 1;
  }
  if (*(_DWORD *)(a1 + 144) == 127 || !*(_QWORD *)(a1 + 136) && *(_QWORD *)(a1 + 160) == *(_QWORD *)(a1 + 152))
    v3 = 0;
  else
    v3 = nullsub_13;
  return v3 != 0;
}

void Alembic::AbcGeom::v12::ONuPatchSchema::createKnotProperties(Alembic::AbcGeom::v12::ONuPatchSchema *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t *v55;
  int v56;
  uint64_t *v57;
  int v58;
  uint64_t *v59;
  int v60;
  uint64_t *v61;
  int v62;
  void *__p[2];
  char v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  void *v67;
  std::string v68;
  uint64_t v69[2];
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t *v72;
  _QWORD *v73[2];

  v73[0] = 0;
  v73[1] = 0;
  v72 = (uint64_t *)v73;
  sub_20BE288A4(&v72, 3);
  v2 = *((_QWORD *)this + 5);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v70 = v2;
  v71 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v65 = v2;
    v66 = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v65 = v2;
    v66 = 0;
  }
  sub_20BDDC0E4(__p, "nu");
  v7 = *((_QWORD *)this + 33);
  LODWORD(v61) = 2;
  v62 = v7;
  LODWORD(v59) = 0;
  v60 = 0;
  LODWORD(v57) = 0;
  v58 = 0;
  LODWORD(v55) = 0;
  v56 = 0;
  sub_20BE406D4((uint64_t)&v67, &v65, (uint64_t)__p, &v61, &v59, &v57, &v55);
  *((_DWORD *)this + 80) = (_DWORD)v67;
  std::string::operator=((std::string *)((char *)this + 328), &v68);
  sub_20BDE881C((_QWORD *)this + 44, v69);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v67);
  if (v64 < 0)
    operator delete(__p[0]);
  v8 = v66;
  if (v66)
  {
    v9 = (unint64_t *)&v66->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v53 = v70;
  v54 = v71;
  if (v71)
  {
    v11 = (unint64_t *)&v71->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_20BDDC0E4(__p, "nv");
  v13 = *((_QWORD *)this + 33);
  LODWORD(v61) = 2;
  v62 = v13;
  LODWORD(v59) = 0;
  v60 = 0;
  LODWORD(v57) = 0;
  v58 = 0;
  LODWORD(v55) = 0;
  v56 = 0;
  sub_20BE406D4((uint64_t)&v67, &v53, (uint64_t)__p, &v61, &v59, &v57, &v55);
  *((_DWORD *)this + 92) = (_DWORD)v67;
  std::string::operator=((std::string *)((char *)this + 376), &v68);
  sub_20BDE881C((_QWORD *)this + 50, v69);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v67);
  if (v64 < 0)
    operator delete(__p[0]);
  v14 = v54;
  if (v54)
  {
    v15 = (unint64_t *)&v54->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v51 = v70;
  v52 = v71;
  if (v71)
  {
    v17 = (unint64_t *)&v71->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  sub_20BDDC0E4(__p, "uOrder");
  v19 = *((_QWORD *)this + 33);
  LODWORD(v61) = 2;
  v62 = v19;
  LODWORD(v59) = 0;
  v60 = 0;
  LODWORD(v57) = 0;
  v58 = 0;
  LODWORD(v55) = 0;
  v56 = 0;
  sub_20BE406D4((uint64_t)&v67, &v51, (uint64_t)__p, &v61, &v59, &v57, &v55);
  *((_DWORD *)this + 104) = (_DWORD)v67;
  std::string::operator=((std::string *)((char *)this + 424), &v68);
  sub_20BDE881C((_QWORD *)this + 56, v69);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v67);
  if (v64 < 0)
    operator delete(__p[0]);
  v20 = v52;
  if (v52)
  {
    v21 = (unint64_t *)&v52->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v49 = v70;
  v50 = v71;
  if (v71)
  {
    v23 = (unint64_t *)&v71->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  sub_20BDDC0E4(__p, "vOrder");
  v25 = *((_QWORD *)this + 33);
  LODWORD(v61) = 2;
  v62 = v25;
  LODWORD(v59) = 0;
  v60 = 0;
  LODWORD(v57) = 0;
  v58 = 0;
  LODWORD(v55) = 0;
  v56 = 0;
  sub_20BE406D4((uint64_t)&v67, &v49, (uint64_t)__p, &v61, &v59, &v57, &v55);
  *((_DWORD *)this + 116) = (_DWORD)v67;
  std::string::operator=((std::string *)((char *)this + 472), &v68);
  sub_20BDE881C((_QWORD *)this + 62, v69);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v67);
  if (v64 < 0)
    operator delete(__p[0]);
  v26 = v50;
  if (v50)
  {
    v27 = (unint64_t *)&v50->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v47 = v70;
  v48 = v71;
  if (v71)
  {
    v29 = (unint64_t *)&v71->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  sub_20BDDC0E4(__p, "uKnot");
  v31 = *((_QWORD *)this + 33);
  LODWORD(v61) = 2;
  v62 = v31;
  LODWORD(v59) = 0;
  v60 = 0;
  LODWORD(v57) = 0;
  v58 = 0;
  LODWORD(v55) = 0;
  v56 = 0;
  sub_20BE2ECE8((uint64_t)&v67, &v47, (uint64_t)__p, &v61, &v59, &v57, &v55);
  *((_DWORD *)this + 128) = (_DWORD)v67;
  std::string::operator=((std::string *)((char *)this + 520), &v68);
  sub_20BDE881C((_QWORD *)this + 68, v69);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v67);
  if (v64 < 0)
    operator delete(__p[0]);
  v32 = v48;
  if (v48)
  {
    v33 = (unint64_t *)&v48->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v45 = v70;
  v46 = v71;
  if (v71)
  {
    v35 = (unint64_t *)&v71->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  sub_20BDDC0E4(__p, "vKnot");
  v37 = *((_QWORD *)this + 33);
  LODWORD(v61) = 2;
  v62 = v37;
  LODWORD(v59) = 0;
  v60 = 0;
  LODWORD(v57) = 0;
  v58 = 0;
  LODWORD(v55) = 0;
  v56 = 0;
  sub_20BE2ECE8((uint64_t)&v67, &v45, (uint64_t)__p, &v61, &v59, &v57, &v55);
  *((_DWORD *)this + 140) = (_DWORD)v67;
  std::string::operator=((std::string *)((char *)this + 568), &v68);
  sub_20BDE881C((_QWORD *)this + 74, v69);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v67);
  if (v64 < 0)
    operator delete(__p[0]);
  v38 = v46;
  if (v46)
  {
    v39 = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v67 = 0;
  v68.__r_.__value_.__r.__words[0] = 0x10000000ALL;
  v69[0] = 0;
  *(_OWORD *)&v68.__r_.__value_.__r.__words[1] = 0uLL;
  if (*((_QWORD *)this + 32))
  {
    v41 = 0;
    do
    {
      LODWORD(__p[0]) = 0;
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 320), __p);
      LODWORD(__p[0]) = 0;
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 368), __p);
      LODWORD(__p[0]) = 0;
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 416), __p);
      LODWORD(__p[0]) = 0;
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 464), __p);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 512);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 560);
      ++v41;
    }
    while (v41 < *((_QWORD *)this + 32));
    if (v68.__r_.__value_.__l.__size_)
    {
      v68.__r_.__value_.__r.__words[2] = v68.__r_.__value_.__l.__size_;
      operator delete((void *)v68.__r_.__value_.__l.__size_);
    }
  }
  v42 = v71;
  if (v71)
  {
    v43 = (unint64_t *)&v71->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_20BDE9D48((uint64_t)&v72, v73[0]);
}

void sub_20BE3EE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  uint64_t v33;

  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v33 - 168));
  if (a32 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v33 - 120));
  sub_20BDE9D48(v33 - 104, *(_QWORD **)(v33 - 96));
  _Unwind_Resume(a1);
}

void sub_20BE3EFE4(uint64_t a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  Alembic::Abc::v12::OScalarProperty *v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  int v20;
  void *__p[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _OWORD v25[2];
  int64x2_t v26;
  uint64_t v27;
  const char *v28;

  v27 = a1 + 8;
  v28 = "OGeomBaseSchema::createSelfBoundsProperty()";
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(_QWORD *)(a1 + 72))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 87))
  {
LABEL_5:
    if (*(_QWORD *)(a1 + 88))
      return;
  }
  v6 = *(std::__shared_weak_count **)(a1 + 48);
  v23 = *(_QWORD *)(a1 + 40);
  v24 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".selfBnds");
  LODWORD(v19) = 2;
  v20 = a2;
  LODWORD(v17) = 0;
  v18 = 0;
  LODWORD(v15) = 0;
  v16 = 0;
  LODWORD(v13) = 0;
  v14 = 0;
  sub_20BE1C558((uint64_t)v25, &v23, (uint64_t)__p, &v19, &v17, &v15, &v13);
  *(_DWORD *)(a1 + 56) = v25[0];
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)((char *)v25 + 8));
  sub_20BDE881C((_QWORD *)(a1 + 88), v26.i64);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)v25);
  if (v22 < 0)
    operator delete(__p[0]);
  v9 = v24;
  if (v24)
  {
    v10 = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v25[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v25[1] = xmmword_20CA521E0;
  v26 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (a3)
  {
    v12 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 56);
    do
    {
      Alembic::Abc::v12::OScalarProperty::set(v12, v25);
      --a3;
    }
    while (a3);
  }
}

void sub_20BE3F170(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;
  void *v27;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v24 - 96));
  if (a23 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a24);
  v27 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v24 - 48, (uint64_t)v27);
  else
    sub_20BE02504(v24 - 48, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE3F15CLL);
}

void sub_20BE3F1F0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE3F210(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE v7[56];
  _BYTE v8[48];

  if (*(char *)(a1 + 303) < 0)
  {
    if (!*(_QWORD *)(a1 + 288))
      goto LABEL_5;
LABEL_10:
    sub_20BE1A75C((int *)(a1 + 8), (uint64_t)v7);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v7, (uint64_t)v8);
    Alembic::Abc::v12::OArchive::getTimeSampling((Alembic::Abc::v12::OArchive *)v8, a2);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v8);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v7);
    return;
  }
  if (*(_BYTE *)(a1 + 303))
    goto LABEL_10;
LABEL_5:
  if (!*(_QWORD *)(a1 + 304))
    goto LABEL_10;
  v3 = sub_20BE295E0(a1 + 272);
  v4 = *(_QWORD *)(v3 + 72);
  *a2 = *(_QWORD *)(v3 + 64);
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_20BE3F2B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)va1);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)va);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::ONuPatchSchema::setFromPrevious(Alembic::AbcGeom::v12::ONuPatchSchema *this)
{
  uint64_t (*v2)();
  uint64_t (*v3)();
  uint64_t (*v4)();
  uint64_t (*v5)();
  uint64_t (*v6)();
  uint64_t (*v7)();
  uint64_t (*v8)();
  uint64_t (*v9)();
  int v10;
  uint64_t (*v11)();
  uint64_t result;
  uint64_t (*v13)();
  uint64_t (*v14)();
  uint64_t (*v15)();

  if (*((char *)this + 303) < 0)
  {
    if (*((_QWORD *)this + 36))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 303))
  {
LABEL_3:
    v2 = 0;
    goto LABEL_8;
  }
  if (*((_QWORD *)this + 38))
    v2 = nullsub_7;
  else
    v2 = 0;
LABEL_8:
  if (v2)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 272));
  if (*((char *)this + 351) < 0)
  {
    if (*((_QWORD *)this + 42))
      goto LABEL_12;
  }
  else if (*((_BYTE *)this + 351))
  {
LABEL_12:
    v3 = 0;
    goto LABEL_17;
  }
  if (*((_QWORD *)this + 44))
    v3 = nullsub_6;
  else
    v3 = 0;
LABEL_17:
  if (v3)
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 320));
  if (*((char *)this + 399) < 0)
  {
    if (*((_QWORD *)this + 48))
      goto LABEL_21;
  }
  else if (*((_BYTE *)this + 399))
  {
LABEL_21:
    v4 = 0;
    goto LABEL_26;
  }
  if (*((_QWORD *)this + 50))
    v4 = nullsub_6;
  else
    v4 = 0;
LABEL_26:
  if (v4)
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 368));
  if (*((char *)this + 447) < 0)
  {
    if (*((_QWORD *)this + 54))
      goto LABEL_30;
  }
  else if (*((_BYTE *)this + 447))
  {
LABEL_30:
    v5 = 0;
    goto LABEL_35;
  }
  if (*((_QWORD *)this + 56))
    v5 = nullsub_6;
  else
    v5 = 0;
LABEL_35:
  if (v5)
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 416));
  if (*((char *)this + 495) < 0)
  {
    if (*((_QWORD *)this + 60))
      goto LABEL_39;
  }
  else if (*((_BYTE *)this + 495))
  {
LABEL_39:
    v6 = 0;
    goto LABEL_44;
  }
  if (*((_QWORD *)this + 62))
    v6 = nullsub_6;
  else
    v6 = 0;
LABEL_44:
  if (v6)
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 464));
  if (*((char *)this + 543) < 0)
  {
    if (*((_QWORD *)this + 66))
      goto LABEL_48;
  }
  else if (*((_BYTE *)this + 543))
  {
LABEL_48:
    v7 = 0;
    goto LABEL_53;
  }
  if (*((_QWORD *)this + 68))
    v7 = nullsub_7;
  else
    v7 = 0;
LABEL_53:
  if (v7)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 512));
  if (*((char *)this + 591) < 0)
  {
    if (*((_QWORD *)this + 72))
      goto LABEL_57;
  }
  else if (*((_BYTE *)this + 591))
  {
LABEL_57:
    v8 = 0;
    goto LABEL_62;
  }
  if (*((_QWORD *)this + 74))
    v8 = nullsub_7;
  else
    v8 = 0;
LABEL_62:
  if (v8)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 560));
  Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 56));
  if (*((char *)this + 1039) < 0)
  {
    if (*((_QWORD *)this + 128))
      goto LABEL_66;
  }
  else if (*((_BYTE *)this + 1039))
  {
LABEL_66:
    v9 = 0;
    goto LABEL_71;
  }
  if (*((_QWORD *)this + 130))
    v9 = nullsub_7;
  else
    v9 = 0;
LABEL_71:
  if (v9)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1008));
  v10 = sub_20BE296FC((uint64_t)this + 832);
  v11 = nullsub_16;
  if (!v10)
    v11 = 0;
  if (v11)
    sub_20BE286D0((_BYTE *)this + 832);
  result = sub_20BE296FC((uint64_t)this + 656);
  v13 = nullsub_17;
  if (!(_DWORD)result)
    v13 = 0;
  if (v13)
    result = sub_20BE2876C((_BYTE *)this + 656);
  if (*((char *)this + 639) < 0)
  {
    if (*((_QWORD *)this + 78))
      goto LABEL_83;
  }
  else if (*((_BYTE *)this + 639))
  {
LABEL_83:
    v14 = 0;
    goto LABEL_88;
  }
  if (*((_QWORD *)this + 80))
    v14 = nullsub_7;
  else
    v14 = 0;
LABEL_88:
  if (v14)
    result = Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 608));
  if (*((char *)this + 1087) < 0)
  {
    if (*((_QWORD *)this + 134))
      goto LABEL_92;
LABEL_94:
    if (*((_QWORD *)this + 136))
      v15 = nullsub_6;
    else
      v15 = 0;
    goto LABEL_97;
  }
  if (!*((_BYTE *)this + 1087))
    goto LABEL_94;
LABEL_92:
  v15 = 0;
LABEL_97:
  if (v15)
  {
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1056));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1104));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1152));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1200));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1248));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1296));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1344));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1392));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1440));
    return Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1488));
  }
  return result;
}

void sub_20BE3F6A8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE3F698);
}

void sub_20BE3F6DC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::ONuPatchSchema::setTimeSampling(Alembic::AbcGeom::v12::ONuPatchSchema *this, unsigned int a2)
{
  uint64_t (*v3)();
  uint64_t (*v4)();
  uint64_t (*v5)();
  int v6;
  uint64_t (*v7)();
  uint64_t result;
  uint64_t (*v9)();
  uint64_t (*v10)();
  uint64_t (*v11)();

  *((_QWORD *)this + 33) = a2;
  if (*((char *)this + 303) < 0)
  {
    if (*((_QWORD *)this + 36))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 303))
  {
LABEL_3:
    v3 = 0;
    goto LABEL_8;
  }
  if (*((_QWORD *)this + 38))
    v3 = nullsub_7;
  else
    v3 = 0;
LABEL_8:
  if (v3)
  {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 272));
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 320));
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 368));
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 416));
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 464));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 512));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 560));
  }
  if (*((char *)this + 87) < 0)
  {
    if (*((_QWORD *)this + 9))
      goto LABEL_12;
  }
  else if (*((_BYTE *)this + 87))
  {
LABEL_12:
    v4 = 0;
    goto LABEL_17;
  }
  if (*((_QWORD *)this + 11))
    v4 = nullsub_6;
  else
    v4 = 0;
LABEL_17:
  if (v4)
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 56));
  if (*((char *)this + 1039) < 0)
  {
    if (*((_QWORD *)this + 128))
      goto LABEL_21;
  }
  else if (*((_BYTE *)this + 1039))
  {
LABEL_21:
    v5 = 0;
    goto LABEL_26;
  }
  if (*((_QWORD *)this + 130))
    v5 = nullsub_7;
  else
    v5 = 0;
LABEL_26:
  if (v5)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1008));
  v6 = sub_20BE296FC((uint64_t)this + 832);
  v7 = nullsub_16;
  if (!v6)
    v7 = 0;
  if (v7)
    sub_20BE2921C((_BYTE *)this + 832);
  result = sub_20BE296FC((uint64_t)this + 656);
  v9 = nullsub_17;
  if (!(_DWORD)result)
    v9 = 0;
  if (v9)
    result = sub_20BE292C0((_BYTE *)this + 656);
  if (*((char *)this + 639) < 0)
  {
    if (*((_QWORD *)this + 78))
      goto LABEL_38;
  }
  else if (*((_BYTE *)this + 639))
  {
LABEL_38:
    v10 = 0;
    goto LABEL_43;
  }
  if (*((_QWORD *)this + 80))
    v10 = nullsub_7;
  else
    v10 = 0;
LABEL_43:
  if (v10)
    result = Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 608));
  if (*((char *)this + 1087) < 0)
  {
    if (*((_QWORD *)this + 134))
      goto LABEL_47;
LABEL_49:
    if (*((_QWORD *)this + 136))
      v11 = nullsub_6;
    else
      v11 = 0;
    goto LABEL_52;
  }
  if (!*((_BYTE *)this + 1087))
    goto LABEL_49;
LABEL_47:
  v11 = 0;
LABEL_52:
  if (v11)
  {
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1056));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1104));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1152));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1200));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1248));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1296));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1344));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1392));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1440));
    return Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1488));
  }
  return result;
}

void sub_20BE3F9E0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE3F9CCLL);
}

void sub_20BE3FA14(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

int *Alembic::AbcGeom::v12::ONuPatchSchema::setTimeSampling(Alembic::AbcGeom::v12::ONuPatchSchema *a1, _QWORD *a2)
{
  int *result;
  unsigned int v4;
  _BYTE v5[56];
  _BYTE v6[48];
  int *v7;
  const char *v8;

  result = (int *)((char *)a1 + 8);
  v7 = result;
  v8 = "ONuPatchSchema::setTimeSampling( TimeSamplingPtr)";
  if (*a2)
  {
    sub_20BE1A75C(result, (uint64_t)v5);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v5, (uint64_t)v6);
    v4 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v6);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v6);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v5);
    return (int *)Alembic::AbcGeom::v12::ONuPatchSchema::setTimeSampling(a1, v4);
  }
  return result;
}

void sub_20BE3FAB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void *v19;

  v19 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v17 - 32, (uint64_t)v19);
  else
    sub_20BE02504(v17 - 32, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE3FAA4);
}

void sub_20BE3FB1C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE3FB40(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20BE40C60(a1);
  operator delete(v1);
}

void sub_20BE3FB54(_QWORD *a1)
{
  sub_20BDEBF08(a1 + 38);
  MEMORY[0x212B929D0](a1 + 35, "");
  sub_20BDEBF08(a1 + 80);
  MEMORY[0x212B929D0](a1 + 77, "");
  sub_20BDEBF08(a1 + 130);
  MEMORY[0x212B929D0](a1 + 127, "");
  sub_20BDEBF08(a1 + 44);
  MEMORY[0x212B929D0](a1 + 41, "");
  sub_20BDEBF08(a1 + 50);
  MEMORY[0x212B929D0](a1 + 47, "");
  sub_20BDEBF08(a1 + 56);
  MEMORY[0x212B929D0](a1 + 53, "");
  sub_20BDEBF08(a1 + 62);
  MEMORY[0x212B929D0](a1 + 59, "");
  sub_20BDEBF08(a1 + 68);
  MEMORY[0x212B929D0](a1 + 65, "");
  sub_20BDEBF08(a1 + 74);
  MEMORY[0x212B929D0](a1 + 71, "");
  sub_20BE29790((uint64_t)(a1 + 82));
  sub_20BE29790((uint64_t)(a1 + 104));
  sub_20BDEBF08(a1 + 136);
  MEMORY[0x212B929D0](a1 + 133, "");
  sub_20BDEBF08(a1 + 148);
  MEMORY[0x212B929D0](a1 + 145, "");
  sub_20BDEBF08(a1 + 154);
  MEMORY[0x212B929D0](a1 + 151, "");
  sub_20BDEBF08(a1 + 160);
  MEMORY[0x212B929D0](a1 + 157, "");
  sub_20BDEBF08(a1 + 166);
  MEMORY[0x212B929D0](a1 + 163, "");
  sub_20BDEBF08(a1 + 172);
  MEMORY[0x212B929D0](a1 + 169, "");
  sub_20BDEBF08(a1 + 178);
  MEMORY[0x212B929D0](a1 + 175, "");
  sub_20BDEBF08(a1 + 184);
  MEMORY[0x212B929D0](a1 + 181, "");
  sub_20BDEBF08(a1 + 190);
  MEMORY[0x212B929D0](a1 + 187, "");
  sub_20BE3FDFC(a1);
}

uint64_t sub_20BE3FCF4(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return *(_BYTE *)(a1 + 248) != 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return *(_BYTE *)(a1 + 248) != 0;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    if (*(char *)(a1 + 303) < 0)
    {
      if (*(_QWORD *)(a1 + 288))
        return *(_BYTE *)(a1 + 248) != 0;
    }
    else if (*(_BYTE *)(a1 + 303))
    {
      return *(_BYTE *)(a1 + 248) != 0;
    }
    if (*(_QWORD *)(a1 + 304))
      return 1;
  }
  return *(_BYTE *)(a1 + 248) != 0;
}

uint64_t sub_20BE3FD4C(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_24C519698;
  v2 = (void **)(a1 + 8);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_20BE3FDA4(void **a1)
{
  void **v2;

  *a1 = off_24C519698;
  v2 = a1 + 1;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a1 + 13);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a1 + 7);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  operator delete(a1);
}

void sub_20BE3FDFC(_QWORD *a1)
{
  sub_20BDEBF08(a1 + 11);
  MEMORY[0x212B929D0](a1 + 8, "");
  sub_20BDEBF08(a1 + 17);
  MEMORY[0x212B929D0](a1 + 14, "");
  sub_20BDEBF08(a1 + 23);
  MEMORY[0x212B929D0](a1 + 20, "");
  sub_20BDEBF08(a1 + 29);
  MEMORY[0x212B929D0](a1 + 26, "");
  sub_20BDEBF08(a1 + 5);
  JUMPOUT(0x212B929D0);
}

BOOL sub_20BE3FE80(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 40) != 0;
}

uint64_t sub_20BE3FEAC(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 32), "");
  *(_DWORD *)(a1 + 72) = 2;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 80), "");
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 124) = 0x20000007FLL;
  sub_20BDDC0E4((_QWORD *)(a1 + 136), "");
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  return a1;
}

void sub_20BE3FF3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE3FF78(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 32), "");
  *(_DWORD *)(a1 + 72) = 2;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 80), "");
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 124) = 0x20000007FLL;
  sub_20BDDC0E4((_QWORD *)(a1 + 136), "");
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  return a1;
}

void sub_20BE40008(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE40044(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C5196C8;
  v14 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  sub_20BE40214(a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE40140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v9);
  _Unwind_Resume(a1);
}

void sub_20BE4015C(uint64_t a1, int a2, char a3)
{
  if ((a3 & 1) == 0)
    sub_20BE3EFE4(a1, a2, 0);
}

void sub_20BE401A4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;
  void (*v12)(uint64_t);
  uint64_t v13;

  v11 = __cxa_begin_catch(a1);
  v12 = *(void (**)(uint64_t))(*(_QWORD *)v9 + 16);
  if (a2 == 2)
  {
    v13 = (uint64_t)v11;
    v12(v9);
    sub_20BE02570((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_20BE02504((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE40190);
}

void sub_20BE401F4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE40214(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t *v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *exception;
  _QWORD *v23;
  std::string __p;
  void *v25[2];
  char v26;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD v29[37];
  int v30;
  const void **v31[4];
  std::__shared_weak_count *v32;
  int v33;
  uint64_t v34;
  void **v35;

  v28 = 0;
  v29[0] = 0;
  v27 = (uint64_t *)&v28;
  v29[35] = 0;
  v29[36] = 0;
  v30 = 2;
  sub_20BDEBF8C((uint64_t *)v31, (const void ***)&v27);
  v31[3] = 0;
  v32 = 0;
  v33 = 0;
  v34 = 1;
  sub_20BDE9D48((uint64_t)&v27, v28);
  sub_20BE02E30(a4, (uint64_t)&v30);
  sub_20BE02E30(a5, (uint64_t)&v30);
  sub_20BE02E30(a6, (uint64_t)&v30);
  sub_20BE02E30(a7, (uint64_t)&v30);
  *(_DWORD *)(a1 + 8) = v30;
  v29[33] = a1 + 8;
  v29[34] = "OSchema::OSchema::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v27);
    sub_20BDDC1C8(v29, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_20BDDBF20(v25, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    v23 = sub_20BDDC09C(exception, (uint64_t)v25);
    __cxa_throw(v23, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v27, v31);
  if (HIDWORD(v34) != 1)
  {
    sub_20BDDC0E4(v25, "schema");
    sub_20BDDC0E4(&__p, "AbcGeom_NuPatch_v2");
    v35 = v25;
    v14 = sub_20BDDDFDC(&v27, (const void **)v25, (uint64_t)&unk_20CA52521, (__int128 **)&v35);
    std::string::operator=((std::string *)(v14 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v26 < 0)
      operator delete(v25[0]);
    if (HIDWORD(v34) != 1)
    {
      sub_20BDDC0E4(v25, "schemaBaseType");
      sub_20BDDC0E4(&__p, "AbcGeom_GeomBase_v1");
      v35 = v25;
      v15 = sub_20BDDDFDC(&v27, (const void **)v25, (uint64_t)&unk_20CA52521, (__int128 **)&v35);
      std::string::operator=((std::string *)(v15 + 7), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v26 < 0)
        operator delete(v25[0]);
    }
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t **))(*(_QWORD *)*a2 + 112))(v25, *a2, a3, &v27);
  sub_20BDE82DC(a1 + 40, (__int128 *)v25);
  v16 = (std::__shared_weak_count *)v25[1];
  if (v25[1])
  {
    v17 = (unint64_t *)((char *)v25[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  sub_20BDE9D48((uint64_t)&v27, v28);
  v19 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  sub_20BDE9D48((uint64_t)v31, v31[1]);
}

void sub_20BE40538(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v27;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a22);
  v27 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v23 + 40));
  MEMORY[0x212B929D0](v23 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v24 - 192, (uint64_t)v27);
  else
    sub_20BE02504(v24 - 192, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE40460);
}

void sub_20BE40630(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE40684(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20BE406AC(void **a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20BE406D4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20BE407D8((int *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE407BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v9);
  _Unwind_Resume(a1);
}

void sub_20BE407D8(int *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *exception;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  const void **v42;
  _QWORD *v43;
  _QWORD v44[37];
  int v45;
  const void **v46[3];
  uint64_t v47;
  std::__shared_weak_count *v48;
  unsigned int v49;
  uint64_t v50;

  v43 = 0;
  v44[0] = 0;
  v42 = (const void **)&v43;
  v44[35] = 0;
  v44[36] = 0;
  v45 = 2;
  sub_20BDEBF8C((uint64_t *)v46, &v42);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  sub_20BDE9D48((uint64_t)&v42, v43);
  sub_20BE02E30(a4, (uint64_t)&v45);
  sub_20BE02E30(a5, (uint64_t)&v45);
  sub_20BE02E30(a6, (uint64_t)&v45);
  sub_20BE02E30(a7, (uint64_t)&v45);
  *a1 = v45;
  v44[33] = a1;
  v44[34] = "OTypedScalarProperty::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v42);
    sub_20BDDC1C8(v44, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_20BDDBF20(&v40, (__int128 *)__p);
    if (v39 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v35 = sub_20BDDC09C(exception, (uint64_t)&v40);
    __cxa_throw(v35, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v42, v46);
  v14 = v47;
  v40 = v47;
  v41 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = *a2;
  if (v14)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v17 + 24))(&v36);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v36 + 24))(__p);
    v18 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)__p[0] + 48))(__p[0], v14);
    v19 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v20 = (unint64_t *)((char *)__p[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v37;
    if (v37)
    {
      v23 = (unint64_t *)&v37->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = *a2;
  }
  else
  {
    v18 = v49;
  }
  v36 = 0x100000006;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const void ***, uint64_t *, uint64_t))(*(_QWORD *)v17 + 96))(__p, v17, a3, &v42, &v36, v18);
  sub_20BDE82DC((uint64_t)(a1 + 8), (__int128 *)__p);
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v26 = (unint64_t *)((char *)__p[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_20BDE9D48((uint64_t)&v42, v43);
  v31 = v48;
  if (v48)
  {
    v32 = (unint64_t *)&v48->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  sub_20BDE9D48((uint64_t)v46, v46[1]);
}

void sub_20BE40B28(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  void *v11;
  std::exception v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  v11 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v7 + 32));
  MEMORY[0x212B929D0](v7 + 8, "");
  if (a2 == 2)
    sub_20BE02570(v8 - 176, (uint64_t)v11);
  else
    sub_20BE02504(v8 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE40A50);
}

void sub_20BE40C0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE40C60(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C519610;
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 1488));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 1440));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 1392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 1344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 1296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 1248));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 1200));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 1152));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 1104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 1056));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 1008));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 960));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 904));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 856));
  if (*(char *)(a1 + 855) < 0)
    operator delete(*(void **)(a1 + 832));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 784));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 728));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 680));
  if (*(char *)(a1 + 679) < 0)
    operator delete(*(void **)(a1 + 656));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 608));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 560));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 512));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 464));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 416));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 368));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 320));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 272));
  *(_QWORD *)a1 = off_24C519698;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

uint64_t Alembic::AbcGeom::v12::INuPatchSchema::trimCurveTopologyIsConstant(Alembic::AbcGeom::v12::INuPatchSchema *this)
{
  if (*((_BYTE *)this + 1464)
    && Alembic::Abc::v12::IScalarProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 984))
    && Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1032))
    && Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1080))
    && Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1128))
    && Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1176))
    && Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1224))
    && Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1272))
    && Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1320))
    && Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1368)))
  {
    return Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1416));
  }
  else
  {
    return 0;
  }
}

uint64_t Alembic::AbcGeom::v12::INuPatchSchema::trimCurveTopologyIsHomogenous(Alembic::AbcGeom::v12::INuPatchSchema *this)
{
  if (*((_BYTE *)this + 1464)
    && Alembic::Abc::v12::IScalarProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 984))
    && Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1032))
    && Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1080))
    && Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1128))
    && Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1224)))
  {
    return Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1272));
  }
  else
  {
    return 0;
  }
}

uint64_t Alembic::AbcGeom::v12::INuPatchSchema::getTopologyVariance(Alembic::AbcGeom::v12::INuPatchSchema *this)
{
  int isConstant;
  int v3;

  if (Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 248)))
  {
    if (*((char *)this + 663) < 0)
    {
      if (*((_QWORD *)this + 81))
        goto LABEL_9;
    }
    else if (*((_BYTE *)this + 663))
    {
      goto LABEL_9;
    }
    if (*((_QWORD *)this + 83))
    {
      isConstant = Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 632));
      goto LABEL_10;
    }
LABEL_9:
    isConstant = 1;
    goto LABEL_10;
  }
  isConstant = 0;
LABEL_10:
  if (!Alembic::Abc::v12::IScalarProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 392))
    || !Alembic::Abc::v12::IScalarProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 440))
    || !Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 488)))
  {
    return 2;
  }
  v3 = Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 536));
  if ((isConstant & v3) != 1)
  {
    if (v3)
    {
      if (!*((_BYTE *)this + 1464))
        return 1;
      goto LABEL_19;
    }
    return 2;
  }
  if (!*((_BYTE *)this + 1464) || (Alembic::AbcGeom::v12::INuPatchSchema::trimCurveTopologyIsConstant(this) & 1) != 0)
    return 0;
LABEL_19:
  if (Alembic::AbcGeom::v12::INuPatchSchema::trimCurveTopologyIsHomogenous(this))
    return 1;
  else
    return 2;
}

void sub_20BE41008(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL Alembic::AbcGeom::v12::INuPatchSchema::hasTrimProps(Alembic::AbcGeom::v12::INuPatchSchema *this)
{
  char *v1;
  _BOOL8 v2;
  void *__p;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;

  v1 = (char *)this + 8;
  sub_20BDDC0E4(&v20, "trim_nloops");
  if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1))
  {
    sub_20BDDC0E4(&v18, "trim_n");
    if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1))
    {
      sub_20BDDC0E4(&v16, "trim_order");
      if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1))
      {
        sub_20BDDC0E4(&v14, "trim_knot");
        if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1))
        {
          sub_20BDDC0E4(&v12, "trim_min");
          if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1))
          {
            sub_20BDDC0E4(&v10, "trim_max");
            if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1))
            {
              sub_20BDDC0E4(&v8, "trim_u");
              if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1))
              {
                sub_20BDDC0E4(&v6, "trim_v");
                if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1))
                {
                  sub_20BDDC0E4(&__p, "trim_w");
                  v2 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1) != 0;
                  if (v5 < 0)
                    operator delete(__p);
                }
                else
                {
                  v2 = 0;
                }
                if (v7 < 0)
                  operator delete(v6);
              }
              else
              {
                v2 = 0;
              }
              if (v9 < 0)
                operator delete(v8);
            }
            else
            {
              v2 = 0;
            }
            if (v11 < 0)
              operator delete(v10);
          }
          else
          {
            v2 = 0;
          }
          if (v13 < 0)
            operator delete(v12);
        }
        else
        {
          v2 = 0;
        }
        if (v15 < 0)
          operator delete(v14);
      }
      else
      {
        v2 = 0;
      }
      if (v17 < 0)
        operator delete(v16);
    }
    else
    {
      v2 = 0;
    }
    if (v19 < 0)
      operator delete(v18);
  }
  else
  {
    v2 = 0;
  }
  if (v21 < 0)
    operator delete(v20);
  return v2;
}

void sub_20BE41244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v39 - 89) < 0)
    operator delete(*(void **)(v39 - 112));
  if (*(char *)(v39 - 65) < 0)
    operator delete(*(void **)(v39 - 88));
  if (*(char *)(v39 - 41) < 0)
    operator delete(*(void **)(v39 - 64));
  if (*(char *)(v39 - 17) < 0)
    operator delete(*(void **)(v39 - 40));
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::INuPatchSchema::get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)();
  uint64_t (*v7)();
  uint64_t (*v8)();

  sub_20BE1DB98(a1 + 248, a2, a3);
  Alembic::Abc::v12::IScalarProperty::get(a1 + 296, a2 + 32, a3, 4);
  Alembic::Abc::v12::IScalarProperty::get(a1 + 344, a2 + 36, a3, 4);
  Alembic::Abc::v12::IScalarProperty::get(a1 + 392, a2 + 40, a3, 4);
  Alembic::Abc::v12::IScalarProperty::get(a1 + 440, a2 + 44, a3, 4);
  sub_20BE1DD58(a1 + 488, a2 + 48, a3);
  sub_20BE1DD58(a1 + 536, a2 + 64, a3);
  if (*(char *)(a1 + 87) < 0)
  {
    if (*(_QWORD *)(a1 + 72))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(a1 + 87))
  {
LABEL_3:
    v6 = 0;
    goto LABEL_8;
  }
  if (*(_QWORD *)(a1 + 88))
    v6 = nullsub_4;
  else
    v6 = 0;
LABEL_8:
  if (v6)
    Alembic::Abc::v12::IScalarProperty::get(a1 + 56, a2 + 256, a3, 48);
  if (*(char *)(a1 + 615) < 0)
  {
    if (*(_QWORD *)(a1 + 600))
      goto LABEL_12;
  }
  else if (*(_BYTE *)(a1 + 615))
  {
LABEL_12:
    v7 = 0;
    goto LABEL_17;
  }
  if (*(_QWORD *)(a1 + 616))
    v7 = nullsub_5;
  else
    v7 = 0;
LABEL_17:
  if (v7 && Alembic::Abc::v12::IArrayProperty::getNumSamples((Alembic::Abc::v12::IArrayProperty *)(a1 + 584)))
    sub_20BE1DF18(a1 + 584, a2 + 16, a3);
  if (*(char *)(a1 + 663) < 0)
  {
    if (*(_QWORD *)(a1 + 648))
      goto LABEL_22;
  }
  else if (*(_BYTE *)(a1 + 663))
  {
LABEL_22:
    v8 = 0;
    goto LABEL_27;
  }
  if (*(_QWORD *)(a1 + 664))
    v8 = nullsub_5;
  else
    v8 = 0;
LABEL_27:
  if (v8)
    sub_20BE1DD58(a1 + 632, a2 + 80, a3);
  if (*(_BYTE *)(a1 + 1464))
  {
    Alembic::Abc::v12::IScalarProperty::get(a1 + 984, a2 + 96, a3, 4);
    sub_20BE1DC78(a1 + 1080, a2 + 104, a3);
    sub_20BE1DC78(a1 + 1032, a2 + 120, a3);
    sub_20BE1DC78(a1 + 1128, a2 + 136, a3);
    sub_20BE1DD58(a1 + 1176, a2 + 152, a3);
    sub_20BE1DD58(a1 + 1224, a2 + 168, a3);
    sub_20BE1DD58(a1 + 1272, a2 + 184, a3);
    sub_20BE1DD58(a1 + 1320, a2 + 200, a3);
    sub_20BE1DD58(a1 + 1368, a2 + 216, a3);
    sub_20BE1DD58(a1 + 1416, a2 + 232, a3);
  }
}

void sub_20BE415B8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE415A4);
}

void sub_20BE415EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::INuPatchSchema::init(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t PropertyHeader;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _BOOL4 hasTrimProps;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  void *v154;
  std::string v155;
  uint64_t v156[2];
  void *v157;
  std::string v158;
  uint64_t v159[2];
  int v160;
  std::string v161;
  uint64_t v162[2];
  char v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  uint64_t *v180;
  int v181;
  uint64_t *v182;
  int v183;
  void *__p[2];
  char v185;
  int v186;
  int v187;
  int v188;
  int v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  void *v192[2];
  char v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199[4];
  std::__shared_weak_count *v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  const char *v204;

  v6 = a1 + 8;
  v203 = a1 + 8;
  v204 = "INuPatchSchema::init()";
  *(_OWORD *)&v155.__r_.__value_.__l.__data_ = 0uLL;
  v154 = &v155;
  v198 = 2;
  v196 = 0;
  v197 = 0;
  sub_20BDEBF8C(v199, (const void ***)&v154);
  v199[3] = 0;
  v200 = 0;
  v201 = 0;
  v202 = 1;
  sub_20BDE9D48((uint64_t)&v154, v155.__r_.__value_.__l.__data_);
  sub_20BE02E30(a2, (uint64_t)&v198);
  sub_20BE02E30(a3, (uint64_t)&v198);
  *(_BYTE *)(a1 + 1464) = 0;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(std::__shared_weak_count **)(a1 + 48);
  v194 = v7;
  v195 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v190 = v7;
    v191 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v190 = v7;
    v191 = 0;
  }
  v188 = 0;
  v189 = 0;
  v186 = 0;
  v187 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v190, &v188, &v186);
  sub_20BDDC0E4(__p, "P");
  LODWORD(v182) = 5;
  v183 = 1;
  LODWORD(v180) = 1;
  v181 = v198;
  sub_20BE1DFF8((uint64_t)&v154, (int *)v192, (uint64_t)__p, &v182, &v180);
  *(_DWORD *)(a1 + 248) = (_DWORD)v154;
  std::string::operator=((std::string *)(a1 + 256), &v155);
  sub_20BDE881C((_QWORD *)(a1 + 280), v156);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v154);
  if (v185 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
  v12 = v191;
  if (v191)
  {
    v13 = (unint64_t *)&v191->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v178 = v194;
  v179 = v195;
  if (v195)
  {
    v15 = (unint64_t *)&v195->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v188 = 0;
  v189 = 0;
  v186 = 0;
  v187 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v178, &v188, &v186);
  sub_20BDDC0E4(__p, "nu");
  sub_20BE43410((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 296) = (_DWORD)v154;
  std::string::operator=((std::string *)(a1 + 304), &v155);
  sub_20BDE881C((_QWORD *)(a1 + 328), v156);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v154);
  if (v185 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
  v17 = v179;
  if (v179)
  {
    v18 = (unint64_t *)&v179->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v176 = v194;
  v177 = v195;
  if (v195)
  {
    v20 = (unint64_t *)&v195->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v188 = 0;
  v189 = 0;
  v186 = 0;
  v187 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v176, &v188, &v186);
  sub_20BDDC0E4(__p, "nv");
  sub_20BE43410((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 344) = (_DWORD)v154;
  std::string::operator=((std::string *)(a1 + 352), &v155);
  sub_20BDE881C((_QWORD *)(a1 + 376), v156);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v154);
  if (v185 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
  v22 = v177;
  if (v177)
  {
    v23 = (unint64_t *)&v177->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v174 = v194;
  v175 = v195;
  if (v195)
  {
    v25 = (unint64_t *)&v195->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v188 = 0;
  v189 = 0;
  v186 = 0;
  v187 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v174, &v188, &v186);
  sub_20BDDC0E4(__p, "uOrder");
  sub_20BE43410((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 392) = (_DWORD)v154;
  std::string::operator=((std::string *)(a1 + 400), &v155);
  sub_20BDE881C((_QWORD *)(a1 + 424), v156);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v154);
  if (v185 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
  v27 = v175;
  if (v175)
  {
    v28 = (unint64_t *)&v175->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v172 = v194;
  v173 = v195;
  if (v195)
  {
    v30 = (unint64_t *)&v195->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v188 = 0;
  v189 = 0;
  v186 = 0;
  v187 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v172, &v188, &v186);
  sub_20BDDC0E4(__p, "vOrder");
  sub_20BE43410((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 440) = (_DWORD)v154;
  std::string::operator=((std::string *)(a1 + 448), &v155);
  sub_20BDE881C((_QWORD *)(a1 + 472), v156);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v154);
  if (v185 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
  v32 = v173;
  if (v173)
  {
    v33 = (unint64_t *)&v173->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v170 = v194;
  v171 = v195;
  if (v195)
  {
    v35 = (unint64_t *)&v195->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v188 = 0;
  v189 = 0;
  v186 = 0;
  v187 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v170, &v188, &v186);
  sub_20BDDC0E4(__p, "uKnot");
  sub_20BE1ED68((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 488) = (_DWORD)v154;
  std::string::operator=((std::string *)(a1 + 496), &v155);
  sub_20BDE881C((_QWORD *)(a1 + 520), v156);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v154);
  if (v185 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
  v37 = v171;
  if (v171)
  {
    v38 = (unint64_t *)&v171->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v168 = v194;
  v169 = v195;
  if (v195)
  {
    v40 = (unint64_t *)&v195->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v188 = 0;
  v189 = 0;
  v186 = 0;
  v187 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v168, &v188, &v186);
  sub_20BDDC0E4(__p, "vKnot");
  sub_20BE1ED68((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 536) = (_DWORD)v154;
  std::string::operator=((std::string *)(a1 + 544), &v155);
  sub_20BDE881C((_QWORD *)(a1 + 568), v156);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v154);
  if (v185 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
  v42 = v169;
  if (v169)
  {
    v43 = (unint64_t *)&v169->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_20BDDC0E4(&v154, "w");
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v46 = PropertyHeader;
  if (v155.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v154);
    if (!v46)
      goto LABEL_89;
  }
  else if (!PropertyHeader)
  {
    goto LABEL_89;
  }
  v166 = v194;
  v167 = v195;
  if (v195)
  {
    v47 = (unint64_t *)&v195->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v188 = 0;
  v189 = 0;
  v186 = 0;
  v187 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v166, &v188, &v186);
  sub_20BDDC0E4(__p, "w");
  sub_20BE1ED68((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 632) = (_DWORD)v154;
  std::string::operator=((std::string *)(a1 + 640), &v155);
  sub_20BDE881C((_QWORD *)(a1 + 664), v156);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v154);
  if (v185 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
  v49 = v167;
  if (v167)
  {
    v50 = (unint64_t *)&v167->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
LABEL_89:
  sub_20BDDC0E4(&v154, ".velocities");
  v52 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v53 = v52;
  if (v155.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v154);
    if (!v53)
      goto LABEL_103;
  }
  else if (!v52)
  {
    goto LABEL_103;
  }
  v164 = v194;
  v165 = v195;
  if (v195)
  {
    v54 = (unint64_t *)&v195->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v188 = 0;
  v189 = 0;
  v186 = 0;
  v187 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v164, &v188, &v186);
  sub_20BDDC0E4(__p, ".velocities");
  sub_20BE220BC((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 584) = (_DWORD)v154;
  std::string::operator=((std::string *)(a1 + 592), &v155);
  sub_20BDE881C((_QWORD *)(a1 + 616), v156);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v154);
  if (v185 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
  v56 = v165;
  if (v165)
  {
    v57 = (unint64_t *)&v165->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
LABEL_103:
  sub_20BDDC0E4(&v154, "N");
  v59 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v60 = v59;
  if (v155.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v154);
    if (!v60)
      goto LABEL_117;
  }
  else if (!v59)
  {
    goto LABEL_117;
  }
  v152 = v194;
  v153 = v195;
  if (v195)
  {
    v61 = (unint64_t *)&v195->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  sub_20BDDC0E4(v192, "N");
  sub_20BE208E8((uint64_t)&v154, &v152, (uint64_t)v192, a2, a3);
  *(_DWORD *)(a1 + 680) = (_DWORD)v154;
  std::string::operator=((std::string *)(a1 + 688), &v155);
  sub_20BDE881C((_QWORD *)(a1 + 712), v156);
  *(_DWORD *)(a1 + 728) = (_DWORD)v157;
  std::string::operator=((std::string *)(a1 + 736), &v158);
  sub_20BDE881C((_QWORD *)(a1 + 760), v159);
  *(_DWORD *)(a1 + 776) = v160;
  std::string::operator=((std::string *)(a1 + 784), &v161);
  sub_20BDE881C((_QWORD *)(a1 + 808), v162);
  *(_BYTE *)(a1 + 824) = v163;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v160);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v157);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v154);
  if (v193 < 0)
    operator delete(v192[0]);
  v63 = v153;
  if (v153)
  {
    v64 = (unint64_t *)&v153->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
LABEL_117:
  sub_20BDDC0E4(&v154, "uv");
  v66 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v67 = v66;
  if (v155.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v154);
    if (!v67)
      goto LABEL_131;
  }
  else if (!v66)
  {
    goto LABEL_131;
  }
  v150 = v194;
  v151 = v195;
  if (v195)
  {
    v68 = (unint64_t *)&v195->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  sub_20BDDC0E4(v192, "uv");
  sub_20BE1F3F4((uint64_t)&v154, &v150, (uint64_t)v192, a2, a3);
  *(_DWORD *)(a1 + 832) = (_DWORD)v154;
  std::string::operator=((std::string *)(a1 + 840), &v155);
  sub_20BDE881C((_QWORD *)(a1 + 864), v156);
  *(_DWORD *)(a1 + 880) = (_DWORD)v157;
  std::string::operator=((std::string *)(a1 + 888), &v158);
  sub_20BDE881C((_QWORD *)(a1 + 912), v159);
  *(_DWORD *)(a1 + 928) = v160;
  std::string::operator=((std::string *)(a1 + 936), &v161);
  sub_20BDE881C((_QWORD *)(a1 + 960), v162);
  *(_BYTE *)(a1 + 976) = v163;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v160);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v157);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v154);
  if (v193 < 0)
    operator delete(v192[0]);
  v70 = v151;
  if (v151)
  {
    v71 = (unint64_t *)&v151->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
LABEL_131:
  hasTrimProps = Alembic::AbcGeom::v12::INuPatchSchema::hasTrimProps((Alembic::AbcGeom::v12::INuPatchSchema *)a1);
  v74 = v195;
  if (hasTrimProps)
  {
    v148 = v194;
    v149 = v195;
    if (v195)
    {
      v75 = (unint64_t *)&v195->__shared_owners_;
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    v188 = 0;
    v189 = 0;
    v186 = 0;
    v187 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v148, &v188, &v186);
    sub_20BDDC0E4(__p, "trim_nloops");
    sub_20BE43410((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 984) = (_DWORD)v154;
    std::string::operator=((std::string *)(a1 + 992), &v155);
    sub_20BDE881C((_QWORD *)(a1 + 1016), v156);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v154);
    if (v185 < 0)
      operator delete(__p[0]);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
    v77 = v149;
    if (v149)
    {
      v78 = (unint64_t *)&v149->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v146 = v194;
    v147 = v195;
    if (v195)
    {
      v80 = (unint64_t *)&v195->__shared_owners_;
      do
        v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
    }
    v188 = 0;
    v189 = 0;
    v186 = 0;
    v187 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v146, &v188, &v186);
    sub_20BDDC0E4(__p, "trim_ncurves");
    sub_20BE1E6DC((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1080) = (_DWORD)v154;
    std::string::operator=((std::string *)(a1 + 1088), &v155);
    sub_20BDE881C((_QWORD *)(a1 + 1112), v156);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v154);
    if (v185 < 0)
      operator delete(__p[0]);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
    v82 = v147;
    if (v147)
    {
      v83 = (unint64_t *)&v147->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v144 = v194;
    v145 = v195;
    if (v195)
    {
      v85 = (unint64_t *)&v195->__shared_owners_;
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
    }
    v188 = 0;
    v189 = 0;
    v186 = 0;
    v187 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v144, &v188, &v186);
    sub_20BDDC0E4(__p, "trim_n");
    sub_20BE1E6DC((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1032) = (_DWORD)v154;
    std::string::operator=((std::string *)(a1 + 1040), &v155);
    sub_20BDE881C((_QWORD *)(a1 + 1064), v156);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v154);
    if (v185 < 0)
      operator delete(__p[0]);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
    v87 = v145;
    if (v145)
    {
      v88 = (unint64_t *)&v145->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    v142 = v194;
    v143 = v195;
    if (v195)
    {
      v90 = (unint64_t *)&v195->__shared_owners_;
      do
        v91 = __ldxr(v90);
      while (__stxr(v91 + 1, v90));
    }
    v188 = 0;
    v189 = 0;
    v186 = 0;
    v187 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v142, &v188, &v186);
    sub_20BDDC0E4(__p, "trim_order");
    sub_20BE1E6DC((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1128) = (_DWORD)v154;
    std::string::operator=((std::string *)(a1 + 1136), &v155);
    sub_20BDE881C((_QWORD *)(a1 + 1160), v156);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v154);
    if (v185 < 0)
      operator delete(__p[0]);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
    v92 = v143;
    if (v143)
    {
      v93 = (unint64_t *)&v143->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v140 = v194;
    v141 = v195;
    if (v195)
    {
      v95 = (unint64_t *)&v195->__shared_owners_;
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    v188 = 0;
    v189 = 0;
    v186 = 0;
    v187 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v140, &v188, &v186);
    sub_20BDDC0E4(__p, "trim_knot");
    sub_20BE1ED68((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1176) = (_DWORD)v154;
    std::string::operator=((std::string *)(a1 + 1184), &v155);
    sub_20BDE881C((_QWORD *)(a1 + 1208), v156);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v154);
    if (v185 < 0)
      operator delete(__p[0]);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
    v97 = v141;
    if (v141)
    {
      v98 = (unint64_t *)&v141->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    v138 = v194;
    v139 = v195;
    if (v195)
    {
      v100 = (unint64_t *)&v195->__shared_owners_;
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 1, v100));
    }
    v188 = 0;
    v189 = 0;
    v186 = 0;
    v187 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v138, &v188, &v186);
    sub_20BDDC0E4(__p, "trim_min");
    sub_20BE1ED68((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1224) = (_DWORD)v154;
    std::string::operator=((std::string *)(a1 + 1232), &v155);
    sub_20BDE881C((_QWORD *)(a1 + 1256), v156);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v154);
    if (v185 < 0)
      operator delete(__p[0]);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
    v102 = v139;
    if (v139)
    {
      v103 = (unint64_t *)&v139->__shared_owners_;
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    v136 = v194;
    v137 = v195;
    if (v195)
    {
      v105 = (unint64_t *)&v195->__shared_owners_;
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
    }
    v188 = 0;
    v189 = 0;
    v186 = 0;
    v187 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v136, &v188, &v186);
    sub_20BDDC0E4(__p, "trim_max");
    sub_20BE1ED68((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1272) = (_DWORD)v154;
    std::string::operator=((std::string *)(a1 + 1280), &v155);
    sub_20BDE881C((_QWORD *)(a1 + 1304), v156);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v154);
    if (v185 < 0)
      operator delete(__p[0]);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
    v107 = v137;
    if (v137)
    {
      v108 = (unint64_t *)&v137->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v134 = v194;
    v135 = v195;
    if (v195)
    {
      v110 = (unint64_t *)&v195->__shared_owners_;
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 1, v110));
    }
    v188 = 0;
    v189 = 0;
    v186 = 0;
    v187 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v134, &v188, &v186);
    sub_20BDDC0E4(__p, "trim_u");
    sub_20BE1ED68((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1320) = (_DWORD)v154;
    std::string::operator=((std::string *)(a1 + 1328), &v155);
    sub_20BDE881C((_QWORD *)(a1 + 1352), v156);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v154);
    if (v185 < 0)
      operator delete(__p[0]);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
    v112 = v135;
    if (v135)
    {
      v113 = (unint64_t *)&v135->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    v132 = v194;
    v133 = v195;
    if (v195)
    {
      v115 = (unint64_t *)&v195->__shared_owners_;
      do
        v116 = __ldxr(v115);
      while (__stxr(v116 + 1, v115));
    }
    v188 = 0;
    v189 = 0;
    v186 = 0;
    v187 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v132, &v188, &v186);
    sub_20BDDC0E4(__p, "trim_v");
    sub_20BE1ED68((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1368) = (_DWORD)v154;
    std::string::operator=((std::string *)(a1 + 1376), &v155);
    sub_20BDE881C((_QWORD *)(a1 + 1400), v156);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v154);
    if (v185 < 0)
      operator delete(__p[0]);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
    v117 = v133;
    if (v133)
    {
      v118 = (unint64_t *)&v133->__shared_owners_;
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    v130 = v194;
    v131 = v195;
    if (v195)
    {
      v120 = (unint64_t *)&v195->__shared_owners_;
      do
        v121 = __ldxr(v120);
      while (__stxr(v121 + 1, v120));
    }
    v188 = 0;
    v189 = 0;
    v186 = 0;
    v187 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v192, &v130, &v188, &v186);
    sub_20BDDC0E4(__p, "trim_w");
    sub_20BE1ED68((uint64_t)&v154, (int *)v192, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1416) = (_DWORD)v154;
    std::string::operator=((std::string *)(a1 + 1424), &v155);
    sub_20BDE881C((_QWORD *)(a1 + 1448), v156);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v154);
    if (v185 < 0)
      operator delete(__p[0]);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
    v122 = v131;
    if (v131)
    {
      v123 = (unint64_t *)&v131->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
    *(_BYTE *)(a1 + 1464) = Alembic::Abc::v12::IScalarProperty::getNumSamples((Alembic::Abc::v12::IScalarProperty *)(a1 + 984)) != 0;
    v74 = v195;
  }
  if (v74)
  {
    v125 = (unint64_t *)&v74->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v127 = v200;
  if (v200)
  {
    v128 = (unint64_t *)&v200->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  sub_20BDE9D48((uint64_t)v199, (_QWORD *)v199[1]);
}

void sub_20BE42C64(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t v71;
  uint64_t v72;
  void *v75;
  void (*v76)(uint64_t);
  uint64_t v77;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&a33);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v72 - 224));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v72 - 176));
  sub_20BE02EB0(v72 - 144);
  v75 = __cxa_begin_catch(a1);
  v76 = *(void (**)(uint64_t))(*(_QWORD *)v71 + 16);
  if (a2 == 2)
  {
    v77 = (uint64_t)v75;
    v76(v71);
    sub_20BE02570(v72 - 80, v77);
  }
  else
  {
    v76(v71);
    sub_20BE02504(v72 - 80, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE42C48);
}

void sub_20BE433E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE43404()
{
  JUMPOUT(0x20BE4338CLL);
}

uint64_t sub_20BE43410(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void **v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *exception;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50[2];
  char v51;
  void *__p[2];
  unsigned __int8 v53;
  __int128 v54;
  _QWORD v55[34];
  std::__shared_weak_count *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62[4];
  std::__shared_weak_count *v63;
  int v64;
  uint64_t v65;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *a2;
  *((_QWORD *)&v54 + 1) = 0;
  v55[0] = 0;
  *(_QWORD *)&v54 = (char *)&v54 + 8;
  v59 = 0;
  v60 = 0;
  v61 = v10;
  sub_20BDEBF8C(v62, (const void ***)&v54);
  v62[3] = 0;
  v63 = 0;
  v64 = 0;
  v65 = 1;
  sub_20BDE9D48((uint64_t)&v54, *((_QWORD **)&v54 + 1));
  sub_20BE02E30(a4, (uint64_t)&v61);
  sub_20BE02E30(a5, (uint64_t)&v61);
  *(_DWORD *)a1 = v61;
  v57 = a1;
  v58 = "ITypedScalarProperty::ITypedScalarProperty()";
  v12 = *((_QWORD *)a2 + 4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v55[33] = v12;
  v56 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v40 = sub_20BDDC1C8(v55, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v40, (uint64_t)"ITypedScalarProperty ctor", 25);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v42 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v42, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  v16 = v15;
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v43 = sub_20BDDC1C8(v55, (uint64_t)"Nonexistent scalar property: ", 29);
    v44 = *(char *)(a3 + 23);
    if (v44 >= 0)
      v45 = a3;
    else
      v45 = *(_QWORD *)a3;
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(a3 + 23);
    else
      v46 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v43, v45, v46);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v47 = __cxa_allocate_exception(0x20uLL);
    v48 = sub_20BDDC09C(v47, (uint64_t)__p);
    __cxa_throw(v48, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v18 = *(_DWORD *)(v15 + 56) == 6 && *(_BYTE *)(v15 + 60) == 1 && *(_DWORD *)(v15 + 24) == 1;
  if (!v18 || (sub_20BE43A00(v15 + 32, v65) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v29 = sub_20BDDC1C8(v55, (uint64_t)"Incorrect match of header datatype: ", 36);
    v30 = sub_20BDE00F4(v29, (int *)(v16 + 56));
    v31 = sub_20BDDC1C8(v30, (uint64_t)" to expected: ", 14);
    v49 = 0x100000006;
    v32 = sub_20BDE00F4(v31, (int *)&v49);
    v33 = sub_20BDDC1C8(v32, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_20BDDC0E4(v50, "interpretation");
    sub_20BE01E1C(v16 + 32, (const void **)v50, __p);
    if ((v53 & 0x80u) == 0)
      v34 = __p;
    else
      v34 = (void **)__p[0];
    if ((v53 & 0x80u) == 0)
      v35 = v53;
    else
      v35 = (uint64_t)__p[1];
    v36 = sub_20BDDC1C8(v33, (uint64_t)v34, v35);
    v37 = sub_20BDDC1C8(v36, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v37, (uint64_t)"", 0);
    if ((char)v53 < 0)
      operator delete(__p[0]);
    if (v51 < 0)
      operator delete(v50[0]);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v38 = __cxa_allocate_exception(0x20uLL);
    v39 = sub_20BDDC09C(v38, (uint64_t)__p);
    __cxa_throw(v39, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 88))(&v54, v12, a3);
  sub_20BDE82DC(a1 + 32, &v54);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v56;
  if (v56)
  {
    v23 = (unint64_t *)&v56->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v63;
  if (v63)
  {
    v26 = (unint64_t *)&v63->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  sub_20BDE9D48((uint64_t)v62, (_QWORD *)v62[1]);
  return a1;
}

void sub_20BE4389C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 192));
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v26);
  MEMORY[0x212B929D0](v25, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 176, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE435E8);
}

void sub_20BE439C0()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 144);
  JUMPOUT(0x20BE439F0);
}

uint64_t sub_20BE43A00(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (a2)
    return 1;
  sub_20BDDC0E4(__p, "interpretation");
  sub_20BE01E1C(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    v2 = v7[1] == 0;
    operator delete(v7[0]);
  }
  else
  {
    v2 = v8 == 0;
  }
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE43A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Alembic::AbcGeom::v12::OPointsSchema::OPointsSchema(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v13 = (std::__shared_weak_count *)a2[1];
  v38 = *a2;
  v39 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_20BE43DC4(a1, &v38, a3, a4, a5, a6, a7);
  v16 = v39;
  if (v39)
  {
    v17 = (unint64_t *)&v39->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = &unk_24C5196E8;
  *(_DWORD *)(a1 + 248) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 352), "");
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  sub_20BE46E6C(a1 + 392);
  sub_20BE304B4(a4, a5, a6, a7, &v36);
  v19 = sub_20BE3060C(a4, a5, a6, a7);
  if (v36)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 24))(&v32);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v32 + 24))(&v34);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 48))(v34, v36);
    v21 = v35;
    if (v35)
    {
      v22 = (unint64_t *)&v35->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v33;
    if (v33)
    {
      v25 = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v20 = v19;
  }
  v27 = sub_20BE312C4(a4, a5, a6, a7);
  Alembic::AbcGeom::v12::OPointsSchema::init((Alembic::AbcGeom::v12::OPointsSchema *)a1, v20, v27);
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return a1;
}

void sub_20BE43D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void **v14;
  uint64_t v15;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  sub_20BE28E38(v15);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v13 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v13 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v14);
  sub_20BE441C0(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE43DC4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v13 = (std::__shared_weak_count *)a2[1];
  v38 = *a2;
  v39 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_20BE46F38(a1, &v38, a3, a4, a5, a6, a7);
  v16 = v39;
  if (v39)
  {
    v17 = (unint64_t *)&v39->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = off_24C519770;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_20BE304B4(a4, a5, a6, a7, &v36);
  v19 = sub_20BE3060C(a4, a5, a6, a7);
  if (v36)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 24))(&v32);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v32 + 24))(&v34);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 48))(v34, v36);
    v21 = v35;
    if (v35)
    {
      v22 = (unint64_t *)&v35->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v33;
    if (v33)
    {
      v25 = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v20 = v19;
  }
  v27 = sub_20BE312C4(a4, a5, a6, a7);
  sub_20BE47050(a1, v20, v27);
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return a1;
}

void sub_20BE44060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void **v18;
  Alembic::Abc::v12::OCompoundProperty *v19;
  Alembic::Abc::v12::OCompoundProperty *v20;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v20);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v19);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v18);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a10);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(v17 + 8));
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPointsSchema::init(Alembic::AbcGeom::v12::OPointsSchema *this, int a2, char a3)
{
  *((_BYTE *)this + 568) = a3;
  *((_QWORD *)this + 72) = 0;
  *((_DWORD *)this + 146) = a2;
  if ((a3 & 1) == 0)
  {
    Alembic::AbcGeom::v12::OPointsSchema::createPositionProperty(this);
    Alembic::AbcGeom::v12::OPointsSchema::createIdProperty(this);
  }
}

void sub_20BE44150(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;
  void (*v12)(uint64_t);
  uint64_t v13;

  v11 = __cxa_begin_catch(a1);
  v12 = *(void (**)(uint64_t))(*(_QWORD *)v9 + 16);
  if (a2 == 2)
  {
    v13 = (uint64_t)v11;
    v12(v9);
    sub_20BE02570((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_20BE02504((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE4413CLL);
}

void sub_20BE441A0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BE441C0(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_24C519770;
  v2 = (void **)(a1 + 8);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

uint64_t Alembic::AbcGeom::v12::OPointsSchema::OPointsSchema(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  char v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v44 = *((_QWORD *)a2 + 4);
  v45 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *a2;
  LODWORD(v42) = 1;
  LODWORD(v43) = v14;
  sub_20BE43DC4(a1, &v44, a3, &v42, a4, a5, a6);
  v15 = v45;
  if (v45)
  {
    v16 = (unint64_t *)&v45->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)a1 = &unk_24C5196E8;
  *(_DWORD *)(a1 + 248) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 352), "");
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  sub_20BE46E6C(a1 + 392);
  LODWORD(v40) = 0;
  LODWORD(v41) = 0;
  sub_20BE304B4(a4, a5, a6, &v40, &v42);
  LODWORD(v40) = 0;
  LODWORD(v41) = 0;
  v18 = sub_20BE3060C(a4, a5, a6, &v40);
  if (v42)
  {
    v19 = *((_QWORD *)a2 + 4);
    v20 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
    v37 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v19 + 24))(&v38);
    (*(void (**)(uint64_t **__return_ptr))(*(_QWORD *)v38 + 24))(&v40);
    v23 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*v40 + 48))(v40, v42);
    v24 = v41;
    if (v41)
    {
      v25 = (unint64_t *)&v41->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v39;
    if (v39)
    {
      v28 = (unint64_t *)&v39->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (v37)
    {
      v30 = (unint64_t *)&v37->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  else
  {
    v23 = v18;
  }
  LODWORD(v40) = 0;
  LODWORD(v41) = 0;
  v32 = sub_20BE312C4(a4, a5, a6, &v40);
  Alembic::AbcGeom::v12::OPointsSchema::init((Alembic::AbcGeom::v12::OPointsSchema *)a1, v23, v32);
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return a1;
}

void sub_20BE44514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;
  void **v16;
  uint64_t v17;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  sub_20BE28E38(v17);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v15 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v15 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v16);
  sub_20BE441C0(v15);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPointsSchema::set(Alembic::AbcGeom::v12::OPointsSchema *this, uint64_t a2)
{
  BOOL v4;
  _QWORD *v5;
  uint64_t (*v6)();
  uint64_t (*v7)();
  uint64_t (*v8)();
  uint64_t (*v9)();
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (*v14)();
  uint64_t (*v15)();
  uint64_t (*v16)();
  uint64_t (*v17)();
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (*v22)();
  uint64_t (*v23)();
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (*v27)();
  uint64_t (*v28)();
  uint64_t (*v29)();
  int v30;
  uint64_t (*v31)();
  int v32;
  uint64_t (*v33)();
  _QWORD *exception;
  _QWORD *v35;
  _BYTE v36[13];
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[13];
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[13];
  void *__p;
  void *v56;
  uint64_t v57;
  void *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  char v64;
  _QWORD v65[4];
  _BYTE v66[16];
  _QWORD v67[35];

  if (*((_BYTE *)this + 568))
    v4 = 1;
  else
    v4 = *(_QWORD *)a2 == 0;
  if (v4)
  {
    Alembic::AbcGeom::v12::OPointsSchema::selectiveSet(this, a2);
    return;
  }
  v67[33] = (char *)this + 8;
  v67[34] = "OPointsSchema::set()";
  v5 = (_QWORD *)(a2 + 40);
  if (*(_DWORD *)(a2 + 48) == 127 || !*v5 && *(_QWORD *)(a2 + 64) == *(_QWORD *)(a2 + 56))
    v6 = 0;
  else
    v6 = nullsub_10;
  if (!v6)
    goto LABEL_19;
  if (*((char *)this + 375) < 0)
  {
    if (!*((_QWORD *)this + 45))
      goto LABEL_17;
LABEL_18:
    Alembic::AbcGeom::v12::OPointsSchema::createVelocityProperty(this);
    goto LABEL_19;
  }
  if (*((_BYTE *)this + 375))
    goto LABEL_18;
LABEL_17:
  if (!*((_QWORD *)this + 47))
    goto LABEL_18;
LABEL_19:
  if (*(_DWORD *)(a2 + 128) == 127 || !*(_QWORD *)(a2 + 120) && *(_QWORD *)(a2 + 144) == *(_QWORD *)(a2 + 136))
    v7 = 0;
  else
    v7 = nullsub_13;
  if (v7)
    v8 = nullsub_15;
  else
    v8 = 0;
  if (v8 && (sub_20BE296FC((uint64_t)this + 392) & 1) == 0)
    Alembic::AbcGeom::v12::OPointsSchema::createWidthsProperty((uint64_t)this, a2);
  if (!*((_QWORD *)this + 72))
  {
    if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
      v9 = 0;
    else
      v9 = nullsub_19;
    if (!v9
      || (*(_DWORD *)(a2 + 88) == 127 || !*(_QWORD *)(a2 + 80) && *(_QWORD *)(a2 + 104) == *(_QWORD *)(a2 + 96)
        ? (v16 = 0)
        : (v16 = nullsub_24),
          !v16))
    {
      sub_20BDDBD68((uint64_t)v66);
      sub_20BDDC1C8(v67, (uint64_t)"Sample 0 must have valid data for points and ids", 48);
      std::stringbuf::str();
      sub_20BDDBF20(v65, &v63);
      if (v64 < 0)
        operator delete((void *)v63);
      exception = __cxa_allocate_exception(0x20uLL);
      v35 = sub_20BDDC09C(exception, (uint64_t)v65);
      __cxa_throw(v35, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 248);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 296);
    if (*((char *)this + 375) < 0)
    {
      if (*((_QWORD *)this + 45))
        goto LABEL_66;
    }
    else if (*((_BYTE *)this + 375))
    {
LABEL_66:
      v17 = 0;
LABEL_138:
      if (v17)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 344);
      v32 = sub_20BE296FC((uint64_t)this + 392);
      v33 = nullsub_18;
      if (!v32)
        v33 = 0;
      if (v33)
        sub_20BE27904((uint64_t)this + 392, a2 + 120);
      if (*(double *)(a2 + 232) >= *(double *)(a2 + 208)
        && *(double *)(a2 + 240) >= *(double *)(a2 + 216)
        && *(double *)(a2 + 248) >= *(double *)(a2 + 224))
      {
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56), (const void *)(a2 + 208));
      }
      else
      {
        sub_20BE27074((_QWORD *)a2, (uint64_t)v66);
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56), v66);
      }
      goto LABEL_148;
    }
    if (*((_QWORD *)this + 47))
      v17 = nullsub_7;
    else
      v17 = 0;
    goto LABEL_138;
  }
  LODWORD(v58) = *((_DWORD *)this + 62);
  if (*((char *)this + 279) < 0)
  {
    sub_20BDDBFAC(&v59, *((void **)this + 32), *((_QWORD *)this + 33));
  }
  else
  {
    v59 = *((_OWORD *)this + 16);
    v60 = *((_QWORD *)this + 34);
  }
  v10 = *((_QWORD *)this + 36);
  v61 = *((_QWORD *)this + 35);
  v62 = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(a2 + 5);
  *(_QWORD *)v54 = *(_QWORD *)a2;
  *(_QWORD *)&v54[5] = v13;
  __p = 0;
  v56 = 0;
  v57 = 0;
  sub_20BDE1364(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  if (SHIBYTE(v60) < 0)
  {
    if (*((_QWORD *)&v59 + 1))
      goto LABEL_41;
  }
  else if (HIBYTE(v60))
  {
LABEL_41:
    v14 = 0;
    goto LABEL_46;
  }
  if (v61)
    v14 = nullsub_7;
  else
    v14 = 0;
LABEL_46:
  if (v14)
  {
    if (*(_DWORD *)&v54[8] == 127 || !*(_QWORD *)v54 && v56 == __p)
      v15 = 0;
    else
      v15 = nullsub_19;
    if (v15)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v58);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v58);
  }
  if (__p)
  {
    v56 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v58);
  LODWORD(v49) = *((_DWORD *)this + 74);
  if (*((char *)this + 327) < 0)
  {
    sub_20BDDBFAC(&v50, *((void **)this + 38), *((_QWORD *)this + 39));
  }
  else
  {
    v50 = *((_OWORD *)this + 19);
    v51 = *((_QWORD *)this + 40);
  }
  v18 = *((_QWORD *)this + 42);
  v52 = *((_QWORD *)this + 41);
  v53 = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *(_QWORD *)(a2 + 85);
  *(_QWORD *)v45 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)&v45[5] = v21;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  sub_20BDE1364(&v46, *(const void **)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3);
  if (SHIBYTE(v51) < 0)
  {
    if (*((_QWORD *)&v50 + 1))
      goto LABEL_78;
  }
  else if (HIBYTE(v51))
  {
LABEL_78:
    v22 = 0;
    goto LABEL_83;
  }
  if (v52)
    v22 = nullsub_7;
  else
    v22 = 0;
LABEL_83:
  if (v22)
  {
    if (*(_DWORD *)&v45[8] == 127 || !*(_QWORD *)v45 && v47 == v46)
      v23 = 0;
    else
      v23 = nullsub_24;
    if (v23)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v49);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v49);
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v49);
  LODWORD(v40) = *((_DWORD *)this + 86);
  if (*((char *)this + 375) < 0)
  {
    sub_20BDDBFAC(&v41, *((void **)this + 44), *((_QWORD *)this + 45));
  }
  else
  {
    v41 = *((_OWORD *)this + 22);
    v42 = *((_QWORD *)this + 46);
  }
  v24 = *((_QWORD *)this + 48);
  v43 = *((_QWORD *)this + 47);
  v44 = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)v36 = *v5;
  *(_QWORD *)&v36[5] = *(_QWORD *)(a2 + 45);
  v37 = 0;
  v38 = 0;
  v39 = 0;
  sub_20BDE1364(&v37, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  if (SHIBYTE(v42) < 0)
  {
    if (*((_QWORD *)&v41 + 1))
      goto LABEL_102;
LABEL_104:
    if (v43)
      v27 = nullsub_7;
    else
      v27 = 0;
    goto LABEL_107;
  }
  if (!HIBYTE(v42))
    goto LABEL_104;
LABEL_102:
  v27 = 0;
LABEL_107:
  if (v27)
  {
    if (*(_DWORD *)&v36[8] == 127 || !*(_QWORD *)v36 && v38 == v37)
      v28 = 0;
    else
      v28 = nullsub_10;
    if (v28)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v40);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v40);
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v40);
  if (*(double *)(a2 + 232) <= *(double *)(a2 + 208)
    || *(double *)(a2 + 240) <= *(double *)(a2 + 216)
    || *(double *)(a2 + 248) <= *(double *)(a2 + 224))
  {
    if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
      v29 = 0;
    else
      v29 = nullsub_19;
    if (v29)
    {
      sub_20BE27074((_QWORD *)a2, (uint64_t)v66);
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56), v66);
    }
    else
    {
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56));
    }
  }
  else
  {
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56), (const void *)(a2 + 208));
  }
  v30 = sub_20BE296FC((uint64_t)this + 392);
  v31 = nullsub_18;
  if (!v30)
    v31 = 0;
  if (v31)
    sub_20BE27904((uint64_t)this + 392, a2 + 120);
LABEL_148:
  ++*((_QWORD *)this + 72);
}

void sub_20BE44DB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::exception a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;
  void *v53;

  sub_20BDDC194(&a46);
  sub_20BDDBE98((uint64_t)&a50);
  v53 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v50 - 64, (uint64_t)v53);
  else
    sub_20BE02504(v50 - 64, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE44D1CLL);
}

void sub_20BE44EB0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPointsSchema::selectiveSet(Alembic::AbcGeom::v12::OPointsSchema *this, uint64_t a2)
{
  uint64_t (*v4)();
  int v5;
  uint64_t (*v6)();
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t (*v13)();
  _QWORD *v14;
  uint64_t (*v15)();
  int v16;
  uint64_t (*v17)();
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (*v21)();
  uint64_t (*v22)();
  uint64_t (*v23)();
  uint64_t (*v24)();
  uint64_t (*v25)();
  uint64_t (*v26)();
  int v27;
  uint64_t (*v28)();
  _BYTE v29[13];
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[48];
  _BYTE v39[13];
  void *__p;
  void *v41;
  uint64_t v42;
  void *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  const char *v49;

  v48 = (char *)this + 8;
  v49 = "OPointsSchema::set()";
  if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
    v4 = 0;
  else
    v4 = nullsub_19;
  if (v4)
  {
    if (*((char *)this + 279) < 0)
    {
      if (!*((_QWORD *)this + 33))
        goto LABEL_11;
    }
    else if (!*((_BYTE *)this + 279))
    {
LABEL_11:
      if (*((_QWORD *)this + 35))
        goto LABEL_13;
    }
    Alembic::AbcGeom::v12::OPointsSchema::createPositionProperty(this);
  }
LABEL_13:
  v5 = *((char *)this + 279);
  if (v5 < 0)
  {
    if (*((_QWORD *)this + 33))
      goto LABEL_57;
  }
  else if (*((_BYTE *)this + 279))
  {
    goto LABEL_57;
  }
  if (*((_QWORD *)this + 35))
    v6 = nullsub_7;
  else
    v6 = 0;
  if (!v6)
    goto LABEL_57;
  LODWORD(v43) = *((_DWORD *)this + 62);
  if (v5 < 0)
  {
    sub_20BDDBFAC(&v44, *((void **)this + 32), *((_QWORD *)this + 33));
  }
  else
  {
    v44 = *((_OWORD *)this + 16);
    v45 = *((_QWORD *)this + 34);
  }
  v7 = *((_QWORD *)this + 36);
  v46 = *((_QWORD *)this + 35);
  v47 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a2 + 5);
  *(_QWORD *)v39 = *(_QWORD *)a2;
  *(_QWORD *)&v39[5] = v10;
  __p = 0;
  v41 = 0;
  v42 = 0;
  sub_20BDE1364(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  if (SHIBYTE(v45) < 0)
  {
    if (*((_QWORD *)&v44 + 1))
      goto LABEL_29;
LABEL_31:
    if (v46)
      v11 = nullsub_7;
    else
      v11 = 0;
    goto LABEL_34;
  }
  if (!HIBYTE(v45))
    goto LABEL_31;
LABEL_29:
  v11 = 0;
LABEL_34:
  if (v11)
  {
    if (*(_DWORD *)&v39[8] == 127 || !*(_QWORD *)v39 && v41 == __p)
      v12 = 0;
    else
      v12 = nullsub_19;
    if (v12)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v43);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v43);
  }
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v43);
  if (*(double *)(a2 + 232) <= *(double *)(a2 + 208)
    || *(double *)(a2 + 240) <= *(double *)(a2 + 216)
    || *(double *)(a2 + 248) <= *(double *)(a2 + 224))
  {
    if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
      v13 = 0;
    else
      v13 = nullsub_19;
    if (v13)
    {
      sub_20BE27074((_QWORD *)a2, (uint64_t)v38);
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56), v38);
    }
    else
    {
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56));
    }
  }
  else
  {
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56), (const void *)(a2 + 208));
  }
LABEL_57:
  v14 = (_QWORD *)(a2 + 80);
  if (*(_DWORD *)(a2 + 88) == 127 || !*v14 && *(_QWORD *)(a2 + 104) == *(_QWORD *)(a2 + 96))
    v15 = 0;
  else
    v15 = nullsub_24;
  if (v15)
  {
    if (*((char *)this + 327) < 0)
    {
      if (!*((_QWORD *)this + 39))
        goto LABEL_67;
    }
    else if (!*((_BYTE *)this + 327))
    {
LABEL_67:
      if (*((_QWORD *)this + 41))
        goto LABEL_69;
    }
    Alembic::AbcGeom::v12::OPointsSchema::createIdProperty(this);
  }
LABEL_69:
  v16 = *((char *)this + 327);
  if (v16 < 0)
  {
    if (*((_QWORD *)this + 39))
      goto LABEL_102;
  }
  else if (*((_BYTE *)this + 327))
  {
    goto LABEL_102;
  }
  if (*((_QWORD *)this + 41))
    v17 = nullsub_7;
  else
    v17 = 0;
  if (!v17)
    goto LABEL_102;
  LODWORD(v33) = *((_DWORD *)this + 74);
  if (v16 < 0)
  {
    sub_20BDDBFAC(&v34, *((void **)this + 38), *((_QWORD *)this + 39));
  }
  else
  {
    v34 = *((_OWORD *)this + 19);
    v35 = *((_QWORD *)this + 40);
  }
  v18 = *((_QWORD *)this + 42);
  v36 = *((_QWORD *)this + 41);
  v37 = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *(_QWORD *)v29 = *v14;
  *(_QWORD *)&v29[5] = *(_QWORD *)(a2 + 85);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  sub_20BDE1364(&v30, *(const void **)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3);
  if (SHIBYTE(v35) < 0)
  {
    if (*((_QWORD *)&v34 + 1))
      goto LABEL_85;
LABEL_87:
    if (v36)
      v21 = nullsub_7;
    else
      v21 = 0;
    goto LABEL_90;
  }
  if (!HIBYTE(v35))
    goto LABEL_87;
LABEL_85:
  v21 = 0;
LABEL_90:
  if (v21)
  {
    if (*(_DWORD *)&v29[8] == 127 || !*(_QWORD *)v29 && v31 == v30)
      v22 = 0;
    else
      v22 = nullsub_24;
    if (v22)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v33);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v33);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v33);
LABEL_102:
  if (*(_DWORD *)(a2 + 48) == 127 || !*(_QWORD *)(a2 + 40) && *(_QWORD *)(a2 + 64) == *(_QWORD *)(a2 + 56))
    v23 = 0;
  else
    v23 = nullsub_10;
  if (v23)
  {
    if (*((char *)this + 375) < 0)
    {
      if (!*((_QWORD *)this + 45))
        goto LABEL_112;
    }
    else if (!*((_BYTE *)this + 375))
    {
LABEL_112:
      if (*((_QWORD *)this + 47))
        goto LABEL_114;
    }
    Alembic::AbcGeom::v12::OPointsSchema::createVelocityProperty(this);
  }
LABEL_114:
  if (*((char *)this + 375) < 0)
  {
    if (*((_QWORD *)this + 45))
      goto LABEL_116;
  }
  else if (*((_BYTE *)this + 375))
  {
LABEL_116:
    v24 = 0;
    goto LABEL_121;
  }
  if (*((_QWORD *)this + 47))
    v24 = nullsub_7;
  else
    v24 = 0;
LABEL_121:
  if (v24)
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 344);
  if (*(_DWORD *)(a2 + 128) == 127 || !*(_QWORD *)(a2 + 120) && *(_QWORD *)(a2 + 144) == *(_QWORD *)(a2 + 136))
    v25 = 0;
  else
    v25 = nullsub_13;
  if (v25)
    v26 = nullsub_15;
  else
    v26 = 0;
  if (v26 && (sub_20BE296FC((uint64_t)this + 392) & 1) == 0)
    Alembic::AbcGeom::v12::OPointsSchema::createWidthsProperty((uint64_t)this, a2);
  v27 = sub_20BE296FC((uint64_t)this + 392);
  v28 = nullsub_18;
  if (!v27)
    v28 = 0;
  if (v28)
    sub_20BE27904((uint64_t)this + 392, a2 + 120);
  ++*((_QWORD *)this + 72);
}

void sub_20BE454CC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;

  v31 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v29 - 64, (uint64_t)v31);
  else
    sub_20BE02504(v29 - 64, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE454B4);
}

void sub_20BE45568(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPointsSchema::createVelocityProperty(Alembic::AbcGeom::v12::OPointsSchema *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t *v20[2];
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  std::string v27;
  uint64_t v28;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v24 = *((_QWORD *)this + 5);
  v25 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(&__p, ".velocities");
  sub_20BE46B44((uint64_t)this, &v18);
  LODWORD(v20[0]) = 4;
  v20[1] = &v18;
  LODWORD(v16) = 0;
  v17 = 0;
  LODWORD(v14) = 0;
  v15 = 0;
  LODWORD(v12) = 0;
  v13 = 0;
  sub_20BE2A6A0((uint64_t)&v26, &v24, (uint64_t)&__p, v20, &v16, &v14, &v12);
  *((_DWORD *)this + 86) = (_DWORD)v26;
  std::string::operator=((std::string *)((char *)this + 352), &v27);
  sub_20BDE881C((_QWORD *)this + 47, &v28);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v26);
  v5 = v19;
  if (v19)
  {
    v6 = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (SHIBYTE(v23) < 0)
    operator delete(__p);
  v8 = v25;
  if (v25)
  {
    v9 = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __p = 0;
  v22 = 0;
  v23 = 0;
  sub_20BE29E5C(&v26, (uint64_t *)&__p);
  if (*((_QWORD *)this + 72))
  {
    v11 = 0;
    do
    {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 344);
      ++v11;
    }
    while (v11 < *((_QWORD *)this + 72));
  }
  if (v27.__r_.__value_.__l.__size_)
  {
    v27.__r_.__value_.__r.__words[2] = v27.__r_.__value_.__l.__size_;
    operator delete((void *)v27.__r_.__value_.__l.__size_);
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20BE45748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::OPointsSchema::createWidthsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t *v29;
  int v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  void *__dst[2];
  void *v38;
  _BYTE *v39;
  std::string v40;
  void *__p;
  _BYTE *v42;
  void *v43;
  std::string v44;
  uint64_t v45[2];
  uint64_t v46;
  int v47;
  std::string v48;
  uint64_t v49[2];
  uint64_t *v50;
  uint64_t *v51;
  void *v52;
  void *v53;
  _BYTE v54[13];
  _BYTE *v55;
  _BYTE *v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[24];
  void *v60;
  void *v61;
  uint64_t v62;
  int data;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;

  v67 = 0;
  v68 = 0;
  v69 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  *(_QWORD *)&v57 = 0;
  *((_QWORD *)&v57 + 1) = 0x10000000ALL;
  v58 = 0u;
  *(_OWORD *)v59 = 0u;
  *(_QWORD *)&v59[16] = 0x100000005;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  data = 127;
  if (*(_DWORD *)(a2 + 168) == 127 || !*(_QWORD *)(a2 + 160) && *(_QWORD *)(a2 + 184) == *(_QWORD *)(a2 + 176))
    v4 = 0;
  else
    v4 = nullsub_21;
  if (v4)
  {
    sub_20BE2DEC0(v54, (uint64_t *)&v67);
    sub_20BE2AD84(&v50, (uint64_t *)&v64);
    sub_20BE2DF60((uint64_t)__dst, (uint64_t *)v54, (uint64_t *)&v50, *(_DWORD *)(a2 + 200));
    *(void **)&v57 = __dst[0];
    *(void **)((char *)&v57 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v58, (char *)v38, (uint64_t)v39, (v39 - (_BYTE *)v38) >> 3);
    *(_QWORD *)&v59[8] = v40.__r_.__value_.__l.__size_;
    *(_QWORD *)&v59[13] = *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v60, (char *)__p, (uint64_t)v42, (v42 - (_BYTE *)__p) >> 3);
    data = (int)v44.__r_.__value_.__l.__data_;
    if (__p)
    {
      v42 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    if (v52)
    {
      v53 = v52;
      operator delete(v52);
    }
    if (v55)
    {
      v56 = v55;
      operator delete(v55);
    }
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    v35 = *(uint64_t **)(a1 + 40);
    v36 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    sub_20BDDC0E4(v54, ".widths");
    v8 = *(_DWORD *)(a2 + 200);
    sub_20BE46B44(a1, &v33);
    LODWORD(v50) = 4;
    v51 = &v33;
    LODWORD(v31) = 0;
    v32 = 0;
    LODWORD(v29) = 0;
    v30 = 0;
    sub_20BE2E010((char *)__dst, &v35, (uint64_t)v54, 1, v8, 1, &v50, &v31, &v29);
    v9 = (void **)(a1 + 392);
    if (*(char *)(a1 + 415) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 408) = v38;
    HIBYTE(v38) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 416) = (_DWORD)v39;
    std::string::operator=((std::string *)(a1 + 424), &v40);
    sub_20BDE881C((_QWORD *)(a1 + 448), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 464) = (_DWORD)v43;
    std::string::operator=((std::string *)(a1 + 472), &v44);
    sub_20BDE881C((_QWORD *)(a1 + 496), v45);
    *(_QWORD *)(a1 + 512) = v46;
    *(_DWORD *)(a1 + 520) = v47;
    std::string::operator=((std::string *)(a1 + 528), &v48);
    sub_20BDE881C((_QWORD *)(a1 + 552), v49);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v47);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v43);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v39);
    if (SHIBYTE(v38) < 0)
      operator delete(__dst[0]);
    v10 = v34;
    if (v34)
    {
      v11 = (unint64_t *)&v34->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (SHIBYTE(v55) < 0)
      operator delete(*(void **)v54);
    v13 = v36;
    if (v36)
    {
      v14 = (unint64_t *)&v36->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      goto LABEL_56;
    }
  }
  else
  {
    sub_20BE2DEC0(v54, (uint64_t *)&v67);
    v16 = *(_DWORD *)(a2 + 200);
    __dst[0] = *(void **)v54;
    *(void **)((char *)__dst + 5) = *(void **)&v54[5];
    v38 = 0;
    v39 = 0;
    v40.__r_.__value_.__r.__words[0] = 0;
    sub_20BDE1364(&v38, v55, (uint64_t)v56, (v56 - v55) >> 3);
    v40.__r_.__value_.__l.__size_ = 0;
    v40.__r_.__value_.__r.__words[2] = 0x100000005;
    v42 = 0;
    v43 = 0;
    __p = 0;
    LODWORD(v44.__r_.__value_.__l.__data_) = v16;
    *(void **)&v57 = __dst[0];
    *(void **)((char *)&v57 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v58, (char *)v38, (uint64_t)v39, (v39 - (_BYTE *)v38) >> 3);
    *(_QWORD *)&v59[8] = v40.__r_.__value_.__l.__size_;
    *(_QWORD *)&v59[13] = *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v60, (char *)__p, (uint64_t)v42, (v42 - (_BYTE *)__p) >> 3);
    data = (int)v44.__r_.__value_.__l.__data_;
    if (__p)
    {
      v42 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    if (v55)
    {
      v56 = v55;
      operator delete(v55);
    }
    v17 = *(std::__shared_weak_count **)(a1 + 48);
    v27 = *(uint64_t **)(a1 + 40);
    v28 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    sub_20BDDC0E4(v54, ".widths");
    v20 = *(_DWORD *)(a2 + 200);
    sub_20BE46B44(a1, &v33);
    LODWORD(v50) = 4;
    v51 = &v33;
    LODWORD(v31) = 0;
    v32 = 0;
    LODWORD(v29) = 0;
    v30 = 0;
    sub_20BE2E010((char *)__dst, &v27, (uint64_t)v54, 0, v20, 1, &v50, &v31, &v29);
    v21 = (void **)(a1 + 392);
    if (*(char *)(a1 + 415) < 0)
      operator delete(*v21);
    *(_OWORD *)v21 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 408) = v38;
    HIBYTE(v38) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 416) = (_DWORD)v39;
    std::string::operator=((std::string *)(a1 + 424), &v40);
    sub_20BDE881C((_QWORD *)(a1 + 448), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 464) = (_DWORD)v43;
    std::string::operator=((std::string *)(a1 + 472), &v44);
    sub_20BDE881C((_QWORD *)(a1 + 496), v45);
    *(_QWORD *)(a1 + 512) = v46;
    *(_DWORD *)(a1 + 520) = v47;
    std::string::operator=((std::string *)(a1 + 528), &v48);
    sub_20BDE881C((_QWORD *)(a1 + 552), v49);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v47);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v43);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v39);
    if (SHIBYTE(v38) < 0)
      operator delete(__dst[0]);
    v22 = v34;
    if (v34)
    {
      v23 = (unint64_t *)&v34->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (SHIBYTE(v55) < 0)
      operator delete(*(void **)v54);
    v13 = v28;
    if (v28)
    {
      v25 = (unint64_t *)&v28->__shared_owners_;
      do
        v15 = __ldaxr(v25);
      while (__stlxr(v15 - 1, v25));
LABEL_56:
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  if (*(_QWORD *)(a1 + 576))
  {
    v26 = 0;
    do
    {
      sub_20BE27904(a1 + 392, (uint64_t)&v57);
      ++v26;
    }
    while (v26 < *(_QWORD *)(a1 + 576));
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if ((_QWORD)v58)
  {
    *((_QWORD *)&v58 + 1) = v58;
    operator delete((void *)v58);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
}

void sub_20BE45E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  uint64_t v45;
  void *v47;
  void *v48;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a16);
  if (*(char *)(v45 - 233) < 0)
    operator delete(*(void **)(v45 - 256));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  sub_20BE28D2C((_QWORD *)(v45 - 216));
  v47 = *(void **)(v45 - 128);
  if (v47)
  {
    *(_QWORD *)(v45 - 120) = v47;
    operator delete(v47);
  }
  v48 = *(void **)(v45 - 104);
  if (v48)
  {
    *(_QWORD *)(v45 - 96) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPointsSchema::createPositionProperty(Alembic::AbcGeom::v12::OPointsSchema *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *__p[2];
  void *v12;
  void *v13;
  void *v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  std::string v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29[2];

  v29[0] = 0;
  v29[1] = 0;
  v28 = (uint64_t *)v29;
  sub_20BE288A4(&v28, 2);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v23 = *((_QWORD *)this + 5);
  v24 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, "P");
  LODWORD(v14) = 3;
  v15 = &v28;
  v5 = *((_DWORD *)this + 146);
  LODWORD(v21) = 2;
  v22 = v5;
  LODWORD(v19) = 0;
  v20 = 0;
  LODWORD(v17) = 0;
  v18 = 0;
  sub_20BE2981C((uint64_t)&v25, &v23, (uint64_t)__p, (uint64_t **)&v14, &v21, &v19, &v17);
  *((_DWORD *)this + 62) = (_DWORD)v25;
  std::string::operator=((std::string *)((char *)this + 256), &v26);
  sub_20BDE881C((_QWORD *)this + 35, &v27);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v25);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  v6 = v24;
  if (v24)
  {
    v7 = (unint64_t *)&v24->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  sub_20BE29E5C(&v25, (uint64_t *)&v14);
  if (*((_QWORD *)this + 72))
  {
    v9 = 0;
    do
    {
      sub_20BE29F08(__p, (uint64_t *)&v25);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 248);
      if (v12)
      {
        v13 = v12;
        operator delete(v12);
      }
      ++v9;
      v10 = *((_QWORD *)this + 72);
    }
    while (v9 < v10);
  }
  else
  {
    v10 = 0;
  }
  sub_20BE46918((uint64_t)this, *((_DWORD *)this + 146), v10);
  if (v26.__r_.__value_.__l.__size_)
  {
    v26.__r_.__value_.__r.__words[2] = v26.__r_.__value_.__l.__size_;
    operator delete((void *)v26.__r_.__value_.__l.__size_);
  }
  if (v14)
  {
    v15 = (uint64_t **)v14;
    operator delete(v14);
  }
  sub_20BDE9D48((uint64_t)&v28, v29[0]);
}

void sub_20BE46130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 88);
  if (v29)
  {
    *(_QWORD *)(v27 - 80) = v29;
    operator delete(v29);
  }
  if (__p)
    operator delete(__p);
  sub_20BDE9D48(v27 - 56, *(_QWORD **)(v27 - 48));
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPointsSchema::createIdProperty(Alembic::AbcGeom::v12::OPointsSchema *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  void *__p[2];
  void *v11;
  void *v12;
  void *v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *v24;
  std::string v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28[2];

  v28[0] = 0;
  v28[1] = 0;
  v27 = (uint64_t *)v28;
  sub_20BE288A4(&v27, 2);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v22 = *((_QWORD *)this + 5);
  v23 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".pointIds");
  LODWORD(v13) = 3;
  v14 = &v27;
  v5 = *((_DWORD *)this + 146);
  LODWORD(v20) = 2;
  v21 = v5;
  LODWORD(v18) = 0;
  v19 = 0;
  LODWORD(v16) = 0;
  v17 = 0;
  sub_20BE475CC((uint64_t)&v24, &v22, (uint64_t)__p, (uint64_t **)&v13, &v20, &v18, &v16);
  *((_DWORD *)this + 74) = (_DWORD)v24;
  std::string::operator=((std::string *)((char *)this + 304), &v25);
  sub_20BDE881C((_QWORD *)this + 41, &v26);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v24);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  v6 = v23;
  if (v23)
  {
    v7 = (unint64_t *)&v23->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  sub_20BE47B58(&v24, (uint64_t *)&v13);
  if (*((_QWORD *)this + 72))
  {
    v9 = 0;
    do
    {
      sub_20BE47BF8(__p, (uint64_t *)&v24);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 296);
      if (v11)
      {
        v12 = v11;
        operator delete(v11);
      }
      ++v9;
    }
    while (v9 < *((_QWORD *)this + 72));
  }
  if (v25.__r_.__value_.__l.__size_)
  {
    v25.__r_.__value_.__r.__words[2] = v25.__r_.__value_.__l.__size_;
    operator delete((void *)v25.__r_.__value_.__l.__size_);
  }
  if (v13)
  {
    v14 = (uint64_t **)v13;
    operator delete(v13);
  }
  sub_20BDE9D48((uint64_t)&v27, v28[0]);
}

void sub_20BE46394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  if (__p)
    operator delete(__p);
  sub_20BDE9D48(v27 - 56, *(_QWORD **)(v27 - 48));
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OPointsSchema::setFromPrevious(Alembic::AbcGeom::v12::OPointsSchema *this)
{
  uint64_t (*v2)();
  uint64_t (*v3)();
  uint64_t (*v4)();
  uint64_t (*v5)();
  _BYTE *v6;
  uint64_t result;
  uint64_t (*v8)();

  if (*((char *)this + 279) < 0)
  {
    if (*((_QWORD *)this + 33))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 279))
  {
LABEL_3:
    v2 = 0;
    goto LABEL_8;
  }
  if (*((_QWORD *)this + 35))
    v2 = nullsub_7;
  else
    v2 = 0;
LABEL_8:
  if (v2)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 248));
  if (*((char *)this + 327) < 0)
  {
    if (*((_QWORD *)this + 39))
      goto LABEL_12;
  }
  else if (*((_BYTE *)this + 327))
  {
LABEL_12:
    v3 = 0;
    goto LABEL_17;
  }
  if (*((_QWORD *)this + 41))
    v3 = nullsub_7;
  else
    v3 = 0;
LABEL_17:
  if (v3)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 296));
  if (*((char *)this + 87) < 0)
  {
    if (*((_QWORD *)this + 9))
      goto LABEL_21;
  }
  else if (*((_BYTE *)this + 87))
  {
LABEL_21:
    v4 = 0;
    goto LABEL_26;
  }
  if (*((_QWORD *)this + 11))
    v4 = nullsub_6;
  else
    v4 = 0;
LABEL_26:
  if (v4)
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56));
  if (*((char *)this + 375) < 0)
  {
    if (*((_QWORD *)this + 45))
      goto LABEL_30;
  }
  else if (*((_BYTE *)this + 375))
  {
LABEL_30:
    v5 = 0;
    goto LABEL_35;
  }
  if (*((_QWORD *)this + 47))
    v5 = nullsub_7;
  else
    v5 = 0;
LABEL_35:
  if (v5)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 344));
  v6 = (char *)this + 392;
  result = sub_20BE296FC((uint64_t)v6);
  v8 = nullsub_18;
  if (!(_DWORD)result)
    v8 = 0;
  if (v8)
    return sub_20BE28808(v6);
  return result;
}

void sub_20BE465B8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE465A8);
}

void sub_20BE465EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OPointsSchema::setTimeSampling(Alembic::AbcGeom::v12::OPointsSchema *this, int a2)
{
  uint64_t (*v3)();
  uint64_t (*v4)();
  uint64_t (*v5)();
  uint64_t result;
  uint64_t (*v7)();
  uint64_t (*v8)();

  *((_DWORD *)this + 146) = a2;
  if (*((char *)this + 279) < 0)
  {
    if (*((_QWORD *)this + 33))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 279))
  {
LABEL_3:
    v3 = 0;
    goto LABEL_8;
  }
  if (*((_QWORD *)this + 35))
    v3 = nullsub_7;
  else
    v3 = 0;
LABEL_8:
  if (v3)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 248));
  if (*((char *)this + 327) < 0)
  {
    if (*((_QWORD *)this + 39))
      goto LABEL_12;
  }
  else if (*((_BYTE *)this + 327))
  {
LABEL_12:
    v4 = 0;
    goto LABEL_17;
  }
  if (*((_QWORD *)this + 41))
    v4 = nullsub_7;
  else
    v4 = 0;
LABEL_17:
  if (v4)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 296));
  if (*((char *)this + 87) < 0)
  {
    if (*((_QWORD *)this + 9))
      goto LABEL_21;
  }
  else if (*((_BYTE *)this + 87))
  {
LABEL_21:
    v5 = 0;
    goto LABEL_26;
  }
  if (*((_QWORD *)this + 11))
    v5 = nullsub_6;
  else
    v5 = 0;
LABEL_26:
  if (v5)
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56));
  result = sub_20BE296FC((uint64_t)this + 392);
  v7 = nullsub_18;
  if (!(_DWORD)result)
    v7 = 0;
  if (v7)
    result = sub_20BE29364((_BYTE *)this + 392);
  if (*((char *)this + 375) < 0)
  {
    if (*((_QWORD *)this + 45))
      goto LABEL_34;
LABEL_36:
    if (*((_QWORD *)this + 47))
      v8 = nullsub_7;
    else
      v8 = 0;
    goto LABEL_39;
  }
  if (!*((_BYTE *)this + 375))
    goto LABEL_36;
LABEL_34:
  v8 = 0;
LABEL_39:
  if (v8)
    return Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 344));
  return result;
}

void sub_20BE467BC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE467A8);
}

void sub_20BE467F0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

int *Alembic::AbcGeom::v12::OPointsSchema::setTimeSampling(Alembic::AbcGeom::v12::OPointsSchema *a1, _QWORD *a2)
{
  int *result;
  int v4;
  _BYTE v5[56];
  _BYTE v6[48];
  int *v7;
  const char *v8;

  result = (int *)((char *)a1 + 8);
  v7 = result;
  v8 = "OPointsSchema::setTimeSampling( TimeSamplingPtr)";
  if (*a2)
  {
    sub_20BE1A75C(result, (uint64_t)v5);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v5, (uint64_t)v6);
    v4 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v6);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v6);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v5);
    return (int *)Alembic::AbcGeom::v12::OPointsSchema::setTimeSampling(a1, v4);
  }
  return result;
}

void sub_20BE46890(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void *v19;

  v19 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v17 - 32, (uint64_t)v19);
  else
    sub_20BE02504(v17 - 32, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE46880);
}

void sub_20BE468F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE46918(uint64_t a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  Alembic::Abc::v12::OScalarProperty *v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  int v20;
  void *__p[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _OWORD v25[2];
  int64x2_t v26;
  uint64_t v27;
  const char *v28;

  v27 = a1 + 8;
  v28 = "OGeomBaseSchema::createSelfBoundsProperty()";
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(_QWORD *)(a1 + 72))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 87))
  {
LABEL_5:
    if (*(_QWORD *)(a1 + 88))
      return;
  }
  v6 = *(std::__shared_weak_count **)(a1 + 48);
  v23 = *(_QWORD *)(a1 + 40);
  v24 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".selfBnds");
  LODWORD(v19) = 2;
  v20 = a2;
  LODWORD(v17) = 0;
  v18 = 0;
  LODWORD(v15) = 0;
  v16 = 0;
  LODWORD(v13) = 0;
  v14 = 0;
  sub_20BE1C558((uint64_t)v25, &v23, (uint64_t)__p, &v19, &v17, &v15, &v13);
  *(_DWORD *)(a1 + 56) = v25[0];
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)((char *)v25 + 8));
  sub_20BDE881C((_QWORD *)(a1 + 88), v26.i64);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)v25);
  if (v22 < 0)
    operator delete(__p[0]);
  v9 = v24;
  if (v24)
  {
    v10 = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v25[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v25[1] = xmmword_20CA521E0;
  v26 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (a3)
  {
    v12 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 56);
    do
    {
      Alembic::Abc::v12::OScalarProperty::set(v12, v25);
      --a3;
    }
    while (a3);
  }
}

void sub_20BE46AA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;
  void *v27;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v24 - 96));
  if (a23 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a24);
  v27 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v24 - 48, (uint64_t)v27);
  else
    sub_20BE02504(v24 - 48, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE46A90);
}

void sub_20BE46B24(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE46B44(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE v7[56];
  _BYTE v8[48];

  if (*(char *)(a1 + 279) < 0)
  {
    if (!*(_QWORD *)(a1 + 264))
      goto LABEL_5;
LABEL_10:
    sub_20BE1A75C((int *)(a1 + 8), (uint64_t)v7);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v7, (uint64_t)v8);
    Alembic::Abc::v12::OArchive::getTimeSampling((Alembic::Abc::v12::OArchive *)v8, a2);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v8);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v7);
    return;
  }
  if (*(_BYTE *)(a1 + 279))
    goto LABEL_10;
LABEL_5:
  if (!*(_QWORD *)(a1 + 280))
    goto LABEL_10;
  v3 = sub_20BE295E0(a1 + 248);
  v4 = *(_QWORD *)(v3 + 72);
  *a2 = *(_QWORD *)(v3 + 64);
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_20BE46BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)va1);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)va);
  _Unwind_Resume(a1);
}

void sub_20BE46C14(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20BE47D64(a1);
  operator delete(v1);
}

void sub_20BE46C28(_QWORD *a1)
{
  sub_20BDEBF08(a1 + 35);
  MEMORY[0x212B929D0](a1 + 32, "");
  sub_20BDEBF08(a1 + 41);
  MEMORY[0x212B929D0](a1 + 38, "");
  sub_20BDEBF08(a1 + 47);
  MEMORY[0x212B929D0](a1 + 44, "");
  sub_20BE29790((uint64_t)(a1 + 49));
  sub_20BE46DBC(a1);
}

uint64_t sub_20BE46C94(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return *(_BYTE *)(a1 + 568) != 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return *(_BYTE *)(a1 + 568) != 0;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    if (*(char *)(a1 + 279) < 0)
    {
      if (*(_QWORD *)(a1 + 264))
        return *(_BYTE *)(a1 + 568) != 0;
    }
    else if (*(_BYTE *)(a1 + 279))
    {
      return *(_BYTE *)(a1 + 568) != 0;
    }
    if (*(_QWORD *)(a1 + 280))
    {
      if (*(char *)(a1 + 327) < 0)
      {
        if (*(_QWORD *)(a1 + 312))
          return *(_BYTE *)(a1 + 568) != 0;
      }
      else if (*(_BYTE *)(a1 + 327))
      {
        return *(_BYTE *)(a1 + 568) != 0;
      }
      if (*(_QWORD *)(a1 + 328))
        return 1;
    }
  }
  return *(_BYTE *)(a1 + 568) != 0;
}

uint64_t sub_20BE46D0C(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_24C519770;
  v2 = (void **)(a1 + 8);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_20BE46D64(void **a1)
{
  void **v2;

  *a1 = off_24C519770;
  v2 = a1 + 1;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a1 + 13);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a1 + 7);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  operator delete(a1);
}

void sub_20BE46DBC(_QWORD *a1)
{
  sub_20BDEBF08(a1 + 11);
  MEMORY[0x212B929D0](a1 + 8, "");
  sub_20BDEBF08(a1 + 17);
  MEMORY[0x212B929D0](a1 + 14, "");
  sub_20BDEBF08(a1 + 23);
  MEMORY[0x212B929D0](a1 + 20, "");
  sub_20BDEBF08(a1 + 29);
  MEMORY[0x212B929D0](a1 + 26, "");
  sub_20BDEBF08(a1 + 5);
  JUMPOUT(0x212B929D0);
}

BOOL sub_20BE46E40(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 40) != 0;
}

uint64_t sub_20BE46E6C(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 32), "");
  *(_DWORD *)(a1 + 72) = 2;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 80), "");
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 124) = 0x20000007FLL;
  sub_20BDDC0E4((_QWORD *)(a1 + 136), "");
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  return a1;
}

void sub_20BE46EFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE46F38(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C5197A0;
  v14 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  sub_20BE47108(a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE47034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v9);
  _Unwind_Resume(a1);
}

void sub_20BE47050(uint64_t a1, int a2, char a3)
{
  if ((a3 & 1) == 0)
    sub_20BE46918(a1, a2, 0);
}

void sub_20BE47098(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;
  void (*v12)(uint64_t);
  uint64_t v13;

  v11 = __cxa_begin_catch(a1);
  v12 = *(void (**)(uint64_t))(*(_QWORD *)v9 + 16);
  if (a2 == 2)
  {
    v13 = (uint64_t)v11;
    v12(v9);
    sub_20BE02570((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_20BE02504((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE47084);
}

void sub_20BE470E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE47108(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t *v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *exception;
  _QWORD *v23;
  std::string __p;
  void *v25[2];
  char v26;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD v29[37];
  int v30;
  const void **v31[4];
  std::__shared_weak_count *v32;
  int v33;
  uint64_t v34;
  void **v35;

  v28 = 0;
  v29[0] = 0;
  v27 = (uint64_t *)&v28;
  v29[35] = 0;
  v29[36] = 0;
  v30 = 2;
  sub_20BDEBF8C((uint64_t *)v31, (const void ***)&v27);
  v31[3] = 0;
  v32 = 0;
  v33 = 0;
  v34 = 1;
  sub_20BDE9D48((uint64_t)&v27, v28);
  sub_20BE02E30(a4, (uint64_t)&v30);
  sub_20BE02E30(a5, (uint64_t)&v30);
  sub_20BE02E30(a6, (uint64_t)&v30);
  sub_20BE02E30(a7, (uint64_t)&v30);
  *(_DWORD *)(a1 + 8) = v30;
  v29[33] = a1 + 8;
  v29[34] = "OSchema::OSchema::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v27);
    sub_20BDDC1C8(v29, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_20BDDBF20(v25, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    v23 = sub_20BDDC09C(exception, (uint64_t)v25);
    __cxa_throw(v23, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v27, v31);
  if (HIDWORD(v34) != 1)
  {
    sub_20BDDC0E4(v25, "schema");
    sub_20BDDC0E4(&__p, "AbcGeom_Points_v1");
    v35 = v25;
    v14 = sub_20BDDDFDC(&v27, (const void **)v25, (uint64_t)&unk_20CA52589, (__int128 **)&v35);
    std::string::operator=((std::string *)(v14 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v26 < 0)
      operator delete(v25[0]);
    if (HIDWORD(v34) != 1)
    {
      sub_20BDDC0E4(v25, "schemaBaseType");
      sub_20BDDC0E4(&__p, "AbcGeom_GeomBase_v1");
      v35 = v25;
      v15 = sub_20BDDDFDC(&v27, (const void **)v25, (uint64_t)&unk_20CA52589, (__int128 **)&v35);
      std::string::operator=((std::string *)(v15 + 7), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v26 < 0)
        operator delete(v25[0]);
    }
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t **))(*(_QWORD *)*a2 + 112))(v25, *a2, a3, &v27);
  sub_20BDE82DC(a1 + 40, (__int128 *)v25);
  v16 = (std::__shared_weak_count *)v25[1];
  if (v25[1])
  {
    v17 = (unint64_t *)((char *)v25[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  sub_20BDE9D48((uint64_t)&v27, v28);
  v19 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  sub_20BDE9D48((uint64_t)v31, v31[1]);
}

void sub_20BE4742C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v27;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a22);
  v27 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v23 + 40));
  MEMORY[0x212B929D0](v23 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v24 - 192, (uint64_t)v27);
  else
    sub_20BE02504(v24 - 192, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE47354);
}

void sub_20BE47524(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE47578(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20BE475A0(void **a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20BE475CC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20BE476D0((int *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE476B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v9);
  _Unwind_Resume(a1);
}

void sub_20BE476D0(int *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *exception;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  const void **v42;
  _QWORD *v43;
  _QWORD v44[37];
  int v45;
  const void **v46[3];
  uint64_t v47;
  std::__shared_weak_count *v48;
  unsigned int v49;
  uint64_t v50;

  v43 = 0;
  v44[0] = 0;
  v42 = (const void **)&v43;
  v44[35] = 0;
  v44[36] = 0;
  v45 = 2;
  sub_20BDEBF8C((uint64_t *)v46, &v42);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  sub_20BDE9D48((uint64_t)&v42, v43);
  sub_20BE02E30(a4, (uint64_t)&v45);
  sub_20BE02E30(a5, (uint64_t)&v45);
  sub_20BE02E30(a6, (uint64_t)&v45);
  sub_20BE02E30(a7, (uint64_t)&v45);
  *a1 = v45;
  v44[33] = a1;
  v44[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v42);
    sub_20BDDC1C8(v44, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_20BDDBF20(&v40, (__int128 *)__p);
    if (v39 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v35 = sub_20BDDC09C(exception, (uint64_t)&v40);
    __cxa_throw(v35, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v42, v46);
  v14 = v47;
  v40 = v47;
  v41 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = *a2;
  if (v14)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v17 + 24))(&v36);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v36 + 24))(__p);
    v18 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)__p[0] + 48))(__p[0], v14);
    v19 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v20 = (unint64_t *)((char *)__p[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v37;
    if (v37)
    {
      v23 = (unint64_t *)&v37->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = *a2;
  }
  else
  {
    v18 = v49;
  }
  v36 = 0x100000007;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const void ***, uint64_t *, uint64_t))(*(_QWORD *)v17 + 104))(__p, v17, a3, &v42, &v36, v18);
  sub_20BDE82DC((uint64_t)(a1 + 8), (__int128 *)__p);
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v26 = (unint64_t *)((char *)__p[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_20BDE9D48((uint64_t)&v42, v43);
  v31 = v48;
  if (v48)
  {
    v32 = (unint64_t *)&v48->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  sub_20BDE9D48((uint64_t)v46, v46[1]);
}

void sub_20BE47A20(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  void *v11;
  std::exception v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  v11 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v7 + 32));
  MEMORY[0x212B929D0](v7 + 8, "");
  if (a2 == 2)
    sub_20BE02570(v8 - 176, (uint64_t)v11);
  else
    sub_20BE02504(v8 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE47948);
}

void sub_20BE47B04(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 144);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE47B58(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  void *__p;
  _BYTE *v7;

  if (a2[1] == *a2)
    v3 = 0;
  else
    v3 = *a2;
  v5 = (a2[1] - *a2) >> 3;
  sub_20BDE8894(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x100000008;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20BE47BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BE47BF8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *exception;
  _QWORD *v12;
  __int128 __p;
  char v14;
  int v15[8];
  _BYTE v16[16];
  _QWORD v17[33];

  v4 = *a2;
  *(_QWORD *)((char *)a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_20BDE1364(a1 + 2, (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  v6 = *((_DWORD *)a2 + 2);
  v5 = a2 + 1;
  if (v6 != 7 || *((_BYTE *)v5 + 4) != 1)
  {
    sub_20BDDBD68((uint64_t)v16);
    v8 = sub_20BDDC1C8(v17, (uint64_t)"Invalid DataType in TypedArraySample. Expected: ", 48);
    *(_QWORD *)v15 = 0x100000007;
    v9 = sub_20BDE00F4(v8, v15);
    v10 = sub_20BDDC1C8(v9, (uint64_t)", but got: ", 11);
    sub_20BDE00F4(v10, (int *)v5);
    std::stringbuf::str();
    sub_20BDDBF20(v15, &__p);
    if (v14 < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    v12 = sub_20BDDC09C(exception, (uint64_t)v15);
    __cxa_throw(v12, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  return a1;
}

void sub_20BE47D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void **v5;
  void *v7;
  std::exception v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v8.__vftable = va_arg(va1, std::exception_vtbl *);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v4 + 24) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20BE47D64(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C5196E8;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 520));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 464));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 416));
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 248));
  *(_QWORD *)a1 = off_24C519770;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

void Alembic::AbcGeom::v12::IPointsSchema::init(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  void *v41;
  std::string v42;
  uint64_t v43[2];
  void *v44;
  std::string v45;
  uint64_t v46;
  int v47;
  std::string v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t *v55;
  int v56;
  uint64_t *v57;
  int v58;
  void *__p[2];
  char v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  void *v67[2];
  char v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74[4];
  std::__shared_weak_count *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;

  v78 = a1 + 8;
  v79 = "IPointsSchema::init()";
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = 0uLL;
  v41 = &v42;
  v73 = 2;
  v71 = 0;
  v72 = 0;
  sub_20BDEBF8C(v74, (const void ***)&v41);
  v74[3] = 0;
  v75 = 0;
  v76 = 0;
  v77 = 1;
  sub_20BDE9D48((uint64_t)&v41, v42.__r_.__value_.__l.__data_);
  sub_20BE02E30(a2, (uint64_t)&v73);
  sub_20BE02E30(a3, (uint64_t)&v73);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(std::__shared_weak_count **)(a1 + 48);
  v69 = v6;
  v70 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v65 = v6;
    v66 = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v65 = v6;
    v66 = 0;
  }
  v63 = 0;
  v64 = 0;
  v61 = 0;
  v62 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v67, &v65, &v63, &v61);
  sub_20BDDC0E4(__p, "P");
  LODWORD(v57) = 5;
  v58 = 1;
  LODWORD(v55) = 1;
  v56 = v73;
  sub_20BE1DFF8((uint64_t)&v41, (int *)v67, (uint64_t)__p, &v57, &v55);
  *(_DWORD *)(a1 + 248) = (_DWORD)v41;
  std::string::operator=((std::string *)(a1 + 256), &v42);
  sub_20BDE881C((_QWORD *)(a1 + 280), v43);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v41);
  if (v60 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v67);
  v11 = v66;
  if (v66)
  {
    v12 = (unint64_t *)&v66->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v53 = v69;
  v54 = v70;
  if (v70)
  {
    v14 = (unint64_t *)&v70->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v63 = 0;
  v64 = 0;
  v61 = 0;
  v62 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v67, &v53, &v63, &v61);
  sub_20BDDC0E4(__p, ".pointIds");
  sub_20BE48604((uint64_t)&v41, (int *)v67, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 296) = (_DWORD)v41;
  std::string::operator=((std::string *)(a1 + 304), &v42);
  sub_20BDE881C((_QWORD *)(a1 + 328), v43);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v41);
  if (v60 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v67);
  v16 = v54;
  if (v54)
  {
    v17 = (unint64_t *)&v54->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v69;
  sub_20BDDC0E4(&v41, ".velocities");
  v20 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 80))(v19, &v41);
  v21 = v20;
  if (v42.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v41);
    if (!v21)
      goto LABEL_40;
  }
  else if (!v20)
  {
    goto LABEL_40;
  }
  v51 = v19;
  v52 = v70;
  if (v70)
  {
    v22 = (unint64_t *)&v70->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v63 = 0;
  v64 = 0;
  v61 = 0;
  v62 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v67, &v51, &v63, &v61);
  sub_20BDDC0E4(__p, ".velocities");
  sub_20BE220BC((uint64_t)&v41, (int *)v67, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 344) = (_DWORD)v41;
  std::string::operator=((std::string *)(a1 + 352), &v42);
  sub_20BDE881C((_QWORD *)(a1 + 376), v43);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v41);
  if (v60 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v67);
  v24 = v52;
  if (v52)
  {
    v25 = (unint64_t *)&v52->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v19 = v69;
LABEL_40:
  sub_20BDDC0E4(&v41, ".widths");
  v27 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 80))(v19, &v41);
  if (v42.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v41);
  v28 = v70;
  if (v27)
  {
    v39 = v19;
    v40 = v70;
    if (v70)
    {
      v29 = (unint64_t *)&v70->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    sub_20BDDC0E4(v67, ".widths");
    sub_20BE21844((uint64_t)&v41, &v39, (uint64_t)v67, a2, a3);
    *(_DWORD *)(a1 + 392) = (_DWORD)v41;
    std::string::operator=((std::string *)(a1 + 400), &v42);
    sub_20BDE881C((_QWORD *)(a1 + 424), v43);
    *(_DWORD *)(a1 + 440) = (_DWORD)v44;
    std::string::operator=((std::string *)(a1 + 448), &v45);
    sub_20BDE881C((_QWORD *)(a1 + 472), &v46);
    *(_DWORD *)(a1 + 488) = v47;
    std::string::operator=((std::string *)(a1 + 496), &v48);
    sub_20BDE881C((_QWORD *)(a1 + 520), &v49);
    *(_BYTE *)(a1 + 536) = v50;
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v47);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v44);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v41);
    if (v68 < 0)
      operator delete(v67[0]);
    v31 = v40;
    if (v40)
    {
      v32 = (unint64_t *)&v40->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v28 = v70;
  }
  if (v28)
  {
    v34 = (unint64_t *)&v28->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v36 = v75;
  if (v75)
  {
    v37 = (unint64_t *)&v75->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_20BDE9D48((uint64_t)v74, (_QWORD *)v74[1]);
}

void sub_20BE483EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;
  void *v50;
  void (*v51)(uint64_t);
  uint64_t v52;

  if (*(char *)(v47 - 201) < 0)
    operator delete(*(void **)(v47 - 224));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v47 - 176));
  sub_20BE02EB0(v47 - 144);
  v50 = __cxa_begin_catch(a1);
  v51 = *(void (**)(uint64_t))(*(_QWORD *)v46 + 16);
  if (a2 == 2)
  {
    v52 = (uint64_t)v50;
    v51(v46);
    sub_20BE02570(v47 - 80, v52);
  }
  else
  {
    v51(v46);
    sub_20BE02504(v47 - 80, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE483D0);
}

void sub_20BE485D8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE485F8()
{
  JUMPOUT(0x20BE48580);
}

uint64_t sub_20BE48604(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *exception;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49[2];
  char v50;
  void *__p[2];
  unsigned __int8 v52;
  __int128 v53;
  _QWORD v54[34];
  std::__shared_weak_count *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61[4];
  std::__shared_weak_count *v62;
  int v63;
  uint64_t v64;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *a2;
  *((_QWORD *)&v53 + 1) = 0;
  v54[0] = 0;
  *(_QWORD *)&v53 = (char *)&v53 + 8;
  v58 = 0;
  v59 = 0;
  v60 = v10;
  sub_20BDEBF8C(v61, (const void ***)&v53);
  v61[3] = 0;
  v62 = 0;
  v63 = 0;
  v64 = 1;
  sub_20BDE9D48((uint64_t)&v53, *((_QWORD **)&v53 + 1));
  sub_20BE02E30(a4, (uint64_t)&v60);
  sub_20BE02E30(a5, (uint64_t)&v60);
  *(_DWORD *)a1 = v60;
  v56 = a1;
  v57 = "ITypedArrayProperty::ITypedArrayProperty()";
  v12 = *((_QWORD *)a2 + 4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v54[33] = v12;
  v55 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v39 = sub_20BDDC1C8(v54, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v39, (uint64_t)"ITypedArrayProperty ctor", 24);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v41 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v41, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  v16 = v15;
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v42 = sub_20BDDC1C8(v54, (uint64_t)"Nonexistent array property: ", 28);
    v43 = *(char *)(a3 + 23);
    if (v43 >= 0)
      v44 = a3;
    else
      v44 = *(_QWORD *)a3;
    if (v43 >= 0)
      v45 = *(unsigned __int8 *)(a3 + 23);
    else
      v45 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v42, v44, v45);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    v46 = __cxa_allocate_exception(0x20uLL);
    v47 = sub_20BDDC09C(v46, (uint64_t)__p);
    __cxa_throw(v47, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v17 = *(_DWORD *)(v15 + 56) == 7 && *(_DWORD *)(v15 + 24) == 2;
  if (!v17 || (sub_20BE48BEC(v15 + 32, v64) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v53);
    v28 = sub_20BDDC1C8(v54, (uint64_t)"Incorrect match of header datatype: ", 36);
    v29 = sub_20BDE00F4(v28, (int *)(v16 + 56));
    v30 = sub_20BDDC1C8(v29, (uint64_t)" to expected: ", 14);
    v48 = 0x100000007;
    v31 = sub_20BDE00F4(v30, (int *)&v48);
    v32 = sub_20BDDC1C8(v31, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_20BDDC0E4(v49, "interpretation");
    sub_20BE01E1C(v16 + 32, (const void **)v49, __p);
    if ((v52 & 0x80u) == 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if ((v52 & 0x80u) == 0)
      v34 = v52;
    else
      v34 = (uint64_t)__p[1];
    v35 = sub_20BDDC1C8(v32, (uint64_t)v33, v34);
    v36 = sub_20BDDC1C8(v35, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v36, (uint64_t)"", 0);
    if ((char)v52 < 0)
      operator delete(__p[0]);
    if (v50 < 0)
      operator delete(v49[0]);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v49);
    if (v50 < 0)
      operator delete(v49[0]);
    v37 = __cxa_allocate_exception(0x20uLL);
    v38 = sub_20BDDC09C(v37, (uint64_t)__p);
    __cxa_throw(v38, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 96))(&v53, v12, a3);
  sub_20BDE82DC(a1 + 32, &v53);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v55;
  if (v55)
  {
    v22 = (unint64_t *)&v55->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v62;
  if (v62)
  {
    v25 = (unint64_t *)&v62->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  sub_20BDE9D48((uint64_t)v61, (_QWORD *)v61[1]);
  return a1;
}

void sub_20BE48A88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 192));
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v26);
  MEMORY[0x212B929D0](v25, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 176, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE487D4);
}

void sub_20BE48BAC()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 144);
  JUMPOUT(0x20BE48BDCLL);
}

uint64_t sub_20BE48BEC(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (a2)
    return 1;
  sub_20BDDC0E4(__p, "interpretation");
  sub_20BE01E1C(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    v2 = v7[1] == 0;
    operator delete(v7[0]);
  }
  else
  {
    v2 = v8 == 0;
  }
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE48C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Alembic::AbcGeom::v12::OPolyMeshSchema::OPolyMeshSchema(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v13 = (std::__shared_weak_count *)a2[1];
  v38 = *a2;
  v39 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_20BE49034(a1, &v38, a3, a4, a5, a6, a7);
  v16 = v39;
  if (v39)
  {
    v17 = (unint64_t *)&v39->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = &unk_24C5197C0;
  *(_DWORD *)(a1 + 248) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 352), "");
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 400), "");
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 440) = a1 + 448;
  sub_20BE3FF78(a1 + 464);
  sub_20BE3FEAC(a1 + 640);
  *(_QWORD *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  sub_20BE304B4(a4, a5, a6, a7, &v36);
  v19 = sub_20BE3060C(a4, a5, a6, a7);
  if (v36)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 24))(&v32);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v32 + 24))(&v34);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 48))(v34, v36);
    v21 = v35;
    if (v35)
    {
      v22 = (unint64_t *)&v35->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v33;
    if (v33)
    {
      v25 = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v20 = v19;
  }
  v27 = sub_20BE312C4(a4, a5, a6, a7);
  Alembic::AbcGeom::v12::OPolyMeshSchema::init((Alembic::AbcGeom::v12::OPolyMeshSchema *)a1, v20, v27);
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return a1;
}

void sub_20BE48F54(_Unwind_Exception *a1, uint64_t a2, _QWORD **a3, ...)
{
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va1);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va2);
  if (*(char *)(v3 + 839) < 0)
    operator delete(*(void **)(v3 + 816));
  sub_20BE28E38(v6);
  sub_20BE28E38(v5);
  sub_20BE4D944(v3 + 440, *a3);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v3 + 392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v3 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v3 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v4);
  sub_20BE496F4(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE49034(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v13 = (std::__shared_weak_count *)a2[1];
  v38 = *a2;
  v39 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_20BE4DA2C(a1, &v38, a3, a4, a5, a6, a7);
  v16 = v39;
  if (v39)
  {
    v17 = (unint64_t *)&v39->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = off_24C519848;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_20BE304B4(a4, a5, a6, a7, &v36);
  v19 = sub_20BE3060C(a4, a5, a6, a7);
  if (v36)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 24))(&v32);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v32 + 24))(&v34);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 48))(v34, v36);
    v21 = v35;
    if (v35)
    {
      v22 = (unint64_t *)&v35->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v33;
    if (v33)
    {
      v25 = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v20 = v19;
  }
  v27 = sub_20BE312C4(a4, a5, a6, a7);
  sub_20BE4DB44(a1, v20, v27);
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return a1;
}

void sub_20BE492D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void **v18;
  Alembic::Abc::v12::OCompoundProperty *v19;
  Alembic::Abc::v12::OCompoundProperty *v20;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v20);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v19);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v18);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a10);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(v17 + 8));
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPolyMeshSchema::init(Alembic::AbcGeom::v12::OPolyMeshSchema *this, int a2, char a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t *v25;
  int v26;
  uint64_t *v27;
  int v28;
  uint64_t *v29;
  int v30;
  uint64_t *v31;
  int v32;
  void *__p[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  void *v37;
  std::string v38;
  uint64_t v39[2];
  uint64_t v40;
  std::__shared_weak_count *v41;
  char *v42;
  const char *v43;

  v42 = (char *)this + 8;
  v43 = "OPolyMeshSchema::init()";
  *((_BYTE *)this + 840) = a3;
  *((_QWORD *)this + 106) = 0;
  *((_DWORD *)this + 214) = a2;
  if ((a3 & 1) == 0)
  {
    v5 = *((_QWORD *)this + 5);
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    v40 = v5;
    v41 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    Alembic::AbcGeom::v12::OPolyMeshSchema::createPositionsProperty(this);
    v35 = v5;
    v36 = v4;
    if (v4)
    {
      v8 = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    sub_20BDDC0E4(__p, ".faceIndices");
    v10 = *((_DWORD *)this + 214);
    LODWORD(v31) = 2;
    v32 = v10;
    LODWORD(v29) = 0;
    v30 = 0;
    LODWORD(v27) = 0;
    v28 = 0;
    LODWORD(v25) = 0;
    v26 = 0;
    sub_20BE2A074((uint64_t)&v37, &v35, (uint64_t)__p, &v31, &v29, &v27, &v25);
    *((_DWORD *)this + 86) = (_DWORD)v37;
    std::string::operator=((std::string *)((char *)this + 352), &v38);
    sub_20BDE881C((_QWORD *)this + 47, v39);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v37);
    if (v34 < 0)
      operator delete(__p[0]);
    v11 = v36;
    if (v36)
    {
      v12 = (unint64_t *)&v36->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v23 = v40;
    v24 = v41;
    if (v41)
    {
      v14 = (unint64_t *)&v41->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    sub_20BDDC0E4(__p, ".faceCounts");
    v16 = *((_DWORD *)this + 214);
    LODWORD(v31) = 2;
    v32 = v16;
    LODWORD(v29) = 0;
    v30 = 0;
    LODWORD(v27) = 0;
    v28 = 0;
    LODWORD(v25) = 0;
    v26 = 0;
    sub_20BE2A074((uint64_t)&v37, &v23, (uint64_t)__p, &v31, &v29, &v27, &v25);
    *((_DWORD *)this + 98) = (_DWORD)v37;
    std::string::operator=((std::string *)((char *)this + 400), &v38);
    sub_20BDE881C((_QWORD *)this + 53, v39);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v37);
    if (v34 < 0)
      operator delete(__p[0]);
    v17 = v24;
    if (v24)
    {
      v18 = (unint64_t *)&v24->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v41;
    if (v41)
    {
      v21 = (unint64_t *)&v41->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20BE495F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  void *v30;
  void (*v31)(uint64_t);
  uint64_t v32;

  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v27 - 112));
  if (a25 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 64));
  v30 = __cxa_begin_catch(a1);
  v31 = *(void (**)(uint64_t))(*(_QWORD *)v26 + 16);
  if (a2 == 2)
  {
    v32 = (uint64_t)v30;
    v31(v26);
    sub_20BE02570(v27 - 48, v32);
  }
  else
  {
    v31(v26);
    sub_20BE02504(v27 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE495DCLL);
}

void sub_20BE496C8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE496E8()
{
  JUMPOUT(0x20BE49670);
}

uint64_t sub_20BE496F4(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_24C519848;
  v2 = (void **)(a1 + 8);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

uint64_t Alembic::AbcGeom::v12::OPolyMeshSchema::OPolyMeshSchema(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  char v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v44 = *((_QWORD *)a2 + 4);
  v45 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *a2;
  LODWORD(v42) = 1;
  LODWORD(v43) = v14;
  sub_20BE49034(a1, &v44, a3, &v42, a4, a5, a6);
  v15 = v45;
  if (v45)
  {
    v16 = (unint64_t *)&v45->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)a1 = &unk_24C5197C0;
  *(_DWORD *)(a1 + 248) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 352), "");
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 400), "");
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 440) = a1 + 448;
  sub_20BE3FF78(a1 + 464);
  sub_20BE3FEAC(a1 + 640);
  *(_QWORD *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  LODWORD(v40) = 0;
  LODWORD(v41) = 0;
  sub_20BE304B4(a4, a5, a6, &v40, &v42);
  LODWORD(v40) = 0;
  LODWORD(v41) = 0;
  v18 = sub_20BE3060C(a4, a5, a6, &v40);
  if (v42)
  {
    v19 = *((_QWORD *)a2 + 4);
    v20 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
    v37 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v19 + 24))(&v38);
    (*(void (**)(uint64_t **__return_ptr))(*(_QWORD *)v38 + 24))(&v40);
    v23 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*v40 + 48))(v40, v42);
    v24 = v41;
    if (v41)
    {
      v25 = (unint64_t *)&v41->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v39;
    if (v39)
    {
      v28 = (unint64_t *)&v39->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (v37)
    {
      v30 = (unint64_t *)&v37->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  else
  {
    v23 = v18;
  }
  LODWORD(v40) = 0;
  LODWORD(v41) = 0;
  v32 = sub_20BE312C4(a4, a5, a6, &v40);
  Alembic::AbcGeom::v12::OPolyMeshSchema::init((Alembic::AbcGeom::v12::OPolyMeshSchema *)a1, v23, v32);
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return a1;
}

void sub_20BE49A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD **v19;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  if (*(char *)(v15 + 839) < 0)
    operator delete(*(void **)(v15 + 816));
  sub_20BE28E38(v18);
  sub_20BE28E38(v17);
  sub_20BE4D944(v15 + 440, *v19);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v15 + 392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v15 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v15 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v16);
  sub_20BE496F4(v15);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPolyMeshSchema::set(Alembic::AbcGeom::v12::OPolyMeshSchema *this, uint64_t a2)
{
  _QWORD *v4;
  uint64_t (*v5)();
  _QWORD *v6;
  uint64_t (*v7)();
  uint64_t (*v8)();
  _QWORD *v9;
  uint64_t (*v10)();
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t (*v18)();
  uint64_t (*v19)();
  uint64_t (*v20)();
  int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t (*v27)();
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t (*v32)();
  uint64_t (*v33)();
  int v34;
  uint64_t (*v35)();
  uint64_t (*v36)();
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t (*v40)();
  uint64_t (*v41)();
  uint64_t (*v42)();
  int v43;
  uint64_t (*v44)();
  char *v45;
  int v46;
  uint64_t (*v47)();
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t (*v52)();
  uint64_t (*v53)();
  uint64_t (*v54)();
  uint64_t (*v55)();
  _QWORD *exception;
  _QWORD *v57;
  _BYTE v58[13];
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[13];
  void *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE v76[13];
  void *v77;
  void *v78;
  uint64_t v79;
  void *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[13];
  void *__p;
  void *v87;
  uint64_t v88;
  void *v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE v94[13];
  void *v95;
  void *v96;
  uint64_t v97;
  void *v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  char v104;
  _QWORD v105[4];
  _BYTE v106[16];
  _QWORD v107[35];

  if (*((_BYTE *)this + 840) || sub_20BE4A8D0(a2))
  {
    Alembic::AbcGeom::v12::OPolyMeshSchema::selectiveSet(this, a2);
    return;
  }
  v107[33] = (char *)this + 8;
  v107[34] = "OPolyMeshSchema::set()";
  v4 = (_QWORD *)(a2 + 168);
  if (*(_DWORD *)(a2 + 176) == 127 || !*v4 && *(_QWORD *)(a2 + 192) == *(_QWORD *)(a2 + 184))
    v5 = 0;
  else
    v5 = nullsub_10;
  if (!v5)
    goto LABEL_16;
  if (*((char *)this + 327) < 0)
  {
    if (!*((_QWORD *)this + 39))
      goto LABEL_14;
LABEL_15:
    Alembic::AbcGeom::v12::OPolyMeshSchema::createVelocitiesProperty(this);
    goto LABEL_16;
  }
  if (*((_BYTE *)this + 327))
    goto LABEL_15;
LABEL_14:
  if (!*((_QWORD *)this + 41))
    goto LABEL_15;
LABEL_16:
  v6 = (_QWORD *)(a2 + 208);
  if (*(_DWORD *)(a2 + 216) == 127 || !*v6 && *(_QWORD *)(a2 + 232) == *(_QWORD *)(a2 + 224))
    v7 = 0;
  else
    v7 = nullsub_8;
  if (v7)
    v8 = nullsub_11;
  else
    v8 = 0;
  if (v8 && (sub_20BE296FC((uint64_t)this + 464) & 1) == 0)
    Alembic::AbcGeom::v12::OPolyMeshSchema::createUVsProperty((uint64_t)this, a2);
  v9 = (_QWORD *)(a2 + 296);
  if (*(_DWORD *)(a2 + 304) == 127 || !*v9 && *(_QWORD *)(a2 + 320) == *(_QWORD *)(a2 + 312))
    v10 = 0;
  else
    v10 = nullsub_9;
  if (v10)
    v11 = nullsub_12;
  else
    v11 = 0;
  if (v11 && (sub_20BE296FC((uint64_t)this + 640) & 1) == 0)
    Alembic::AbcGeom::v12::OPolyMeshSchema::createNormalsProperty((uint64_t)this, a2);
  if (*((_QWORD *)this + 106))
  {
    LODWORD(v89) = *((_DWORD *)this + 62);
    if (*((char *)this + 279) < 0)
    {
      sub_20BDDBFAC(&v90, *((void **)this + 32), *((_QWORD *)this + 33));
    }
    else
    {
      v90 = *((_OWORD *)this + 16);
      v91 = *((_QWORD *)this + 34);
    }
    v13 = *((_QWORD *)this + 36);
    v92 = *((_QWORD *)this + 35);
    v93 = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = *(_QWORD *)(a2 + 5);
    *(_QWORD *)v85 = *(_QWORD *)a2;
    *(_QWORD *)&v85[5] = v16;
    __p = 0;
    v87 = 0;
    v88 = 0;
    sub_20BDE1364(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
    if (SHIBYTE(v91) < 0)
    {
      if (*((_QWORD *)&v90 + 1))
        goto LABEL_49;
    }
    else if (HIBYTE(v91))
    {
LABEL_49:
      v17 = 0;
      goto LABEL_54;
    }
    if (v92)
      v17 = nullsub_7;
    else
      v17 = 0;
LABEL_54:
    if (v17)
    {
      if (*(_DWORD *)&v85[8] == 127 || !*(_QWORD *)v85 && v87 == __p)
        v18 = 0;
      else
        v18 = nullsub_19;
      if (v18)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v89);
      else
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v89);
    }
    if (__p)
    {
      v87 = __p;
      operator delete(__p);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v89);
    LODWORD(v80) = *((_DWORD *)this + 86);
    if (*((char *)this + 375) < 0)
    {
      sub_20BDDBFAC(&v81, *((void **)this + 44), *((_QWORD *)this + 45));
    }
    else
    {
      v81 = *((_OWORD *)this + 22);
      v82 = *((_QWORD *)this + 46);
    }
    v22 = *((_QWORD *)this + 48);
    v83 = *((_QWORD *)this + 47);
    v84 = v22;
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = *(_QWORD *)(a2 + 45);
    *(_QWORD *)v76 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)&v76[5] = v25;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    sub_20BDE1364(&v77, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    if (SHIBYTE(v82) < 0)
    {
      if (*((_QWORD *)&v81 + 1))
        goto LABEL_92;
    }
    else if (HIBYTE(v82))
    {
LABEL_92:
      v26 = 0;
      goto LABEL_97;
    }
    if (v83)
      v26 = nullsub_7;
    else
      v26 = 0;
LABEL_97:
    if (v26)
    {
      if (*(_DWORD *)&v76[8] == 127 || !*(_QWORD *)v76 && v78 == v77)
        v27 = 0;
      else
        v27 = nullsub_20;
      if (v27)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v80);
      else
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v80);
    }
    if (v77)
    {
      v78 = v77;
      operator delete(v77);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v80);
    LODWORD(v71) = *((_DWORD *)this + 98);
    if (*((char *)this + 423) < 0)
    {
      sub_20BDDBFAC(&v72, *((void **)this + 50), *((_QWORD *)this + 51));
    }
    else
    {
      v72 = *((_OWORD *)this + 25);
      v73 = *((_QWORD *)this + 52);
    }
    v28 = *((_QWORD *)this + 54);
    v74 = *((_QWORD *)this + 53);
    v75 = v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = *(_QWORD *)(a2 + 85);
    *(_QWORD *)v67 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)&v67[5] = v31;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    sub_20BDE1364(&v68, *(const void **)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3);
    if (SHIBYTE(v73) < 0)
    {
      if (*((_QWORD *)&v72 + 1))
        goto LABEL_116;
    }
    else if (HIBYTE(v73))
    {
LABEL_116:
      v32 = 0;
      goto LABEL_121;
    }
    if (v74)
      v32 = nullsub_7;
    else
      v32 = 0;
LABEL_121:
    if (v32)
    {
      if (*(_DWORD *)&v67[8] == 127 || !*(_QWORD *)v67 && v69 == v68)
        v33 = 0;
      else
        v33 = nullsub_20;
      if (v33)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v71);
      else
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v71);
    }
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v71);
    v34 = *((char *)this + 327);
    if (v34 < 0)
    {
      if (*((_QWORD *)this + 39))
        goto LABEL_172;
    }
    else if (*((_BYTE *)this + 327))
    {
      goto LABEL_172;
    }
    if (*((_QWORD *)this + 41))
      v35 = nullsub_7;
    else
      v35 = 0;
    if (!v35)
    {
LABEL_172:
      if (*(double *)(a2 + 144) <= *(double *)(a2 + 120)
        || *(double *)(a2 + 152) <= *(double *)(a2 + 128)
        || *(double *)(a2 + 160) <= *(double *)(a2 + 136))
      {
        if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
          v42 = 0;
        else
          v42 = nullsub_19;
        if (v42)
        {
          sub_20BE27074((_QWORD *)a2, (uint64_t)v106);
          Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56), v106);
        }
        else
        {
          Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56));
        }
      }
      else
      {
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56), (const void *)(a2 + 120));
      }
      v43 = sub_20BE296FC((uint64_t)this + 464);
      v44 = nullsub_16;
      if (!v43)
        v44 = 0;
      if (v44)
        sub_20BE2717C((uint64_t)this + 464, a2 + 208);
      v45 = (char *)this + 640;
      v46 = sub_20BE296FC((uint64_t)this + 640);
      v47 = nullsub_17;
      if (!v46)
        v47 = 0;
      if (!v47)
        goto LABEL_234;
      goto LABEL_233;
    }
    LODWORD(v62) = *((_DWORD *)this + 74);
    if (v34 < 0)
    {
      sub_20BDDBFAC(&v63, *((void **)this + 38), *((_QWORD *)this + 39));
    }
    else
    {
      v63 = *((_OWORD *)this + 19);
      v64 = *((_QWORD *)this + 40);
    }
    v37 = *((_QWORD *)this + 42);
    v65 = *((_QWORD *)this + 41);
    v66 = v37;
    if (v37)
    {
      v38 = (unint64_t *)(v37 + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    *(_QWORD *)v58 = *v4;
    *(_QWORD *)&v58[5] = *(_QWORD *)(a2 + 173);
    v59 = 0;
    v60 = 0;
    v61 = 0;
    sub_20BDE1364(&v59, *(const void **)(a2 + 184), *(_QWORD *)(a2 + 192), (uint64_t)(*(_QWORD *)(a2 + 192) - *(_QWORD *)(a2 + 184)) >> 3);
    if (SHIBYTE(v64) < 0)
    {
      if (*((_QWORD *)&v63 + 1))
        goto LABEL_155;
    }
    else if (HIBYTE(v64))
    {
LABEL_155:
      v40 = 0;
LABEL_160:
      if (v40)
      {
        if (*(_DWORD *)&v58[8] == 127 || !*(_QWORD *)v58 && v60 == v59)
          v41 = 0;
        else
          v41 = nullsub_10;
        if (v41)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v62);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v62);
      }
      if (v59)
      {
        v60 = v59;
        operator delete(v59);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v62);
      goto LABEL_172;
    }
    if (v65)
      v40 = nullsub_7;
    else
      v40 = 0;
    goto LABEL_160;
  }
  if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
    v12 = 0;
  else
    v12 = nullsub_19;
  if (!v12
    || (*(_DWORD *)(a2 + 48) == 127 || !*(_QWORD *)(a2 + 40) && *(_QWORD *)(a2 + 64) == *(_QWORD *)(a2 + 56)
      ? (v19 = 0)
      : (v19 = nullsub_20),
        !v19
     || (*(_DWORD *)(a2 + 88) == 127 || !*(_QWORD *)(a2 + 80) && *(_QWORD *)(a2 + 104) == *(_QWORD *)(a2 + 96)
       ? (v20 = 0)
       : (v20 = nullsub_20),
         !v20)))
  {
    sub_20BDDBD68((uint64_t)v106);
    sub_20BDDC1C8(v107, (uint64_t)"Sample 0 must have valid data for all mesh components", 53);
    std::stringbuf::str();
    sub_20BDDBF20(v105, &v103);
    if (v104 < 0)
      operator delete((void *)v103);
    exception = __cxa_allocate_exception(0x20uLL);
    v57 = sub_20BDDC09C(exception, (uint64_t)v105);
    __cxa_throw(v57, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 248);
  Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 344);
  Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 392);
  v21 = *((char *)this + 327);
  if (v21 < 0)
  {
    if (*((_QWORD *)this + 39))
      goto LABEL_215;
  }
  else if (*((_BYTE *)this + 327))
  {
    goto LABEL_215;
  }
  if (*((_QWORD *)this + 41))
    v36 = nullsub_7;
  else
    v36 = 0;
  if (v36)
  {
    LODWORD(v98) = *((_DWORD *)this + 74);
    if (v21 < 0)
    {
      sub_20BDDBFAC(&v99, *((void **)this + 38), *((_QWORD *)this + 39));
    }
    else
    {
      v99 = *((_OWORD *)this + 19);
      v100 = *((_QWORD *)this + 40);
    }
    v48 = *((_QWORD *)this + 42);
    v101 = *((_QWORD *)this + 41);
    v102 = v48;
    if (v48)
    {
      v49 = (unint64_t *)(v48 + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v51 = *(_QWORD *)(a2 + 173);
    *(_QWORD *)v94 = *v4;
    *(_QWORD *)&v94[5] = v51;
    v95 = 0;
    v96 = 0;
    v97 = 0;
    sub_20BDE1364(&v95, *(const void **)(a2 + 184), *(_QWORD *)(a2 + 192), (uint64_t)(*(_QWORD *)(a2 + 192) - *(_QWORD *)(a2 + 184)) >> 3);
    if (SHIBYTE(v100) < 0)
    {
      if (*((_QWORD *)&v99 + 1))
        goto LABEL_198;
    }
    else if (HIBYTE(v100))
    {
LABEL_198:
      v52 = 0;
LABEL_203:
      if (v52)
      {
        if (*(_DWORD *)&v94[8] == 127 || !*(_QWORD *)v94 && v96 == v95)
          v53 = 0;
        else
          v53 = nullsub_10;
        if (v53)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v98);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v98);
      }
      if (v95)
      {
        v96 = v95;
        operator delete(v95);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v98);
      goto LABEL_215;
    }
    if (v101)
      v52 = nullsub_7;
    else
      v52 = 0;
    goto LABEL_203;
  }
LABEL_215:
  if (*(double *)(a2 + 144) >= *(double *)(a2 + 120)
    && *(double *)(a2 + 152) >= *(double *)(a2 + 128)
    && *(double *)(a2 + 160) >= *(double *)(a2 + 136))
  {
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56), (const void *)(a2 + 120));
  }
  else
  {
    sub_20BE27074((_QWORD *)a2, (uint64_t)v106);
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56), v106);
  }
  if (*(_DWORD *)(a2 + 216) == 127 || !*v6 && *(_QWORD *)(a2 + 232) == *(_QWORD *)(a2 + 224))
    v54 = 0;
  else
    v54 = nullsub_8;
  if (v54)
    sub_20BE2717C((uint64_t)this + 464, a2 + 208);
  if (*(_DWORD *)(a2 + 304) == 127 || !*v9 && *(_QWORD *)(a2 + 320) == *(_QWORD *)(a2 + 312))
    v55 = 0;
  else
    v55 = nullsub_9;
  if (!v55)
    goto LABEL_234;
  v45 = (char *)this + 640;
LABEL_233:
  sub_20BE27540((uint64_t)v45, (uint64_t)v9);
LABEL_234:
  ++*((_QWORD *)this + 106);
}

void sub_20BE4A75C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,void *a59)
{
  uint64_t v59;
  void *v62;

  if (__p)
    operator delete(__p);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&a59);
  v62 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v59 - 96, (uint64_t)v62);
  else
    sub_20BE02504(v59 - 96, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE4A6BCLL);
}

void sub_20BE4A8B0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL sub_20BE4A8D0(uint64_t a1)
{
  _BOOL8 result;
  uint64_t (*v3)();

  result = 0;
  if (!*(_QWORD *)a1 && !*(_QWORD *)(a1 + 40) && !*(_QWORD *)(a1 + 80))
  {
    if (*(_DWORD *)(a1 + 216) == 127 || !*(_QWORD *)(a1 + 208) && *(_QWORD *)(a1 + 232) == *(_QWORD *)(a1 + 224)
       ? 0
       : nullsub_8)
    {
      return 1;
    }
    v3 = *(_DWORD *)(a1 + 304) == 127 || !*(_QWORD *)(a1 + 296) && *(_QWORD *)(a1 + 320) == *(_QWORD *)(a1 + 312)
       ? 0
       : nullsub_9;
    if (v3 || *(_QWORD *)(a1 + 168))
      return 1;
  }
  return result;
}

void Alembic::AbcGeom::v12::OPolyMeshSchema::selectiveSet(Alembic::AbcGeom::v12::OPolyMeshSchema *this, uint64_t a2)
{
  uint64_t (*v4)();
  int v5;
  uint64_t (*v6)();
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t (*v13)();
  _QWORD *v14;
  uint64_t (*v15)();
  int v16;
  uint64_t (*v17)();
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (*v21)();
  uint64_t (*v22)();
  uint64_t (*v23)();
  uint64_t (*v24)();
  _BYTE v25[13];
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[48];
  _BYTE v35[13];
  void *__p;
  void *v37;
  uint64_t v38;
  void *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  const char *v45;

  v44 = (char *)this + 8;
  v45 = "OPolyMeshSchema::selectiveSet()";
  if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
    v4 = 0;
  else
    v4 = nullsub_19;
  if (v4)
  {
    if (*((char *)this + 279) < 0)
    {
      if (!*((_QWORD *)this + 33))
        goto LABEL_11;
    }
    else if (!*((_BYTE *)this + 279))
    {
LABEL_11:
      if (*((_QWORD *)this + 35))
        goto LABEL_13;
    }
    Alembic::AbcGeom::v12::OPolyMeshSchema::createPositionsProperty(this);
  }
LABEL_13:
  v5 = *((char *)this + 279);
  if (v5 < 0)
  {
    if (*((_QWORD *)this + 33))
      goto LABEL_56;
  }
  else if (*((_BYTE *)this + 279))
  {
    goto LABEL_56;
  }
  if (*((_QWORD *)this + 35))
    v6 = nullsub_7;
  else
    v6 = 0;
  if (!v6)
    goto LABEL_56;
  LODWORD(v39) = *((_DWORD *)this + 62);
  if (v5 < 0)
  {
    sub_20BDDBFAC(&v40, *((void **)this + 32), *((_QWORD *)this + 33));
  }
  else
  {
    v40 = *((_OWORD *)this + 16);
    v41 = *((_QWORD *)this + 34);
  }
  v7 = *((_QWORD *)this + 36);
  v42 = *((_QWORD *)this + 35);
  v43 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a2 + 5);
  *(_QWORD *)v35 = *(_QWORD *)a2;
  *(_QWORD *)&v35[5] = v10;
  __p = 0;
  v37 = 0;
  v38 = 0;
  sub_20BDE1364(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  if (SHIBYTE(v41) < 0)
  {
    if (*((_QWORD *)&v40 + 1))
      goto LABEL_29;
LABEL_31:
    if (v42)
      v11 = nullsub_7;
    else
      v11 = 0;
    goto LABEL_34;
  }
  if (!HIBYTE(v41))
    goto LABEL_31;
LABEL_29:
  v11 = 0;
LABEL_34:
  if (v11)
  {
    if (*(_DWORD *)&v35[8] == 127 || !*(_QWORD *)v35 && v37 == __p)
      v12 = 0;
    else
      v12 = nullsub_19;
    if (v12)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v39);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v39);
  }
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v39);
  if (*(double *)(a2 + 144) <= *(double *)(a2 + 120)
    || *(double *)(a2 + 152) <= *(double *)(a2 + 128)
    || *(double *)(a2 + 160) <= *(double *)(a2 + 136))
  {
    if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
      v13 = 0;
    else
      v13 = nullsub_19;
    if (v13)
    {
      sub_20BE27074((_QWORD *)a2, (uint64_t)v34);
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56), v34);
    }
  }
  else
  {
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56), (const void *)(a2 + 120));
  }
LABEL_56:
  v14 = (_QWORD *)(a2 + 168);
  if (*(_DWORD *)(a2 + 176) == 127 || !*v14 && *(_QWORD *)(a2 + 192) == *(_QWORD *)(a2 + 184))
    v15 = 0;
  else
    v15 = nullsub_10;
  if (v15)
  {
    if (*((char *)this + 327) < 0)
    {
      if (!*((_QWORD *)this + 39))
        goto LABEL_66;
    }
    else if (!*((_BYTE *)this + 327))
    {
LABEL_66:
      if (*((_QWORD *)this + 41))
        goto LABEL_68;
    }
    Alembic::AbcGeom::v12::OPolyMeshSchema::createVelocitiesProperty(this);
  }
LABEL_68:
  v16 = *((char *)this + 327);
  if (v16 < 0)
  {
    if (*((_QWORD *)this + 39))
      goto LABEL_101;
  }
  else if (*((_BYTE *)this + 327))
  {
    goto LABEL_101;
  }
  if (*((_QWORD *)this + 41))
    v17 = nullsub_7;
  else
    v17 = 0;
  if (!v17)
    goto LABEL_101;
  LODWORD(v29) = *((_DWORD *)this + 74);
  if (v16 < 0)
  {
    sub_20BDDBFAC(&v30, *((void **)this + 38), *((_QWORD *)this + 39));
  }
  else
  {
    v30 = *((_OWORD *)this + 19);
    v31 = *((_QWORD *)this + 40);
  }
  v18 = *((_QWORD *)this + 42);
  v32 = *((_QWORD *)this + 41);
  v33 = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *(_QWORD *)v25 = *v14;
  *(_QWORD *)&v25[5] = *(_QWORD *)(a2 + 173);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  sub_20BDE1364(&v26, *(const void **)(a2 + 184), *(_QWORD *)(a2 + 192), (uint64_t)(*(_QWORD *)(a2 + 192) - *(_QWORD *)(a2 + 184)) >> 3);
  if (SHIBYTE(v31) < 0)
  {
    if (*((_QWORD *)&v30 + 1))
      goto LABEL_84;
LABEL_86:
    if (v32)
      v21 = nullsub_7;
    else
      v21 = 0;
    goto LABEL_89;
  }
  if (!HIBYTE(v31))
    goto LABEL_86;
LABEL_84:
  v21 = 0;
LABEL_89:
  if (v21)
  {
    if (*(_DWORD *)&v25[8] == 127 || !*(_QWORD *)v25 && v27 == v26)
      v22 = 0;
    else
      v22 = nullsub_10;
    if (v22)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v29);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v29);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v29);
LABEL_101:
  if (*(_DWORD *)(a2 + 216) == 127 || !*(_QWORD *)(a2 + 208) && *(_QWORD *)(a2 + 232) == *(_QWORD *)(a2 + 224))
    v23 = 0;
  else
    v23 = nullsub_8;
  if (v23)
  {
    if ((sub_20BE296FC((uint64_t)this + 464) & 1) == 0)
      Alembic::AbcGeom::v12::OPolyMeshSchema::createUVsProperty((uint64_t)this, a2);
    sub_20BE2717C((uint64_t)this + 464, a2 + 208);
  }
  if (*(_DWORD *)(a2 + 304) == 127 || !*(_QWORD *)(a2 + 296) && *(_QWORD *)(a2 + 320) == *(_QWORD *)(a2 + 312))
    v24 = 0;
  else
    v24 = nullsub_9;
  if (v24)
  {
    if ((sub_20BE296FC((uint64_t)this + 640) & 1) == 0)
      Alembic::AbcGeom::v12::OPolyMeshSchema::createNormalsProperty((uint64_t)this, a2);
    sub_20BE27540((uint64_t)this + 640, a2 + 296);
  }
  ++*((_QWORD *)this + 106);
}

void sub_20BE4AEFC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;

  v31 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v29 - 64, (uint64_t)v31);
  else
    sub_20BE02504(v29 - 64, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE4AEE4);
}

void sub_20BE4AF98(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPolyMeshSchema::createVelocitiesProperty(Alembic::AbcGeom::v12::OPolyMeshSchema *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  int v17;
  void *__p;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v23;
  std::string v24;
  uint64_t v25;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v21 = *((_QWORD *)this + 5);
  v22 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(&__p, ".velocities");
  v5 = *((_DWORD *)this + 214);
  LODWORD(v16) = 2;
  v17 = v5;
  LODWORD(v14) = 0;
  v15 = 0;
  LODWORD(v12) = 0;
  v13 = 0;
  LODWORD(v10) = 0;
  v11 = 0;
  sub_20BE2A6A0((uint64_t)&v23, &v21, (uint64_t)&__p, &v16, &v14, &v12, &v10);
  *((_DWORD *)this + 74) = (_DWORD)v23;
  std::string::operator=((std::string *)((char *)this + 304), &v24);
  sub_20BDE881C((_QWORD *)this + 41, &v25);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v23);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  v6 = v22;
  if (v22)
  {
    v7 = (unint64_t *)&v22->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_20BE29E5C(&v23, (uint64_t *)&__p);
  if (*((_QWORD *)this + 106))
  {
    v9 = 0;
    do
    {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 296);
      ++v9;
    }
    while (v9 < *((_QWORD *)this + 106));
  }
  if (v24.__r_.__value_.__l.__size_)
  {
    v24.__r_.__value_.__r.__words[2] = v24.__r_.__value_.__l.__size_;
    operator delete((void *)v24.__r_.__value_.__l.__size_);
  }
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
}

void sub_20BE4B134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::OPolyMeshSchema::createUVsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  void **v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t *v23;
  int v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  void *__dst[2];
  void *v30;
  _BYTE *v31;
  std::string v32;
  void *__p;
  _BYTE *v34;
  void *v35;
  std::string v36;
  uint64_t v37[2];
  uint64_t v38;
  int v39;
  std::string v40;
  uint64_t v41[2];
  uint64_t *v42;
  int v43;
  void *v44;
  void *v45;
  _BYTE v46[13];
  void *v47;
  _BYTE *v48;
  uint64_t *v49;
  _QWORD *v50[2];
  __int128 v51;
  __int128 v52;
  _BYTE v53[24];
  void *v54;
  void *v55;
  uint64_t v56;
  int data;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;

  v61 = 0;
  v62 = 0;
  v63 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = 0x20000000ALL;
  v52 = 0u;
  *(_OWORD *)v53 = 0u;
  *(_QWORD *)&v53[16] = 0x100000005;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  data = 127;
  v49 = (uint64_t *)v50;
  v50[0] = 0;
  v50[1] = 0;
  Alembic::Abc::v12::SetSourceName(&v49, (const std::string *)(a1 + 816));
  if (*(_DWORD *)(a2 + 256) == 127 || !*(_QWORD *)(a2 + 248) && *(_QWORD *)(a2 + 272) == *(_QWORD *)(a2 + 264))
    v4 = 0;
  else
    v4 = nullsub_21;
  if (v4)
  {
    sub_20BE2ACE4(v46, (uint64_t *)&v61);
    sub_20BE2AD84(&v42, (uint64_t *)&v58);
    sub_20BE2AE24((uint64_t)__dst, (uint64_t *)v46, (uint64_t *)&v42, *(_DWORD *)(a2 + 288));
    *(void **)&v51 = __dst[0];
    *(void **)((char *)&v51 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v52, (char *)v30, (uint64_t)v31, (v31 - (_BYTE *)v30) >> 3);
    *(_QWORD *)&v53[8] = v32.__r_.__value_.__l.__size_;
    *(_QWORD *)&v53[13] = *(std::string::size_type *)((char *)&v32.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v54, (char *)__p, (uint64_t)v34, (v34 - (_BYTE *)__p) >> 3);
    data = (int)v36.__r_.__value_.__l.__data_;
    if (__p)
    {
      v34 = __p;
      operator delete(__p);
    }
    if (v30)
    {
      v31 = v30;
      operator delete(v30);
    }
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    v27 = *(uint64_t **)(a1 + 40);
    v28 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    sub_20BDDC0E4(v46, "uv");
    v8 = *(_DWORD *)(a1 + 856);
    LODWORD(v42) = 2;
    v43 = v8;
    LODWORD(v25) = 3;
    v26 = &v49;
    LODWORD(v23) = 0;
    v24 = 0;
    sub_20BE2AED4((char *)__dst, &v27, (uint64_t)v46, 1, data, 1, &v42, &v25, &v23);
    v9 = (void **)(a1 + 464);
    if (*(char *)(a1 + 487) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 480) = v30;
    HIBYTE(v30) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 488) = (_DWORD)v31;
    std::string::operator=((std::string *)(a1 + 496), &v32);
    sub_20BDE881C((_QWORD *)(a1 + 520), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 536) = (_DWORD)v35;
    std::string::operator=((std::string *)(a1 + 544), &v36);
    sub_20BDE881C((_QWORD *)(a1 + 568), v37);
    *(_QWORD *)(a1 + 584) = v38;
    *(_DWORD *)(a1 + 592) = v39;
    std::string::operator=((std::string *)(a1 + 600), &v40);
    sub_20BDE881C((_QWORD *)(a1 + 624), v41);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v39);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v35);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v31);
    if (SHIBYTE(v30) < 0)
      operator delete(__dst[0]);
    if (SHIBYTE(v47) < 0)
      operator delete(*(void **)v46);
    v10 = v28;
    if (v28)
    {
      v11 = (unint64_t *)&v28->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      goto LABEL_46;
    }
  }
  else
  {
    sub_20BE2ACE4(v46, (uint64_t *)&v61);
    v13 = *(_DWORD *)(a2 + 288);
    __dst[0] = *(void **)v46;
    *(void **)((char *)__dst + 5) = *(void **)&v46[5];
    v30 = 0;
    v31 = 0;
    v32.__r_.__value_.__r.__words[0] = 0;
    sub_20BDE1364(&v30, v47, (uint64_t)v48, (v48 - (_BYTE *)v47) >> 3);
    v32.__r_.__value_.__l.__size_ = 0;
    v32.__r_.__value_.__r.__words[2] = 0x100000005;
    v34 = 0;
    v35 = 0;
    __p = 0;
    LODWORD(v36.__r_.__value_.__l.__data_) = v13;
    *(void **)&v51 = __dst[0];
    *(void **)((char *)&v51 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v52, (char *)v30, (uint64_t)v31, (v31 - (_BYTE *)v30) >> 3);
    *(_QWORD *)&v53[8] = v32.__r_.__value_.__l.__size_;
    *(_QWORD *)&v53[13] = *(std::string::size_type *)((char *)&v32.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v54, (char *)__p, (uint64_t)v34, (v34 - (_BYTE *)__p) >> 3);
    data = (int)v36.__r_.__value_.__l.__data_;
    if (__p)
    {
      v34 = __p;
      operator delete(__p);
    }
    if (v30)
    {
      v31 = v30;
      operator delete(v30);
    }
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    v14 = *(std::__shared_weak_count **)(a1 + 48);
    v21 = *(uint64_t **)(a1 + 40);
    v22 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    sub_20BDDC0E4(v46, "uv");
    v17 = *(_DWORD *)(a1 + 856);
    LODWORD(v42) = 2;
    v43 = v17;
    LODWORD(v25) = 3;
    v26 = &v49;
    LODWORD(v23) = 0;
    v24 = 0;
    sub_20BE2AED4((char *)__dst, &v21, (uint64_t)v46, 0, data, 1, &v42, &v25, &v23);
    v18 = (void **)(a1 + 464);
    if (*(char *)(a1 + 487) < 0)
      operator delete(*v18);
    *(_OWORD *)v18 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 480) = v30;
    HIBYTE(v30) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 488) = (_DWORD)v31;
    std::string::operator=((std::string *)(a1 + 496), &v32);
    sub_20BDE881C((_QWORD *)(a1 + 520), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 536) = (_DWORD)v35;
    std::string::operator=((std::string *)(a1 + 544), &v36);
    sub_20BDE881C((_QWORD *)(a1 + 568), v37);
    *(_QWORD *)(a1 + 584) = v38;
    *(_DWORD *)(a1 + 592) = v39;
    std::string::operator=((std::string *)(a1 + 600), &v40);
    sub_20BDE881C((_QWORD *)(a1 + 624), v41);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v39);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v35);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v31);
    if (SHIBYTE(v30) < 0)
      operator delete(__dst[0]);
    if (SHIBYTE(v47) < 0)
      operator delete(*(void **)v46);
    v10 = v22;
    if (v22)
    {
      v19 = (unint64_t *)&v22->__shared_owners_;
      do
        v12 = __ldaxr(v19);
      while (__stlxr(v12 - 1, v19));
LABEL_46:
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  if (*(_QWORD *)(a1 + 848))
  {
    v20 = 0;
    do
    {
      sub_20BE2717C(a1 + 464, (uint64_t)&v51);
      ++v20;
    }
    while (v20 < *(_QWORD *)(a1 + 848));
  }
  sub_20BDE9D48((uint64_t)&v49, v50[0]);
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  if ((_QWORD)v52)
  {
    *((_QWORD *)&v52 + 1) = v52;
    operator delete((void *)v52);
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
}

void sub_20BE4B7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52)
{
  uint64_t v52;
  void *v54;
  void *v55;

  if (a51 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  sub_20BDE9D48(v52 - 224, *(_QWORD **)(v52 - 216));
  sub_20BE28D2C((_QWORD *)(v52 - 200));
  v54 = *(void **)(v52 - 112);
  if (v54)
  {
    *(_QWORD *)(v52 - 104) = v54;
    operator delete(v54);
  }
  v55 = *(void **)(v52 - 88);
  if (v55)
  {
    *(_QWORD *)(v52 - 80) = v55;
    operator delete(v55);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPolyMeshSchema::createNormalsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  void **v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t *v23;
  int v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  void *__dst[2];
  void *v28;
  _BYTE *v29;
  std::string v30;
  void *__p;
  _BYTE *v32;
  void *v33;
  std::string v34;
  uint64_t v35[2];
  uint64_t v36;
  int v37;
  std::string v38;
  uint64_t v39[2];
  uint64_t *v40;
  int v41;
  void *v42;
  void *v43;
  uint64_t *v44;
  int v45;
  void *v46;
  void *v47;
  _BYTE v48[13];
  _BYTE *v49;
  _BYTE *v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[24];
  void *v54;
  void *v55;
  uint64_t v56;
  int data;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;

  v61 = 0;
  v62 = 0;
  v63 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = 0x30000000ALL;
  v52 = 0u;
  *(_OWORD *)v53 = 0u;
  *(_QWORD *)&v53[16] = 0x100000005;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  data = 127;
  if (*(_DWORD *)(a2 + 344) == 127 || !*(_QWORD *)(a2 + 336) && *(_QWORD *)(a2 + 360) == *(_QWORD *)(a2 + 352))
    v4 = 0;
  else
    v4 = nullsub_21;
  if (v4)
  {
    sub_20BE29E5C(&v44, (uint64_t *)&v61);
    sub_20BE2C884(v48, (uint64_t *)&v44);
    sub_20BE2AD84(&v40, (uint64_t *)&v58);
    sub_20BE2C9F0((uint64_t)__dst, (uint64_t *)v48, (uint64_t *)&v40, *(_DWORD *)(a2 + 376));
    *(void **)&v51 = __dst[0];
    *(void **)((char *)&v51 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v52, (char *)v28, (uint64_t)v29, (v29 - (_BYTE *)v28) >> 3);
    *(_QWORD *)&v53[8] = v30.__r_.__value_.__l.__size_;
    *(_QWORD *)&v53[13] = *(std::string::size_type *)((char *)&v30.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v54, (char *)__p, (uint64_t)v32, (v32 - (_BYTE *)__p) >> 3);
    data = (int)v34.__r_.__value_.__l.__data_;
    if (__p)
    {
      v32 = __p;
      operator delete(__p);
    }
    if (v28)
    {
      v29 = v28;
      operator delete(v28);
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    if (v46)
    {
      v47 = v46;
      operator delete(v46);
    }
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    v25 = *(uint64_t **)(a1 + 40);
    v26 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    sub_20BDDC0E4(v48, "N");
    v8 = *(_DWORD *)(a1 + 856);
    LODWORD(v44) = 2;
    v45 = v8;
    LODWORD(v40) = 0;
    v41 = 0;
    LODWORD(v23) = 0;
    v24 = 0;
    sub_20BE2CAA0((char *)__dst, &v25, (uint64_t)v48, 1, data, 1, &v44, &v40, &v23);
    v9 = (void **)(a1 + 640);
    if (*(char *)(a1 + 663) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 656) = v28;
    HIBYTE(v28) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 664) = (_DWORD)v29;
    std::string::operator=((std::string *)(a1 + 672), &v30);
    sub_20BDE881C((_QWORD *)(a1 + 696), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 712) = (_DWORD)v33;
    std::string::operator=((std::string *)(a1 + 720), &v34);
    sub_20BDE881C((_QWORD *)(a1 + 744), v35);
    *(_QWORD *)(a1 + 760) = v36;
    *(_DWORD *)(a1 + 768) = v37;
    std::string::operator=((std::string *)(a1 + 776), &v38);
    sub_20BDE881C((_QWORD *)(a1 + 800), v39);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v37);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v33);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v29);
    if (SHIBYTE(v28) < 0)
      operator delete(__dst[0]);
    if (SHIBYTE(v49) < 0)
      operator delete(*(void **)v48);
    v10 = v26;
    if (v26)
    {
      v11 = (unint64_t *)&v26->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      goto LABEL_50;
    }
  }
  else
  {
    sub_20BE29E5C(&v44, (uint64_t *)&v61);
    sub_20BE2C884(v48, (uint64_t *)&v44);
    v13 = *(_DWORD *)(a2 + 376);
    __dst[0] = *(void **)v48;
    *(void **)((char *)__dst + 5) = *(void **)&v48[5];
    v28 = 0;
    v29 = 0;
    v30.__r_.__value_.__r.__words[0] = 0;
    sub_20BDE1364(&v28, v49, (uint64_t)v50, (v50 - v49) >> 3);
    v30.__r_.__value_.__l.__size_ = 0;
    v30.__r_.__value_.__r.__words[2] = 0x100000005;
    v32 = 0;
    v33 = 0;
    __p = 0;
    LODWORD(v34.__r_.__value_.__l.__data_) = v13;
    *(void **)&v51 = __dst[0];
    *(void **)((char *)&v51 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v52, (char *)v28, (uint64_t)v29, (v29 - (_BYTE *)v28) >> 3);
    *(_QWORD *)&v53[8] = v30.__r_.__value_.__l.__size_;
    *(_QWORD *)&v53[13] = *(std::string::size_type *)((char *)&v30.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v54, (char *)__p, (uint64_t)v32, (v32 - (_BYTE *)__p) >> 3);
    data = (int)v34.__r_.__value_.__l.__data_;
    if (__p)
    {
      v32 = __p;
      operator delete(__p);
    }
    if (v28)
    {
      v29 = v28;
      operator delete(v28);
    }
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    if (v46)
    {
      v47 = v46;
      operator delete(v46);
    }
    v14 = *(std::__shared_weak_count **)(a1 + 48);
    v21 = *(uint64_t **)(a1 + 40);
    v22 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    sub_20BDDC0E4(v48, "N");
    v17 = *(_DWORD *)(a1 + 856);
    LODWORD(v44) = 2;
    v45 = v17;
    LODWORD(v40) = 0;
    v41 = 0;
    LODWORD(v23) = 0;
    v24 = 0;
    sub_20BE2CAA0((char *)__dst, &v21, (uint64_t)v48, 0, data, 1, &v44, &v40, &v23);
    v18 = (void **)(a1 + 640);
    if (*(char *)(a1 + 663) < 0)
      operator delete(*v18);
    *(_OWORD *)v18 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 656) = v28;
    HIBYTE(v28) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 664) = (_DWORD)v29;
    std::string::operator=((std::string *)(a1 + 672), &v30);
    sub_20BDE881C((_QWORD *)(a1 + 696), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 712) = (_DWORD)v33;
    std::string::operator=((std::string *)(a1 + 720), &v34);
    sub_20BDE881C((_QWORD *)(a1 + 744), v35);
    *(_QWORD *)(a1 + 760) = v36;
    *(_DWORD *)(a1 + 768) = v37;
    std::string::operator=((std::string *)(a1 + 776), &v38);
    sub_20BDE881C((_QWORD *)(a1 + 800), v39);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v37);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v33);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v29);
    if (SHIBYTE(v28) < 0)
      operator delete(__dst[0]);
    if (SHIBYTE(v49) < 0)
      operator delete(*(void **)v48);
    v10 = v22;
    if (v22)
    {
      v19 = (unint64_t *)&v22->__shared_owners_;
      do
        v12 = __ldaxr(v19);
      while (__stlxr(v12 - 1, v19));
LABEL_50:
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  if (*(_QWORD *)(a1 + 848))
  {
    v20 = 0;
    do
    {
      sub_20BE27540(a1 + 640, (uint64_t)&v51);
      ++v20;
    }
    while (v20 < *(_QWORD *)(a1 + 848));
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  if ((_QWORD)v52)
  {
    *((_QWORD *)&v52 + 1) = v52;
    operator delete((void *)v52);
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
}

void sub_20BE4BED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  uint64_t v47;
  void *v49;
  void *v50;

  if (*(char *)(v47 - 217) < 0)
    operator delete(*(void **)(v47 - 240));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  sub_20BE28D2C((_QWORD *)(v47 - 200));
  v49 = *(void **)(v47 - 112);
  if (v49)
  {
    *(_QWORD *)(v47 - 104) = v49;
    operator delete(v49);
  }
  v50 = *(void **)(v47 - 88);
  if (v50)
  {
    *(_QWORD *)(v47 - 80) = v50;
    operator delete(v50);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPolyMeshSchema::createPositionsProperty(Alembic::AbcGeom::v12::OPolyMeshSchema *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *__p[2];
  void *v12;
  void *v13;
  void *v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  std::string v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29[2];

  v29[0] = 0;
  v29[1] = 0;
  v28 = (uint64_t *)v29;
  sub_20BE288A4(&v28, 3);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v23 = *((_QWORD *)this + 5);
  v24 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, "P");
  LODWORD(v14) = 3;
  v15 = &v28;
  v5 = *((_DWORD *)this + 214);
  LODWORD(v21) = 2;
  v22 = v5;
  LODWORD(v19) = 0;
  v20 = 0;
  LODWORD(v17) = 0;
  v18 = 0;
  sub_20BE2981C((uint64_t)&v25, &v23, (uint64_t)__p, (uint64_t **)&v14, &v21, &v19, &v17);
  *((_DWORD *)this + 62) = (_DWORD)v25;
  std::string::operator=((std::string *)((char *)this + 256), &v26);
  sub_20BDE881C((_QWORD *)this + 35, &v27);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v25);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  v6 = v24;
  if (v24)
  {
    v7 = (unint64_t *)&v24->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  sub_20BE29E5C(&v25, (uint64_t *)&v14);
  if (*((_QWORD *)this + 106))
  {
    v9 = 0;
    do
    {
      sub_20BE29F08(__p, (uint64_t *)&v25);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 248);
      if (v12)
      {
        v13 = v12;
        operator delete(v12);
      }
      ++v9;
      v10 = *((_QWORD *)this + 106);
    }
    while (v9 < v10);
  }
  else
  {
    v10 = 0;
  }
  sub_20BE4C268((uint64_t)this, *((_DWORD *)this + 214), v10);
  if (v26.__r_.__value_.__l.__size_)
  {
    v26.__r_.__value_.__r.__words[2] = v26.__r_.__value_.__l.__size_;
    operator delete((void *)v26.__r_.__value_.__l.__size_);
  }
  if (v14)
  {
    v15 = (uint64_t **)v14;
    operator delete(v14);
  }
  sub_20BDE9D48((uint64_t)&v28, v29[0]);
}

void sub_20BE4C1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 88);
  if (v29)
  {
    *(_QWORD *)(v27 - 80) = v29;
    operator delete(v29);
  }
  if (__p)
    operator delete(__p);
  sub_20BDE9D48(v27 - 56, *(_QWORD **)(v27 - 48));
  _Unwind_Resume(a1);
}

void sub_20BE4C268(uint64_t a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  Alembic::Abc::v12::OScalarProperty *v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  int v20;
  void *__p[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _OWORD v25[2];
  int64x2_t v26;
  uint64_t v27;
  const char *v28;

  v27 = a1 + 8;
  v28 = "OGeomBaseSchema::createSelfBoundsProperty()";
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(_QWORD *)(a1 + 72))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 87))
  {
LABEL_5:
    if (*(_QWORD *)(a1 + 88))
      return;
  }
  v6 = *(std::__shared_weak_count **)(a1 + 48);
  v23 = *(_QWORD *)(a1 + 40);
  v24 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".selfBnds");
  LODWORD(v19) = 2;
  v20 = a2;
  LODWORD(v17) = 0;
  v18 = 0;
  LODWORD(v15) = 0;
  v16 = 0;
  LODWORD(v13) = 0;
  v14 = 0;
  sub_20BE1C558((uint64_t)v25, &v23, (uint64_t)__p, &v19, &v17, &v15, &v13);
  *(_DWORD *)(a1 + 56) = v25[0];
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)((char *)v25 + 8));
  sub_20BDE881C((_QWORD *)(a1 + 88), v26.i64);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)v25);
  if (v22 < 0)
    operator delete(__p[0]);
  v9 = v24;
  if (v24)
  {
    v10 = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v25[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v25[1] = xmmword_20CA521E0;
  v26 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (a3)
  {
    v12 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 56);
    do
    {
      Alembic::Abc::v12::OScalarProperty::set(v12, v25);
      --a3;
    }
    while (a3);
  }
}

void sub_20BE4C3F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;
  void *v27;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v24 - 96));
  if (a23 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a24);
  v27 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v24 - 48, (uint64_t)v27);
  else
    sub_20BE02504(v24 - 48, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE4C3E0);
}

void sub_20BE4C474(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OPolyMeshSchema::setFromPrevious(Alembic::AbcGeom::v12::OPolyMeshSchema *this)
{
  uint64_t (*v2)();
  uint64_t (*v3)();
  uint64_t (*v4)();
  uint64_t (*v5)();
  uint64_t (*v6)();
  int v7;
  uint64_t (*v8)();
  _BYTE *v9;
  uint64_t result;
  uint64_t (*v11)();

  if (*((char *)this + 279) < 0)
  {
    if (*((_QWORD *)this + 33))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 279))
  {
LABEL_3:
    v2 = 0;
    goto LABEL_8;
  }
  if (*((_QWORD *)this + 35))
    v2 = nullsub_7;
  else
    v2 = 0;
LABEL_8:
  if (v2)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 248));
  if (*((char *)this + 375) < 0)
  {
    if (*((_QWORD *)this + 45))
      goto LABEL_12;
  }
  else if (*((_BYTE *)this + 375))
  {
LABEL_12:
    v3 = 0;
    goto LABEL_17;
  }
  if (*((_QWORD *)this + 47))
    v3 = nullsub_7;
  else
    v3 = 0;
LABEL_17:
  if (v3)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 344));
  if (*((char *)this + 423) < 0)
  {
    if (*((_QWORD *)this + 51))
      goto LABEL_21;
  }
  else if (*((_BYTE *)this + 423))
  {
LABEL_21:
    v4 = 0;
    goto LABEL_26;
  }
  if (*((_QWORD *)this + 53))
    v4 = nullsub_7;
  else
    v4 = 0;
LABEL_26:
  if (v4)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 392));
  if (*((char *)this + 87) < 0)
  {
    if (*((_QWORD *)this + 9))
      goto LABEL_30;
  }
  else if (*((_BYTE *)this + 87))
  {
LABEL_30:
    v5 = 0;
    goto LABEL_35;
  }
  if (*((_QWORD *)this + 11))
    v5 = nullsub_6;
  else
    v5 = 0;
LABEL_35:
  if (v5)
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56));
  if (*((char *)this + 327) < 0)
  {
    if (*((_QWORD *)this + 39))
      goto LABEL_39;
  }
  else if (*((_BYTE *)this + 327))
  {
LABEL_39:
    v6 = 0;
    goto LABEL_44;
  }
  if (*((_QWORD *)this + 41))
    v6 = nullsub_7;
  else
    v6 = 0;
LABEL_44:
  if (v6)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 296));
  v7 = sub_20BE296FC((uint64_t)this + 464);
  v8 = nullsub_16;
  if (!v7)
    v8 = 0;
  if (v8)
    sub_20BE286D0((_BYTE *)this + 464);
  v9 = (char *)this + 640;
  result = sub_20BE296FC((uint64_t)v9);
  v11 = nullsub_17;
  if (!(_DWORD)result)
    v11 = 0;
  if (v11)
    return sub_20BE2876C(v9);
  return result;
}

void sub_20BE4C694(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE4C684);
}

void sub_20BE4C6C8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OPolyMeshSchema::setTimeSampling(Alembic::AbcGeom::v12::OPolyMeshSchema *this, int a2)
{
  uint64_t (*v3)();
  uint64_t (*v4)();
  uint64_t (*v5)();
  uint64_t (*v6)();
  uint64_t (*v7)();
  int v8;
  uint64_t (*v9)();
  _BYTE *v10;
  uint64_t result;
  uint64_t (*v12)();

  *((_DWORD *)this + 214) = a2;
  if (*((char *)this + 279) < 0)
  {
    if (*((_QWORD *)this + 33))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 279))
  {
LABEL_3:
    v3 = 0;
    goto LABEL_8;
  }
  if (*((_QWORD *)this + 35))
    v3 = nullsub_7;
  else
    v3 = 0;
LABEL_8:
  if (v3)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 248));
  if (*((char *)this + 375) < 0)
  {
    if (*((_QWORD *)this + 45))
      goto LABEL_12;
  }
  else if (*((_BYTE *)this + 375))
  {
LABEL_12:
    v4 = 0;
    goto LABEL_17;
  }
  if (*((_QWORD *)this + 47))
    v4 = nullsub_7;
  else
    v4 = 0;
LABEL_17:
  if (v4)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 344));
  if (*((char *)this + 423) < 0)
  {
    if (*((_QWORD *)this + 51))
      goto LABEL_21;
  }
  else if (*((_BYTE *)this + 423))
  {
LABEL_21:
    v5 = 0;
    goto LABEL_26;
  }
  if (*((_QWORD *)this + 53))
    v5 = nullsub_7;
  else
    v5 = 0;
LABEL_26:
  if (v5)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 392));
  if (*((char *)this + 87) < 0)
  {
    if (*((_QWORD *)this + 9))
      goto LABEL_30;
  }
  else if (*((_BYTE *)this + 87))
  {
LABEL_30:
    v6 = 0;
    goto LABEL_35;
  }
  if (*((_QWORD *)this + 11))
    v6 = nullsub_6;
  else
    v6 = 0;
LABEL_35:
  if (v6)
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56));
  if (*((char *)this + 327) < 0)
  {
    if (*((_QWORD *)this + 39))
      goto LABEL_39;
  }
  else if (*((_BYTE *)this + 327))
  {
LABEL_39:
    v7 = 0;
    goto LABEL_44;
  }
  if (*((_QWORD *)this + 41))
    v7 = nullsub_7;
  else
    v7 = 0;
LABEL_44:
  if (v7)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 296));
  v8 = sub_20BE296FC((uint64_t)this + 464);
  v9 = nullsub_16;
  if (!v8)
    v9 = 0;
  if (v9)
    sub_20BE2921C((_BYTE *)this + 464);
  v10 = (char *)this + 640;
  result = sub_20BE296FC((uint64_t)v10);
  v12 = nullsub_17;
  if (!(_DWORD)result)
    v12 = 0;
  if (v12)
    return sub_20BE292C0(v10);
  return result;
}

void sub_20BE4C914(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE4C900);
}

void sub_20BE4C948(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

int *Alembic::AbcGeom::v12::OPolyMeshSchema::setTimeSampling(Alembic::AbcGeom::v12::OPolyMeshSchema *a1, _QWORD *a2)
{
  int *result;
  int v4;
  _BYTE v5[56];
  _BYTE v6[48];
  int *v7;
  const char *v8;

  result = (int *)((char *)a1 + 8);
  v7 = result;
  v8 = "OPolyMeshSchema::setTimeSampling( TimeSamplingPtr)";
  if (*a2)
  {
    sub_20BE1A75C(result, (uint64_t)v5);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v5, (uint64_t)v6);
    v4 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v6);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v6);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v5);
    return (int *)Alembic::AbcGeom::v12::OPolyMeshSchema::setTimeSampling(a1, v4);
  }
  return result;
}

void sub_20BE4C9E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void *v19;

  v19 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v17 - 32, (uint64_t)v19);
  else
    sub_20BE02504(v17 - 32, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE4C9D8);
}

void sub_20BE4CA50(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL Alembic::AbcGeom::v12::OPolyMeshSchema::hasFaceSet(uint64_t a1, const void **a2)
{
  return a1 + 448 != sub_20BDEEBA4(a1 + 440, a2);
}

void sub_20BE4CAB8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE4CAA8);
}

void sub_20BE4CAF0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *Alembic::AbcGeom::v12::OPolyMeshSchema::createFaceSet(uint64_t a1, const void **a2)
{
  int *v3;
  uint64_t **v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *exception;
  _QWORD *v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  int v15;
  void (**v16)(Alembic::Abc::v12::OObject *__hidden);
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  int v23;
  std::string v24;
  uint64_t v25;
  uint64_t (**v26)();
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  const char *v43;
  const void **v44;

  v3 = (int *)(a1 + 8);
  v42 = a1 + 8;
  v43 = "OPolyMeshSchema::createFaceSet ()";
  v4 = (uint64_t **)(a1 + 440);
  if (a1 + 448 != sub_20BDEEBA4(a1 + 440, a2))
  {
    sub_20BDDBD68((uint64_t)&v22);
    sub_20BDDC1C8(&v24, (uint64_t)"faceSet has already been created in polymesh.", 45);
    std::stringbuf::str();
    sub_20BDDBF20(&v34, &v40);
    if (v41 < 0)
      operator delete((void *)v40);
    exception = __cxa_allocate_exception(0x20uLL);
    v11 = sub_20BDDC09C(exception, (uint64_t)&v34);
    __cxa_throw(v11, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BE1A75C(v3, (uint64_t)&v34);
  v17 = v35;
  if (SHIBYTE(v37) < 0)
  {
    sub_20BDDBFAC(&v18, (void *)v36, *((unint64_t *)&v36 + 1));
  }
  else
  {
    v18 = v36;
    v19 = v37;
  }
  v16 = off_24C518EC0;
  v20 = v38;
  v21 = v39;
  if (v39)
  {
    v5 = (unint64_t *)(v39 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  LODWORD(v40) = 0;
  DWORD2(v40) = 0;
  LODWORD(v14) = 0;
  v15 = 0;
  LODWORD(v12) = 0;
  v13 = 0;
  sub_20BE4E280((uint64_t)&v22, (uint64_t)&v16, (__int128 *)a2, (uint64_t **)&v40, &v14, &v12);
  v44 = a2;
  v7 = sub_20BE4E0BC(v4, a2, (uint64_t)&unk_20CA525F5, (__int128 **)&v44);
  *((_DWORD *)v7 + 16) = v23;
  std::string::operator=((std::string *)v7 + 3, &v24);
  sub_20BDE881C(v7 + 12, &v25);
  sub_20BE4D464((uint64_t)(v7 + 14), (uint64_t)&v26);
  v22 = off_24C519878;
  v26 = (uint64_t (**)())&unk_24C519358;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v33);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v32);
  v26 = off_24C519410;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v31);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v30);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v29);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v28);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(&v27);
  Alembic::Abc::v12::OObject::~OObject((void **)&v22);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v16);
  v22 = (uint64_t (**)())a2;
  v8 = sub_20BE4E0BC(v4, a2, (uint64_t)&unk_20CA525F5, (__int128 **)&v22) + 7;
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v34);
  return v8;
}

void sub_20BE4CD88(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  void *v16;
  unsigned __int8 v17;
  void *v18;
  va_list va;

  va_start(va, a13);
  sub_20BDDC194((std::exception *)(v13 - 160));
  sub_20BDDBE98((uint64_t)va);
  v16 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v13 - 80, (uint64_t)v16);
  else
    sub_20BE02504(v13 - 80, 0);
  __cxa_end_catch();
  v17 = atomic_load((unsigned __int8 *)&qword_254784E98);
  if ((v17 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254784E98))
    {
      v18 = operator new(0x198uLL);
      sub_20BE4ED90((uint64_t)v18);
      qword_254784E90 = (uint64_t)v18;
      __cxa_guard_release(&qword_254784E98);
    }
  }
  JUMPOUT(0x20BE4CCF8);
}

void sub_20BE4CE84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  __cxa_guard_abort(&qword_254784E98);
  _Unwind_Resume(a1);
}

void sub_20BE4CEC8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C519878;
  *(_QWORD *)(a1 + 56) = &unk_24C519358;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 352));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 304));
  *(_QWORD *)(a1 + 56) = off_24C519410;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 208));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 160));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 112));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 64));
  Alembic::Abc::v12::OObject::~OObject((void **)a1);
}

uint64_t Alembic::AbcGeom::v12::OPolyMeshSchema::getFaceSetNames(uint64_t result, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  __int128 *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v2 = *(_QWORD **)(result + 440);
  v3 = (_QWORD *)(result + 448);
  if (v2 != (_QWORD *)(result + 448))
  {
    v5 = a2[1];
    do
    {
      v6 = (__int128 *)(v2 + 4);
      if (v5 >= a2[2])
      {
        result = sub_20BE4EE50(a2, v6);
        v5 = result;
      }
      else
      {
        result = (uint64_t)sub_20BE4EDF4(a2, v6);
        v5 += 24;
      }
      a2[1] = v5;
      v7 = (_QWORD *)v2[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v2[2];
          v9 = *v8 == (_QWORD)v2;
          v2 = v8;
        }
        while (!v9);
      }
      v2 = v8;
    }
    while (v8 != v3);
  }
  return result;
}

void sub_20BE4D000(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE4CFECLL);
}

void sub_20BE4D034(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OPolyMeshSchema::getFaceSet@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 *v11;

  v11 = a2;
  v4 = sub_20BE4E0BC((uint64_t **)(a1 + 440), (const void **)a2, (uint64_t)&unk_20CA525F5, &v11);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v4 + 16);
  v5 = (_BYTE *)(a3 + 16);
  if (*((char *)v4 + 95) < 0)
  {
    sub_20BDDBFAC(v5, (void *)v4[9], v4[10]);
  }
  else
  {
    v6 = *(_OWORD *)(v4 + 9);
    *(_QWORD *)(a3 + 32) = v4[11];
    *(_OWORD *)v5 = v6;
  }
  *(_QWORD *)a3 = off_24C518EC0;
  *(_QWORD *)(a3 + 40) = v4[12];
  v7 = v4[13];
  *(_QWORD *)(a3 + 48) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)a3 = off_24C519878;
  return sub_20BE4D5F4(a3 + 56, (uint64_t)(v4 + 14));
}

void sub_20BE4D134(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;
  void *v12;

  Alembic::Abc::v12::OObject::~OObject(v9);
  v12 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v12);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  sub_20BE4ED90((uint64_t)v9);
  JUMPOUT(0x20BE4D120);
}

void sub_20BE4D18C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

std::string *Alembic::AbcGeom::v12::OPolyMeshSchema::setUVSourceName(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 34, a2);
}

void sub_20BE4D1B8(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20BE4EF70(a1);
  operator delete(v1);
}

void sub_20BE4D1CC(uint64_t a1)
{
  sub_20BDEBF08((_QWORD *)(a1 + 280));
  MEMORY[0x212B929D0](a1 + 256, "");
  sub_20BDEBF08((_QWORD *)(a1 + 328));
  MEMORY[0x212B929D0](a1 + 304, "");
  sub_20BDEBF08((_QWORD *)(a1 + 376));
  MEMORY[0x212B929D0](a1 + 352, "");
  sub_20BDEBF08((_QWORD *)(a1 + 424));
  MEMORY[0x212B929D0](a1 + 400, "");
  sub_20BE29790(a1 + 464);
  sub_20BE29790(a1 + 640);
  sub_20BE4D944(a1 + 440, *(_QWORD **)(a1 + 448));
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 440) = a1 + 448;
  sub_20BE4D3B4((_QWORD *)a1);
}

uint64_t sub_20BE4D26C(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return *(_BYTE *)(a1 + 840) != 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return *(_BYTE *)(a1 + 840) != 0;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    if (*(char *)(a1 + 279) < 0)
    {
      if (*(_QWORD *)(a1 + 264))
        return *(_BYTE *)(a1 + 840) != 0;
    }
    else if (*(_BYTE *)(a1 + 279))
    {
      return *(_BYTE *)(a1 + 840) != 0;
    }
    if (*(_QWORD *)(a1 + 280))
    {
      if (*(char *)(a1 + 375) < 0)
      {
        if (*(_QWORD *)(a1 + 360))
          return *(_BYTE *)(a1 + 840) != 0;
      }
      else if (*(_BYTE *)(a1 + 375))
      {
        return *(_BYTE *)(a1 + 840) != 0;
      }
      if (*(_QWORD *)(a1 + 376))
      {
        if (*(char *)(a1 + 423) < 0)
        {
          if (*(_QWORD *)(a1 + 408))
            return *(_BYTE *)(a1 + 840) != 0;
        }
        else if (*(_BYTE *)(a1 + 423))
        {
          return *(_BYTE *)(a1 + 840) != 0;
        }
        if (*(_QWORD *)(a1 + 424))
          return 1;
      }
    }
  }
  return *(_BYTE *)(a1 + 840) != 0;
}

uint64_t sub_20BE4D304(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_24C519848;
  v2 = (void **)(a1 + 8);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_20BE4D35C(void **a1)
{
  void **v2;

  *a1 = off_24C519848;
  v2 = a1 + 1;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a1 + 13);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a1 + 7);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  operator delete(a1);
}

void sub_20BE4D3B4(_QWORD *a1)
{
  sub_20BDEBF08(a1 + 11);
  MEMORY[0x212B929D0](a1 + 8, "");
  sub_20BDEBF08(a1 + 17);
  MEMORY[0x212B929D0](a1 + 14, "");
  sub_20BDEBF08(a1 + 23);
  MEMORY[0x212B929D0](a1 + 20, "");
  sub_20BDEBF08(a1 + 29);
  MEMORY[0x212B929D0](a1 + 26, "");
  sub_20BDEBF08(a1 + 5);
  JUMPOUT(0x212B929D0);
}

BOOL sub_20BE4D438(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 40) != 0;
}

uint64_t sub_20BE4D464(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  sub_20BDE881C((_QWORD *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  sub_20BDE881C((_QWORD *)(a1 + 88), (uint64_t *)(a2 + 88));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  sub_20BDE881C((_QWORD *)(a1 + 136), (uint64_t *)(a2 + 136));
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  sub_20BDE881C((_QWORD *)(a1 + 184), (uint64_t *)(a2 + 184));
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  sub_20BDE881C((_QWORD *)(a1 + 232), (uint64_t *)(a2 + 232));
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  sub_20BDE881C((_QWORD *)(a1 + 280), (uint64_t *)(a2 + 280));
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  sub_20BDE881C((_QWORD *)(a1 + 328), (uint64_t *)(a2 + 328));
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  return a1;
}

void sub_20BE4D570(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C519878;
  *(_QWORD *)(a1 + 56) = &unk_24C519358;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 352));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 304));
  *(_QWORD *)(a1 + 56) = off_24C519410;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 208));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 160));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 112));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 64));
  Alembic::Abc::v12::OObject::~OObject((void **)a1);
  operator delete(v2);
}

uint64_t sub_20BE4D5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _BYTE *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v4 = sub_20BE4D70C(a1, a2);
  *(_QWORD *)v4 = &unk_24C519358;
  *(_DWORD *)(v4 + 248) = *(_DWORD *)(a2 + 248);
  v5 = v4 + 256;
  if (*(char *)(a2 + 279) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v5, *(void **)(a2 + 256), *(_QWORD *)(a2 + 264));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 272);
    *(_OWORD *)v5 = v6;
  }
  v7 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  v10 = (_BYTE *)(a1 + 304);
  if (*(char *)(a2 + 327) < 0)
  {
    sub_20BDDBFAC(v10, *(void **)(a2 + 304), *(_QWORD *)(a2 + 312));
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_OWORD *)v10 = v11;
  }
  v12 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  return a1;
}

void sub_20BE4D6E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_20BE30270(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE4D70C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _BYTE *v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)a1 = off_24C519410;
  v9 = (_BYTE *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_20BDDBFAC(v9, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  v14 = (_BYTE *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_20BDDBFAC(v14, *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)v14 = v15;
  }
  v16 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  v19 = (_BYTE *)(a1 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    sub_20BDDBFAC(v19, *(void **)(a2 + 160), *(_QWORD *)(a2 + 168));
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)v19 = v20;
  }
  v21 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  v24 = (_BYTE *)(a1 + 208);
  if (*(char *)(a2 + 231) < 0)
  {
    sub_20BDDBFAC(v24, *(void **)(a2 + 208), *(_QWORD *)(a2 + 216));
  }
  else
  {
    v25 = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_OWORD *)v24 = v25;
  }
  v26 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  return a1;
}

void sub_20BE4D900(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  Alembic::Abc::v12::OCompoundProperty *v4;

  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_20BE4D944(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20BE4D944(a1, *a2);
    sub_20BE4D944(a1, a2[1]);
    sub_20BE4D98C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20BE4D98C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = off_24C519878;
  v2 = a1 + 24;
  *(_QWORD *)(a1 + 80) = &unk_24C519358;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 376));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v2 + 304));
  *(_QWORD *)(v2 + 56) = off_24C519410;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v2 + 256));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v2 + 208));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v2 + 160));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v2 + 112));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(v2 + 64));
  Alembic::Abc::v12::OObject::~OObject((void **)v2);
  if (*(char *)(v2 - 1) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20BE4DA2C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C5198B0;
  v14 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  sub_20BE4DBFC(a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE4DB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v9);
  _Unwind_Resume(a1);
}

void sub_20BE4DB44(uint64_t a1, int a2, char a3)
{
  if ((a3 & 1) == 0)
    sub_20BE4C268(a1, a2, 0);
}

void sub_20BE4DB8C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;
  void (*v12)(uint64_t);
  uint64_t v13;

  v11 = __cxa_begin_catch(a1);
  v12 = *(void (**)(uint64_t))(*(_QWORD *)v9 + 16);
  if (a2 == 2)
  {
    v13 = (uint64_t)v11;
    v12(v9);
    sub_20BE02570((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_20BE02504((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE4DB78);
}

void sub_20BE4DBDC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE4DBFC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t *v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *exception;
  _QWORD *v23;
  std::string __p;
  void *v25[2];
  char v26;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD v29[37];
  int v30;
  const void **v31[4];
  std::__shared_weak_count *v32;
  int v33;
  uint64_t v34;
  void **v35;

  v28 = 0;
  v29[0] = 0;
  v27 = (uint64_t *)&v28;
  v29[35] = 0;
  v29[36] = 0;
  v30 = 2;
  sub_20BDEBF8C((uint64_t *)v31, (const void ***)&v27);
  v31[3] = 0;
  v32 = 0;
  v33 = 0;
  v34 = 1;
  sub_20BDE9D48((uint64_t)&v27, v28);
  sub_20BE02E30(a4, (uint64_t)&v30);
  sub_20BE02E30(a5, (uint64_t)&v30);
  sub_20BE02E30(a6, (uint64_t)&v30);
  sub_20BE02E30(a7, (uint64_t)&v30);
  *(_DWORD *)(a1 + 8) = v30;
  v29[33] = a1 + 8;
  v29[34] = "OSchema::OSchema::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v27);
    sub_20BDDC1C8(v29, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_20BDDBF20(v25, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    v23 = sub_20BDDC09C(exception, (uint64_t)v25);
    __cxa_throw(v23, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v27, v31);
  if (HIDWORD(v34) != 1)
  {
    sub_20BDDC0E4(v25, "schema");
    sub_20BDDC0E4(&__p, "AbcGeom_PolyMesh_v1");
    v35 = v25;
    v14 = sub_20BDDDFDC(&v27, (const void **)v25, (uint64_t)&unk_20CA525F5, (__int128 **)&v35);
    std::string::operator=((std::string *)(v14 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v26 < 0)
      operator delete(v25[0]);
    if (HIDWORD(v34) != 1)
    {
      sub_20BDDC0E4(v25, "schemaBaseType");
      sub_20BDDC0E4(&__p, "AbcGeom_GeomBase_v1");
      v35 = v25;
      v15 = sub_20BDDDFDC(&v27, (const void **)v25, (uint64_t)&unk_20CA525F5, (__int128 **)&v35);
      std::string::operator=((std::string *)(v15 + 7), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v26 < 0)
        operator delete(v25[0]);
    }
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t **))(*(_QWORD *)*a2 + 112))(v25, *a2, a3, &v27);
  sub_20BDE82DC(a1 + 40, (__int128 *)v25);
  v16 = (std::__shared_weak_count *)v25[1];
  if (v25[1])
  {
    v17 = (unint64_t *)((char *)v25[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  sub_20BDE9D48((uint64_t)&v27, v28);
  v19 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  sub_20BDE9D48((uint64_t)v31, v31[1]);
}

void sub_20BE4DF20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v27;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a22);
  v27 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v23 + 40));
  MEMORY[0x212B929D0](v23 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v24 - 192, (uint64_t)v27);
  else
    sub_20BE02504(v24 - 192, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE4DE48);
}

void sub_20BE4E018(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE4E06C(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20BE4E094(void **a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(a1 + 1);
  operator delete(a1);
}

uint64_t *sub_20BE4E0BC(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20BE4E164((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20BE4E23C((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_20BE4E164@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x1D0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20BE4E1CC(v6 + 4, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20BE4E1B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE4E23C(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE4E1CC(_QWORD *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  sub_20BE4ED90((uint64_t)(__dst + 3));
  return __dst;
}

void sub_20BE4E220(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20BE4E23C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BE4D98C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_20BE4E280(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  _DWORD *v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *exception;
  _QWORD *v47;
  _DWORD v48[4];
  int v49;
  __int128 **p_p_p;
  _DWORD v51[4];
  _DWORD v52[4];
  void *v53[2];
  char v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  __int128 __p;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  __int128 *p_p;
  _QWORD *v66[3];
  std::__shared_weak_count *v67;
  std::string __str;
  void *v69;
  char v70;
  _QWORD *v71[3];
  __int128 v72;
  char v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  _DWORD *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  const void **v81[3];
  _QWORD *v82;
  std::__shared_weak_count *v83;
  int v84;
  uint64_t v85;

  *(_DWORD *)(a1 + 8) = 2;
  v12 = (_DWORD *)(a1 + 8);
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C519878;
  sub_20BE4EBE8(a1 + 56);
  v13 = *(_DWORD *)(a2 + 8);
  *((_QWORD *)&__p + 1) = 0;
  v58 = 0;
  *(_QWORD *)&__p = (char *)&__p + 8;
  v78 = 0;
  v79 = 0;
  v80 = v13;
  sub_20BDEBF8C((uint64_t *)v81, (const void ***)&__p);
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 1;
  sub_20BDE9D48((uint64_t)&__p, *((_QWORD **)&__p + 1));
  sub_20BE02E30(a4, (uint64_t)&v80);
  sub_20BE02E30(a5, (uint64_t)&v80);
  sub_20BE02E30(a6, (uint64_t)&v80);
  *v12 = v80;
  v76 = v12;
  v77 = "OSchemaObject::OSchemaObject( OObject)";
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(std::__shared_weak_count **)(a2 + 48);
  v74 = v15;
  v75 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&__p);
    sub_20BDDC1C8(&v58, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    std::stringbuf::str();
    sub_20BDDBF20(&__str, &v72);
    if (v73 < 0)
      operator delete((void *)v72);
    exception = __cxa_allocate_exception(0x20uLL);
    v47 = sub_20BDDC09C(exception, (uint64_t)&__str);
    __cxa_throw(v47, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v72, v81);
  if (HIDWORD(v85) == 1)
  {
    v18 = 1;
  }
  else
  {
    sub_20BDDC0E4(&__p, "schema");
    sub_20BDDC0E4(&__str, "AbcGeom_FaceSet_v1");
    p_p = &__p;
    v19 = sub_20BDDDFDC((uint64_t **)&v72, (const void **)&__p, (uint64_t)&unk_20CA525F5, &p_p);
    std::string::operator=((std::string *)(v19 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58) < 0)
      operator delete((void *)__p);
    sub_20BDDC0E4(&__p, "schemaObjTitle");
    sub_20BE4EAD4(&__str);
    p_p = &__p;
    v20 = sub_20BDDDFDC((uint64_t **)&v72, (const void **)&__p, (uint64_t)&unk_20CA525F5, &p_p);
    std::string::operator=((std::string *)(v20 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58) < 0)
      operator delete((void *)__p);
    sub_20BDDC0E4(&__p, "schemaBaseType");
    sub_20BDDC0E4(&__str, "AbcGeom_GeomBase_v1");
    p_p = &__p;
    v21 = sub_20BDDDFDC((uint64_t **)&v72, (const void **)&__p, (uint64_t)&unk_20CA525F5, &p_p);
    std::string::operator=((std::string *)(v21 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58) < 0)
      operator delete((void *)__p);
    v18 = 0;
  }
  sub_20BE0C5F0(&__str, a3, (const void ***)&v72);
  (*(void (**)(__int128 *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v15 + 80))(&__p, v15, &__str);
  sub_20BDE82DC(a1 + 40, &__p);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v82;
  v66[2] = v82;
  v67 = v83;
  if (v83)
  {
    v26 = (unint64_t *)&v83->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  if (v25)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v74 + 24))(&__p);
    v28 = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)__p + 48))(__p, v25);
    v29 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  else
  {
    v28 = v84;
  }
  v66[0] = 0;
  v66[1] = 0;
  p_p = (__int128 *)v66;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 40) + 40))(&v55);
  sub_20BDDC0E4(v53, ".faceset");
  v32 = *v12;
  v52[0] = 1;
  v52[2] = v32;
  v51[0] = 2;
  v51[2] = v28;
  v49 = 3;
  p_p_p = &p_p;
  v48[0] = 6;
  v48[2] = v18;
  Alembic::AbcGeom::v12::OFaceSetSchema::OFaceSetSchema(&__p, &v55, v53, v52, v51, &v49, v48);
  sub_20BE4D464(a1 + 56, (uint64_t)&__p);
  *(_QWORD *)&__p = &unk_24C519358;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v64);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v63);
  *(_QWORD *)&__p = off_24C519410;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v62);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v61);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v60);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v59);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)&__p + 1);
  if (v54 < 0)
    operator delete(v53[0]);
  v33 = v56;
  if (v56)
  {
    v34 = (unint64_t *)&v56->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_20BDE9D48((uint64_t)&p_p, v66[0]);
  v36 = v67;
  if (v67)
  {
    v37 = (unint64_t *)&v67->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_20BDE9D48((uint64_t)v71, v71[1]);
  if (v70 < 0)
    operator delete(v69);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_20BDE9D48((uint64_t)&v72, *((_QWORD **)&v72 + 1));
  v39 = v75;
  if (v75)
  {
    v40 = (unint64_t *)&v75->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v83;
  if (v83)
  {
    v43 = (unint64_t *)&v83->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_20BDE9D48((uint64_t)v81, v81[1]);
  return a1;
}

void sub_20BE4E8D8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a71;
  uint64_t v71;
  uint64_t v72;

  sub_20BDDC194((std::exception *)&a71);
  sub_20BDDBE98((uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v72 - 200));
  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE4EBB0(v71);
  sub_20BE4EBB0(v71);
}

void sub_20BE4EA48()
{
  uint64_t v0;

  sub_20BE02504(v0 - 184, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE4E7FCLL);
}

void sub_20BE4EA64()
{
  __cxa_end_catch();
  JUMPOUT(0x20BE4EAB4);
}

void sub_20BE4EA70()
{
  __cxa_end_catch();
  JUMPOUT(0x20BE4EAB4);
}

void sub_20BE4EA8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24)
{
  uint64_t v24;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v24 - 168));
  sub_20BDE9D48((uint64_t)&a23, a24);
  JUMPOUT(0x20BE4EABCLL);
}

void sub_20BE4EAA8()
{
  JUMPOUT(0x20BE4EAC4);
}

void sub_20BE4EAB0(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;

  sub_20BE02EB0(v3 - 152);
  sub_20BE30E08(v2);
  Alembic::Abc::v12::OObject::~OObject(v1);
  _Unwind_Resume(a1);
}

void sub_20BE4EAD4(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_20BDDC0E4(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcGeom_FaceSet_v1");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".faceset");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_20BE4EB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20BE4EBB0(uint64_t a1)
{
  sub_20BE30F10((_QWORD *)(a1 + 56));
}

void sub_20BE4EBC8()
{
  uint64_t v0;

  sub_20BDEBF08((_QWORD *)(v0 + 40));
  JUMPOUT(0x212B929D0);
}

uint64_t sub_20BE4EBE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_20BE4EC80(a1);
  *(_QWORD *)v2 = &unk_24C519358;
  *(_DWORD *)(v2 + 248) = 2;
  sub_20BDDC0E4((_QWORD *)(v2 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  return a1;
}

void sub_20BE4EC5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_20BE30270(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE4EC80(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C519410;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 160), "");
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  return a1;
}

void sub_20BE4ED4C(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  Alembic::Abc::v12::OCompoundProperty *v4;

  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE4ED90(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C519878;
  sub_20BE4EBE8(a1 + 56);
  return a1;
}

void sub_20BE4EDE0(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::OObject::~OObject(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE4EDF4(_QWORD *result, __int128 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  v2 = result;
  v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_20BDDBFAC((_BYTE *)result[1], *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_20BE4EE48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20BE4EE50(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  v16 = v11 + 24;
  sub_20BDF34C0(a1, v15);
  v13 = a1[1];
  sub_20BDF3648((uint64_t)v15);
  return v13;
}

void sub_20BE4EF5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDF3648((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE4EF70(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C5197C0;
  if (*(char *)(a1 + 839) < 0)
    operator delete(*(void **)(a1 + 816));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 768));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 712));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 664));
  if (*(char *)(a1 + 663) < 0)
    operator delete(*(void **)(a1 + 640));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 592));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 536));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 488));
  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  sub_20BE4D944(a1 + 440, *(_QWORD **)(a1 + 448));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 248));
  *(_QWORD *)a1 = off_24C519848;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

uint64_t Alembic::AbcGeom::v12::IPolyMeshSchema::getTopologyVariance(Alembic::AbcGeom::v12::IPolyMeshSchema *this)
{
  if (Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::IPolyMeshSchema *)((char *)this + 344))
    && Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::IPolyMeshSchema *)((char *)this + 392)))
  {
    return Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::IPolyMeshSchema *)((char *)this + 248)) ^ 1;
  }
  else
  {
    return 2;
  }
}

void sub_20BE4F0C0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE4F0B0);
}

void sub_20BE4F0F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::IPolyMeshSchema::init(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t PropertyHeader;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *v57;
  std::string v58;
  uint64_t v59[2];
  void *v60;
  std::string v61;
  uint64_t v62[2];
  int v63;
  std::string v64;
  uint64_t v65[2];
  char v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t *v71;
  int v72;
  uint64_t *v73;
  int v74;
  void *__p[2];
  char v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  void *v83[2];
  char v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90[4];
  std::__shared_weak_count *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;

  v6 = a1 + 8;
  v94 = a1 + 8;
  v95 = "IPolyMeshSchema::init()";
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = 0uLL;
  v57 = &v58;
  v89 = 2;
  v87 = 0;
  v88 = 0;
  sub_20BDEBF8C(v90, (const void ***)&v57);
  v90[3] = 0;
  v91 = 0;
  v92 = 0;
  v93 = 1;
  sub_20BDE9D48((uint64_t)&v57, v58.__r_.__value_.__l.__data_);
  sub_20BE02E30(a2, (uint64_t)&v89);
  sub_20BE02E30(a3, (uint64_t)&v89);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(std::__shared_weak_count **)(a1 + 48);
  v85 = v7;
  v86 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v81 = v7;
    v82 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v81 = v7;
    v82 = 0;
  }
  v79 = 0;
  v80 = 0;
  v77 = 0;
  v78 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v83, &v81, &v79, &v77);
  sub_20BDDC0E4(__p, "P");
  LODWORD(v73) = 5;
  v74 = 1;
  LODWORD(v71) = 1;
  v72 = v89;
  sub_20BE1DFF8((uint64_t)&v57, (int *)v83, (uint64_t)__p, &v73, &v71);
  *(_DWORD *)(a1 + 248) = (_DWORD)v57;
  std::string::operator=((std::string *)(a1 + 256), &v58);
  sub_20BDE881C((_QWORD *)(a1 + 280), v59);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v57);
  if (v76 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v83);
  v12 = v82;
  if (v82)
  {
    v13 = (unint64_t *)&v82->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v69 = v85;
  v70 = v86;
  if (v86)
  {
    v15 = (unint64_t *)&v86->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v79 = 0;
  v80 = 0;
  v77 = 0;
  v78 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v83, &v69, &v79, &v77);
  sub_20BDDC0E4(__p, ".faceIndices");
  sub_20BE1E6DC((uint64_t)&v57, (int *)v83, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 344) = (_DWORD)v57;
  std::string::operator=((std::string *)(a1 + 352), &v58);
  sub_20BDE881C((_QWORD *)(a1 + 376), v59);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v57);
  if (v76 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v83);
  v17 = v70;
  if (v70)
  {
    v18 = (unint64_t *)&v70->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v67 = v85;
  v68 = v86;
  if (v86)
  {
    v20 = (unint64_t *)&v86->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v79 = 0;
  v80 = 0;
  v77 = 0;
  v78 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v83, &v67, &v79, &v77);
  sub_20BDDC0E4(__p, ".faceCounts");
  sub_20BE1E6DC((uint64_t)&v57, (int *)v83, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 392) = (_DWORD)v57;
  std::string::operator=((std::string *)(a1 + 400), &v58);
  sub_20BDE881C((_QWORD *)(a1 + 424), v59);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v57);
  if (v76 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v83);
  v22 = v68;
  if (v68)
  {
    v23 = (unint64_t *)&v68->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  sub_20BDDC0E4(&v57, "uv");
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v26 = PropertyHeader;
  if (v58.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v57);
    if (!v26)
      goto LABEL_49;
  }
  else if (!PropertyHeader)
  {
    goto LABEL_49;
  }
  v55 = v85;
  v56 = v86;
  if (v86)
  {
    v27 = (unint64_t *)&v86->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  sub_20BDDC0E4(v83, "uv");
  sub_20BE1F3F4((uint64_t)&v57, &v55, (uint64_t)v83, a2, a3);
  *(_DWORD *)(a1 + 440) = (_DWORD)v57;
  std::string::operator=((std::string *)(a1 + 448), &v58);
  sub_20BDE881C((_QWORD *)(a1 + 472), v59);
  *(_DWORD *)(a1 + 488) = (_DWORD)v60;
  std::string::operator=((std::string *)(a1 + 496), &v61);
  sub_20BDE881C((_QWORD *)(a1 + 520), v62);
  *(_DWORD *)(a1 + 536) = v63;
  std::string::operator=((std::string *)(a1 + 544), &v64);
  sub_20BDE881C((_QWORD *)(a1 + 568), v65);
  *(_BYTE *)(a1 + 584) = v66;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v63);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v60);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v57);
  if (v84 < 0)
    operator delete(v83[0]);
  v29 = v56;
  if (v56)
  {
    v30 = (unint64_t *)&v56->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
LABEL_49:
  sub_20BDDC0E4(&v57, "N");
  v32 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v33 = v32;
  if (v58.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v57);
    if (!v33)
      goto LABEL_63;
  }
  else if (!v32)
  {
    goto LABEL_63;
  }
  v53 = v85;
  v54 = v86;
  if (v86)
  {
    v34 = (unint64_t *)&v86->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  sub_20BDDC0E4(v83, "N");
  sub_20BE208E8((uint64_t)&v57, &v53, (uint64_t)v83, a2, a3);
  *(_DWORD *)(a1 + 592) = (_DWORD)v57;
  std::string::operator=((std::string *)(a1 + 600), &v58);
  sub_20BDE881C((_QWORD *)(a1 + 624), v59);
  *(_DWORD *)(a1 + 640) = (_DWORD)v60;
  std::string::operator=((std::string *)(a1 + 648), &v61);
  sub_20BDE881C((_QWORD *)(a1 + 672), v62);
  *(_DWORD *)(a1 + 688) = v63;
  std::string::operator=((std::string *)(a1 + 696), &v64);
  sub_20BDE881C((_QWORD *)(a1 + 720), v65);
  *(_BYTE *)(a1 + 736) = v66;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v63);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v60);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v57);
  if (v84 < 0)
    operator delete(v83[0]);
  v36 = v54;
  if (v54)
  {
    v37 = (unint64_t *)&v54->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
LABEL_63:
  sub_20BDDC0E4(&v57, ".velocities");
  v39 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  if (v58.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v57);
  v40 = v86;
  if (v39)
  {
    v51 = v85;
    v52 = v86;
    if (v86)
    {
      v41 = (unint64_t *)&v86->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v79 = 0;
    v80 = 0;
    v77 = 0;
    v78 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v83, &v51, &v79, &v77);
    sub_20BDDC0E4(__p, ".velocities");
    sub_20BE220BC((uint64_t)&v57, (int *)v83, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 296) = (_DWORD)v57;
    std::string::operator=((std::string *)(a1 + 304), &v58);
    sub_20BDE881C((_QWORD *)(a1 + 328), v59);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v57);
    if (v76 < 0)
      operator delete(__p[0]);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v83);
    v43 = v52;
    if (v52)
    {
      v44 = (unint64_t *)&v52->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v40 = v86;
  }
  *(_BYTE *)(a1 + 744) = 0;
  if (v40)
  {
    v46 = (unint64_t *)&v40->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v48 = v91;
  if (v91)
  {
    v49 = (unint64_t *)&v91->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  sub_20BDE9D48((uint64_t)v90, (_QWORD *)v90[1]);
}

void sub_20BE4F934(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;
  uint64_t v51;
  void *v54;
  void (*v55)(uint64_t);
  uint64_t v56;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&a15);
  if (a50 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v51 - 224));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v51 - 176));
  sub_20BE02EB0(v51 - 144);
  v54 = __cxa_begin_catch(a1);
  v55 = *(void (**)(uint64_t))(*(_QWORD *)v50 + 16);
  if (a2 == 2)
  {
    v56 = (uint64_t)v54;
    v55(v50);
    sub_20BE02570(v51 - 80, v56);
  }
  else
  {
    v55(v50);
    sub_20BE02504(v51 - 80, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE4F918);
}

void sub_20BE4FBBC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE4FBDC()
{
  JUMPOUT(0x20BE4FB64);
}

uint64_t Alembic::AbcGeom::v12::IPolyMeshSchema::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  sub_20BDE881C((_QWORD *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  sub_20BDE881C((_QWORD *)(a1 + 88), (uint64_t *)(a2 + 88));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  sub_20BDE881C((_QWORD *)(a1 + 136), (uint64_t *)(a2 + 136));
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  sub_20BDE881C((_QWORD *)(a1 + 184), (uint64_t *)(a2 + 184));
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  sub_20BDE881C((_QWORD *)(a1 + 232), (uint64_t *)(a2 + 232));
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  sub_20BDE881C((_QWORD *)(a1 + 280), (uint64_t *)(a2 + 280));
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  sub_20BDE881C((_QWORD *)(a1 + 328), (uint64_t *)(a2 + 328));
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  sub_20BDE881C((_QWORD *)(a1 + 376), (uint64_t *)(a2 + 376));
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  sub_20BDE881C((_QWORD *)(a1 + 424), (uint64_t *)(a2 + 424));
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 440);
  std::string::operator=((std::string *)(a1 + 448), (const std::string *)(a2 + 448));
  sub_20BDE881C((_QWORD *)(a1 + 472), (uint64_t *)(a2 + 472));
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  std::string::operator=((std::string *)(a1 + 496), (const std::string *)(a2 + 496));
  sub_20BDE881C((_QWORD *)(a1 + 520), (uint64_t *)(a2 + 520));
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a2 + 536);
  std::string::operator=((std::string *)(a1 + 544), (const std::string *)(a2 + 544));
  sub_20BDE881C((_QWORD *)(a1 + 568), (uint64_t *)(a2 + 568));
  *(_BYTE *)(a1 + 584) = *(_BYTE *)(a2 + 584);
  *(_DWORD *)(a1 + 592) = *(_DWORD *)(a2 + 592);
  std::string::operator=((std::string *)(a1 + 600), (const std::string *)(a2 + 600));
  sub_20BDE881C((_QWORD *)(a1 + 624), (uint64_t *)(a2 + 624));
  *(_DWORD *)(a1 + 640) = *(_DWORD *)(a2 + 640);
  std::string::operator=((std::string *)(a1 + 648), (const std::string *)(a2 + 648));
  sub_20BDE881C((_QWORD *)(a1 + 672), (uint64_t *)(a2 + 672));
  *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 688);
  std::string::operator=((std::string *)(a1 + 696), (const std::string *)(a2 + 696));
  sub_20BDE881C((_QWORD *)(a1 + 720), (uint64_t *)(a2 + 720));
  *(_BYTE *)(a1 + 736) = *(_BYTE *)(a2 + 736);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 776));
  *(_BYTE *)(a1 + 744) = 0;
  sub_20BE51038(a1 + 752, *(_QWORD **)(a1 + 760));
  *(_QWORD *)(a1 + 752) = a1 + 760;
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 776));
  return a1;
}

void Alembic::AbcGeom::v12::IPolyMeshSchema::loadFaceSetNames(uint64_t **this)
{
  int *v2;
  uint64_t NumChildren;
  uint64_t i;
  __int128 *ChildHeader;
  uint64_t *v6;
  uint64_t (**v7)();
  int v8;
  std::string v9;
  uint64_t v10;
  uint64_t v11;
  std::string v12;
  uint64_t (**v13)();
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _BYTE v20[96];
  int *v21;
  const char *v22;
  __int128 *v23;

  v2 = (int *)(this + 1);
  v21 = v2;
  v22 = "IPolyMeshSchema::loadFaceSetNames()";
  if (!*((_BYTE *)this + 744))
  {
    sub_20BE50098(v2, (uint64_t)v20);
    NumChildren = Alembic::Abc::v12::IObject::getNumChildren((Alembic::Abc::v12::IObject *)v20);
    if (NumChildren)
    {
      for (i = 0; i != NumChildren; ++i)
      {
        ChildHeader = (__int128 *)Alembic::Abc::v12::IObject::getChildHeader((Alembic::Abc::v12::IObject *)v20);
        if (sub_20BE51118((uint64_t)(ChildHeader + 3), 0))
        {
          sub_20BE51728((uint64_t)&v7);
          v23 = ChildHeader;
          v6 = sub_20BE51564(this + 94, (const void **)ChildHeader, (uint64_t)&unk_20CA52727, &v23);
          *((_DWORD *)v6 + 16) = v8;
          std::string::operator=((std::string *)v6 + 3, &v9);
          sub_20BDE881C(v6 + 12, &v10);
          sub_20BDE881C(v6 + 14, &v11);
          std::string::operator=((std::string *)(v6 + 16), &v12);
          sub_20BE5080C((uint64_t)(v6 + 19), (uint64_t)&v13);
          v7 = off_24C5198D0;
          v13 = (uint64_t (**)())&unk_24C519908;
          Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v19);
          v13 = off_24C519990;
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v18);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v17);
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v16);
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v15);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v14);
          Alembic::Abc::v12::IObject::~IObject((void **)&v7);
        }
      }
    }
    *((_BYTE *)this + 744) = 1;
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v20);
  }
}

void sub_20BE5000C(void *a1, int a2)
{
  uint64_t v2;
  void *v5;

  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)(v2 - 216));
  v5 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v2 - 120, (uint64_t)v5);
  else
    sub_20BE02504(v2 - 120, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE4FFECLL);
}

void sub_20BE50078(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE50098(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  int *v12;
  const char *v13;

  v12 = a1;
  v13 = "IBasePropertyT::getObject()";
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)a1 + 4) + 24))(&v10);
  v4 = *a1;
  LODWORD(v8) = 1;
  v9 = v4;
  sub_20BE02B14(a2, &v10, &v8);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20BE50140(void *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void *v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  v7 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)va1, (uint64_t)v7);
  else
    sub_20BE02504((uint64_t)va1, 0);
  __cxa_end_catch();
  *(_DWORD *)(v4 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(v4 + 16), "");
  *(_QWORD *)v4 = off_24C518E68;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_QWORD *)(v4 + 88) = 0;
  JUMPOUT(0x20BE5012CLL);
}

void sub_20BE501CC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE501EC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5198D0;
  *(_QWORD *)(a1 + 96) = &unk_24C519908;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 344));
  *(_QWORD *)(a1 + 96) = off_24C519990;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 248));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
}

uint64_t Alembic::AbcGeom::v12::IPolyMeshSchema::getFaceSetNames(uint64_t a1, uint64_t *a2)
{
  pthread_mutex_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  __int128 *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  v4 = (pthread_mutex_t *)(a1 + 776);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 776));
  Alembic::AbcGeom::v12::IPolyMeshSchema::loadFaceSetNames((uint64_t **)a1);
  v5 = *(_QWORD **)(a1 + 752);
  v6 = (_QWORD *)(a1 + 760);
  if (v5 != (_QWORD *)(a1 + 760))
  {
    v7 = a2[1];
    do
    {
      v8 = (__int128 *)(v5 + 4);
      if (v7 >= a2[2])
      {
        v7 = sub_20BE4EE50(a2, v8);
      }
      else
      {
        sub_20BE4EDF4(a2, v8);
        v7 += 24;
      }
      a2[1] = v7;
      v9 = (_QWORD *)v5[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v5[2];
          v11 = *v10 == (_QWORD)v5;
          v5 = v10;
        }
        while (!v11);
      }
      v5 = v10;
    }
    while (v10 != v6);
  }
  return pthread_mutex_unlock(v4);
}

void sub_20BE50348(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;
  void *v12;

  pthread_mutex_unlock(v9);
  v12 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v12);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE5032CLL);
}

void sub_20BE5039C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL Alembic::AbcGeom::v12::IPolyMeshSchema::hasFaceSet(uint64_t a1, const void **a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;

  v4 = (pthread_mutex_t *)(a1 + 776);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 776));
  if (!*(_BYTE *)(a1 + 744))
    Alembic::AbcGeom::v12::IPolyMeshSchema::loadFaceSetNames((uint64_t **)a1);
  v5 = sub_20BDEEBA4(a1 + 752, a2);
  pthread_mutex_unlock(v4);
  return a1 + 760 != v5;
}

void sub_20BE50440(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;
  void *v12;

  pthread_mutex_unlock(v9);
  v12 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v12);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE5042CLL);
}

void sub_20BE504A0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::IPolyMeshSchema::getFaceSet@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  pthread_mutex_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *exception;
  _QWORD *v13;
  uint64_t *v14;
  int v15;
  uint64_t (**v16)();
  int v17;
  std::string v18;
  uint64_t v19;
  uint64_t v20;
  std::string v21;
  uint64_t (**v22)();
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD v29[12];
  __int128 v30;
  char v31;
  uint64_t v32;
  const char *v33;
  const void **v34;

  v6 = (int *)(a1 + 8);
  v32 = a1 + 8;
  v33 = "IPolyMeshSchema::getFaceSet()";
  v7 = (pthread_mutex_t *)(a1 + 776);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 776));
  if (!*(_BYTE *)(a1 + 744))
    Alembic::AbcGeom::v12::IPolyMeshSchema::loadFaceSetNames((uint64_t **)a1);
  if (a1 + 760 == sub_20BDEEBA4(a1 + 752, a2))
  {
    sub_20BDDBD68((uint64_t)&v16);
    sub_20BDDC1C8(&v18, (uint64_t)"The requested FaceSet name can't be found in PolyMesh.", 54);
    std::stringbuf::str();
    sub_20BDDBF20(v29, &v30);
    if (v31 < 0)
      operator delete((void *)v30);
    exception = __cxa_allocate_exception(0x20uLL);
    v13 = sub_20BDDC09C(exception, (uint64_t)v29);
    __cxa_throw(v13, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v16 = (uint64_t (**)())a2;
  v8 = sub_20BE51564((uint64_t **)(a1 + 752), a2, (uint64_t)&unk_20CA52727, (__int128 **)&v16);
  if (!sub_20BE51910((uint64_t)(v8 + 7)))
  {
    sub_20BE50098(v6, (uint64_t)v29);
    LODWORD(v30) = 0;
    DWORD2(v30) = 0;
    LODWORD(v14) = 0;
    v15 = 0;
    sub_20BE51940((uint64_t)&v16, (uint64_t)v29, (uint64_t)a2, (uint64_t **)&v30, &v14);
    v34 = a2;
    v9 = sub_20BE51564((uint64_t **)(a1 + 752), a2, (uint64_t)&unk_20CA52727, (__int128 **)&v34);
    *((_DWORD *)v9 + 16) = v17;
    std::string::operator=((std::string *)v9 + 3, &v18);
    sub_20BDE881C(v9 + 12, &v19);
    sub_20BDE881C(v9 + 14, &v20);
    std::string::operator=((std::string *)(v9 + 16), &v21);
    sub_20BE5080C((uint64_t)(v9 + 19), (uint64_t)&v22);
    v16 = off_24C5198D0;
    v22 = (uint64_t (**)())&unk_24C519908;
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v28);
    v22 = off_24C519990;
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v27);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v26);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v25);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v24);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v23);
    Alembic::Abc::v12::IObject::~IObject((void **)&v16);
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v29);
  }
  v16 = (uint64_t (**)())a2;
  v10 = sub_20BE51564((uint64_t **)(a1 + 752), a2, (uint64_t)&unk_20CA52727, (__int128 **)&v16);
  sub_20BE50CC0(a3, (uint64_t)(v10 + 7));
  return pthread_mutex_unlock(v7);
}

void sub_20BE5072C(void *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  void *v9;
  va_list va;

  va_start(va, a4);
  sub_20BDDC194((std::exception *)(v6 - 216));
  sub_20BDDBE98((uint64_t)va);
  pthread_mutex_unlock(v5);
  v9 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v6 - 96, (uint64_t)v9);
  else
    sub_20BE02504(v6 - 96, 0);
  __cxa_end_catch();
  sub_20BE51728(v4);
  JUMPOUT(0x20BE5069CLL);
}

void sub_20BE507E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BE5080C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  sub_20BDE881C((_QWORD *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  sub_20BDE881C((_QWORD *)(a1 + 88), (uint64_t *)(a2 + 88));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  sub_20BDE881C((_QWORD *)(a1 + 136), (uint64_t *)(a2 + 136));
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  sub_20BDE881C((_QWORD *)(a1 + 184), (uint64_t *)(a2 + 184));
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  sub_20BDE881C((_QWORD *)(a1 + 232), (uint64_t *)(a2 + 232));
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  sub_20BDE881C((_QWORD *)(a1 + 280), (uint64_t *)(a2 + 280));
  return a1;
}

uint64_t sub_20BE508F0(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C519908;
  v2 = (void **)(a1 + 56);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 248));
  *(_QWORD *)a1 = off_24C519990;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20BE5096C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C5198D0;
  *(_QWORD *)(a1 + 96) = &unk_24C519908;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 344));
  *(_QWORD *)(a1 + 96) = off_24C519990;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 248));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
  operator delete(v2);
}

uint64_t sub_20BE509E8(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_24C519990;
  v2 = (void **)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  return a1;
}

void sub_20BE50A40(void **a1)
{
  void **v2;

  *a1 = &unk_24C519908;
  v2 = a1 + 7;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 31);
  *a1 = off_24C519990;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 13);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(a1 + 1);
  operator delete(a1);
}

void sub_20BE50ABC(_QWORD *a1)
{
  sub_20BDEBF08(a1 + 35);
  MEMORY[0x212B929D0](a1 + 32, "");
  sub_20BE50BF0(a1);
}

BOOL sub_20BE50AF4(uint64_t a1)
{
  _BOOL8 result;

  result = sub_20BE50C74(a1);
  if (result)
  {
    if (*(char *)(a1 + 279) < 0)
    {
      if (*(_QWORD *)(a1 + 264))
        return 0;
    }
    else if (*(_BYTE *)(a1 + 279))
    {
      return 0;
    }
    return *(_QWORD *)(a1 + 280) != 0;
  }
  return result;
}

uint64_t sub_20BE50B40(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_24C519990;
  v2 = (void **)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  return a1;
}

void sub_20BE50B98(void **a1)
{
  void **v2;

  *a1 = off_24C519990;
  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 13);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 7);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  operator delete(a1);
}

void sub_20BE50BF0(_QWORD *a1)
{
  sub_20BDEBF08(a1 + 11);
  MEMORY[0x212B929D0](a1 + 8, "");
  sub_20BDEBF08(a1 + 17);
  MEMORY[0x212B929D0](a1 + 14, "");
  sub_20BDEBF08(a1 + 23);
  MEMORY[0x212B929D0](a1 + 20, "");
  sub_20BDEBF08(a1 + 29);
  MEMORY[0x212B929D0](a1 + 26, "");
  sub_20BDEBF08(a1 + 5);
  JUMPOUT(0x212B929D0);
}

BOOL sub_20BE50C74(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(_QWORD *)(a1 + 24))
      goto LABEL_5;
    return 0;
  }
  if (*(_BYTE *)(a1 + 39))
    return 0;
LABEL_5:
  if (!*(_QWORD *)(a1 + 40))
    return 0;
  if (*(char *)(a1 + 87) < 0)
  {
    if (*(_QWORD *)(a1 + 72))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 87))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 88) != 0;
}

uint64_t sub_20BE50CC0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v4 = off_24C5198D0;
  sub_20BE50DB0((uint64_t)(v4 + 12), a2 + 96);
  *(_QWORD *)(a1 + 96) = &unk_24C519908;
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  v5 = (_BYTE *)(a1 + 352);
  if (*(char *)(a2 + 375) < 0)
  {
    sub_20BDDBFAC(v5, *(void **)(a2 + 352), *(_QWORD *)(a2 + 360));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(_OWORD *)v5 = v6;
  }
  v7 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return a1;
}

void sub_20BE50D60(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = off_24C519990;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v1 + 248));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(v1 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(v1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(v1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE50DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _BYTE *v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)a1 = off_24C519990;
  v9 = (_BYTE *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_20BDDBFAC(v9, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  v14 = (_BYTE *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_20BDDBFAC(v14, *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)v14 = v15;
  }
  v16 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  v19 = (_BYTE *)(a1 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    sub_20BDDBFAC(v19, *(void **)(a2 + 160), *(_QWORD *)(a2 + 168));
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)v19 = v20;
  }
  v21 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  v24 = (_BYTE *)(a1 + 208);
  if (*(char *)(a2 + 231) < 0)
  {
    sub_20BDDBFAC(v24, *(void **)(a2 + 208), *(_QWORD *)(a2 + 216));
  }
  else
  {
    v25 = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_OWORD *)v24 = v25;
  }
  v26 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  return a1;
}

void sub_20BE50FA4(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  Alembic::Abc::v12::ICompoundProperty *v4;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE50FE8(uint64_t a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20BE51010(void **a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(a1 + 1);
  operator delete(a1);
}

void sub_20BE51038(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20BE51038(a1, *a2);
    sub_20BE51038(a1, a2[1]);
    sub_20BE51080((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20BE51080(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = off_24C5198D0;
  v2 = a1 + 24;
  *(_QWORD *)(a1 + 120) = &unk_24C519908;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 368));
  *(_QWORD *)(v2 + 96) = off_24C519990;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v2 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v2 + 248));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(v2 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(v2 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(v2 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)v2);
  if (*(char *)(v2 - 1) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20BE51118(uint64_t a1, int a2)
{
  uint64_t v3;
  size_t v4;
  std::string::size_type size;
  char v6;
  std::string *v7;
  unsigned __int8 *v8;
  _BOOL8 v11;
  void *v12;
  unsigned __int8 v15;
  size_t v16;
  std::string::size_type v17;
  int v18;
  std::string *p_p;
  uint64_t v20;
  void **p_s1;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  std::string __p;
  void *v30[2];
  char v31;
  void *__s1;
  size_t __n;
  unsigned __int8 v34;
  std::string v35;
  const void *v36[2];
  char v37;
  _QWORD *v38;
  size_t v39;
  __int16 v40;
  unsigned __int8 v41;

  if (a2 == 2)
  {
    sub_20BDDC0E4(v36, "schema");
    sub_20BE01E1C(a1, v36, &v38);
    if (((char)v41 & 0x80000000) == 0)
    {
      v11 = v41 == 18 && v38 == (_QWORD *)0x5F6D6F6547636241 && v39 == 0x5F74655365636146 && v40 == 12662;
      goto LABEL_78;
    }
    v12 = v38;
    v11 = v39 == 18 && *v38 == 0x5F6D6F6547636241 && v38[1] == 0x5F74655365636146 && *((_WORD *)v38 + 8) == 12662;
    goto LABEL_77;
  }
  if (a2 == 1)
    return 1;
  if (a2)
    return 0;
  sub_20BDDC0E4(v36, "schemaObjTitle");
  sub_20BE01E1C(a1, v36, &v38);
  sub_20BE51488(&v35);
  v3 = v41;
  if ((v41 & 0x80u) == 0)
    v4 = v41;
  else
    v4 = v39;
  size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v35.__r_.__value_.__l.__size_;
  if (v4 != size)
  {
LABEL_45:
    sub_20BDDC0E4(v30, "schema");
    sub_20BE01E1C(a1, (const void **)v30, &__s1);
    sub_20BE51488(&__p);
    v15 = v34;
    if ((v34 & 0x80u) == 0)
      v16 = v34;
    else
      v16 = __n;
    v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = __p.__r_.__value_.__l.__size_;
    if (v16 != v17)
    {
      v11 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_69;
      goto LABEL_64;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((char)v34 < 0)
    {
      v11 = memcmp(__s1, p_p, __n) == 0;
    }
    else
    {
      if (!v34)
      {
        v11 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_69:
          if ((v15 & 0x80) != 0)
            operator delete(__s1);
          if (v31 < 0)
            operator delete(v30[0]);
          if ((*((_BYTE *)&v35.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_75;
          goto LABEL_74;
        }
LABEL_64:
        operator delete(__p.__r_.__value_.__l.__data_);
        v15 = v34;
        goto LABEL_69;
      }
      v20 = v34 - 1;
      p_s1 = &__s1;
      do
      {
        v23 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        v22 = v23;
        v25 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        v24 = v25;
        v27 = v20-- != 0;
        v11 = v22 == v24;
      }
      while (v22 == v24 && v27);
    }
    if ((v18 & 0x80000000) == 0)
      goto LABEL_69;
    goto LABEL_64;
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v35;
  else
    v7 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v41 & 0x80) != 0)
  {
    if (memcmp(v38, v7, v39))
      goto LABEL_45;
  }
  else if (v41)
  {
    v8 = (unsigned __int8 *)&v38;
    while (*v8 == v7->__r_.__value_.__s.__data_[0])
    {
      ++v8;
      v7 = (std::string *)((char *)v7 + 1);
      if (!--v3)
        goto LABEL_65;
    }
    goto LABEL_45;
  }
LABEL_65:
  v11 = 1;
  if (v6 < 0)
LABEL_74:
    operator delete(v35.__r_.__value_.__l.__data_);
LABEL_75:
  if (((char)v41 & 0x80000000) == 0)
    goto LABEL_78;
  v12 = v38;
LABEL_77:
  operator delete(v12);
LABEL_78:
  if (v37 < 0)
    operator delete((void *)v36[0]);
  return v11;
}

void sub_20BE51408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(exception_object);
}

void sub_20BE51488(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_20BDDC0E4(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcGeom_FaceSet_v1");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".faceset");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_20BE51530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BE51564(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20BE5160C((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20BE516E4((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_20BE5160C@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x1C0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20BE51674(v6 + 4, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20BE5165C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE516E4(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE51674(_QWORD *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  sub_20BE51728((uint64_t)(__dst + 3));
  return __dst;
}

void sub_20BE516C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20BE516E4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BE51080((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_20BE51728(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)a1 = off_24C5198D0;
  sub_20BE5179C(a1 + 96);
  return a1;
}

void sub_20BE51788(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE5179C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_20BE51800(a1);
  *(_QWORD *)v2 = &unk_24C519908;
  *(_DWORD *)(v2 + 248) = 2;
  sub_20BDDC0E4((_QWORD *)(v2 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  return a1;
}

void sub_20BE517EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE509E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE51800(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C519990;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 160), "");
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  return a1;
}

void sub_20BE518CC(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  Alembic::Abc::v12::ICompoundProperty *v4;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

BOOL sub_20BE51910(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return 0;
  }
  if (*(_QWORD *)(a1 + 40))
    return sub_20BE50AF4(a1 + 96);
  return 0;
}

uint64_t sub_20BE51940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v21;
  void *p_p;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *exception;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;
  int v35;
  uint64_t *v36;
  int v37;
  _DWORD v38[4];
  _DWORD v39[4];
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *__p;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t (**v45)();
  _QWORD *v46;
  _QWORD v47[5];
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  __int128 v53;
  char v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60[4];
  std::__shared_weak_count *v61;
  int v62;
  uint64_t v63;

  LODWORD(v59) = 0;
  LODWORD(v60[0]) = 0;
  LODWORD(__p) = 0;
  LODWORD(v43) = 0;
  v10 = sub_20BE51F30(a4, a5, &v59, (uint64_t **)&__p);
  LODWORD(v45) = 1;
  LODWORD(v46) = v10;
  sub_20BE5206C(a1, a2, a3, (uint64_t **)&v45);
  *(_QWORD *)a1 = off_24C5198D0;
  sub_20BE5179C(a1 + 96);
  v46 = 0;
  v47[0] = 0;
  v45 = (uint64_t (**)())&v46;
  v57 = 0;
  v58 = 0;
  LODWORD(v59) = 2;
  sub_20BDEBF8C(v60, (const void ***)&v45);
  v60[3] = 0;
  v61 = 0;
  v62 = 0;
  v63 = 1;
  sub_20BDE9D48((uint64_t)&v45, v46);
  sub_20BE02E30(a4, (uint64_t)&v59);
  sub_20BE02E30(a5, (uint64_t)&v59);
  v55 = a1 + 8;
  v56 = "ISchemaObject::ISchemaObject( IObject)";
  v11 = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)a1) + 48;
  if ((sub_20BE51118(v11, v63) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v45);
    v21 = sub_20BDDC1C8(v47, (uint64_t)"Incorrect match of schema: ", 27);
    sub_20BDDC0E4(&v53, "schema");
    sub_20BE01E1C(v11, (const void **)&v53, &__p);
    if ((v44 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v44 & 0x80u) == 0)
      v23 = v44;
    else
      v23 = v43;
    v24 = sub_20BDDC1C8(v21, (uint64_t)p_p, v23);
    v25 = sub_20BDDC1C8(v24, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v25, (uint64_t)"AbcGeom_FaceSet_v1", 18);
    if ((char)v44 < 0)
      operator delete(__p);
    if (v54 < 0)
      operator delete((void *)v53);
    std::stringbuf::str();
    sub_20BDDBF20(&__p, &v53);
    if (v54 < 0)
      operator delete((void *)v53);
    exception = __cxa_allocate_exception(0x20uLL);
    v27 = sub_20BDDC09C(exception, (uint64_t)&__p);
    __cxa_throw(v27, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v12 = *(_QWORD *)(a1 + 40);
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v45);
    v28 = sub_20BDDC1C8(v47, (uint64_t)"Bad child: ", 11);
    v29 = *(char *)(a3 + 23);
    if (v29 >= 0)
      v30 = a3;
    else
      v30 = *(_QWORD *)a3;
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(a3 + 23);
    else
      v31 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v28, v30, v31);
    std::stringbuf::str();
    sub_20BDDBF20(&__p, &v53);
    if (v54 < 0)
      operator delete((void *)v53);
    v32 = __cxa_allocate_exception(0x20uLL);
    v33 = sub_20BDDC09C(v32, (uint64_t)&__p);
    __cxa_throw(v33, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v12 + 40))(&v40);
  v39[0] = 0;
  v39[2] = 0;
  v38[0] = 0;
  v38[2] = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&__p, &v40, v39, v38);
  sub_20BDDC0E4(&v53, ".faceset");
  v13 = *(_DWORD *)(a1 + 8);
  LODWORD(v36) = 1;
  v37 = v13;
  LODWORD(v34) = 5;
  v35 = v63;
  sub_20BE52214((uint64_t)&v45, (uint64_t)&__p, (uint64_t)&v53, &v36, &v34);
  sub_20BE5080C(a1 + 96, (uint64_t)&v45);
  v45 = (uint64_t (**)())&unk_24C519908;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v52);
  v45 = off_24C519990;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v51);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v49);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v48);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)&v46);
  if (v54 < 0)
    operator delete((void *)v53);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
  v14 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v61;
  if (v61)
  {
    v18 = (unint64_t *)&v61->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  sub_20BDE9D48((uint64_t)v60, (_QWORD *)v60[1]);
  return a1;
}

void sub_20BE51D88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29)
{
  _QWORD *v29;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a28);
  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE50ABC(v29);
  sub_20BE50ABC(v29);
}

void sub_20BE51ECC()
{
  Alembic::Abc::v12::IObject *v0;
  uint64_t v1;

  Alembic::Abc::v12::IObject::reset(v0);
  sub_20BE02504(v1 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE51B94);
}

void sub_20BE51EE8()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 144);
  JUMPOUT(0x20BE51F18);
}

uint64_t sub_20BE51F30(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void **v13;
  _QWORD *v14[2];
  unsigned int v15;
  uint64_t v16[4];
  std::__shared_weak_count *v17;
  int v18;
  uint64_t v19;

  v14[0] = 0;
  v14[1] = 0;
  v13 = (const void **)v14;
  v15 = 2;
  sub_20BDEBF8C(v16, &v13);
  v16[3] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  sub_20BDE9D48((uint64_t)&v13, v14[0]);
  sub_20BE02E30(a1, (uint64_t)&v15);
  sub_20BE02E30(a2, (uint64_t)&v15);
  sub_20BE02E30(a3, (uint64_t)&v15);
  sub_20BE02E30(a4, (uint64_t)&v15);
  v8 = v15;
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_20BDE9D48((uint64_t)v16, (_QWORD *)v16[1]);
  return v8;
}

void sub_20BE5203C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, _QWORD *a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  sub_20BDE9D48((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE5206C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  int v21;
  _BYTE v22[96];
  uint64_t v23;
  std::__shared_weak_count *v24;

  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)a1 = off_24C518E68;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  v8 = *(std::__shared_weak_count **)(a2 + 48);
  v23 = *(_QWORD *)(a2 + 40);
  v24 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_20BE04EB0((uint64_t)v22, a2);
  LODWORD(v20) = 0;
  v21 = 0;
  LODWORD(v18) = 0;
  v19 = 0;
  LODWORD(v16) = 0;
  v17 = 0;
  v11 = sub_20BE04D74((uint64_t)v22, a4, &v20, &v18, &v16);
  Alembic::Abc::v12::IObject::init(a1, &v23, a3, v11);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v22);
  v12 = v24;
  if (v24)
  {
    v13 = (unint64_t *)&v24->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  Alembic::Abc::v12::IObject::initInstance((std::string *)a1);
  return a1;
}

void sub_20BE521B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void **v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v17;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v18;

  if (*(char *)(v16 + 95) < 0)
    operator delete(*(void **)(v16 + 72));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v18);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v17);
  if (*(char *)(v16 + 39) < 0)
    operator delete(*v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE52214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v8;

  v8 = sub_20BE522AC(a1, a2, a3, a4, a5);
  *(_QWORD *)v8 = &unk_24C519908;
  *(_DWORD *)(v8 + 248) = 2;
  sub_20BDDC0E4((_QWORD *)(v8 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  Alembic::AbcGeom::v12::IFaceSetSchema::init(a1, a4, a5);
  return a1;
}

void sub_20BE52288(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  sub_20BE509E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE522AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v8;

  v8 = sub_20BE523D8(a1, a2, a3, a4, a5);
  *(_QWORD *)v8 = off_24C519990;
  *(_DWORD *)(v8 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(v8 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_20BE52470(a1, a4, a5);
  return a1;
}

void sub_20BE52384(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  Alembic::Abc::v12::ICompoundProperty *v4;
  Alembic::Abc::v12::ICompoundProperty *v5;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v5);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20BE523D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C5199C0;
  sub_20BE52C54(a1, a2, a3, a4, a5);
  return a1;
}

void sub_20BE5245C(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_20BE52470(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t PropertyHeader;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  int v43;
  int v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void *__p[2];
  char v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  int v57[12];
  void *v58;
  std::string v59;
  uint64_t v60[2];
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66[4];
  std::__shared_weak_count *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;

  v6 = a1 + 8;
  v70 = a1 + 8;
  v71 = "IGeomBaseSchema::init()";
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = 0uLL;
  v58 = &v59;
  v65 = 2;
  v63 = 0;
  v64 = 0;
  sub_20BDEBF8C(v66, (const void ***)&v58);
  v66[3] = 0;
  v67 = 0;
  v68 = 0;
  v69 = 1;
  sub_20BDE9D48((uint64_t)&v58, v59.__r_.__value_.__l.__data_);
  sub_20BE02E30(a2, (uint64_t)&v65);
  sub_20BE02E30(a3, (uint64_t)&v65);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(std::__shared_weak_count **)(a1 + 48);
  v61 = v7;
  v62 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v55 = v7;
    v56 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v55 = v7;
    v56 = 0;
  }
  v53 = 0;
  v54 = 0;
  v51 = 0;
  v52 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v57, &v55, &v53, &v51);
  sub_20BDDC0E4(__p, ".selfBnds");
  sub_20BE13A80((uint64_t)&v58, v57, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 56) = (_DWORD)v58;
  std::string::operator=((std::string *)(a1 + 64), &v59);
  sub_20BDE881C((_QWORD *)(a1 + 88), v60);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v58);
  if (v50 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  v12 = v56;
  if (v56)
  {
    v13 = (unint64_t *)&v56->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  sub_20BDDC0E4(&v58, ".childBnds");
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v16 = PropertyHeader;
  if (v59.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v58);
    if (!v16)
      goto LABEL_29;
  }
  else if (!PropertyHeader)
  {
    goto LABEL_29;
  }
  v47 = v61;
  v48 = v62;
  if (v62)
  {
    v17 = (unint64_t *)&v62->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v53 = 0;
  v54 = 0;
  v51 = 0;
  v52 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v57, &v47, &v53, &v51);
  sub_20BDDC0E4(__p, ".childBnds");
  sub_20BE13A80((uint64_t)&v58, v57, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 104) = (_DWORD)v58;
  std::string::operator=((std::string *)(a1 + 112), &v59);
  sub_20BDE881C((_QWORD *)(a1 + 136), v60);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v58);
  if (v50 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  v19 = v48;
  if (v48)
  {
    v20 = (unint64_t *)&v48->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_29:
  sub_20BDDC0E4(&v58, ".arbGeomParams");
  v22 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v23 = v22;
  if (v59.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v58);
    if (!v23)
      goto LABEL_43;
  }
  else if (!v22)
  {
    goto LABEL_43;
  }
  v45 = v61;
  v46 = v62;
  if (v62)
  {
    v24 = (unint64_t *)&v62->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v53 = 0;
  v54 = 0;
  v51 = 0;
  v52 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v57, &v45, &v53, &v51);
  sub_20BDDC0E4(__p, ".arbGeomParams");
  v43 = 1;
  v44 = v65;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v58, v57, __p, &v43);
  *(_DWORD *)(a1 + 152) = (_DWORD)v58;
  std::string::operator=((std::string *)(a1 + 160), &v59);
  sub_20BDE881C((_QWORD *)(a1 + 184), v60);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v58);
  if (v50 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  v26 = v46;
  if (v46)
  {
    v27 = (unint64_t *)&v46->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
LABEL_43:
  sub_20BDDC0E4(&v58, ".userProperties");
  v29 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  if (v59.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v58);
  v30 = v62;
  if (v29)
  {
    v41 = v61;
    v42 = v62;
    if (v62)
    {
      v31 = (unint64_t *)&v62->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v53 = 0;
    v54 = 0;
    v51 = 0;
    v52 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v57, &v41, &v53, &v51);
    sub_20BDDC0E4(__p, ".userProperties");
    v43 = 1;
    v44 = v65;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v58, v57, __p, &v43);
    *(_DWORD *)(a1 + 200) = (_DWORD)v58;
    std::string::operator=((std::string *)(a1 + 208), &v59);
    sub_20BDE881C((_QWORD *)(a1 + 232), v60);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v58);
    if (v50 < 0)
      operator delete(__p[0]);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
    v33 = v42;
    if (v42)
    {
      v34 = (unint64_t *)&v42->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v30 = v62;
  }
  if (v30)
  {
    v36 = (unint64_t *)&v30->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v38 = v67;
  if (v67)
  {
    v39 = (unint64_t *)&v67->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_20BDE9D48((uint64_t)v66, (_QWORD *)v66[1]);
}

void sub_20BE52A3C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  void *v44;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a36);
  if (a23 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a30);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v41 - 176));
  sub_20BE02EB0(v41 - 144);
  v44 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v41 - 80, (uint64_t)v44);
  else
    sub_20BE02504(v41 - 80, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE52A20);
}

void sub_20BE52C08(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE52C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,_QWORD *a34)
{
  uint64_t v34;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v34 - 160));
  sub_20BDE9D48((uint64_t)&a33, a34);
  JUMPOUT(0x20BE52BD4);
}

void sub_20BE52C48()
{
  JUMPOUT(0x20BE52BCCLL);
}

void sub_20BE52C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *exception;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  void *__p[2];
  char v41;
  void *v42[2];
  unsigned __int8 v43;
  __int128 v44;
  _QWORD v45[37];
  int v46;
  uint64_t v47[4];
  std::__shared_weak_count *v48;
  int v49;
  uint64_t v50;

  *((_QWORD *)&v44 + 1) = 0;
  v45[0] = 0;
  *(_QWORD *)&v44 = (char *)&v44 + 8;
  v45[35] = 0;
  v45[36] = 0;
  v46 = 2;
  sub_20BDEBF8C(v47, (const void ***)&v44);
  v47[3] = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  sub_20BDE9D48((uint64_t)&v44, *((_QWORD **)&v44 + 1));
  sub_20BE02E30(a4, (uint64_t)&v46);
  sub_20BE02E30(a5, (uint64_t)&v46);
  *(_DWORD *)(a1 + 8) = v46;
  v45[33] = a1 + 8;
  v45[34] = "ISchema::ISchema::init()";
  if (*(char *)(a2 + 31) < 0)
  {
    if (*(_QWORD *)(a2 + 16))
      goto LABEL_27;
  }
  else if (*(_BYTE *)(a2 + 31))
  {
LABEL_27:
    sub_20BDDBD68((uint64_t)&v44);
    sub_20BDDC1C8(v45, (uint64_t)"NULL parent passed into ISchema ctor", 36);
    std::stringbuf::str();
    sub_20BDDBF20(v42, (__int128 *)__p);
    if (v41 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v25 = sub_20BDDC09C(exception, (uint64_t)v42);
    __cxa_throw(v25, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v10 = *(_QWORD *)(a2 + 32);
  if (!v10)
    goto LABEL_27;
  v11 = *(std::__shared_weak_count **)(a2 + 40);
  v39 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 80))(v10, a3);
  if (!v14)
  {
    sub_20BDDBD68((uint64_t)&v44);
    v26 = sub_20BDDC1C8(v45, (uint64_t)"Nonexistent compound property: ", 31);
    v27 = *(char *)(a3 + 23);
    if (v27 >= 0)
      v28 = a3;
    else
      v28 = *(_QWORD *)a3;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a3 + 23);
    else
      v29 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v26, v28, v29);
    std::stringbuf::str();
    sub_20BDDBF20(v42, (__int128 *)__p);
    if (v41 < 0)
      operator delete(__p[0]);
    v30 = __cxa_allocate_exception(0x20uLL);
    v31 = sub_20BDDC09C(v30, (uint64_t)v42);
    __cxa_throw(v31, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = v14 + 32;
  if ((sub_20BE531E0(v14 + 32, v50) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v44);
    v32 = sub_20BDDC1C8(v45, (uint64_t)"Incorrect match of schema: ", 27);
    sub_20BDDC0E4(__p, "schema");
    sub_20BE01E1C(v15, (const void **)__p, v42);
    if ((v43 & 0x80u) == 0)
      v33 = v42;
    else
      v33 = (void **)v42[0];
    if ((v43 & 0x80u) == 0)
      v34 = v43;
    else
      v34 = (uint64_t)v42[1];
    v35 = sub_20BDDC1C8(v32, (uint64_t)v33, v34);
    v36 = sub_20BDDC1C8(v35, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v36, (uint64_t)"AbcGeom_FaceSet_v1", 18);
    if ((char)v43 < 0)
      operator delete(v42[0]);
    if (v41 < 0)
      operator delete(__p[0]);
    std::stringbuf::str();
    sub_20BDDBF20(v42, (__int128 *)__p);
    if (v41 < 0)
      operator delete(__p[0]);
    v37 = __cxa_allocate_exception(0x20uLL);
    v38 = sub_20BDDC09C(v37, (uint64_t)v42);
    __cxa_throw(v38, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(&v44, v10, a3);
  sub_20BDE82DC(a1 + 40, &v44);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v39)
  {
    v19 = (unint64_t *)&v39->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v21 = v48;
  if (v48)
  {
    v22 = (unint64_t *)&v48->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  sub_20BDE9D48((uint64_t)v47, (_QWORD *)v47[1]);
}

void sub_20BE53064(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  void *v29;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  v29 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v25 + 40));
  MEMORY[0x212B929D0](v25 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v26 - 160, (uint64_t)v29);
  else
    sub_20BE02504(v26 - 160, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE52E04);
}

void sub_20BE531A8()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 128);
  JUMPOUT(0x20BE531D8);
}

uint64_t sub_20BE531E0(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v10;
  _QWORD *v11;
  uint64_t v12;
  __int16 v13;
  char v14;

  if (a2 == 1)
    return 1;
  if ((a2 & 0xFFFFFFFD) != 0)
    return 0;
  sub_20BDDC0E4(__p, "schema");
  sub_20BE01E1C(a1, (const void **)__p, &v11);
  if (v14 < 0)
  {
    v2 = v12 == 18 && *v11 == 0x5F6D6F6547636241 && v11[1] == 0x5F74655365636146 && *((_WORD *)v11 + 8) == 12662;
    operator delete(v11);
  }
  else
  {
    v2 = v14 == 18 && v11 == (_QWORD *)0x5F6D6F6547636241 && v12 == 0x5F74655365636146 && v13 == 12662;
  }
  if (v10 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE53304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Alembic::AbcGeom::v12::OSubDSchema::OSubDSchema(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v13 = (std::__shared_weak_count *)a2[1];
  v38 = *a2;
  v39 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_20BE53858(a1, &v38, a3, a4, a5, a6, a7);
  v16 = v39;
  if (v39)
  {
    v17 = (unint64_t *)&v39->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = &unk_24C5199E0;
  *(_DWORD *)(a1 + 248) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 352), "");
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 400), "");
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 448), "");
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 496), "");
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 536) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 544), "");
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 584) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 592), "");
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_DWORD *)(a1 + 632) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 640), "");
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_DWORD *)(a1 + 680) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 688), "");
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 728) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 736), "");
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_DWORD *)(a1 + 776) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 784), "");
  *(_QWORD *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 824) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 832), "");
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 872) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 880), "");
  *(_QWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 904) = 0;
  sub_20BE3FF78(a1 + 920);
  *(_QWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_QWORD *)(a1 + 1120) = a1 + 1128;
  sub_20BE304B4(a4, a5, a6, a7, &v36);
  v19 = sub_20BE3060C(a4, a5, a6, a7);
  if (v36)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 24))(&v32);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v32 + 24))(&v34);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 48))(v34, v36);
    v21 = v35;
    if (v35)
    {
      v22 = (unint64_t *)&v35->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v33;
    if (v33)
    {
      v25 = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v20 = v19;
  }
  v27 = sub_20BE312C4(a4, a5, a6, a7);
  Alembic::AbcGeom::v12::OSubDSchema::init((Alembic::AbcGeom::v12::OSubDSchema *)a1, v20, v27);
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return a1;
}

void sub_20BE536F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  sub_20BE4D944(v20, *(_QWORD **)(v17 + 1128));
  if (*(char *)(v17 + 1119) < 0)
    operator delete(*v18);
  sub_20BE28E38(v19);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v17 + 872));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v17 + 824));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v17 + 776));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v17 + 728));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v17 + 680));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v17 + 632));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v17 + 584));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v17 + 536));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v17 + 488));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v17 + 440));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v17 + 392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v17 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v17 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a10);
  sub_20BE53F18(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE53858(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v13 = (std::__shared_weak_count *)a2[1];
  v38 = *a2;
  v39 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_20BE5AE9C(a1, &v38, a3, a4, a5, a6, a7);
  v16 = v39;
  if (v39)
  {
    v17 = (unint64_t *)&v39->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = off_24C519A68;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_20BE304B4(a4, a5, a6, a7, &v36);
  v19 = sub_20BE3060C(a4, a5, a6, a7);
  if (v36)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 24))(&v32);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v32 + 24))(&v34);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 48))(v34, v36);
    v21 = v35;
    if (v35)
    {
      v22 = (unint64_t *)&v35->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v33;
    if (v33)
    {
      v25 = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v20 = v19;
  }
  v27 = sub_20BE312C4(a4, a5, a6, a7);
  sub_20BE5AFB4(a1, v20, v27);
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return a1;
}

void sub_20BE53AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void **v18;
  Alembic::Abc::v12::OCompoundProperty *v19;
  Alembic::Abc::v12::OCompoundProperty *v20;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v20);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v19);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v18);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a10);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(v17 + 8));
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::init(Alembic::AbcGeom::v12::OSubDSchema *this, int a2, char a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t *v25;
  int v26;
  uint64_t *v27;
  int v28;
  uint64_t *v29;
  int v30;
  uint64_t *v31;
  int v32;
  void *__p[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  void *v37;
  std::string v38;
  uint64_t v39[2];
  uint64_t v40;
  std::__shared_weak_count *v41;
  char *v42;
  const char *v43;

  v42 = (char *)this + 8;
  v43 = "OSubDSchema::init()";
  *((_BYTE *)this + 1144) = a3;
  *((_QWORD *)this + 144) = 0;
  *((_DWORD *)this + 290) = a2;
  if ((a3 & 1) == 0)
  {
    v5 = *((_QWORD *)this + 5);
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    v40 = v5;
    v41 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    Alembic::AbcGeom::v12::OSubDSchema::createPositionsProperty(this);
    v35 = v5;
    v36 = v4;
    if (v4)
    {
      v8 = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    sub_20BDDC0E4(__p, ".faceIndices");
    v10 = *((_DWORD *)this + 290);
    LODWORD(v31) = 2;
    v32 = v10;
    LODWORD(v29) = 0;
    v30 = 0;
    LODWORD(v27) = 0;
    v28 = 0;
    LODWORD(v25) = 0;
    v26 = 0;
    sub_20BE2A074((uint64_t)&v37, &v35, (uint64_t)__p, &v31, &v29, &v27, &v25);
    *((_DWORD *)this + 74) = (_DWORD)v37;
    std::string::operator=((std::string *)((char *)this + 304), &v38);
    sub_20BDE881C((_QWORD *)this + 41, v39);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v37);
    if (v34 < 0)
      operator delete(__p[0]);
    v11 = v36;
    if (v36)
    {
      v12 = (unint64_t *)&v36->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v23 = v40;
    v24 = v41;
    if (v41)
    {
      v14 = (unint64_t *)&v41->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    sub_20BDDC0E4(__p, ".faceCounts");
    v16 = *((_DWORD *)this + 290);
    LODWORD(v31) = 2;
    v32 = v16;
    LODWORD(v29) = 0;
    v30 = 0;
    LODWORD(v27) = 0;
    v28 = 0;
    LODWORD(v25) = 0;
    v26 = 0;
    sub_20BE2A074((uint64_t)&v37, &v23, (uint64_t)__p, &v31, &v29, &v27, &v25);
    *((_DWORD *)this + 86) = (_DWORD)v37;
    std::string::operator=((std::string *)((char *)this + 352), &v38);
    sub_20BDE881C((_QWORD *)this + 47, v39);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v37);
    if (v34 < 0)
      operator delete(__p[0]);
    v17 = v24;
    if (v24)
    {
      v18 = (unint64_t *)&v24->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v41;
    if (v41)
    {
      v21 = (unint64_t *)&v41->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20BE53E14(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  void *v30;
  void (*v31)(uint64_t);
  uint64_t v32;

  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v27 - 112));
  if (a25 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 64));
  v30 = __cxa_begin_catch(a1);
  v31 = *(void (**)(uint64_t))(*(_QWORD *)v26 + 16);
  if (a2 == 2)
  {
    v32 = (uint64_t)v30;
    v31(v26);
    sub_20BE02570(v27 - 48, v32);
  }
  else
  {
    v31(v26);
    sub_20BE02504(v27 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE53E00);
}

void sub_20BE53EEC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE53F0C()
{
  JUMPOUT(0x20BE53E94);
}

uint64_t sub_20BE53F18(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_24C519A68;
  v2 = (void **)(a1 + 8);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

uint64_t Alembic::AbcGeom::v12::OSubDSchema::OSubDSchema(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  char v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v44 = *((_QWORD *)a2 + 4);
  v45 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *a2;
  LODWORD(v42) = 1;
  LODWORD(v43) = v14;
  sub_20BE53858(a1, &v44, a3, &v42, a4, a5, a6);
  v15 = v45;
  if (v45)
  {
    v16 = (unint64_t *)&v45->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)a1 = &unk_24C5199E0;
  *(_DWORD *)(a1 + 248) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 352), "");
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 400), "");
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 448), "");
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 496), "");
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 536) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 544), "");
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 584) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 592), "");
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_DWORD *)(a1 + 632) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 640), "");
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_DWORD *)(a1 + 680) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 688), "");
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 728) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 736), "");
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_DWORD *)(a1 + 776) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 784), "");
  *(_QWORD *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 824) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 832), "");
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 872) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 880), "");
  *(_QWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 904) = 0;
  sub_20BE3FF78(a1 + 920);
  *(_QWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_QWORD *)(a1 + 1120) = a1 + 1128;
  LODWORD(v40) = 0;
  LODWORD(v41) = 0;
  sub_20BE304B4(a4, a5, a6, &v40, &v42);
  LODWORD(v40) = 0;
  LODWORD(v41) = 0;
  v18 = sub_20BE3060C(a4, a5, a6, &v40);
  if (v42)
  {
    v19 = *((_QWORD *)a2 + 4);
    v20 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
    v37 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v19 + 24))(&v38);
    (*(void (**)(uint64_t **__return_ptr))(*(_QWORD *)v38 + 24))(&v40);
    v23 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*v40 + 48))(v40, v42);
    v24 = v41;
    if (v41)
    {
      v25 = (unint64_t *)&v41->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v39;
    if (v39)
    {
      v28 = (unint64_t *)&v39->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (v37)
    {
      v30 = (unint64_t *)&v37->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  else
  {
    v23 = v18;
  }
  LODWORD(v40) = 0;
  LODWORD(v41) = 0;
  v32 = sub_20BE312C4(a4, a5, a6, &v40);
  Alembic::AbcGeom::v12::OSubDSchema::init((Alembic::AbcGeom::v12::OSubDSchema *)a1, v23, v32);
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return a1;
}

void sub_20BE543BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  sub_20BE4D944(v18, *(_QWORD **)(v15 + 1128));
  if (*(char *)(v15 + 1119) < 0)
    operator delete(*v19);
  sub_20BE28E38(v17);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v15 + 872));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v15 + 824));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v15 + 776));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v15 + 728));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v15 + 680));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v15 + 632));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v15 + 584));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v15 + 536));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v15 + 488));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v15 + 440));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v15 + 392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v15 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v15 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v16);
  sub_20BE53F18(v15);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::set(Alembic::AbcGeom::v12::OSubDSchema *this, uint64_t a2)
{
  __int128 *v4;
  _BOOL4 v7;
  _QWORD *v8;
  uint64_t (*v9)();
  _QWORD *v10;
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t (*v13)();
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t (*v18)();
  uint64_t (*v19)();
  uint64_t (*v20)();
  uint64_t (*v21)();
  int v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)();
  uint64_t (*v28)();
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t (*v33)();
  uint64_t (*v34)();
  int v35;
  uint64_t (*v36)();
  uint64_t (*v37)();
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  uint64_t (*v42)();
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  uint64_t (*v47)();
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t (*v52)();
  uint64_t (*v53)();
  uint64_t (*v54)();
  int v55;
  uint64_t (*v56)();
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t (*v61)();
  uint64_t (*v62)();
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t (*v67)();
  uint64_t (*v68)();
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t (*v73)();
  uint64_t (*v74)();
  _QWORD *v75;
  uint64_t (*v76)();
  uint64_t (*v77)();
  int v78;
  uint64_t (*v79)();
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t (*v84)();
  uint64_t (*v85)();
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t (*v90)();
  uint64_t (*v91)();
  _QWORD *v92;
  uint64_t (*v93)();
  int v94;
  uint64_t (*v95)();
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t (*v100)();
  uint64_t (*v101)();
  int v102;
  uint64_t (*v103)();
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t (*v111)();
  uint64_t (*v112)();
  uint64_t (*v113)();
  uint64_t (*v114)();
  int v115;
  uint64_t (*v116)();
  int v117;
  uint64_t (*v118)();
  int v119;
  uint64_t (*v120)();
  _QWORD *v121;
  int v122;
  uint64_t (*v123)();
  uint64_t (*v124)();
  uint64_t (*v125)();
  uint64_t (*v126)();
  uint64_t (*v127)();
  uint64_t (*v128)();
  _QWORD *v129;
  int v130;
  uint64_t (*v131)();
  uint64_t (*v132)();
  uint64_t (*v133)();
  uint64_t (*v134)();
  _QWORD *v135;
  int v136;
  uint64_t (*v137)();
  uint64_t (*v138)();
  int v139;
  uint64_t (*v140)();
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t (*v144)();
  uint64_t (*v145)();
  uint64_t (*v146)();
  int v147;
  uint64_t (*v148)();
  _QWORD *exception;
  _QWORD *v150;
  _BYTE v151[13];
  void *v152;
  void *v153;
  uint64_t v154;
  void *v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *__dst[2];
  uint64_t v161;
  void *v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _BYTE v167[13];
  void *v168;
  void *v169;
  uint64_t v170;
  void *v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _BYTE v176[13];
  void *v177;
  void *v178;
  uint64_t v179;
  void *v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _BYTE v185[13];
  void *v186;
  void *v187;
  uint64_t v188;
  void *v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _BYTE v194[13];
  void *v195;
  void *v196;
  uint64_t v197;
  void *v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _BYTE v203[13];
  void *v204;
  void *v205;
  uint64_t v206;
  void *v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _BYTE v212[13];
  void *v213;
  void *v214;
  uint64_t v215;
  void *v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  __int128 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _BYTE v236[13];
  void *v237;
  void *v238;
  uint64_t v239;
  void *v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _BYTE v245[13];
  void *v246;
  void *v247;
  uint64_t v248;
  void *v249;
  __int128 v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  _BYTE v254[13];
  void *v255;
  void *v256;
  uint64_t v257;
  void *v258;
  __int128 v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _BYTE v263[13];
  void *v264;
  void *v265;
  uint64_t v266;
  void *v267;
  __int128 v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  __int128 v272;
  char v273;
  _QWORD v274[4];
  __int128 __p;
  _QWORD v276[36];

  if (*((_BYTE *)this + 1144) || sub_20BE5683C(a2))
  {
    Alembic::AbcGeom::v12::OSubDSchema::selectiveSet(this, a2);
    return;
  }
  v276[34] = (char *)this + 8;
  v276[35] = "OSubDSchema::set()";
  v4 = (__int128 *)(a2 + 376);
  if (*(char *)(a2 + 399) < 0)
  {
    sub_20BDDBFAC(&__p, *(void **)(a2 + 376), *(_QWORD *)(a2 + 384));
  }
  else
  {
    __p = *v4;
    v276[0] = *(_QWORD *)(a2 + 392);
  }
  if (SHIBYTE(v276[0]) < 0)
  {
    if (*((_QWORD *)&__p + 1) == 13
      && *(_QWORD *)__p == 0x2D6C6C756D746163
      && *(_QWORD *)(__p + 5) == 0x6B72616C632D6C6CLL)
    {
      operator delete((void *)__p);
      goto LABEL_29;
    }
LABEL_20:
    if (*((char *)this + 855) < 0)
    {
      if (*((_QWORD *)this + 105))
      {
LABEL_22:
        v7 = 1;
        if ((SHIBYTE(v276[0]) & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_27;
      }
    }
    else if (*((_BYTE *)this + 855))
    {
      goto LABEL_22;
    }
    v7 = *((_QWORD *)this + 107) == 0;
    if ((SHIBYTE(v276[0]) & 0x80000000) == 0)
    {
LABEL_23:
      if (!v7)
        goto LABEL_29;
LABEL_28:
      Alembic::AbcGeom::v12::OSubDSchema::createSubDSchemeProperty(this);
      goto LABEL_29;
    }
LABEL_27:
    operator delete((void *)__p);
    if (!v7)
      goto LABEL_29;
    goto LABEL_28;
  }
  if (SHIBYTE(v276[0]) != 13)
    goto LABEL_20;
  if ((_QWORD)__p != 0x2D6C6C756D746163 || *(_QWORD *)((char *)&__p + 5) != 0x6B72616C632D6C6CLL)
    goto LABEL_20;
LABEL_29:
  if (*((char *)this + 423) < 0)
  {
    if (!*((_QWORD *)this + 51))
      goto LABEL_33;
  }
  else if (!*((_BYTE *)this + 423))
  {
LABEL_33:
    if (*((_QWORD *)this + 53))
      goto LABEL_36;
  }
  if (*(_DWORD *)(a2 + 120) != -1073741824)
    Alembic::AbcGeom::v12::OSubDSchema::createFaceVaryingInterpolateBoundaryProperty(this);
LABEL_36:
  if (*((char *)this + 471) < 0)
  {
    if (!*((_QWORD *)this + 57))
      goto LABEL_40;
  }
  else if (!*((_BYTE *)this + 471))
  {
LABEL_40:
    if (*((_QWORD *)this + 59))
      goto LABEL_43;
  }
  if (*(_DWORD *)(a2 + 124) != -1073741824)
    Alembic::AbcGeom::v12::OSubDSchema::createFaceVaryingPropagateCornersProperty(this);
LABEL_43:
  if (*((char *)this + 519) < 0)
  {
    if (!*((_QWORD *)this + 63))
      goto LABEL_47;
  }
  else if (!*((_BYTE *)this + 519))
  {
LABEL_47:
    if (*((_QWORD *)this + 65))
      goto LABEL_50;
  }
  if (*(_DWORD *)(a2 + 128) != -1073741824)
    Alembic::AbcGeom::v12::OSubDSchema::createInterpolateBoundaryProperty(this);
LABEL_50:
  v8 = (_QWORD *)(a2 + 448);
  if (*(_DWORD *)(a2 + 456) == 127 || !*v8 && *(_QWORD *)(a2 + 472) == *(_QWORD *)(a2 + 464))
    v9 = 0;
  else
    v9 = nullsub_10;
  if (!v9)
    goto LABEL_62;
  if (*((char *)this + 903) < 0)
  {
    if (!*((_QWORD *)this + 111))
      goto LABEL_60;
LABEL_61:
    Alembic::AbcGeom::v12::OSubDSchema::createVelocitiesProperty(this);
    goto LABEL_62;
  }
  if (*((_BYTE *)this + 903))
    goto LABEL_61;
LABEL_60:
  if (!*((_QWORD *)this + 113))
    goto LABEL_61;
LABEL_62:
  v10 = (_QWORD *)(a2 + 488);
  if (*(_DWORD *)(a2 + 496) == 127 || !*v10 && *(_QWORD *)(a2 + 512) == *(_QWORD *)(a2 + 504))
    v11 = 0;
  else
    v11 = nullsub_8;
  if (v11)
    v12 = nullsub_11;
  else
    v12 = 0;
  if (v12 && (sub_20BE296FC((uint64_t)this + 920) & 1) == 0)
    Alembic::AbcGeom::v12::OSubDSchema::createUVsProperty((uint64_t)this, a2);
  if (!*((_QWORD *)this + 144))
  {
    if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
      v13 = 0;
    else
      v13 = nullsub_19;
    if (!v13
      || (*(_DWORD *)(a2 + 48) == 127 || !*(_QWORD *)(a2 + 40) && *(_QWORD *)(a2 + 64) == *(_QWORD *)(a2 + 56)
        ? (v20 = 0)
        : (v20 = nullsub_20),
          !v20
       || (*(_DWORD *)(a2 + 88) == 127 || !*(_QWORD *)(a2 + 80) && *(_QWORD *)(a2 + 104) == *(_QWORD *)(a2 + 96)
         ? (v21 = 0)
         : (v21 = nullsub_20),
           !v21)))
    {
      sub_20BDDBD68((uint64_t)&__p);
      sub_20BDDC1C8(v276, (uint64_t)"Sample 0 must have valid data for all mesh components", 53);
      std::stringbuf::str();
      sub_20BDDBF20(v274, &v272);
      if (v273 < 0)
        operator delete((void *)v272);
      exception = __cxa_allocate_exception(0x20uLL);
      v150 = sub_20BDDC09C(exception, (uint64_t)v274);
      __cxa_throw(v150, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 248);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 296);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 344);
    v22 = *((char *)this + 903);
    if (v22 < 0)
    {
      if (*((_QWORD *)this + 111))
        goto LABEL_502;
    }
    else if (*((_BYTE *)this + 903))
    {
      goto LABEL_502;
    }
    if (*((_QWORD *)this + 113))
      v37 = nullsub_7;
    else
      v37 = 0;
    if (!v37)
      goto LABEL_502;
    LODWORD(v267) = *((_DWORD *)this + 218);
    if (v22 < 0)
    {
      sub_20BDDBFAC(&v268, *((void **)this + 110), *((_QWORD *)this + 111));
    }
    else
    {
      v268 = *((_OWORD *)this + 55);
      v269 = *((_QWORD *)this + 112);
    }
    v107 = *((_QWORD *)this + 114);
    v270 = *((_QWORD *)this + 113);
    v271 = v107;
    if (v107)
    {
      v108 = (unint64_t *)(v107 + 8);
      do
        v109 = __ldxr(v108);
      while (__stxr(v109 + 1, v108));
    }
    v110 = *(_QWORD *)(a2 + 453);
    *(_QWORD *)v263 = *v8;
    *(_QWORD *)&v263[5] = v110;
    v264 = 0;
    v266 = 0;
    v265 = 0;
    sub_20BDE1364(&v264, *(const void **)(a2 + 464), *(_QWORD *)(a2 + 472), (uint64_t)(*(_QWORD *)(a2 + 472) - *(_QWORD *)(a2 + 464)) >> 3);
    if (SHIBYTE(v269) < 0)
    {
      if (*((_QWORD *)&v268 + 1))
        goto LABEL_485;
    }
    else if (HIBYTE(v269))
    {
LABEL_485:
      v111 = 0;
LABEL_490:
      if (v111)
      {
        if (*(_DWORD *)&v263[8] == 127 || !*(_QWORD *)v263 && v265 == v264)
          v112 = 0;
        else
          v112 = nullsub_10;
        if (v112)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v267);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v267);
      }
      if (v264)
      {
        v265 = v264;
        operator delete(v264);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v267);
LABEL_502:
      if (*(double *)(a2 + 424) >= *(double *)(a2 + 400)
        && *(double *)(a2 + 432) >= *(double *)(a2 + 408)
        && *(double *)(a2 + 440) >= *(double *)(a2 + 416))
      {
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56), (const void *)(a2 + 400));
      }
      else
      {
        sub_20BE27074((_QWORD *)a2, (uint64_t)&__p);
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56), &__p);
      }
      if (*(_DWORD *)(a2 + 496) == 127 || !*v10 && *(_QWORD *)(a2 + 512) == *(_QWORD *)(a2 + 504))
        v113 = 0;
      else
        v113 = nullsub_8;
      if (v113)
        sub_20BE2717C((uint64_t)this + 920, a2 + 488);
      if (*((char *)this + 423) < 0)
      {
        if (*((_QWORD *)this + 51))
          goto LABEL_515;
      }
      else if (*((_BYTE *)this + 423))
      {
LABEL_515:
        v114 = 0;
        goto LABEL_520;
      }
      if (*((_QWORD *)this + 53))
        v114 = nullsub_6;
      else
        v114 = 0;
LABEL_520:
      if (v114)
      {
        v115 = *(_DWORD *)(a2 + 120);
        if (v115 == -1073741824)
          v115 = 0;
        LODWORD(__p) = v115;
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 392), &__p);
      }
      if (*((char *)this + 471) < 0)
      {
        if (*((_QWORD *)this + 57))
          goto LABEL_526;
      }
      else if (*((_BYTE *)this + 471))
      {
LABEL_526:
        v116 = 0;
        goto LABEL_531;
      }
      if (*((_QWORD *)this + 59))
        v116 = nullsub_6;
      else
        v116 = 0;
LABEL_531:
      if (v116)
      {
        v117 = *(_DWORD *)(a2 + 124);
        if (v117 == -1073741824)
          v117 = 0;
        LODWORD(__p) = v117;
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 440), &__p);
      }
      if (*((char *)this + 519) < 0)
      {
        if (*((_QWORD *)this + 63))
          goto LABEL_537;
      }
      else if (*((_BYTE *)this + 519))
      {
LABEL_537:
        v118 = 0;
        goto LABEL_542;
      }
      if (*((_QWORD *)this + 65))
        v118 = nullsub_6;
      else
        v118 = 0;
LABEL_542:
      if (v118)
      {
        v119 = *(_DWORD *)(a2 + 128);
        if (v119 == -1073741824)
          v119 = 0;
        LODWORD(__p) = v119;
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 488), &__p);
      }
      if (*((char *)this + 855) < 0)
      {
        if (*((_QWORD *)this + 105))
          goto LABEL_548;
      }
      else if (*((_BYTE *)this + 855))
      {
LABEL_548:
        v120 = 0;
        goto LABEL_553;
      }
      if (*((_QWORD *)this + 107))
        v120 = nullsub_6;
      else
        v120 = 0;
LABEL_553:
      if (v120)
      {
        if (*(char *)(a2 + 399) < 0)
        {
          sub_20BDDBFAC(&__p, *(void **)(a2 + 376), *(_QWORD *)(a2 + 384));
        }
        else
        {
          __p = *v4;
          v276[0] = *(_QWORD *)(a2 + 392);
        }
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 824), &__p);
        if (SHIBYTE(v276[0]) < 0)
          operator delete((void *)__p);
      }
      v121 = (_QWORD *)(a2 + 136);
      v122 = *(_DWORD *)(a2 + 144);
      if (v122 == 127 || !*v121 && *(_QWORD *)(a2 + 160) == *(_QWORD *)(a2 + 152))
        v123 = 0;
      else
        v123 = nullsub_20;
      if (v123
        || (*(_DWORD *)(a2 + 184) == 127 || !*(_QWORD *)(a2 + 176) && *(_QWORD *)(a2 + 200) == *(_QWORD *)(a2 + 192)
          ? (v124 = 0)
          : (v124 = nullsub_20),
            v124
         || (*(_DWORD *)(a2 + 224) == 127 || !*(_QWORD *)(a2 + 216) && *(_QWORD *)(a2 + 240) == *(_QWORD *)(a2 + 232)
           ? (v125 = 0)
           : (v125 = nullsub_13),
             v125)))
      {
        Alembic::AbcGeom::v12::OSubDSchema::initCreases(this, 0);
        v122 = *(_DWORD *)(a2 + 144);
      }
      if (v122 == 127 || !*v121 && *(_QWORD *)(a2 + 160) == *(_QWORD *)(a2 + 152))
        v126 = 0;
      else
        v126 = nullsub_20;
      if (v126)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 536);
      if (*(_DWORD *)(a2 + 184) == 127 || !*(_QWORD *)(a2 + 176) && *(_QWORD *)(a2 + 200) == *(_QWORD *)(a2 + 192))
        v127 = 0;
      else
        v127 = nullsub_20;
      if (v127)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 584);
      if (*(_DWORD *)(a2 + 224) == 127 || !*(_QWORD *)(a2 + 216) && *(_QWORD *)(a2 + 240) == *(_QWORD *)(a2 + 232))
        v128 = 0;
      else
        v128 = nullsub_13;
      if (v128)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 632);
      v129 = (_QWORD *)(a2 + 256);
      v130 = *(_DWORD *)(a2 + 264);
      if (v130 == 127 || !*v129 && *(_QWORD *)(a2 + 280) == *(_QWORD *)(a2 + 272))
        v131 = 0;
      else
        v131 = nullsub_20;
      if (v131
        || (*(_DWORD *)(a2 + 304) == 127 || !*(_QWORD *)(a2 + 296) && *(_QWORD *)(a2 + 320) == *(_QWORD *)(a2 + 312)
          ? (v132 = 0)
          : (v132 = nullsub_13),
            v132))
      {
        Alembic::AbcGeom::v12::OSubDSchema::initCorners(this, 0);
        v130 = *(_DWORD *)(a2 + 264);
      }
      if (v130 == 127 || !*v129 && *(_QWORD *)(a2 + 280) == *(_QWORD *)(a2 + 272))
        v133 = 0;
      else
        v133 = nullsub_20;
      if (v133)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 680);
      if (*(_DWORD *)(a2 + 304) == 127 || !*(_QWORD *)(a2 + 296) && *(_QWORD *)(a2 + 320) == *(_QWORD *)(a2 + 312))
        v134 = 0;
      else
        v134 = nullsub_13;
      if (v134)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 728);
      v135 = (_QWORD *)(a2 + 336);
      v136 = *(_DWORD *)(a2 + 344);
      if (v136 == 127 || !*v135 && *(_QWORD *)(a2 + 360) == *(_QWORD *)(a2 + 352))
        v137 = 0;
      else
        v137 = nullsub_20;
      if (v137)
      {
        Alembic::AbcGeom::v12::OSubDSchema::initHoles(this, 0);
        v136 = *(_DWORD *)(a2 + 344);
      }
      if (v136 == 127 || !*v135 && *(_QWORD *)(a2 + 360) == *(_QWORD *)(a2 + 352))
        v138 = 0;
      else
        v138 = nullsub_20;
      if (v138)
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 776);
      goto LABEL_695;
    }
    if (v270)
      v111 = nullsub_7;
    else
      v111 = 0;
    goto LABEL_490;
  }
  LODWORD(v258) = *((_DWORD *)this + 62);
  if (*((char *)this + 279) < 0)
  {
    sub_20BDDBFAC(&v259, *((void **)this + 32), *((_QWORD *)this + 33));
  }
  else
  {
    v259 = *((_OWORD *)this + 16);
    v260 = *((_QWORD *)this + 34);
  }
  v14 = *((_QWORD *)this + 36);
  v261 = *((_QWORD *)this + 35);
  v262 = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *(_QWORD *)(a2 + 5);
  *(_QWORD *)v254 = *(_QWORD *)a2;
  *(_QWORD *)&v254[5] = v17;
  v255 = 0;
  v257 = 0;
  v256 = 0;
  sub_20BDE1364(&v255, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  if (SHIBYTE(v260) < 0)
  {
    if (*((_QWORD *)&v259 + 1))
      goto LABEL_84;
  }
  else if (HIBYTE(v260))
  {
LABEL_84:
    v18 = 0;
    goto LABEL_89;
  }
  if (v261)
    v18 = nullsub_7;
  else
    v18 = 0;
LABEL_89:
  if (v18)
  {
    if (*(_DWORD *)&v254[8] == 127 || !*(_QWORD *)v254 && v256 == v255)
      v19 = 0;
    else
      v19 = nullsub_19;
    if (v19)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v258);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v258);
  }
  if (v255)
  {
    v256 = v255;
    operator delete(v255);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v258);
  LODWORD(v249) = *((_DWORD *)this + 74);
  if (*((char *)this + 327) < 0)
  {
    sub_20BDDBFAC(&v250, *((void **)this + 38), *((_QWORD *)this + 39));
  }
  else
  {
    v250 = *((_OWORD *)this + 19);
    v251 = *((_QWORD *)this + 40);
  }
  v23 = *((_QWORD *)this + 42);
  v252 = *((_QWORD *)this + 41);
  v253 = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = *(_QWORD *)(a2 + 45);
  *(_QWORD *)v245 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)&v245[5] = v26;
  v246 = 0;
  v248 = 0;
  v247 = 0;
  sub_20BDE1364(&v246, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  if (SHIBYTE(v251) < 0)
  {
    if (*((_QWORD *)&v250 + 1))
      goto LABEL_127;
  }
  else if (HIBYTE(v251))
  {
LABEL_127:
    v27 = 0;
    goto LABEL_132;
  }
  if (v252)
    v27 = nullsub_7;
  else
    v27 = 0;
LABEL_132:
  if (v27)
  {
    if (*(_DWORD *)&v245[8] == 127 || !*(_QWORD *)v245 && v247 == v246)
      v28 = 0;
    else
      v28 = nullsub_20;
    if (v28)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v249);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v249);
  }
  if (v246)
  {
    v247 = v246;
    operator delete(v246);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v249);
  LODWORD(v240) = *((_DWORD *)this + 86);
  if (*((char *)this + 375) < 0)
  {
    sub_20BDDBFAC(&v241, *((void **)this + 44), *((_QWORD *)this + 45));
  }
  else
  {
    v241 = *((_OWORD *)this + 22);
    v242 = *((_QWORD *)this + 46);
  }
  v29 = *((_QWORD *)this + 48);
  v243 = *((_QWORD *)this + 47);
  v244 = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *(_QWORD *)(a2 + 85);
  *(_QWORD *)v236 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)&v236[5] = v32;
  v237 = 0;
  v239 = 0;
  v238 = 0;
  sub_20BDE1364(&v237, *(const void **)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3);
  if (SHIBYTE(v242) < 0)
  {
    if (*((_QWORD *)&v241 + 1))
      goto LABEL_151;
  }
  else if (HIBYTE(v242))
  {
LABEL_151:
    v33 = 0;
    goto LABEL_156;
  }
  if (v243)
    v33 = nullsub_7;
  else
    v33 = 0;
LABEL_156:
  if (v33)
  {
    if (*(_DWORD *)&v236[8] == 127 || !*(_QWORD *)v236 && v238 == v237)
      v34 = 0;
    else
      v34 = nullsub_20;
    if (v34)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v240);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v240);
  }
  if (v237)
  {
    v238 = v237;
    operator delete(v237);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v240);
  v35 = *((char *)this + 423);
  if (v35 < 0)
  {
    if (*((_QWORD *)this + 51))
      goto LABEL_193;
  }
  else if (*((_BYTE *)this + 423))
  {
    goto LABEL_193;
  }
  if (*((_QWORD *)this + 53))
    v36 = nullsub_6;
  else
    v36 = 0;
  if (v36)
  {
    LODWORD(v231) = *((_DWORD *)this + 98);
    if (v35 < 0)
    {
      sub_20BDDBFAC(&v232, *((void **)this + 50), *((_QWORD *)this + 51));
    }
    else
    {
      v232 = *((_OWORD *)this + 25);
      v233 = *((_QWORD *)this + 52);
    }
    v38 = *((_QWORD *)this + 54);
    v234 = *((_QWORD *)this + 53);
    v235 = v38;
    if (v38)
    {
      v39 = (unint64_t *)(v38 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    LODWORD(__p) = *(_DWORD *)(a2 + 120);
    if ((_DWORD)__p == -1073741824)
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v231);
    else
      Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v231, &__p);
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v231);
  }
LABEL_193:
  v41 = *((char *)this + 471);
  if (v41 < 0)
  {
    if (*((_QWORD *)this + 57))
      goto LABEL_211;
  }
  else if (*((_BYTE *)this + 471))
  {
    goto LABEL_211;
  }
  if (*((_QWORD *)this + 59))
    v42 = nullsub_6;
  else
    v42 = 0;
  if (v42)
  {
    LODWORD(v226) = *((_DWORD *)this + 110);
    if (v41 < 0)
    {
      sub_20BDDBFAC(&v227, *((void **)this + 56), *((_QWORD *)this + 57));
    }
    else
    {
      v227 = *((_OWORD *)this + 28);
      v228 = *((_QWORD *)this + 58);
    }
    v43 = *((_QWORD *)this + 60);
    v229 = *((_QWORD *)this + 59);
    v230 = v43;
    if (v43)
    {
      v44 = (unint64_t *)(v43 + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    LODWORD(__p) = *(_DWORD *)(a2 + 124);
    if ((_DWORD)__p == -1073741824)
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v226);
    else
      Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v226, &__p);
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v226);
  }
LABEL_211:
  v46 = *((char *)this + 519);
  if (v46 < 0)
  {
    if (*((_QWORD *)this + 63))
      goto LABEL_229;
  }
  else if (*((_BYTE *)this + 519))
  {
    goto LABEL_229;
  }
  if (*((_QWORD *)this + 65))
    v47 = nullsub_6;
  else
    v47 = 0;
  if (v47)
  {
    LODWORD(v221) = *((_DWORD *)this + 122);
    if (v46 < 0)
    {
      sub_20BDDBFAC(&v222, *((void **)this + 62), *((_QWORD *)this + 63));
    }
    else
    {
      v222 = *((_OWORD *)this + 31);
      v223 = *((_QWORD *)this + 64);
    }
    v48 = *((_QWORD *)this + 66);
    v224 = *((_QWORD *)this + 65);
    v225 = v48;
    if (v48)
    {
      v49 = (unint64_t *)(v48 + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    LODWORD(__p) = *(_DWORD *)(a2 + 128);
    if ((_DWORD)__p == -1073741824)
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v221);
    else
      Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v221, &__p);
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v221);
  }
LABEL_229:
  v51 = (_QWORD *)(a2 + 136);
  if (*(_DWORD *)(a2 + 144) == 127 || !*v51 && *(_QWORD *)(a2 + 160) == *(_QWORD *)(a2 + 152))
    v52 = 0;
  else
    v52 = nullsub_20;
  if (v52
    || (*(_DWORD *)(a2 + 184) == 127 || !*(_QWORD *)(a2 + 176) && *(_QWORD *)(a2 + 200) == *(_QWORD *)(a2 + 192)
      ? (v53 = 0)
      : (v53 = nullsub_20),
        v53
     || (*(_DWORD *)(a2 + 224) == 127 || !*(_QWORD *)(a2 + 216) && *(_QWORD *)(a2 + 240) == *(_QWORD *)(a2 + 232)
       ? (v54 = 0)
       : (v54 = nullsub_13),
         v54)))
  {
    if (*((char *)this + 567) < 0)
    {
      if (!*((_QWORD *)this + 69))
        goto LABEL_251;
    }
    else if (!*((_BYTE *)this + 567))
    {
LABEL_251:
      if (*((_QWORD *)this + 71))
        goto LABEL_253;
    }
    Alembic::AbcGeom::v12::OSubDSchema::initCreases(this, *((_DWORD *)this + 288) - 1);
  }
LABEL_253:
  v55 = *((char *)this + 567);
  if (v55 < 0)
  {
    if (*((_QWORD *)this + 69))
      goto LABEL_334;
  }
  else if (*((_BYTE *)this + 567))
  {
    goto LABEL_334;
  }
  if (*((_QWORD *)this + 71))
    v56 = nullsub_7;
  else
    v56 = 0;
  if (!v56)
    goto LABEL_334;
  LODWORD(v216) = *((_DWORD *)this + 134);
  if (v55 < 0)
  {
    sub_20BDDBFAC(&v217, *((void **)this + 68), *((_QWORD *)this + 69));
  }
  else
  {
    v217 = *((_OWORD *)this + 34);
    v218 = *((_QWORD *)this + 70);
  }
  v57 = *((_QWORD *)this + 72);
  v219 = *((_QWORD *)this + 71);
  v220 = v57;
  if (v57)
  {
    v58 = (unint64_t *)(v57 + 8);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v60 = *(_QWORD *)(a2 + 141);
  *(_QWORD *)v212 = *v51;
  *(_QWORD *)&v212[5] = v60;
  v213 = 0;
  v215 = 0;
  v214 = 0;
  sub_20BDE1364(&v213, *(const void **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 3);
  if (SHIBYTE(v218) < 0)
  {
    if (*((_QWORD *)&v217 + 1))
      goto LABEL_269;
  }
  else if (HIBYTE(v218))
  {
LABEL_269:
    v61 = 0;
    goto LABEL_274;
  }
  if (v219)
    v61 = nullsub_7;
  else
    v61 = 0;
LABEL_274:
  if (v61)
  {
    if (*(_DWORD *)&v212[8] == 127 || !*(_QWORD *)v212 && v214 == v213)
      v62 = 0;
    else
      v62 = nullsub_20;
    if (v62)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v216);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v216);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v216);
  LODWORD(v207) = *((_DWORD *)this + 146);
  if (*((char *)this + 615) < 0)
  {
    sub_20BDDBFAC(&v208, *((void **)this + 74), *((_QWORD *)this + 75));
  }
  else
  {
    v208 = *((_OWORD *)this + 37);
    v209 = *((_QWORD *)this + 76);
  }
  v63 = *((_QWORD *)this + 78);
  v210 = *((_QWORD *)this + 77);
  v211 = v63;
  if (v63)
  {
    v64 = (unint64_t *)(v63 + 8);
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  v66 = *(_QWORD *)(a2 + 181);
  *(_QWORD *)v203 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)&v203[5] = v66;
  v204 = 0;
  v206 = 0;
  v205 = 0;
  sub_20BDE1364(&v204, *(const void **)(a2 + 192), *(_QWORD *)(a2 + 200), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
  if (SHIBYTE(v209) < 0)
  {
    if (*((_QWORD *)&v208 + 1))
      goto LABEL_293;
  }
  else if (HIBYTE(v209))
  {
LABEL_293:
    v67 = 0;
    goto LABEL_298;
  }
  if (v210)
    v67 = nullsub_7;
  else
    v67 = 0;
LABEL_298:
  if (v67)
  {
    if (*(_DWORD *)&v203[8] == 127 || !*(_QWORD *)v203 && v205 == v204)
      v68 = 0;
    else
      v68 = nullsub_20;
    if (v68)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v207);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v207);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v207);
  LODWORD(v198) = *((_DWORD *)this + 158);
  if (*((char *)this + 663) < 0)
  {
    sub_20BDDBFAC(&v199, *((void **)this + 80), *((_QWORD *)this + 81));
  }
  else
  {
    v199 = *((_OWORD *)this + 40);
    v200 = *((_QWORD *)this + 82);
  }
  v69 = *((_QWORD *)this + 84);
  v201 = *((_QWORD *)this + 83);
  v202 = v69;
  if (v69)
  {
    v70 = (unint64_t *)(v69 + 8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *(_QWORD *)(a2 + 221);
  *(_QWORD *)v194 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)&v194[5] = v72;
  v195 = 0;
  v196 = 0;
  v197 = 0;
  sub_20BDE1364(&v195, *(const void **)(a2 + 232), *(_QWORD *)(a2 + 240), (uint64_t)(*(_QWORD *)(a2 + 240) - *(_QWORD *)(a2 + 232)) >> 3);
  if (SHIBYTE(v200) < 0)
  {
    if (*((_QWORD *)&v199 + 1))
      goto LABEL_317;
LABEL_319:
    if (v201)
      v73 = nullsub_7;
    else
      v73 = 0;
    goto LABEL_322;
  }
  if (!HIBYTE(v200))
    goto LABEL_319;
LABEL_317:
  v73 = 0;
LABEL_322:
  if (v73)
  {
    if (*(_DWORD *)&v194[8] == 127 || !*(_QWORD *)v194 && v196 == v195)
      v74 = 0;
    else
      v74 = nullsub_13;
    if (v74)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v198);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v198);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v198);
LABEL_334:
  v75 = (_QWORD *)(a2 + 256);
  if (*(_DWORD *)(a2 + 264) == 127 || !*v75 && *(_QWORD *)(a2 + 280) == *(_QWORD *)(a2 + 272))
    v76 = 0;
  else
    v76 = nullsub_20;
  if (v76
    || (*(_DWORD *)(a2 + 304) == 127 || !*(_QWORD *)(a2 + 296) && *(_QWORD *)(a2 + 320) == *(_QWORD *)(a2 + 312)
      ? (v77 = 0)
      : (v77 = nullsub_13),
        v77))
  {
    if (*((char *)this + 711) < 0)
    {
      if (!*((_QWORD *)this + 87))
        goto LABEL_350;
    }
    else if (!*((_BYTE *)this + 711))
    {
LABEL_350:
      if (*((_QWORD *)this + 89))
        goto LABEL_352;
    }
    Alembic::AbcGeom::v12::OSubDSchema::initCorners(this, *((_DWORD *)this + 288) - 1);
  }
LABEL_352:
  v78 = *((char *)this + 711);
  if (v78 < 0)
  {
    if (*((_QWORD *)this + 87))
      goto LABEL_409;
  }
  else if (*((_BYTE *)this + 711))
  {
    goto LABEL_409;
  }
  if (*((_QWORD *)this + 89))
    v79 = nullsub_7;
  else
    v79 = 0;
  if (!v79)
    goto LABEL_409;
  LODWORD(v189) = *((_DWORD *)this + 170);
  if (v78 < 0)
  {
    sub_20BDDBFAC(&v190, *((void **)this + 86), *((_QWORD *)this + 87));
  }
  else
  {
    v190 = *((_OWORD *)this + 43);
    v191 = *((_QWORD *)this + 88);
  }
  v80 = *((_QWORD *)this + 90);
  v192 = *((_QWORD *)this + 89);
  v193 = v80;
  if (v80)
  {
    v81 = (unint64_t *)(v80 + 8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
  }
  v83 = *(_QWORD *)(a2 + 261);
  *(_QWORD *)v185 = *v75;
  *(_QWORD *)&v185[5] = v83;
  v186 = 0;
  v187 = 0;
  v188 = 0;
  sub_20BDE1364(&v186, *(const void **)(a2 + 272), *(_QWORD *)(a2 + 280), (uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3);
  if (SHIBYTE(v191) < 0)
  {
    if (*((_QWORD *)&v190 + 1))
      goto LABEL_368;
  }
  else if (HIBYTE(v191))
  {
LABEL_368:
    v84 = 0;
    goto LABEL_373;
  }
  if (v192)
    v84 = nullsub_7;
  else
    v84 = 0;
LABEL_373:
  if (v84)
  {
    if (*(_DWORD *)&v185[8] == 127 || !*(_QWORD *)v185 && v187 == v186)
      v85 = 0;
    else
      v85 = nullsub_20;
    if (v85)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v189);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v189);
  }
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v189);
  LODWORD(v180) = *((_DWORD *)this + 182);
  if (*((char *)this + 759) < 0)
  {
    sub_20BDDBFAC(&v181, *((void **)this + 92), *((_QWORD *)this + 93));
  }
  else
  {
    v181 = *((_OWORD *)this + 46);
    v182 = *((_QWORD *)this + 94);
  }
  v86 = *((_QWORD *)this + 96);
  v183 = *((_QWORD *)this + 95);
  v184 = v86;
  if (v86)
  {
    v87 = (unint64_t *)(v86 + 8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  v89 = *(_QWORD *)(a2 + 301);
  *(_QWORD *)v176 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)&v176[5] = v89;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  sub_20BDE1364(&v177, *(const void **)(a2 + 312), *(_QWORD *)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 3);
  if (SHIBYTE(v182) < 0)
  {
    if (*((_QWORD *)&v181 + 1))
      goto LABEL_392;
LABEL_394:
    if (v183)
      v90 = nullsub_7;
    else
      v90 = 0;
    goto LABEL_397;
  }
  if (!HIBYTE(v182))
    goto LABEL_394;
LABEL_392:
  v90 = 0;
LABEL_397:
  if (v90)
  {
    if (*(_DWORD *)&v176[8] == 127 || !*(_QWORD *)v176 && v178 == v177)
      v91 = 0;
    else
      v91 = nullsub_13;
    if (v91)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v180);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v180);
  }
  if (v177)
  {
    v178 = v177;
    operator delete(v177);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v180);
LABEL_409:
  v92 = (_QWORD *)(a2 + 336);
  if (*(_DWORD *)(a2 + 344) == 127 || !*v92 && *(_QWORD *)(a2 + 360) == *(_QWORD *)(a2 + 352))
    v93 = 0;
  else
    v93 = nullsub_20;
  if (v93)
  {
    if (*((char *)this + 807) < 0)
    {
      if (!*((_QWORD *)this + 99))
        goto LABEL_419;
    }
    else if (!*((_BYTE *)this + 807))
    {
LABEL_419:
      if (*((_QWORD *)this + 101))
        goto LABEL_421;
    }
    Alembic::AbcGeom::v12::OSubDSchema::initHoles(this, *((_DWORD *)this + 288) - 1);
  }
LABEL_421:
  v94 = *((char *)this + 807);
  if (v94 < 0)
  {
    if (*((_QWORD *)this + 99))
      goto LABEL_454;
  }
  else if (*((_BYTE *)this + 807))
  {
    goto LABEL_454;
  }
  if (*((_QWORD *)this + 101))
    v95 = nullsub_7;
  else
    v95 = 0;
  if (v95)
  {
    LODWORD(v171) = *((_DWORD *)this + 194);
    if (v94 < 0)
    {
      sub_20BDDBFAC(&v172, *((void **)this + 98), *((_QWORD *)this + 99));
    }
    else
    {
      v172 = *((_OWORD *)this + 49);
      v173 = *((_QWORD *)this + 100);
    }
    v96 = *((_QWORD *)this + 102);
    v174 = *((_QWORD *)this + 101);
    v175 = v96;
    if (v96)
    {
      v97 = (unint64_t *)(v96 + 8);
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    v99 = *(_QWORD *)(a2 + 341);
    *(_QWORD *)v167 = *v92;
    *(_QWORD *)&v167[5] = v99;
    v168 = 0;
    v169 = 0;
    v170 = 0;
    sub_20BDE1364(&v168, *(const void **)(a2 + 352), *(_QWORD *)(a2 + 360), (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 3);
    if (SHIBYTE(v173) < 0)
    {
      if (*((_QWORD *)&v172 + 1))
        goto LABEL_437;
    }
    else if (HIBYTE(v173))
    {
LABEL_437:
      v100 = 0;
LABEL_442:
      if (v100)
      {
        if (*(_DWORD *)&v167[8] == 127 || !*(_QWORD *)v167 && v169 == v168)
          v101 = 0;
        else
          v101 = nullsub_20;
        if (v101)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v171);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v171);
      }
      if (v168)
      {
        v169 = v168;
        operator delete(v168);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v171);
      goto LABEL_454;
    }
    if (v174)
      v100 = nullsub_7;
    else
      v100 = 0;
    goto LABEL_442;
  }
LABEL_454:
  v102 = *((char *)this + 855);
  if (v102 < 0)
  {
    if (*((_QWORD *)this + 105))
      goto LABEL_646;
  }
  else if (*((_BYTE *)this + 855))
  {
    goto LABEL_646;
  }
  if (*((_QWORD *)this + 107))
    v103 = nullsub_6;
  else
    v103 = 0;
  if (v103)
  {
    LODWORD(v162) = *((_DWORD *)this + 206);
    if (v102 < 0)
    {
      sub_20BDDBFAC(&v163, *((void **)this + 104), *((_QWORD *)this + 105));
    }
    else
    {
      v163 = *((_OWORD *)this + 52);
      v164 = *((_QWORD *)this + 106);
    }
    v104 = *((_QWORD *)this + 108);
    v165 = *((_QWORD *)this + 107);
    v166 = v104;
    if (v104)
    {
      v105 = (unint64_t *)(v104 + 8);
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
    }
    if (*(char *)(a2 + 399) < 0)
    {
      sub_20BDDBFAC(__dst, *(void **)(a2 + 376), *(_QWORD *)(a2 + 384));
    }
    else
    {
      *(_OWORD *)__dst = *v4;
      v161 = *(_QWORD *)(a2 + 392);
    }
    if (SHIBYTE(v164) < 0)
    {
      if (*((_QWORD *)&v163 + 1))
        goto LABEL_643;
    }
    else if (HIBYTE(v164))
    {
      goto LABEL_643;
    }
    if (v165)
    {
      if (SHIBYTE(v161) < 0)
      {
        if (__dst[1])
          goto LABEL_478;
      }
      else if (HIBYTE(v161))
      {
LABEL_478:
        Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v162, __dst);
        goto LABEL_643;
      }
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v162);
    }
LABEL_643:
    if (SHIBYTE(v161) < 0)
      operator delete(__dst[0]);
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v162);
  }
LABEL_646:
  v139 = *((char *)this + 903);
  if (v139 < 0)
  {
    if (*((_QWORD *)this + 111))
      goto LABEL_679;
  }
  else if (*((_BYTE *)this + 903))
  {
    goto LABEL_679;
  }
  if (*((_QWORD *)this + 113))
    v140 = nullsub_7;
  else
    v140 = 0;
  if (v140)
  {
    LODWORD(v155) = *((_DWORD *)this + 218);
    if (v139 < 0)
    {
      sub_20BDDBFAC(&v156, *((void **)this + 110), *((_QWORD *)this + 111));
    }
    else
    {
      v156 = *((_OWORD *)this + 55);
      v157 = *((_QWORD *)this + 112);
    }
    v141 = *((_QWORD *)this + 114);
    v158 = *((_QWORD *)this + 113);
    v159 = v141;
    if (v141)
    {
      v142 = (unint64_t *)(v141 + 8);
      do
        v143 = __ldxr(v142);
      while (__stxr(v143 + 1, v142));
    }
    *(_QWORD *)v151 = *v8;
    *(_QWORD *)&v151[5] = *(_QWORD *)(a2 + 453);
    v152 = 0;
    v153 = 0;
    v154 = 0;
    sub_20BDE1364(&v152, *(const void **)(a2 + 464), *(_QWORD *)(a2 + 472), (uint64_t)(*(_QWORD *)(a2 + 472) - *(_QWORD *)(a2 + 464)) >> 3);
    if (SHIBYTE(v157) < 0)
    {
      if (*((_QWORD *)&v156 + 1))
        goto LABEL_662;
    }
    else if (HIBYTE(v157))
    {
LABEL_662:
      v144 = 0;
LABEL_667:
      if (v144)
      {
        if (*(_DWORD *)&v151[8] == 127 || !*(_QWORD *)v151 && v153 == v152)
          v145 = 0;
        else
          v145 = nullsub_10;
        if (v145)
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v155);
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v155);
      }
      if (v152)
      {
        v153 = v152;
        operator delete(v152);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v155);
      goto LABEL_679;
    }
    if (v158)
      v144 = nullsub_7;
    else
      v144 = 0;
    goto LABEL_667;
  }
LABEL_679:
  if (*(double *)(a2 + 424) <= *(double *)(a2 + 400)
    || *(double *)(a2 + 432) <= *(double *)(a2 + 408)
    || *(double *)(a2 + 440) <= *(double *)(a2 + 416))
  {
    if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
      v146 = 0;
    else
      v146 = nullsub_19;
    if (v146)
    {
      sub_20BE27074((_QWORD *)a2, (uint64_t)&__p);
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56), &__p);
    }
    else
    {
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56));
    }
  }
  else
  {
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56), (const void *)(a2 + 400));
  }
  v147 = sub_20BE296FC((uint64_t)this + 920);
  v148 = nullsub_16;
  if (!v147)
    v148 = 0;
  if (v148)
    sub_20BE2717C((uint64_t)this + 920, a2 + 488);
LABEL_695:
  ++*((_QWORD *)this + 144);
}

void sub_20BE56530(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,...)
{
  uint64_t v20;
  void *v23;
  va_list va;

  va_start(va, a20);
  if (a20 < 0)
    operator delete(__p);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)va);
  v23 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v20 - 96, (uint64_t)v23);
  else
    sub_20BE02504(v20 - 96, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE5649CLL);
}

void sub_20BE5681C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL sub_20BE5683C(uint64_t a1)
{
  _BOOL8 result;
  uint64_t (*v2)();

  result = 0;
  if (!*(_QWORD *)a1 && !*(_QWORD *)(a1 + 40) && !*(_QWORD *)(a1 + 80))
  {
    v2 = *(_DWORD *)(a1 + 496) == 127 || !*(_QWORD *)(a1 + 488) && *(_QWORD *)(a1 + 512) == *(_QWORD *)(a1 + 504)
       ? 0
       : nullsub_8;
    if (v2
      || *(_QWORD *)(a1 + 448)
      || *(_DWORD *)(a1 + 120) != -1073741824
      || *(_DWORD *)(a1 + 124) != -1073741824
      || *(_DWORD *)(a1 + 128) != -1073741824
      || *(_QWORD *)(a1 + 136)
      || *(_QWORD *)(a1 + 176)
      || *(_QWORD *)(a1 + 216)
      || *(_QWORD *)(a1 + 256)
      || *(_QWORD *)(a1 + 296)
      || *(_QWORD *)(a1 + 336))
    {
      return 1;
    }
  }
  return result;
}

void Alembic::AbcGeom::v12::OSubDSchema::selectiveSet(Alembic::AbcGeom::v12::OSubDSchema *this, uint64_t a2)
{
  uint64_t (*v4)();
  int v5;
  uint64_t (*v6)();
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t (*v13)();
  _QWORD *v14;
  uint64_t (*v15)();
  int v16;
  uint64_t (*v17)();
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (*v21)();
  uint64_t (*v22)();
  uint64_t (*v23)();
  int v24;
  uint64_t (*v25)();
  int v26;
  int v27;
  uint64_t (*v28)();
  int v29;
  int v30;
  uint64_t (*v31)();
  int v32;
  _OWORD *v33;
  _BOOL4 v36;
  uint64_t (*v37)();
  _QWORD *v38;
  int v39;
  uint64_t (*v40)();
  uint64_t (*v43)();
  uint64_t (*v44)();
  uint64_t (*v45)();
  _QWORD *v46;
  int v47;
  uint64_t (*v48)();
  uint64_t (*v50)();
  uint64_t (*v51)();
  _QWORD *v52;
  int v53;
  uint64_t (*v54)();
  uint64_t (*v55)();
  _BYTE v56[13];
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *__dst[2];
  uint64_t v66;
  _BYTE v67[13];
  void *__p;
  void *v69;
  uint64_t v70;
  void *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  const char *v77;

  v76 = (char *)this + 8;
  v77 = "OPolyMeshSchema::selectiveSet()";
  if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
    v4 = 0;
  else
    v4 = nullsub_19;
  if (v4)
  {
    if (*((char *)this + 279) < 0)
    {
      if (!*((_QWORD *)this + 33))
        goto LABEL_11;
    }
    else if (!*((_BYTE *)this + 279))
    {
LABEL_11:
      if (*((_QWORD *)this + 35))
        goto LABEL_13;
    }
    Alembic::AbcGeom::v12::OSubDSchema::createPositionsProperty(this);
  }
LABEL_13:
  v5 = *((char *)this + 279);
  if (v5 < 0)
  {
    if (*((_QWORD *)this + 33))
      goto LABEL_56;
  }
  else if (*((_BYTE *)this + 279))
  {
    goto LABEL_56;
  }
  if (*((_QWORD *)this + 35))
    v6 = nullsub_7;
  else
    v6 = 0;
  if (!v6)
    goto LABEL_56;
  LODWORD(v71) = *((_DWORD *)this + 62);
  if (v5 < 0)
  {
    sub_20BDDBFAC(&v72, *((void **)this + 32), *((_QWORD *)this + 33));
  }
  else
  {
    v72 = *((_OWORD *)this + 16);
    v73 = *((_QWORD *)this + 34);
  }
  v7 = *((_QWORD *)this + 36);
  v74 = *((_QWORD *)this + 35);
  v75 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a2 + 5);
  *(_QWORD *)v67 = *(_QWORD *)a2;
  *(_QWORD *)&v67[5] = v10;
  __p = 0;
  v69 = 0;
  v70 = 0;
  sub_20BDE1364(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  if (SHIBYTE(v73) < 0)
  {
    if (*((_QWORD *)&v72 + 1))
      goto LABEL_29;
LABEL_31:
    if (v74)
      v11 = nullsub_7;
    else
      v11 = 0;
    goto LABEL_34;
  }
  if (!HIBYTE(v73))
    goto LABEL_31;
LABEL_29:
  v11 = 0;
LABEL_34:
  if (v11)
  {
    if (*(_DWORD *)&v67[8] == 127 || !*(_QWORD *)v67 && v69 == __p)
      v12 = 0;
    else
      v12 = nullsub_19;
    if (v12)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v71);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v71);
  }
  if (__p)
  {
    v69 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v71);
  if (*(double *)(a2 + 424) <= *(double *)(a2 + 400)
    || *(double *)(a2 + 432) <= *(double *)(a2 + 408)
    || *(double *)(a2 + 440) <= *(double *)(a2 + 416))
  {
    if (*(_DWORD *)(a2 + 8) == 127 || !*(_QWORD *)a2 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
      v13 = 0;
    else
      v13 = nullsub_19;
    if (v13)
    {
      sub_20BE27074((_QWORD *)a2, (uint64_t)__dst);
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56), __dst);
    }
  }
  else
  {
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56), (const void *)(a2 + 400));
  }
LABEL_56:
  v14 = (_QWORD *)(a2 + 448);
  if (*(_DWORD *)(a2 + 456) == 127 || !*v14 && *(_QWORD *)(a2 + 472) == *(_QWORD *)(a2 + 464))
    v15 = 0;
  else
    v15 = nullsub_10;
  if (v15)
  {
    if (*((char *)this + 903) < 0)
    {
      if (!*((_QWORD *)this + 111))
        goto LABEL_66;
    }
    else if (!*((_BYTE *)this + 903))
    {
LABEL_66:
      if (*((_QWORD *)this + 113))
        goto LABEL_68;
    }
    Alembic::AbcGeom::v12::OSubDSchema::createVelocitiesProperty(this);
  }
LABEL_68:
  v16 = *((char *)this + 903);
  if (v16 < 0)
  {
    if (*((_QWORD *)this + 111))
      goto LABEL_101;
  }
  else if (*((_BYTE *)this + 903))
  {
    goto LABEL_101;
  }
  if (*((_QWORD *)this + 113))
    v17 = nullsub_7;
  else
    v17 = 0;
  if (!v17)
    goto LABEL_101;
  LODWORD(v60) = *((_DWORD *)this + 218);
  if (v16 < 0)
  {
    sub_20BDDBFAC(&v61, *((void **)this + 110), *((_QWORD *)this + 111));
  }
  else
  {
    v61 = *((_OWORD *)this + 55);
    v62 = *((_QWORD *)this + 112);
  }
  v18 = *((_QWORD *)this + 114);
  v63 = *((_QWORD *)this + 113);
  v64 = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *(_QWORD *)v56 = *v14;
  *(_QWORD *)&v56[5] = *(_QWORD *)(a2 + 453);
  v57 = 0;
  v58 = 0;
  v59 = 0;
  sub_20BDE1364(&v57, *(const void **)(a2 + 464), *(_QWORD *)(a2 + 472), (uint64_t)(*(_QWORD *)(a2 + 472) - *(_QWORD *)(a2 + 464)) >> 3);
  if (SHIBYTE(v62) < 0)
  {
    if (*((_QWORD *)&v61 + 1))
      goto LABEL_84;
LABEL_86:
    if (v63)
      v21 = nullsub_7;
    else
      v21 = 0;
    goto LABEL_89;
  }
  if (!HIBYTE(v62))
    goto LABEL_86;
LABEL_84:
  v21 = 0;
LABEL_89:
  if (v21)
  {
    if (*(_DWORD *)&v56[8] == 127 || !*(_QWORD *)v56 && v58 == v57)
      v22 = 0;
    else
      v22 = nullsub_10;
    if (v22)
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v60);
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v60);
  }
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v60);
LABEL_101:
  if (*(_DWORD *)(a2 + 496) == 127 || !*(_QWORD *)(a2 + 488) && *(_QWORD *)(a2 + 512) == *(_QWORD *)(a2 + 504))
    v23 = 0;
  else
    v23 = nullsub_8;
  if (v23)
  {
    if ((sub_20BE296FC((uint64_t)this + 920) & 1) == 0)
      Alembic::AbcGeom::v12::OSubDSchema::createUVsProperty((uint64_t)this, a2);
    sub_20BE2717C((uint64_t)this + 920, a2 + 488);
  }
  v24 = *((unsigned __int8 *)this + 423);
  if (*((char *)this + 423) < 0)
  {
    if (!*((_QWORD *)this + 51))
      goto LABEL_114;
  }
  else if (!*((_BYTE *)this + 423))
  {
LABEL_114:
    if (*((_QWORD *)this + 53))
      goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 120) != -1073741824)
  {
    Alembic::AbcGeom::v12::OSubDSchema::createFaceVaryingInterpolateBoundaryProperty(this);
    v24 = *((unsigned __int8 *)this + 423);
  }
LABEL_117:
  if ((v24 & 0x80) != 0)
  {
    if (*((_QWORD *)this + 51))
      goto LABEL_119;
  }
  else if (v24)
  {
LABEL_119:
    v25 = 0;
    goto LABEL_124;
  }
  if (*((_QWORD *)this + 53))
    v25 = nullsub_6;
  else
    v25 = 0;
LABEL_124:
  if (v25)
  {
    v26 = *(_DWORD *)(a2 + 120);
    if (v26 == -1073741824)
      v26 = 0;
    LODWORD(__dst[0]) = v26;
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 392), __dst);
  }
  v27 = *((unsigned __int8 *)this + 471);
  if (*((char *)this + 471) < 0)
  {
    if (!*((_QWORD *)this + 57))
      goto LABEL_132;
  }
  else if (!*((_BYTE *)this + 471))
  {
LABEL_132:
    if (*((_QWORD *)this + 59))
      goto LABEL_135;
  }
  if (*(_DWORD *)(a2 + 124) != -1073741824)
  {
    Alembic::AbcGeom::v12::OSubDSchema::createFaceVaryingPropagateCornersProperty(this);
    v27 = *((unsigned __int8 *)this + 471);
  }
LABEL_135:
  if ((v27 & 0x80) != 0)
  {
    if (*((_QWORD *)this + 57))
      goto LABEL_137;
  }
  else if (v27)
  {
LABEL_137:
    v28 = 0;
    goto LABEL_142;
  }
  if (*((_QWORD *)this + 59))
    v28 = nullsub_6;
  else
    v28 = 0;
LABEL_142:
  if (v28)
  {
    v29 = *(_DWORD *)(a2 + 124);
    if (v29 == -1073741824)
      v29 = 0;
    LODWORD(__dst[0]) = v29;
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 440), __dst);
  }
  v30 = *((unsigned __int8 *)this + 519);
  if (*((char *)this + 519) < 0)
  {
    if (!*((_QWORD *)this + 63))
      goto LABEL_150;
  }
  else if (!*((_BYTE *)this + 519))
  {
LABEL_150:
    if (*((_QWORD *)this + 65))
      goto LABEL_153;
  }
  if (*(_DWORD *)(a2 + 128) != -1073741824)
  {
    Alembic::AbcGeom::v12::OSubDSchema::createInterpolateBoundaryProperty(this);
    v30 = *((unsigned __int8 *)this + 519);
  }
LABEL_153:
  if ((v30 & 0x80) != 0)
  {
    if (*((_QWORD *)this + 63))
      goto LABEL_155;
  }
  else if (v30)
  {
LABEL_155:
    v31 = 0;
    goto LABEL_160;
  }
  if (*((_QWORD *)this + 65))
    v31 = nullsub_6;
  else
    v31 = 0;
LABEL_160:
  if (v31)
  {
    v32 = *(_DWORD *)(a2 + 128);
    if (v32 == -1073741824)
      v32 = 0;
    LODWORD(__dst[0]) = v32;
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 488), __dst);
  }
  v33 = (_OWORD *)(a2 + 376);
  if (*(char *)(a2 + 399) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)(a2 + 376), *(_QWORD *)(a2 + 384));
  }
  else
  {
    *(_OWORD *)__dst = *v33;
    v66 = *(_QWORD *)(a2 + 392);
  }
  if (SHIBYTE(v66) < 0)
  {
    if (__dst[1] == (void *)13
      && *(_QWORD *)__dst[0] == 0x2D6C6C756D746163
      && *(_QWORD *)((char *)__dst[0] + 5) == 0x6B72616C632D6C6CLL)
    {
      operator delete(__dst[0]);
      goto LABEL_189;
    }
LABEL_180:
    if (*((char *)this + 855) < 0)
    {
      if (*((_QWORD *)this + 105))
      {
LABEL_182:
        v36 = 1;
        if ((SHIBYTE(v66) & 0x80000000) == 0)
          goto LABEL_183;
        goto LABEL_187;
      }
    }
    else if (*((_BYTE *)this + 855))
    {
      goto LABEL_182;
    }
    v36 = *((_QWORD *)this + 107) == 0;
    if ((SHIBYTE(v66) & 0x80000000) == 0)
    {
LABEL_183:
      if (!v36)
        goto LABEL_189;
LABEL_188:
      Alembic::AbcGeom::v12::OSubDSchema::createSubDSchemeProperty(this);
      goto LABEL_189;
    }
LABEL_187:
    operator delete(__dst[0]);
    if (!v36)
      goto LABEL_189;
    goto LABEL_188;
  }
  if (SHIBYTE(v66) != 13)
    goto LABEL_180;
  if (__dst[0] != (void *)0x2D6C6C756D746163 || *(void **)((char *)__dst + 5) != (void *)0x6B72616C632D6C6CLL)
    goto LABEL_180;
LABEL_189:
  if (*((char *)this + 855) < 0)
  {
    if (*((_QWORD *)this + 105))
      goto LABEL_191;
LABEL_193:
    if (*((_QWORD *)this + 107))
      v37 = nullsub_6;
    else
      v37 = 0;
    goto LABEL_196;
  }
  if (!*((_BYTE *)this + 855))
    goto LABEL_193;
LABEL_191:
  v37 = 0;
LABEL_196:
  if (v37)
  {
    if (*(char *)(a2 + 399) < 0)
    {
      sub_20BDDBFAC(__dst, *(void **)(a2 + 376), *(_QWORD *)(a2 + 384));
    }
    else
    {
      *(_OWORD *)__dst = *v33;
      v66 = *(_QWORD *)(a2 + 392);
    }
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 824), __dst);
    if (SHIBYTE(v66) < 0)
      operator delete(__dst[0]);
  }
  v38 = (_QWORD *)(a2 + 136);
  v39 = *(_DWORD *)(a2 + 144);
  if (v39 == 127 || !*v38 && *(_QWORD *)(a2 + 160) == *(_QWORD *)(a2 + 152))
    v40 = 0;
  else
    v40 = nullsub_20;
  if (!v40
    && !(*(_DWORD *)(a2 + 184) == 127 || !*(_QWORD *)(a2 + 176) && *(_QWORD *)(a2 + 200) == *(_QWORD *)(a2 + 192)
       ? 0
       : nullsub_20)
    && !(*(_DWORD *)(a2 + 224) == 127 || !*(_QWORD *)(a2 + 216) && *(_QWORD *)(a2 + 240) == *(_QWORD *)(a2 + 232)
       ? 0
       : nullsub_13))
  {
    goto LABEL_237;
  }
  if (*((char *)this + 567) < 0)
  {
    if (*((_QWORD *)this + 69))
      goto LABEL_226;
  }
  else if (*((_BYTE *)this + 567))
  {
    goto LABEL_226;
  }
  if (*((_QWORD *)this + 71))
    goto LABEL_237;
LABEL_226:
  if (*((char *)this + 615) < 0)
  {
    if (*((_QWORD *)this + 75))
      goto LABEL_231;
  }
  else if (*((_BYTE *)this + 615))
  {
    goto LABEL_231;
  }
  if (*((_QWORD *)this + 77))
    goto LABEL_237;
LABEL_231:
  if (*((char *)this + 663) < 0)
  {
    if (!*((_QWORD *)this + 81))
      goto LABEL_235;
LABEL_236:
    Alembic::AbcGeom::v12::OSubDSchema::initCreases(this, 0);
    v39 = *(_DWORD *)(a2 + 144);
    goto LABEL_237;
  }
  if (*((_BYTE *)this + 663))
    goto LABEL_236;
LABEL_235:
  if (!*((_QWORD *)this + 83))
    goto LABEL_236;
LABEL_237:
  if (v39 == 127 || !*v38 && *(_QWORD *)(a2 + 160) == *(_QWORD *)(a2 + 152))
    v43 = 0;
  else
    v43 = nullsub_20;
  if (v43)
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 536);
  if (*(_DWORD *)(a2 + 184) == 127 || !*(_QWORD *)(a2 + 176) && *(_QWORD *)(a2 + 200) == *(_QWORD *)(a2 + 192))
    v44 = 0;
  else
    v44 = nullsub_20;
  if (v44)
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 584);
  if (*(_DWORD *)(a2 + 224) == 127 || !*(_QWORD *)(a2 + 216) && *(_QWORD *)(a2 + 240) == *(_QWORD *)(a2 + 232))
    v45 = 0;
  else
    v45 = nullsub_13;
  if (v45)
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 632);
  v46 = (_QWORD *)(a2 + 256);
  v47 = *(_DWORD *)(a2 + 264);
  if (v47 == 127 || !*v46 && *(_QWORD *)(a2 + 280) == *(_QWORD *)(a2 + 272))
    v48 = 0;
  else
    v48 = nullsub_20;
  if (!v48
    && !(*(_DWORD *)(a2 + 304) == 127 || !*(_QWORD *)(a2 + 296) && *(_QWORD *)(a2 + 320) == *(_QWORD *)(a2 + 312)
       ? 0
       : nullsub_13))
  {
    goto LABEL_281;
  }
  if (*((char *)this + 711) < 0)
  {
    if (*((_QWORD *)this + 87))
      goto LABEL_275;
  }
  else if (*((_BYTE *)this + 711))
  {
    goto LABEL_275;
  }
  if (*((_QWORD *)this + 89))
    goto LABEL_281;
LABEL_275:
  if (*((char *)this + 759) < 0)
  {
    if (!*((_QWORD *)this + 93))
      goto LABEL_279;
LABEL_280:
    Alembic::AbcGeom::v12::OSubDSchema::initCorners(this, 0);
    v47 = *(_DWORD *)(a2 + 264);
    goto LABEL_281;
  }
  if (*((_BYTE *)this + 759))
    goto LABEL_280;
LABEL_279:
  if (!*((_QWORD *)this + 95))
    goto LABEL_280;
LABEL_281:
  if (v47 == 127 || !*v46 && *(_QWORD *)(a2 + 280) == *(_QWORD *)(a2 + 272))
    v50 = 0;
  else
    v50 = nullsub_20;
  if (v50)
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 680);
  if (*(_DWORD *)(a2 + 304) == 127 || !*(_QWORD *)(a2 + 296) && *(_QWORD *)(a2 + 320) == *(_QWORD *)(a2 + 312))
    v51 = 0;
  else
    v51 = nullsub_13;
  if (v51)
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 728);
  v52 = (_QWORD *)(a2 + 336);
  v53 = *(_DWORD *)(a2 + 344);
  if (v53 == 127 || !*v52 && *(_QWORD *)(a2 + 360) == *(_QWORD *)(a2 + 352))
    v54 = 0;
  else
    v54 = nullsub_20;
  if (!v54)
    goto LABEL_307;
  if (*((char *)this + 807) < 0)
  {
    if (!*((_QWORD *)this + 99))
      goto LABEL_305;
LABEL_306:
    Alembic::AbcGeom::v12::OSubDSchema::initHoles(this, 0);
    v53 = *(_DWORD *)(a2 + 344);
    goto LABEL_307;
  }
  if (*((_BYTE *)this + 807))
    goto LABEL_306;
LABEL_305:
  if (!*((_QWORD *)this + 101))
    goto LABEL_306;
LABEL_307:
  if (v53 == 127 || !*v52 && *(_QWORD *)(a2 + 360) == *(_QWORD *)(a2 + 352))
    v55 = 0;
  else
    v55 = nullsub_20;
  if (v55)
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 776);
  ++*((_QWORD *)this + 144);
}

void sub_20BE575F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  uint64_t v34;
  void *v36;

  v36 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v34 - 64, (uint64_t)v36);
  else
    sub_20BE02504(v34 - 64, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE575D8);
}

void sub_20BE576BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::createSubDSchemeProperty(Alembic::AbcGeom::v12::OSubDSchema *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  int v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *v22;
  std::string v23;
  uint64_t v24;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v20 = *((_QWORD *)this + 5);
  v21 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".scheme");
  v5 = *((_DWORD *)this + 290);
  LODWORD(v16) = 2;
  v17 = v5;
  LODWORD(v14) = 0;
  v15 = 0;
  LODWORD(v12) = 0;
  v13 = 0;
  LODWORD(v10) = 0;
  v11 = 0;
  sub_20BE5B52C((uint64_t)&v22, &v20, (uint64_t)__p, &v16, &v14, &v12, &v10);
  *((_DWORD *)this + 206) = (_DWORD)v22;
  std::string::operator=((std::string *)((char *)this + 832), &v23);
  sub_20BDE881C((_QWORD *)this + 107, &v24);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v22);
  if (v19 < 0)
    operator delete(__p[0]);
  v6 = v21;
  if (v21)
  {
    v7 = (unint64_t *)&v21->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  sub_20BDDC0E4(&v22, "catmull-clark");
  if (*((_QWORD *)this + 144))
  {
    v9 = 0;
    do
    {
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 824), &v22);
      ++v9;
    }
    while (v9 < *((_QWORD *)this + 144));
  }
  if (v23.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v22);
}

void sub_20BE57844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v24 - 80));
  if (a23 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a24);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::createFaceVaryingInterpolateBoundaryProperty(Alembic::AbcGeom::v12::OSubDSchema *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  int v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *v22;
  std::string v23;
  uint64_t v24;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v20 = *((_QWORD *)this + 5);
  v21 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".faceVaryingInterpolateBoundary");
  v5 = *((_DWORD *)this + 290);
  LODWORD(v16) = 2;
  v17 = v5;
  LODWORD(v14) = 0;
  v15 = 0;
  LODWORD(v12) = 0;
  v13 = 0;
  LODWORD(v10) = 0;
  v11 = 0;
  sub_20BE406D4((uint64_t)&v22, &v20, (uint64_t)__p, &v16, &v14, &v12, &v10);
  *((_DWORD *)this + 98) = (_DWORD)v22;
  std::string::operator=((std::string *)((char *)this + 400), &v23);
  sub_20BDE881C((_QWORD *)this + 53, &v24);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v22);
  if (v19 < 0)
    operator delete(__p[0]);
  v6 = v21;
  if (v21)
  {
    v7 = (unint64_t *)&v21->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (*((_QWORD *)this + 144))
  {
    v9 = 0;
    do
    {
      LODWORD(v22) = 0;
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 392), &v22);
      ++v9;
    }
    while (v9 < *((_QWORD *)this + 144));
  }
}

void sub_20BE579E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v24 - 80));
  if (a23 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a24);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::createFaceVaryingPropagateCornersProperty(Alembic::AbcGeom::v12::OSubDSchema *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  int v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *v22;
  std::string v23;
  uint64_t v24;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v20 = *((_QWORD *)this + 5);
  v21 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".faceVaryingPropagateCorners");
  v5 = *((_DWORD *)this + 290);
  LODWORD(v16) = 2;
  v17 = v5;
  LODWORD(v14) = 0;
  v15 = 0;
  LODWORD(v12) = 0;
  v13 = 0;
  LODWORD(v10) = 0;
  v11 = 0;
  sub_20BE406D4((uint64_t)&v22, &v20, (uint64_t)__p, &v16, &v14, &v12, &v10);
  *((_DWORD *)this + 110) = (_DWORD)v22;
  std::string::operator=((std::string *)((char *)this + 448), &v23);
  sub_20BDE881C((_QWORD *)this + 59, &v24);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v22);
  if (v19 < 0)
    operator delete(__p[0]);
  v6 = v21;
  if (v21)
  {
    v7 = (unint64_t *)&v21->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (*((_QWORD *)this + 144))
  {
    v9 = 0;
    do
    {
      LODWORD(v22) = 0;
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 440), &v22);
      ++v9;
    }
    while (v9 < *((_QWORD *)this + 144));
  }
}

void sub_20BE57B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v24 - 80));
  if (a23 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a24);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::createInterpolateBoundaryProperty(Alembic::AbcGeom::v12::OSubDSchema *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  int v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *v22;
  std::string v23;
  uint64_t v24;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v20 = *((_QWORD *)this + 5);
  v21 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".interpolateBoundary");
  v5 = *((_DWORD *)this + 290);
  LODWORD(v16) = 2;
  v17 = v5;
  LODWORD(v14) = 0;
  v15 = 0;
  LODWORD(v12) = 0;
  v13 = 0;
  LODWORD(v10) = 0;
  v11 = 0;
  sub_20BE406D4((uint64_t)&v22, &v20, (uint64_t)__p, &v16, &v14, &v12, &v10);
  *((_DWORD *)this + 122) = (_DWORD)v22;
  std::string::operator=((std::string *)((char *)this + 496), &v23);
  sub_20BDE881C((_QWORD *)this + 65, &v24);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v22);
  if (v19 < 0)
    operator delete(__p[0]);
  v6 = v21;
  if (v21)
  {
    v7 = (unint64_t *)&v21->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (*((_QWORD *)this + 144))
  {
    v9 = 0;
    do
    {
      LODWORD(v22) = 0;
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 488), &v22);
      ++v9;
    }
    while (v9 < *((_QWORD *)this + 144));
  }
}

void sub_20BE57CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v24 - 80));
  if (a23 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a24);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::createVelocitiesProperty(Alembic::AbcGeom::v12::OSubDSchema *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  int v17;
  void *__p;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v23;
  std::string v24;
  uint64_t v25;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v21 = *((_QWORD *)this + 5);
  v22 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(&__p, ".velocities");
  v5 = *((_DWORD *)this + 290);
  LODWORD(v16) = 2;
  v17 = v5;
  LODWORD(v14) = 0;
  v15 = 0;
  LODWORD(v12) = 0;
  v13 = 0;
  LODWORD(v10) = 0;
  v11 = 0;
  sub_20BE2A6A0((uint64_t)&v23, &v21, (uint64_t)&__p, &v16, &v14, &v12, &v10);
  *((_DWORD *)this + 218) = (_DWORD)v23;
  std::string::operator=((std::string *)((char *)this + 880), &v24);
  sub_20BDE881C((_QWORD *)this + 113, &v25);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v23);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  v6 = v22;
  if (v22)
  {
    v7 = (unint64_t *)&v22->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_20BE29E5C(&v23, (uint64_t *)&__p);
  if (*((_QWORD *)this + 144))
  {
    v9 = 0;
    do
    {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 872);
      ++v9;
    }
    while (v9 < *((_QWORD *)this + 144));
  }
  if (v24.__r_.__value_.__l.__size_)
  {
    v24.__r_.__value_.__r.__words[2] = v24.__r_.__value_.__l.__size_;
    operator delete((void *)v24.__r_.__value_.__l.__size_);
  }
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
}

void sub_20BE57EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::OSubDSchema::createUVsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t *v29;
  int v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  void *__dst[2];
  void *v38;
  _BYTE *v39;
  std::string v40;
  void *__p;
  _BYTE *v42;
  void *v43;
  std::string v44;
  uint64_t v45[2];
  uint64_t v46;
  int v47;
  std::string v48;
  uint64_t v49[2];
  uint64_t *v50;
  uint64_t *v51;
  void *v52;
  void *v53;
  _BYTE v54[13];
  void *v55;
  _BYTE *v56;
  uint64_t *v57;
  _QWORD *v58[2];
  __int128 v59;
  __int128 v60;
  _BYTE v61[24];
  void *v62;
  void *v63;
  uint64_t v64;
  int data;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;

  v69 = 0;
  v70 = 0;
  v71 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  *(_QWORD *)&v59 = 0;
  *((_QWORD *)&v59 + 1) = 0x20000000ALL;
  v60 = 0u;
  *(_OWORD *)v61 = 0u;
  *(_QWORD *)&v61[16] = 0x100000005;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  data = 127;
  v57 = (uint64_t *)v58;
  v58[0] = 0;
  v58[1] = 0;
  Alembic::Abc::v12::SetSourceName(&v57, (const std::string *)(a1 + 1096));
  if (*(_DWORD *)(a2 + 536) == 127 || !*(_QWORD *)(a2 + 528) && *(_QWORD *)(a2 + 552) == *(_QWORD *)(a2 + 544))
    v4 = 0;
  else
    v4 = nullsub_21;
  if (v4)
  {
    sub_20BE2ACE4(v54, (uint64_t *)&v69);
    sub_20BE2AD84(&v50, (uint64_t *)&v66);
    sub_20BE2AE24((uint64_t)__dst, (uint64_t *)v54, (uint64_t *)&v50, *(_DWORD *)(a2 + 568));
    *(void **)&v59 = __dst[0];
    *(void **)((char *)&v59 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v60, (char *)v38, (uint64_t)v39, (v39 - (_BYTE *)v38) >> 3);
    *(_QWORD *)&v61[8] = v40.__r_.__value_.__l.__size_;
    *(_QWORD *)&v61[13] = *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v62, (char *)__p, (uint64_t)v42, (v42 - (_BYTE *)__p) >> 3);
    data = (int)v44.__r_.__value_.__l.__data_;
    if (__p)
    {
      v42 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    if (v52)
    {
      v53 = v52;
      operator delete(v52);
    }
    if (v55)
    {
      v56 = v55;
      operator delete(v55);
    }
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    v35 = *(uint64_t **)(a1 + 40);
    v36 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    sub_20BDDC0E4(v54, "uv");
    v8 = data;
    sub_20BE594DC(a1, &v33);
    LODWORD(v50) = 4;
    v51 = &v33;
    LODWORD(v31) = 3;
    v32 = &v57;
    LODWORD(v29) = 0;
    v30 = 0;
    sub_20BE2AED4((char *)__dst, &v35, (uint64_t)v54, 1, v8, 1, &v50, &v31, &v29);
    v9 = (void **)(a1 + 920);
    if (*(char *)(a1 + 943) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 936) = v38;
    HIBYTE(v38) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 944) = (_DWORD)v39;
    std::string::operator=((std::string *)(a1 + 952), &v40);
    sub_20BDE881C((_QWORD *)(a1 + 976), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 992) = (_DWORD)v43;
    std::string::operator=((std::string *)(a1 + 1000), &v44);
    sub_20BDE881C((_QWORD *)(a1 + 1024), v45);
    *(_QWORD *)(a1 + 1040) = v46;
    *(_DWORD *)(a1 + 1048) = v47;
    std::string::operator=((std::string *)(a1 + 1056), &v48);
    sub_20BDE881C((_QWORD *)(a1 + 1080), v49);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v47);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v43);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v39);
    if (SHIBYTE(v38) < 0)
      operator delete(__dst[0]);
    v10 = v34;
    if (v34)
    {
      v11 = (unint64_t *)&v34->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (SHIBYTE(v55) < 0)
      operator delete(*(void **)v54);
    v13 = v36;
    if (v36)
    {
      v14 = (unint64_t *)&v36->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      goto LABEL_56;
    }
  }
  else
  {
    sub_20BE2ACE4(v54, (uint64_t *)&v69);
    v16 = *(_DWORD *)(a2 + 568);
    __dst[0] = *(void **)v54;
    *(void **)((char *)__dst + 5) = *(void **)&v54[5];
    v38 = 0;
    v39 = 0;
    v40.__r_.__value_.__r.__words[0] = 0;
    sub_20BDE1364(&v38, v55, (uint64_t)v56, (v56 - (_BYTE *)v55) >> 3);
    v40.__r_.__value_.__l.__size_ = 0;
    v40.__r_.__value_.__r.__words[2] = 0x100000005;
    v42 = 0;
    v43 = 0;
    __p = 0;
    LODWORD(v44.__r_.__value_.__l.__data_) = v16;
    *(void **)&v59 = __dst[0];
    *(void **)((char *)&v59 + 5) = *(void **)((char *)__dst + 5);
    sub_20BDDF7E4((char *)&v60, (char *)v38, (uint64_t)v39, (v39 - (_BYTE *)v38) >> 3);
    *(_QWORD *)&v61[8] = v40.__r_.__value_.__l.__size_;
    *(_QWORD *)&v61[13] = *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 5);
    sub_20BDDF7E4((char *)&v62, (char *)__p, (uint64_t)v42, (v42 - (_BYTE *)__p) >> 3);
    data = (int)v44.__r_.__value_.__l.__data_;
    if (__p)
    {
      v42 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    if (v55)
    {
      v56 = v55;
      operator delete(v55);
    }
    v17 = *(std::__shared_weak_count **)(a1 + 48);
    v27 = *(uint64_t **)(a1 + 40);
    v28 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    sub_20BDDC0E4(v54, "uv");
    v20 = data;
    sub_20BE594DC(a1, &v33);
    LODWORD(v50) = 4;
    v51 = &v33;
    LODWORD(v31) = 3;
    v32 = &v57;
    LODWORD(v29) = 0;
    v30 = 0;
    sub_20BE2AED4((char *)__dst, &v27, (uint64_t)v54, 0, v20, 1, &v50, &v31, &v29);
    v21 = (void **)(a1 + 920);
    if (*(char *)(a1 + 943) < 0)
      operator delete(*v21);
    *(_OWORD *)v21 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 936) = v38;
    HIBYTE(v38) = 0;
    LOBYTE(__dst[0]) = 0;
    *(_DWORD *)(a1 + 944) = (_DWORD)v39;
    std::string::operator=((std::string *)(a1 + 952), &v40);
    sub_20BDE881C((_QWORD *)(a1 + 976), (uint64_t *)&__p);
    *(_DWORD *)(a1 + 992) = (_DWORD)v43;
    std::string::operator=((std::string *)(a1 + 1000), &v44);
    sub_20BDE881C((_QWORD *)(a1 + 1024), v45);
    *(_QWORD *)(a1 + 1040) = v46;
    *(_DWORD *)(a1 + 1048) = v47;
    std::string::operator=((std::string *)(a1 + 1056), &v48);
    sub_20BDE881C((_QWORD *)(a1 + 1080), v49);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v47);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v43);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)&v39);
    if (SHIBYTE(v38) < 0)
      operator delete(__dst[0]);
    v22 = v34;
    if (v34)
    {
      v23 = (unint64_t *)&v34->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (SHIBYTE(v55) < 0)
      operator delete(*(void **)v54);
    v13 = v28;
    if (v28)
    {
      v25 = (unint64_t *)&v28->__shared_owners_;
      do
        v15 = __ldaxr(v25);
      while (__stlxr(v15 - 1, v25));
LABEL_56:
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  if (*(_QWORD *)(a1 + 1152))
  {
    v26 = 0;
    do
    {
      sub_20BE2717C(a1 + 920, (uint64_t)&v59);
      ++v26;
    }
    while (v26 < *(_QWORD *)(a1 + 1152));
  }
  sub_20BDE9D48((uint64_t)&v57, v58[0]);
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if ((_QWORD)v60)
  {
    *((_QWORD *)&v60 + 1) = v60;
    operator delete((void *)v60);
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
}

void sub_20BE585C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54)
{
  uint64_t v54;
  void *v56;
  void *v57;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a17);
  if (a53 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  sub_20BDE9D48(v54 - 224, *(_QWORD **)(v54 - 216));
  sub_20BE28D2C((_QWORD *)(v54 - 200));
  v56 = *(void **)(v54 - 112);
  if (v56)
  {
    *(_QWORD *)(v54 - 104) = v56;
    operator delete(v56);
  }
  v57 = *(void **)(v54 - 88);
  if (v57)
  {
    *(_QWORD *)(v54 - 80) = v57;
    operator delete(v57);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::initCreases(Alembic::AbcGeom::v12::OSubDSchema *this, int a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t *v40;
  int v41;
  uint64_t *v42;
  int v43;
  uint64_t *v44;
  int v45;
  void *__p;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void *v51;
  std::string v52;
  uint64_t v53[2];
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  char *v58;
  const char *v59;

  v58 = (char *)this + 8;
  v59 = "OSubDSchema::initCreases()";
  v5 = *((_QWORD *)this + 5);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v56 = v5;
  v57 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = sub_20BE295E0((uint64_t)this + 248);
  v9 = *(std::__shared_weak_count **)(v8 + 72);
  v54 = *(_QWORD *)(v8 + 64);
  v55 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v49 = v5;
  v50 = v4;
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  sub_20BDDC0E4(&__p, ".creaseIndices");
  LODWORD(v33) = 4;
  v34 = &v54;
  LODWORD(v44) = 0;
  v45 = 0;
  LODWORD(v42) = 0;
  v43 = 0;
  LODWORD(v40) = 0;
  v41 = 0;
  sub_20BE2A074((uint64_t)&v51, &v49, (uint64_t)&__p, (uint64_t **)&v33, &v44, &v42, &v40);
  *((_DWORD *)this + 134) = (_DWORD)v51;
  std::string::operator=((std::string *)((char *)this + 544), &v52);
  sub_20BDE881C((_QWORD *)this + 71, v53);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v51);
  if (SHIBYTE(v48) < 0)
    operator delete(__p);
  v14 = v50;
  if (v50)
  {
    v15 = (unint64_t *)&v50->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v38 = v56;
  v39 = v57;
  if (v57)
  {
    v17 = (unint64_t *)&v57->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  sub_20BDDC0E4(&__p, ".creaseLengths");
  LODWORD(v33) = 4;
  v34 = &v54;
  LODWORD(v44) = 0;
  v45 = 0;
  LODWORD(v42) = 0;
  v43 = 0;
  LODWORD(v40) = 0;
  v41 = 0;
  sub_20BE2A074((uint64_t)&v51, &v38, (uint64_t)&__p, (uint64_t **)&v33, &v44, &v42, &v40);
  *((_DWORD *)this + 146) = (_DWORD)v51;
  std::string::operator=((std::string *)((char *)this + 592), &v52);
  sub_20BDE881C((_QWORD *)this + 77, v53);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v51);
  if (SHIBYTE(v48) < 0)
    operator delete(__p);
  v19 = v39;
  if (v39)
  {
    v20 = (unint64_t *)&v39->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v36 = v56;
  v37 = v57;
  if (v57)
  {
    v22 = (unint64_t *)&v57->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  sub_20BDDC0E4(&__p, ".creaseSharpnesses");
  LODWORD(v33) = 4;
  v34 = &v54;
  LODWORD(v44) = 0;
  v45 = 0;
  LODWORD(v42) = 0;
  v43 = 0;
  LODWORD(v40) = 0;
  v41 = 0;
  sub_20BE2ECE8((uint64_t)&v51, &v36, (uint64_t)&__p, (uint64_t **)&v33, &v44, &v42, &v40);
  *((_DWORD *)this + 158) = (_DWORD)v51;
  std::string::operator=((std::string *)((char *)this + 640), &v52);
  sub_20BDE881C((_QWORD *)this + 83, v53);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v51);
  if (SHIBYTE(v48) < 0)
    operator delete(__p);
  v24 = v37;
  if (v37)
  {
    v25 = (unint64_t *)&v37->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  __p = 0;
  v47 = 0;
  v48 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  if (a2)
  {
    do
    {
      sub_20BE2A600(&v51, (uint64_t *)&__p);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 536);
      if (v52.__r_.__value_.__l.__size_)
      {
        v52.__r_.__value_.__r.__words[2] = v52.__r_.__value_.__l.__size_;
        operator delete((void *)v52.__r_.__value_.__l.__size_);
      }
      sub_20BE2A600(&v51, (uint64_t *)&__p);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 584);
      if (v52.__r_.__value_.__l.__size_)
      {
        v52.__r_.__value_.__r.__words[2] = v52.__r_.__value_.__l.__size_;
        operator delete((void *)v52.__r_.__value_.__l.__size_);
      }
      sub_20BE2DEC0(&v51, (uint64_t *)&v33);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 632);
      if (v52.__r_.__value_.__l.__size_)
      {
        v52.__r_.__value_.__r.__words[2] = v52.__r_.__value_.__l.__size_;
        operator delete((void *)v52.__r_.__value_.__l.__size_);
      }
      --a2;
    }
    while (a2);
    if (v33)
    {
      v34 = (uint64_t *)v33;
      operator delete(v33);
    }
    if (__p)
    {
      v47 = __p;
      operator delete(__p);
    }
  }
  v27 = v55;
  if (v55)
  {
    v28 = (unint64_t *)&v55->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v57;
  if (v57)
  {
    v31 = (unint64_t *)&v57->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_20BE58B84(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,void *a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v37;
  void (*v38)(uint64_t);
  uint64_t v39;

  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&a30);
  if (a27 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a12);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v34 - 96));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v34 - 80));
  v37 = __cxa_begin_catch(a1);
  v38 = *(void (**)(uint64_t))(*(_QWORD *)v33 + 16);
  if (a2 == 2)
  {
    v39 = (uint64_t)v37;
    v38(v33);
    sub_20BE02570(v34 - 64, v39);
  }
  else
  {
    v38(v33);
    sub_20BE02504(v34 - 64, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE58B60);
}

void sub_20BE58D08(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::initCorners(Alembic::AbcGeom::v12::OSubDSchema *this, int a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t *v33;
  int v34;
  uint64_t *v35;
  int v36;
  uint64_t *v37;
  int v38;
  void *__p;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *v44;
  std::string v45;
  uint64_t v46[2];
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  char *v51;
  const char *v52;

  v51 = (char *)this + 8;
  v52 = "OSubDSchema::initCorners()";
  v5 = *((_QWORD *)this + 5);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v49 = v5;
  v50 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = sub_20BE295E0((uint64_t)this + 248);
  v9 = *(std::__shared_weak_count **)(v8 + 72);
  v47 = *(_QWORD *)(v8 + 64);
  v48 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v42 = v5;
  v43 = v4;
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  sub_20BDDC0E4(&__p, ".cornerIndices");
  LODWORD(v28) = 4;
  v29 = &v47;
  LODWORD(v37) = 0;
  v38 = 0;
  LODWORD(v35) = 0;
  v36 = 0;
  LODWORD(v33) = 0;
  v34 = 0;
  sub_20BE2A074((uint64_t)&v44, &v42, (uint64_t)&__p, (uint64_t **)&v28, &v37, &v35, &v33);
  *((_DWORD *)this + 170) = (_DWORD)v44;
  std::string::operator=((std::string *)((char *)this + 688), &v45);
  sub_20BDE881C((_QWORD *)this + 89, v46);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v44);
  if (SHIBYTE(v41) < 0)
    operator delete(__p);
  v14 = v43;
  if (v43)
  {
    v15 = (unint64_t *)&v43->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v31 = v49;
  v32 = v50;
  if (v50)
  {
    v17 = (unint64_t *)&v50->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  sub_20BDDC0E4(&__p, ".cornerSharpnesses");
  LODWORD(v28) = 4;
  v29 = &v47;
  LODWORD(v37) = 0;
  v38 = 0;
  LODWORD(v35) = 0;
  v36 = 0;
  LODWORD(v33) = 0;
  v34 = 0;
  sub_20BE2ECE8((uint64_t)&v44, &v31, (uint64_t)&__p, (uint64_t **)&v28, &v37, &v35, &v33);
  *((_DWORD *)this + 182) = (_DWORD)v44;
  std::string::operator=((std::string *)((char *)this + 736), &v45);
  sub_20BDE881C((_QWORD *)this + 95, v46);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v44);
  if (SHIBYTE(v41) < 0)
    operator delete(__p);
  v19 = v32;
  if (v32)
  {
    v20 = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  __p = 0;
  v40 = 0;
  v41 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  if (a2)
  {
    do
    {
      sub_20BE2A600(&v44, (uint64_t *)&__p);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 680);
      if (v45.__r_.__value_.__l.__size_)
      {
        v45.__r_.__value_.__r.__words[2] = v45.__r_.__value_.__l.__size_;
        operator delete((void *)v45.__r_.__value_.__l.__size_);
      }
      sub_20BE2DEC0(&v44, (uint64_t *)&v28);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 728);
      if (v45.__r_.__value_.__l.__size_)
      {
        v45.__r_.__value_.__r.__words[2] = v45.__r_.__value_.__l.__size_;
        operator delete((void *)v45.__r_.__value_.__l.__size_);
      }
      --a2;
    }
    while (a2);
    if (v28)
    {
      v29 = (uint64_t *)v28;
      operator delete(v28);
    }
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
  }
  v22 = v48;
  if (v48)
  {
    v23 = (unint64_t *)&v48->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v50;
  if (v50)
  {
    v26 = (unint64_t *)&v50->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_20BE590A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void *v35;
  void (*v36)(uint64_t);
  uint64_t v37;

  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&a28);
  if (a25 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a12);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v32 - 96));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v32 - 80));
  v35 = __cxa_begin_catch(a1);
  v36 = *(void (**)(uint64_t))(*(_QWORD *)v31 + 16);
  if (a2 == 2)
  {
    v37 = (uint64_t)v35;
    v36(v31);
    sub_20BE02570(v32 - 64, v37);
  }
  else
  {
    v36(v31);
    sub_20BE02504(v32 - 64, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE59080);
}

void sub_20BE591E0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::initHoles(Alembic::AbcGeom::v12::OSubDSchema *this, int a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23[2];
  void *__p;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *v29;
  std::string v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  char *v34;
  const char *v35;

  v34 = (char *)this + 8;
  v35 = "OSubDSchema::initHoles()";
  v4 = sub_20BE295E0((uint64_t)this + 248);
  v5 = *(std::__shared_weak_count **)(v4 + 72);
  v32 = *(_QWORD *)(v4 + 64);
  v33 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v27 = *((_QWORD *)this + 5);
  v28 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_20BDDC0E4(&__p, ".holes");
  LODWORD(v23[0]) = 4;
  v23[1] = &v32;
  LODWORD(v21) = 0;
  v22 = 0;
  LODWORD(v19) = 0;
  v20 = 0;
  LODWORD(v17) = 0;
  v18 = 0;
  sub_20BE2A074((uint64_t)&v29, &v27, (uint64_t)&__p, v23, &v21, &v19, &v17);
  *((_DWORD *)this + 194) = (_DWORD)v29;
  std::string::operator=((std::string *)((char *)this + 784), &v30);
  sub_20BDE881C((_QWORD *)this + 101, &v31);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v29);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  v11 = v28;
  if (v28)
  {
    v12 = (unint64_t *)&v28->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  __p = 0;
  v25 = 0;
  v26 = 0;
  if (a2)
  {
    do
    {
      sub_20BE2A600(&v29, (uint64_t *)&__p);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 776);
      if (v30.__r_.__value_.__l.__size_)
      {
        v30.__r_.__value_.__r.__words[2] = v30.__r_.__value_.__l.__size_;
        operator delete((void *)v30.__r_.__value_.__l.__size_);
      }
      --a2;
    }
    while (a2);
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
  }
  v14 = v33;
  if (v33)
  {
    v15 = (unint64_t *)&v33->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_20BE593E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  void *v33;
  void (*v34)(uint64_t);
  uint64_t v35;

  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&a26);
  if (a23 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v30 - 64));
  v33 = __cxa_begin_catch(a1);
  v34 = *(void (**)(uint64_t))(*(_QWORD *)v29 + 16);
  if (a2 == 2)
  {
    v35 = (uint64_t)v33;
    v34(v29);
    sub_20BE02570(v30 - 48, v35);
  }
  else
  {
    v34(v29);
    sub_20BE02504(v30 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE593CCLL);
}

void sub_20BE594BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE594DC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE v7[56];
  _BYTE v8[48];

  if (*(char *)(a1 + 279) < 0)
  {
    if (!*(_QWORD *)(a1 + 264))
      goto LABEL_5;
LABEL_10:
    sub_20BE1A75C((int *)(a1 + 8), (uint64_t)v7);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v7, (uint64_t)v8);
    Alembic::Abc::v12::OArchive::getTimeSampling((Alembic::Abc::v12::OArchive *)v8, a2);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v8);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v7);
    return;
  }
  if (*(_BYTE *)(a1 + 279))
    goto LABEL_10;
LABEL_5:
  if (!*(_QWORD *)(a1 + 280))
    goto LABEL_10;
  v3 = sub_20BE295E0(a1 + 248);
  v4 = *(_QWORD *)(v3 + 72);
  *a2 = *(_QWORD *)(v3 + 64);
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_20BE59584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)va1);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)va);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::createPositionsProperty(Alembic::AbcGeom::v12::OSubDSchema *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *__p[2];
  void *v12;
  void *v13;
  void *v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  std::string v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29[2];

  v29[0] = 0;
  v29[1] = 0;
  v28 = (uint64_t *)v29;
  sub_20BE288A4(&v28, 3);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v23 = *((_QWORD *)this + 5);
  v24 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, "P");
  LODWORD(v14) = 3;
  v15 = &v28;
  v5 = *((_DWORD *)this + 290);
  LODWORD(v21) = 2;
  v22 = v5;
  LODWORD(v19) = 0;
  v20 = 0;
  LODWORD(v17) = 0;
  v18 = 0;
  sub_20BE2981C((uint64_t)&v25, &v23, (uint64_t)__p, (uint64_t **)&v14, &v21, &v19, &v17);
  *((_DWORD *)this + 62) = (_DWORD)v25;
  std::string::operator=((std::string *)((char *)this + 256), &v26);
  sub_20BDE881C((_QWORD *)this + 35, &v27);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v25);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  v6 = v24;
  if (v24)
  {
    v7 = (unint64_t *)&v24->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  sub_20BE29E5C(&v25, (uint64_t *)&v14);
  if (*((_QWORD *)this + 144))
  {
    v9 = 0;
    do
    {
      sub_20BE29F08(__p, (uint64_t *)&v25);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 248);
      if (v12)
      {
        v13 = v12;
        operator delete(v12);
      }
      ++v9;
      v10 = *((_QWORD *)this + 144);
    }
    while (v9 < v10);
  }
  else
  {
    v10 = 0;
  }
  sub_20BE59820((uint64_t)this, *((_DWORD *)this + 290), v10);
  if (v26.__r_.__value_.__l.__size_)
  {
    v26.__r_.__value_.__r.__words[2] = v26.__r_.__value_.__l.__size_;
    operator delete((void *)v26.__r_.__value_.__l.__size_);
  }
  if (v14)
  {
    v15 = (uint64_t **)v14;
    operator delete(v14);
  }
  sub_20BDE9D48((uint64_t)&v28, v29[0]);
}

void sub_20BE59784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 88);
  if (v29)
  {
    *(_QWORD *)(v27 - 80) = v29;
    operator delete(v29);
  }
  if (__p)
    operator delete(__p);
  sub_20BDE9D48(v27 - 56, *(_QWORD **)(v27 - 48));
  _Unwind_Resume(a1);
}

void sub_20BE59820(uint64_t a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  Alembic::Abc::v12::OScalarProperty *v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  int v20;
  void *__p[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _OWORD v25[2];
  int64x2_t v26;
  uint64_t v27;
  const char *v28;

  v27 = a1 + 8;
  v28 = "OGeomBaseSchema::createSelfBoundsProperty()";
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(_QWORD *)(a1 + 72))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 87))
  {
LABEL_5:
    if (*(_QWORD *)(a1 + 88))
      return;
  }
  v6 = *(std::__shared_weak_count **)(a1 + 48);
  v23 = *(_QWORD *)(a1 + 40);
  v24 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".selfBnds");
  LODWORD(v19) = 2;
  v20 = a2;
  LODWORD(v17) = 0;
  v18 = 0;
  LODWORD(v15) = 0;
  v16 = 0;
  LODWORD(v13) = 0;
  v14 = 0;
  sub_20BE1C558((uint64_t)v25, &v23, (uint64_t)__p, &v19, &v17, &v15, &v13);
  *(_DWORD *)(a1 + 56) = v25[0];
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)((char *)v25 + 8));
  sub_20BDE881C((_QWORD *)(a1 + 88), v26.i64);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)v25);
  if (v22 < 0)
    operator delete(__p[0]);
  v9 = v24;
  if (v24)
  {
    v10 = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v25[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v25[1] = xmmword_20CA521E0;
  v26 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (a3)
  {
    v12 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 56);
    do
    {
      Alembic::Abc::v12::OScalarProperty::set(v12, v25);
      --a3;
    }
    while (a3);
  }
}

void sub_20BE599AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;
  void *v27;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v24 - 96));
  if (a23 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a24);
  v27 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v24 - 48, (uint64_t)v27);
  else
    sub_20BE02504(v24 - 48, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE59998);
}

void sub_20BE59A2C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OSubDSchema::setFromPrevious(Alembic::AbcGeom::v12::OSubDSchema *this)
{
  uint64_t (*v2)();
  uint64_t (*v3)();
  uint64_t (*v4)();
  uint64_t (*v5)();
  uint64_t (*v6)();
  uint64_t (*v7)();
  uint64_t (*v8)();
  uint64_t (*v9)();
  uint64_t (*v10)();
  uint64_t (*v11)();
  uint64_t (*v12)();
  _BYTE *v13;
  uint64_t result;
  uint64_t (*v15)();

  if (*((char *)this + 279) < 0)
  {
    if (*((_QWORD *)this + 33))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 279))
  {
LABEL_3:
    v2 = 0;
    goto LABEL_8;
  }
  if (*((_QWORD *)this + 35))
    v2 = nullsub_7;
  else
    v2 = 0;
LABEL_8:
  if (v2)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 248));
  if (*((char *)this + 327) < 0)
  {
    if (*((_QWORD *)this + 39))
      goto LABEL_12;
  }
  else if (*((_BYTE *)this + 327))
  {
LABEL_12:
    v3 = 0;
    goto LABEL_17;
  }
  if (*((_QWORD *)this + 41))
    v3 = nullsub_7;
  else
    v3 = 0;
LABEL_17:
  if (v3)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 296));
  if (*((char *)this + 375) < 0)
  {
    if (*((_QWORD *)this + 45))
      goto LABEL_21;
  }
  else if (*((_BYTE *)this + 375))
  {
LABEL_21:
    v4 = 0;
    goto LABEL_26;
  }
  if (*((_QWORD *)this + 47))
    v4 = nullsub_7;
  else
    v4 = 0;
LABEL_26:
  if (v4)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 344));
  if (*((char *)this + 423) < 0)
  {
    if (*((_QWORD *)this + 51))
      goto LABEL_30;
  }
  else if (*((_BYTE *)this + 423))
  {
LABEL_30:
    v5 = 0;
    goto LABEL_35;
  }
  if (*((_QWORD *)this + 53))
    v5 = nullsub_6;
  else
    v5 = 0;
LABEL_35:
  if (v5)
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 392));
  if (*((char *)this + 471) < 0)
  {
    if (*((_QWORD *)this + 57))
      goto LABEL_39;
  }
  else if (*((_BYTE *)this + 471))
  {
LABEL_39:
    v6 = 0;
    goto LABEL_44;
  }
  if (*((_QWORD *)this + 59))
    v6 = nullsub_6;
  else
    v6 = 0;
LABEL_44:
  if (v6)
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 440));
  if (*((char *)this + 519) < 0)
  {
    if (*((_QWORD *)this + 63))
      goto LABEL_48;
  }
  else if (*((_BYTE *)this + 519))
  {
LABEL_48:
    v7 = 0;
    goto LABEL_53;
  }
  if (*((_QWORD *)this + 65))
    v7 = nullsub_6;
  else
    v7 = 0;
LABEL_53:
  if (v7)
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 488));
  if (*((char *)this + 567) < 0)
  {
    if (*((_QWORD *)this + 69))
      goto LABEL_57;
  }
  else if (*((_BYTE *)this + 567))
  {
LABEL_57:
    v8 = 0;
    goto LABEL_62;
  }
  if (*((_QWORD *)this + 71))
    v8 = nullsub_7;
  else
    v8 = 0;
LABEL_62:
  if (v8)
  {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 536));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 584));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 632));
  }
  if (*((char *)this + 711) < 0)
  {
    if (*((_QWORD *)this + 87))
      goto LABEL_66;
  }
  else if (*((_BYTE *)this + 711))
  {
LABEL_66:
    v9 = 0;
    goto LABEL_71;
  }
  if (*((_QWORD *)this + 89))
    v9 = nullsub_7;
  else
    v9 = 0;
LABEL_71:
  if (v9)
  {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 680));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 728));
  }
  if (*((char *)this + 807) < 0)
  {
    if (*((_QWORD *)this + 99))
      goto LABEL_75;
  }
  else if (*((_BYTE *)this + 807))
  {
LABEL_75:
    v10 = 0;
    goto LABEL_80;
  }
  if (*((_QWORD *)this + 101))
    v10 = nullsub_7;
  else
    v10 = 0;
LABEL_80:
  if (v10)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 776));
  if (*((char *)this + 855) < 0)
  {
    if (*((_QWORD *)this + 105))
      goto LABEL_84;
  }
  else if (*((_BYTE *)this + 855))
  {
LABEL_84:
    v11 = 0;
    goto LABEL_89;
  }
  if (*((_QWORD *)this + 107))
    v11 = nullsub_6;
  else
    v11 = 0;
LABEL_89:
  if (v11)
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 824));
  Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56));
  if (*((char *)this + 903) < 0)
  {
    if (*((_QWORD *)this + 111))
      goto LABEL_93;
  }
  else if (*((_BYTE *)this + 903))
  {
LABEL_93:
    v12 = 0;
    goto LABEL_98;
  }
  if (*((_QWORD *)this + 113))
    v12 = nullsub_7;
  else
    v12 = 0;
LABEL_98:
  if (v12)
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 872));
  v13 = (char *)this + 920;
  result = sub_20BE296FC((uint64_t)v13);
  v15 = nullsub_16;
  if (!(_DWORD)result)
    v15 = 0;
  if (v15)
    return sub_20BE286D0(v13);
  return result;
}

void sub_20BE59E0C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE59DFCLL);
}

void sub_20BE59E40(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OSubDSchema::setTimeSampling(Alembic::AbcGeom::v12::OSubDSchema *this, int a2)
{
  uint64_t (*v3)();
  uint64_t (*v4)();
  uint64_t (*v5)();
  uint64_t (*v6)();
  uint64_t (*v7)();
  uint64_t (*v8)();
  uint64_t (*v9)();
  uint64_t (*v10)();
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t (*v13)();
  uint64_t (*v14)();
  uint64_t (*v15)();
  uint64_t (*v16)();
  uint64_t (*v17)();
  _BYTE *v18;
  uint64_t result;
  uint64_t (*v20)();

  *((_DWORD *)this + 290) = a2;
  if (*((char *)this + 279) < 0)
  {
    if (*((_QWORD *)this + 33))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 279))
  {
LABEL_3:
    v3 = 0;
    goto LABEL_8;
  }
  if (*((_QWORD *)this + 35))
    v3 = nullsub_7;
  else
    v3 = 0;
LABEL_8:
  if (v3)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 248));
  if (*((char *)this + 327) < 0)
  {
    if (*((_QWORD *)this + 39))
      goto LABEL_12;
  }
  else if (*((_BYTE *)this + 327))
  {
LABEL_12:
    v4 = 0;
    goto LABEL_17;
  }
  if (*((_QWORD *)this + 41))
    v4 = nullsub_7;
  else
    v4 = 0;
LABEL_17:
  if (v4)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 296));
  if (*((char *)this + 375) < 0)
  {
    if (*((_QWORD *)this + 45))
      goto LABEL_21;
  }
  else if (*((_BYTE *)this + 375))
  {
LABEL_21:
    v5 = 0;
    goto LABEL_26;
  }
  if (*((_QWORD *)this + 47))
    v5 = nullsub_7;
  else
    v5 = 0;
LABEL_26:
  if (v5)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 344));
  if (*((char *)this + 87) < 0)
  {
    if (*((_QWORD *)this + 9))
      goto LABEL_30;
  }
  else if (*((_BYTE *)this + 87))
  {
LABEL_30:
    v6 = 0;
    goto LABEL_35;
  }
  if (*((_QWORD *)this + 11))
    v6 = nullsub_6;
  else
    v6 = 0;
LABEL_35:
  if (v6)
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56));
  if (*((char *)this + 423) < 0)
  {
    if (*((_QWORD *)this + 51))
      goto LABEL_39;
  }
  else if (*((_BYTE *)this + 423))
  {
LABEL_39:
    v7 = 0;
    goto LABEL_44;
  }
  if (*((_QWORD *)this + 53))
    v7 = nullsub_6;
  else
    v7 = 0;
LABEL_44:
  if (v7)
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 392));
  if (*((char *)this + 471) < 0)
  {
    if (*((_QWORD *)this + 57))
      goto LABEL_48;
  }
  else if (*((_BYTE *)this + 471))
  {
LABEL_48:
    v8 = 0;
    goto LABEL_53;
  }
  if (*((_QWORD *)this + 59))
    v8 = nullsub_6;
  else
    v8 = 0;
LABEL_53:
  if (v8)
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 440));
  if (*((char *)this + 519) < 0)
  {
    if (*((_QWORD *)this + 63))
      goto LABEL_57;
  }
  else if (*((_BYTE *)this + 519))
  {
LABEL_57:
    v9 = 0;
    goto LABEL_62;
  }
  if (*((_QWORD *)this + 65))
    v9 = nullsub_6;
  else
    v9 = 0;
LABEL_62:
  if (v9)
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 488));
  if (*((char *)this + 855) < 0)
  {
    if (*((_QWORD *)this + 105))
      goto LABEL_66;
  }
  else if (*((_BYTE *)this + 855))
  {
LABEL_66:
    v10 = 0;
    goto LABEL_71;
  }
  if (*((_QWORD *)this + 107))
    v10 = nullsub_6;
  else
    v10 = 0;
LABEL_71:
  if (v10)
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 824));
  if (*((char *)this + 567) < 0)
  {
    if (*((_QWORD *)this + 69))
      goto LABEL_75;
  }
  else if (*((_BYTE *)this + 567))
  {
LABEL_75:
    v11 = 0;
    goto LABEL_80;
  }
  if (*((_QWORD *)this + 71))
    v11 = nullsub_7;
  else
    v11 = 0;
LABEL_80:
  if (v11)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 536));
  if (*((char *)this + 615) < 0)
  {
    if (*((_QWORD *)this + 75))
      goto LABEL_84;
  }
  else if (*((_BYTE *)this + 615))
  {
LABEL_84:
    v12 = 0;
    goto LABEL_89;
  }
  if (*((_QWORD *)this + 77))
    v12 = nullsub_7;
  else
    v12 = 0;
LABEL_89:
  if (v12)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 584));
  if (*((char *)this + 663) < 0)
  {
    if (*((_QWORD *)this + 81))
      goto LABEL_93;
  }
  else if (*((_BYTE *)this + 663))
  {
LABEL_93:
    v13 = 0;
    goto LABEL_98;
  }
  if (*((_QWORD *)this + 83))
    v13 = nullsub_7;
  else
    v13 = 0;
LABEL_98:
  if (v13)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 632));
  if (*((char *)this + 711) < 0)
  {
    if (*((_QWORD *)this + 87))
      goto LABEL_102;
  }
  else if (*((_BYTE *)this + 711))
  {
LABEL_102:
    v14 = 0;
    goto LABEL_107;
  }
  if (*((_QWORD *)this + 89))
    v14 = nullsub_7;
  else
    v14 = 0;
LABEL_107:
  if (v14)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 680));
  if (*((char *)this + 759) < 0)
  {
    if (*((_QWORD *)this + 93))
      goto LABEL_111;
  }
  else if (*((_BYTE *)this + 759))
  {
LABEL_111:
    v15 = 0;
    goto LABEL_116;
  }
  if (*((_QWORD *)this + 95))
    v15 = nullsub_7;
  else
    v15 = 0;
LABEL_116:
  if (v15)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 728));
  if (*((char *)this + 807) < 0)
  {
    if (*((_QWORD *)this + 99))
      goto LABEL_120;
  }
  else if (*((_BYTE *)this + 807))
  {
LABEL_120:
    v16 = 0;
    goto LABEL_125;
  }
  if (*((_QWORD *)this + 101))
    v16 = nullsub_7;
  else
    v16 = 0;
LABEL_125:
  if (v16)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 776));
  if (*((char *)this + 903) < 0)
  {
    if (*((_QWORD *)this + 111))
      goto LABEL_129;
  }
  else if (*((_BYTE *)this + 903))
  {
LABEL_129:
    v17 = 0;
    goto LABEL_134;
  }
  if (*((_QWORD *)this + 113))
    v17 = nullsub_7;
  else
    v17 = 0;
LABEL_134:
  if (v17)
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 872));
  v18 = (char *)this + 920;
  result = sub_20BE296FC((uint64_t)v18);
  v20 = nullsub_16;
  if (!(_DWORD)result)
    v20 = 0;
  if (v20)
    return sub_20BE2921C(v18);
  return result;
}

void sub_20BE5A378(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE5A368);
}

void sub_20BE5A3AC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

int *Alembic::AbcGeom::v12::OSubDSchema::setTimeSampling(Alembic::AbcGeom::v12::OSubDSchema *a1, _QWORD *a2)
{
  int *result;
  int v4;
  _BYTE v5[56];
  _BYTE v6[48];
  int *v7;
  const char *v8;

  result = (int *)((char *)a1 + 8);
  v7 = result;
  v8 = "OSubDSchema::setTimeSampling( TimeSamplingPtr)";
  if (*a2)
  {
    sub_20BE1A75C(result, (uint64_t)v5);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v5, (uint64_t)v6);
    v4 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v6);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v6);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v5);
    return (int *)Alembic::AbcGeom::v12::OSubDSchema::setTimeSampling(a1, v4);
  }
  return result;
}

void sub_20BE5A44C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void *v19;

  v19 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v17 - 32, (uint64_t)v19);
  else
    sub_20BE02504(v17 - 32, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE5A43CLL);
}

void sub_20BE5A4B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *Alembic::AbcGeom::v12::OSubDSchema::createFaceSet(uint64_t a1, const void **a2)
{
  int *v3;
  uint64_t **v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *exception;
  _QWORD *v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  int v15;
  void (**v16)(Alembic::Abc::v12::OObject *__hidden);
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  int v23;
  std::string v24;
  uint64_t v25;
  uint64_t (**v26)();
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  const char *v43;
  const void **v44;

  v3 = (int *)(a1 + 8);
  v42 = a1 + 8;
  v43 = "OSubDSchema::createFaceSet ()";
  v4 = (uint64_t **)(a1 + 1120);
  if (a1 + 1128 != sub_20BDEEBA4(a1 + 1120, a2))
  {
    sub_20BDDBD68((uint64_t)&v22);
    sub_20BDDC1C8(&v24, (uint64_t)"faceSet has already been created in SubD.", 41);
    std::stringbuf::str();
    sub_20BDDBF20(&v34, &v40);
    if (v41 < 0)
      operator delete((void *)v40);
    exception = __cxa_allocate_exception(0x20uLL);
    v11 = sub_20BDDC09C(exception, (uint64_t)&v34);
    __cxa_throw(v11, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BE1A75C(v3, (uint64_t)&v34);
  v17 = v35;
  if (SHIBYTE(v37) < 0)
  {
    sub_20BDDBFAC(&v18, (void *)v36, *((unint64_t *)&v36 + 1));
  }
  else
  {
    v18 = v36;
    v19 = v37;
  }
  v16 = off_24C518EC0;
  v20 = v38;
  v21 = v39;
  if (v39)
  {
    v5 = (unint64_t *)(v39 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  LODWORD(v40) = 0;
  DWORD2(v40) = 0;
  LODWORD(v14) = 0;
  v15 = 0;
  LODWORD(v12) = 0;
  v13 = 0;
  sub_20BE4E280((uint64_t)&v22, (uint64_t)&v16, (__int128 *)a2, (uint64_t **)&v40, &v14, &v12);
  v44 = a2;
  v7 = sub_20BE4E0BC(v4, a2, (uint64_t)&unk_20CA5278B, (__int128 **)&v44);
  *((_DWORD *)v7 + 16) = v23;
  std::string::operator=((std::string *)v7 + 3, &v24);
  sub_20BDE881C(v7 + 12, &v25);
  sub_20BE4D464((uint64_t)(v7 + 14), (uint64_t)&v26);
  v22 = off_24C519878;
  v26 = (uint64_t (**)())&unk_24C519358;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v33);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v32);
  v26 = off_24C519410;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v31);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v30);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v29);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v28);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(&v27);
  Alembic::Abc::v12::OObject::~OObject((void **)&v22);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v16);
  v22 = (uint64_t (**)())a2;
  v8 = sub_20BE4E0BC(v4, a2, (uint64_t)&unk_20CA5278B, (__int128 **)&v22) + 7;
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v34);
  return v8;
}

void sub_20BE5A74C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  void *v16;
  unsigned __int8 v17;
  void *v18;
  va_list va;

  va_start(va, a13);
  sub_20BDDC194((std::exception *)(v13 - 160));
  sub_20BDDBE98((uint64_t)va);
  v16 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v13 - 80, (uint64_t)v16);
  else
    sub_20BE02504(v13 - 80, 0);
  __cxa_end_catch();
  v17 = atomic_load((unsigned __int8 *)&qword_254784EA8);
  if ((v17 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254784EA8))
    {
      v18 = operator new(0x198uLL);
      sub_20BE4ED90((uint64_t)v18);
      qword_254784EA0 = (uint64_t)v18;
      __cxa_guard_release(&qword_254784EA8);
    }
  }
  JUMPOUT(0x20BE5A6BCLL);
}

void sub_20BE5A848(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  __cxa_guard_abort(&qword_254784EA8);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OSubDSchema::getFaceSetNames(uint64_t result, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  __int128 *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v2 = *(_QWORD **)(result + 1120);
  v3 = (_QWORD *)(result + 1128);
  if (v2 != (_QWORD *)(result + 1128))
  {
    v5 = a2[1];
    do
    {
      v6 = (__int128 *)(v2 + 4);
      if (v5 >= a2[2])
      {
        result = sub_20BE4EE50(a2, v6);
        v5 = result;
      }
      else
      {
        result = (uint64_t)sub_20BE4EDF4(a2, v6);
        v5 += 24;
      }
      a2[1] = v5;
      v7 = (_QWORD *)v2[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v2[2];
          v9 = *v8 == (_QWORD)v2;
          v2 = v8;
        }
        while (!v9);
      }
      v2 = v8;
    }
    while (v8 != v3);
  }
  return result;
}

void sub_20BE5A944(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE5A930);
}

void sub_20BE5A978(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL Alembic::AbcGeom::v12::OSubDSchema::hasFaceSet(uint64_t a1, const void **a2)
{
  return a1 + 1128 != sub_20BDEEBA4(a1 + 1120, a2);
}

uint64_t Alembic::AbcGeom::v12::OSubDSchema::getFaceSet@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 *v11;

  v11 = a2;
  v4 = sub_20BE4E0BC((uint64_t **)(a1 + 1120), (const void **)a2, (uint64_t)&unk_20CA5278B, &v11);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v4 + 16);
  v5 = (_BYTE *)(a3 + 16);
  if (*((char *)v4 + 95) < 0)
  {
    sub_20BDDBFAC(v5, (void *)v4[9], v4[10]);
  }
  else
  {
    v6 = *(_OWORD *)(v4 + 9);
    *(_QWORD *)(a3 + 32) = v4[11];
    *(_OWORD *)v5 = v6;
  }
  *(_QWORD *)a3 = off_24C518EC0;
  *(_QWORD *)(a3 + 40) = v4[12];
  v7 = v4[13];
  *(_QWORD *)(a3 + 48) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)a3 = off_24C519878;
  return sub_20BE4D5F4(a3 + 56, (uint64_t)(v4 + 14));
}

void sub_20BE5AAA8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;
  void *v12;

  Alembic::Abc::v12::OObject::~OObject(v9);
  v12 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v12);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  sub_20BE4ED90((uint64_t)v9);
  JUMPOUT(0x20BE5AA94);
}

void sub_20BE5AB00(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

std::string *Alembic::AbcGeom::v12::OSubDSchema::setUVSourceName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 1096), a2);
}

void sub_20BE5AB2C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20BE5B630(a1);
  operator delete(v1);
}

void sub_20BE5AB40(uint64_t a1)
{
  sub_20BDEBF08((_QWORD *)(a1 + 280));
  MEMORY[0x212B929D0](a1 + 256, "");
  sub_20BDEBF08((_QWORD *)(a1 + 328));
  MEMORY[0x212B929D0](a1 + 304, "");
  sub_20BDEBF08((_QWORD *)(a1 + 376));
  MEMORY[0x212B929D0](a1 + 352, "");
  sub_20BDEBF08((_QWORD *)(a1 + 424));
  MEMORY[0x212B929D0](a1 + 400, "");
  sub_20BDEBF08((_QWORD *)(a1 + 472));
  MEMORY[0x212B929D0](a1 + 448, "");
  sub_20BDEBF08((_QWORD *)(a1 + 520));
  MEMORY[0x212B929D0](a1 + 496, "");
  sub_20BDEBF08((_QWORD *)(a1 + 568));
  MEMORY[0x212B929D0](a1 + 544, "");
  sub_20BDEBF08((_QWORD *)(a1 + 616));
  MEMORY[0x212B929D0](a1 + 592, "");
  sub_20BDEBF08((_QWORD *)(a1 + 664));
  MEMORY[0x212B929D0](a1 + 640, "");
  sub_20BDEBF08((_QWORD *)(a1 + 712));
  MEMORY[0x212B929D0](a1 + 688, "");
  sub_20BDEBF08((_QWORD *)(a1 + 760));
  MEMORY[0x212B929D0](a1 + 736, "");
  sub_20BDEBF08((_QWORD *)(a1 + 808));
  MEMORY[0x212B929D0](a1 + 784, "");
  sub_20BDEBF08((_QWORD *)(a1 + 856));
  MEMORY[0x212B929D0](a1 + 832, "");
  sub_20BDEBF08((_QWORD *)(a1 + 904));
  MEMORY[0x212B929D0](a1 + 880, "");
  sub_20BE29790(a1 + 920);
  sub_20BE4D944(a1 + 1120, *(_QWORD **)(a1 + 1128));
  *(_QWORD *)(a1 + 1120) = a1 + 1128;
  *(_QWORD *)(a1 + 1136) = 0;
  *(_QWORD *)(a1 + 1128) = 0;
  sub_20BE5ADEC((_QWORD *)a1);
}

uint64_t sub_20BE5ACA4(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return *(_BYTE *)(a1 + 1144) != 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return *(_BYTE *)(a1 + 1144) != 0;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    if (*(char *)(a1 + 279) < 0)
    {
      if (*(_QWORD *)(a1 + 264))
        return *(_BYTE *)(a1 + 1144) != 0;
    }
    else if (*(_BYTE *)(a1 + 279))
    {
      return *(_BYTE *)(a1 + 1144) != 0;
    }
    if (*(_QWORD *)(a1 + 280))
    {
      if (*(char *)(a1 + 327) < 0)
      {
        if (*(_QWORD *)(a1 + 312))
          return *(_BYTE *)(a1 + 1144) != 0;
      }
      else if (*(_BYTE *)(a1 + 327))
      {
        return *(_BYTE *)(a1 + 1144) != 0;
      }
      if (*(_QWORD *)(a1 + 328))
      {
        if (*(char *)(a1 + 375) < 0)
        {
          if (*(_QWORD *)(a1 + 360))
            return *(_BYTE *)(a1 + 1144) != 0;
        }
        else if (*(_BYTE *)(a1 + 375))
        {
          return *(_BYTE *)(a1 + 1144) != 0;
        }
        if (*(_QWORD *)(a1 + 376))
          return 1;
      }
    }
  }
  return *(_BYTE *)(a1 + 1144) != 0;
}

uint64_t sub_20BE5AD3C(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_24C519A68;
  v2 = (void **)(a1 + 8);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_20BE5AD94(void **a1)
{
  void **v2;

  *a1 = off_24C519A68;
  v2 = a1 + 1;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a1 + 13);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a1 + 7);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  operator delete(a1);
}

void sub_20BE5ADEC(_QWORD *a1)
{
  sub_20BDEBF08(a1 + 11);
  MEMORY[0x212B929D0](a1 + 8, "");
  sub_20BDEBF08(a1 + 17);
  MEMORY[0x212B929D0](a1 + 14, "");
  sub_20BDEBF08(a1 + 23);
  MEMORY[0x212B929D0](a1 + 20, "");
  sub_20BDEBF08(a1 + 29);
  MEMORY[0x212B929D0](a1 + 26, "");
  sub_20BDEBF08(a1 + 5);
  JUMPOUT(0x212B929D0);
}

BOOL sub_20BE5AE70(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 40) != 0;
}

uint64_t sub_20BE5AE9C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C519A98;
  v14 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  sub_20BE5B06C(a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE5AF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v9);
  _Unwind_Resume(a1);
}

void sub_20BE5AFB4(uint64_t a1, int a2, char a3)
{
  if ((a3 & 1) == 0)
    sub_20BE59820(a1, a2, 0);
}

void sub_20BE5AFFC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;
  void (*v12)(uint64_t);
  uint64_t v13;

  v11 = __cxa_begin_catch(a1);
  v12 = *(void (**)(uint64_t))(*(_QWORD *)v9 + 16);
  if (a2 == 2)
  {
    v13 = (uint64_t)v11;
    v12(v9);
    sub_20BE02570((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_20BE02504((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE5AFE8);
}

void sub_20BE5B04C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE5B06C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t *v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *exception;
  _QWORD *v23;
  std::string __p;
  void *v25[2];
  char v26;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD v29[37];
  int v30;
  const void **v31[4];
  std::__shared_weak_count *v32;
  int v33;
  uint64_t v34;
  void **v35;

  v28 = 0;
  v29[0] = 0;
  v27 = (uint64_t *)&v28;
  v29[35] = 0;
  v29[36] = 0;
  v30 = 2;
  sub_20BDEBF8C((uint64_t *)v31, (const void ***)&v27);
  v31[3] = 0;
  v32 = 0;
  v33 = 0;
  v34 = 1;
  sub_20BDE9D48((uint64_t)&v27, v28);
  sub_20BE02E30(a4, (uint64_t)&v30);
  sub_20BE02E30(a5, (uint64_t)&v30);
  sub_20BE02E30(a6, (uint64_t)&v30);
  sub_20BE02E30(a7, (uint64_t)&v30);
  *(_DWORD *)(a1 + 8) = v30;
  v29[33] = a1 + 8;
  v29[34] = "OSchema::OSchema::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v27);
    sub_20BDDC1C8(v29, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_20BDDBF20(v25, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    v23 = sub_20BDDC09C(exception, (uint64_t)v25);
    __cxa_throw(v23, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v27, v31);
  if (HIDWORD(v34) != 1)
  {
    sub_20BDDC0E4(v25, "schema");
    sub_20BDDC0E4(&__p, "AbcGeom_SubD_v1");
    v35 = v25;
    v14 = sub_20BDDDFDC(&v27, (const void **)v25, (uint64_t)&unk_20CA5278B, (__int128 **)&v35);
    std::string::operator=((std::string *)(v14 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v26 < 0)
      operator delete(v25[0]);
    if (HIDWORD(v34) != 1)
    {
      sub_20BDDC0E4(v25, "schemaBaseType");
      sub_20BDDC0E4(&__p, "AbcGeom_GeomBase_v1");
      v35 = v25;
      v15 = sub_20BDDDFDC(&v27, (const void **)v25, (uint64_t)&unk_20CA5278B, (__int128 **)&v35);
      std::string::operator=((std::string *)(v15 + 7), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v26 < 0)
        operator delete(v25[0]);
    }
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t **))(*(_QWORD *)*a2 + 112))(v25, *a2, a3, &v27);
  sub_20BDE82DC(a1 + 40, (__int128 *)v25);
  v16 = (std::__shared_weak_count *)v25[1];
  if (v25[1])
  {
    v17 = (unint64_t *)((char *)v25[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  sub_20BDE9D48((uint64_t)&v27, v28);
  v19 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  sub_20BDE9D48((uint64_t)v31, v31[1]);
}

void sub_20BE5B390(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v27;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a22);
  v27 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v23 + 40));
  MEMORY[0x212B929D0](v23 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v24 - 192, (uint64_t)v27);
  else
    sub_20BE02504(v24 - 192, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE5B2B8);
}

void sub_20BE5B488(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE5B4DC(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20BE5B504(void **a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20BE5B52C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20BE0C7A4((int *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE5B614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE5B630(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C5199E0;
  sub_20BE4D944(a1 + 1120, *(_QWORD **)(a1 + 1128));
  if (*(char *)(a1 + 1119) < 0)
    operator delete(*(void **)(a1 + 1096));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 1048));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 992));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 944));
  if (*(char *)(a1 + 943) < 0)
    operator delete(*(void **)(a1 + 920));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 872));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 824));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 776));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 728));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 680));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 632));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 584));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 536));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 488));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 440));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 248));
  *(_QWORD *)a1 = off_24C519A68;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

uint64_t Alembic::AbcGeom::v12::ISubDSchema::getTopologyVariance(Alembic::AbcGeom::v12::ISubDSchema *this)
{
  if (Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::ISubDSchema *)((char *)this + 296))
    && Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::ISubDSchema *)((char *)this + 344)))
  {
    return Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::ISubDSchema *)((char *)this + 248)) ^ 1;
  }
  else
  {
    return 2;
  }
}

void sub_20BE5B7AC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE5B79CLL);
}

void sub_20BE5B7E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unint64_t Alembic::AbcGeom::v12::ISubDSchema::getNumSamples(Alembic::AbcGeom::v12::ISubDSchema *this)
{
  Alembic::Abc::v12::ICompoundProperty *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t PropertyHeader;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  Alembic::Abc::v12::IArrayProperty *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  Alembic::Abc::v12::IScalarProperty *v18;
  unint64_t NumSamples;
  unint64_t *v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _DWORD v24[4];
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE v33[48];
  _BYTE v34[48];

  v2 = (Alembic::AbcGeom::v12::ISubDSchema *)((char *)this + 8);
  if (Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::AbcGeom::v12::ISubDSchema *)((char *)this + 8)))
  {
    v3 = 0;
    v4 = 0;
    while (1)
    {
      PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v2);
      v6 = *(_DWORD *)(PropertyHeader + 24);
      if (v6 == 1)
      {
        v15 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
        v22 = *((_QWORD *)this + 5);
        v23 = v15;
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }
        v29 = 0;
        v30 = 0;
        v27 = 0;
        v28 = 0;
        Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v33, &v22, &v29, &v27);
        v25 = 0;
        v26 = 0;
        v18 = (Alembic::Abc::v12::IScalarProperty *)Alembic::Abc::v12::IScalarProperty::IScalarProperty(v34, v33, PropertyHeader, &v25);
        NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(v18);
        if (v4 <= NumSamples)
          v4 = NumSamples;
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v34);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v33);
        v12 = v23;
        if (!v23)
          goto LABEL_24;
        v20 = (unint64_t *)&v23->__shared_owners_;
        do
          v14 = __ldaxr(v20);
        while (__stlxr(v14 - 1, v20));
      }
      else
      {
        if (v6 != 2)
          goto LABEL_24;
        v7 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
        v31 = *((_QWORD *)this + 5);
        v32 = v7;
        if (v7)
        {
          v8 = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
        }
        v29 = 0;
        v30 = 0;
        v27 = 0;
        v28 = 0;
        Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v33, &v31, &v29, &v27);
        v25 = 0;
        v26 = 0;
        v24[0] = 0;
        v24[2] = 0;
        v10 = (Alembic::Abc::v12::IArrayProperty *)Alembic::Abc::v12::IArrayProperty::IArrayProperty(v34, v33, PropertyHeader, &v25, v24);
        v11 = Alembic::Abc::v12::IArrayProperty::getNumSamples(v10);
        if (v4 <= v11)
          v4 = v11;
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v34);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v33);
        v12 = v32;
        if (!v32)
          goto LABEL_24;
        v13 = (unint64_t *)&v32->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
      }
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_24:
      if (++v3 >= (unint64_t)Alembic::Abc::v12::ICompoundProperty::getNumProperties(v2))
        return v4;
    }
  }
  return 0;
}

void sub_20BE5B9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(v21 - 96));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a21);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::ISubDSchema::get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)();
  _DWORD *v7;
  uint64_t (*v8)();
  _DWORD *v9;
  uint64_t (*v10)();
  _DWORD *v11;
  uint64_t (*v12)();
  uint64_t (*v13)();
  uint64_t (*v14)();
  uint64_t (*v15)();
  uint64_t (*v16)();
  uint64_t (*v17)();
  uint64_t (*v18)();
  uint64_t (*v19)();
  Alembic::Abc::v12::IArrayProperty *v20;

  sub_20BE1DB98(a1 + 248, a2, a3);
  sub_20BE1DC78(a1 + 296, a2 + 32, a3);
  sub_20BE1DC78(a1 + 344, a2 + 48, a3);
  if (*(char *)(a1 + 423) < 0)
  {
    if (*(_QWORD *)(a1 + 408))
      goto LABEL_3;
LABEL_5:
    if (*(_QWORD *)(a1 + 424))
      v6 = nullsub_4;
    else
      v6 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(a1 + 423))
    goto LABEL_5;
LABEL_3:
  v6 = 0;
LABEL_8:
  v7 = (_DWORD *)(a2 + 64);
  if (v6)
    Alembic::Abc::v12::IScalarProperty::get(a1 + 392, (uint64_t)v7, a3, 4);
  else
    *v7 = 0;
  if (*(char *)(a1 + 471) < 0)
  {
    if (*(_QWORD *)(a1 + 456))
      goto LABEL_13;
LABEL_15:
    if (*(_QWORD *)(a1 + 472))
      v8 = nullsub_4;
    else
      v8 = 0;
    goto LABEL_18;
  }
  if (!*(_BYTE *)(a1 + 471))
    goto LABEL_15;
LABEL_13:
  v8 = 0;
LABEL_18:
  v9 = (_DWORD *)(a2 + 68);
  if (v8)
    Alembic::Abc::v12::IScalarProperty::get(a1 + 440, (uint64_t)v9, a3, 4);
  else
    *v9 = 0;
  if (*(char *)(a1 + 519) < 0)
  {
    if (*(_QWORD *)(a1 + 504))
      goto LABEL_23;
LABEL_25:
    if (*(_QWORD *)(a1 + 520))
      v10 = nullsub_4;
    else
      v10 = 0;
    goto LABEL_28;
  }
  if (!*(_BYTE *)(a1 + 519))
    goto LABEL_25;
LABEL_23:
  v10 = 0;
LABEL_28:
  v11 = (_DWORD *)(a2 + 72);
  if (v10)
    Alembic::Abc::v12::IScalarProperty::get(a1 + 488, (uint64_t)v11, a3, 4);
  else
    *v11 = 0;
  Alembic::Abc::v12::IScalarProperty::get(a1 + 56, a2 + 200, a3, 48);
  if (*(char *)(a1 + 567) < 0)
  {
    if (*(_QWORD *)(a1 + 552))
      goto LABEL_33;
  }
  else if (*(_BYTE *)(a1 + 567))
  {
LABEL_33:
    v12 = 0;
    goto LABEL_38;
  }
  if (*(_QWORD *)(a1 + 568))
    v12 = nullsub_5;
  else
    v12 = 0;
LABEL_38:
  if (v12)
    sub_20BE1DC78(a1 + 536, a2 + 80, a3);
  if (*(char *)(a1 + 615) < 0)
  {
    if (*(_QWORD *)(a1 + 600))
      goto LABEL_42;
  }
  else if (*(_BYTE *)(a1 + 615))
  {
LABEL_42:
    v13 = 0;
    goto LABEL_47;
  }
  if (*(_QWORD *)(a1 + 616))
    v13 = nullsub_5;
  else
    v13 = 0;
LABEL_47:
  if (v13)
    sub_20BE1DC78(a1 + 584, a2 + 96, a3);
  if (*(char *)(a1 + 663) < 0)
  {
    if (*(_QWORD *)(a1 + 648))
      goto LABEL_51;
  }
  else if (*(_BYTE *)(a1 + 663))
  {
LABEL_51:
    v14 = 0;
    goto LABEL_56;
  }
  if (*(_QWORD *)(a1 + 664))
    v14 = nullsub_5;
  else
    v14 = 0;
LABEL_56:
  if (v14)
    sub_20BE1DD58(a1 + 632, a2 + 112, a3);
  if (*(char *)(a1 + 711) < 0)
  {
    if (*(_QWORD *)(a1 + 696))
      goto LABEL_60;
  }
  else if (*(_BYTE *)(a1 + 711))
  {
LABEL_60:
    v15 = 0;
    goto LABEL_65;
  }
  if (*(_QWORD *)(a1 + 712))
    v15 = nullsub_5;
  else
    v15 = 0;
LABEL_65:
  if (v15)
    sub_20BE1DC78(a1 + 680, a2 + 128, a3);
  if (*(char *)(a1 + 759) < 0)
  {
    if (*(_QWORD *)(a1 + 744))
      goto LABEL_69;
  }
  else if (*(_BYTE *)(a1 + 759))
  {
LABEL_69:
    v16 = 0;
    goto LABEL_74;
  }
  if (*(_QWORD *)(a1 + 760))
    v16 = nullsub_5;
  else
    v16 = 0;
LABEL_74:
  if (v16)
    sub_20BE1DD58(a1 + 728, a2 + 144, a3);
  if (*(char *)(a1 + 807) < 0)
  {
    if (*(_QWORD *)(a1 + 792))
      goto LABEL_78;
  }
  else if (*(_BYTE *)(a1 + 807))
  {
LABEL_78:
    v17 = 0;
    goto LABEL_83;
  }
  if (*(_QWORD *)(a1 + 808))
    v17 = nullsub_5;
  else
    v17 = 0;
LABEL_83:
  if (v17)
    sub_20BE1DC78(a1 + 776, a2 + 160, a3);
  if (*(char *)(a1 + 855) < 0)
  {
    if (*(_QWORD *)(a1 + 840))
      goto LABEL_87;
LABEL_89:
    if (*(_QWORD *)(a1 + 856))
      v18 = nullsub_4;
    else
      v18 = 0;
    goto LABEL_92;
  }
  if (!*(_BYTE *)(a1 + 855))
    goto LABEL_89;
LABEL_87:
  v18 = 0;
LABEL_92:
  if (v18)
    Alembic::Abc::v12::IScalarProperty::get(a1 + 824, a2 + 176, a3, 24);
  else
    MEMORY[0x212B929D0](a2 + 176, "catmull-clark");
  if (*(char *)(a1 + 1055) < 0)
  {
    if (*(_QWORD *)(a1 + 1040))
      goto LABEL_97;
  }
  else if (*(_BYTE *)(a1 + 1055))
  {
LABEL_97:
    v19 = 0;
    goto LABEL_102;
  }
  if (*(_QWORD *)(a1 + 1056))
    v19 = nullsub_5;
  else
    v19 = 0;
LABEL_102:
  if (v19)
  {
    v20 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 1024);
    if (Alembic::Abc::v12::IArrayProperty::getNumSamples(v20))
      sub_20BE1DF18((uint64_t)v20, a2 + 16, a3);
  }
}

void sub_20BE5BEBC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE5BEA8);
}

void sub_20BE5BEF0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::ISubDSchema::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  sub_20BDE881C((_QWORD *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  sub_20BDE881C((_QWORD *)(a1 + 88), (uint64_t *)(a2 + 88));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  sub_20BDE881C((_QWORD *)(a1 + 136), (uint64_t *)(a2 + 136));
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  sub_20BDE881C((_QWORD *)(a1 + 184), (uint64_t *)(a2 + 184));
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  sub_20BDE881C((_QWORD *)(a1 + 232), (uint64_t *)(a2 + 232));
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  sub_20BDE881C((_QWORD *)(a1 + 280), (uint64_t *)(a2 + 280));
  *(_DWORD *)(a1 + 1024) = *(_DWORD *)(a2 + 1024);
  std::string::operator=((std::string *)(a1 + 1032), (const std::string *)(a2 + 1032));
  sub_20BDE881C((_QWORD *)(a1 + 1056), (uint64_t *)(a2 + 1056));
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  sub_20BDE881C((_QWORD *)(a1 + 328), (uint64_t *)(a2 + 328));
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  sub_20BDE881C((_QWORD *)(a1 + 376), (uint64_t *)(a2 + 376));
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  sub_20BDE881C((_QWORD *)(a1 + 424), (uint64_t *)(a2 + 424));
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 440);
  std::string::operator=((std::string *)(a1 + 448), (const std::string *)(a2 + 448));
  sub_20BDE881C((_QWORD *)(a1 + 472), (uint64_t *)(a2 + 472));
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  std::string::operator=((std::string *)(a1 + 496), (const std::string *)(a2 + 496));
  sub_20BDE881C((_QWORD *)(a1 + 520), (uint64_t *)(a2 + 520));
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a2 + 536);
  std::string::operator=((std::string *)(a1 + 544), (const std::string *)(a2 + 544));
  sub_20BDE881C((_QWORD *)(a1 + 568), (uint64_t *)(a2 + 568));
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  std::string::operator=((std::string *)(a1 + 592), (const std::string *)(a2 + 592));
  sub_20BDE881C((_QWORD *)(a1 + 616), (uint64_t *)(a2 + 616));
  *(_DWORD *)(a1 + 632) = *(_DWORD *)(a2 + 632);
  std::string::operator=((std::string *)(a1 + 640), (const std::string *)(a2 + 640));
  sub_20BDE881C((_QWORD *)(a1 + 664), (uint64_t *)(a2 + 664));
  *(_DWORD *)(a1 + 680) = *(_DWORD *)(a2 + 680);
  std::string::operator=((std::string *)(a1 + 688), (const std::string *)(a2 + 688));
  sub_20BDE881C((_QWORD *)(a1 + 712), (uint64_t *)(a2 + 712));
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  std::string::operator=((std::string *)(a1 + 736), (const std::string *)(a2 + 736));
  sub_20BDE881C((_QWORD *)(a1 + 760), (uint64_t *)(a2 + 760));
  *(_DWORD *)(a1 + 776) = *(_DWORD *)(a2 + 776);
  std::string::operator=((std::string *)(a1 + 784), (const std::string *)(a2 + 784));
  sub_20BDE881C((_QWORD *)(a1 + 808), (uint64_t *)(a2 + 808));
  *(_DWORD *)(a1 + 824) = *(_DWORD *)(a2 + 824);
  std::string::operator=((std::string *)(a1 + 832), (const std::string *)(a2 + 832));
  sub_20BDE881C((_QWORD *)(a1 + 856), (uint64_t *)(a2 + 856));
  *(_DWORD *)(a1 + 872) = *(_DWORD *)(a2 + 872);
  std::string::operator=((std::string *)(a1 + 880), (const std::string *)(a2 + 880));
  sub_20BDE881C((_QWORD *)(a1 + 904), (uint64_t *)(a2 + 904));
  *(_DWORD *)(a1 + 920) = *(_DWORD *)(a2 + 920);
  std::string::operator=((std::string *)(a1 + 928), (const std::string *)(a2 + 928));
  sub_20BDE881C((_QWORD *)(a1 + 952), (uint64_t *)(a2 + 952));
  *(_DWORD *)(a1 + 968) = *(_DWORD *)(a2 + 968);
  std::string::operator=((std::string *)(a1 + 976), (const std::string *)(a2 + 976));
  sub_20BDE881C((_QWORD *)(a1 + 1000), (uint64_t *)(a2 + 1000));
  *(_BYTE *)(a1 + 1016) = *(_BYTE *)(a2 + 1016);
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  sub_20BDE881C((_QWORD *)(a1 + 424), (uint64_t *)(a2 + 424));
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1104));
  *(_BYTE *)(a1 + 1072) = 0;
  sub_20BE51038(a1 + 1080, *(_QWORD **)(a1 + 1088));
  *(_QWORD *)(a1 + 1080) = a1 + 1088;
  *(_QWORD *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1088) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1104));
  return a1;
}

void Alembic::AbcGeom::v12::ISubDSchema::init(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t PropertyHeader;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120;
  std::string v121;
  uint64_t v122[2];
  void *v123;
  std::string v124;
  uint64_t v125;
  int v126;
  std::string v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  uint64_t *v154;
  int v155;
  uint64_t *v156;
  int v157;
  void *__p[2];
  char v159;
  int v160;
  int v161;
  int v162;
  int v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  void *v166[2];
  char v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171[4];
  std::__shared_weak_count *v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  uint64_t v177;
  const char *v178;

  v6 = a1 + 8;
  v177 = a1 + 8;
  v178 = "ISubDSchema::init()";
  v8 = *(_QWORD *)(a1 + 40);
  v7 = *(std::__shared_weak_count **)(a1 + 48);
  v175 = v8;
  v176 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  *(_OWORD *)&v121.__r_.__value_.__l.__data_ = 0uLL;
  v120 = &v121;
  v168 = 0;
  v169 = 0;
  v170 = 2;
  sub_20BDEBF8C(v171, (const void ***)&v120);
  v171[3] = 0;
  v172 = 0;
  v173 = 0;
  v174 = 1;
  sub_20BDE9D48((uint64_t)&v120, v121.__r_.__value_.__l.__data_);
  sub_20BE02E30(a2, (uint64_t)&v170);
  sub_20BE02E30(a3, (uint64_t)&v170);
  v164 = v8;
  v165 = v7;
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v162 = 0;
  v163 = 0;
  v160 = 0;
  v161 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v166, &v164, &v162, &v160);
  sub_20BDDC0E4(__p, "P");
  LODWORD(v156) = 5;
  v157 = 1;
  LODWORD(v154) = 1;
  v155 = v170;
  sub_20BE1DFF8((uint64_t)&v120, (int *)v166, (uint64_t)__p, &v156, &v154);
  *(_DWORD *)(a1 + 248) = (_DWORD)v120;
  std::string::operator=((std::string *)(a1 + 256), &v121);
  sub_20BDE881C((_QWORD *)(a1 + 280), v122);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v120);
  if (v159 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v166);
  v13 = v165;
  if (v165)
  {
    v14 = (unint64_t *)&v165->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v152 = v175;
  v153 = v176;
  if (v176)
  {
    v16 = (unint64_t *)&v176->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v162 = 0;
  v163 = 0;
  v160 = 0;
  v161 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v166, &v152, &v162, &v160);
  sub_20BDDC0E4(__p, ".faceIndices");
  sub_20BE1E6DC((uint64_t)&v120, (int *)v166, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 296) = (_DWORD)v120;
  std::string::operator=((std::string *)(a1 + 304), &v121);
  sub_20BDE881C((_QWORD *)(a1 + 328), v122);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v120);
  if (v159 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v166);
  v18 = v153;
  if (v153)
  {
    v19 = (unint64_t *)&v153->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v150 = v175;
  v151 = v176;
  if (v176)
  {
    v21 = (unint64_t *)&v176->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v162 = 0;
  v163 = 0;
  v160 = 0;
  v161 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v166, &v150, &v162, &v160);
  sub_20BDDC0E4(__p, ".faceCounts");
  sub_20BE1E6DC((uint64_t)&v120, (int *)v166, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 344) = (_DWORD)v120;
  std::string::operator=((std::string *)(a1 + 352), &v121);
  sub_20BDE881C((_QWORD *)(a1 + 376), v122);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v120);
  if (v159 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v166);
  v23 = v151;
  if (v151)
  {
    v24 = (unint64_t *)&v151->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  sub_20BDDC0E4(&v120, ".faceVaryingInterpolateBoundary");
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v27 = PropertyHeader;
  if (v121.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v120);
    if (!v27)
      goto LABEL_48;
  }
  else if (!PropertyHeader)
  {
    goto LABEL_48;
  }
  v148 = v175;
  v149 = v176;
  if (v176)
  {
    v28 = (unint64_t *)&v176->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v162 = 0;
  v163 = 0;
  v160 = 0;
  v161 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v166, &v148, &v162, &v160);
  sub_20BDDC0E4(__p, ".faceVaryingInterpolateBoundary");
  sub_20BE43410((uint64_t)&v120, (int *)v166, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 392) = (_DWORD)v120;
  std::string::operator=((std::string *)(a1 + 400), &v121);
  sub_20BDE881C((_QWORD *)(a1 + 424), v122);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v120);
  if (v159 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v166);
  v30 = v149;
  if (v149)
  {
    v31 = (unint64_t *)&v149->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
LABEL_48:
  sub_20BDDC0E4(&v120, ".faceVaryingPropagateCorners");
  v33 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v34 = v33;
  if (v121.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v120);
    if (!v34)
      goto LABEL_62;
  }
  else if (!v33)
  {
    goto LABEL_62;
  }
  v146 = v175;
  v147 = v176;
  if (v176)
  {
    v35 = (unint64_t *)&v176->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v162 = 0;
  v163 = 0;
  v160 = 0;
  v161 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v166, &v146, &v162, &v160);
  sub_20BDDC0E4(__p, ".faceVaryingPropagateCorners");
  sub_20BE43410((uint64_t)&v120, (int *)v166, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 440) = (_DWORD)v120;
  std::string::operator=((std::string *)(a1 + 448), &v121);
  sub_20BDE881C((_QWORD *)(a1 + 472), v122);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v120);
  if (v159 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v166);
  v37 = v147;
  if (v147)
  {
    v38 = (unint64_t *)&v147->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_62:
  sub_20BDDC0E4(&v120, ".interpolateBoundary");
  v40 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v41 = v40;
  if (v121.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v120);
    if (!v41)
      goto LABEL_76;
  }
  else if (!v40)
  {
    goto LABEL_76;
  }
  v144 = v175;
  v145 = v176;
  if (v176)
  {
    v42 = (unint64_t *)&v176->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v162 = 0;
  v163 = 0;
  v160 = 0;
  v161 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v166, &v144, &v162, &v160);
  sub_20BDDC0E4(__p, ".interpolateBoundary");
  sub_20BE43410((uint64_t)&v120, (int *)v166, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 488) = (_DWORD)v120;
  std::string::operator=((std::string *)(a1 + 496), &v121);
  sub_20BDE881C((_QWORD *)(a1 + 520), v122);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v120);
  if (v159 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v166);
  v44 = v145;
  if (v145)
  {
    v45 = (unint64_t *)&v145->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
LABEL_76:
  sub_20BDDC0E4(&v120, ".creaseIndices");
  v47 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v48 = v47;
  if (v121.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v120);
    if (!v48)
      goto LABEL_90;
  }
  else if (!v47)
  {
    goto LABEL_90;
  }
  v142 = v175;
  v143 = v176;
  if (v176)
  {
    v49 = (unint64_t *)&v176->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v162 = 0;
  v163 = 0;
  v160 = 0;
  v161 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v166, &v142, &v162, &v160);
  sub_20BDDC0E4(__p, ".creaseIndices");
  sub_20BE1E6DC((uint64_t)&v120, (int *)v166, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 536) = (_DWORD)v120;
  std::string::operator=((std::string *)(a1 + 544), &v121);
  sub_20BDE881C((_QWORD *)(a1 + 568), v122);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v120);
  if (v159 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v166);
  v51 = v143;
  if (v143)
  {
    v52 = (unint64_t *)&v143->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
LABEL_90:
  sub_20BDDC0E4(&v120, ".creaseLengths");
  v54 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v55 = v54;
  if (v121.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v120);
    if (!v55)
      goto LABEL_104;
  }
  else if (!v54)
  {
    goto LABEL_104;
  }
  v140 = v175;
  v141 = v176;
  if (v176)
  {
    v56 = (unint64_t *)&v176->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v162 = 0;
  v163 = 0;
  v160 = 0;
  v161 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v166, &v140, &v162, &v160);
  sub_20BDDC0E4(__p, ".creaseLengths");
  sub_20BE1E6DC((uint64_t)&v120, (int *)v166, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 584) = (_DWORD)v120;
  std::string::operator=((std::string *)(a1 + 592), &v121);
  sub_20BDE881C((_QWORD *)(a1 + 616), v122);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v120);
  if (v159 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v166);
  v58 = v141;
  if (v141)
  {
    v59 = (unint64_t *)&v141->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
LABEL_104:
  sub_20BDDC0E4(&v120, ".creaseSharpnesses");
  v61 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v62 = v61;
  if (v121.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v120);
    if (!v62)
      goto LABEL_118;
  }
  else if (!v61)
  {
    goto LABEL_118;
  }
  v138 = v175;
  v139 = v176;
  if (v176)
  {
    v63 = (unint64_t *)&v176->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  v162 = 0;
  v163 = 0;
  v160 = 0;
  v161 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v166, &v138, &v162, &v160);
  sub_20BDDC0E4(__p, ".creaseSharpnesses");
  sub_20BE1ED68((uint64_t)&v120, (int *)v166, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 632) = (_DWORD)v120;
  std::string::operator=((std::string *)(a1 + 640), &v121);
  sub_20BDE881C((_QWORD *)(a1 + 664), v122);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v120);
  if (v159 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v166);
  v65 = v139;
  if (v139)
  {
    v66 = (unint64_t *)&v139->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
LABEL_118:
  sub_20BDDC0E4(&v120, ".cornerIndices");
  v68 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v69 = v68;
  if (v121.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v120);
    if (!v69)
      goto LABEL_132;
  }
  else if (!v68)
  {
    goto LABEL_132;
  }
  v136 = v175;
  v137 = v176;
  if (v176)
  {
    v70 = (unint64_t *)&v176->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v162 = 0;
  v163 = 0;
  v160 = 0;
  v161 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v166, &v136, &v162, &v160);
  sub_20BDDC0E4(__p, ".cornerIndices");
  sub_20BE1E6DC((uint64_t)&v120, (int *)v166, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 680) = (_DWORD)v120;
  std::string::operator=((std::string *)(a1 + 688), &v121);
  sub_20BDE881C((_QWORD *)(a1 + 712), v122);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v120);
  if (v159 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v166);
  v72 = v137;
  if (v137)
  {
    v73 = (unint64_t *)&v137->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
LABEL_132:
  sub_20BDDC0E4(&v120, ".cornerSharpnesses");
  v75 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v76 = v75;
  if (v121.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v120);
    if (!v76)
      goto LABEL_146;
  }
  else if (!v75)
  {
    goto LABEL_146;
  }
  v134 = v175;
  v135 = v176;
  if (v176)
  {
    v77 = (unint64_t *)&v176->__shared_owners_;
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  v162 = 0;
  v163 = 0;
  v160 = 0;
  v161 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v166, &v134, &v162, &v160);
  sub_20BDDC0E4(__p, ".cornerSharpnesses");
  sub_20BE1ED68((uint64_t)&v120, (int *)v166, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 728) = (_DWORD)v120;
  std::string::operator=((std::string *)(a1 + 736), &v121);
  sub_20BDE881C((_QWORD *)(a1 + 760), v122);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v120);
  if (v159 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v166);
  v79 = v135;
  if (v135)
  {
    v80 = (unint64_t *)&v135->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
LABEL_146:
  sub_20BDDC0E4(&v120, ".holes");
  v82 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v83 = v82;
  if (v121.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v120);
    if (!v83)
      goto LABEL_160;
  }
  else if (!v82)
  {
    goto LABEL_160;
  }
  v132 = v175;
  v133 = v176;
  if (v176)
  {
    v84 = (unint64_t *)&v176->__shared_owners_;
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 1, v84));
  }
  v162 = 0;
  v163 = 0;
  v160 = 0;
  v161 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v166, &v132, &v162, &v160);
  sub_20BDDC0E4(__p, ".holes");
  sub_20BE1E6DC((uint64_t)&v120, (int *)v166, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 776) = (_DWORD)v120;
  std::string::operator=((std::string *)(a1 + 784), &v121);
  sub_20BDE881C((_QWORD *)(a1 + 808), v122);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v120);
  if (v159 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v166);
  v86 = v133;
  if (v133)
  {
    v87 = (unint64_t *)&v133->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
LABEL_160:
  sub_20BDDC0E4(&v120, ".scheme");
  v89 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v90 = v89;
  if (v121.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v120);
    if (!v90)
      goto LABEL_174;
  }
  else if (!v89)
  {
    goto LABEL_174;
  }
  v130 = v175;
  v131 = v176;
  if (v176)
  {
    v91 = (unint64_t *)&v176->__shared_owners_;
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  v162 = 0;
  v163 = 0;
  v160 = 0;
  v161 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v166, &v130, &v162, &v160);
  sub_20BDDC0E4(__p, ".scheme");
  sub_20BE07490((uint64_t)&v120, (int *)v166, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 824) = (_DWORD)v120;
  std::string::operator=((std::string *)(a1 + 832), &v121);
  sub_20BDE881C((_QWORD *)(a1 + 856), v122);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v120);
  if (v159 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v166);
  v93 = v131;
  if (v131)
  {
    v94 = (unint64_t *)&v131->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
LABEL_174:
  sub_20BDDC0E4(&v120, "uv");
  v96 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v97 = v96;
  if (v121.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v120);
    if (!v97)
      goto LABEL_188;
  }
  else if (!v96)
  {
    goto LABEL_188;
  }
  v118 = v175;
  v119 = v176;
  if (v176)
  {
    v98 = (unint64_t *)&v176->__shared_owners_;
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
  }
  sub_20BDDC0E4(v166, "uv");
  sub_20BE1F3F4((uint64_t)&v120, &v118, (uint64_t)v166, a2, a3);
  *(_DWORD *)(a1 + 872) = (_DWORD)v120;
  std::string::operator=((std::string *)(a1 + 880), &v121);
  sub_20BDE881C((_QWORD *)(a1 + 904), v122);
  *(_DWORD *)(a1 + 920) = (_DWORD)v123;
  std::string::operator=((std::string *)(a1 + 928), &v124);
  sub_20BDE881C((_QWORD *)(a1 + 952), &v125);
  *(_DWORD *)(a1 + 968) = v126;
  std::string::operator=((std::string *)(a1 + 976), &v127);
  sub_20BDE881C((_QWORD *)(a1 + 1000), &v128);
  *(_BYTE *)(a1 + 1016) = v129;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v126);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v123);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v120);
  if (v167 < 0)
    operator delete(v166[0]);
  v100 = v119;
  if (v119)
  {
    v101 = (unint64_t *)&v119->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
LABEL_188:
  sub_20BDDC0E4(&v120, ".velocities");
  v103 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v104 = v103;
  if (v121.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v120);
    if (!v104)
      goto LABEL_202;
  }
  else if (!v103)
  {
    goto LABEL_202;
  }
  v116 = v175;
  v117 = v176;
  if (v176)
  {
    v105 = (unint64_t *)&v176->__shared_owners_;
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
  }
  v162 = 0;
  v163 = 0;
  v160 = 0;
  v161 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v166, &v116, &v162, &v160);
  sub_20BDDC0E4(__p, ".velocities");
  sub_20BE220BC((uint64_t)&v120, (int *)v166, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 1024) = (_DWORD)v120;
  std::string::operator=((std::string *)(a1 + 1032), &v121);
  sub_20BDE881C((_QWORD *)(a1 + 1056), v122);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v120);
  if (v159 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v166);
  v107 = v117;
  if (v117)
  {
    v108 = (unint64_t *)&v117->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
LABEL_202:
  *(_BYTE *)(a1 + 1072) = 0;
  v110 = v172;
  if (v172)
  {
    v111 = (unint64_t *)&v172->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  sub_20BDE9D48((uint64_t)v171, (_QWORD *)v171[1]);
  v113 = v176;
  if (v176)
  {
    v114 = (unint64_t *)&v176->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
}

void sub_20BE5D4C4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  uint64_t v65;
  uint64_t v66;
  void *v69;
  void (*v70)(uint64_t);
  uint64_t v71;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&a13);
  if (a65 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v66 - 224));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  sub_20BE02EB0(v66 - 160);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v66 - 96));
  v69 = __cxa_begin_catch(a1);
  v70 = *(void (**)(uint64_t))(*(_QWORD *)v65 + 16);
  if (a2 == 2)
  {
    v71 = (uint64_t)v69;
    v70(v65);
    sub_20BE02570(v66 - 80, v71);
  }
  else
  {
    v70(v65);
    sub_20BE02504(v66 - 80, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE5D4A8);
}

void sub_20BE5DAA0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::ISubDSchema::getFaceSetNames(uint64_t a1, uint64_t *a2)
{
  pthread_mutex_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  __int128 *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  v4 = (pthread_mutex_t *)(a1 + 1104);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1104));
  Alembic::AbcGeom::v12::ISubDSchema::loadFaceSetNames((uint64_t **)a1);
  v5 = *(_QWORD **)(a1 + 1080);
  v6 = (_QWORD *)(a1 + 1088);
  if (v5 != (_QWORD *)(a1 + 1088))
  {
    v7 = a2[1];
    do
    {
      v8 = (__int128 *)(v5 + 4);
      if (v7 >= a2[2])
      {
        v7 = sub_20BE4EE50(a2, v8);
      }
      else
      {
        sub_20BE4EDF4(a2, v8);
        v7 += 24;
      }
      a2[1] = v7;
      v9 = (_QWORD *)v5[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v5[2];
          v11 = *v10 == (_QWORD)v5;
          v5 = v10;
        }
        while (!v11);
      }
      v5 = v10;
    }
    while (v10 != v6);
  }
  return pthread_mutex_unlock(v4);
}

void sub_20BE5DBA4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;
  void *v12;

  pthread_mutex_unlock(v9);
  v12 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v12);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE5DB88);
}

void sub_20BE5DBF8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::ISubDSchema::loadFaceSetNames(uint64_t **this)
{
  int *v2;
  uint64_t NumChildren;
  uint64_t i;
  __int128 *ChildHeader;
  uint64_t *v6;
  uint64_t (**v7)();
  int v8;
  std::string v9;
  uint64_t v10;
  uint64_t v11;
  std::string v12;
  uint64_t (**v13)();
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _BYTE v20[96];
  int *v21;
  const char *v22;
  __int128 *v23;

  v2 = (int *)(this + 1);
  v21 = v2;
  v22 = "ISubDSchema::loadFaceSetNames()";
  if (!*((_BYTE *)this + 1072))
  {
    sub_20BE50098(v2, (uint64_t)v20);
    NumChildren = Alembic::Abc::v12::IObject::getNumChildren((Alembic::Abc::v12::IObject *)v20);
    if (NumChildren)
    {
      for (i = 0; i != NumChildren; ++i)
      {
        ChildHeader = (__int128 *)Alembic::Abc::v12::IObject::getChildHeader((Alembic::Abc::v12::IObject *)v20);
        if (sub_20BE51118((uint64_t)(ChildHeader + 3), 0))
        {
          sub_20BE51728((uint64_t)&v7);
          v23 = ChildHeader;
          v6 = sub_20BE51564(this + 135, (const void **)ChildHeader, (uint64_t)&unk_20CA5278C, &v23);
          *((_DWORD *)v6 + 16) = v8;
          std::string::operator=((std::string *)v6 + 3, &v9);
          sub_20BDE881C(v6 + 12, &v10);
          sub_20BDE881C(v6 + 14, &v11);
          std::string::operator=((std::string *)(v6 + 16), &v12);
          sub_20BE5080C((uint64_t)(v6 + 19), (uint64_t)&v13);
          v7 = off_24C5198D0;
          v13 = (uint64_t (**)())&unk_24C519908;
          Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v19);
          v13 = off_24C519990;
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v18);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v17);
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v16);
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v15);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v14);
          Alembic::Abc::v12::IObject::~IObject((void **)&v7);
        }
      }
    }
    *((_BYTE *)this + 1072) = 1;
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v20);
  }
}

void sub_20BE5DDEC(void *a1, int a2)
{
  uint64_t v2;
  void *v5;

  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)(v2 - 216));
  v5 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v2 - 120, (uint64_t)v5);
  else
    sub_20BE02504(v2 - 120, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE5DDCCLL);
}

void sub_20BE5DE58(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL Alembic::AbcGeom::v12::ISubDSchema::hasFaceSet(uint64_t a1, const void **a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;

  v4 = (pthread_mutex_t *)(a1 + 1104);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1104));
  if (!*(_BYTE *)(a1 + 1072))
    Alembic::AbcGeom::v12::ISubDSchema::loadFaceSetNames((uint64_t **)a1);
  v5 = sub_20BDEEBA4(a1 + 1080, a2);
  pthread_mutex_unlock(v4);
  return a1 + 1088 != v5;
}

void sub_20BE5DEF8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;
  void *v12;

  pthread_mutex_unlock(v9);
  v12 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v12);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE5DEE4);
}

void sub_20BE5DF58(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::ISubDSchema::getFaceSet@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  pthread_mutex_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *exception;
  _QWORD *v13;
  uint64_t *v14;
  int v15;
  uint64_t (**v16)();
  int v17;
  std::string v18;
  uint64_t v19;
  uint64_t v20;
  std::string v21;
  uint64_t (**v22)();
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD v29[12];
  __int128 v30;
  char v31;
  uint64_t v32;
  const char *v33;
  const void **v34;

  v6 = (int *)(a1 + 8);
  v32 = a1 + 8;
  v33 = "ISubDSchema::getFaceSet()";
  v7 = (pthread_mutex_t *)(a1 + 1104);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1104));
  if (!*(_BYTE *)(a1 + 1072))
    Alembic::AbcGeom::v12::ISubDSchema::loadFaceSetNames((uint64_t **)a1);
  if (a1 + 1088 == sub_20BDEEBA4(a1 + 1080, a2))
  {
    sub_20BDDBD68((uint64_t)&v16);
    sub_20BDDC1C8(&v18, (uint64_t)"The requested FaceSet name can't be found in SubD.", 50);
    std::stringbuf::str();
    sub_20BDDBF20(v29, &v30);
    if (v31 < 0)
      operator delete((void *)v30);
    exception = __cxa_allocate_exception(0x20uLL);
    v13 = sub_20BDDC09C(exception, (uint64_t)v29);
    __cxa_throw(v13, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v16 = (uint64_t (**)())a2;
  v8 = sub_20BE51564((uint64_t **)(a1 + 1080), a2, (uint64_t)&unk_20CA5278C, (__int128 **)&v16);
  if (!sub_20BE51910((uint64_t)(v8 + 7)))
  {
    sub_20BE50098(v6, (uint64_t)v29);
    LODWORD(v30) = 0;
    DWORD2(v30) = 0;
    LODWORD(v14) = 0;
    v15 = 0;
    sub_20BE51940((uint64_t)&v16, (uint64_t)v29, (uint64_t)a2, (uint64_t **)&v30, &v14);
    v34 = a2;
    v9 = sub_20BE51564((uint64_t **)(a1 + 1080), a2, (uint64_t)&unk_20CA5278C, (__int128 **)&v34);
    *((_DWORD *)v9 + 16) = v17;
    std::string::operator=((std::string *)v9 + 3, &v18);
    sub_20BDE881C(v9 + 12, &v19);
    sub_20BDE881C(v9 + 14, &v20);
    std::string::operator=((std::string *)(v9 + 16), &v21);
    sub_20BE5080C((uint64_t)(v9 + 19), (uint64_t)&v22);
    v16 = off_24C5198D0;
    v22 = (uint64_t (**)())&unk_24C519908;
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v28);
    v22 = off_24C519990;
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v27);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v26);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v25);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v24);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v23);
    Alembic::Abc::v12::IObject::~IObject((void **)&v16);
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v29);
  }
  v16 = (uint64_t (**)())a2;
  v10 = sub_20BE51564((uint64_t **)(a1 + 1080), a2, (uint64_t)&unk_20CA5278C, (__int128 **)&v16);
  sub_20BE50CC0(a3, (uint64_t)(v10 + 7));
  return pthread_mutex_unlock(v7);
}

void sub_20BE5E1E4(void *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  void *v9;
  va_list va;

  va_start(va, a4);
  sub_20BDDC194((std::exception *)(v6 - 216));
  sub_20BDDBE98((uint64_t)va);
  pthread_mutex_unlock(v5);
  v9 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v6 - 96, (uint64_t)v9);
  else
    sub_20BE02504(v6 - 96, 0);
  __cxa_end_catch();
  sub_20BE51728(v4);
  JUMPOUT(0x20BE5E154);
}

void sub_20BE5E2A0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::CreateVisibilityProperty(Alembic::Abc::v12::OObject *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  Alembic::Abc::v12::OObject *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[48];
  void *v12;
  void *v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;

  LODWORD(v12) = 2;
  v6 = sub_20BDDC0E4(v13, "");
  v15 = 0;
  v16 = 0;
  if (*a2)
  {
    Alembic::Abc::v12::OObject::getArchive(a1, (uint64_t)v11);
    v7 = (Alembic::Abc::v12::OObject *)Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v11);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v11);
    Alembic::AbcGeom::v12::CreateVisibilityProperty(a1, v7, a3);
  }
  else
  {
    *(_DWORD *)a3 = (_DWORD)v12;
    if (v14 < 0)
    {
      sub_20BDDBFAC((_BYTE *)(a3 + 8), v13[0], (unint64_t)v13[1]);
      v8 = v16;
      *(_QWORD *)(a3 + 32) = v15;
      *(_QWORD *)(a3 + 40) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
    }
    else
    {
      *(_OWORD *)(a3 + 8) = *(_OWORD *)v6;
      *(_QWORD *)(a3 + 24) = v6[2];
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
    }
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v12);
}

void sub_20BE5E3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)va);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::CreateVisibilityProperty(Alembic::AbcGeom::v12 *this@<X0>, Alembic::Abc::v12::OObject *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  int v10;
  void *__p[2];
  char v12;
  int v13[12];

  v3 = (int)a2;
  Alembic::Abc::v12::OObject::getProperties(this, (uint64_t)v13);
  sub_20BDDC0E4(__p, "visible");
  LODWORD(v9) = 2;
  v10 = v3;
  LODWORD(v7) = 0;
  v8 = 0;
  LODWORD(v5) = 0;
  v6 = 0;
  sub_20BE5E9F4(a3, v13, (uint64_t)__p, &v9, &v7, &v5);
  if (v12 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v13);
}

void sub_20BE5E474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v21 - 64));
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::GetVisibilityProperty(Alembic::AbcGeom::v12 *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t PropertyHeader;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  int v9;
  void *__p[2];
  char v11;
  int v12[12];

  Alembic::Abc::v12::IObject::getProperties(this, (uint64_t)v12);
  sub_20BDDC0E4(__p, "visible");
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v12);
  v5 = PropertyHeader;
  if ((v11 & 0x80000000) == 0)
  {
    if (PropertyHeader)
      goto LABEL_3;
LABEL_6:
    *(_DWORD *)a2 = 2;
    sub_20BDDC0E4((_QWORD *)(a2 + 8), "");
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    goto LABEL_7;
  }
  operator delete(__p[0]);
  if (!v5)
    goto LABEL_6;
LABEL_3:
  sub_20BDDC0E4(__p, "visible");
  LODWORD(v8) = 0;
  v9 = 0;
  LODWORD(v6) = 0;
  v7 = 0;
  sub_20BE5EF84(a2, v12, (uint64_t)__p, &v8, &v6);
  if (v11 < 0)
    operator delete(__p[0]);
LABEL_7:
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v12);
}

void sub_20BE5E574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a20);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::GetVisibility(Alembic::AbcGeom::v12 *a1, uint64_t a2)
{
  uint64_t v4;
  void *v6;
  std::string v7;
  uint64_t v8;
  void *v9;
  std::string v10;
  _QWORD v11[2];

  LODWORD(v9) = 2;
  sub_20BDDC0E4(&v10, "");
  v11[0] = 0;
  v11[1] = 0;
  Alembic::AbcGeom::v12::GetVisibilityProperty(a1, (uint64_t)&v6);
  LODWORD(v9) = (_DWORD)v6;
  std::string::operator=(&v10, &v7);
  sub_20BDE881C(v11, &v8);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v6);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v10.__r_.__value_.__l.__size_)
      goto LABEL_5;
LABEL_7:
    v4 = 0xFFFFFFFFLL;
    goto LABEL_8;
  }
  if (*((_BYTE *)&v10.__r_.__value_.__s + 23))
    goto LABEL_7;
LABEL_5:
  if (!v11[0])
    goto LABEL_7;
  LOBYTE(v6) = 0;
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)&v9, (uint64_t)&v6, a2, 1);
  v4 = (char)v6;
LABEL_8:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v9);
  return v4;
}

void sub_20BE5E694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)va);
  _Unwind_Resume(a1);
}

BOOL Alembic::AbcGeom::v12::IsAncestorInvisible(Alembic::AbcGeom::v12 *this, uint64_t a2)
{
  uint64_t (*v3)();
  int v4;
  uint64_t (*v5)();
  _BOOL8 v6;
  _QWORD *exception;
  _QWORD *v9;
  void *v11;
  std::string v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string v16;
  __int128 __p;
  uint64_t v18;
  char v19;
  uint64_t v20;
  std::string v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  std::string v26[9];

  if (*((char *)this + 39) < 0)
  {
    if (*((_QWORD *)this + 3))
      goto LABEL_34;
  }
  else if (*((_BYTE *)this + 39))
  {
LABEL_34:
    sub_20BDDBD68((uint64_t)&v21);
    sub_20BDDC1C8(&v21.__r_.__value_.__r.__words[2], (uint64_t)"IsAncestorInvisible (): object passed in isn't valid.", 53);
    std::stringbuf::str();
    sub_20BDDBF20(&v11, &__p);
    if (SHIBYTE(v18) < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    v9 = sub_20BDDC09C(exception, (uint64_t)&v11);
    __cxa_throw(v9, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  if (!*((_QWORD *)this + 5))
    goto LABEL_34;
  Alembic::AbcGeom::v12::GetVisibilityProperty(this, (uint64_t)&__p);
  if (v19 < 0)
  {
    if (v18)
      goto LABEL_8;
LABEL_10:
    v3 = nullsub_4;
    if (!v20)
      v3 = 0;
    goto LABEL_12;
  }
  if (!v19)
    goto LABEL_10;
LABEL_8:
  v3 = 0;
LABEL_12:
  if (v3)
  {
    v21.__r_.__value_.__s.__data_[0] = 0;
    Alembic::Abc::v12::IScalarProperty::get((uint64_t)&__p, (uint64_t)&v21, a2, 1);
    v4 = v21.__r_.__value_.__s.__data_[0];
  }
  else
  {
    v4 = -1;
  }
  sub_20BE04EB0((uint64_t)&v21, (uint64_t)this);
  while (1)
  {
    if (v4 != -1)
    {
      v6 = v4 == 0;
      goto LABEL_33;
    }
    Alembic::Abc::v12::IObject::getParent(&v21, (uint64_t)&v11);
    LODWORD(v21.__r_.__value_.__r.__words[1]) = v12.__r_.__value_.__l.__data_;
    std::string::operator=((std::string *)&v21.__r_.__value_.__r.__words[2], (const std::string *)&v12.__r_.__value_.__r.__words[1]);
    sub_20BDE881C(&v24, &v14);
    sub_20BDE881C(&v25, &v15);
    std::string::operator=(v26, &v16);
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v11);
    if (v23 < 0)
    {
      if (v22)
        break;
    }
    else if (v23)
    {
      break;
    }
    if (!v24)
      break;
    Alembic::AbcGeom::v12::GetVisibilityProperty((Alembic::AbcGeom::v12 *)&v21, (uint64_t)&v11);
    LODWORD(__p) = (_DWORD)v11;
    std::string::operator=((std::string *)((char *)&__p + 8), &v12);
    sub_20BDE881C(&v20, &v13);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v11);
    if (v19 < 0)
    {
      v4 = -1;
      if (!v18)
        goto LABEL_26;
    }
    else
    {
      v4 = -1;
      if (!v19)
      {
LABEL_26:
        v5 = nullsub_4;
        if (!v20)
          v5 = 0;
        if (v5 && v20)
        {
          LOBYTE(v11) = 0;
          Alembic::Abc::v12::IScalarProperty::get((uint64_t)&__p, (uint64_t)&v11, a2, 1);
          v4 = (char)v11;
        }
      }
    }
  }
  v6 = 0;
LABEL_33:
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v21);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)&__p);
  return v6;
}

void sub_20BE5E980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20BDDC194(&a13);
  sub_20BDDBE98((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE5E9F4(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v22 = *((_QWORD *)a2 + 4);
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = *a2;
  LODWORD(v20) = 1;
  v21 = v15;
  sub_20BE5EAFC((int *)a1, &v22, a3, &v20, a4, a5, a6);
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return a1;
}

void sub_20BE5EAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v3;
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  _Unwind_Resume(a1);
}

void sub_20BE5EAFC(int *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *exception;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  const void **v42;
  _QWORD *v43;
  _QWORD v44[37];
  int v45;
  const void **v46[3];
  uint64_t v47;
  std::__shared_weak_count *v48;
  unsigned int v49;
  uint64_t v50;

  v43 = 0;
  v44[0] = 0;
  v42 = (const void **)&v43;
  v44[35] = 0;
  v44[36] = 0;
  v45 = 2;
  sub_20BDEBF8C((uint64_t *)v46, &v42);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  sub_20BDE9D48((uint64_t)&v42, v43);
  sub_20BE02E30(a4, (uint64_t)&v45);
  sub_20BE02E30(a5, (uint64_t)&v45);
  sub_20BE02E30(a6, (uint64_t)&v45);
  sub_20BE02E30(a7, (uint64_t)&v45);
  *a1 = v45;
  v44[33] = a1;
  v44[34] = "OTypedScalarProperty::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v42);
    sub_20BDDC1C8(v44, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_20BDDBF20(&v40, (__int128 *)__p);
    if (v39 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v35 = sub_20BDDC09C(exception, (uint64_t)&v40);
    __cxa_throw(v35, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v42, v46);
  v14 = v47;
  v40 = v47;
  v41 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = *a2;
  if (v14)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v17 + 24))(&v36);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v36 + 24))(__p);
    v18 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)__p[0] + 48))(__p[0], v14);
    v19 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v20 = (unint64_t *)((char *)__p[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v37;
    if (v37)
    {
      v23 = (unint64_t *)&v37->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = *a2;
  }
  else
  {
    v18 = v49;
  }
  v36 = 0x100000002;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const void ***, uint64_t *, uint64_t))(*(_QWORD *)v17 + 96))(__p, v17, a3, &v42, &v36, v18);
  sub_20BDE82DC((uint64_t)(a1 + 8), (__int128 *)__p);
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v26 = (unint64_t *)((char *)__p[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_20BDE9D48((uint64_t)&v42, v43);
  v31 = v48;
  if (v48)
  {
    v32 = (unint64_t *)&v48->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  sub_20BDE9D48((uint64_t)v46, v46[1]);
}

void sub_20BE5EE4C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  void *v11;
  std::exception v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  v11 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v7 + 32));
  MEMORY[0x212B929D0](v7 + 8, "");
  if (a2 == 2)
    sub_20BE02570(v8 - 176, (uint64_t)v11);
  else
    sub_20BE02504(v8 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE5ED74);
}

void sub_20BE5EF30(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE5EF84(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void **v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *exception;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50[2];
  char v51;
  void *__p[2];
  unsigned __int8 v53;
  __int128 v54;
  _QWORD v55[34];
  std::__shared_weak_count *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62[4];
  std::__shared_weak_count *v63;
  int v64;
  uint64_t v65;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *a2;
  *((_QWORD *)&v54 + 1) = 0;
  v55[0] = 0;
  *(_QWORD *)&v54 = (char *)&v54 + 8;
  v59 = 0;
  v60 = 0;
  v61 = v10;
  sub_20BDEBF8C(v62, (const void ***)&v54);
  v62[3] = 0;
  v63 = 0;
  v64 = 0;
  v65 = 1;
  sub_20BDE9D48((uint64_t)&v54, *((_QWORD **)&v54 + 1));
  sub_20BE02E30(a4, (uint64_t)&v61);
  sub_20BE02E30(a5, (uint64_t)&v61);
  *(_DWORD *)a1 = v61;
  v57 = a1;
  v58 = "ITypedScalarProperty::ITypedScalarProperty()";
  v12 = *((_QWORD *)a2 + 4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v55[33] = v12;
  v56 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v40 = sub_20BDDC1C8(v55, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v40, (uint64_t)"ITypedScalarProperty ctor", 25);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v42 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v42, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  v16 = v15;
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v43 = sub_20BDDC1C8(v55, (uint64_t)"Nonexistent scalar property: ", 29);
    v44 = *(char *)(a3 + 23);
    if (v44 >= 0)
      v45 = a3;
    else
      v45 = *(_QWORD *)a3;
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(a3 + 23);
    else
      v46 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v43, v45, v46);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v47 = __cxa_allocate_exception(0x20uLL);
    v48 = sub_20BDDC09C(v47, (uint64_t)__p);
    __cxa_throw(v48, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v18 = *(_DWORD *)(v15 + 56) == 2 && *(_BYTE *)(v15 + 60) == 1 && *(_DWORD *)(v15 + 24) == 1;
  if (!v18 || (sub_20BE5F574(v15 + 32, v65) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v29 = sub_20BDDC1C8(v55, (uint64_t)"Incorrect match of header datatype: ", 36);
    v30 = sub_20BDE00F4(v29, (int *)(v16 + 56));
    v31 = sub_20BDDC1C8(v30, (uint64_t)" to expected: ", 14);
    v49 = 0x100000002;
    v32 = sub_20BDE00F4(v31, (int *)&v49);
    v33 = sub_20BDDC1C8(v32, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_20BDDC0E4(v50, "interpretation");
    sub_20BE01E1C(v16 + 32, (const void **)v50, __p);
    if ((v53 & 0x80u) == 0)
      v34 = __p;
    else
      v34 = (void **)__p[0];
    if ((v53 & 0x80u) == 0)
      v35 = v53;
    else
      v35 = (uint64_t)__p[1];
    v36 = sub_20BDDC1C8(v33, (uint64_t)v34, v35);
    v37 = sub_20BDDC1C8(v36, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v37, (uint64_t)"", 0);
    if ((char)v53 < 0)
      operator delete(__p[0]);
    if (v51 < 0)
      operator delete(v50[0]);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v38 = __cxa_allocate_exception(0x20uLL);
    v39 = sub_20BDDC09C(v38, (uint64_t)__p);
    __cxa_throw(v39, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 88))(&v54, v12, a3);
  sub_20BDE82DC(a1 + 32, &v54);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v56;
  if (v56)
  {
    v23 = (unint64_t *)&v56->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v63;
  if (v63)
  {
    v26 = (unint64_t *)&v63->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  sub_20BDE9D48((uint64_t)v62, (_QWORD *)v62[1]);
  return a1;
}

void sub_20BE5F410(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 192));
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v26);
  MEMORY[0x212B929D0](v25, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 176, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE5F15CLL);
}

void sub_20BE5F534()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 144);
  JUMPOUT(0x20BE5F564);
}

uint64_t sub_20BE5F574(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (a2)
    return 1;
  sub_20BDDC0E4(__p, "interpretation");
  sub_20BE01E1C(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    v2 = v7[1] == 0;
    operator delete(v7[0]);
  }
  else
  {
    v2 = v8 == 0;
  }
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE5F5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

Alembic::AbcGeom::v12::XformOp *Alembic::AbcGeom::v12::XformOp::XformOp(Alembic::AbcGeom::v12::XformOp *this)
{
  *(_DWORD *)this = 1;
  *((_BYTE *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 6) = 0;
  sub_20BDDEC88((uint64_t)this + 8, 3uLL);
  return this;
}

void sub_20BE5F678(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v7;

  v5 = v4;
  sub_20BE6100C(v3, *v5);
  v7 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

Alembic::AbcGeom::v12::XformOp *Alembic::AbcGeom::v12::XformOp::XformOp(Alembic::AbcGeom::v12::XformOp *this, unsigned int a2, unsigned int a3)
{
  *(_DWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 6) = 0;
  if (a2 < 7)
    sub_20BDDEC88((uint64_t)this + 8, qword_20CA52798[a2]);
  Alembic::AbcGeom::v12::XformOp::setHint((uint64_t)this, a3);
  return this;
}

void sub_20BE5F728(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  _QWORD **v4;
  void *v6;

  sub_20BE6100C(v3, *v4);
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::XformOp::setHint(uint64_t this, unsigned int a2)
{
  unsigned int v2;
  BOOL v4;
  BOOL v5;

  v2 = *(_DWORD *)this;
  if (a2 && !v2 || a2 >= 5 && v2 == 1)
    goto LABEL_19;
  if (v2 <= 5 && ((1 << v2) & 0x34) != 0)
  {
    if (a2 <= 1)
      goto LABEL_20;
    goto LABEL_19;
  }
  v4 = v2 == 6 || v2 == 3;
  v5 = v4;
  if (a2 >= 2 && v5)
LABEL_19:
    LOBYTE(a2) = 0;
LABEL_20:
  *(_BYTE *)(this + 4) = a2;
  return this;
}

Alembic::AbcGeom::v12::XformOp *Alembic::AbcGeom::v12::XformOp::XformOp(Alembic::AbcGeom::v12::XformOp *this, unsigned int a2)
{
  char *v3;
  uint64_t v4;

  *((_QWORD *)this + 1) = 0;
  v3 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 6) = 0;
  *(_DWORD *)this = a2 >> 4;
  Alembic::AbcGeom::v12::XformOp::setHint((uint64_t)this, a2 & 0xF);
  v4 = *(int *)this;
  if (v4 < 7)
    sub_20BDDEC88((uint64_t)v3, qword_20CA52798[v4]);
  return this;
}

void sub_20BE5F834(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v7;

  v5 = v4;
  sub_20BE6100C(v3, *v5);
  v7 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::XformOp::getType(Alembic::AbcGeom::v12::XformOp *this)
{
  return *(unsigned int *)this;
}

void Alembic::AbcGeom::v12::XformOp::setType(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 4) = 0;
  if (a2 <= 6)
    sub_20BDDEC88(a1 + 8, qword_20CA52798[a2]);
}

uint64_t Alembic::AbcGeom::v12::XformOp::getHint(Alembic::AbcGeom::v12::XformOp *this)
{
  return *((unsigned __int8 *)this + 4);
}

BOOL Alembic::AbcGeom::v12::XformOp::isXAnimated(Alembic::AbcGeom::v12::XformOp *this)
{
  uint64_t *v1;
  int v2;
  _BOOL8 result;

  if ((*(_DWORD *)this - 4) < 3)
    return 0;
  v1 = (uint64_t *)*((_QWORD *)this + 5);
  if (!v1)
    return 0;
  do
  {
    v2 = *((_DWORD *)v1 + 7);
    result = v2 == 0;
    if (!v2)
      break;
    v1 = (uint64_t *)*v1;
  }
  while (v1);
  return result;
}

uint64_t Alembic::AbcGeom::v12::XformOp::isYAnimated(Alembic::AbcGeom::v12::XformOp *this)
{
  uint64_t *v1;
  unsigned int v2;

  if ((*(_DWORD *)this - 4) < 3)
    return 0;
  v1 = (uint64_t *)*((_QWORD *)this + 5);
  if (!v1)
    return 0;
  while (1)
  {
    v2 = *((_DWORD *)v1 + 7);
    if (v2 <= 1)
      break;
LABEL_6:
    v1 = (uint64_t *)*v1;
    if (!v1)
      return 0;
  }
  if (!v2)
  {
    ++v1;
    goto LABEL_6;
  }
  return 1;
}

uint64_t Alembic::AbcGeom::v12::XformOp::isZAnimated(Alembic::AbcGeom::v12::XformOp *this)
{
  uint64_t *v1;
  unsigned int v2;

  if ((*(_DWORD *)this - 4) < 3)
    return 0;
  v1 = (uint64_t *)*((_QWORD *)this + 5);
  if (!v1)
    return 0;
  while (1)
  {
    v2 = *((_DWORD *)v1 + 7);
    if (v2 <= 2)
      break;
LABEL_6:
    v1 = (uint64_t *)*v1;
    if (!v1)
      return 0;
  }
  if (v2 != 2)
  {
    ++v1;
    goto LABEL_6;
  }
  return 1;
}

BOOL Alembic::AbcGeom::v12::XformOp::isAngleAnimated(Alembic::AbcGeom::v12::XformOp *this)
{
  uint64_t *v1;
  int v2;
  _BOOL8 result;
  unsigned int v4;

  v1 = (uint64_t *)*((_QWORD *)this + 5);
  if ((*(_DWORD *)this - 4) > 2)
  {
    for (; v1; v1 = (uint64_t *)*v1)
    {
      v4 = *((_DWORD *)v1 + 7);
      if (v4 <= 3)
      {
        if (v4 == 3)
          return 1;
        ++v1;
      }
    }
    return 0;
  }
  if (!v1)
    return 0;
  do
  {
    v2 = *((_DWORD *)v1 + 7);
    result = v2 == 0;
    if (!v2)
      break;
    v1 = (uint64_t *)*v1;
  }
  while (v1);
  return result;
}

uint64_t Alembic::AbcGeom::v12::XformOp::isChannelAnimated(Alembic::AbcGeom::v12::XformOp *this, unsigned int a2)
{
  uint64_t *v2;
  unsigned int v3;

  v2 = (uint64_t *)*((_QWORD *)this + 5);
  if (!v2)
    return 0;
  while (1)
  {
    v3 = *((_DWORD *)v2 + 7);
    if (v3 <= a2)
      break;
LABEL_5:
    v2 = (uint64_t *)*v2;
    if (!v2)
      return 0;
  }
  if (v3 < a2)
  {
    ++v2;
    goto LABEL_5;
  }
  return 1;
}

uint64_t Alembic::AbcGeom::v12::XformOp::getNumChannels(Alembic::AbcGeom::v12::XformOp *this)
{
  return (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3;
}

double Alembic::AbcGeom::v12::XformOp::getDefaultChannelValue(Alembic::AbcGeom::v12::XformOp *this, unint64_t a2)
{
  double result;

  if (*(_DWORD *)this == 3)
  {
    if (a2 > 0xF)
      return 0.0;
    result = 1.0;
    if (((1 << a2) & 0x8421) == 0)
      return 0.0;
  }
  else
  {
    result = 0.0;
    if (!*(_DWORD *)this)
      return 1.0;
  }
  return result;
}

double Alembic::AbcGeom::v12::XformOp::getChannelValue(Alembic::AbcGeom::v12::XformOp *this, unint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  result = 0.0;
  if (a2 < (*((_QWORD *)this + 2) - v2) >> 3)
    return *(double *)(v2 + 8 * a2);
  return result;
}

uint64_t Alembic::AbcGeom::v12::XformOp::setChannelValue(uint64_t this, uint64_t a2, double a3)
{
  *(double *)(*(_QWORD *)(this + 8) + 8 * a2) = a3;
  return this;
}

uint64_t Alembic::AbcGeom::v12::XformOp::getOpEncoding(Alembic::AbcGeom::v12::XformOp *this)
{
  return *((_BYTE *)this + 4) & 0xF | (16 * (*(_BYTE *)this & 0xFu));
}

BOOL Alembic::AbcGeom::v12::XformOp::isTranslateOp(Alembic::AbcGeom::v12::XformOp *this)
{
  return *(_DWORD *)this == 1;
}

BOOL Alembic::AbcGeom::v12::XformOp::isScaleOp(Alembic::AbcGeom::v12::XformOp *this)
{
  return *(_DWORD *)this == 0;
}

BOOL Alembic::AbcGeom::v12::XformOp::isRotateOp(Alembic::AbcGeom::v12::XformOp *this)
{
  return *(_DWORD *)this == 2;
}

BOOL Alembic::AbcGeom::v12::XformOp::isMatrixOp(Alembic::AbcGeom::v12::XformOp *this)
{
  return *(_DWORD *)this == 3;
}

BOOL Alembic::AbcGeom::v12::XformOp::isRotateXOp(Alembic::AbcGeom::v12::XformOp *this)
{
  return *(_DWORD *)this == 4;
}

BOOL Alembic::AbcGeom::v12::XformOp::isRotateYOp(Alembic::AbcGeom::v12::XformOp *this)
{
  return *(_DWORD *)this == 5;
}

BOOL Alembic::AbcGeom::v12::XformOp::isRotateZOp(Alembic::AbcGeom::v12::XformOp *this)
{
  return *(_DWORD *)this == 6;
}

double Alembic::AbcGeom::v12::XformOp::setVector(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;
  _QWORD *exception;
  _QWORD *v5;
  __int128 __p;
  char v7;
  _QWORD v8[4];
  _BYTE v9[16];
  _QWORD v10[33];

  if (*(_DWORD *)a1 == 3)
  {
    sub_20BDDBD68((uint64_t)v9);
    sub_20BDDC1C8(v10, (uint64_t)"Meaningless to set Abc::V3d on matrix op", 40);
    std::stringbuf::str();
    sub_20BDDBF20(v8, &__p);
    if (v7 < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = sub_20BDDC09C(exception, (uint64_t)v8);
    __cxa_throw(v5, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = *(_QWORD *)a2;
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(v2 + 16) = result;
  return result;
}

void sub_20BE5FBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

double Alembic::AbcGeom::v12::XformOp::setTranslate(_DWORD *a1, uint64_t a2)
{
  _QWORD *exception;
  _QWORD *v4;
  __int128 __p;
  char v6;
  _QWORD v7[4];
  _BYTE v8[16];
  _QWORD v9[33];

  if (*a1 != 1)
  {
    sub_20BDDBD68((uint64_t)v8);
    sub_20BDDC1C8(v9, (uint64_t)"Meaningless to set translate on non-translate op.", 49);
    std::stringbuf::str();
    sub_20BDDBF20(v7, &__p);
    if (v6 < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = sub_20BDDC09C(exception, (uint64_t)v7);
    __cxa_throw(v4, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  return Alembic::AbcGeom::v12::XformOp::setVector((uint64_t)a1, a2);
}

void sub_20BE5FC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

double Alembic::AbcGeom::v12::XformOp::setScale(_DWORD *a1, uint64_t a2)
{
  _QWORD *exception;
  _QWORD *v4;
  __int128 __p;
  char v6;
  _QWORD v7[4];
  _BYTE v8[16];
  _QWORD v9[33];

  if (*a1)
  {
    sub_20BDDBD68((uint64_t)v8);
    sub_20BDDC1C8(v9, (uint64_t)"Meaningless to set scale on non-scale op.", 41);
    std::stringbuf::str();
    sub_20BDDBF20(v7, &__p);
    if (v6 < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = sub_20BDDC09C(exception, (uint64_t)v7);
    __cxa_throw(v4, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  return Alembic::AbcGeom::v12::XformOp::setVector((uint64_t)a1, a2);
}

void sub_20BE5FD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

double Alembic::AbcGeom::v12::XformOp::setAxis(_DWORD *a1, uint64_t a2)
{
  _QWORD *exception;
  _QWORD *v4;
  __int128 __p;
  char v6;
  _QWORD v7[4];
  _BYTE v8[16];
  _QWORD v9[33];

  if (*a1 != 2)
  {
    sub_20BDDBD68((uint64_t)v8);
    sub_20BDDC1C8(v9, (uint64_t)"Meaningless to set rotation axis on non-rotation or fixed angle rotation op.", 76);
    std::stringbuf::str();
    sub_20BDDBF20(v7, &__p);
    if (v6 < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = sub_20BDDC09C(exception, (uint64_t)v7);
    __cxa_throw(v4, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  return Alembic::AbcGeom::v12::XformOp::setVector((uint64_t)a1, a2);
}

void sub_20BE5FE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::XformOp::setAngle(uint64_t this, double a2)
{
  double *v2;
  _QWORD *exception;
  _QWORD *v4;
  __int128 __p;
  char v6;
  _QWORD v7[4];
  _BYTE v8[16];
  _QWORD v9[33];

  if ((*(_DWORD *)this - 4) >= 3)
  {
    if (*(_DWORD *)this != 2)
    {
      sub_20BDDBD68((uint64_t)v8);
      sub_20BDDC1C8(v9, (uint64_t)"Meaningless to set rotation angle on non-rotation op.", 53);
      std::stringbuf::str();
      sub_20BDDBF20(v7, &__p);
      if (v6 < 0)
        operator delete((void *)__p);
      exception = __cxa_allocate_exception(0x20uLL);
      v4 = sub_20BDDC09C(exception, (uint64_t)v7);
      __cxa_throw(v4, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v2 = (double *)(*(_QWORD *)(this + 8) + 24);
  }
  else
  {
    v2 = *(double **)(this + 8);
  }
  *v2 = a2;
  return this;
}

void sub_20BE5FEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::XformOp::setMatrix(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *exception;
  _QWORD *v6;
  __int128 __p;
  char v8;
  _QWORD v9[4];
  _BYTE v10[16];
  _QWORD v11[33];

  if (*(_DWORD *)result != 3)
  {
    sub_20BDDBD68((uint64_t)v10);
    sub_20BDDC1C8(v11, (uint64_t)"Cannot set non-matrix op from Abc::M44d", 39);
    std::stringbuf::str();
    sub_20BDDBF20(v9, &__p);
    if (v8 < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    v6 = sub_20BDDC09C(exception, (uint64_t)v9);
    __cxa_throw(v6, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v2 = 0;
  v3 = *(_QWORD *)(result + 8);
  do
  {
    for (i = 0; i != 32; i += 8)
      *(_QWORD *)(v3 + i) = *(_QWORD *)(a2 + i);
    ++v2;
    v3 += 32;
    a2 += 32;
  }
  while (v2 != 4);
  return result;
}

void sub_20BE5FFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

double Alembic::AbcGeom::v12::XformOp::getVector@<D0>(Alembic::AbcGeom::v12::XformOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  _QWORD *exception;
  _QWORD *v5;
  __int128 __p;
  char v7;
  _QWORD v8[4];
  _BYTE v9[16];
  _QWORD v10[33];

  if (*(_DWORD *)this == 3)
  {
    sub_20BDDBD68((uint64_t)v9);
    sub_20BDDC1C8(v10, (uint64_t)"Meaningless to get Abc::V3d from matrix op", 42);
    std::stringbuf::str();
    sub_20BDDBF20(v8, &__p);
    if (v7 < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = sub_20BDDC09C(exception, (uint64_t)v8);
    __cxa_throw(v5, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v2 = *((_QWORD *)this + 1);
  result = *(double *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(double *)(a2 + 16) = result;
  return result;
}

void sub_20BE600B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

double Alembic::AbcGeom::v12::XformOp::getTranslate@<D0>(Alembic::AbcGeom::v12::XformOp *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *exception;
  _QWORD *v4;
  __int128 __p;
  char v6;
  _QWORD v7[4];
  _BYTE v8[16];
  _QWORD v9[33];

  if (*(_DWORD *)this != 1)
  {
    sub_20BDDBD68((uint64_t)v8);
    sub_20BDDC1C8(v9, (uint64_t)"Meaningless to get translate vector from non-translate op.", 58);
    std::stringbuf::str();
    sub_20BDDBF20(v7, &__p);
    if (v6 < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = sub_20BDDC09C(exception, (uint64_t)v7);
    __cxa_throw(v4, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  return Alembic::AbcGeom::v12::XformOp::getVector(this, a2);
}

void sub_20BE60178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

double Alembic::AbcGeom::v12::XformOp::getScale@<D0>(Alembic::AbcGeom::v12::XformOp *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *exception;
  _QWORD *v4;
  __int128 __p;
  char v6;
  _QWORD v7[4];
  _BYTE v8[16];
  _QWORD v9[33];

  if (*(_DWORD *)this)
  {
    sub_20BDDBD68((uint64_t)v8);
    sub_20BDDC1C8(v9, (uint64_t)"Meaningless to get scaling vector from non-scale op.", 52);
    std::stringbuf::str();
    sub_20BDDBF20(v7, &__p);
    if (v6 < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = sub_20BDDC09C(exception, (uint64_t)v7);
    __cxa_throw(v4, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  return Alembic::AbcGeom::v12::XformOp::getVector(this, a2);
}

void sub_20BE60238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformOp::getAxis(Alembic::AbcGeom::v12::XformOp *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *exception;
  _QWORD *v3;
  __int128 __p;
  char v5;
  _QWORD v6[4];
  _BYTE v7[16];
  _QWORD v8[33];

  switch(*(_DWORD *)this)
  {
    case 2:
      Alembic::AbcGeom::v12::XformOp::getVector(this, (uint64_t)a2);
      break;
    case 4:
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0x3FF0000000000000;
      break;
    case 5:
      *(_OWORD *)a2 = xmmword_20CA52210;
      a2[2] = 0;
      break;
    case 6:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0x3FF0000000000000;
      break;
    default:
      sub_20BDDBD68((uint64_t)v7);
      sub_20BDDC1C8(v8, (uint64_t)"Meaningless to get rotation axis from non-rotation op.", 54);
      std::stringbuf::str();
      sub_20BDDBF20(v6, &__p);
      if (v5 < 0)
        operator delete((void *)__p);
      exception = __cxa_allocate_exception(0x20uLL);
      v3 = sub_20BDDC09C(exception, (uint64_t)v6);
      __cxa_throw(v3, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
}

void sub_20BE60358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

double Alembic::AbcGeom::v12::XformOp::getAngle(Alembic::AbcGeom::v12::XformOp *this)
{
  uint64_t v1;
  _QWORD *exception;
  _QWORD *v4;
  __int128 __p;
  char v6;
  _QWORD v7[4];
  _BYTE v8[16];
  _QWORD v9[33];

  if ((*(_DWORD *)this - 4) >= 3)
  {
    if (*(_DWORD *)this != 2)
    {
      sub_20BDDBD68((uint64_t)v8);
      sub_20BDDC1C8(v9, (uint64_t)"Meaningless to get rotation angle from non-rotation op.", 55);
      std::stringbuf::str();
      sub_20BDDBF20(v7, &__p);
      if (v6 < 0)
        operator delete((void *)__p);
      exception = __cxa_allocate_exception(0x20uLL);
      v4 = sub_20BDDC09C(exception, (uint64_t)v7);
      __cxa_throw(v4, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v1 = *((_QWORD *)this + 1) + 24;
  }
  else
  {
    v1 = *((_QWORD *)this + 1);
  }
  return *(double *)v1;
}

void sub_20BE6043C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformOp::getXRotation(Alembic::AbcGeom::v12::XformOp *this)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  __double2 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _QWORD *exception;
  _QWORD *v13;
  __int128 __p;
  char v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  if (*(_DWORD *)this == 2)
  {
    v20 = 0.0;
    v21 = 0.0;
    v22 = 0;
    v25 = 0.0;
    v26 = 0;
    v27 = 0.0;
    Alembic::AbcGeom::v12::XformOp::getVector(this, (uint64_t)&v16);
    v2 = v17 * v17 + v16 * v16 + v18 * v18;
    if (v2 < 4.45014772e-308)
    {
      v8 = -v16;
      if (v16 >= 0.0)
        v8 = v16;
      v9 = -v17;
      if (v17 >= 0.0)
        v9 = v17;
      if (v18 >= 0.0)
        v10 = v18;
      else
        v10 = -v18;
      if (v8 >= v9)
        v11 = v8;
      else
        v11 = v9;
      if (v11 < v10)
        v11 = v10;
      if (v11 == 0.0)
        goto LABEL_23;
      v3 = v11 * sqrt(v9 / v11 * (v9 / v11) + v8 / v11 * (v8 / v11) + v10 / v11 * (v10 / v11));
    }
    else
    {
      v3 = sqrt(v2);
    }
    if (v3 != 0.0)
    {
      v4 = v16 / v3;
      v5 = v17 / v3;
      v6 = v18 / v3;
LABEL_8:
      v7 = __sincos_stret(*(double *)(*((_QWORD *)this + 1) + 24) * 3.14159265 / 180.0);
      v19 = v7.__cosval + v4 * v4 * (1.0 - v7.__cosval);
      v20 = v7.__sinval * v6 + v4 * v5 * (1.0 - v7.__cosval);
      v21 = v4 * v6 * (1.0 - v7.__cosval) - v5 * v7.__sinval;
      v22 = 0;
      v23 = v4 * v5 * (1.0 - v7.__cosval) - v6 * v7.__sinval;
      v24 = v7.__cosval + v5 * v5 * (1.0 - v7.__cosval);
      v25 = v7.__sinval * v4 + v5 * v6 * (1.0 - v7.__cosval);
      v26 = 0;
      v27 = v7.__sinval * v5 + v4 * v6 * (1.0 - v7.__cosval);
      v28 = v5 * v6 * (1.0 - v7.__cosval) - v4 * v7.__sinval;
      v29 = v7.__cosval + v6 * v6 * (1.0 - v7.__cosval);
      v30 = 0u;
      v31 = 0u;
      v32 = 0x3FF0000000000000;
      sub_20BE606F4(&v19, (uint64_t)&v16);
      return;
    }
LABEL_23:
    v4 = 0.0;
    v5 = 0.0;
    v6 = 0.0;
    goto LABEL_8;
  }
  if (*(_DWORD *)this != 4)
  {
    sub_20BDDBD68((uint64_t)&v19);
    sub_20BDDC1C8(&v21, (uint64_t)"Meaningless to get rotation angle from non-rotation op.", 55);
    std::stringbuf::str();
    sub_20BDDBF20(&v16, &__p);
    if (v15 < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    v13 = sub_20BDDC09C(exception, (uint64_t)&v16);
    __cxa_throw(v13, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
}

void sub_20BE606CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20BE606F4(double *a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __double2 v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  long double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v7 = a1[4];
  v6 = a1[5];
  v8 = a1[6];
  v9 = v3 * v3 + v4 * v4 + v5 * v5;
  if (v9 >= 4.45014772e-308)
  {
    v10 = sqrt(v9);
    goto LABEL_3;
  }
  v31 = -v4;
  if (v4 >= 0.0)
    v31 = *a1;
  v32 = -v3;
  if (v3 >= 0.0)
    v32 = a1[1];
  if (v5 >= 0.0)
    v33 = a1[2];
  else
    v33 = -v5;
  if (v31 >= v32)
    v34 = v31;
  else
    v34 = v32;
  if (v34 < v33)
    v34 = v33;
  if (v34 != 0.0)
  {
    v10 = v34 * sqrt(v32 / v34 * (v32 / v34) + v31 / v34 * (v31 / v34) + v33 / v34 * (v33 / v34));
LABEL_3:
    if (v10 != 0.0)
    {
      v4 = v4 / v10;
      v3 = v3 / v10;
      v5 = v5 / v10;
    }
  }
  v11 = a1[8];
  v12 = a1[9];
  v13 = a1[10];
  v14 = v6 * v6 + v7 * v7 + v8 * v8;
  if (v14 >= 4.45014772e-308)
  {
    v15 = sqrt(v14);
    goto LABEL_7;
  }
  v35 = -v7;
  if (v7 >= 0.0)
    v35 = a1[4];
  v36 = -v6;
  if (v6 >= 0.0)
    v36 = a1[5];
  if (v8 >= 0.0)
    v37 = a1[6];
  else
    v37 = -v8;
  if (v35 >= v36)
    v38 = v35;
  else
    v38 = v36;
  if (v38 < v37)
    v38 = v37;
  if (v38 != 0.0)
  {
    v15 = v38 * sqrt(v36 / v38 * (v36 / v38) + v35 / v38 * (v35 / v38) + v37 / v38 * (v37 / v38));
LABEL_7:
    if (v15 != 0.0)
    {
      v7 = v7 / v15;
      v6 = v6 / v15;
      v8 = v8 / v15;
    }
  }
  v16 = v12 * v12 + v11 * v11 + v13 * v13;
  v44 = v5;
  v45 = v3;
  if (v16 >= 4.45014772e-308)
  {
    v17 = sqrt(v16);
    goto LABEL_11;
  }
  v39 = -v11;
  if (v11 >= 0.0)
    v39 = a1[8];
  v40 = -v12;
  if (v12 >= 0.0)
    v40 = a1[9];
  if (v13 >= 0.0)
    v41 = a1[10];
  else
    v41 = -v13;
  if (v39 >= v40)
    v42 = v39;
  else
    v42 = v40;
  if (v42 < v41)
    v42 = v41;
  if (v42 != 0.0)
  {
    v17 = v42 * sqrt(v40 / v42 * (v40 / v42) + v39 / v42 * (v39 / v42) + v41 / v42 * (v41 / v42));
LABEL_11:
    if (v17 != 0.0)
    {
      v11 = v11 / v17;
      v12 = v12 / v17;
      v13 = v13 / v17;
    }
  }
  v43 = v13;
  v18 = atan2(v8, v13);
  *(double *)a2 = v18;
  v19 = __sincos_stret(v18);
  v20 = v19.__sinval * -0.0 + v19.__cosval * -0.0;
  v21 = v19.__cosval + v19.__sinval * -0.0;
  v22 = v21 * 0.0;
  v23 = v20 + v21 * 0.0 + v19.__sinval * -0.0;
  v24 = v21 + v20 * 0.0 + v19.__sinval * -0.0;
  v25 = v22 + v20 * 0.0;
  v26 = v25 + v19.__sinval * -0.0;
  v27 = v4 + v7 * 0.0 + v11 * 0.0 + 0.0;
  v28 = v45 + v6 * 0.0 + v12 * 0.0 + 0.0;
  v29 = v7 * v24 + v23 * v4 + (v25 - v19.__sinval) * v11;
  v30 = v6 * v24 + v23 * v45 + (v25 - v19.__sinval) * v12 + v26 * 0.0;
  *(long double *)(a2 + 8) = atan2(-(v44 + v8 * 0.0 + v43 * 0.0 + 0.0), sqrt(v28 * v28 + v27 * v27));
  *(long double *)(a2 + 16) = atan2(-(v29 + v26 * 0.0), v30);
}

void Alembic::AbcGeom::v12::XformOp::getYRotation(Alembic::AbcGeom::v12::XformOp *this)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  __double2 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _QWORD *exception;
  _QWORD *v13;
  __int128 __p;
  char v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  if (*(_DWORD *)this == 2)
  {
    v20 = 0.0;
    v21 = 0.0;
    v22 = 0;
    v25 = 0.0;
    v26 = 0;
    v27 = 0.0;
    Alembic::AbcGeom::v12::XformOp::getVector(this, (uint64_t)&v16);
    v2 = v17 * v17 + v16 * v16 + v18 * v18;
    if (v2 < 4.45014772e-308)
    {
      v8 = -v16;
      if (v16 >= 0.0)
        v8 = v16;
      v9 = -v17;
      if (v17 >= 0.0)
        v9 = v17;
      if (v18 >= 0.0)
        v10 = v18;
      else
        v10 = -v18;
      if (v8 >= v9)
        v11 = v8;
      else
        v11 = v9;
      if (v11 < v10)
        v11 = v10;
      if (v11 == 0.0)
        goto LABEL_23;
      v3 = v11 * sqrt(v9 / v11 * (v9 / v11) + v8 / v11 * (v8 / v11) + v10 / v11 * (v10 / v11));
    }
    else
    {
      v3 = sqrt(v2);
    }
    if (v3 != 0.0)
    {
      v4 = v16 / v3;
      v5 = v17 / v3;
      v6 = v18 / v3;
LABEL_8:
      v7 = __sincos_stret(*(double *)(*((_QWORD *)this + 1) + 24) * 3.14159265 / 180.0);
      v19 = v7.__cosval + v4 * v4 * (1.0 - v7.__cosval);
      v20 = v7.__sinval * v6 + v4 * v5 * (1.0 - v7.__cosval);
      v21 = v4 * v6 * (1.0 - v7.__cosval) - v5 * v7.__sinval;
      v22 = 0;
      v23 = v4 * v5 * (1.0 - v7.__cosval) - v6 * v7.__sinval;
      v24 = v7.__cosval + v5 * v5 * (1.0 - v7.__cosval);
      v25 = v7.__sinval * v4 + v5 * v6 * (1.0 - v7.__cosval);
      v26 = 0;
      v27 = v7.__sinval * v5 + v4 * v6 * (1.0 - v7.__cosval);
      v28 = v5 * v6 * (1.0 - v7.__cosval) - v4 * v7.__sinval;
      v29 = v7.__cosval + v6 * v6 * (1.0 - v7.__cosval);
      v30 = 0u;
      v31 = 0u;
      v32 = 0x3FF0000000000000;
      sub_20BE606F4(&v19, (uint64_t)&v16);
      return;
    }
LABEL_23:
    v4 = 0.0;
    v5 = 0.0;
    v6 = 0.0;
    goto LABEL_8;
  }
  if (*(_DWORD *)this != 5)
  {
    sub_20BDDBD68((uint64_t)&v19);
    sub_20BDDC1C8(&v21, (uint64_t)"Meaningless to get rotation angle from non-rotation op.", 55);
    std::stringbuf::str();
    sub_20BDDBF20(&v16, &__p);
    if (v15 < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    v13 = sub_20BDDC09C(exception, (uint64_t)&v16);
    __cxa_throw(v13, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
}

void sub_20BE60C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformOp::getZRotation(Alembic::AbcGeom::v12::XformOp *this)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  __double2 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _QWORD *exception;
  _QWORD *v13;
  __int128 __p;
  char v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  if (*(_DWORD *)this == 2)
  {
    v20 = 0.0;
    v21 = 0.0;
    v22 = 0;
    v25 = 0.0;
    v26 = 0;
    v27 = 0.0;
    Alembic::AbcGeom::v12::XformOp::getVector(this, (uint64_t)&v16);
    v2 = v17 * v17 + v16 * v16 + v18 * v18;
    if (v2 < 4.45014772e-308)
    {
      v8 = -v16;
      if (v16 >= 0.0)
        v8 = v16;
      v9 = -v17;
      if (v17 >= 0.0)
        v9 = v17;
      if (v18 >= 0.0)
        v10 = v18;
      else
        v10 = -v18;
      if (v8 >= v9)
        v11 = v8;
      else
        v11 = v9;
      if (v11 < v10)
        v11 = v10;
      if (v11 == 0.0)
        goto LABEL_23;
      v3 = v11 * sqrt(v9 / v11 * (v9 / v11) + v8 / v11 * (v8 / v11) + v10 / v11 * (v10 / v11));
    }
    else
    {
      v3 = sqrt(v2);
    }
    if (v3 != 0.0)
    {
      v4 = v16 / v3;
      v5 = v17 / v3;
      v6 = v18 / v3;
LABEL_8:
      v7 = __sincos_stret(*(double *)(*((_QWORD *)this + 1) + 24) * 3.14159265 / 180.0);
      v19 = v7.__cosval + v4 * v4 * (1.0 - v7.__cosval);
      v20 = v7.__sinval * v6 + v4 * v5 * (1.0 - v7.__cosval);
      v21 = v4 * v6 * (1.0 - v7.__cosval) - v5 * v7.__sinval;
      v22 = 0;
      v23 = v4 * v5 * (1.0 - v7.__cosval) - v6 * v7.__sinval;
      v24 = v7.__cosval + v5 * v5 * (1.0 - v7.__cosval);
      v25 = v7.__sinval * v4 + v5 * v6 * (1.0 - v7.__cosval);
      v26 = 0;
      v27 = v7.__sinval * v5 + v4 * v6 * (1.0 - v7.__cosval);
      v28 = v5 * v6 * (1.0 - v7.__cosval) - v4 * v7.__sinval;
      v29 = v7.__cosval + v6 * v6 * (1.0 - v7.__cosval);
      v30 = 0u;
      v31 = 0u;
      v32 = 0x3FF0000000000000;
      sub_20BE606F4(&v19, (uint64_t)&v16);
      return;
    }
LABEL_23:
    v4 = 0.0;
    v5 = 0.0;
    v6 = 0.0;
    goto LABEL_8;
  }
  if (*(_DWORD *)this != 6)
  {
    sub_20BDDBD68((uint64_t)&v19);
    sub_20BDDC1C8(&v21, (uint64_t)"Meaningless to get rotation angle from non-rotation op.", 55);
    std::stringbuf::str();
    sub_20BDDBF20(&v16, &__p);
    if (v15 < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    v13 = sub_20BDDC09C(exception, (uint64_t)&v16);
    __cxa_throw(v13, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
}

void sub_20BE60ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

__n128 Alembic::AbcGeom::v12::XformOp::getMatrix@<Q0>(Alembic::AbcGeom::v12::XformOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;
  _QWORD *exception;
  _QWORD *v8;
  __int128 __p;
  char v10;
  _QWORD v11[4];
  _BYTE v12[16];
  _QWORD v13[33];

  if (*(_DWORD *)this != 3)
  {
    sub_20BDDBD68((uint64_t)v12);
    sub_20BDDC1C8(v13, (uint64_t)"Can't get matrix from non-matrix op.", 36);
    std::stringbuf::str();
    sub_20BDDBF20(v11, &__p);
    if (v10 < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    v8 = sub_20BDDC09C(exception, (uint64_t)v11);
    __cxa_throw(v8, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v2 = 0;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  v3 = *((_QWORD *)this + 1);
  do
  {
    v4 = a2 + v2;
    result = *(__n128 *)(v3 + v2);
    v6 = *(_OWORD *)(v3 + v2 + 16);
    *(__n128 *)v4 = result;
    *(_OWORD *)(v4 + 16) = v6;
    v2 += 32;
  }
  while (v2 != 128);
  return result;
}

void sub_20BE60FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20BE6100C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20BE6100C(a1, *a2);
    sub_20BE6100C(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t Alembic::AbcGeom::v12::XformSample::XformSample(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)this = 0;
  *(_WORD *)(this + 32) = 1;
  *(_QWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)this = 0;
  *(_WORD *)(this + 32) = 1;
  *(_QWORD *)(this + 40) = 0;
  return this;
}

uint64_t Alembic::AbcGeom::v12::XformSample::addOp(uint64_t a1, Alembic::AbcGeom::v12::XformOp *this, uint64_t a3)
{
  uint64_t i;
  uint64_t v7;
  int Type;
  uint64_t v9;
  Alembic::AbcGeom::v12::XformOp *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *exception;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *__p[2];
  char v24;
  _QWORD v25[4];
  _BYTE v26[16];
  _QWORD v27[33];

  for (i = 0; i != 3; ++i)
    Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)this, i, *(double *)(a3 + 8 * i));
  if (*(_BYTE *)(a1 + 33))
  {
    if (*(_DWORD *)a1 != 1)
    {
      sub_20BDDBD68((uint64_t)v26);
      sub_20BDDC1C8(v27, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v25, (__int128 *)__p);
      if (v24 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      v17 = sub_20BDDC09C(exception, (uint64_t)v25);
      __cxa_throw(v17, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v7 = *(_QWORD *)(a1 + 40);
    Type = Alembic::AbcGeom::v12::XformOp::getType(this);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*(_QWORD *)(a1 + 8) + 56 * v7)))
    {
      sub_20BDDBD68((uint64_t)v26);
      v18 = sub_20BDDC1C8(v27, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_20BDDC1C8(v18, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_20BDDBF20(v25, (__int128 *)__p);
      if (v24 < 0)
        operator delete(__p[0]);
      v19 = __cxa_allocate_exception(0x20uLL);
      v20 = sub_20BDDC09C(v19, (uint64_t)v25);
      __cxa_throw(v20, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (Alembic::AbcGeom::v12::XformOp *)(v9 + 56 * v7);
    v11 = *(_DWORD *)this;
    *((_BYTE *)v10 + 4) = *((_BYTE *)this + 4);
    *(_DWORD *)v10 = v11;
    if (v10 != this)
    {
      v12 = v9 + 56 * v7;
      sub_20BDDF7E4((char *)(v12 + 8), *((char **)this + 1), *((_QWORD *)this + 2), (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
      sub_20BE648DC((uint64_t **)(v12 + 32), *((unsigned int **)this + 4), (unsigned int *)this + 10);
    }
    *(_QWORD *)(a1 + 40) = (*(_QWORD *)(a1 + 40) + 1)
                         % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                            * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  }
  else
  {
    if (*(_DWORD *)a1 >= 2u)
    {
      sub_20BDDBD68((uint64_t)v26);
      sub_20BDDC1C8(v27, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v25, (__int128 *)__p);
      if (v24 < 0)
        operator delete(__p[0]);
      v21 = __cxa_allocate_exception(0x20uLL);
      v22 = sub_20BDDC09C(v21, (uint64_t)v25);
      __cxa_throw(v22, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    *(_DWORD *)a1 = 1;
    v13 = *(_QWORD *)(a1 + 16);
    if (v13 >= *(_QWORD *)(a1 + 24))
    {
      v14 = sub_20BE64EFC((uint64_t *)(a1 + 8), (int *)this);
    }
    else
    {
      sub_20BE65020(a1 + 24, *(_QWORD *)(a1 + 16), (int *)this);
      v14 = v13 + 56;
      *(_QWORD *)(a1 + 16) = v13 + 56;
    }
    *(_QWORD *)(a1 + 16) = v14;
    return 0x6DB6DB6DB6DB6DB7 * ((v14 - *(_QWORD *)(a1 + 8)) >> 3) - 1;
  }
  return v7;
}

{
  uint64_t v6;
  uint64_t i;
  uint64_t j;
  uint64_t v9;
  int Type;
  uint64_t v11;
  Alembic::AbcGeom::v12::XformOp *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD *exception;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *__p[2];
  char v26;
  _QWORD v27[4];
  _BYTE v28[16];
  _QWORD v29[33];

  v6 = 0;
  for (i = 0; i != 4; ++i)
  {
    for (j = 0; j != 4; ++j)
      Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)this, v6 + j, *(double *)(a3 + 8 * j));
    v6 += 4;
    a3 += 32;
  }
  if (*(_BYTE *)(a1 + 33))
  {
    v9 = *(_QWORD *)(a1 + 40);
    Type = Alembic::AbcGeom::v12::XformOp::getType(this);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*(_QWORD *)(a1 + 8) + 56 * v9)))
    {
      sub_20BDDBD68((uint64_t)v28);
      v18 = sub_20BDDC1C8(v29, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_20BDDC1C8(v18, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_20BDDBF20(v27, (__int128 *)__p);
      if (v26 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      v20 = sub_20BDDC09C(exception, (uint64_t)v27);
      __cxa_throw(v20, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    if (*(_DWORD *)a1 != 1)
    {
      sub_20BDDBD68((uint64_t)v28);
      sub_20BDDC1C8(v29, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v27, (__int128 *)__p);
      if (v26 < 0)
        operator delete(__p[0]);
      v21 = __cxa_allocate_exception(0x20uLL);
      v22 = sub_20BDDC09C(v21, (uint64_t)v27);
      __cxa_throw(v22, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v12 = (Alembic::AbcGeom::v12::XformOp *)(v11 + 56 * v9);
    v13 = *(_DWORD *)this;
    *((_BYTE *)v12 + 4) = *((_BYTE *)this + 4);
    *(_DWORD *)v12 = v13;
    if (v12 != this)
    {
      v14 = v11 + 56 * v9;
      sub_20BDDF7E4((char *)(v14 + 8), *((char **)this + 1), *((_QWORD *)this + 2), (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
      sub_20BE648DC((uint64_t **)(v14 + 32), *((unsigned int **)this + 4), (unsigned int *)this + 10);
    }
    *(_QWORD *)(a1 + 40) = (*(_QWORD *)(a1 + 40) + 1)
                         % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                            * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  }
  else
  {
    if (*(_DWORD *)a1 >= 2u)
    {
      sub_20BDDBD68((uint64_t)v28);
      sub_20BDDC1C8(v29, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v27, (__int128 *)__p);
      if (v26 < 0)
        operator delete(__p[0]);
      v23 = __cxa_allocate_exception(0x20uLL);
      v24 = sub_20BDDC09C(v23, (uint64_t)v27);
      __cxa_throw(v24, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    *(_DWORD *)a1 = 1;
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 >= *(_QWORD *)(a1 + 24))
    {
      v16 = sub_20BE64EFC((uint64_t *)(a1 + 8), (int *)this);
    }
    else
    {
      sub_20BE65020(a1 + 24, *(_QWORD *)(a1 + 16), (int *)this);
      v16 = v15 + 56;
      *(_QWORD *)(a1 + 16) = v15 + 56;
    }
    *(_QWORD *)(a1 + 16) = v16;
    return 0x6DB6DB6DB6DB6DB7 * ((v16 - *(_QWORD *)(a1 + 8)) >> 3) - 1;
  }
  return v9;
}

void sub_20BE61380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::XformSample::addOp(uint64_t a1, Alembic::AbcGeom::v12::XformOp *this, uint64_t a3, double a4)
{
  uint64_t i;
  uint64_t v9;
  int Type;
  uint64_t v11;
  Alembic::AbcGeom::v12::XformOp *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD *exception;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *__p[2];
  char v26;
  _QWORD v27[4];
  _BYTE v28[16];
  _QWORD v29[33];

  for (i = 0; i != 3; ++i)
    Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)this, i, *(double *)(a3 + 8 * i));
  Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)this, 3, a4);
  if (*(_BYTE *)(a1 + 33))
  {
    v9 = *(_QWORD *)(a1 + 40);
    Type = Alembic::AbcGeom::v12::XformOp::getType(this);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*(_QWORD *)(a1 + 8) + 56 * v9)))
    {
      sub_20BDDBD68((uint64_t)v28);
      v18 = sub_20BDDC1C8(v29, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_20BDDC1C8(v18, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_20BDDBF20(v27, (__int128 *)__p);
      if (v26 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      v20 = sub_20BDDC09C(exception, (uint64_t)v27);
      __cxa_throw(v20, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    if (*(_DWORD *)a1 != 1)
    {
      sub_20BDDBD68((uint64_t)v28);
      sub_20BDDC1C8(v29, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v27, (__int128 *)__p);
      if (v26 < 0)
        operator delete(__p[0]);
      v21 = __cxa_allocate_exception(0x20uLL);
      v22 = sub_20BDDC09C(v21, (uint64_t)v27);
      __cxa_throw(v22, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v12 = (Alembic::AbcGeom::v12::XformOp *)(v11 + 56 * v9);
    v13 = *(_DWORD *)this;
    *((_BYTE *)v12 + 4) = *((_BYTE *)this + 4);
    *(_DWORD *)v12 = v13;
    if (v12 != this)
    {
      v14 = v11 + 56 * v9;
      sub_20BDDF7E4((char *)(v14 + 8), *((char **)this + 1), *((_QWORD *)this + 2), (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
      sub_20BE648DC((uint64_t **)(v14 + 32), *((unsigned int **)this + 4), (unsigned int *)this + 10);
    }
    *(_QWORD *)(a1 + 40) = (*(_QWORD *)(a1 + 40) + 1)
                         % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                            * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  }
  else
  {
    if (*(_DWORD *)a1 >= 2u)
    {
      sub_20BDDBD68((uint64_t)v28);
      sub_20BDDC1C8(v29, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v27, (__int128 *)__p);
      if (v26 < 0)
        operator delete(__p[0]);
      v23 = __cxa_allocate_exception(0x20uLL);
      v24 = sub_20BDDC09C(v23, (uint64_t)v27);
      __cxa_throw(v24, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    *(_DWORD *)a1 = 1;
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 >= *(_QWORD *)(a1 + 24))
    {
      v16 = sub_20BE64EFC((uint64_t *)(a1 + 8), (int *)this);
    }
    else
    {
      sub_20BE65020(a1 + 24, *(_QWORD *)(a1 + 16), (int *)this);
      v16 = v15 + 56;
      *(_QWORD *)(a1 + 16) = v15 + 56;
    }
    *(_QWORD *)(a1 + 16) = v16;
    return 0x6DB6DB6DB6DB6DB7 * ((v16 - *(_QWORD *)(a1 + 8)) >> 3) - 1;
  }
  return v9;
}

void sub_20BE616E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::XformSample::addOp(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  int Type;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  _QWORD *exception;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *__p[2];
  char v22;
  _QWORD v23[4];
  _BYTE v24[16];
  _QWORD v25[33];

  Alembic::AbcGeom::v12::XformOp::setChannelValue(a2, 0, a3);
  if (*(_BYTE *)(a1 + 33))
  {
    v5 = *(_QWORD *)(a1 + 40);
    Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)a2);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*(_QWORD *)(a1 + 8) + 56 * v5)))
    {
      sub_20BDDBD68((uint64_t)v24);
      v14 = sub_20BDDC1C8(v25, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_20BDDC1C8(v14, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_20BDDBF20(v23, (__int128 *)__p);
      if (v22 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      v16 = sub_20BDDC09C(exception, (uint64_t)v23);
      __cxa_throw(v16, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    if (*(_DWORD *)a1 != 1)
    {
      sub_20BDDBD68((uint64_t)v24);
      sub_20BDDC1C8(v25, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v23, (__int128 *)__p);
      if (v22 < 0)
        operator delete(__p[0]);
      v17 = __cxa_allocate_exception(0x20uLL);
      v18 = sub_20BDDC09C(v17, (uint64_t)v23);
      __cxa_throw(v18, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v8 = v7 + 56 * v5;
    v9 = *(_DWORD *)a2;
    *(_BYTE *)(v8 + 4) = *(_BYTE *)(a2 + 4);
    *(_DWORD *)v8 = v9;
    if (v8 != a2)
    {
      v10 = v7 + 56 * v5;
      sub_20BDDF7E4((char *)(v10 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
      sub_20BE648DC((uint64_t **)(v10 + 32), *(unsigned int **)(a2 + 32), (unsigned int *)(a2 + 40));
    }
    *(_QWORD *)(a1 + 40) = (*(_QWORD *)(a1 + 40) + 1)
                         % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                            * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  }
  else
  {
    if (*(_DWORD *)a1 >= 2u)
    {
      sub_20BDDBD68((uint64_t)v24);
      sub_20BDDC1C8(v25, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v23, (__int128 *)__p);
      if (v22 < 0)
        operator delete(__p[0]);
      v19 = __cxa_allocate_exception(0x20uLL);
      v20 = sub_20BDDC09C(v19, (uint64_t)v23);
      __cxa_throw(v20, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    *(_DWORD *)a1 = 1;
    v11 = *(_QWORD *)(a1 + 16);
    if (v11 >= *(_QWORD *)(a1 + 24))
    {
      v12 = sub_20BE64EFC((uint64_t *)(a1 + 8), (int *)a2);
    }
    else
    {
      sub_20BE65020(a1 + 24, *(_QWORD *)(a1 + 16), (int *)a2);
      v12 = v11 + 56;
      *(_QWORD *)(a1 + 16) = v11 + 56;
    }
    *(_QWORD *)(a1 + 16) = v12;
    return 0x6DB6DB6DB6DB6DB7 * ((v12 - *(_QWORD *)(a1 + 8)) >> 3) - 1;
  }
  return v5;
}

void sub_20BE61A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20BE61D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::XformSample::addOp(Alembic::AbcGeom::v12::XformSample *this, const Alembic::AbcGeom::v12::XformOp *a2)
{
  uint64_t v4;
  int Type;
  uint64_t v6;
  const Alembic::AbcGeom::v12::XformOp *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v14;
  _QWORD *exception;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *__p[2];
  char v22;
  _QWORD v23[4];
  _BYTE v24[16];
  _QWORD v25[33];

  if (*((_BYTE *)this + 33))
  {
    v4 = *((_QWORD *)this + 5);
    Type = Alembic::AbcGeom::v12::XformOp::getType(a2);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*((_QWORD *)this + 1) + 56 * v4)))
    {
      sub_20BDDBD68((uint64_t)v24);
      v14 = sub_20BDDC1C8(v25, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_20BDDC1C8(v14, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_20BDDBF20(v23, (__int128 *)__p);
      if (v22 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      v16 = sub_20BDDC09C(exception, (uint64_t)v23);
      __cxa_throw(v16, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    if (*(_DWORD *)this != 1)
    {
      sub_20BDDBD68((uint64_t)v24);
      sub_20BDDC1C8(v25, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v23, (__int128 *)__p);
      if (v22 < 0)
        operator delete(__p[0]);
      v17 = __cxa_allocate_exception(0x20uLL);
      v18 = sub_20BDDC09C(v17, (uint64_t)v23);
      __cxa_throw(v18, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v6 = *((_QWORD *)this + 1);
    v7 = (const Alembic::AbcGeom::v12::XformOp *)(v6 + 56 * v4);
    v8 = *(_DWORD *)a2;
    *((_BYTE *)v7 + 4) = *((_BYTE *)a2 + 4);
    *(_DWORD *)v7 = v8;
    if (v7 != a2)
    {
      v9 = v6 + 56 * v4;
      sub_20BDDF7E4((char *)(v9 + 8), *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
      sub_20BE648DC((uint64_t **)(v9 + 32), *((unsigned int **)a2 + 4), (unsigned int *)a2 + 10);
    }
    *((_QWORD *)this + 5) = (*((_QWORD *)this + 5) + 1)
                          % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                             * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3));
  }
  else
  {
    if (*(_DWORD *)this >= 2u)
    {
      sub_20BDDBD68((uint64_t)v24);
      sub_20BDDC1C8(v25, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v23, (__int128 *)__p);
      if (v22 < 0)
        operator delete(__p[0]);
      v19 = __cxa_allocate_exception(0x20uLL);
      v20 = sub_20BDDC09C(v19, (uint64_t)v23);
      __cxa_throw(v20, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    *(_DWORD *)this = 1;
    v10 = *((_QWORD *)this + 2);
    v11 = (char *)this + 24;
    if (v10 >= *((_QWORD *)this + 3))
    {
      v12 = sub_20BE64EFC((uint64_t *)this + 1, (int *)a2);
    }
    else
    {
      sub_20BE65020((uint64_t)v11, *((_QWORD *)this + 2), (int *)a2);
      v12 = v10 + 56;
      *((_QWORD *)this + 2) = v10 + 56;
    }
    *((_QWORD *)this + 2) = v12;
    return 0x6DB6DB6DB6DB6DB7 * ((v12 - *((_QWORD *)this + 1)) >> 3) - 1;
  }
  return v4;
}

void sub_20BE620A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *Alembic::AbcGeom::v12::XformSample::getOp@<X0>(Alembic::AbcGeom::v12::XformSample *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;

  v4 = *((_QWORD *)this + 1) + 56 * a2;
  v5 = *(_BYTE *)(v4 + 4);
  *(_DWORD *)a3 = *(_DWORD *)v4;
  *(_BYTE *)(a3 + 4) = v5;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  sub_20BDDF5DC((_QWORD *)(a3 + 8), *(const void **)(v4 + 8), *(_QWORD *)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 3);
  return sub_20BE64B88((uint64_t *)(a3 + 32), v4 + 32);
}

void sub_20BE6215C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Alembic::AbcGeom::v12::XformSample::operator[](uint64_t a1, _QWORD *a2)
{
  return *(_QWORD *)(a1 + 8) + 56 * *a2;
}

{
  return *(_QWORD *)(a1 + 8) + 56 * *a2;
}

uint64_t Alembic::AbcGeom::v12::XformSample::getNumOps(Alembic::AbcGeom::v12::XformSample *this)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
}

uint64_t Alembic::AbcGeom::v12::XformSample::getNumOpChannels(Alembic::AbcGeom::v12::XformSample *this)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) == v1)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v5 += Alembic::AbcGeom::v12::XformOp::getNumChannels((Alembic::AbcGeom::v12::XformOp *)(v1 + v3));
    ++v4;
    v1 = *((_QWORD *)this + 1);
    v3 += 56;
  }
  while (v4 < 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 2) - v1) >> 3));
  return v5;
}

uint64_t Alembic::AbcGeom::v12::XformSample::setInheritsXforms(uint64_t this, char a2)
{
  *(_BYTE *)(this + 32) = a2;
  return this;
}

uint64_t Alembic::AbcGeom::v12::XformSample::getInheritsXforms(Alembic::AbcGeom::v12::XformSample *this)
{
  return *((unsigned __int8 *)this + 32);
}

void Alembic::AbcGeom::v12::XformSample::setTranslation(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  int Type;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *exception;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *__p[2];
  char v20;
  _QWORD v21[4];
  _BYTE v22[16];
  _QWORD v23[33];
  int v24;
  char v25;
  char *v26;
  char *v27;
  unsigned int *v28;
  unsigned int v29[4];

  Alembic::AbcGeom::v12::XformOp::XformOp(&v24, 1, 0);
  for (i = 0; i != 3; ++i)
    Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)&v24, i, *(double *)(a2 + 8 * i));
  if (*(_BYTE *)(a1 + 33))
  {
    if (*(_DWORD *)a1 != 2)
    {
      sub_20BDDBD68((uint64_t)v22);
      sub_20BDDC1C8(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v21, (__int128 *)__p);
      if (v20 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      v13 = sub_20BDDC09C(exception, (uint64_t)v21);
      __cxa_throw(v13, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v5 = *(_QWORD *)(a1 + 40);
    Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)&v24);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*(_QWORD *)(a1 + 8) + 56 * v5)))
    {
      sub_20BDDBD68((uint64_t)v22);
      v14 = sub_20BDDC1C8(v23, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_20BDDC1C8(v14, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_20BDDBF20(v21, (__int128 *)__p);
      if (v20 < 0)
        operator delete(__p[0]);
      v15 = __cxa_allocate_exception(0x20uLL);
      v16 = sub_20BDDC09C(v15, (uint64_t)v21);
      __cxa_throw(v16, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v8 = v7 + 56 * v5;
    v9 = v24;
    *(_BYTE *)(v8 + 4) = v25;
    *(_DWORD *)v8 = v9;
    if ((int *)v8 != &v24)
    {
      sub_20BDDF7E4((char *)(v7 + 56 * v5 + 8), v26, (uint64_t)v27, (v27 - v26) >> 3);
      sub_20BE648DC((uint64_t **)(v7 + 56 * v5 + 32), v28, v29);
    }
    *(_QWORD *)(a1 + 40) = (*(_QWORD *)(a1 + 40) + 1)
                         % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                            * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  }
  else
  {
    if ((*(_DWORD *)a1 | 2) != 2)
    {
      sub_20BDDBD68((uint64_t)v22);
      sub_20BDDC1C8(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v21, (__int128 *)__p);
      if (v20 < 0)
        operator delete(__p[0]);
      v17 = __cxa_allocate_exception(0x20uLL);
      v18 = sub_20BDDC09C(v17, (uint64_t)v21);
      __cxa_throw(v18, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    *(_DWORD *)a1 = 2;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 >= *(_QWORD *)(a1 + 24))
    {
      v11 = sub_20BE64EFC((uint64_t *)(a1 + 8), &v24);
    }
    else
    {
      sub_20BE65020(a1 + 24, *(_QWORD *)(a1 + 16), &v24);
      v11 = v10 + 56;
      *(_QWORD *)(a1 + 16) = v10 + 56;
    }
    *(_QWORD *)(a1 + 16) = v11;
  }
  sub_20BE6100C((uint64_t)&v28, *(_QWORD **)v29);
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
}

void sub_20BE62570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  std::exception v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7.__vftable = va_arg(va1, std::exception_vtbl *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  sub_20BE625E4(v5 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE625E4(uint64_t a1)
{
  void *v2;

  sub_20BE6100C(a1 + 32, *(_QWORD **)(a1 + 40));
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void Alembic::AbcGeom::v12::XformSample::setRotation(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t i;
  uint64_t v7;
  int Type;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *__p[2];
  char v22;
  _QWORD v23[4];
  _BYTE v24[16];
  _QWORD v25[33];
  int v26;
  char v27;
  char *v28;
  char *v29;
  unsigned int *v30;
  unsigned int v31[4];

  Alembic::AbcGeom::v12::XformOp::XformOp(&v26, 2, 0);
  for (i = 0; i != 3; ++i)
    Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)&v26, i, *(double *)(a2 + 8 * i));
  Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)&v26, 3, a3);
  if (*(_BYTE *)(a1 + 33))
  {
    if (*(_DWORD *)a1 != 2)
    {
      sub_20BDDBD68((uint64_t)v24);
      sub_20BDDC1C8(v25, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v23, (__int128 *)__p);
      if (v22 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      v15 = sub_20BDDC09C(exception, (uint64_t)v23);
      __cxa_throw(v15, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v7 = *(_QWORD *)(a1 + 40);
    Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)&v26);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*(_QWORD *)(a1 + 8) + 56 * v7)))
    {
      sub_20BDDBD68((uint64_t)v24);
      v16 = sub_20BDDC1C8(v25, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_20BDDC1C8(v16, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_20BDDBF20(v23, (__int128 *)__p);
      if (v22 < 0)
        operator delete(__p[0]);
      v17 = __cxa_allocate_exception(0x20uLL);
      v18 = sub_20BDDC09C(v17, (uint64_t)v23);
      __cxa_throw(v18, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v10 = v9 + 56 * v7;
    v11 = v26;
    *(_BYTE *)(v10 + 4) = v27;
    *(_DWORD *)v10 = v11;
    if ((int *)v10 != &v26)
    {
      sub_20BDDF7E4((char *)(v9 + 56 * v7 + 8), v28, (uint64_t)v29, (v29 - v28) >> 3);
      sub_20BE648DC((uint64_t **)(v9 + 56 * v7 + 32), v30, v31);
    }
    *(_QWORD *)(a1 + 40) = (*(_QWORD *)(a1 + 40) + 1)
                         % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                            * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  }
  else
  {
    if ((*(_DWORD *)a1 | 2) != 2)
    {
      sub_20BDDBD68((uint64_t)v24);
      sub_20BDDC1C8(v25, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v23, (__int128 *)__p);
      if (v22 < 0)
        operator delete(__p[0]);
      v19 = __cxa_allocate_exception(0x20uLL);
      v20 = sub_20BDDC09C(v19, (uint64_t)v23);
      __cxa_throw(v20, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    *(_DWORD *)a1 = 2;
    v12 = *(_QWORD *)(a1 + 16);
    if (v12 >= *(_QWORD *)(a1 + 24))
    {
      v13 = sub_20BE64EFC((uint64_t *)(a1 + 8), &v26);
    }
    else
    {
      sub_20BE65020(a1 + 24, *(_QWORD *)(a1 + 16), &v26);
      v13 = v12 + 56;
      *(_QWORD *)(a1 + 16) = v12 + 56;
    }
    *(_QWORD *)(a1 + 16) = v13;
  }
  sub_20BE6100C((uint64_t)&v30, *(_QWORD **)v31);
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
}

void sub_20BE6294C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  std::exception v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7.__vftable = va_arg(va1, std::exception_vtbl *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  sub_20BE625E4(v5 - 104);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformSample::setScale(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  int Type;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *exception;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *__p[2];
  char v20;
  _QWORD v21[4];
  _BYTE v22[16];
  _QWORD v23[33];
  int v24;
  char v25;
  char *v26;
  char *v27;
  unsigned int *v28;
  unsigned int v29[4];

  Alembic::AbcGeom::v12::XformOp::XformOp(&v24, 0, 0);
  for (i = 0; i != 3; ++i)
    Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)&v24, i, *(double *)(a2 + 8 * i));
  if (*(_BYTE *)(a1 + 33))
  {
    if (*(_DWORD *)a1 != 2)
    {
      sub_20BDDBD68((uint64_t)v22);
      sub_20BDDC1C8(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v21, (__int128 *)__p);
      if (v20 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      v13 = sub_20BDDC09C(exception, (uint64_t)v21);
      __cxa_throw(v13, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v5 = *(_QWORD *)(a1 + 40);
    Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)&v24);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*(_QWORD *)(a1 + 8) + 56 * v5)))
    {
      sub_20BDDBD68((uint64_t)v22);
      v14 = sub_20BDDC1C8(v23, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_20BDDC1C8(v14, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_20BDDBF20(v21, (__int128 *)__p);
      if (v20 < 0)
        operator delete(__p[0]);
      v15 = __cxa_allocate_exception(0x20uLL);
      v16 = sub_20BDDC09C(v15, (uint64_t)v21);
      __cxa_throw(v16, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v8 = v7 + 56 * v5;
    v9 = v24;
    *(_BYTE *)(v8 + 4) = v25;
    *(_DWORD *)v8 = v9;
    if ((int *)v8 != &v24)
    {
      sub_20BDDF7E4((char *)(v7 + 56 * v5 + 8), v26, (uint64_t)v27, (v27 - v26) >> 3);
      sub_20BE648DC((uint64_t **)(v7 + 56 * v5 + 32), v28, v29);
    }
    *(_QWORD *)(a1 + 40) = (*(_QWORD *)(a1 + 40) + 1)
                         % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                            * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  }
  else
  {
    if ((*(_DWORD *)a1 | 2) != 2)
    {
      sub_20BDDBD68((uint64_t)v22);
      sub_20BDDC1C8(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v21, (__int128 *)__p);
      if (v20 < 0)
        operator delete(__p[0]);
      v17 = __cxa_allocate_exception(0x20uLL);
      v18 = sub_20BDDC09C(v17, (uint64_t)v21);
      __cxa_throw(v18, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    *(_DWORD *)a1 = 2;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 >= *(_QWORD *)(a1 + 24))
    {
      v11 = sub_20BE64EFC((uint64_t *)(a1 + 8), &v24);
    }
    else
    {
      sub_20BE65020(a1 + 24, *(_QWORD *)(a1 + 16), &v24);
      v11 = v10 + 56;
      *(_QWORD *)(a1 + 16) = v10 + 56;
    }
    *(_QWORD *)(a1 + 16) = v11;
  }
  sub_20BE6100C((uint64_t)&v28, *(_QWORD **)v29);
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
}

void sub_20BE62CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  std::exception v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7.__vftable = va_arg(va1, std::exception_vtbl *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  sub_20BE625E4(v5 - 88);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformSample::setXRotation(Alembic::AbcGeom::v12::XformSample *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  int Type;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *exception;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *__p[2];
  char v20;
  _QWORD v21[4];
  _BYTE v22[16];
  _QWORD v23[33];
  int v24;
  char v25;
  char *v26;
  char *v27;
  unsigned int *v28;
  unsigned int v29[4];

  v4 = Alembic::AbcGeom::v12::XformOp::XformOp(&v24, 4, 0);
  Alembic::AbcGeom::v12::XformOp::setChannelValue(v4, 0, a2);
  if (*((_BYTE *)this + 33))
  {
    if (*(_DWORD *)this != 2)
    {
      sub_20BDDBD68((uint64_t)v22);
      sub_20BDDC1C8(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v21, (__int128 *)__p);
      if (v20 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      v13 = sub_20BDDC09C(exception, (uint64_t)v21);
      __cxa_throw(v13, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v5 = *((_QWORD *)this + 5);
    Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)&v24);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*((_QWORD *)this + 1) + 56 * v5)))
    {
      sub_20BDDBD68((uint64_t)v22);
      v14 = sub_20BDDC1C8(v23, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_20BDDC1C8(v14, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_20BDDBF20(v21, (__int128 *)__p);
      if (v20 < 0)
        operator delete(__p[0]);
      v15 = __cxa_allocate_exception(0x20uLL);
      v16 = sub_20BDDC09C(v15, (uint64_t)v21);
      __cxa_throw(v16, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v7 = *((_QWORD *)this + 1);
    v8 = v7 + 56 * v5;
    v9 = v24;
    *(_BYTE *)(v8 + 4) = v25;
    *(_DWORD *)v8 = v9;
    if ((int *)v8 != &v24)
    {
      sub_20BDDF7E4((char *)(v7 + 56 * v5 + 8), v26, (uint64_t)v27, (v27 - v26) >> 3);
      sub_20BE648DC((uint64_t **)(v7 + 56 * v5 + 32), v28, v29);
    }
    *((_QWORD *)this + 5) = (*((_QWORD *)this + 5) + 1)
                          % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                             * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3));
  }
  else
  {
    if ((*(_DWORD *)this | 2) != 2)
    {
      sub_20BDDBD68((uint64_t)v22);
      sub_20BDDC1C8(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v21, (__int128 *)__p);
      if (v20 < 0)
        operator delete(__p[0]);
      v17 = __cxa_allocate_exception(0x20uLL);
      v18 = sub_20BDDC09C(v17, (uint64_t)v21);
      __cxa_throw(v18, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    *(_DWORD *)this = 2;
    v10 = *((_QWORD *)this + 2);
    if (v10 >= *((_QWORD *)this + 3))
    {
      v11 = sub_20BE64EFC((uint64_t *)this + 1, &v24);
    }
    else
    {
      sub_20BE65020((uint64_t)this + 24, *((_QWORD *)this + 2), &v24);
      v11 = v10 + 56;
      *((_QWORD *)this + 2) = v10 + 56;
    }
    *((_QWORD *)this + 2) = v11;
  }
  sub_20BE6100C((uint64_t)&v28, *(_QWORD **)v29);
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
}

void sub_20BE63048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  std::exception v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7.__vftable = va_arg(va1, std::exception_vtbl *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  sub_20BE625E4(v5 - 104);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformSample::setYRotation(Alembic::AbcGeom::v12::XformSample *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  int Type;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *exception;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *__p[2];
  char v20;
  _QWORD v21[4];
  _BYTE v22[16];
  _QWORD v23[33];
  int v24;
  char v25;
  char *v26;
  char *v27;
  unsigned int *v28;
  unsigned int v29[4];

  v4 = Alembic::AbcGeom::v12::XformOp::XformOp(&v24, 5, 0);
  Alembic::AbcGeom::v12::XformOp::setChannelValue(v4, 0, a2);
  if (*((_BYTE *)this + 33))
  {
    if (*(_DWORD *)this != 2)
    {
      sub_20BDDBD68((uint64_t)v22);
      sub_20BDDC1C8(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v21, (__int128 *)__p);
      if (v20 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      v13 = sub_20BDDC09C(exception, (uint64_t)v21);
      __cxa_throw(v13, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v5 = *((_QWORD *)this + 5);
    Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)&v24);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*((_QWORD *)this + 1) + 56 * v5)))
    {
      sub_20BDDBD68((uint64_t)v22);
      v14 = sub_20BDDC1C8(v23, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_20BDDC1C8(v14, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_20BDDBF20(v21, (__int128 *)__p);
      if (v20 < 0)
        operator delete(__p[0]);
      v15 = __cxa_allocate_exception(0x20uLL);
      v16 = sub_20BDDC09C(v15, (uint64_t)v21);
      __cxa_throw(v16, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v7 = *((_QWORD *)this + 1);
    v8 = v7 + 56 * v5;
    v9 = v24;
    *(_BYTE *)(v8 + 4) = v25;
    *(_DWORD *)v8 = v9;
    if ((int *)v8 != &v24)
    {
      sub_20BDDF7E4((char *)(v7 + 56 * v5 + 8), v26, (uint64_t)v27, (v27 - v26) >> 3);
      sub_20BE648DC((uint64_t **)(v7 + 56 * v5 + 32), v28, v29);
    }
    *((_QWORD *)this + 5) = (*((_QWORD *)this + 5) + 1)
                          % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                             * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3));
  }
  else
  {
    if ((*(_DWORD *)this | 2) != 2)
    {
      sub_20BDDBD68((uint64_t)v22);
      sub_20BDDC1C8(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v21, (__int128 *)__p);
      if (v20 < 0)
        operator delete(__p[0]);
      v17 = __cxa_allocate_exception(0x20uLL);
      v18 = sub_20BDDC09C(v17, (uint64_t)v21);
      __cxa_throw(v18, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    *(_DWORD *)this = 2;
    v10 = *((_QWORD *)this + 2);
    if (v10 >= *((_QWORD *)this + 3))
    {
      v11 = sub_20BE64EFC((uint64_t *)this + 1, &v24);
    }
    else
    {
      sub_20BE65020((uint64_t)this + 24, *((_QWORD *)this + 2), &v24);
      v11 = v10 + 56;
      *((_QWORD *)this + 2) = v10 + 56;
    }
    *((_QWORD *)this + 2) = v11;
  }
  sub_20BE6100C((uint64_t)&v28, *(_QWORD **)v29);
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
}

void sub_20BE633BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  std::exception v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7.__vftable = va_arg(va1, std::exception_vtbl *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  sub_20BE625E4(v5 - 104);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformSample::setZRotation(Alembic::AbcGeom::v12::XformSample *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  int Type;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *exception;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *__p[2];
  char v20;
  _QWORD v21[4];
  _BYTE v22[16];
  _QWORD v23[33];
  int v24;
  char v25;
  char *v26;
  char *v27;
  unsigned int *v28;
  unsigned int v29[4];

  v4 = Alembic::AbcGeom::v12::XformOp::XformOp(&v24, 6, 0);
  Alembic::AbcGeom::v12::XformOp::setChannelValue(v4, 0, a2);
  if (*((_BYTE *)this + 33))
  {
    if (*(_DWORD *)this != 2)
    {
      sub_20BDDBD68((uint64_t)v22);
      sub_20BDDC1C8(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v21, (__int128 *)__p);
      if (v20 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      v13 = sub_20BDDC09C(exception, (uint64_t)v21);
      __cxa_throw(v13, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v5 = *((_QWORD *)this + 5);
    Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)&v24);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*((_QWORD *)this + 1) + 56 * v5)))
    {
      sub_20BDDBD68((uint64_t)v22);
      v14 = sub_20BDDC1C8(v23, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_20BDDC1C8(v14, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_20BDDBF20(v21, (__int128 *)__p);
      if (v20 < 0)
        operator delete(__p[0]);
      v15 = __cxa_allocate_exception(0x20uLL);
      v16 = sub_20BDDC09C(v15, (uint64_t)v21);
      __cxa_throw(v16, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v7 = *((_QWORD *)this + 1);
    v8 = v7 + 56 * v5;
    v9 = v24;
    *(_BYTE *)(v8 + 4) = v25;
    *(_DWORD *)v8 = v9;
    if ((int *)v8 != &v24)
    {
      sub_20BDDF7E4((char *)(v7 + 56 * v5 + 8), v26, (uint64_t)v27, (v27 - v26) >> 3);
      sub_20BE648DC((uint64_t **)(v7 + 56 * v5 + 32), v28, v29);
    }
    *((_QWORD *)this + 5) = (*((_QWORD *)this + 5) + 1)
                          % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                             * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3));
  }
  else
  {
    if ((*(_DWORD *)this | 2) != 2)
    {
      sub_20BDDBD68((uint64_t)v22);
      sub_20BDDC1C8(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v21, (__int128 *)__p);
      if (v20 < 0)
        operator delete(__p[0]);
      v17 = __cxa_allocate_exception(0x20uLL);
      v18 = sub_20BDDC09C(v17, (uint64_t)v21);
      __cxa_throw(v18, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    *(_DWORD *)this = 2;
    v10 = *((_QWORD *)this + 2);
    if (v10 >= *((_QWORD *)this + 3))
    {
      v11 = sub_20BE64EFC((uint64_t *)this + 1, &v24);
    }
    else
    {
      sub_20BE65020((uint64_t)this + 24, *((_QWORD *)this + 2), &v24);
      v11 = v10 + 56;
      *((_QWORD *)this + 2) = v10 + 56;
    }
    *((_QWORD *)this + 2) = v11;
  }
  sub_20BE6100C((uint64_t)&v28, *(_QWORD **)v29);
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
}

void sub_20BE63730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  std::exception v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7.__vftable = va_arg(va1, std::exception_vtbl *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  sub_20BE625E4(v5 - 104);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformSample::setMatrix(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t j;
  uint64_t v7;
  int Type;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *__p[2];
  char v22;
  _QWORD v23[4];
  _BYTE v24[16];
  _QWORD v25[33];
  int v26;
  char v27;
  char *v28;
  char *v29;
  unsigned int *v30;
  unsigned int v31[4];

  Alembic::AbcGeom::v12::XformOp::XformOp(&v26, 3, 0);
  v4 = 0;
  for (i = 0; i != 4; ++i)
  {
    for (j = 0; j != 4; ++j)
      Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)&v26, v4 + j, *(double *)(a2 + 8 * j));
    v4 += 4;
    a2 += 32;
  }
  if (*(_BYTE *)(a1 + 33))
  {
    if (*(_DWORD *)a1 != 2)
    {
      sub_20BDDBD68((uint64_t)v24);
      sub_20BDDC1C8(v25, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v23, (__int128 *)__p);
      if (v22 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      v15 = sub_20BDDC09C(exception, (uint64_t)v23);
      __cxa_throw(v15, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v7 = *(_QWORD *)(a1 + 40);
    Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)&v26);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*(_QWORD *)(a1 + 8) + 56 * v7)))
    {
      sub_20BDDBD68((uint64_t)v24);
      v16 = sub_20BDDC1C8(v25, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_20BDDC1C8(v16, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_20BDDBF20(v23, (__int128 *)__p);
      if (v22 < 0)
        operator delete(__p[0]);
      v17 = __cxa_allocate_exception(0x20uLL);
      v18 = sub_20BDDC09C(v17, (uint64_t)v23);
      __cxa_throw(v18, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v10 = v9 + 56 * v7;
    v11 = v26;
    *(_BYTE *)(v10 + 4) = v27;
    *(_DWORD *)v10 = v11;
    if ((int *)v10 != &v26)
    {
      sub_20BDDF7E4((char *)(v9 + 56 * v7 + 8), v28, (uint64_t)v29, (v29 - v28) >> 3);
      sub_20BE648DC((uint64_t **)(v9 + 56 * v7 + 32), v30, v31);
    }
    *(_QWORD *)(a1 + 40) = (*(_QWORD *)(a1 + 40) + 1)
                         % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                            * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  }
  else
  {
    if ((*(_DWORD *)a1 | 2) != 2)
    {
      sub_20BDDBD68((uint64_t)v24);
      sub_20BDDC1C8(v25, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_20BDDBF20(v23, (__int128 *)__p);
      if (v22 < 0)
        operator delete(__p[0]);
      v19 = __cxa_allocate_exception(0x20uLL);
      v20 = sub_20BDDC09C(v19, (uint64_t)v23);
      __cxa_throw(v20, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    *(_DWORD *)a1 = 2;
    v12 = *(_QWORD *)(a1 + 16);
    if (v12 >= *(_QWORD *)(a1 + 24))
    {
      v13 = sub_20BE64EFC((uint64_t *)(a1 + 8), &v26);
    }
    else
    {
      sub_20BE65020(a1 + 24, *(_QWORD *)(a1 + 16), &v26);
      v13 = v12 + 56;
      *(_QWORD *)(a1 + 16) = v12 + 56;
    }
    *(_QWORD *)(a1 + 16) = v13;
  }
  sub_20BE6100C((uint64_t)&v30, *(_QWORD **)v31);
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
}

void sub_20BE63AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  std::exception v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7.__vftable = va_arg(va1, std::exception_vtbl *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  sub_20BE625E4(v5 - 104);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformSample::getMatrix(Alembic::AbcGeom::v12::XformSample *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int *v11;
  int v12;
  int Type;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t i;
  double v18;
  double v19;
  __int128 v20;
  double ChannelValue;
  __double2 v22;
  double v23;
  __double2 v24;
  double v25;
  __double2 v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  __double2 v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v67;
  int v68;
  char v69;
  void *__p;
  void *v71;
  uint64_t v72;
  uint64_t v73[3];
  double v74;
  __int128 v75;
  __int128 v76;
  double v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[24];
  __int128 v81;
  double v82;

  *(_QWORD *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  v3 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) != v3)
  {
    v4 = 0;
    v5 = 1.0;
    v6 = 0.0;
    v7 = 1.0;
    v8 = 0.0;
    v9 = 1.0;
    v10 = 0.0;
    v67 = 1.0;
    while (1)
    {
      v75 = 0u;
      v76 = 0u;
      v74 = 1.0;
      v77 = 1.0;
      v78 = 0u;
      v79 = 0u;
      *(_OWORD *)&v80[8] = 0u;
      v81 = 0u;
      *(_QWORD *)v80 = 0x3FF0000000000000;
      v82 = 1.0;
      v11 = (int *)(v3 + 56 * v4);
      v12 = *v11;
      v69 = *((_BYTE *)v11 + 4);
      v68 = v12;
      v71 = 0;
      v72 = 0;
      __p = 0;
      sub_20BDDF5DC(&__p, *((const void **)v11 + 1), *((_QWORD *)v11 + 2), (uint64_t)(*((_QWORD *)v11 + 2) - *((_QWORD *)v11 + 1)) >> 3);
      sub_20BE64B88(v73, (uint64_t)(v11 + 8));
      Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)&v68);
      switch(Type)
      {
        case 3:
          v14 = 0;
          v15 = 0;
          v16 = &v74;
          do
          {
            for (i = 0; i != 4; ++i)
              v16[i] = Alembic::AbcGeom::v12::XformOp::getChannelValue((Alembic::AbcGeom::v12::XformOp *)&v68, v14 + i);
            ++v15;
            v14 += 4;
            v16 += 4;
          }
          while (v15 != 4);
          goto LABEL_19;
        case 4:
          ChannelValue = Alembic::AbcGeom::v12::XformOp::getChannelValue((Alembic::AbcGeom::v12::XformOp *)&v68, 0);
          v22 = __sincos_stret(ChannelValue * 3.14159265 / 180.0);
          v74 = v22.__cosval + 1.0 - v22.__cosval;
          *(double *)&v75 = v22.__sinval * 0.0 + (1.0 - v22.__cosval) * 0.0;
          *((double *)&v75 + 1) = v22.__sinval * -0.0 + (1.0 - v22.__cosval) * 0.0;
          *(_QWORD *)&v76 = 0;
          *((double *)&v76 + 1) = *((double *)&v75 + 1);
          v77 = v22.__cosval + (1.0 - v22.__cosval) * 0.0;
          *(double *)&v78 = v22.__sinval + (1.0 - v22.__cosval) * 0.0;
          *((_QWORD *)&v78 + 1) = 0;
          *(double *)&v79 = *(double *)&v75;
          *((double *)&v79 + 1) = -(v22.__sinval - (1.0 - v22.__cosval) * 0.0);
          *(double *)v80 = v77;
          goto LABEL_16;
        case 5:
          v23 = Alembic::AbcGeom::v12::XformOp::getChannelValue((Alembic::AbcGeom::v12::XformOp *)&v68, 0);
          v24 = __sincos_stret(v23 * 3.14159265 / 180.0);
          v74 = v24.__cosval + (1.0 - v24.__cosval) * 0.0;
          *(double *)&v75 = v24.__sinval * 0.0 + (1.0 - v24.__cosval) * 0.0;
          *((double *)&v75 + 1) = -(v24.__sinval - (1.0 - v24.__cosval) * 0.0);
          *(_QWORD *)&v76 = 0;
          *((double *)&v76 + 1) = v24.__sinval * -0.0 + (1.0 - v24.__cosval) * 0.0;
          v77 = v24.__cosval + 1.0 - v24.__cosval;
          *(double *)&v78 = *(double *)&v75;
          *((_QWORD *)&v78 + 1) = 0;
          *(double *)&v79 = v24.__sinval + (1.0 - v24.__cosval) * 0.0;
          *((double *)&v79 + 1) = *((double *)&v76 + 1);
          *(double *)v80 = v74;
          goto LABEL_16;
        case 6:
          v25 = Alembic::AbcGeom::v12::XformOp::getChannelValue((Alembic::AbcGeom::v12::XformOp *)&v68, 0);
          v26 = __sincos_stret(v25 * 3.14159265 / 180.0);
          v74 = v26.__cosval + (1.0 - v26.__cosval) * 0.0;
          *(double *)&v75 = v26.__sinval + (1.0 - v26.__cosval) * 0.0;
          *((double *)&v75 + 1) = v26.__sinval * -0.0 + (1.0 - v26.__cosval) * 0.0;
          *(_QWORD *)&v76 = 0;
          *((double *)&v76 + 1) = -(v26.__sinval - (1.0 - v26.__cosval) * 0.0);
          v77 = v74;
          *(double *)&v78 = v26.__sinval * 0.0 + (1.0 - v26.__cosval) * 0.0;
          *((_QWORD *)&v78 + 1) = 0;
          *(double *)&v79 = *(double *)&v78;
          *((double *)&v79 + 1) = *((double *)&v75 + 1);
          *(double *)v80 = v26.__cosval + 1.0 - v26.__cosval;
LABEL_16:
          v20 = 0uLL;
          goto LABEL_17;
        default:
          v65 = Alembic::AbcGeom::v12::XformOp::getChannelValue((Alembic::AbcGeom::v12::XformOp *)&v68, 0);
          v18 = Alembic::AbcGeom::v12::XformOp::getChannelValue((Alembic::AbcGeom::v12::XformOp *)&v68, 1uLL);
          v19 = Alembic::AbcGeom::v12::XformOp::getChannelValue((Alembic::AbcGeom::v12::XformOp *)&v68, 2uLL);
          if (Type == 2)
          {
            v53 = Alembic::AbcGeom::v12::XformOp::getChannelValue((Alembic::AbcGeom::v12::XformOp *)&v68, 3uLL);
            v54 = v18 * v18 + v65 * v65 + v19 * v19;
            v64 = v9;
            if (v54 >= 4.45014772e-308)
            {
              v55 = sqrt(v54);
              goto LABEL_25;
            }
            v60 = -v65;
            if (v65 >= 0.0)
              v60 = v65;
            v61 = -v18;
            if (v18 >= 0.0)
              v61 = v18;
            if (v19 >= 0.0)
              v62 = v19;
            else
              v62 = -v19;
            if (v60 >= v61)
              v63 = v60;
            else
              v63 = v61;
            if (v63 < v62)
              v63 = v62;
            if (v63 == 0.0)
              goto LABEL_43;
            v55 = v63 * sqrt(v61 / v63 * (v61 / v63) + v60 / v63 * (v60 / v63) + v62 / v63 * (v62 / v63));
LABEL_25:
            if (v55 == 0.0)
            {
LABEL_43:
              v57 = 0.0;
              v56 = 0.0;
              v58 = 0.0;
            }
            else
            {
              v56 = v18 / v55;
              v57 = v65 / v55;
              v58 = v19 / v55;
            }
            v59 = __sincos_stret(v53 * 3.14159265 / 180.0);
            v74 = v59.__cosval + v57 * v57 * (1.0 - v59.__cosval);
            *(double *)&v75 = v59.__sinval * v58 + v57 * v56 * (1.0 - v59.__cosval);
            *((double *)&v75 + 1) = v57 * v58 * (1.0 - v59.__cosval) - v56 * v59.__sinval;
            *(_QWORD *)&v76 = 0;
            *((double *)&v76 + 1) = v57 * v56 * (1.0 - v59.__cosval) - v58 * v59.__sinval;
            v77 = v59.__cosval + v56 * v56 * (1.0 - v59.__cosval);
            *(double *)&v78 = v59.__sinval * v57 + v56 * v58 * (1.0 - v59.__cosval);
            *((_QWORD *)&v78 + 1) = 0;
            *(double *)&v79 = v59.__sinval * v56 + v57 * v58 * (1.0 - v59.__cosval);
            *((double *)&v79 + 1) = v56 * v58 * (1.0 - v59.__cosval) - v57 * v59.__sinval;
            *(double *)v80 = v59.__cosval + v58 * v58 * (1.0 - v59.__cosval);
            *(_OWORD *)&v80[8] = 0u;
            v81 = 0u;
            v9 = v64;
            goto LABEL_18;
          }
          if (Type == 1)
          {
            v75 = 0u;
            v76 = 0u;
            v74 = 1.0;
            v77 = 1.0;
            v78 = 0u;
            v79 = 0u;
            *(_OWORD *)v80 = xmmword_20CA527E0;
            *(double *)&v80[16] = v65;
            *(double *)&v81 = v18;
            *((double *)&v81 + 1) = v19;
          }
          else
          {
            if (Type)
              goto LABEL_19;
            v20 = 0uLL;
            v75 = 0u;
            v76 = 0u;
            v74 = v65;
            v77 = v18;
            v78 = 0u;
            v79 = 0u;
            *(double *)v80 = v19;
LABEL_17:
            *(_OWORD *)&v80[8] = v20;
            v81 = v20;
          }
LABEL_18:
          v82 = 1.0;
LABEL_19:
          v28 = *(double *)(a2 + 24);
          v27 = *(double *)(a2 + 32);
          v30 = *(double *)(a2 + 56);
          v29 = *(double *)(a2 + 64);
          v31 = *(double *)(a2 + 96);
          v32 = *(double *)(a2 + 104);
          v33 = *(double *)&v75 * v27 + v74 * v5 + *((double *)&v75 + 1) * v29 + *(double *)&v76 * v31;
          v34 = *(double *)(a2 + 72);
          v35 = v6;
          v6 = *(double *)&v75 * v7 + v74 * v6 + *((double *)&v75 + 1) * v34 + *(double *)&v76 * v32;
          v36 = *(double *)(a2 + 16);
          v37 = *(double *)(a2 + 112);
          v38 = *(double *)&v75 * v8 + v74 * v36 + *((double *)&v75 + 1) * v9 + *(double *)&v76 * v37;
          v39 = *(double *)&v75 * v30 + v74 * v28 + *((double *)&v75 + 1) * v10 + *(double *)&v76 * v67;
          v40 = v27 * v77 + *((double *)&v76 + 1) * v5 + *(double *)&v78 * v29 + *((double *)&v78 + 1) * v31;
          v41 = v7 * v77 + *((double *)&v76 + 1) * v35 + *(double *)&v78 * v34 + *((double *)&v78 + 1) * v32;
          v42 = v8;
          v8 = v8 * v77 + *((double *)&v76 + 1) * v36 + *(double *)&v78 * v9 + *((double *)&v78 + 1) * v37;
          v43 = v30 * v77 + *((double *)&v76 + 1) * v28 + *(double *)&v78 * v10 + *((double *)&v78 + 1) * v67;
          v44 = v27 * *((double *)&v79 + 1) + *(double *)&v79 * v5 + *(double *)v80 * v29 + *(double *)&v80[8] * v31;
          v45 = v7 * *((double *)&v79 + 1) + *(double *)&v79 * v35 + *(double *)v80 * v34 + *(double *)&v80[8] * v32;
          v46 = v9;
          v9 = v42 * *((double *)&v79 + 1) + *(double *)&v79 * v36 + *(double *)v80 * v9 + *(double *)&v80[8] * v37;
          v47 = v10;
          v10 = v30 * *((double *)&v79 + 1) + *(double *)&v79 * v28 + *(double *)v80 * v10 + *(double *)&v80[8] * v67;
          v48 = v82;
          v49 = v27 * *(double *)&v81 + *(double *)&v80[16] * v5 + *((double *)&v81 + 1) * v29 + v82 * v31;
          v50 = v7 * *(double *)&v81 + *(double *)&v80[16] * v35 + *((double *)&v81 + 1) * v34 + v82 * v32;
          v51 = v42 * *(double *)&v81 + *(double *)&v80[16] * v36 + *((double *)&v81 + 1) * v46 + v82 * v37;
          v52 = v30 * *(double *)&v81 + *(double *)&v80[16] * v28 + *((double *)&v81 + 1) * v47;
          *(double *)a2 = v33;
          *(double *)(a2 + 8) = v6;
          *(double *)(a2 + 16) = v38;
          *(double *)(a2 + 24) = v39;
          *(double *)(a2 + 32) = v40;
          *(double *)(a2 + 40) = v41;
          *(double *)(a2 + 48) = v8;
          *(double *)(a2 + 56) = v43;
          *(double *)(a2 + 64) = v44;
          *(double *)(a2 + 72) = v45;
          *(double *)(a2 + 80) = v9;
          *(double *)(a2 + 88) = v10;
          *(double *)(a2 + 96) = v49;
          *(double *)(a2 + 104) = v50;
          *(double *)(a2 + 112) = v51;
          *(double *)(a2 + 120) = v52 + v48 * v67;
          v67 = v52 + v48 * v67;
          sub_20BE6100C((uint64_t)v73, (_QWORD *)v73[1]);
          if (__p)
          {
            v71 = __p;
            operator delete(__p);
          }
          ++v4;
          v3 = *((_QWORD *)this + 1);
          v5 = v33;
          v7 = v41;
          if (v4 >= 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 2) - v3) >> 3))
            return;
          break;
      }
    }
  }
}

void sub_20BE64258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19)
{
  sub_20BE625E4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

double Alembic::AbcGeom::v12::XformSample::getTranslation@<D0>(Alembic::AbcGeom::v12::XformSample *this@<X0>, uint64_t a2@<X8>)
{
  double result;
  _OWORD v4[7];
  double v5;

  Alembic::AbcGeom::v12::XformSample::getMatrix(this, (uint64_t)v4);
  result = v5;
  *(_OWORD *)a2 = v4[6];
  *(double *)(a2 + 16) = result;
  return result;
}

BOOL Alembic::AbcGeom::v12::XformSample::getScale@<W0>(Alembic::AbcGeom::v12::XformSample *this@<X0>, float64x2_t *a2@<X8>)
{
  _OWORD v4[8];

  Alembic::AbcGeom::v12::XformSample::getMatrix(this, (uint64_t)v4);
  return sub_20BE64310(v4, a2, 1);
}

BOOL sub_20BE64310(_OWORD *a1, float64x2_t *a2, int a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[8];
  double v9[3];

  v3 = a1[1];
  v8[0] = *a1;
  v8[1] = v3;
  v4 = a1[3];
  v8[2] = a1[2];
  v8[3] = v4;
  v5 = a1[5];
  v8[4] = a1[4];
  v8[5] = v5;
  v6 = a1[7];
  v8[6] = a1[6];
  v8[7] = v6;
  return sub_20BE6536C((uint64_t)v8, a2, v9, a3);
}

double *Alembic::AbcGeom::v12::XformSample::getAxis@<X0>(Alembic::AbcGeom::v12::XformSample *this@<X0>, double *a2@<X8>)
{
  double *result;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13[16];
  double v14;
  double v15;
  double v16;
  double v17;

  Alembic::AbcGeom::v12::XformSample::getMatrix(this, (uint64_t)v13);
  result = sub_20BE64444(v13, &v14);
  v4 = v16 * v16 + v15 * v15 + v17 * v17;
  if (v4 < 4.45014772e-308)
  {
    v9 = -v15;
    if (v15 >= 0.0)
      v9 = v15;
    v10 = -v16;
    if (v16 >= 0.0)
      v10 = v16;
    if (v17 >= 0.0)
      v11 = v17;
    else
      v11 = -v17;
    if (v9 >= v10)
      v12 = v9;
    else
      v12 = v10;
    if (v12 < v11)
      v12 = v11;
    if (v12 == 0.0)
      goto LABEL_20;
    v5 = v12 * sqrt(v10 / v12 * (v10 / v12) + v9 / v12 * (v9 / v12) + v11 / v12 * (v11 / v12));
  }
  else
  {
    v5 = sqrt(v4);
  }
  if (v5 == 0.0)
  {
LABEL_20:
    v6 = 0.0;
    v7 = 0.0;
    v8 = 0.0;
    goto LABEL_5;
  }
  v6 = v15 / v5;
  v7 = v16 / v5;
  v8 = v17 / v5;
LABEL_5:
  *a2 = v6;
  a2[1] = v7;
  a2[2] = v8;
  return result;
}

double *sub_20BE64444@<X0>(double *result@<X0>, double *a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  double *v15;
  double v16;
  _QWORD v17[3];
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = result[5];
  v3 = result[10];
  v4 = *result + v2 + v3;
  if (v4 <= 0.0)
  {
    v10 = v2 > *result;
    if (v3 > result[4 * v10 + v10])
      v10 = 2;
    v11 = dword_20CA527F4[v10];
    v12 = dword_20CA527F4[v11];
    v13 = &result[4 * v10];
    v14 = &result[4 * v11];
    v15 = &result[4 * v12];
    v16 = sqrt(v13[v10] - (v14[v11] + v15[v12]) + 1.0);
    *(double *)&v17[v10] = v16 * 0.5;
    if (v16 != 0.0)
      v16 = 0.5 / v16;
    v18 = (v14[v12] - v15[v11]) * v16;
    *(double *)&v17[v11] = v16 * (v13[v11] + v14[v10]);
    *(double *)&v17[v12] = v16 * (v13[v12] + v15[v10]);
    v7 = *(double *)v17;
    v8 = *(double *)&v17[1];
    v9 = *(double *)&v17[2];
    *a2 = v18;
  }
  else
  {
    v5 = sqrt(v4 + 1.0);
    *a2 = v5 * 0.5;
    v6 = 0.5 / v5;
    v7 = 0.5 / v5 * (result[6] - result[9]);
    v8 = v6 * (result[8] - result[2]);
    v9 = v6 * (result[1] - result[4]);
  }
  a2[1] = v7;
  a2[2] = v8;
  a2[3] = v9;
  return result;
}

long double Alembic::AbcGeom::v12::XformSample::getAngle(Alembic::AbcGeom::v12::XformSample *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  long double v5;
  double v7;
  double v8;
  double v9[16];
  long double v10;
  double v11;
  double v12;
  double v13;

  Alembic::AbcGeom::v12::XformSample::getMatrix(this, (uint64_t)v9);
  sub_20BE64444(v9, &v10);
  v2 = v11;
  v1 = v12;
  v3 = v1 * v1 + v2 * v2 + v13 * v13;
  if (v3 < 4.45014772e-308)
  {
    if (v11 < 0.0)
      v2 = -v11;
    if (v12 < 0.0)
      v1 = -v12;
    v7 = -v13;
    if (v13 >= 0.0)
      v7 = v13;
    if (v2 >= v1)
      v8 = v2;
    else
      v8 = v1;
    if (v8 < v7)
      v8 = v7;
    if (v8 == 0.0)
      v4 = 0.0;
    else
      v4 = v8 * sqrt(v1 / v8 * (v1 / v8) + v2 / v8 * (v2 / v8) + v7 / v8 * (v7 / v8));
  }
  else
  {
    v4 = sqrt(v3);
  }
  v5 = atan2(v4, v10);
  return (v5 + v5) * 57.2957795;
}

double Alembic::AbcGeom::v12::XformSample::getXRotation(Alembic::AbcGeom::v12::XformSample *this)
{
  double v2[16];
  double v3[3];

  Alembic::AbcGeom::v12::XformSample::getMatrix(this, (uint64_t)v2);
  sub_20BE606F4(v2, (uint64_t)v3);
  return v3[0] * 57.2957795;
}

double Alembic::AbcGeom::v12::XformSample::getYRotation(Alembic::AbcGeom::v12::XformSample *this)
{
  double v2[16];
  _BYTE v3[8];
  double v4;

  Alembic::AbcGeom::v12::XformSample::getMatrix(this, (uint64_t)v2);
  sub_20BE606F4(v2, (uint64_t)v3);
  return v4 * 57.2957795;
}

double Alembic::AbcGeom::v12::XformSample::getZRotation(Alembic::AbcGeom::v12::XformSample *this)
{
  double v2[16];
  _BYTE v3[16];
  double v4;

  Alembic::AbcGeom::v12::XformSample::getMatrix(this, (uint64_t)v2);
  sub_20BE606F4(v2, (uint64_t)v3);
  return v4 * 57.2957795;
}

uint64_t Alembic::AbcGeom::v12::XformSample::freezeTopology(uint64_t this)
{
  *(_BYTE *)(this + 33) = 1;
  return this;
}

void Alembic::AbcGeom::v12::XformSample::clear(Alembic::AbcGeom::v12::XformSample *this)
{
  *((_BYTE *)this + 33) = 0;
  sub_20BE64780((uint64_t *)this + 1, 0);
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 32) = 1;
}

void sub_20BE64780(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_20BE65858(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 56 * a2;
    while (v3 != v7)
    {
      v3 -= 56;
      sub_20BE652B8((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void Alembic::AbcGeom::v12::XformSample::reset(Alembic::AbcGeom::v12::XformSample *this)
{
  *((_BYTE *)this + 33) = 0;
  sub_20BE64780((uint64_t *)this + 1, 0);
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 32) = 1;
}

BOOL Alembic::AbcGeom::v12::XformSample::isTopologyEqual(Alembic::AbcGeom::v12::XformSample *this, const Alembic::AbcGeom::v12::XformSample *a2)
{
  Alembic::AbcGeom::v12::XformOp *v2;
  Alembic::AbcGeom::v12::XformOp *v3;
  Alembic::AbcGeom::v12::XformOp *v4;
  int Type;
  BOOL v7;
  _BOOL8 result;

  v3 = (Alembic::AbcGeom::v12::XformOp *)*((_QWORD *)this + 1);
  v2 = (Alembic::AbcGeom::v12::XformOp *)*((_QWORD *)this + 2);
  v4 = (Alembic::AbcGeom::v12::XformOp *)*((_QWORD *)a2 + 1);
  if (v2 - v3 != *((_QWORD *)a2 + 2) - (_QWORD)v4)
    return 0;
  if (v3 == v2)
    return 1;
  do
  {
    Type = Alembic::AbcGeom::v12::XformOp::getType(v3);
    v7 = Type == Alembic::AbcGeom::v12::XformOp::getType(v4);
    result = v7;
    if (!v7)
      break;
    v3 = (Alembic::AbcGeom::v12::XformOp *)((char *)v3 + 56);
    v4 = (Alembic::AbcGeom::v12::XformOp *)((char *)v4 + 56);
  }
  while (v3 != *((Alembic::AbcGeom::v12::XformOp **)this + 2));
  return result;
}

uint64_t **sub_20BE648DC(uint64_t **result, unsigned int *a2, unsigned int *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_20BDFC6B0((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          sub_20BE64A3C(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_20BDFC6B0((uint64_t)v15);
          v10 = (unsigned int *)*((_QWORD *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = *(unsigned int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (unsigned int *)*((_QWORD *)v9 + 2);
              v11 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_20BE64AA8((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_20BE64AFC(v5, a2 + 7);
      v12 = (unsigned int *)*((_QWORD *)a2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(unsigned int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (unsigned int *)*((_QWORD *)a2 + 2);
          v11 = *(_QWORD *)v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_20BE64A28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE64AA8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE64A3C(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  sub_20BDDE1B4(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t sub_20BE64AA8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_20BE6100C(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_20BE6100C(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *sub_20BE64AFC(uint64_t **a1, unsigned int *a2)
{
  uint64_t *v4;
  unsigned int v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x20uLL);
  v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_20BDDE1B4(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t *sub_20BE64B88(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20BE64BDC(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_20BE64BC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20BE64BDC(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_20BE64C60(v5, v6, v4 + 7, v4 + 7);
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_20BE64C60(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_20BE64CE4(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    sub_20BDDE1B4(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_20BE64CE4(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

double sub_20BE64E8C(double *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 < 0.0)
    v1 = -*a1;
  if (v2 < 0.0)
    v2 = -v2;
  v3 = a1[2];
  v4 = -v3;
  if (v3 >= 0.0)
    v4 = a1[2];
  if (v1 >= v2)
    v5 = v1;
  else
    v5 = v2;
  if (v5 < v4)
    v5 = v4;
  if (v5 == 0.0)
    return 0.0;
  else
    return v5 * sqrt(v2 / v5 * (v2 / v5) + v1 / v5 * (v1 / v5) + v4 / v5 * (v4 / v5));
}

uint64_t sub_20BE64EFC(uint64_t *a1, int *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    sub_20BDDF694();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_20BE16B34((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[56 * v3];
  v13 = &v7[56 * v6];
  sub_20BE65020((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 56;
  sub_20BE650A0(a1, &v10);
  v8 = a1[1];
  sub_20BE652F8(&v10);
  return v8;
}

void sub_20BE6500C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE652F8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BE65020(uint64_t a1, uint64_t a2, int *a3)
{
  int v5;

  v5 = *a3;
  *(_BYTE *)(a2 + 4) = *((_BYTE *)a3 + 4);
  *(_DWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  sub_20BDDF5DC((_QWORD *)(a2 + 8), *((const void **)a3 + 1), *((_QWORD *)a3 + 2), (uint64_t)(*((_QWORD *)a3 + 2) - *((_QWORD *)a3 + 1)) >> 3);
  return sub_20BE64B88((uint64_t *)(a2 + 32), (uint64_t)(a3 + 8));
}

void sub_20BE65084(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE650A0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BE65114((uint64_t)(a1 + 2), a1[1], (int *)a1[1], *a1, (int *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BE65114(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 14;
      sub_20BE651C8(a1, v7 - 56, v9);
      v7 = *((_QWORD *)&v16 + 1) - 56;
      *((_QWORD *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20BE65234((uint64_t)v13);
  return v11;
}

void sub_20BE651C8(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a3;
  *(_BYTE *)(a2 + 4) = *((_BYTE *)a3 + 4);
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 2);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a3 + 4);
  v4 = a3 + 10;
  v5 = *((_QWORD *)a3 + 5);
  *(_QWORD *)(a2 + 40) = v5;
  v6 = a2 + 40;
  v7 = *((_QWORD *)a3 + 6);
  *(_QWORD *)(a2 + 48) = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    *((_QWORD *)a3 + 4) = v4;
    *v4 = 0;
    *((_QWORD *)a3 + 6) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = v6;
  }
}

uint64_t sub_20BE65234(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BE65268((uint64_t *)a1);
  return a1;
}

void sub_20BE65268(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20BE652B8(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void sub_20BE652B8(uint64_t a1, uint64_t a2)
{
  void *v3;

  sub_20BE6100C(a2 + 32, *(_QWORD **)(a2 + 40));
  v3 = *(void **)(a2 + 8);
  if (v3)
  {
    *(_QWORD *)(a2 + 16) = v3;
    operator delete(v3);
  }
}

void **sub_20BE652F8(void **a1)
{
  sub_20BE65328(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20BE65328(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 56;
    sub_20BE652B8(v4, i - 56);
  }
}

BOOL sub_20BE6536C(uint64_t a1, float64x2_t *a2, double *a3, int a4)
{
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double *v13;
  double v14;
  double v15;
  uint64_t i;
  double v17;
  uint64_t v18;
  float64x2_t *v19;
  _BOOL8 result;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  __int128 v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double *f64;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  double *v58;
  uint64_t v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  __int128 v66;
  double v67;
  __int128 v68;
  double v69;
  uint64_t v70;

  v8 = 0;
  v70 = *MEMORY[0x24BDAC8D0];
  v9 = *(double *)a1;
  v10 = *(double *)(a1 + 8);
  v11 = *(double *)(a1 + 16);
  v63 = *(double *)a1;
  v64 = v10;
  v65 = v11;
  v12 = *(double *)(a1 + 48);
  v13 = &v63;
  v66 = *(_OWORD *)(a1 + 32);
  v67 = v12;
  v14 = *(double *)(a1 + 80);
  v68 = *(_OWORD *)(a1 + 64);
  v69 = v14;
  v15 = 0.0;
  do
  {
    for (i = 0; i != 3; ++i)
    {
      v17 = v13[i];
      if (v17 <= 0.0)
        v17 = -v17;
      if (v17 > v15)
        v15 = v17;
    }
    ++v8;
    v13 += 3;
  }
  while (v8 != 3);
  v62 = v15;
  if (v15 == 0.0)
  {
LABEL_14:
    v22 = v10 * v10 + v9 * v9 + v11 * v11;
    if (v22 < 4.45014772e-308)
      v23 = sub_20BE64E8C(&v63);
    else
      v23 = sqrt(v22);
    a2->f64[0] = v23;
    result = sub_20BE65768(a2->f64, (uint64_t)&v63, a4);
    if (result)
    {
      v24 = a2->f64[0];
      v25 = v63 / a2->f64[0];
      v26 = v64 / a2->f64[0];
      v63 = v25;
      v64 = v26;
      v27 = *(double *)&v66;
      v28 = v65 / v24;
      v29 = *((double *)&v66 + 1);
      v30 = v67;
      v31 = v26 * *((double *)&v66 + 1) + v25 * *(double *)&v66 + v28 * v67;
      *a3 = v31;
      v65 = v28;
      *(double *)&v66 = v27 - v25 * v31;
      *((double *)&v66 + 1) = v29 - v26 * v31;
      v67 = v30 - v28 * v31;
      v32 = *((double *)&v66 + 1) * *((double *)&v66 + 1) + *(double *)&v66 * *(double *)&v66 + v67 * v67;
      v33 = v32 < 4.45014772e-308 ? sub_20BE64E8C((double *)&v66) : sqrt(v32);
      a2->f64[1] = v33;
      v34 = &a2->f64[1];
      result = sub_20BE65768(&a2->f64[1], (uint64_t)&v66, a4);
      if (result)
      {
        v35 = *v34;
        v36 = v65;
        v38 = *((double *)&v66 + 1) / *v34;
        *(double *)&v66 = *(double *)&v66 / *v34;
        v37 = *(double *)&v66;
        *((double *)&v66 + 1) = v38;
        v39 = v67 / v35;
        v40 = v63;
        v41 = v64;
        v42 = v68;
        v43 = v69;
        v44 = v64 * *((double *)&v68 + 1) + v63 * *(double *)&v68 + v65 * v69;
        *a3 = *a3 / v35;
        a3[1] = v44;
        v45 = *(double *)&v42 - v40 * v44;
        v46 = *((double *)&v42 + 1) - v41 * v44;
        v47 = v43 - v36 * v44;
        v48 = v38 * v46 + v37 * v45 + v39 * v47;
        a3[2] = v48;
        v67 = v39;
        *(double *)&v68 = v45 - v37 * v48;
        *((double *)&v68 + 1) = v46 - v38 * v48;
        v69 = v47 - v39 * v48;
        v49 = *((double *)&v68 + 1) * *((double *)&v68 + 1) + *(double *)&v68 * *(double *)&v68 + v69 * v69;
        v50 = v49 < 4.45014772e-308 ? sub_20BE64E8C((double *)&v68) : sqrt(v49);
        a2[1].f64[0] = v50;
        f64 = a2[1].f64;
        result = sub_20BE65768(a2[1].f64, (uint64_t)&v68, a4);
        if (result)
        {
          v52 = *f64;
          v53 = *(double *)&v68 / *f64;
          v55 = v69 / *f64;
          *((double *)&v68 + 1) = *((double *)&v68 + 1) / *f64;
          v54 = *((double *)&v68 + 1);
          v69 = v55;
          v56 = a3[2];
          a3[1] = a3[1] / v52;
          a3[2] = v56 / *f64;
          *(double *)&v68 = v53;
          if (v64 * (v67 * v53 - *(double *)&v66 * v55)
             + v63 * (*((double *)&v66 + 1) * v55 - v67 * v54)
             + v65 * (*(double *)&v66 * v54 - *((double *)&v66 + 1) * v53) < 0.0)
          {
            v57 = 0;
            v58 = &v65;
            do
            {
              a2->f64[v57] = -a2->f64[v57];
              *((float64x2_t *)v58 - 1) = vnegq_f64(*(float64x2_t *)(v58 - 2));
              *v58 = -*v58;
              v58 += 3;
              ++v57;
            }
            while (v57 != 3);
          }
          v59 = 0;
          v60 = (double *)(a1 + 16);
          do
          {
            *((_OWORD *)v60 - 1) = *(_OWORD *)((char *)&v63 + v59);
            *v60 = *(double *)((char *)&v65 + v59);
            v60 += 4;
            v59 += 24;
          }
          while (v59 != 72);
          v61 = v62;
          *a2 = vmulq_n_f64(*a2, v62);
          a2[1].f64[0] = v61 * a2[1].f64[0];
          return 1;
        }
      }
    }
  }
  else
  {
    v18 = 0;
    while (1)
    {
      v19 = (float64x2_t *)((char *)&v63 + v18);
      result = sub_20BE65768(&v62, (uint64_t)&v63 + v18, a4);
      if (!result)
        break;
      v21 = v62;
      *v19 = vdivq_f64(*v19, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v62, 0));
      v19[1].f64[0] = v19[1].f64[0] / v21;
      v18 += 24;
      if (v18 == 72)
      {
        v9 = v63;
        v10 = v64;
        v11 = v65;
        goto LABEL_14;
      }
    }
  }
  return result;
}

BOOL sub_20BE65768(double *a1, uint64_t a2, int a3)
{
  unint64_t v3;
  BOOL v4;
  double v5;
  double v6;
  std::logic_error *exception;

  v3 = 0;
  v4 = 0;
  v5 = *a1;
  if (*a1 <= 0.0)
    v5 = -*a1;
  while (1)
  {
    if (v5 < 1.0)
    {
      v6 = *(double *)(a2 + 8 * v3);
      if (v6 <= 0.0)
        v6 = -v6;
      if (v6 >= v5 * 1.79769313e308)
        break;
    }
    v4 = v3++ > 1;
    if (v3 == 3)
      return 1;
  }
  if (a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BE65834(exception, "Cannot remove zero scaling from matrix.");
    __cxa_throw(exception, (struct type_info *)off_24C514D58, MEMORY[0x24BEDAAE0]);
  }
  return v4;
}

void sub_20BE65820(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_20BE65834(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B0] + 16);
  return result;
}

void **sub_20BE65858(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  Alembic::AbcGeom::v12::XformOp *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  Alembic::AbcGeom::v12::XformOp *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18[2];
  char *v19;
  char *v20;
  void **v21;

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (Alembic::AbcGeom::v12::XformOp *)*(result - 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = (Alembic::AbcGeom::v12::XformOp *)((char *)v7 + 56 * a2);
      v14 = 56 * a2;
      do
      {
        result = (void **)Alembic::AbcGeom::v12::XformOp::XformOp(v7);
        v7 = (Alembic::AbcGeom::v12::XformOp *)((char *)v7 + 56);
        v14 -= 56;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492)
      sub_20BDDF694();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v9;
    v21 = result;
    if (v11)
      v12 = (char *)sub_20BE16B34((uint64_t)result, v11);
    else
      v12 = 0;
    v15 = &v12[56 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v19 = v15;
    v20 = &v12[56 * v11];
    v16 = 56 * a2;
    v17 = &v15[56 * a2];
    do
    {
      Alembic::AbcGeom::v12::XformOp::XformOp((Alembic::AbcGeom::v12::XformOp *)v15);
      v15 += 56;
      v16 -= 56;
    }
    while (v16);
    v19 = v17;
    sub_20BE650A0(a1, v18);
    return sub_20BE652F8(v18);
  }
  return result;
}

void sub_20BE659BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE652F8((void **)va);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::IXformSchema::init(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  char isConstant;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t i;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  _BYTE *v59;
  uint64_t v60;
  size_t v61;
  uint64_t j;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t **v66;
  uint64_t **v67;
  uint64_t v68;
  unint64_t NumChannels;
  _QWORD *v70;
  _QWORD **v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  __int128 __p;
  uint64_t v107;
  uint64_t v108[3];
  uint64_t *v109;
  int v110;
  uint64_t *v111;
  int v112;
  void *v113;
  std::__shared_weak_count *v114;
  char v115;
  int v116;
  int v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  void *v122;
  _QWORD *v123;
  uint64_t v124;
  _BYTE *v125;
  std::__shared_weak_count *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  _BYTE *v129;
  std::__shared_weak_count *v130;
  int v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137[4];
  std::__shared_weak_count *v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;

  v141 = a1 + 8;
  v142 = "IXformSchema::init()";
  *((_QWORD *)&__p + 1) = 0;
  v107 = 0;
  *(_QWORD *)&__p = (char *)&__p + 8;
  v136 = 2;
  v134 = 0;
  v135 = 0;
  sub_20BDEBF8C(v137, (const void ***)&__p);
  v137[3] = 0;
  v138 = 0;
  v139 = 0;
  v140 = 1;
  sub_20BDE9D48((uint64_t)&__p, *((_QWORD **)&__p + 1));
  sub_20BE02E30(a2, (uint64_t)&v136);
  sub_20BE02E30(a3, (uint64_t)&v136);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(std::__shared_weak_count **)(a1 + 48);
  v132 = v6;
  v133 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(&__p, ".childBnds");
  v10 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v6 + 80))(v6, &__p);
  v11 = v10;
  if (SHIBYTE(v107) < 0)
  {
    operator delete((void *)__p);
    if (!v11)
      goto LABEL_19;
  }
  else if (!v10)
  {
    goto LABEL_19;
  }
  v127 = v6;
  v128 = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  LODWORD(v113) = 0;
  LODWORD(v114) = 0;
  LODWORD(v125) = 0;
  LODWORD(v126) = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v129, &v127, &v113, &v125);
  sub_20BDDC0E4(&v122, ".childBnds");
  sub_20BE13A80((uint64_t)&__p, (int *)&v129, (uint64_t)&v122, a2, a3);
  *(_DWORD *)(a1 + 56) = __p;
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)((char *)&__p + 8));
  sub_20BDE881C((_QWORD *)(a1 + 88), v108);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)&__p);
  if (SHIBYTE(v124) < 0)
    operator delete(v122);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v129);
  v14 = v128;
  if (v128)
  {
    v15 = (unint64_t *)&v128->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v6 = v132;
LABEL_19:
  sub_20BDDC0E4(&__p, ".inherits");
  v17 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v6 + 80))(v6, &__p);
  v18 = v17;
  if (SHIBYTE(v107) < 0)
  {
    operator delete((void *)__p);
    if (!v18)
      goto LABEL_34;
  }
  else if (!v17)
  {
    goto LABEL_34;
  }
  v120 = v6;
  v121 = v133;
  if (v133)
  {
    v19 = (unint64_t *)&v133->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  LODWORD(v113) = 0;
  LODWORD(v114) = 0;
  LODWORD(v125) = 0;
  LODWORD(v126) = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v129, &v120, &v113, &v125);
  sub_20BDDC0E4(&v122, ".inherits");
  sub_20BE67BA8((uint64_t)&__p, (int *)&v129, (uint64_t)&v122, a2, a3);
  *(_DWORD *)(a1 + 120) = __p;
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)((char *)&__p + 8));
  sub_20BDE881C((_QWORD *)(a1 + 152), v108);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)&__p);
  if (SHIBYTE(v124) < 0)
    operator delete(v122);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v129);
  v21 = v121;
  if (v121)
  {
    v22 = (unint64_t *)&v121->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v6 = v132;
LABEL_34:
  *(_BYTE *)(a1 + 320) = 0;
  sub_20BDDC0E4(&__p, ".vals");
  v24 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v6 + 80))(v6, &__p);
  v25 = v24;
  if (SHIBYTE(v107) < 0)
  {
    operator delete((void *)__p);
    if (!v25)
      goto LABEL_48;
  }
  else if (!v24)
  {
    goto LABEL_48;
  }
  if (*(_DWORD *)(v25 + 24) == 1)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v132 + 88))(&__p, v132, v25);
    sub_20BDE82DC(a1 + 104, &__p);
    v26 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (!*((_QWORD *)&__p + 1))
      goto LABEL_48;
    v27 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
  }
  else
  {
    *(_BYTE *)(a1 + 320) = 1;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v132 + 96))(&__p, v132, v25);
    sub_20BDE82DC(a1 + 104, &__p);
    v26 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (!*((_QWORD *)&__p + 1))
      goto LABEL_48;
    v29 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v28 = __ldaxr(v29);
    while (__stlxr(v28 - 1, v29));
  }
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_48:
  *(_BYTE *)(a1 + 265) = 1;
  v30 = v132;
  sub_20BDDC0E4(&__p, "isNotConstantIdentity");
  v31 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v30 + 80))(v30, &__p);
  if (SHIBYTE(v107) < 0)
    operator delete((void *)__p);
  if (v31)
    *(_BYTE *)(a1 + 265) = 0;
  *(_BYTE *)(a1 + 264) = 1;
  v32 = *(_QWORD *)(a1 + 104);
  if (!v32)
  {
LABEL_64:
    if (*(char *)(a1 + 151) < 0)
    {
      if (!*(_QWORD *)(a1 + 136))
        goto LABEL_68;
    }
    else if (!*(_BYTE *)(a1 + 151))
    {
LABEL_68:
      if (*(_QWORD *)(a1 + 152))
      {
        isConstant = Alembic::Abc::v12::IScalarProperty::isConstant((Alembic::Abc::v12::IScalarProperty *)(a1 + 120));
        goto LABEL_72;
      }
    }
    isConstant = 1;
    goto LABEL_72;
  }
  if (*(_BYTE *)(a1 + 320))
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v32 + 48))(&__p);
    *(_BYTE *)(a1 + 264) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)__p + 72))(__p);
    v33 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (!*((_QWORD *)&__p + 1))
      goto LABEL_63;
    v34 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v32 + 40))(&__p);
    *(_BYTE *)(a1 + 264) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)__p + 72))(__p);
    v33 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (!*((_QWORD *)&__p + 1))
      goto LABEL_63;
    v36 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v35 = __ldaxr(v36);
    while (__stlxr(v35 - 1, v36));
  }
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_63:
  if (*(_BYTE *)(a1 + 264))
    goto LABEL_64;
  isConstant = 0;
LABEL_72:
  *(_BYTE *)(a1 + 264) = isConstant;
  v123 = 0;
  v124 = 0;
  v122 = &v123;
  v38 = v132;
  sub_20BDDC0E4(&__p, ".animChans");
  v39 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v38 + 80))(v38, &__p);
  v40 = v39;
  if (SHIBYTE(v107) < 0)
  {
    operator delete((void *)__p);
    if (!v40)
      goto LABEL_104;
  }
  else if (!v39)
  {
    goto LABEL_104;
  }
  v118 = v38;
  v119 = v133;
  if (v133)
  {
    v41 = (unint64_t *)&v133->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  LODWORD(v125) = 0;
  LODWORD(v126) = 0;
  v116 = 0;
  v117 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v129, &v118, &v125, &v116);
  sub_20BDDC0E4(&v113, ".animChans");
  LODWORD(v111) = 0;
  v112 = 0;
  LODWORD(v109) = 0;
  v110 = 0;
  sub_20BE1FC6C((uint64_t)&__p, (int *)&v129, (uint64_t)&v113, &v111, &v109);
  if (v115 < 0)
    operator delete(v113);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v129);
  v43 = v119;
  if (v119)
  {
    v44 = (unint64_t *)&v119->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (Alembic::Abc::v12::IArrayProperty::getNumSamples((Alembic::Abc::v12::IArrayProperty *)&__p))
  {
    v113 = 0;
    v114 = 0;
    v129 = (_BYTE *)(Alembic::Abc::v12::IArrayProperty::getNumSamples((Alembic::Abc::v12::IArrayProperty *)&__p) - 1);
    v130 = 0;
    v131 = 2;
    sub_20BE66B08((uint64_t)&__p, (uint64_t)&v113, (uint64_t)&v129);
    v46 = v113;
    if (v113)
    {
      for (i = 0; ; ++i)
      {
        v48 = (uint64_t *)v46[2];
        v49 = v46[3] - (_QWORD)v48;
        if (v49)
        {
          v50 = v49 >> 3;
          if (v50 <= 1)
            v50 = 1;
          v51 = 1;
          do
          {
            v52 = *v48++;
            v51 *= v52;
            --v50;
          }
          while (v50);
        }
        else
        {
          v51 = 0;
        }
        if (i >= v51)
          break;
        sub_20BE68238((uint64_t **)&v122, (unsigned int *)(*v46 + 4 * i), (_DWORD *)(*v46 + 4 * i));
        v46 = v113;
      }
    }
    v53 = v114;
    if (v114)
    {
      v54 = (unint64_t *)&v114->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&__p);
  v38 = v132;
LABEL_104:
  v125 = 0;
  v126 = 0;
  sub_20BDDC0E4(&__p, ".ops");
  v56 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v38 + 80))(v38, &__p);
  v57 = v56;
  if (SHIBYTE(v107) < 0)
  {
    operator delete((void *)__p);
    if (!v57)
      goto LABEL_138;
  }
  else if (!v56)
  {
    goto LABEL_138;
  }
  sub_20BDDC0E4(&__p, ".ops");
  (*(void (**)(_BYTE **__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v38 + 88))(&v129, v38, &__p);
  v59 = v129;
  v58 = v130;
  v129 = 0;
  v130 = 0;
  v125 = v59;
  v126 = v58;
  if (SHIBYTE(v107) < 0)
  {
    operator delete((void *)__p);
    if (!v59)
      goto LABEL_138;
  }
  else if (!v59)
  {
    goto LABEL_138;
  }
  if (!(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v59 + 64))(v59))
    goto LABEL_138;
  v60 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v59 + 16))(v59);
  if (*(_DWORD *)(v60 + 56) == 1)
  {
    v61 = *(unsigned __int8 *)(v60 + 60);
    sub_20BDE2BE0(&v129, v61);
    (*(void (**)(_BYTE *, _QWORD, _BYTE *, _QWORD))(*(_QWORD *)v59 + 80))(v59, 0, v129, 0);
    if ((_DWORD)v61)
    {
      for (j = 0; j != v61; ++j)
      {
        Alembic::AbcGeom::v12::XformOp::XformOp((Alembic::AbcGeom::v12::XformOp *)&__p, v129[j]);
        Alembic::AbcGeom::v12::XformSample::addOp((Alembic::AbcGeom::v12::XformSample *)(a1 + 272), (const Alembic::AbcGeom::v12::XformOp *)&__p);
        sub_20BE6100C((uint64_t)v108, (_QWORD *)v108[1]);
        if (*((_QWORD *)&__p + 1))
        {
          v107 = *((_QWORD *)&__p + 1);
          operator delete(*((void **)&__p + 1));
        }
      }
    }
    v63 = v122;
    if (v122 != &v123)
    {
      v64 = 0;
      v65 = 0;
      v66 = *(uint64_t ***)(a1 + 280);
      v67 = *(uint64_t ***)(a1 + 288);
      do
      {
        if (v66 == v67)
        {
LABEL_127:
          v66 = v67;
        }
        else
        {
          v68 = *((unsigned int *)v63 + 7);
          while (1)
          {
            NumChannels = Alembic::AbcGeom::v12::XformOp::getNumChannels((Alembic::AbcGeom::v12::XformOp *)v66);
            if (v65 < NumChannels)
              break;
LABEL_126:
            v65 = 0;
            v66 += 7;
            if (v66 == v67)
              goto LABEL_127;
          }
          while (v68 != v64)
          {
            ++v65;
            ++v64;
            if (NumChannels == v65)
              goto LABEL_126;
          }
          LODWORD(__p) = v65;
          sub_20BE68238(v66 + 4, (unsigned int *)&__p, &__p);
          ++v65;
          v64 = v68 + 1;
        }
        v70 = (_QWORD *)v63[1];
        if (v70)
        {
          do
          {
            v71 = (_QWORD **)v70;
            v70 = (_QWORD *)*v70;
          }
          while (v70);
        }
        else
        {
          do
          {
            v71 = (_QWORD **)v63[2];
            v72 = *v71 == v63;
            v63 = v71;
          }
          while (!v72);
        }
        v63 = v71;
      }
      while (v71 != &v123);
    }
    if (v129)
    {
      v130 = (std::__shared_weak_count *)v129;
      operator delete(v129);
    }
    v38 = v132;
LABEL_138:
    sub_20BDDC0E4(&__p, ".arbGeomParams");
    v73 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v38 + 80))(v38, &__p);
    if (SHIBYTE(v107) < 0)
      operator delete((void *)__p);
    v74 = v132;
    if (v73)
    {
      v104 = v132;
      v105 = v133;
      if (v133)
      {
        v75 = (unint64_t *)&v133->__shared_owners_;
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
      }
      v116 = 0;
      v117 = 0;
      LODWORD(v111) = 0;
      v112 = 0;
      Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v129, &v104, &v116, &v111);
      sub_20BDDC0E4(&v113, ".arbGeomParams");
      LODWORD(v109) = 1;
      v110 = v136;
      Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&__p, &v129, &v113, &v109);
      *(_DWORD *)(a1 + 168) = __p;
      std::string::operator=((std::string *)(a1 + 176), (const std::string *)((char *)&__p + 8));
      sub_20BDE881C((_QWORD *)(a1 + 200), v108);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
      if (v115 < 0)
        operator delete(v113);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v129);
      v77 = v105;
      if (v105)
      {
        v78 = (unint64_t *)&v105->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      v74 = v132;
    }
    sub_20BDDC0E4(&__p, ".userProperties");
    v80 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v74 + 80))(v74, &__p);
    v81 = v80;
    if (SHIBYTE(v107) < 0)
    {
      operator delete((void *)__p);
      if (!v81)
        goto LABEL_166;
    }
    else if (!v80)
    {
      goto LABEL_166;
    }
    v102 = v74;
    v103 = v133;
    if (v133)
    {
      v82 = (unint64_t *)&v133->__shared_owners_;
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    v116 = 0;
    v117 = 0;
    LODWORD(v111) = 0;
    v112 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v129, &v102, &v116, &v111);
    sub_20BDDC0E4(&v113, ".userProperties");
    LODWORD(v109) = 1;
    v110 = v136;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&__p, &v129, &v113, &v109);
    *(_DWORD *)(a1 + 216) = __p;
    std::string::operator=((std::string *)(a1 + 224), (const std::string *)((char *)&__p + 8));
    sub_20BDE881C((_QWORD *)(a1 + 248), v108);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
    if (v115 < 0)
      operator delete(v113);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v129);
    v84 = v103;
    if (v103)
    {
      v85 = (unint64_t *)&v103->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
LABEL_166:
    v87 = v126;
    if (v126)
    {
      v88 = (unint64_t *)&v126->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    sub_20BE6100C((uint64_t)&v122, v123);
    v90 = v133;
    if (v133)
    {
      v91 = (unint64_t *)&v133->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    v93 = v138;
    if (v138)
    {
      v94 = (unint64_t *)&v138->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      goto LABEL_179;
    }
    goto LABEL_181;
  }
  if (v58)
  {
    v96 = (unint64_t *)&v58->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  sub_20BE6100C((uint64_t)&v122, v123);
  v98 = v133;
  if (v133)
  {
    v99 = (unint64_t *)&v133->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v93 = v138;
  if (v138)
  {
    v101 = (unint64_t *)&v138->__shared_owners_;
    do
      v95 = __ldaxr(v101);
    while (__stlxr(v95 - 1, v101));
LABEL_179:
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
LABEL_181:
  sub_20BDE9D48((uint64_t)v137, (_QWORD *)v137[1]);
}

void sub_20BE66764(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,void *a40,_QWORD *a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,char a48)
{
  uint64_t v48;
  uint64_t v49;
  void *v52;
  void *v53;
  uint64_t v54;

  v52 = *(void **)(v49 - 240);
  if (v52)
  {
    *(_QWORD *)(v49 - 232) = v52;
    operator delete(v52);
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a46);
  sub_20BE6100C((uint64_t)&a40, a41);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v49 - 192));
  sub_20BE02EB0(v49 - 160);
  v53 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v54 = (uint64_t)v53;
    sub_20BE66BE8(v48);
    sub_20BE02570(v49 - 96, v54);
  }
  else
  {
    sub_20BE66BE8(v48);
    sub_20BE02504(v49 - 96, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE666ACLL);
}

void sub_20BE66AE8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE66B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  v13 = 0uLL;
  Alembic::Abc::v12::IArrayProperty::get(a1, (uint64_t)&v13, a3);
  v12 = v13;
  if (*((_QWORD *)&v13 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20BDE82DC(a2, &v12);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20BE66BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE66BE8(uint64_t a1)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  void **v7;

  sub_20BDEBF08((_QWORD *)(a1 + 88));
  MEMORY[0x212B929D0](a1 + 64, "");
  Alembic::AbcGeom::v12::XformSample::XformSample((uint64_t)&v3);
  *(_DWORD *)(a1 + 272) = v3;
  sub_20BE676D8((void **)(a1 + 280));
  *(_OWORD *)(a1 + 280) = v4;
  *(_QWORD *)(a1 + 296) = v5;
  v5 = 0;
  v4 = 0uLL;
  *(_OWORD *)(a1 + 304) = v6;
  v7 = (void **)&v4;
  sub_20BE67B24(&v7);
  sub_20BDEBF08((_QWORD *)(a1 + 152));
  MEMORY[0x212B929D0](a1 + 128, "");
  *(_WORD *)(a1 + 264) = 257;
  sub_20BDEBF08((_QWORD *)(a1 + 200));
  MEMORY[0x212B929D0](a1 + 176, "");
  sub_20BDEBF08((_QWORD *)(a1 + 248));
  MEMORY[0x212B929D0](a1 + 224, "");
  sub_20BDEBF08((_QWORD *)(a1 + 40));
  return MEMORY[0x212B929D0](a1 + 16, "");
}

_QWORD *Alembic::AbcGeom::v12::IXformSchema::getTimeSampling@<X0>(Alembic::AbcGeom::v12::IXformSchema *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v3)();
  Alembic::AbcCoreAbstract::v12::TimeSampling *v5;

  if (*((char *)this + 151) < 0)
  {
    if (*((_QWORD *)this + 17))
      goto LABEL_3;
LABEL_5:
    if (*((_QWORD *)this + 19))
      v3 = nullsub_4;
    else
      v3 = 0;
    goto LABEL_8;
  }
  if (!*((_BYTE *)this + 151))
    goto LABEL_5;
LABEL_3:
  v3 = 0;
LABEL_8:
  if (v3)
    return (_QWORD *)Alembic::Abc::v12::IScalarProperty::getTimeSampling((Alembic::AbcGeom::v12::IXformSchema *)((char *)this + 120), a2);
  v5 = (Alembic::AbcCoreAbstract::v12::TimeSampling *)operator new(0x28uLL);
  Alembic::AbcCoreAbstract::v12::TimeSampling::TimeSampling(v5);
  return sub_20BDEA220(a2, (uint64_t)v5);
}

void sub_20BE66D84(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v14;

  v11 = v10;
  operator delete(v11);
  v14 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v14);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  *v9 = 0;
  v9[1] = 0;
  JUMPOUT(0x20BE66D70);
}

void sub_20BE66DDC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::IXformSchema::getNumSamples(Alembic::AbcGeom::v12::IXformSchema *this)
{
  uint64_t (*v1)();

  if (*((char *)this + 151) < 0)
  {
    if (*((_QWORD *)this + 17))
      goto LABEL_3;
LABEL_5:
    if (*((_QWORD *)this + 19))
      v1 = nullsub_4;
    else
      v1 = 0;
    goto LABEL_8;
  }
  if (!*((_BYTE *)this + 151))
    goto LABEL_5;
LABEL_3:
  v1 = 0;
LABEL_8:
  if (v1)
    return Alembic::Abc::v12::IScalarProperty::getNumSamples((Alembic::AbcGeom::v12::IXformSchema *)((char *)this + 120));
  else
    return 0;
}

void sub_20BE66EB0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::IXformSchema::getChannelValues(Alembic::AbcGeom::v12::IXformSchema *this, uint64_t a2, Alembic::AbcGeom::v12::XformSample *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  Alembic::AbcGeom::v12::XformOp *v25;
  Alembic::AbcGeom::v12::XformOp *v26;
  unint64_t v27;
  unint64_t i;
  uint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  void *__p;
  _BYTE *v34;
  uint64_t v35;

  __p = 0;
  v34 = 0;
  v35 = 0;
  if (!*((_BYTE *)this + 320))
  {
    (*(void (**)(_QWORD **__return_ptr))(**((_QWORD **)this + 13) + 40))(&v31);
    v17 = (*(uint64_t (**)(_QWORD *))(*v31 + 16))(v31);
    sub_20BDDEC88((uint64_t)&__p, *(unsigned __int8 *)(v17 + 60));
    v18 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    (*(void (**)(_QWORD **__return_ptr))(**((_QWORD **)this + 13) + 40))(&v31);
    (*(void (**)(_QWORD *, uint64_t, void *, _QWORD))(*v31 + 80))(v31, a2, __p, 0);
    v21 = v32;
    if (!v32)
      goto LABEL_36;
    v22 = (unint64_t *)&v32->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    goto LABEL_34;
  }
  v31 = 0;
  v32 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 13) + 48))(&v29);
  (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v29 + 80))(v29, a2, &v31);
  v6 = v30;
  if (v30)
  {
    v7 = (unint64_t *)&v30->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v31 && *v31 && *((_DWORD *)v31 + 2) == 11)
  {
    v9 = (uint64_t *)v31[2];
    v10 = v31[3] - (_QWORD)v9;
    if (v10)
    {
      v11 = v10 >> 3;
      if (v11 <= 1)
        v11 = 1;
      v12 = 1;
      do
      {
        v13 = *v9++;
        v12 *= v13;
        --v11;
      }
      while (v11);
    }
    else
    {
      v12 = 0;
    }
    sub_20BDDF7E4((char *)&__p, (char *)*v31, *v31 + 8 * v12, v12);
    v21 = v32;
    if (!v32)
      goto LABEL_36;
    v24 = (unint64_t *)&v32->__shared_owners_;
    do
      v23 = __ldaxr(v24);
    while (__stlxr(v23 - 1, v24));
LABEL_34:
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
LABEL_36:
    v25 = (Alembic::AbcGeom::v12::XformOp *)*((_QWORD *)a3 + 1);
    v26 = (Alembic::AbcGeom::v12::XformOp *)*((_QWORD *)a3 + 2);
    if (v25 != v26)
    {
      v27 = 0;
      do
      {
        for (i = 0; i < Alembic::AbcGeom::v12::XformOp::getNumChannels(v25) && v27 < (v34 - (_BYTE *)__p) >> 3; ++i)
          Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)v25, i, *((double *)__p + v27++));
        v25 = (Alembic::AbcGeom::v12::XformOp *)((char *)v25 + 56);
      }
      while (v25 != v26);
    }
    goto LABEL_43;
  }
  v14 = v32;
  if (v32)
  {
    v15 = (unint64_t *)&v32->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_43:
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
}

void sub_20BE67170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a12);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::IXformSchema::get(uint64_t a1, Alembic::AbcGeom::v12::XformSample *this, uint64_t a3)
{
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t Index;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  double **v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  const char *v24;

  v23 = a1 + 8;
  v24 = "IXformSchema::get()";
  Alembic::AbcGeom::v12::XformSample::reset(this);
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return;
  }
  if (!*(_QWORD *)(a1 + 40))
    return;
  *(_DWORD *)this = *(_DWORD *)(a1 + 272);
  if ((Alembic::AbcGeom::v12::XformSample *)(a1 + 272) != this)
    sub_20BE67744((uint64_t)this + 8, *(int **)(a1 + 280), *(int **)(a1 + 288), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 3));
  *((_OWORD *)this + 2) = *(_OWORD *)(a1 + 304);
  if (*(char *)(a1 + 151) < 0)
  {
    if (*(_QWORD *)(a1 + 136))
      goto LABEL_10;
  }
  else if (*(_BYTE *)(a1 + 151))
  {
LABEL_10:
    v6 = 0;
    goto LABEL_15;
  }
  if (*(_QWORD *)(a1 + 152))
    v6 = nullsub_4;
  else
    v6 = 0;
LABEL_15:
  if (v6 && Alembic::Abc::v12::IScalarProperty::getNumSamples((Alembic::Abc::v12::IScalarProperty *)(a1 + 120)))
  {
    LOBYTE(v21) = 0;
    Alembic::Abc::v12::IScalarProperty::get(a1 + 120, (uint64_t)&v21, a3, 1);
    Alembic::AbcGeom::v12::XformSample::setInheritsXforms((uint64_t)this, (_BYTE)v21 != 0);
  }
  v7 = *(_QWORD *)(a1 + 104);
  if (v7)
  {
    if (*(_BYTE *)(a1 + 320))
    {
      (*(void (**)(double ***__return_ptr))(*(_QWORD *)v7 + 48))(&v21);
      v8 = (*((uint64_t (**)(double **))*v21 + 8))(v21);
      v9 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        goto LABEL_27;
      }
    }
    else
    {
      (*(void (**)(double ***__return_ptr))(*(_QWORD *)v7 + 40))(&v21);
      v8 = (*((uint64_t (**)(double **))*v21 + 8))(v21);
      v9 = v22;
      if (v22)
      {
        v12 = (unint64_t *)&v22->__shared_owners_;
        do
          v11 = __ldaxr(v12);
        while (__stlxr(v11 - 1, v12));
LABEL_27:
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    if (v8)
    {
      v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 16))(*(_QWORD *)(a1 + 104));
      v14 = *(std::__shared_weak_count **)(v13 + 72);
      v21 = *(double ***)(v13 + 64);
      v22 = v14;
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      Index = Alembic::Abc::v12::ISampleSelector::getIndex(a3, &v21, v8);
      v18 = v22;
      if (v22)
      {
        v19 = (unint64_t *)&v22->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if ((Index & 0x8000000000000000) == 0)
        Alembic::AbcGeom::v12::IXformSchema::getChannelValues((Alembic::AbcGeom::v12::IXformSchema *)a1, Index, this);
    }
  }
}

void sub_20BE67448(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v13;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  v13 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a11, (uint64_t)v13);
  else
    sub_20BE02504((uint64_t)&a11, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE67430);
}

void sub_20BE674D4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::IXformSchema::getValue(uint64_t a1@<X0>, uint64_t a2@<X1>, Alembic::AbcGeom::v12::XformSample *a3@<X8>)
{
  Alembic::AbcGeom::v12::XformSample::XformSample((uint64_t)a3);
  Alembic::AbcGeom::v12::IXformSchema::get(a1, a3, a2);
}

void sub_20BE67540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 8);
  sub_20BE67B24(&a10);
  _Unwind_Resume(a1);
}

BOOL Alembic::AbcGeom::v12::IXformSchema::getInheritsXforms(uint64_t a1, uint64_t a2)
{
  Alembic::Abc::v12::IScalarProperty *v3;
  uint64_t NumSamples;
  uint64_t Index;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  double **v10;
  std::__shared_weak_count *v11;
  int v12;
  uint64_t v13;
  const char *v14;
  char v15;

  v13 = a1 + 8;
  v14 = "IXformSchema::getInheritsXforms()";
  if (*(char *)(a1 + 151) < 0)
  {
    if (*(_QWORD *)(a1 + 136))
      return 1;
  }
  else if (*(_BYTE *)(a1 + 151))
  {
    return 1;
  }
  if (*(_QWORD *)(a1 + 152))
  {
    v3 = (Alembic::Abc::v12::IScalarProperty *)(a1 + 120);
    if (Alembic::Abc::v12::IScalarProperty::getNumSamples((Alembic::Abc::v12::IScalarProperty *)(a1 + 120)))
    {
      Alembic::Abc::v12::IScalarProperty::getTimeSampling(v3, &v10);
      NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(v3);
      Index = Alembic::Abc::v12::ISampleSelector::getIndex(a2, &v10, NumSamples);
      v6 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      if ((Index & 0x8000000000000000) == 0)
      {
        v10 = (double **)Index;
        v11 = 0;
        v12 = 2;
        v15 = 0;
        Alembic::Abc::v12::IScalarProperty::get((uint64_t)v3, (uint64_t)&v15, (uint64_t)&v10, 1);
        return v15 != 0;
      }
    }
  }
  return 1;
}

void sub_20BE676B8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE676D8(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        sub_20BE652B8((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_20BE67744(uint64_t a1, int *a2, int *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_20BE676D8((void **)a1);
    if (a4 > 0x492492492492492)
      sub_20BDDF694();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v10;
    sub_20BE1B554((_QWORD *)a1, v11);
    v12 = sub_20BE678E4(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[2 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3)];
    sub_20BE67A90((uint64_t)&v17, a2, v13, (uint64_t)v9);
    v12 = sub_20BE678E4(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_20BE67A90((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 56;
      sub_20BE652B8(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_20BE678D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20BE678DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20BE678E4(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  int *v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20BE6798C(a1, v4, v6);
      v6 += 14;
      v4 = v12 + 56;
      v12 += 56;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20BE67A0C((uint64_t)v9);
  return v4;
}

void sub_20BE67978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE67A0C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BE6798C(uint64_t a1, uint64_t a2, int *a3)
{
  int v5;

  v5 = *a3;
  *(_BYTE *)(a2 + 4) = *((_BYTE *)a3 + 4);
  *(_DWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  sub_20BDDF5DC((_QWORD *)(a2 + 8), *((const void **)a3 + 1), *((_QWORD *)a3 + 2), (uint64_t)(*((_QWORD *)a3 + 2) - *((_QWORD *)a3 + 1)) >> 3);
  return sub_20BE64B88((uint64_t *)(a2 + 32), (uint64_t)(a3 + 8));
}

void sub_20BE679F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE67A0C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BE67A40((uint64_t *)a1);
  return a1;
}

void sub_20BE67A40(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 56;
      sub_20BE652B8(v5, v3);
    }
    while (v3 != v4);
  }
}

int *sub_20BE67A90(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  int *v5;
  unsigned int *v7;
  int v8;

  v5 = a2;
  if (a2 != a3)
  {
    v7 = (unsigned int *)(a2 + 10);
    do
    {
      v8 = *v5;
      *(_BYTE *)(a4 + 4) = *((_BYTE *)v5 + 4);
      *(_DWORD *)a4 = v8;
      if (v5 != (int *)a4)
      {
        sub_20BDDF7E4((char *)(a4 + 8), *((char **)v5 + 1), *((_QWORD *)v5 + 2), (uint64_t)(*((_QWORD *)v5 + 2) - *((_QWORD *)v5 + 1)) >> 3);
        sub_20BE648DC((uint64_t **)(a4 + 32), *((unsigned int **)v5 + 4), v7);
      }
      v5 += 14;
      a4 += 56;
      v7 += 14;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_20BE67B24(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_20BE652B8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20BE67BA8(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void **v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *exception;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50[2];
  char v51;
  void *__p[2];
  unsigned __int8 v53;
  __int128 v54;
  _QWORD v55[34];
  std::__shared_weak_count *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62[4];
  std::__shared_weak_count *v63;
  int v64;
  uint64_t v65;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *a2;
  *((_QWORD *)&v54 + 1) = 0;
  v55[0] = 0;
  *(_QWORD *)&v54 = (char *)&v54 + 8;
  v59 = 0;
  v60 = 0;
  v61 = v10;
  sub_20BDEBF8C(v62, (const void ***)&v54);
  v62[3] = 0;
  v63 = 0;
  v64 = 0;
  v65 = 1;
  sub_20BDE9D48((uint64_t)&v54, *((_QWORD **)&v54 + 1));
  sub_20BE02E30(a4, (uint64_t)&v61);
  sub_20BE02E30(a5, (uint64_t)&v61);
  *(_DWORD *)a1 = v61;
  v57 = a1;
  v58 = "ITypedScalarProperty::ITypedScalarProperty()";
  v12 = *((_QWORD *)a2 + 4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v55[33] = v12;
  v56 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v40 = sub_20BDDC1C8(v55, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v40, (uint64_t)"ITypedScalarProperty ctor", 25);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v42 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v42, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  v16 = v15;
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v43 = sub_20BDDC1C8(v55, (uint64_t)"Nonexistent scalar property: ", 29);
    v44 = *(char *)(a3 + 23);
    if (v44 >= 0)
      v45 = a3;
    else
      v45 = *(_QWORD *)a3;
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(a3 + 23);
    else
      v46 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v43, v45, v46);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v47 = __cxa_allocate_exception(0x20uLL);
    v48 = sub_20BDDC09C(v47, (uint64_t)__p);
    __cxa_throw(v48, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  if (*(_DWORD *)(v15 + 56))
    v17 = 0;
  else
    v17 = *(_BYTE *)(v15 + 60) == 1;
  v18 = v17 && *(_DWORD *)(v15 + 24) == 1;
  if (!v18 || (sub_20BE68194(v15 + 32, v65) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v29 = sub_20BDDC1C8(v55, (uint64_t)"Incorrect match of header datatype: ", 36);
    v30 = sub_20BDE00F4(v29, (int *)(v16 + 56));
    v31 = sub_20BDDC1C8(v30, (uint64_t)" to expected: ", 14);
    v49 = 0x100000000;
    v32 = sub_20BDE00F4(v31, (int *)&v49);
    v33 = sub_20BDDC1C8(v32, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_20BDDC0E4(v50, "interpretation");
    sub_20BE01E1C(v16 + 32, (const void **)v50, __p);
    if ((v53 & 0x80u) == 0)
      v34 = __p;
    else
      v34 = (void **)__p[0];
    if ((v53 & 0x80u) == 0)
      v35 = v53;
    else
      v35 = (uint64_t)__p[1];
    v36 = sub_20BDDC1C8(v33, (uint64_t)v34, v35);
    v37 = sub_20BDDC1C8(v36, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v37, (uint64_t)"", 0);
    if ((char)v53 < 0)
      operator delete(__p[0]);
    if (v51 < 0)
      operator delete(v50[0]);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v38 = __cxa_allocate_exception(0x20uLL);
    v39 = sub_20BDDC09C(v38, (uint64_t)__p);
    __cxa_throw(v39, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 88))(&v54, v12, a3);
  sub_20BDE82DC(a1 + 32, &v54);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v56;
  if (v56)
  {
    v23 = (unint64_t *)&v56->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v63;
  if (v63)
  {
    v26 = (unint64_t *)&v63->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  sub_20BDE9D48((uint64_t)v62, (_QWORD *)v62[1]);
  return a1;
}

void sub_20BE68030(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 192));
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v26);
  MEMORY[0x212B929D0](v25, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 176, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE67D80);
}

void sub_20BE68154()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 144);
  JUMPOUT(0x20BE68184);
}

uint64_t sub_20BE68194(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (a2)
    return 1;
  sub_20BDDC0E4(__p, "interpretation");
  sub_20BE01E1C(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    v2 = v7[1] == 0;
    operator delete(v7[0]);
  }
  else
  {
    v2 = v8 == 0;
  }
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE6821C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **sub_20BE68238(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_20BDDE1B4(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t Alembic::AbcGeom::v12::OXformSchema::OXformSchema(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v13 = a2[1];
  v44 = *a2;
  v45 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  sub_20BE68770(a1, &v44, a3, a4, a5, a6, a7);
  v16 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = &unk_24C519AB8;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = 127;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 120), "");
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 2;
  *(_OWORD *)(a1 + 144) = 0u;
  sub_20BDDC0E4((_QWORD *)(a1 + 200), "");
  *(_DWORD *)(a1 + 240) = 2;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 248), "");
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  Alembic::AbcGeom::v12::XformSample::XformSample(a1 + 288);
  *(_BYTE *)(a1 + 336) = 1;
  *(_DWORD *)(a1 + 344) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 352), "");
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 400), "");
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  sub_20BE304B4(a4, a5, a6, a7, &v42);
  v19 = sub_20BE3060C(a4, a5, a6, a7);
  if (v42)
  {
    v20 = *a2;
    v21 = (std::__shared_weak_count *)a2[1];
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v37 = v21;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v20 + 24))(&v38);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v38 + 24))(&v40);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 48))(v40, v42);
    v25 = v41;
    if (v41)
    {
      v26 = (unint64_t *)&v41->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v39;
    if (v39)
    {
      v29 = (unint64_t *)&v39->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v37)
    {
      v31 = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  else
  {
    v24 = v19;
  }
  Alembic::AbcGeom::v12::OXformSchema::init((Alembic::AbcGeom::v12::OXformSchema *)a1, v24);
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return a1;
}

void sub_20BE68670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a10, void **a11, void **a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v22;
  void **v23;
  void **v24;
  Alembic::Abc::v12::OCompoundProperty *v25;
  void *v27;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a19);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a17);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a21);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v21 + 440));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v25);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v21 + 344));
  a21 = v21 + 296;
  sub_20BE67B24((void ***)&a21);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v24);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v23);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(a10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v22);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a11);
  v27 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v21 + 96) = v27;
    operator delete(v27);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(v21 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20BE68770(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C519B18;
  v14 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  sub_20BE6AC1C(a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE6886C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v9);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OXformSchema::init(Alembic::AbcGeom::v12::OXformSchema *this, uint64_t a2)
{
  _OWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  char *v15;
  const char *v16;

  v15 = (char *)this + 8;
  v16 = "OXformSchema::init()";
  v4 = operator new(0x30uLL);
  v4[1] = 0u;
  v4[2] = 0u;
  *v4 = 0u;
  sub_20BE6BB64(&v14, (uint64_t)v4);
  sub_20BDE82DC((uint64_t)this + 440, &v14);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *((_QWORD *)this + 6);
  *(_QWORD *)&v14 = *((_QWORD *)this + 5);
  *((_QWORD *)&v14 + 1) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_20BDE82DC(*((_QWORD *)this + 55), &v14);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_QWORD *)(*((_QWORD *)this + 55) + 40) = a2;
  *((_BYTE *)this + 336) = 1;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
}

void sub_20BE689A8(void *a1, int a2)
{
  uint64_t v2;

  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE6A17C(v2);
  sub_20BE6A17C(v2);
}

void sub_20BE689DC(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE02504((uint64_t)va, 0);
  JUMPOUT(0x20BE689E8);
}

void sub_20BE689F0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OXformSchema::OXformSchema(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  uint64_t *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;

  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v52 = *((_QWORD *)a2 + 4);
  v53 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *a2;
  LODWORD(v50) = 1;
  LODWORD(v51) = v14;
  sub_20BE68770(a1, &v52, a3, &v50, a4, a5, a6);
  v15 = v53;
  if (v53)
  {
    v16 = (unint64_t *)&v53->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)a1 = &unk_24C519AB8;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = 127;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 120), "");
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 2;
  *(_OWORD *)(a1 + 144) = 0u;
  sub_20BDDC0E4((_QWORD *)(a1 + 200), "");
  *(_DWORD *)(a1 + 240) = 2;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 248), "");
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  Alembic::AbcGeom::v12::XformSample::XformSample(a1 + 288);
  *(_BYTE *)(a1 + 336) = 1;
  *(_DWORD *)(a1 + 344) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 352), "");
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 400), "");
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  LODWORD(v48) = 0;
  LODWORD(v49) = 0;
  sub_20BE304B4(a4, a5, a6, &v48, &v50);
  LODWORD(v48) = 0;
  LODWORD(v49) = 0;
  v18 = sub_20BE3060C(a4, a5, a6, &v48);
  if (v50)
  {
    v39 = *a2;
    if (*((char *)a2 + 31) < 0)
    {
      sub_20BDDBFAC(&v40, *((void **)a2 + 1), *((_QWORD *)a2 + 2));
    }
    else
    {
      v40 = *(_OWORD *)(a2 + 2);
      v41 = *((_QWORD *)a2 + 3);
    }
    v20 = *((_QWORD *)a2 + 4);
    v21 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
    v42 = v20;
    v43 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v20 = v42;
      v44 = v42;
      v45 = v43;
      if (v43)
      {
        v24 = (unint64_t *)&v43->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
    }
    else
    {
      v44 = v20;
      v45 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v20 + 24))(&v46);
    (*(void (**)(uint64_t **__return_ptr))(*(_QWORD *)v46 + 24))(&v48);
    v19 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*v48 + 48))(v48, v50);
    v26 = v49;
    if (v49)
    {
      v27 = (unint64_t *)&v49->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v47;
    if (v47)
    {
      v30 = (unint64_t *)&v47->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v45;
    if (v45)
    {
      v33 = (unint64_t *)&v45->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v39);
  }
  else
  {
    v19 = v18;
  }
  Alembic::AbcGeom::v12::OXformSchema::init((Alembic::AbcGeom::v12::OXformSchema *)a1, v19);
  v35 = v51;
  if (v51)
  {
    v36 = (unint64_t *)&v51->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  return a1;
}

void sub_20BE68DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v24;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v25;
  void **v26;
  void **v27;
  Alembic::Abc::v12::OCompoundProperty *v28;
  void *v30;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a23);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v23 + 440));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v28);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v23 + 344));
  a23 = v23 + 296;
  sub_20BE67B24((void ***)&a23);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v27);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v26);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v25);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v24);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a9);
  v30 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v23 + 96) = v30;
    operator delete(v30);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(v23 + 8));
  _Unwind_Resume(a1);
}

void sub_20BE68E98()
{
  JUMPOUT(0x20BE68E24);
}

void sub_20BE68EA0()
{
  JUMPOUT(0x20BE68E34);
}

void sub_20BE68EA8()
{
  JUMPOUT(0x20BE68E3CLL);
}

void sub_20BE68EB0()
{
  JUMPOUT(0x20BE68E4CLL);
}

void sub_20BE68EB8()
{
  JUMPOUT(0x20BE68E54);
}

void sub_20BE68EC0()
{
  JUMPOUT(0x20BE68E5CLL);
}

void sub_20BE68EC8()
{
  JUMPOUT(0x20BE68E74);
}

void sub_20BE68ED0()
{
  uint64_t v0;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v0 - 96));
  JUMPOUT(0x20BE68E90);
}

void Alembic::AbcGeom::v12::OXformSchema::setChannelValues(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  _BYTE *v20;

  v3 = *(_QWORD *)(a1 + 176);
  if (v3)
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v12 = *(_QWORD *)(a1 + 56);
      sub_20BDE8894(&v19, 1uLL, &v12);
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 176) + 48))(&v17);
      v5 = v17;
      v12 = *a2;
      v13 = 0x10000000BLL;
      v15 = 0;
      v16 = 0;
      __p = 0;
      sub_20BDE1364(&__p, v19, (uint64_t)v20, (v20 - (_BYTE *)v19) >> 3);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 64))(v5, &v12);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      v6 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 40))(&v12);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 64))(v12, *a2);
      v9 = (std::__shared_weak_count *)v13;
      if (v13)
      {
        v10 = (unint64_t *)(v13 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
}

void sub_20BE69050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OXformSchema::set(Alembic::AbcGeom::v12::OXformSchema *this, int **a2)
{
  _QWORD *exception;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t NumOpChannels;
  uint64_t v46;
  Alembic::AbcGeom::v12::XformOp *v47;
  Alembic::AbcGeom::v12::XformOp *v48;
  unint64_t i;
  double ChannelValue;
  double v51;
  char *v52;
  char *v53;
  char *v54;
  int64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  char v70;
  double v71;
  double DefaultChannelValue;
  double v73;
  uint64_t v74;
  uint64_t v75;
  size_t NumOps;
  Alembic::AbcGeom::v12::XformOp *v77;
  char OpEncoding;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  Alembic::Abc::v12::OScalarProperty *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t *v86;
  int v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  void *__p[2];
  char v91;
  void *v92;
  char *v93;
  unint64_t v94;
  void *v95;
  std::string v96;
  uint64_t v97[31];
  uint64_t *v98;
  int v99;
  uint64_t *v100;
  int v101;
  uint64_t *v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  char *v106;
  const char *v107;

  v106 = (char *)this + 8;
  v107 = "OXformSchema::set()";
  if (*((char *)this + 223) < 0)
  {
    if (*((_QWORD *)this + 26))
      goto LABEL_10;
  }
  else if (*((_BYTE *)this + 223))
  {
    goto LABEL_10;
  }
  if (*((_QWORD *)this + 28))
  {
    if (!Alembic::AbcGeom::v12::XformSample::isTopologyEqual((Alembic::AbcGeom::v12::OXformSchema *)((char *)this + 288), (const Alembic::AbcGeom::v12::XformSample *)a2))
    {
      sub_20BDDBD68((uint64_t)&v95);
      sub_20BDDC1C8(&v96.__r_.__value_.__l.__size_, (uint64_t)"Invalid sample topology!", 24);
      std::stringbuf::str();
      sub_20BDDBF20(&v92, (__int128 *)__p);
      if (v91 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      v5 = sub_20BDDC09C(exception, (uint64_t)&v92);
      __cxa_throw(v5, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    goto LABEL_69;
  }
LABEL_10:
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v104 = *((_QWORD *)this + 5);
  v105 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(&v92, ".inherits");
  v9 = *(_QWORD *)(*((_QWORD *)this + 55) + 40);
  LODWORD(__p[0]) = 2;
  LODWORD(__p[1]) = v9;
  LODWORD(v102) = 0;
  LODWORD(v103) = 0;
  LODWORD(v100) = 0;
  v101 = 0;
  LODWORD(v98) = 0;
  v99 = 0;
  sub_20BE6B054((uint64_t)&v95, &v104, (uint64_t)&v92, (uint64_t **)__p, &v102, &v100, &v98);
  *((_DWORD *)this + 48) = (_DWORD)v95;
  std::string::operator=((std::string *)((char *)this + 200), &v96);
  sub_20BDE881C((_QWORD *)this + 28, v97);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v95);
  if (SHIBYTE(v94) < 0)
    operator delete(v92);
  v10 = v105;
  if (v105)
  {
    v11 = (unint64_t *)&v105->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  Alembic::AbcGeom::v12::XformSample::freezeTopology((uint64_t)a2);
  *((_DWORD *)this + 72) = *(_DWORD *)a2;
  if ((int **)((char *)this + 288) != a2)
    sub_20BE67744((uint64_t)this + 296, a2[1], a2[2], 0x6DB6DB6DB6DB6DB7 * (((char *)a2[2] - (char *)a2[1]) >> 3));
  *((_OWORD *)this + 20) = *((_OWORD *)a2 + 2);
  *((_QWORD *)this + 7) = Alembic::AbcGeom::v12::XformSample::getNumOpChannels((Alembic::AbcGeom::v12::XformSample *)a2);
  *((_QWORD *)this + 8) = Alembic::AbcGeom::v12::XformSample::getNumOps((Alembic::AbcGeom::v12::XformSample *)a2);
  v13 = *((_QWORD *)this + 55);
  *(_QWORD *)(v13 + 24) = 0;
  sub_20BE69C4C(v13 + 16, *((_QWORD *)this + 7), 0);
  if (*((_QWORD *)this + 8))
  {
    v15 = (uint64_t *)*((_QWORD *)this + 5);
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    v102 = v15;
    v103 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    sub_20BDDC0E4(&v95, ".ops");
    v93 = 0;
    v94 = 0;
    v92 = &v93;
    v18 = *((_QWORD *)this + 8);
    LODWORD(v100) = 1;
    BYTE4(v100) = v18;
    (*(void (**)(void **__return_ptr, uint64_t *, void **, void **, uint64_t **, _QWORD))(*v15 + 96))(__p, v15, &v95, &v92, &v100, 0);
    sub_20BDE82DC((uint64_t)this + 160, (__int128 *)__p);
    v19 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v20 = (unint64_t *)((char *)__p[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    sub_20BDE9D48((uint64_t)&v92, v93);
    if (v96.__r_.__value_.__s.__data_[15] < 0)
      operator delete(v95);
    v22 = v103;
    if (v103)
    {
      v23 = (unint64_t *)&v103->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  v25 = *((_QWORD *)this + 7);
  if (!v25)
    goto LABEL_69;
  if (v25 > 0x100)
  {
    *((_BYTE *)this + 72) = 1;
    v38 = (uint64_t *)*((_QWORD *)this + 5);
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    v102 = v38;
    v103 = v37;
    if (v37)
    {
      v39 = (unint64_t *)&v37->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    sub_20BDDC0E4(&v95, ".vals");
    v93 = 0;
    v94 = 0;
    v92 = &v93;
    LODWORD(v100) = 11;
    BYTE4(v100) = 1;
    (*(void (**)(void **__return_ptr, uint64_t *, void **, void **, uint64_t **, _QWORD))(*v38 + 104))(__p, v38, &v95, &v92, &v100, *(unsigned int *)(*((_QWORD *)this + 55) + 40));
    sub_20BDE82DC((uint64_t)this + 176, (__int128 *)__p);
    v41 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v42 = (unint64_t *)((char *)__p[1] + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    sub_20BDE9D48((uint64_t)&v92, v93);
    if (v96.__r_.__value_.__s.__data_[15] < 0)
      operator delete(v95);
    v34 = v103;
    if (!v103)
      goto LABEL_69;
    v44 = (unint64_t *)&v103->__shared_owners_;
    do
      v36 = __ldaxr(v44);
    while (__stlxr(v36 - 1, v44));
  }
  else
  {
    *((_BYTE *)this + 72) = 0;
    v27 = (uint64_t *)*((_QWORD *)this + 5);
    v26 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    v102 = v27;
    v103 = v26;
    if (v26)
    {
      v28 = (unint64_t *)&v26->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    sub_20BDDC0E4(&v95, ".vals");
    v93 = 0;
    v94 = 0;
    v92 = &v93;
    v30 = *((_QWORD *)this + 7);
    LODWORD(v100) = 11;
    BYTE4(v100) = v30;
    (*(void (**)(void **__return_ptr, uint64_t *, void **, void **, uint64_t **, _QWORD))(*v27 + 96))(__p, v27, &v95, &v92, &v100, *(unsigned int *)(*((_QWORD *)this + 55) + 40));
    sub_20BDE82DC((uint64_t)this + 176, (__int128 *)__p);
    v31 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v32 = (unint64_t *)((char *)__p[1] + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    sub_20BDE9D48((uint64_t)&v92, v93);
    if (v96.__r_.__value_.__s.__data_[15] < 0)
      operator delete(v95);
    v34 = v103;
    if (!v103)
      goto LABEL_69;
    v35 = (unint64_t *)&v103->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
  }
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_69:
  LOBYTE(v95) = Alembic::AbcGeom::v12::XformSample::getInheritsXforms((Alembic::AbcGeom::v12::XformSample *)a2);
  Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OXformSchema *)((char *)this + 192), &v95);
  if (!*((_QWORD *)this + 20))
    return;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  NumOpChannels = Alembic::AbcGeom::v12::XformSample::getNumOpChannels((Alembic::AbcGeom::v12::XformSample *)a2);
  sub_20BE69DCC(&v92, NumOpChannels);
  v95 = 0;
  if (!*((_QWORD *)this + 8))
    goto LABEL_105;
  v46 = 0;
  do
  {
    v47 = (Alembic::AbcGeom::v12::XformOp *)Alembic::AbcGeom::v12::XformSample::operator[]((uint64_t)a2, &v95);
    v48 = (Alembic::AbcGeom::v12::XformOp *)Alembic::AbcGeom::v12::XformSample::operator[]((uint64_t)this + 288, &v95);
    for (i = 0; i < Alembic::AbcGeom::v12::XformOp::getNumChannels(v47); ++i)
    {
      ChannelValue = Alembic::AbcGeom::v12::XformOp::getChannelValue(v47, i);
      v51 = ChannelValue;
      v52 = v93;
      if ((unint64_t)v93 >= v94)
      {
        v54 = (char *)v92;
        v55 = (v93 - (_BYTE *)v92) >> 3;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 61)
          sub_20BDDF694();
        v57 = v94 - (_QWORD)v92;
        if ((uint64_t)(v94 - (_QWORD)v92) >> 2 > v56)
          v56 = v57 >> 2;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
          v58 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          v59 = (char *)sub_20BDDF6A8((uint64_t)&v94, v58);
          v54 = (char *)v92;
          v52 = v93;
        }
        else
        {
          v59 = 0;
        }
        v60 = &v59[8 * v55];
        *(double *)v60 = v51;
        v53 = v60 + 8;
        while (v52 != v54)
        {
          v61 = *((_QWORD *)v52 - 1);
          v52 -= 8;
          *((_QWORD *)v60 - 1) = v61;
          v60 -= 8;
        }
        v92 = v60;
        v93 = v53;
        v94 = (unint64_t)&v59[8 * v58];
        if (v54)
          operator delete(v54);
      }
      else
      {
        *(double *)v93 = ChannelValue;
        v53 = v52 + 8;
      }
      v93 = v53;
      v62 = (i + v46) >> 6;
      v63 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 55) + 16) + 8 * v62);
      v64 = 1 << (i + v46);
      v65 = *v63;
      if ((*v63 & v64) != 0)
        goto LABEL_96;
      v66 = Alembic::AbcGeom::v12::XformOp::getChannelValue(v47, i);
      v67 = Alembic::AbcGeom::v12::XformOp::getChannelValue(v48, i);
      if (v66 <= v67)
        v68 = v67 - v66;
      else
        v68 = v66 - v67;
      v63 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 55) + 16) + 8 * v62);
      if (v68 > 1.0e-12)
      {
        v65 = *v63;
LABEL_96:
        v69 = v65 | v64;
        goto LABEL_97;
      }
      v69 = *v63 & ~v64;
LABEL_97:
      *v63 = v69;
      v70 = *((_BYTE *)this + 336);
      if (v70)
      {
        v71 = Alembic::AbcGeom::v12::XformOp::getChannelValue(v47, i);
        DefaultChannelValue = Alembic::AbcGeom::v12::XformOp::getDefaultChannelValue(v47, i);
        if (v71 <= DefaultChannelValue)
          v73 = DefaultChannelValue - v71;
        else
          v73 = v71 - DefaultChannelValue;
        v70 = v73 <= 1.0e-12;
      }
      *((_BYTE *)this + 336) = v70;
    }
    v46 += Alembic::AbcGeom::v12::XformOp::getNumChannels(v47);
    v95 = (char *)v95 + 1;
  }
  while ((unint64_t)v95 < *((_QWORD *)this + 8));
LABEL_105:
  Alembic::AbcGeom::v12::OXformSchema::setChannelValues((uint64_t)this, &v92);
  v74 = *((_QWORD *)this + 20);
  if (v74)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 80))(v74))
    {
      v75 = *((_QWORD *)this + 20);
      if (v75)
        (*(void (**)(uint64_t))(*(_QWORD *)v75 + 72))(v75);
    }
    else
    {
      NumOps = Alembic::AbcGeom::v12::XformSample::getNumOps((Alembic::AbcGeom::v12::OXformSchema *)((char *)this + 288));
      sub_20BDE2BE0(&v95, NumOps);
      __p[0] = 0;
      if (v96.__r_.__value_.__l.__data_ != v95)
      {
        do
        {
          v77 = (Alembic::AbcGeom::v12::XformOp *)Alembic::AbcGeom::v12::XformSample::operator[]((uint64_t)this + 288, __p);
          OpEncoding = Alembic::AbcGeom::v12::XformOp::getOpEncoding(v77);
          *((_BYTE *)v95 + (unint64_t)__p[0]++) = OpEncoding;
        }
        while (__p[0] < (void *)(v96.__r_.__value_.__r.__words[0] - (_QWORD)v95));
      }
      (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 64))(*((_QWORD *)this + 20));
      if (v95)
      {
        v96.__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
        operator delete(v95);
      }
    }
  }
  if (*((char *)this + 271) < 0)
  {
    if (!*((_QWORD *)this + 32))
      goto LABEL_117;
    goto LABEL_118;
  }
  if (*((_BYTE *)this + 271))
  {
LABEL_118:
    if (!*((_BYTE *)this + 336))
    {
      v79 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
      v88 = *((_QWORD *)this + 5);
      v89 = v79;
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      sub_20BDDC0E4(__p, "isNotConstantIdentity");
      LODWORD(v102) = 0;
      LODWORD(v103) = 0;
      LODWORD(v100) = 0;
      v101 = 0;
      LODWORD(v98) = 0;
      v99 = 0;
      LODWORD(v86) = 0;
      v87 = 0;
      sub_20BE6B054((uint64_t)&v95, &v88, (uint64_t)__p, &v102, &v100, &v98, &v86);
      *((_DWORD *)this + 60) = (_DWORD)v95;
      std::string::operator=((std::string *)((char *)this + 248), &v96);
      v82 = (Alembic::AbcGeom::v12::OXformSchema *)((char *)this + 240);
      sub_20BDE881C((_QWORD *)this + 34, v97);
      Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v95);
      if (v91 < 0)
        operator delete(__p[0]);
      v83 = v89;
      if (v89)
      {
        v84 = (unint64_t *)&v89->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      LOBYTE(v95) = 1;
      Alembic::Abc::v12::OScalarProperty::set(v82, &v95);
    }
    goto LABEL_130;
  }
LABEL_117:
  if (!*((_QWORD *)this + 34))
    goto LABEL_118;
LABEL_130:
  if (v92)
  {
    v93 = (char *)v92;
    operator delete(v92);
  }
}

void sub_20BE69A90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  void *v37;

  sub_20BDDC194((std::exception *)&a22);
  sub_20BDDBE98((uint64_t)&__p);
  v37 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v34 - 120, (uint64_t)v37);
  else
    sub_20BE02504(v34 - 120, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE69A60);
}

void sub_20BE69C2C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE69C4C(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        sub_20BDDF694();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      sub_20BE6B5DC(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      sub_20BE6B8D8(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        sub_20BE6BA08(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        sub_20BE6BAB8((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_20BE69DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BE69DCC(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_20BDDF694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_20BDDF6A8(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void Alembic::AbcGeom::v12::OXformSchema::setFromPrevious(Alembic::AbcGeom::v12::OXformSchema *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  char *v9;
  const char *v10;

  v9 = (char *)this + 8;
  v10 = "OXformSchema::setFromPrevious()";
  Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OXformSchema *)((char *)this + 192));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 72))(*((_QWORD *)this + 20));
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    if (*((_BYTE *)this + 72))
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 48))(&v7);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      v3 = v8;
      if (!v8)
        return;
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 40))(&v7);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      v3 = v8;
      if (!v8)
        return;
      v6 = (unint64_t *)&v8->__shared_owners_;
      do
        v5 = __ldaxr(v6);
      while (__stlxr(v5 - 1, v6));
    }
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20BE69F54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v13;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  v13 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a11, (uint64_t)v13);
  else
    sub_20BE02504((uint64_t)&a11, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE69F44);
}

void sub_20BE69FC0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OXformSchema::getTimeSampling(Alembic::AbcGeom::v12::OXformSchema *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE v3[56];
  _BYTE v4[48];
  char *v5;
  const char *v6;

  v5 = (char *)this + 8;
  v6 = "OXformSchema::getTimeSampling()";
  sub_20BE1A75C((int *)this + 2, (uint64_t)v3);
  Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v3, (uint64_t)v4);
  Alembic::Abc::v12::OArchive::getTimeSampling((Alembic::Abc::v12::OArchive *)v4, a2);
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v4);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v3);
}

void sub_20BE6A058(void *a1, int a2, uint64_t a3, ...)
{
  _QWORD *v3;
  uint64_t v4;
  void *v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)va1);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)va);
  v7 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v4 - 48, (uint64_t)v7);
  else
    sub_20BE02504(v4 - 48, 0);
  __cxa_end_catch();
  *v3 = 0;
  v3[1] = 0;
  JUMPOUT(0x20BE6A044);
}

void sub_20BE6A0C0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OXformSchema::getNumSamples(Alembic::AbcGeom::v12::OXformSchema *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 20);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

void sub_20BE6A124(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE6A114);
}

void sub_20BE6A15C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE6A17C(uint64_t a1)
{
  sub_20BDEBF08((_QWORD *)(a1 + 144));
  MEMORY[0x212B929D0](a1 + 120, "");
  sub_20BDEBF08((_QWORD *)(a1 + 224));
  MEMORY[0x212B929D0](a1 + 200, "");
  sub_20BDEBF08((_QWORD *)(a1 + 160));
  sub_20BDEBF08((_QWORD *)(a1 + 176));
  Alembic::AbcGeom::v12::XformSample::reset((Alembic::AbcGeom::v12::XformSample *)(a1 + 288));
  sub_20BDEBF08((_QWORD *)(a1 + 440));
  sub_20BDEBF08((_QWORD *)(a1 + 376));
  MEMORY[0x212B929D0](a1 + 352, "");
  sub_20BDEBF08((_QWORD *)(a1 + 424));
  MEMORY[0x212B929D0](a1 + 400, "");
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 336) = 1;
  sub_20BDEBF08((_QWORD *)(a1 + 40));
  JUMPOUT(0x212B929D0);
}

_BYTE *Alembic::AbcGeom::v12::OXformSchema::getArbGeomParams@<X0>(Alembic::AbcGeom::v12::OXformSchema *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD v15[4];
  _DWORD v16[4];
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  std::string v22;
  uint64_t v23[4];

  v23[2] = (uint64_t)this + 8;
  v23[3] = (uint64_t)"OXformSchema::getArbGeomParams()";
  v4 = *((char *)this + 375);
  if (v4 < 0)
  {
    if (!*((_QWORD *)this + 45))
      goto LABEL_5;
  }
  else if (!*((_BYTE *)this + 375))
  {
LABEL_5:
    if (*((_QWORD *)this + 47))
      goto LABEL_17;
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v19 = *((_QWORD *)this + 5);
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".arbGeomParams");
  v16[0] = 0;
  v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v21, &v19, __p, v16, v15);
  *((_DWORD *)this + 86) = v21;
  std::string::operator=((std::string *)((char *)this + 352), &v22);
  sub_20BDE881C((_QWORD *)this + 47, v23);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  if (v18 < 0)
    operator delete(__p[0]);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LOBYTE(v4) = *((_BYTE *)this + 375);
LABEL_17:
  *(_DWORD *)a2 = *((_DWORD *)this + 86);
  result = (_BYTE *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    result = sub_20BDDBFAC(result, *((void **)this + 44), *((_QWORD *)this + 45));
  }
  else
  {
    *(_OWORD *)result = *((_OWORD *)this + 22);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 46);
  }
  v12 = *((_QWORD *)this + 48);
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 47);
  *(_QWORD *)(a2 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_20BE6A3B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v23 - 48, (uint64_t)v25);
  else
    sub_20BE02504(v23 - 48, 0);
  __cxa_end_catch();
  *(_DWORD *)v22 = 2;
  sub_20BDDC0E4((_QWORD *)(v22 + 8), "");
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  JUMPOUT(0x20BE6A39CLL);
}

void sub_20BE6A44C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_BYTE *Alembic::AbcGeom::v12::OXformSchema::getUserProperties@<X0>(Alembic::AbcGeom::v12::OXformSchema *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD v15[4];
  _DWORD v16[4];
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  std::string v22;
  uint64_t v23[4];

  v23[2] = (uint64_t)this + 8;
  v23[3] = (uint64_t)"OXformSchema::getUserProperties()";
  v4 = *((char *)this + 423);
  if (v4 < 0)
  {
    if (!*((_QWORD *)this + 51))
      goto LABEL_5;
  }
  else if (!*((_BYTE *)this + 423))
  {
LABEL_5:
    if (*((_QWORD *)this + 53))
      goto LABEL_17;
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v19 = *((_QWORD *)this + 5);
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".userProperties");
  v16[0] = 0;
  v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v21, &v19, __p, v16, v15);
  *((_DWORD *)this + 98) = v21;
  std::string::operator=((std::string *)((char *)this + 400), &v22);
  sub_20BDE881C((_QWORD *)this + 53, v23);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  if (v18 < 0)
    operator delete(__p[0]);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LOBYTE(v4) = *((_BYTE *)this + 423);
LABEL_17:
  *(_DWORD *)a2 = *((_DWORD *)this + 98);
  result = (_BYTE *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    result = sub_20BDDBFAC(result, *((void **)this + 50), *((_QWORD *)this + 51));
  }
  else
  {
    *(_OWORD *)result = *((_OWORD *)this + 25);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 52);
  }
  v12 = *((_QWORD *)this + 54);
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 53);
  *(_QWORD *)(a2 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_20BE6A5F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v23 - 48, (uint64_t)v25);
  else
    sub_20BE02504(v23 - 48, 0);
  __cxa_end_catch();
  *(_DWORD *)v22 = 2;
  sub_20BDDC0E4((_QWORD *)(v22 + 8), "");
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  JUMPOUT(0x20BE6A5DCLL);
}

void sub_20BE6A68C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_BYTE *Alembic::AbcGeom::v12::OXformSchema::getChildBoundsProperty@<X0>(std::string *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::string::pointer data;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE *result;
  std::string::size_type size;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t *v22;
  int v23;
  uint64_t *v24;
  int v25;
  uint64_t *v26;
  int v27;
  void *__p[2];
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void *v32;
  std::string v33;
  uint64_t v34[3];
  std::__shared_weak_count *v35;
  std::string::value_type *v36;
  const char *v37;

  v36 = &this->__r_.__value_.__s.__data_[8];
  v37 = "OXformSchema::getChildBoundsProperty()";
  if (SHIBYTE(this[5].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this[5].__r_.__value_.__l.__size_)
      goto LABEL_5;
  }
  else if (!*((_BYTE *)&this[5].__r_.__value_.__s + 23))
  {
LABEL_5:
    if (this[6].__r_.__value_.__r.__words[0])
      goto LABEL_25;
  }
  v4 = this[1].__r_.__value_.__r.__words[2];
  data = this[2].__r_.__value_.__l.__data_;
  v34[2] = v4;
  v35 = (std::__shared_weak_count *)data;
  if (data)
  {
    v6 = (unint64_t *)(data + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v30 = v4;
    v31 = (std::__shared_weak_count *)data;
    do
      v8 = __ldxr(v6);
    while (__stxr(v8 + 1, v6));
  }
  else
  {
    v30 = v4;
    v31 = 0;
  }
  sub_20BDDC0E4(__p, ".childBnds");
  v9 = *(_QWORD *)(this[18].__r_.__value_.__l.__size_ + 40);
  LODWORD(v26) = 2;
  v27 = v9;
  LODWORD(v24) = 0;
  v25 = 0;
  LODWORD(v22) = 0;
  v23 = 0;
  LODWORD(v20) = 0;
  v21 = 0;
  sub_20BE1C558((uint64_t)&v32, &v30, (uint64_t)__p, &v26, &v24, &v22, &v20);
  LODWORD(this[4].__r_.__value_.__r.__words[2]) = (_DWORD)v32;
  std::string::operator=(this + 5, &v33);
  sub_20BDE881C(this[6].__r_.__value_.__r.__words, v34);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v32);
  if (v29 < 0)
    operator delete(__p[0]);
  v10 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v35;
  if (v35)
  {
    v14 = (unint64_t *)&v35->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_25:
  *(_DWORD *)a2 = this[4].__r_.__value_.__r.__words[2];
  result = (_BYTE *)(a2 + 8);
  if (SHIBYTE(this[5].__r_.__value_.__r.__words[2]) < 0)
  {
    result = sub_20BDDBFAC(result, this[5].__r_.__value_.__l.__data_, this[5].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)&this[5].__r_.__value_.__l.__data_;
    *(_QWORD *)(a2 + 24) = *((_QWORD *)&this[5].__r_.__value_.__l + 2);
  }
  size = this[6].__r_.__value_.__l.__size_;
  *(_QWORD *)(a2 + 32) = this[6].__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 40) = size;
  if (size)
  {
    v18 = (unint64_t *)(size + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  return result;
}

void sub_20BE6A8A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26)
{
  uint64_t v26;
  void *v29;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&a26);
  if (a23 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v26 - 64));
  v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v26 - 48, (uint64_t)v29);
  else
    sub_20BE02504(v26 - 48, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE6A840);
}

void sub_20BE6A924(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OXformSchema::setTimeSampling(Alembic::AbcGeom::v12::OXformSchema *this, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  char *v12;
  const char *v13;

  v12 = (char *)this + 8;
  v13 = "OXformSchema::setTimeSampling( uint32_t)";
  if (*((char *)this + 223) < 0)
  {
    if (*((_QWORD *)this + 26))
      goto LABEL_7;
  }
  else if (*((_BYTE *)this + 223))
  {
    goto LABEL_7;
  }
  if (*((_QWORD *)this + 28))
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OXformSchema *)((char *)this + 192));
LABEL_7:
  v4 = *((_QWORD *)this + 22);
  if (!v4)
    goto LABEL_18;
  if (*((_BYTE *)this + 72))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 48))(&v10);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(v10, a2);
    v5 = v11;
    if (!v11)
      goto LABEL_18;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v10);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(v10, a2);
    v5 = v11;
    if (!v11)
      goto LABEL_18;
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(v8);
    while (__stlxr(v7 - 1, v8));
  }
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_18:
  v9 = *((_QWORD *)this + 55);
  if (v9)
    *(_QWORD *)(v9 + 40) = a2;
}

void sub_20BE6AA70(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v13;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  v13 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a11, (uint64_t)v13);
  else
    sub_20BE02504((uint64_t)&a11, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE6AA5CLL);
}

void sub_20BE6AADC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OXformSchema::setTimeSampling(Alembic::AbcGeom::v12::OXformSchema *a1, _QWORD *a2)
{
  int *v3;
  uint64_t v4;
  _BYTE v5[56];
  _BYTE v6[48];
  int *v7;
  const char *v8;

  v3 = (int *)((char *)a1 + 8);
  v7 = v3;
  v8 = "OXformSchema::setTimeSampling( TimeSamplingPtr)";
  if (*a2)
  {
    sub_20BE1A75C(v3, (uint64_t)v5);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v5, (uint64_t)v6);
    v4 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v6);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v6);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v5);
    Alembic::AbcGeom::v12::OXformSchema::setTimeSampling(a1, v4);
  }
}

void sub_20BE6AB7C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void *v19;

  v19 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v17 - 32, (uint64_t)v19);
  else
    sub_20BE02504(v17 - 32, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE6AB6CLL);
}

void sub_20BE6ABE4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE6AC08(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20BE6C0C4(a1);
  operator delete(v1);
}

void sub_20BE6AC1C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *exception;
  _QWORD *v22;
  std::string __p;
  void *v24[2];
  char v25;
  uint64_t *v26;
  _QWORD *v27;
  _QWORD v28[37];
  int v29;
  const void **v30[4];
  std::__shared_weak_count *v31;
  int v32;
  uint64_t v33;
  void **v34;

  v27 = 0;
  v28[0] = 0;
  v26 = (uint64_t *)&v27;
  v28[35] = 0;
  v28[36] = 0;
  v29 = 2;
  sub_20BDEBF8C((uint64_t *)v30, (const void ***)&v26);
  v30[3] = 0;
  v31 = 0;
  v32 = 0;
  v33 = 1;
  sub_20BDE9D48((uint64_t)&v26, v27);
  sub_20BE02E30(a4, (uint64_t)&v29);
  sub_20BE02E30(a5, (uint64_t)&v29);
  sub_20BE02E30(a6, (uint64_t)&v29);
  sub_20BE02E30(a7, (uint64_t)&v29);
  *(_DWORD *)(a1 + 8) = v29;
  v28[33] = a1 + 8;
  v28[34] = "OSchema::OSchema::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v26);
    sub_20BDDC1C8(v28, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_20BDDBF20(v24, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    v22 = sub_20BDDC09C(exception, (uint64_t)v24);
    __cxa_throw(v22, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v26, v30);
  if (HIDWORD(v33) != 1)
  {
    sub_20BDDC0E4(v24, "schema");
    sub_20BDDC0E4(&__p, "AbcGeom_Xform_v3");
    v34 = v24;
    v14 = sub_20BDDDFDC(&v26, (const void **)v24, (uint64_t)&unk_20CA5282D, (__int128 **)&v34);
    std::string::operator=((std::string *)(v14 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v25 < 0)
      operator delete(v24[0]);
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t **))(*(_QWORD *)*a2 + 112))(v24, *a2, a3, &v26);
  sub_20BDE82DC(a1 + 40, (__int128 *)v24);
  v15 = (std::__shared_weak_count *)v24[1];
  if (v24[1])
  {
    v16 = (unint64_t *)((char *)v24[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sub_20BDE9D48((uint64_t)&v26, v27);
  v18 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  sub_20BDE9D48((uint64_t)v30, v30[1]);
}

void sub_20BE6AEC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v27;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a22);
  v27 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v23 + 40));
  MEMORY[0x212B929D0](v23 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v24 - 192, (uint64_t)v27);
  else
    sub_20BE02504(v24 - 192, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE6ADECLL);
}

void sub_20BE6AFB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE6B004(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20BE6B02C(void **a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20BE6B054(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20BE6B158((int *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE6B13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v9);
  _Unwind_Resume(a1);
}

void sub_20BE6B158(int *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *exception;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  const void **v42;
  _QWORD *v43;
  _QWORD v44[37];
  int v45;
  const void **v46[3];
  uint64_t v47;
  std::__shared_weak_count *v48;
  unsigned int v49;
  uint64_t v50;

  v43 = 0;
  v44[0] = 0;
  v42 = (const void **)&v43;
  v44[35] = 0;
  v44[36] = 0;
  v45 = 2;
  sub_20BDEBF8C((uint64_t *)v46, &v42);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  sub_20BDE9D48((uint64_t)&v42, v43);
  sub_20BE02E30(a4, (uint64_t)&v45);
  sub_20BE02E30(a5, (uint64_t)&v45);
  sub_20BE02E30(a6, (uint64_t)&v45);
  sub_20BE02E30(a7, (uint64_t)&v45);
  *a1 = v45;
  v44[33] = a1;
  v44[34] = "OTypedScalarProperty::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v42);
    sub_20BDDC1C8(v44, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_20BDDBF20(&v40, (__int128 *)__p);
    if (v39 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v35 = sub_20BDDC09C(exception, (uint64_t)&v40);
    __cxa_throw(v35, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v42, v46);
  v14 = v47;
  v40 = v47;
  v41 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = *a2;
  if (v14)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v17 + 24))(&v36);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v36 + 24))(__p);
    v18 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)__p[0] + 48))(__p[0], v14);
    v19 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v20 = (unint64_t *)((char *)__p[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v37;
    if (v37)
    {
      v23 = (unint64_t *)&v37->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = *a2;
  }
  else
  {
    v18 = v49;
  }
  v36 = 0x100000000;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const void ***, uint64_t *, uint64_t))(*(_QWORD *)v17 + 96))(__p, v17, a3, &v42, &v36, v18);
  sub_20BDE82DC((uint64_t)(a1 + 8), (__int128 *)__p);
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v26 = (unint64_t *)((char *)__p[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_20BDE9D48((uint64_t)&v42, v43);
  v31 = v48;
  if (v48)
  {
    v32 = (unint64_t *)&v48->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  sub_20BDE9D48((uint64_t)v46, v46[1]);
}

void sub_20BE6B4A4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  void *v11;
  std::exception v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  v11 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v7 + 32));
  MEMORY[0x212B929D0](v7 + 8, "");
  if (a2 == 2)
    sub_20BE02570(v8 - 176, (uint64_t)v11);
  else
    sub_20BE02504(v8 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE6B3CCLL);
}

void sub_20BE6B588(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_20BE6B5DC(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_20BDDF694();
    v10 = 0;
    v11 = 0uLL;
    sub_20BE6B698(&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    sub_20BE6B6DC(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_20BE6B680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_20BE6B698(_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    sub_20BDDF694();
  result = sub_20BDDF6A8((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void sub_20BE6B6DC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  sub_20BE6B77C(&v16, &v14, &v12, (uint64_t)&v11);
}

void sub_20BE6B77C(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  sub_20BE6B808((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void sub_20BE6B808(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

unint64_t *sub_20BE6B8D8@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

_QWORD *sub_20BE6BA08(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_20BE6BAB8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_QWORD *sub_20BE6BB64(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C519B38;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BE6BBAC(_Unwind_Exception *exception_object)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;
  void *v3;

  if (v1)
  {
    sub_20BE6BC44(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20BE6BBCC(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BE6BBE0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;
  void *v2;

  v1 = *(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **)(a1 + 24);
  if (v1)
  {
    sub_20BE6BC44(v1);
    operator delete(v2);
  }
}

uint64_t sub_20BE6BC04(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C519B88))
    return a1 + 24;
  else
    return 0;
}

void sub_20BE6BC44(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a1)
{
  unint64_t v2;
  char *v3;
  unint64_t v4;
  char *v6;
  unint64_t i;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *__p;
  int v25;
  void *v26;
  void *v27;
  uint64_t *v28;
  int v29;
  uint64_t *v30;
  int v31;
  uint64_t *v32;
  int v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  int v39;
  char *v40;
  char *v41;
  char *v42;

  v2 = *((_QWORD *)a1 + 3);
  v38 = (void *)*((_QWORD *)a1 + 2);
  v39 = 0;
  sub_20BE6BED0((uint64_t)&v38, v2, (uint64_t)&__p);
  v3 = (char *)*((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)a1 + 3);
  if (__p != &v3[8 * (v4 >> 6)] || v25 != (v4 & 0x3F))
  {
    v40 = 0;
    v41 = 0;
    v42 = 0;
    if (v4)
    {
      v6 = 0;
      for (i = 0; i < v4; ++i)
      {
        if (((*(_QWORD *)(*((_QWORD *)a1 + 2) + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) != 0)
        {
          if (v6 >= v42)
          {
            v9 = v40;
            v10 = (v6 - v40) >> 2;
            v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 62)
              sub_20BDDF694();
            v12 = v42 - v40;
            if ((v42 - v40) >> 1 > v11)
              v11 = v12 >> 1;
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
              v13 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v13 = v11;
            if (v13)
            {
              v14 = (char *)sub_20BDE1330((uint64_t)&v42, v13);
              v9 = v40;
              v6 = v41;
            }
            else
            {
              v14 = 0;
            }
            v15 = &v14[4 * v10];
            *(_DWORD *)v15 = i;
            v8 = v15 + 4;
            while (v6 != v9)
            {
              v16 = *((_DWORD *)v6 - 1);
              v6 -= 4;
              *((_DWORD *)v15 - 1) = v16;
              v15 -= 4;
            }
            v40 = v15;
            v41 = v8;
            v42 = &v14[4 * v13];
            if (v9)
              operator delete(v9);
          }
          else
          {
            *(_DWORD *)v6 = i;
            v8 = v6 + 4;
          }
          v41 = v8;
          v4 = *((_QWORD *)a1 + 3);
          v6 = v8;
        }
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v36 = *(_QWORD *)a1;
    v37 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    sub_20BDDC0E4(&__p, ".animChans");
    v20 = *((_QWORD *)a1 + 5);
    LODWORD(v34) = 2;
    v35 = v20;
    LODWORD(v32) = 0;
    v33 = 0;
    LODWORD(v30) = 0;
    v31 = 0;
    LODWORD(v28) = 0;
    v29 = 0;
    sub_20BE6BFC0((uint64_t)&v38, &v36, (uint64_t)&__p, &v34, &v32, &v30, &v28);
    if (SHIBYTE(v26) < 0)
      operator delete(__p);
    v21 = v37;
    if (v37)
    {
      v22 = (unint64_t *)&v37->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    sub_20BE2AD84(&__p, (uint64_t *)&v40);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v38);
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v38);
    if (v40)
    {
      v41 = v40;
      operator delete(v40);
    }
    v3 = (char *)*((_QWORD *)a1 + 2);
  }
  if (v3)
    operator delete(v3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(a1);
}

uint64_t sub_20BE6BED0@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = *(unsigned int *)(result + 8);
  v4 = *(unint64_t **)result;
  if ((_DWORD)v3)
  {
    v5 = (64 - v3);
    if (v5 >= a2)
      v6 = a2;
    else
      v6 = (64 - v3);
    v7 = (0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & *v4;
    if (v7)
    {
      v8 = __rbit64(v7);
LABEL_15:
      *(_QWORD *)a3 = v4;
      *(_DWORD *)(a3 + 8) = __clz(v8);
      return result;
    }
    if (v5 >= a2)
    {
      v10 = v3 + a2 - 63;
      if (v10 < 0)
        v10 = v3 + a2;
      v11 = v10 >> 6;
      v12 = (v3 + a2) >> 6;
      if ((a2 & 0x8000000000000000) != 0)
        v12 = v11;
      *(_QWORD *)a3 = &v4[v12];
      *(_DWORD *)(a3 + 8) = ((_BYTE)v3 + (_BYTE)a2) & 0x3F;
      return result;
    }
    a2 -= v6;
    *(_QWORD *)result = ++v4;
  }
  if (a2 >= 0x40)
  {
    do
    {
      v9 = *v4;
      if (*v4)
        goto LABEL_14;
      *(_QWORD *)result = ++v4;
      a2 -= 64;
    }
    while (a2 > 0x3F);
  }
  if (a2)
  {
    v9 = *v4 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2);
    if (v9)
    {
LABEL_14:
      v8 = __rbit64(v9);
      goto LABEL_15;
    }
  }
  *(_QWORD *)a3 = v4;
  *(_DWORD *)(a3 + 8) = a2;
  return result;
}

uint64_t sub_20BE6BFC0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20BE2C2F8((int *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE6C0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE6C0C4(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24C519AB8;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 440));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 392));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 344));
  v4 = (void **)(a1 + 296);
  sub_20BE67B24(&v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 240));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 192));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 176));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 160));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 112));
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

_QWORD *Alembic::AbcCollection::v12::OCollectionsSchema::OCollectionsSchema(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v8 = a2[1];
  v15 = *a2;
  v16 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_20BE6C21C((uint64_t)a1, &v15, a3, a4, a5, a6, a7);
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *a1 = &unk_24C519BB0;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  return a1;
}

void sub_20BE6C208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE6C21C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C519C10;
  v14 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  sub_20BE6CA88(a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE6C318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v9);
  _Unwind_Resume(a1);
}

_QWORD *Alembic::AbcCollection::v12::OCollectionsSchema::OCollectionsSchema(_QWORD *a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v17 = *((_QWORD *)a2 + 4);
  v18 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *a2;
  LODWORD(v15) = 1;
  v16 = v10;
  sub_20BE6C21C((uint64_t)a1, &v17, a3, &v15, a4, a5, a6);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *a1 = &unk_24C519BB0;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  return a1;
}

void sub_20BE6C3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void Alembic::AbcCollection::v12::OCollectionsSchema::createCollection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, uint64_t **a4@<X3>, uint64_t **a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *v24;
  std::string v25;
  uint64_t v26[4];

  v26[2] = (uint64_t)(a1 + 1);
  v26[3] = (uint64_t)"OCollectionsSchema::createCollection";
  Alembic::AbcCollection::v12::OCollectionsSchema::getCollection((uint64_t)a1, a6);
  if (*(char *)(a6 + 31) < 0)
  {
    if (*(_QWORD *)(a6 + 16))
      goto LABEL_6;
  }
  else if (*(_BYTE *)(a6 + 31))
  {
    goto LABEL_6;
  }
  if (*(_QWORD *)(a6 + 32))
    return;
LABEL_6:
  v12 = (std::__shared_weak_count *)a1[6];
  v22 = a1[5];
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  LODWORD(v20) = 0;
  v21 = 0;
  sub_20BE1B910((uint64_t)&v24, &v22, a2, a3, a4, a5, &v20);
  *(_DWORD *)a6 = (_DWORD)v24;
  std::string::operator=((std::string *)(a6 + 8), &v25);
  sub_20BDE881C((_QWORD *)(a6 + 32), v26);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v24);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*(char *)(a6 + 31) < 0)
  {
    if (!*(_QWORD *)(a6 + 16))
      goto LABEL_18;
LABEL_21:
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)a6);
    *(_DWORD *)a6 = 2;
    sub_20BDDC0E4((_QWORD *)(a6 + 8), "");
    *(_QWORD *)(a6 + 32) = 0;
    *(_QWORD *)(a6 + 40) = 0;
    return;
  }
  if (*(_BYTE *)(a6 + 31))
    goto LABEL_21;
LABEL_18:
  if (!*(_QWORD *)(a6 + 32))
    goto LABEL_21;
  v18 = a1[8];
  if (v18 >= a1[9])
  {
    v19 = sub_20BE6CEC0(a1 + 7, a6);
  }
  else
  {
    sub_20BE6CFCC((uint64_t)(a1 + 9), a1[8], a6);
    v19 = v18 + 48;
    a1[8] = v18 + 48;
  }
  a1[8] = v19;
}

void sub_20BE6C5D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void **v19;
  void *v22;

  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v19);
  v22 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a19, (uint64_t)v22);
  else
    sub_20BE02504((uint64_t)&a19, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE6C588);
}

void sub_20BE6C65C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcCollection::v12::OCollectionsSchema::getCollection(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t PropertyHeader;
  BOOL v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  int v21;
  _BYTE v22[8];
  void *__p;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  const char *v32;

  v3 = (int *)(a1 + 8);
  v31 = a1 + 8;
  v32 = "OCollectionsSchema::getCollection(string)";
  PropertyHeader = Alembic::Abc::v12::OCompoundProperty::getPropertyHeader(a1 + 8);
  if (PropertyHeader
    && (*(_DWORD *)(PropertyHeader + 56) == 12 ? (v5 = *(_DWORD *)(PropertyHeader + 24) == 2) : (v5 = 0),
        v5 && sub_20BE6D1E4(PropertyHeader + 32)))
  {
    Alembic::Abc::v12::OCompoundProperty::getProperty(v3, (uint64_t)v22);
    v6 = v25;
    v27 = v25;
    v28 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 48))(&v29);
    LODWORD(v20) = 0;
    v21 = 0;
    LODWORD(v18) = 0;
    v19 = 0;
    sub_20BE6D27C(a2, &v29, &v20, &v18);
    v9 = v30;
    if (v30)
    {
      v10 = (unint64_t *)&v30->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v28;
    if (v28)
    {
      v13 = (unint64_t *)&v28->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v26;
    if (v26)
    {
      v16 = (unint64_t *)&v26->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v24 < 0)
      operator delete(__p);
  }
  else
  {
    *(_DWORD *)a2 = 2;
    sub_20BDDC0E4((_QWORD *)(a2 + 8), "");
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
}

void sub_20BE6C894(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_BYTE *Alembic::AbcCollection::v12::OCollectionsSchema::getCollection@<X0>(Alembic::AbcCollection::v12::OCollectionsSchema *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *result;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = *((_QWORD *)this + 7);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 8) - v4) >> 4) <= a2)
  {
    *(_DWORD *)a3 = 2;
    result = sub_20BDDC0E4((_QWORD *)(a3 + 8), "");
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
  }
  else
  {
    v5 = v4 + 48 * a2;
    *(_DWORD *)a3 = *(_DWORD *)v5;
    result = (_BYTE *)(a3 + 8);
    if (*(char *)(v5 + 31) < 0)
    {
      result = sub_20BDDBFAC(result, *(void **)(v5 + 8), *(_QWORD *)(v5 + 16));
    }
    else
    {
      v7 = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(v5 + 24);
      *(_OWORD *)result = v7;
    }
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(v5 + 32);
    v8 = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(a3 + 40) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  return result;
}

void sub_20BE6C9BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BE6C9DC(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24C519BB0;
  v2 = (void **)(a1 + 8);
  v4 = (void **)(a1 + 56);
  sub_20BE6DB7C(&v4);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_20BE6CA30(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = &unk_24C519BB0;
  v2 = (void **)(a1 + 8);
  v3 = (void **)(a1 + 56);
  sub_20BE6DB7C(&v3);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  operator delete(a1);
}

void sub_20BE6CA88(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *exception;
  _QWORD *v22;
  std::string __p;
  void *v24[2];
  char v25;
  uint64_t *v26;
  _QWORD *v27;
  _QWORD v28[37];
  int v29;
  const void **v30[4];
  std::__shared_weak_count *v31;
  int v32;
  uint64_t v33;
  void **v34;

  v27 = 0;
  v28[0] = 0;
  v26 = (uint64_t *)&v27;
  v28[35] = 0;
  v28[36] = 0;
  v29 = 2;
  sub_20BDEBF8C((uint64_t *)v30, (const void ***)&v26);
  v30[3] = 0;
  v31 = 0;
  v32 = 0;
  v33 = 1;
  sub_20BDE9D48((uint64_t)&v26, v27);
  sub_20BE02E30(a4, (uint64_t)&v29);
  sub_20BE02E30(a5, (uint64_t)&v29);
  sub_20BE02E30(a6, (uint64_t)&v29);
  sub_20BE02E30(a7, (uint64_t)&v29);
  *(_DWORD *)(a1 + 8) = v29;
  v28[33] = a1 + 8;
  v28[34] = "OSchema::OSchema::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v26);
    sub_20BDDC1C8(v28, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_20BDDBF20(v24, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    v22 = sub_20BDDC09C(exception, (uint64_t)v24);
    __cxa_throw(v22, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v26, v30);
  if (HIDWORD(v33) != 1)
  {
    sub_20BDDC0E4(v24, "schema");
    sub_20BDDC0E4(&__p, "AbcCollection_Collections_v1");
    v34 = v24;
    v14 = sub_20BDDDFDC(&v26, (const void **)v24, (uint64_t)&unk_20CA529EC, (__int128 **)&v34);
    std::string::operator=((std::string *)(v14 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v25 < 0)
      operator delete(v24[0]);
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t **))(*(_QWORD *)*a2 + 112))(v24, *a2, a3, &v26);
  sub_20BDE82DC(a1 + 40, (__int128 *)v24);
  v15 = (std::__shared_weak_count *)v24[1];
  if (v24[1])
  {
    v16 = (unint64_t *)((char *)v24[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sub_20BDE9D48((uint64_t)&v26, v27);
  v18 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  sub_20BDE9D48((uint64_t)v30, v30[1]);
}

void sub_20BE6CD30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v27;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a22);
  v27 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v23 + 40));
  MEMORY[0x212B929D0](v23 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v24 - 192, (uint64_t)v27);
  else
    sub_20BE02504(v24 - 192, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE6CC58);
}

void sub_20BE6CE1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE6CE70(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20BE6CE98(void **a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20BE6CEC0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_20BDDF694();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_20BE6D0B4((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[48 * v3];
  v13 = &v7[48 * v6];
  sub_20BE6CFCC((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 48;
  sub_20BE6D040(a1, &v10);
  v8 = a1[1];
  sub_20BE6D198((uint64_t)&v10);
  return v8;
}

void sub_20BE6CFB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE6D198((uint64_t)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_20BE6CFCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *result;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  result = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)result = v6;
  }
  v7 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 40) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_20BE6D040(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BE6D0F8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20BE6D0B4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    sub_20BDDF5B4();
  return operator new(48 * a2);
}

uint64_t sub_20BE6D0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = a7 - 48;
  while (a3 + v11 != a5)
  {
    v13 = v12 + v11;
    v11 -= 48;
    sub_20BE6CFCC(a1, v13, v11 + a3);
  }
  return a6;
}

uint64_t sub_20BE6D198(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(i - 48));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_20BE6D1E4(uint64_t a1)
{
  _BOOL8 v2;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  sub_20BDDC0E4(__p, "interpretation");
  sub_20BE01E1C(a1, (const void **)__p, v6);
  if (v7 < 0)
  {
    v2 = v6[1] == 0;
    operator delete(v6[0]);
  }
  else
  {
    v2 = v7 == 0;
  }
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE6D260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE6D27C(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t *v31;
  int v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  std::__shared_weak_count *v40;

  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  v39 = *a2;
  v40 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (std::__shared_weak_count *)a2[1];
    v35 = *a2;
    v36 = v12;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v35 = v8;
    v36 = 0;
  }
  LODWORD(v33) = 0;
  v34 = 0;
  LODWORD(v31) = 0;
  v32 = 0;
  v15 = sub_20BE6D45C((uint64_t)&v35, a3, a4, &v33, &v31);
  LODWORD(v37) = 1;
  v38 = v15;
  sub_20BE6D5F4(a1, &v39, &v37);
  v16 = v36;
  if (v36)
  {
    v17 = (unint64_t *)&v36->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v40;
  if (v40)
  {
    v20 = (unint64_t *)&v40->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)a2[1];
  v29 = *a2;
  v30 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  sub_20BE6D768(a1, &v29, a3, a4);
  v25 = v30;
  if (v30)
  {
    v26 = (unint64_t *)&v30->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return a1;
}

void sub_20BE6D428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void **v15;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE6D45C(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, uint64_t **a5)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const void **v19;
  _QWORD *v20[4];
  unsigned int v21;
  uint64_t v22[4];
  std::__shared_weak_count *v23;
  int v24;
  uint64_t v25;

  v9 = *(std::__shared_weak_count **)(a1 + 8);
  v20[2] = *(_QWORD **)a1;
  v20[3] = &v9->__vftable;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v20[0] = 0;
  v20[1] = 0;
  v19 = (const void **)v20;
  v21 = 2;
  sub_20BDEBF8C(v22, &v19);
  v22[3] = 0;
  v23 = 0;
  v24 = 0;
  v25 = 1;
  sub_20BDE9D48((uint64_t)&v19, v20[0]);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_20BE02E30(a2, (uint64_t)&v21);
  sub_20BE02E30(a3, (uint64_t)&v21);
  sub_20BE02E30(a4, (uint64_t)&v21);
  sub_20BE02E30(a5, (uint64_t)&v21);
  v14 = v21;
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sub_20BDE9D48((uint64_t)v22, (_QWORD *)v22[1]);
  return v14;
}

void sub_20BE6D5BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  _QWORD *v8;
  uint64_t v9;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD *);
  v9 = va_arg(va2, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  sub_20BDE9D48((uint64_t)va1, v8);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE6D5F4(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  int v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v5 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  v29 = *a2;
  v30 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = (std::__shared_weak_count *)a2[1];
    v27 = *a2;
    v28 = v8;
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    v27 = v5;
    v28 = 0;
  }
  LODWORD(v25) = 0;
  v26 = 0;
  LODWORD(v23) = 0;
  v24 = 0;
  LODWORD(v21) = 0;
  v22 = 0;
  v11 = sub_20BE6D45C((uint64_t)&v27, a3, &v25, &v23, &v21);
  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_DWORD *)a1 = v11;
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v30;
  if (v30)
  {
    v18 = (unint64_t *)&v30->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE6D74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v7 - 48));
  _Unwind_Resume(a1);
}

BOOL sub_20BE6D768(uint64_t a1, _QWORD *a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v6;
  BOOL v7;
  _BOOL8 result;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *p_p;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *exception;
  _QWORD *v19;
  void *__p;
  uint64_t v21;
  unsigned __int8 v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  _QWORD v28[35];

  v28[33] = a1;
  v28[34] = "OTypedArrayProperty::init( ArrayPtr)";
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  LODWORD(v26) = 0;
  v27 = 0;
  LODWORD(__p) = 0;
  LODWORD(v21) = 0;
  sub_20BE6DA40(a3, a4, &v26, (uint64_t **)&__p);
  v7 = *(_DWORD *)(v6 + 56) == 12 && *(_DWORD *)(v6 + 24) == 2;
  if (!v7 || !(result = sub_20BE6D1E4(v6 + 32)))
  {
    sub_20BDDBD68((uint64_t)&v26);
    v9 = sub_20BDDC1C8(v28, (uint64_t)"Incorrect match of header datatype: ", 36);
    v10 = sub_20BDE00F4(v9, (int *)(v6 + 56));
    v11 = sub_20BDDC1C8(v10, (uint64_t)" to expected: ", 14);
    v25 = 0x10000000CLL;
    v12 = sub_20BDE00F4(v11, (int *)&v25);
    v13 = sub_20BDDC1C8(v12, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_20BDDC0E4(v23, "interpretation");
    sub_20BE01E1C(v6 + 32, (const void **)v23, &__p);
    if ((v22 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v22 & 0x80u) == 0)
      v15 = v22;
    else
      v15 = v21;
    v16 = sub_20BDDC1C8(v13, (uint64_t)p_p, v15);
    v17 = sub_20BDDC1C8(v16, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v17, (uint64_t)"", 0);
    if ((char)v22 < 0)
      operator delete(__p);
    if (v24 < 0)
      operator delete(v23[0]);
    std::stringbuf::str();
    sub_20BDDBF20(&__p, (__int128 *)v23);
    if (v24 < 0)
      operator delete(v23[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v19 = sub_20BDDC09C(exception, (uint64_t)&__p);
    __cxa_throw(v19, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  return result;
}

void sub_20BE6D948(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;
  uint64_t v25;
  void *v28;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  v28 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v24 + 32));
  MEMORY[0x212B929D0](v24 + 8, "");
  if (a2 == 2)
    sub_20BE02570(v25 - 64, (uint64_t)v28);
  else
    sub_20BE02504(v25 - 64, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE6D7F8);
}

void sub_20BE6DA20(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BE6DA40(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void **v13;
  _QWORD *v14[2];
  int v15;
  uint64_t v16[4];
  std::__shared_weak_count *v17;
  int v18;
  uint64_t v19;

  v14[0] = 0;
  v14[1] = 0;
  v13 = (const void **)v14;
  v15 = 2;
  sub_20BDEBF8C(v16, &v13);
  v16[3] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  sub_20BDE9D48((uint64_t)&v13, v14[0]);
  sub_20BE02E30(a1, (uint64_t)&v15);
  sub_20BE02E30(a2, (uint64_t)&v15);
  sub_20BE02E30(a3, (uint64_t)&v15);
  sub_20BE02E30(a4, (uint64_t)&v15);
  v8 = v19;
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_20BDE9D48((uint64_t)v16, (_QWORD *)v16[1]);
  return v8;
}

void sub_20BE6DB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, _QWORD *a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  sub_20BDE9D48((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20BE6DB7C(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v4 - 6);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Alembic::AbcCollection::v12::ICollectionsSchema::init(_QWORD *a1, uint64_t **a2, uint64_t **a3)
{
  Alembic::Abc::v12::ICompoundProperty *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t NumProperties;
  uint64_t j;
  __int128 *PropertyHeader;
  BOOL v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _DWORD v33[4];
  _DWORD v34[4];
  uint64_t v35;
  std::__shared_weak_count *v36;
  int v37[12];
  void *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *__p[2];
  char v44;
  int v45;
  _QWORD *v46[3];
  int v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  _QWORD *v51;
  const char *v52;

  v6 = (Alembic::Abc::v12::ICompoundProperty *)(a1 + 1);
  v51 = a1 + 1;
  v52 = "ICollectionsSchema::init()";
  v7 = (std::__shared_weak_count *)a1[6];
  v49 = a1[5];
  v50 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = a1[7];
  for (i = a1[8]; i != v11; Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(i - 48)))
    ;
  a1[8] = v11;
  NumProperties = Alembic::Abc::v12::ICompoundProperty::getNumProperties(v6);
  if (NumProperties)
  {
    for (j = 0; j != NumProperties; ++j)
    {
      PropertyHeader = (__int128 *)Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
      sub_20BE6E3D4(__p, PropertyHeader);
      v15 = v47 == 12 && v45 == 2;
      if (v15 && sub_20BE190D8((uint64_t)v46, 0))
      {
        v35 = v49;
        v36 = v50;
        if (v50)
        {
          v16 = (unint64_t *)&v50->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        v34[0] = 0;
        v34[2] = 0;
        v33[0] = 0;
        v33[2] = 0;
        Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v37, &v35, v34, v33);
        sub_20BE18AF0((uint64_t)&v38, v37, (uint64_t)__p, a2, a3);
        v18 = a1[8];
        if (v18 >= a1[9])
        {
          v21 = sub_20BE6E478(a1 + 7, (uint64_t)&v38);
        }
        else
        {
          *(_DWORD *)v18 = (_DWORD)v38;
          v19 = (_BYTE *)(v18 + 8);
          if (SHIBYTE(v40) < 0)
          {
            sub_20BDDBFAC(v19, (void *)v39, *((unint64_t *)&v39 + 1));
          }
          else
          {
            v20 = v39;
            *(_QWORD *)(v18 + 24) = v40;
            *(_OWORD *)v19 = v20;
          }
          *(_QWORD *)(v18 + 32) = v41;
          v22 = v42;
          *(_QWORD *)(v18 + 40) = v42;
          if (v22)
          {
            v23 = (unint64_t *)(v22 + 8);
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          v21 = v18 + 48;
          a1[8] = v18 + 48;
        }
        a1[8] = v21;
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v38);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v37);
        v25 = v36;
        if (v36)
        {
          v26 = (unint64_t *)&v36->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
      v28 = v48;
      if (v48)
      {
        v29 = (unint64_t *)&v48->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      sub_20BDE9D48((uint64_t)v46, v46[1]);
      if (v44 < 0)
        operator delete(__p[0]);
    }
    v7 = v50;
  }
  if (v7)
  {
    v31 = (unint64_t *)&v7->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20BE6DEA4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v33;

  *(_QWORD *)(v28 + 64) = v29;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&a22);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a16);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a14);
  sub_20BE6DF6C((uint64_t)&a28);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v30 - 120));
  v33 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v30 - 104, (uint64_t)v33);
  else
    sub_20BE02504(v30 - 104, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE6DE84);
}

void sub_20BE6DF4C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BE6DF6C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 64));
  sub_20BDE9D48(a1 + 32, *(_QWORD **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_BYTE *Alembic::AbcCollection::v12::ICollectionsSchema::getCollection@<X0>(Alembic::AbcCollection::v12::ICollectionsSchema *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *result;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = *((_QWORD *)this + 7);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 8) - v4) >> 4) <= a2)
  {
    *(_DWORD *)a3 = 2;
    result = sub_20BDDC0E4((_QWORD *)(a3 + 8), "");
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
  }
  else
  {
    v5 = v4 + 48 * a2;
    *(_DWORD *)a3 = *(_DWORD *)v5;
    result = (_BYTE *)(a3 + 8);
    if (*(char *)(v5 + 31) < 0)
    {
      result = sub_20BDDBFAC(result, *(void **)(v5 + 8), *(_QWORD *)(v5 + 16));
    }
    else
    {
      v7 = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(v5 + 24);
      *(_OWORD *)result = v7;
    }
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(v5 + 32);
    v8 = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(a3 + 40) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  return result;
}

void sub_20BE6E0B8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcCollection::v12::ICollectionsSchema::getCollection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t PropertyHeader;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  int v22;
  _DWORD v23[4];
  _DWORD v24[4];
  uint64_t v25;
  std::__shared_weak_count *v26;
  int v27[12];
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  const char *v31;

  v30 = a1 + 8;
  v31 = "ICollectionsSchema::getCollection(string)";
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a1 + 8);
  if (PropertyHeader
    && (*(_DWORD *)(PropertyHeader + 56) == 12 ? (v7 = *(_DWORD *)(PropertyHeader + 24) == 2) : (v7 = 0),
        v7 && sub_20BE190D8(PropertyHeader + 32, 0)))
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(std::__shared_weak_count **)(a1 + 48);
    v28 = v8;
    v29 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v25 = v8;
      v26 = v9;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v25 = v8;
      v26 = 0;
    }
    v24[0] = 0;
    v24[2] = 0;
    v23[0] = 0;
    v23[2] = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v27, &v25, v24, v23);
    LODWORD(v21) = 0;
    v22 = 0;
    LODWORD(v19) = 0;
    v20 = 0;
    sub_20BE18AF0(a3, v27, a2, &v21, &v19);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v27);
    v13 = v26;
    if (v26)
    {
      v14 = (unint64_t *)&v26->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v29;
    if (v29)
    {
      v17 = (unint64_t *)&v29->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    *(_DWORD *)a3 = 2;
    sub_20BDDC0E4((_QWORD *)(a3 + 8), "");
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
  }
}

void sub_20BE6E2D0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void **Alembic::AbcCollection::v12::ICollectionsSchema::getCollectionName@<X0>(void **this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v4;

  v4 = this[7];
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)this[8] - v4) >> 4) <= a2)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    this = (void **)sub_20BE6E6E4((uint64_t)&v4[48 * a2]);
    if (*((char *)this + 23) < 0)
    {
      return (void **)sub_20BDDBFAC((_BYTE *)a3, *this, (unint64_t)this[1]);
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)this;
      *(_QWORD *)(a3 + 16) = this[2];
    }
  }
  return this;
}

void sub_20BE6E3B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE6E3D4(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
  sub_20BDEBF8C(__dst + 4, (const void ***)a2 + 4);
  __dst[7] = *((_QWORD *)a2 + 7);
  v5 = *((_QWORD *)a2 + 9);
  __dst[8] = *((_QWORD *)a2 + 8);
  __dst[9] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return __dst;
}

void sub_20BE6E45C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE6E478(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_20BDDF694();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_20BE6D0B4((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[48 * v3];
  v13 = &v7[48 * v6];
  sub_20BE6CFCC((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 48;
  sub_20BE6E584(a1, &v10);
  v8 = a1[1];
  sub_20BE6E698((uint64_t)&v10);
  return v8;
}

void sub_20BE6E570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE6E698((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE6E584(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BE6E5F8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BE6E5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = a7 - 48;
  while (a3 + v11 != a5)
  {
    v13 = v12 + v11;
    v11 -= 48;
    sub_20BE6CFCC(a1, v13, v11 + a3);
  }
  return a6;
}

uint64_t sub_20BE6E698(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(i - 48));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20BE6E6E4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20BE6E720(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  unsigned __int8 v11;
  _QWORD *v12;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  if ((v11 & 1) == 0)
  {
    {
      v12 = operator new(0x50uLL);
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      *((_DWORD *)v12 + 6) = 1;
      v12[6] = 0;
      v12[5] = 0;
      v12[4] = v12 + 5;
      *((_DWORD *)v12 + 14) = 127;
      *((_BYTE *)v12 + 60) = 0;
      v12[8] = 0;
      v12[9] = 0;
      Alembic::Abc::v12::IBasePropertyT<std::shared_ptr<Alembic::AbcCoreAbstract::v12::ArrayPropertyReader>>::getHeader(void)const::phd = (uint64_t)v12;
    }
  }
  JUMPOUT(0x20BE6E710);
}

void sub_20BE6E7C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcMaterial::v12::OMaterialSchema::OMaterialSchema(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v8 = a2[1];
  v15 = *a2;
  v16 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_20BE6E90C(a1, &v15, a3, a4, a5, a6, a7);
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_QWORD *)a1 = &unk_24C519C30;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 64), "");
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  Alembic::AbcMaterial::v12::OMaterialSchema::init((Alembic::AbcMaterial::v12::OMaterialSchema *)a1);
  return a1;
}

void sub_20BE6E8D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  Alembic::Abc::v12::OCompoundProperty *v2;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v1 + 104));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20BE6E90C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C519C90;
  v14 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  sub_20BE70F18(a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20BE6EA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v9);
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::OMaterialSchema::init(Alembic::AbcMaterial::v12::OMaterialSchema *this)
{
  _OWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  v2 = operator new(0xA0uLL);
  v2[1] = 0u;
  v2[2] = 0u;
  v2[5] = 0u;
  *v2 = 0u;
  v2[7] = 0u;
  v2[8] = 0u;
  v2[9] = 0u;
  v2[6] = 0u;
  v2[4] = 0u;
  v2[3] = 0u;
  *((_QWORD *)v2 + 2) = (char *)v2 + 24;
  *((_QWORD *)v2 + 5) = v2 + 3;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 7) = 0;
  *((_QWORD *)v2 + 10) = 0;
  *((_QWORD *)v2 + 9) = 0;
  *((_QWORD *)v2 + 8) = (char *)v2 + 72;
  *((_DWORD *)v2 + 22) = 2;
  sub_20BDDC0E4((_QWORD *)v2 + 12, "");
  *((_QWORD *)v2 + 19) = 0;
  *(_OWORD *)((char *)v2 + 136) = 0u;
  *(_OWORD *)((char *)v2 + 120) = 0u;
  sub_20BE71350(&v12, (uint64_t)v2);
  sub_20BDE82DC((uint64_t)this + 104, &v12);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *((_QWORD *)this + 6);
  *(_QWORD *)&v12 = *((_QWORD *)this + 5);
  *((_QWORD *)&v12 + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_20BDE82DC(*((_QWORD *)this + 13), &v12);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20BE6EB9C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;

  sub_20BDE9D48(v4, *((_QWORD **)v1 + 9));
  sub_20BDE9D48(v3, *((_QWORD **)v1 + 6));
  sub_20BE70E7C(v2, *((_QWORD **)v1 + 3));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcMaterial::v12::OMaterialSchema::OMaterialSchema(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v17 = *((_QWORD *)a2 + 4);
  v18 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *a2;
  LODWORD(v15) = 1;
  v16 = v10;
  sub_20BE6E90C(a1, &v17, a3, &v15, a4, a5, a6);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_QWORD *)a1 = &unk_24C519C30;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 64), "");
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  Alembic::AbcMaterial::v12::OMaterialSchema::init((Alembic::AbcMaterial::v12::OMaterialSchema *)a1);
  return a1;
}

void sub_20BE6ECD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  Alembic::Abc::v12::OCompoundProperty *v2;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v1 + 104));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::OMaterialSchema::setShader(uint64_t a1, uint64_t a2, uint64_t a3, const std::string *a4)
{
  uint64_t **v8;
  uint64_t *v9;
  void *v10[2];
  char v11;
  std::string __p;
  uint64_t v13;
  const char *v14;

  v13 = a1 + 8;
  v14 = "OMaterialSchema::setShader";
  sub_20BDDC0E4(&__p, "target");
  sub_20BE7C614(a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_20BDDC0E4(&__p, "shaderType");
  sub_20BE7C614(a3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_20BDDC0E4(v10, "");
  sub_20BE7C4F0(a2, a3, (uint64_t)v10, &__p);
  if (v11 < 0)
    operator delete(v10[0]);
  v8 = (uint64_t **)(*(_QWORD *)(a1 + 104) + 40);
  v10[0] = &__p;
  v9 = sub_20BDDDFDC(v8, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_20CA52A60, (__int128 **)v10);
  std::string::operator=((std::string *)(v9 + 7), a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BE6EE28(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v24;

  if (a15 < 0)
    operator delete(__p);
  v24 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a22, (uint64_t)v24);
  else
    sub_20BE02504((uint64_t)&a22, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE6EE14);
}

void sub_20BE6EEA8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::OMaterialSchema::getShaderParameters(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _DWORD v27[4];
  _DWORD v28[4];
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::string *v31;
  std::string v32;
  uint64_t v33;
  void *__p;
  std::string v35;
  uint64_t v36[2];
  int v37;
  std::string v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  __int128 v42;
  std::string v43;
  _QWORD *v44;
  const char *v45;

  v44 = a1 + 1;
  v45 = "OMaterialSchema::getShaderParameters";
  sub_20BDDC0E4(&__p, "target");
  sub_20BE7C614(a2, (uint64_t)&__p);
  if (v35.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  sub_20BDDC0E4(&__p, "shaderType");
  sub_20BE7C614(a3, (uint64_t)&__p);
  if (v35.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  sub_20BDDC0E4(&__p, "params");
  sub_20BE7C4F0(a2, a3, (uint64_t)&__p, &v43);
  if (v35.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  v8 = sub_20BDEEBA4(a1[13] + 16, (const void **)&v43.__r_.__value_.__l.__data_);
  v9 = v8;
  if (a1[13] + 24 == v8)
  {
    LODWORD(__p) = 2;
    sub_20BDDC0E4(&v35, "");
    v36[0] = 0;
    v36[1] = 0;
    v37 = 2;
    sub_20BDDC0E4(&v38, "");
    v39 = 0;
    v40 = 0;
    v42 = 0uLL;
    v41 = &v42;
    v12 = (std::__shared_weak_count *)a1[6];
    v29 = a1[5];
    v30 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v28[0] = 0;
    v28[2] = 0;
    v27[0] = 0;
    v27[2] = 0;
    Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v31, &v29, &v43, v28, v27);
    v37 = (int)v31;
    std::string::operator=(&v38, &v32);
    sub_20BDE881C(&v39, &v33);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v31);
    v15 = v30;
    if (v30)
    {
      v16 = (unint64_t *)&v30->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = (uint64_t **)(a1[13] + 16);
    v31 = &v43;
    v19 = sub_20BE71E90(v18, (const void **)&v43.__r_.__value_.__l.__data_, (uint64_t)&unk_20CA52A60, (__int128 **)&v31);
    *((_DWORD *)v19 + 14) = (_DWORD)__p;
    std::string::operator=((std::string *)(v19 + 8), &v35);
    sub_20BDE881C(v19 + 11, v36);
    *((_DWORD *)v19 + 26) = v37;
    std::string::operator=((std::string *)(v19 + 14), &v38);
    sub_20BDE881C(v19 + 17, &v39);
    if (v19 + 7 != (uint64_t *)&__p)
      sub_20BDFC4AC((uint64_t **)v19 + 19, v41, &v42);
    *(_DWORD *)a4 = v37;
    v20 = (_BYTE *)(a4 + 8);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20BDDBFAC(v20, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)v20 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
      *(_QWORD *)(a4 + 24) = *((_QWORD *)&v38.__r_.__value_.__l + 2);
    }
    v24 = v40;
    *(_QWORD *)(a4 + 32) = v39;
    *(_QWORD *)(a4 + 40) = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    sub_20BDE9D48((uint64_t)&v41, (_QWORD *)v42);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v37);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&__p);
  }
  else
  {
    *(_DWORD *)a4 = *(_DWORD *)(v8 + 104);
    v10 = (_BYTE *)(a4 + 8);
    if (*(char *)(v9 + 135) < 0)
    {
      sub_20BDDBFAC(v10, *(void **)(v9 + 112), *(_QWORD *)(v9 + 120));
    }
    else
    {
      v11 = *(_OWORD *)(v9 + 112);
      *(_QWORD *)(a4 + 24) = *(_QWORD *)(v9 + 128);
      *(_OWORD *)v10 = v11;
    }
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v9 + 136);
    v21 = *(_QWORD *)(v9 + 144);
    *(_QWORD *)(a4 + 40) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
}

void sub_20BE6F248(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  void *v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)va1);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  sub_20BE6F358((_QWORD **)va2);
  if (*(char *)(v7 - 97) < 0)
    operator delete(*(void **)(v7 - 120));
  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v7 - 96, (uint64_t)v10);
  else
    sub_20BE02504(v7 - 96, 0);
  __cxa_end_catch();
  *(_DWORD *)v6 = 2;
  sub_20BDDC0E4((_QWORD *)(v6 + 8), "");
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  JUMPOUT(0x20BE6F228);
}

void sub_20BE6F338(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE6F358(_QWORD **a1)
{
  sub_20BDE9D48((uint64_t)(a1 + 12), a1[13]);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 6));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)a1);
}

void Alembic::AbcMaterial::v12::OMaterialSchema::createNodeCompound(Alembic::AbcMaterial::v12::OMaterialSchema *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD v8[4];
  _DWORD v9[4];
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  std::string v15;
  uint64_t v16[4];

  v16[2] = (uint64_t)this + 8;
  v16[3] = (uint64_t)"OMaterialSchema::createNodeCompound";
  if (*((char *)this + 87) < 0)
  {
    if (!*((_QWORD *)this + 9))
      goto LABEL_5;
  }
  else if (!*((_BYTE *)this + 87))
  {
LABEL_5:
    if (*((_QWORD *)this + 11))
      return;
  }
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v12 = *((_QWORD *)this + 5);
  v13 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".nodes");
  v9[0] = 0;
  v9[2] = 0;
  v8[0] = 0;
  v8[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v14, &v12, __p, v9, v8);
  *((_DWORD *)this + 14) = v14;
  std::string::operator=((std::string *)((char *)this + 64), &v15);
  sub_20BDE881C((_QWORD *)this + 11, v16);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v14);
  if (v11 < 0)
    operator delete(__p[0]);
  v5 = v13;
  if (v13)
  {
    v6 = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20BE6F4B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  void *v25;

  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&a22);
  if (a19 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a20);
  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v22 - 32, (uint64_t)v25);
  else
    sub_20BE02504(v22 - 32, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE6F4A0);
}

void sub_20BE6F524(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::OMaterialSchema::addNetworkNode(Alembic::AbcMaterial::v12::OMaterialSchema *a1, uint64_t a2, const void *a3, const void *a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *exception;
  _QWORD *v25;
  int v26;
  std::string v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  uint64_t *v32;
  int v33;
  int v34;
  std::string v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  const void **v42;
  std::string v43;
  uint64_t v44;
  void *v45[2];
  char v46;
  void *__p;
  std::string v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  std::string v52;
  uint64_t v53[2];
  __int128 *v54;
  __int128 v55[11];
  const void *v56[2];
  char v57;
  _QWORD *v58;
  const char *v59;

  v58 = (_QWORD *)((char *)a1 + 8);
  v59 = "OMaterialSchema::addNetworkNode";
  sub_20BDDC0E4(&__p, "nodeName");
  sub_20BE7C614(a2, (uint64_t)&__p);
  if (v48.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  sub_20BDDC0E4(&__p, "target");
  sub_20BE7C614((uint64_t)a3, (uint64_t)&__p);
  if (v48.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  std::operator+<char>();
  if (*((_QWORD *)a1 + 13) + 24 != sub_20BDEEBA4(*((_QWORD *)a1 + 13) + 16, v56))
  {
    sub_20BDDBD68((uint64_t)&__p);
    v20 = sub_20BDDC1C8(&v48.__r_.__value_.__l.__size_, (uint64_t)"Node already added: ", 20);
    v21 = *(char *)(a2 + 23);
    if (v21 >= 0)
      v22 = a2;
    else
      v22 = *(_QWORD *)a2;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a2 + 23);
    else
      v23 = *(_QWORD *)(a2 + 8);
    sub_20BDDC1C8(v20, v22, v23);
    std::stringbuf::str();
    sub_20BDDBF20(&v42, (__int128 *)v45);
    if (v46 < 0)
      operator delete(v45[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v25 = sub_20BDDC09C(exception, (uint64_t)&v42);
    __cxa_throw(v25, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  Alembic::AbcMaterial::v12::OMaterialSchema::createNodeCompound(a1);
  LODWORD(__p) = 2;
  sub_20BDDC0E4(&v48, "");
  v49 = 0;
  v50 = 0;
  v51 = 2;
  sub_20BDDC0E4(&v52, "");
  v53[0] = 0;
  v53[1] = 0;
  v55[0] = 0uLL;
  v54 = v55;
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 12);
  v40 = *((_QWORD *)a1 + 11);
  v41 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  LODWORD(v45[0]) = 0;
  LODWORD(v45[1]) = 0;
  LODWORD(v38) = 0;
  v39 = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v42, &v40, a2, v45, &v38);
  LODWORD(__p) = (_DWORD)v42;
  std::string::operator=(&v48, &v43);
  sub_20BDE881C(&v49, &v44);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v42);
  v11 = v41;
  if (v41)
  {
    v12 = (unint64_t *)&v41->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (uint64_t **)(*((_QWORD *)a1 + 13) + 16);
  v42 = v56;
  v15 = sub_20BE71E90(v14, v56, (uint64_t)&unk_20CA52A60, (__int128 **)&v42);
  *((_DWORD *)v15 + 14) = (_DWORD)__p;
  std::string::operator=((std::string *)(v15 + 8), &v48);
  sub_20BDE881C(v15 + 11, &v49);
  *((_DWORD *)v15 + 26) = v51;
  std::string::operator=((std::string *)(v15 + 14), &v52);
  sub_20BDE881C(v15 + 17, v53);
  if (v15 + 7 != (uint64_t *)&__p)
    sub_20BDFC4AC((uint64_t **)v15 + 19, v54, v55);
  v34 = (int)__p;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    sub_20BDDBFAC(&v35, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  else
    v35 = v48;
  v36 = v49;
  v37 = v50;
  if (v50)
  {
    v16 = (unint64_t *)(v50 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  sub_20BDDC0E4(v45, "target");
  LODWORD(v38) = 0;
  v39 = 0;
  LODWORD(v32) = 0;
  v33 = 0;
  LODWORD(v30) = 0;
  v31 = 0;
  sub_20BE0C69C((uint64_t)&v42, &v34, (uint64_t)v45, &v38, &v32, &v30);
  Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v42, a3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)&v42);
  if (v46 < 0)
    operator delete(v45[0]);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v34);
  v26 = (int)__p;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    sub_20BDDBFAC(&v27, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  else
    v27 = v48;
  v28 = v49;
  v29 = v50;
  if (v50)
  {
    v18 = (unint64_t *)(v50 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  sub_20BDDC0E4(v45, "type");
  LODWORD(v38) = 0;
  v39 = 0;
  LODWORD(v32) = 0;
  v33 = 0;
  LODWORD(v30) = 0;
  v31 = 0;
  sub_20BE0C69C((uint64_t)&v42, &v26, (uint64_t)v45, &v38, &v32, &v30);
  Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v42, a4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)&v42);
  if (v46 < 0)
    operator delete(v45[0]);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v26);
  sub_20BDE9D48((uint64_t)&v54, *(_QWORD **)&v55[0]);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v51);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&__p);
  if (v57 < 0)
    operator delete((void *)v56[0]);
}

void sub_20BE6FA14(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,std::exception a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  void *v49;

  sub_20BDDC194(&a29);
  sub_20BDDBE98((uint64_t)&a41);
  if (*(char *)(v46 - 105) < 0)
    operator delete(*(void **)(v46 - 128));
  v49 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v46 - 104, (uint64_t)v49);
  else
    sub_20BE02504(v46 - 104, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE6F964);
}

void sub_20BE6FBA4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::OMaterialSchema::setNetworkNodeConnection(Alembic::AbcMaterial::v12::OMaterialSchema *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t *v23;
  _DWORD v24[4];
  _DWORD v25[4];
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *__p;
  std::string v29;
  uint64_t v30;
  std::string __str;
  uint64_t v32[2];
  int v33;
  std::string v34;
  uint64_t v35[2];
  __int128 *v36;
  __int128 v37;
  const void *v38[2];
  char v39;
  _QWORD *v40;
  const char *v41;

  v40 = (_QWORD *)((char *)a1 + 8);
  v41 = "OMaterialSchema::setNetworkNodeConnection";
  std::operator+<char>();
  if (*((_QWORD *)a1 + 13) + 24 == sub_20BDEEBA4(*((_QWORD *)a1 + 13) + 16, v38))
  {
    Alembic::AbcMaterial::v12::OMaterialSchema::createNodeCompound(a1);
    LODWORD(__str.__r_.__value_.__l.__data_) = 2;
    sub_20BDDC0E4(&__str.__r_.__value_.__l.__size_, "");
    v32[0] = 0;
    v32[1] = 0;
    v33 = 2;
    sub_20BDDC0E4(&v34, "");
    v35[0] = 0;
    v35[1] = 0;
    v37 = 0uLL;
    v36 = &v37;
    v10 = (std::__shared_weak_count *)*((_QWORD *)a1 + 12);
    v26 = *((_QWORD *)a1 + 11);
    v27 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v25[0] = 0;
    v25[2] = 0;
    v24[0] = 0;
    v24[2] = 0;
    Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&__p, &v26, a2, v25, v24);
    LODWORD(__str.__r_.__value_.__l.__data_) = (_DWORD)__p;
    std::string::operator=((std::string *)&__str.__r_.__value_.__r.__words[1], &v29);
    sub_20BDE881C(v32, &v30);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&__p);
    v13 = v27;
    if (v27)
    {
      v14 = (unint64_t *)&v27->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (uint64_t **)(*((_QWORD *)a1 + 13) + 16);
    __p = v38;
    v17 = sub_20BE71E90(v16, v38, (uint64_t)&unk_20CA52A60, (__int128 **)&__p);
    *((_DWORD *)v17 + 14) = __str.__r_.__value_.__l.__data_;
    std::string::operator=((std::string *)(v17 + 8), (const std::string *)&__str.__r_.__value_.__r.__words[1]);
    sub_20BDE881C(v17 + 11, v32);
    *((_DWORD *)v17 + 26) = v33;
    std::string::operator=((std::string *)(v17 + 14), &v34);
    sub_20BDE881C(v17 + 17, v35);
    if (v17 + 7 != (uint64_t *)&__str)
      sub_20BDFC4AC((uint64_t **)v17 + 19, v36, &v37);
    sub_20BDE9D48((uint64_t)&v36, (_QWORD *)v37);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v33);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&__str);
  }
  if (*(char *)(a4 + 23) < 0)
    sub_20BDDBFAC(&__str, *(void **)a4, *(_QWORD *)(a4 + 8));
  else
    __str = *(std::string *)a4;
  v18 = *(unsigned __int8 *)(a5 + 23);
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(a5 + 8);
  if (v18)
  {
    std::operator+<char>();
    v19 = v29.__r_.__value_.__s.__data_[15] >= 0
        ? (const std::string::value_type *)&__p
        : (const std::string::value_type *)__p;
    v20 = v29.__r_.__value_.__s.__data_[15] >= 0
        ? v29.__r_.__value_.__s.__data_[15]
        : v29.__r_.__value_.__r.__words[0];
    std::string::append(&__str, v19, v20);
    if (v29.__r_.__value_.__s.__data_[15] < 0)
      operator delete(__p);
  }
  v21 = (uint64_t **)(*((_QWORD *)a1 + 13) + 16);
  __p = v38;
  v22 = sub_20BE71E90(v21, v38, (uint64_t)&unk_20CA52A60, (__int128 **)&__p);
  __p = a3;
  v23 = sub_20BDDDFDC((uint64_t **)v22 + 19, (const void **)a3, (uint64_t)&unk_20CA52A60, (__int128 **)&__p);
  std::string::operator=((std::string *)(v23 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v39 < 0)
    operator delete((void *)v38[0]);
}

void sub_20BE6FF18(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  void *v32;

  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  sub_20BE6F358((_QWORD **)&a24);
  if (*(char *)(v29 - 105) < 0)
    operator delete(*(void **)(v29 - 128));
  v32 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v29 - 104, (uint64_t)v32);
  else
    sub_20BE02504(v29 - 104, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE6FEF8);
}

void sub_20BE70008(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::OMaterialSchema::getNetworkNodeParameters(Alembic::AbcMaterial::v12::OMaterialSchema *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *__p;
  std::string v36;
  uint64_t v37;
  int v38;
  std::string v39;
  uint64_t v40[2];
  int v41;
  std::string v42;
  uint64_t v43[2];
  __int128 *v44;
  __int128 v45;
  int v46;
  _QWORD v47[5];
  const void *v48[2];
  char v49;
  _QWORD *v50;
  const char *v51;

  v50 = (_QWORD *)((char *)a1 + 8);
  v51 = "OMaterialSchema::getNetworkNodeParameters";
  std::operator+<char>();
  v46 = 2;
  sub_20BDDC0E4(v47, "");
  v47[3] = 0;
  v47[4] = 0;
  v6 = sub_20BDEEBA4(*((_QWORD *)a1 + 13) + 16, v48);
  if (*((_QWORD *)a1 + 13) + 24 == v6)
  {
    Alembic::AbcMaterial::v12::OMaterialSchema::createNodeCompound(a1);
    v38 = 2;
    sub_20BDDC0E4(&v39, "");
    v40[0] = 0;
    v40[1] = 0;
    v41 = 2;
    sub_20BDDC0E4(&v42, "");
    v43[0] = 0;
    v43[1] = 0;
    v45 = 0uLL;
    v44 = &v45;
    v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 12);
    v33 = *((_QWORD *)a1 + 11);
    v34 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v31 = 0;
    v32 = 0;
    v29 = 0;
    v30 = 0;
    Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&__p, &v33, a2, &v31, &v29);
    v38 = (int)__p;
    std::string::operator=(&v39, &v36);
    sub_20BDE881C(v40, &v37);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&__p);
    v10 = v34;
    if (v34)
    {
      v11 = (unint64_t *)&v34->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (uint64_t **)(*((_QWORD *)a1 + 13) + 16);
    __p = v48;
    v14 = sub_20BE71E90(v13, v48, (uint64_t)&unk_20CA52A60, (__int128 **)&__p);
    *((_DWORD *)v14 + 14) = v38;
    std::string::operator=((std::string *)(v14 + 8), &v39);
    sub_20BDE881C(v14 + 11, v40);
    *((_DWORD *)v14 + 26) = v41;
    std::string::operator=((std::string *)(v14 + 14), &v42);
    sub_20BDE881C(v14 + 17, v43);
    if (v14 + 7 != (uint64_t *)&v38)
      sub_20BDFC4AC((uint64_t **)v14 + 19, v44, &v45);
    sub_20BDE9D48((uint64_t)&v44, (_QWORD *)v45);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v41);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v38);
  }
  if (*(char *)(v6 + 135) < 0)
  {
    if (*(_QWORD *)(v6 + 120))
      goto LABEL_20;
  }
  else if (*(_BYTE *)(v6 + 135))
  {
    goto LABEL_20;
  }
  if (*(_QWORD *)(v6 + 136))
  {
    *(_DWORD *)a3 = *(_DWORD *)(v6 + 104);
    v15 = a3 + 8;
    if ((*(char *)(v6 + 135) & 0x80000000) == 0)
    {
      v16 = *(_OWORD *)(v6 + 112);
      v17 = *(_QWORD *)(v6 + 128);
LABEL_30:
      *(_QWORD *)(v15 + 16) = v17;
      *(_OWORD *)v15 = v16;
      goto LABEL_33;
    }
    sub_20BDDBFAC((_BYTE *)v15, *(void **)(v6 + 112), *(_QWORD *)(v6 + 120));
    goto LABEL_33;
  }
LABEL_20:
  v24 = *(_DWORD *)(v6 + 56);
  if (*(char *)(v6 + 87) < 0)
  {
    sub_20BDDBFAC(&v25, *(void **)(v6 + 64), *(_QWORD *)(v6 + 72));
  }
  else
  {
    v25 = *(_OWORD *)(v6 + 64);
    v26 = *(_QWORD *)(v6 + 80);
  }
  v18 = *(_QWORD *)(v6 + 96);
  v27 = *(_QWORD *)(v6 + 88);
  v28 = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  sub_20BDDC0E4(&__p, "params");
  v31 = 0;
  v32 = 0;
  v29 = 0;
  v30 = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v38, &v24, &__p, &v31, &v29);
  *(_DWORD *)(v6 + 104) = v38;
  std::string::operator=((std::string *)(v6 + 112), &v39);
  sub_20BDE881C((_QWORD *)(v6 + 136), v40);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v38);
  if (v36.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v24);
  *(_DWORD *)a3 = *(_DWORD *)(v6 + 104);
  v15 = a3 + 8;
  if ((*(char *)(v6 + 135) & 0x80000000) == 0)
  {
    v16 = *(_OWORD *)(v6 + 112);
    v17 = *(_QWORD *)(v6 + 128);
    goto LABEL_30;
  }
  sub_20BDDBFAC((_BYTE *)v15, *(void **)(v6 + 112), *(_QWORD *)(v6 + 120));
LABEL_33:
  *(_QWORD *)(a3 + 32) = *(_QWORD *)(v6 + 136);
  v21 = *(_QWORD *)(v6 + 144);
  *(_QWORD *)(a3 + 40) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v46);
  if (v49 < 0)
    operator delete((void *)v48[0]);
}

void sub_20BE7042C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v32;
  void *v35;

  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v32 - 176));
  if (*(char *)(v32 - 105) < 0)
    operator delete(*(void **)(v32 - 128));
  v35 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v32 - 104, (uint64_t)v35);
  else
    sub_20BE02504(v32 - 104, 0);
  __cxa_end_catch();
  *(_DWORD *)v31 = 2;
  sub_20BDDC0E4((_QWORD *)(v31 + 8), "");
  *(_QWORD *)(v31 + 32) = 0;
  *(_QWORD *)(v31 + 40) = 0;
  JUMPOUT(0x20BE7040CLL);
}

void sub_20BE7054C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::OMaterialSchema::setNetworkTerminal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  uint64_t **v14;
  uint64_t *v15;
  void *v16[2];
  char v17;
  std::string v18;
  std::string __p;
  uint64_t v20;
  const char *v21;

  v20 = a1 + 8;
  v21 = "OMaterialSchema::setNetworkTerminal";
  sub_20BDDC0E4(&__p, "target");
  sub_20BE7C614(a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_20BDDC0E4(&__p, "shaderType");
  sub_20BE7C614(a3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_20BDDC0E4(&__p, "nodeName");
  sub_20BE7C614(a4, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(char *)(a4 + 23) < 0)
    sub_20BDDBFAC(&__p, *(void **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  v10 = *(unsigned __int8 *)(a5 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a5 + 8);
  if (v10)
  {
    std::string::append(&__p, ".");
    v11 = *(char *)(a5 + 23);
    if (v11 >= 0)
      v12 = (const std::string::value_type *)a5;
    else
      v12 = *(const std::string::value_type **)a5;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a5 + 23);
    else
      v13 = *(_QWORD *)(a5 + 8);
    std::string::append(&__p, v12, v13);
  }
  sub_20BDDC0E4(v16, "");
  sub_20BE7C4F0(a2, a3, (uint64_t)v16, &v18);
  if (v17 < 0)
    operator delete(v16[0]);
  v14 = (uint64_t **)(*(_QWORD *)(a1 + 104) + 64);
  v16[0] = &v18;
  v15 = sub_20BDDDFDC(v14, (const void **)&v18.__r_.__value_.__l.__data_, (uint64_t)&unk_20CA52A60, (__int128 **)v16);
  std::string::operator=((std::string *)(v15 + 7), &__p);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BE7073C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  void *v25;

  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a24, (uint64_t)v25);
  else
    sub_20BE02504((uint64_t)&a24, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE70724);
}

void sub_20BE707C8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20BE707E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x20BE707FCLL);
  JUMPOUT(0x20BE70784);
}

void Alembic::AbcMaterial::v12::OMaterialSchema::setNetworkInterfaceParameterMapping(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  size_t v13;
  std::string *v14;
  const void *v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  std::string::size_type *v32;
  std::string::size_type v33;
  std::string v34;
  uint64_t v35;
  const char *v36;
  void *__p[2];
  _QWORD *v38;
  char *v39;
  uint64_t *v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v35 = a1 + 8;
  v36 = "OMaterialSchema::setNetworkInterfaceParameterMapping";
  sub_20BDDC0E4(__p, "mapToNodeName");
  sub_20BE7C614(a3, (uint64_t)__p);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  v8 = *(uint64_t **)(a1 + 104);
  v9 = v8 + 17;
  v10 = v8[18];
  if (v10 >= v8[19])
  {
    v11 = sub_20BE4EE50(v9, a2);
  }
  else
  {
    sub_20BE4EDF4(v9, a2);
    v11 = v10 + 24;
  }
  v8[18] = v11;
  v12 = *(uint64_t **)(a1 + 104);
  if (*(char *)(a3 + 23) >= 0)
    v13 = *(unsigned __int8 *)(a3 + 23);
  else
    v13 = *(_QWORD *)(a3 + 8);
  v14 = &v34;
  sub_20BDF6BDC((uint64_t)&v34, v13 + 1);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v34.__r_.__value_.__r.__words[0];
  if (v13)
  {
    if (*(char *)(a3 + 23) >= 0)
      v15 = (const void *)a3;
    else
      v15 = *(const void **)a3;
    memmove(v14, v15, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  v16 = *(char *)(a4 + 23);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)a4;
  else
    v17 = *(const std::string::value_type **)a4;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a4 + 23);
  else
    v18 = *(_QWORD *)(a4 + 8);
  v19 = std::string::append(&v34, v17, v18);
  v20 = v19->__r_.__value_.__r.__words[0];
  v41[0] = v19->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v41 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
  v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v22 = v12[19];
  v23 = v12[18];
  if (v23 >= v22)
  {
    v26 = v12[17];
    v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v26) >> 3);
    v28 = v27 + 1;
    if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - v26) >> 3);
    if (2 * v29 > v28)
      v28 = 2 * v29;
    if (v29 >= 0x555555555555555)
      v30 = 0xAAAAAAAAAAAAAAALL;
    else
      v30 = v28;
    v40 = v12 + 19;
    if (v30)
      v31 = (char *)sub_20BDE4FF4((uint64_t)(v12 + 19), v30);
    else
      v31 = 0;
    v32 = (std::string::size_type *)&v31[24 * v27];
    __p[0] = v31;
    __p[1] = v32;
    v39 = &v31[24 * v30];
    v33 = v41[0];
    *v32 = v20;
    v32[1] = v33;
    *(std::string::size_type *)((char *)v32 + 15) = *(_QWORD *)((char *)v41 + 7);
    *((_BYTE *)v32 + 23) = v21;
    v38 = v32 + 3;
    sub_20BDF34C0(v12 + 17, __p);
    v25 = v12[18];
    sub_20BDF3648((uint64_t)__p);
  }
  else
  {
    v24 = v41[0];
    *(_QWORD *)v23 = v20;
    *(_QWORD *)(v23 + 8) = v24;
    *(_QWORD *)(v23 + 15) = *(_QWORD *)((char *)v41 + 7);
    *(_BYTE *)(v23 + 23) = v21;
    v25 = v23 + 24;
    v12[18] = v23 + 24;
  }
  v12[18] = v25;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
}

void sub_20BE70A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v25;

  if (a2)
  {
    sub_20BDF3648((uint64_t)&a18);
    if (a15 < 0)
      operator delete(__p);
    v25 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
      sub_20BE02570((uint64_t)&a16, (uint64_t)v25);
    else
      sub_20BE02504((uint64_t)&a16, 0);
    __cxa_end_catch();
    JUMPOUT(0x20BE70A44);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *Alembic::AbcMaterial::v12::OMaterialSchema::getNetworkInterfaceParameters@<X0>(Alembic::AbcMaterial::v12::OMaterialSchema *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _BYTE *result;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _DWORD v17[4];
  _DWORD v18[4];
  void *__p[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  int v23;
  std::string v24;
  uint64_t v25[4];

  v25[2] = (uint64_t)this + 8;
  v25[3] = (uint64_t)"OMaterialSchema::getNetworkInterfaceParameters";
  v4 = *((_QWORD *)this + 13);
  if (*(char *)(v4 + 119) < 0)
  {
    if (!*(_QWORD *)(v4 + 104))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(v4 + 119))
  {
LABEL_5:
    if (*(_QWORD *)(v4 + 120))
      goto LABEL_17;
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v21 = *((_QWORD *)this + 5);
  v22 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".interfaceParams");
  v18[0] = 0;
  v18[2] = 0;
  v17[0] = 0;
  v17[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v23, &v21, __p, v18, v17);
  v8 = *((_QWORD *)this + 13);
  *(_DWORD *)(v8 + 88) = v23;
  std::string::operator=((std::string *)(v8 + 96), &v24);
  sub_20BDE881C((_QWORD *)(v8 + 120), v25);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v23);
  if (v20 < 0)
    operator delete(__p[0]);
  v9 = v22;
  if (v22)
  {
    v10 = (unint64_t *)&v22->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v4 = *((_QWORD *)this + 13);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(v4 + 88);
  result = (_BYTE *)(a2 + 8);
  if (*(char *)(v4 + 119) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)(v4 + 96), *(_QWORD *)(v4 + 104));
  }
  else
  {
    v13 = *(_OWORD *)(v4 + 96);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(v4 + 112);
    *(_OWORD *)result = v13;
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v4 + 120);
  v14 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)(a2 + 40) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  return result;
}

void sub_20BE70D28(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v23 - 48, (uint64_t)v25);
  else
    sub_20BE02504(v23 - 48, 0);
  __cxa_end_catch();
  *(_DWORD *)v22 = 2;
  sub_20BDDC0E4((_QWORD *)(v22 + 8), "");
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  JUMPOUT(0x20BE70D14);
}

void sub_20BE70DC4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void **sub_20BE70DE4(void **a1)
{
  void **v2;

  *a1 = &unk_24C519C30;
  v2 = a1 + 1;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 13));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_20BE70E30(void **a1)
{
  void **v2;

  *a1 = &unk_24C519C30;
  v2 = a1 + 1;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 13));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  operator delete(a1);
}

void sub_20BE70E7C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20BE70E7C(a1, *a2);
    sub_20BE70E7C(a1, a2[1]);
    sub_20BE70EC4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20BE70EC4(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty *v2;

  v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 24);
  sub_20BDE9D48(a1 + 120, *(_QWORD **)(a1 + 128));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 72));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20BE70F18(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *exception;
  _QWORD *v22;
  std::string __p;
  void *v24[2];
  char v25;
  uint64_t *v26;
  _QWORD *v27;
  _QWORD v28[37];
  int v29;
  const void **v30[4];
  std::__shared_weak_count *v31;
  int v32;
  uint64_t v33;
  void **v34;

  v27 = 0;
  v28[0] = 0;
  v26 = (uint64_t *)&v27;
  v28[35] = 0;
  v28[36] = 0;
  v29 = 2;
  sub_20BDEBF8C((uint64_t *)v30, (const void ***)&v26);
  v30[3] = 0;
  v31 = 0;
  v32 = 0;
  v33 = 1;
  sub_20BDE9D48((uint64_t)&v26, v27);
  sub_20BE02E30(a4, (uint64_t)&v29);
  sub_20BE02E30(a5, (uint64_t)&v29);
  sub_20BE02E30(a6, (uint64_t)&v29);
  sub_20BE02E30(a7, (uint64_t)&v29);
  *(_DWORD *)(a1 + 8) = v29;
  v28[33] = a1 + 8;
  v28[34] = "OSchema::OSchema::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v26);
    sub_20BDDC1C8(v28, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_20BDDBF20(v24, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    v22 = sub_20BDDC09C(exception, (uint64_t)v24);
    __cxa_throw(v22, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v26, v30);
  if (HIDWORD(v33) != 1)
  {
    sub_20BDDC0E4(v24, "schema");
    sub_20BDDC0E4(&__p, "AbcMaterial_Material_v1");
    v34 = v24;
    v14 = sub_20BDDDFDC(&v26, (const void **)v24, (uint64_t)&unk_20CA52A60, (__int128 **)&v34);
    std::string::operator=((std::string *)(v14 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v25 < 0)
      operator delete(v24[0]);
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t **))(*(_QWORD *)*a2 + 112))(v24, *a2, a3, &v26);
  sub_20BDE82DC(a1 + 40, (__int128 *)v24);
  v15 = (std::__shared_weak_count *)v24[1];
  if (v24[1])
  {
    v16 = (unint64_t *)((char *)v24[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sub_20BDE9D48((uint64_t)&v26, v27);
  v18 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  sub_20BDE9D48((uint64_t)v30, v30[1]);
}

void sub_20BE711C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v27;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a22);
  v27 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v23 + 40));
  MEMORY[0x212B929D0](v23 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v24 - 192, (uint64_t)v27);
  else
    sub_20BE02504(v24 - 192, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE710E8);
}

void sub_20BE712AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE71300(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20BE71328(void **a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20BE71350(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C519CB0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BE71398(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  void *v3;

  if (v1)
  {
    sub_20BE71430(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20BE713B8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BE713CC(uint64_t a1)
{
  uint64_t *v1;
  void *v2;

  v1 = *(uint64_t **)(a1 + 24);
  if (v1)
  {
    sub_20BE71430(v1);
    operator delete(v2);
  }
}

uint64_t sub_20BE713F0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C519D00))
    return a1 + 24;
  else
    return 0;
}

void sub_20BE71430(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 v6;
  unint64_t v7;
  __int128 *v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void ***v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  __int128 *v23;
  __int128 v24;
  unint64_t v25;
  __int128 *v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void ***v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  __int128 *v41;
  __int128 v42;
  unint64_t v43;
  __int128 *v44;
  __int128 v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  void ***v51;
  uint64_t *v52;
  uint64_t *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  int v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  void *__p[2];
  void *v70;
  void *v71;
  uint64_t *v72;
  int v73;
  uint64_t *v74;
  int v75;
  uint64_t *v76;
  int v77;
  uint64_t *v78;
  int v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  void *v82[6];
  uint64_t *v83;
  unint64_t v84;
  unint64_t v85;

  v2 = a1[7];
  if (v2)
  {
    v83 = 0;
    v84 = 0;
    v85 = 0;
    sub_20BE71C2C((uint64_t *)&v83, 2 * v2);
    v3 = (uint64_t *)a1[5];
    if (v3 != a1 + 6)
    {
      v4 = v84;
      do
      {
        v5 = (__int128 *)(v3 + 4);
        if (v4 >= v85)
        {
          v7 = sub_20BE4EE50((uint64_t *)&v83, v5);
        }
        else
        {
          if (*((char *)v3 + 55) < 0)
          {
            sub_20BDDBFAC((_BYTE *)v4, (void *)v3[4], v3[5]);
          }
          else
          {
            v6 = *v5;
            *(_QWORD *)(v4 + 16) = v3[6];
            *(_OWORD *)v4 = v6;
          }
          v7 = v4 + 24;
        }
        v84 = v7;
        v8 = (__int128 *)(v3 + 7);
        if (v7 >= v85)
        {
          v4 = sub_20BE4EE50((uint64_t *)&v83, v8);
        }
        else
        {
          if (*((char *)v3 + 79) < 0)
          {
            sub_20BDDBFAC((_BYTE *)v7, (void *)v3[7], v3[8]);
          }
          else
          {
            v9 = *v8;
            *(_QWORD *)(v7 + 16) = v3[9];
            *(_OWORD *)v7 = v9;
          }
          v4 = v7 + 24;
        }
        v84 = v4;
        v10 = (uint64_t *)v3[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (uint64_t *)v3[2];
            v12 = *v11 == (_QWORD)v3;
            v3 = v11;
          }
          while (!v12);
        }
        v3 = v11;
      }
      while (v11 != a1 + 6);
    }
    v13 = (std::__shared_weak_count *)a1[1];
    v80 = *a1;
    v81 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    sub_20BDDC0E4(__p, ".shaderNames");
    LODWORD(v78) = 0;
    v79 = 0;
    LODWORD(v76) = 0;
    v77 = 0;
    LODWORD(v74) = 0;
    v75 = 0;
    LODWORD(v72) = 0;
    v73 = 0;
    sub_20BE1B910((uint64_t)v82, &v80, (uint64_t)__p, &v78, &v76, &v74, &v72);
    if (SHIBYTE(v70) < 0)
      operator delete(__p[0]);
    v16 = v81;
    if (v81)
    {
      v17 = (unint64_t *)&v81->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    sub_20BE71CDC(__p, (uint64_t *)&v83);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)v82);
    if (v70)
    {
      v71 = v70;
      operator delete(v70);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v82);
    v82[0] = &v83;
    sub_20BDE5038(v19);
  }
  v20 = a1[10];
  if (v20)
  {
    v83 = 0;
    v84 = 0;
    v85 = 0;
    sub_20BE71C2C((uint64_t *)&v83, 2 * v20);
    v21 = (uint64_t *)a1[8];
    if (v21 != a1 + 9)
    {
      v22 = v84;
      do
      {
        v23 = (__int128 *)(v21 + 4);
        if (v22 >= v85)
        {
          v25 = sub_20BE4EE50((uint64_t *)&v83, v23);
        }
        else
        {
          if (*((char *)v21 + 55) < 0)
          {
            sub_20BDDBFAC((_BYTE *)v22, (void *)v21[4], v21[5]);
          }
          else
          {
            v24 = *v23;
            *(_QWORD *)(v22 + 16) = v21[6];
            *(_OWORD *)v22 = v24;
          }
          v25 = v22 + 24;
        }
        v84 = v25;
        v26 = (__int128 *)(v21 + 7);
        if (v25 >= v85)
        {
          v22 = sub_20BE4EE50((uint64_t *)&v83, v26);
        }
        else
        {
          if (*((char *)v21 + 79) < 0)
          {
            sub_20BDDBFAC((_BYTE *)v25, (void *)v21[7], v21[8]);
          }
          else
          {
            v27 = *v26;
            *(_QWORD *)(v25 + 16) = v21[9];
            *(_OWORD *)v25 = v27;
          }
          v22 = v25 + 24;
        }
        v84 = v22;
        v28 = (uint64_t *)v21[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (uint64_t *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (uint64_t *)v21[2];
            v12 = *v29 == (_QWORD)v21;
            v21 = v29;
          }
          while (!v12);
        }
        v21 = v29;
      }
      while (v29 != a1 + 9);
    }
    v30 = (std::__shared_weak_count *)a1[1];
    v67 = *a1;
    v68 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    sub_20BDDC0E4(__p, ".terminals");
    LODWORD(v78) = 0;
    v79 = 0;
    LODWORD(v76) = 0;
    v77 = 0;
    LODWORD(v74) = 0;
    v75 = 0;
    LODWORD(v72) = 0;
    v73 = 0;
    sub_20BE1B910((uint64_t)v82, &v67, (uint64_t)__p, &v78, &v76, &v74, &v72);
    if (SHIBYTE(v70) < 0)
      operator delete(__p[0]);
    v33 = v68;
    if (v68)
    {
      v34 = (unint64_t *)&v68->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    sub_20BE71CDC(__p, (uint64_t *)&v83);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)v82);
    if (v70)
    {
      v71 = v70;
      operator delete(v70);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v82);
    v82[0] = &v83;
    sub_20BDE5038(v36);
  }
  v37 = (uint64_t *)a1[2];
  if (v37 != a1 + 3)
  {
    do
    {
      v38 = v37[21];
      if (v38)
      {
        v83 = 0;
        v84 = 0;
        v85 = 0;
        sub_20BE71C2C((uint64_t *)&v83, 2 * v38);
        v39 = (uint64_t *)v37[19];
        if (v39 != v37 + 20)
        {
          v40 = v84;
          do
          {
            v41 = (__int128 *)(v39 + 4);
            if (v40 >= v85)
            {
              v43 = sub_20BE4EE50((uint64_t *)&v83, v41);
            }
            else
            {
              if (*((char *)v39 + 55) < 0)
              {
                sub_20BDDBFAC((_BYTE *)v40, (void *)v39[4], v39[5]);
              }
              else
              {
                v42 = *v41;
                *(_QWORD *)(v40 + 16) = v39[6];
                *(_OWORD *)v40 = v42;
              }
              v43 = v40 + 24;
            }
            v84 = v43;
            v44 = (__int128 *)(v39 + 7);
            if (v43 >= v85)
            {
              v40 = sub_20BE4EE50((uint64_t *)&v83, v44);
            }
            else
            {
              if (*((char *)v39 + 79) < 0)
              {
                sub_20BDDBFAC((_BYTE *)v43, (void *)v39[7], v39[8]);
              }
              else
              {
                v45 = *v44;
                *(_QWORD *)(v43 + 16) = v39[9];
                *(_OWORD *)v43 = v45;
              }
              v40 = v43 + 24;
            }
            v84 = v40;
            v46 = (uint64_t *)v39[1];
            if (v46)
            {
              do
              {
                v47 = v46;
                v46 = (uint64_t *)*v46;
              }
              while (v46);
            }
            else
            {
              do
              {
                v47 = (uint64_t *)v39[2];
                v12 = *v47 == (_QWORD)v39;
                v39 = v47;
              }
              while (!v12);
            }
            v39 = v47;
          }
          while (v47 != v37 + 20);
        }
        v62 = *((_DWORD *)v37 + 14);
        if (*((char *)v37 + 87) < 0)
        {
          sub_20BDDBFAC(&v63, (void *)v37[8], v37[9]);
        }
        else
        {
          v63 = *((_OWORD *)v37 + 4);
          v64 = v37[10];
        }
        v48 = v37[12];
        v65 = v37[11];
        v66 = v48;
        if (v48)
        {
          v49 = (unint64_t *)(v48 + 8);
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        sub_20BDDC0E4(__p, ".connections");
        LODWORD(v78) = 0;
        v79 = 0;
        LODWORD(v76) = 0;
        v77 = 0;
        LODWORD(v74) = 0;
        v75 = 0;
        sub_20BE71D88((uint64_t)v82, &v62, (uint64_t)__p, &v78, &v76, &v74);
        if (SHIBYTE(v70) < 0)
          operator delete(__p[0]);
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v62);
        sub_20BE71CDC(__p, (uint64_t *)&v83);
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)v82);
        if (v70)
        {
          v71 = v70;
          operator delete(v70);
        }
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v82);
        v82[0] = &v83;
        sub_20BDE5038(v51);
      }
      v52 = (uint64_t *)v37[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (uint64_t *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (uint64_t *)v37[2];
          v12 = *v53 == (_QWORD)v37;
          v37 = v53;
        }
        while (!v12);
      }
      v37 = v53;
    }
    while (v53 != a1 + 3);
  }
  if (a1[17] != a1[18])
  {
    v54 = (std::__shared_weak_count *)a1[1];
    v60 = *a1;
    v61 = v54;
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    sub_20BDDC0E4(__p, ".interface");
    LODWORD(v83) = 0;
    LODWORD(v84) = 0;
    LODWORD(v78) = 0;
    v79 = 0;
    LODWORD(v76) = 0;
    v77 = 0;
    LODWORD(v74) = 0;
    v75 = 0;
    sub_20BE1B910((uint64_t)v82, &v60, (uint64_t)__p, &v83, &v78, &v76, &v74);
    if (SHIBYTE(v70) < 0)
      operator delete(__p[0]);
    v57 = v61;
    if (v61)
    {
      v58 = (unint64_t *)&v61->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    sub_20BE71CDC(__p, a1 + 17);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)v82);
    if (v70)
    {
      v71 = v70;
      operator delete(v70);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v82);
  }
  v82[0] = a1 + 17;
  sub_20BDE5038((void ***)v82);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 11));
  sub_20BDE9D48((uint64_t)(a1 + 8), (_QWORD *)a1[9]);
  sub_20BDE9D48((uint64_t)(a1 + 5), (_QWORD *)a1[6]);
  sub_20BE70E7C((uint64_t)(a1 + 2), (_QWORD *)a1[3]);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)a1);
}

void sub_20BE71BF8(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = v1;
  sub_20BDC12F4(a1);
}

void sub_20BE71C18(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = v1;
  sub_20BDC12F4(a1);
}

uint64_t sub_20BE71C2C(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BDE4FF4(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_20BDF34C0(a1, v7);
    return sub_20BDF3648((uint64_t)v7);
  }
  return result;
}

void sub_20BE71CC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDF3648((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE71CDC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;
  void *__p;
  _BYTE *v7;

  if (a2[1] == *a2)
    v3 = 0;
  else
    v3 = *a2;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20BDE8894(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x10000000CLL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20BE71D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE71D88(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v22 = *((_QWORD *)a2 + 4);
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = *a2;
  LODWORD(v20) = 1;
  v21 = v15;
  sub_20BE1BA14((int *)a1, &v22, a3, &v20, a4, a5, a6);
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return a1;
}

void sub_20BE71E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v3;
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BE71E90(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20BE71F38((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20BE72080((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_20BE71F38@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0xB0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20BE71FA0(v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20BE71F88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE72080(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_20BE71FA0(char *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  *(_OWORD *)(__dst + 24) = 0u;
  *((_QWORD *)__dst + 17) = 0;
  *(_OWORD *)(__dst + 104) = 0u;
  *(_OWORD *)(__dst + 120) = 0u;
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 88) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *((_DWORD *)__dst + 6) = 2;
  sub_20BDDC0E4((_QWORD *)__dst + 4, "");
  *((_QWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 8) = 0;
  *((_DWORD *)__dst + 18) = 2;
  sub_20BDDC0E4((_QWORD *)__dst + 10, "");
  *((_QWORD *)__dst + 13) = 0;
  *((_QWORD *)__dst + 14) = 0;
  *((_QWORD *)__dst + 17) = 0;
  *((_QWORD *)__dst + 16) = 0;
  *((_QWORD *)__dst + 15) = __dst + 128;
  return __dst;
}

void sub_20BE72054(_Unwind_Exception *a1)
{
  uint64_t v1;
  Alembic::Abc::v12::OCompoundProperty *v2;

  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void sub_20BE72080(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BE70EC4((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void Alembic::AbcMaterial::v12::IMaterialSchema::init(Alembic::AbcMaterial::v12::IMaterialSchema *this)
{
  char *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t PropertyHeader;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  __int128 *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t *v89;
  int v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t *v95;
  int v96;
  void *__p;
  std::__shared_weak_count *v98;
  char v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  __int128 *v106;
  uint64_t v107;
  int v108;
  void *v109;
  std::string v110;
  uint64_t v111[2];
  uint64_t v112;
  std::__shared_weak_count *v113;
  char *v114;
  const char *v115;

  v2 = (char *)this + 8;
  v114 = (char *)this + 8;
  v115 = "IMaterialSchema::init()";
  v4 = *((_QWORD *)this + 5);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  v112 = v4;
  v113 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(&v109, ".nodes");
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v2);
  v8 = PropertyHeader;
  if (v110.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v109);
    if (!v8)
      goto LABEL_18;
  }
  else if (!PropertyHeader)
  {
    goto LABEL_18;
  }
  v104 = v4;
  v105 = v3;
  if (v3)
  {
    v9 = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v102 = 0;
  v103 = 0;
  v100 = 0;
  v101 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v106, &v104, &v102, &v100);
  sub_20BDDC0E4(&__p, ".nodes");
  LODWORD(v95) = 0;
  v96 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v109, &v106, &__p, &v95);
  *((_DWORD *)this + 50) = (_DWORD)v109;
  std::string::operator=((std::string *)((char *)this + 208), &v110);
  sub_20BDE881C((_QWORD *)this + 29, v111);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v109);
  if (v99 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v106);
  v11 = v105;
  if (v105)
  {
    v12 = (unint64_t *)&v105->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_18:
  sub_20BDDC0E4(&v109, ".interfaceParams");
  v14 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v2);
  v15 = v14;
  if (v110.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v109);
    if (!v15)
      goto LABEL_32;
  }
  else if (!v14)
  {
    goto LABEL_32;
  }
  v93 = v112;
  v94 = v113;
  if (v113)
  {
    v16 = (unint64_t *)&v113->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v102 = 0;
  v103 = 0;
  v100 = 0;
  v101 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v106, &v93, &v102, &v100);
  sub_20BDDC0E4(&__p, ".interfaceParams");
  LODWORD(v95) = 0;
  v96 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v109, &v106, &__p, &v95);
  *((_DWORD *)this + 38) = (_DWORD)v109;
  std::string::operator=((std::string *)((char *)this + 160), &v110);
  sub_20BDE881C((_QWORD *)this + 23, v111);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v109);
  if (v99 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v106);
  v18 = v94;
  if (v94)
  {
    v19 = (unint64_t *)&v94->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
LABEL_32:
  sub_20BDDC0E4(&v109, ".terminals");
  v21 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v2);
  v22 = v21;
  if (v110.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v109);
    if (!v22)
      goto LABEL_61;
  }
  else if (!v21)
  {
    goto LABEL_61;
  }
  v91 = v112;
  v92 = v113;
  if (v113)
  {
    v23 = (unint64_t *)&v113->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v102 = 0;
  v103 = 0;
  v100 = 0;
  v101 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v106, &v91, &v102, &v100);
  sub_20BDDC0E4(&__p, ".terminals");
  LODWORD(v95) = 0;
  v96 = 0;
  LODWORD(v89) = 0;
  v90 = 0;
  sub_20BE18AF0((uint64_t)&v109, (int *)&v106, (uint64_t)&__p, &v95, &v89);
  if (v99 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v106);
  v25 = v92;
  if (v92)
  {
    v26 = (unint64_t *)&v92->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  __p = 0;
  v98 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 2;
  sub_20BE17E28((uint64_t)&v109, (uint64_t)&__p, (uint64_t)&v106);
  v28 = (uint64_t *)*((_QWORD *)__p + 2);
  v29 = *((_QWORD *)__p + 3) - (_QWORD)v28;
  if (v29)
  {
    v30 = v29 >> 3;
    v31 = v30 <= 1 ? 1 : v30;
    v32 = 1;
    do
    {
      v33 = *v28++;
      v32 *= v33;
      --v31;
    }
    while (v31);
    if (v32 >= 2)
    {
      v34 = 0;
      v35 = v32 >> 1;
      do
      {
        v36 = *(_QWORD *)__p + v34;
        v106 = (__int128 *)v36;
        v37 = sub_20BDDDFDC((uint64_t **)this + 10, (const void **)v36, (uint64_t)&unk_20CA52BBA, &v106);
        std::string::operator=((std::string *)(v37 + 7), (const std::string *)(v36 + 24));
        v34 += 48;
        --v35;
      }
      while (v35);
    }
  }
  v38 = v98;
  if (v98)
  {
    v39 = (unint64_t *)&v98->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v109);
LABEL_61:
  sub_20BDDC0E4(&v109, ".shaderNames");
  v41 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v2);
  v42 = v41;
  if (v110.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v109);
    if (!v42)
      goto LABEL_90;
  }
  else if (!v41)
  {
    goto LABEL_90;
  }
  v87 = v112;
  v88 = v113;
  if (v113)
  {
    v43 = (unint64_t *)&v113->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v102 = 0;
  v103 = 0;
  v100 = 0;
  v101 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v106, &v87, &v102, &v100);
  sub_20BDDC0E4(&__p, ".shaderNames");
  LODWORD(v95) = 0;
  v96 = 0;
  LODWORD(v89) = 0;
  v90 = 0;
  sub_20BE18AF0((uint64_t)&v109, (int *)&v106, (uint64_t)&__p, &v95, &v89);
  if (v99 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v106);
  v45 = v88;
  if (v88)
  {
    v46 = (unint64_t *)&v88->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  __p = 0;
  v98 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 2;
  sub_20BE17E28((uint64_t)&v109, (uint64_t)&__p, (uint64_t)&v106);
  v48 = (uint64_t *)*((_QWORD *)__p + 2);
  v49 = *((_QWORD *)__p + 3) - (_QWORD)v48;
  if (v49)
  {
    v50 = v49 >> 3;
    v51 = v50 <= 1 ? 1 : v50;
    v52 = 1;
    do
    {
      v53 = *v48++;
      v52 *= v53;
      --v51;
    }
    while (v51);
    if (v52 >= 2)
    {
      v54 = 0;
      v55 = v52 >> 1;
      do
      {
        v56 = *(_QWORD *)__p + v54;
        v106 = (__int128 *)v56;
        v57 = sub_20BDDDFDC((uint64_t **)this + 7, (const void **)v56, (uint64_t)&unk_20CA52BBA, &v106);
        std::string::operator=((std::string *)(v57 + 7), (const std::string *)(v56 + 24));
        v54 += 48;
        --v55;
      }
      while (v55);
    }
  }
  v58 = v98;
  if (v98)
  {
    v59 = (unint64_t *)&v98->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v109);
LABEL_90:
  sub_20BDDC0E4(&v109, ".interface");
  v61 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v2);
  if (v110.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v109);
  v62 = v113;
  if (v61)
  {
    v85 = v112;
    v86 = v113;
    if (v113)
    {
      v63 = (unint64_t *)&v113->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    v102 = 0;
    v103 = 0;
    v100 = 0;
    v101 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v106, &v85, &v102, &v100);
    sub_20BDDC0E4(&__p, ".interface");
    LODWORD(v95) = 0;
    v96 = 0;
    LODWORD(v89) = 0;
    v90 = 0;
    sub_20BE18AF0((uint64_t)&v109, (int *)&v106, (uint64_t)&__p, &v95, &v89);
    if (v99 < 0)
      operator delete(__p);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v106);
    v65 = v86;
    if (v86)
    {
      v66 = (unint64_t *)&v86->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    __p = 0;
    v98 = 0;
    v106 = 0;
    v107 = 0;
    v108 = 2;
    sub_20BE17E28((uint64_t)&v109, (uint64_t)&__p, (uint64_t)&v106);
    v68 = (uint64_t *)*((_QWORD *)__p + 2);
    v69 = *((_QWORD *)__p + 3) - (_QWORD)v68;
    if (v69)
    {
      v70 = v69 >> 3;
      if (v70 <= 1)
        v70 = 1;
      v71 = 1;
      do
      {
        v72 = *v68++;
        v71 *= v72;
        --v70;
      }
      while (v70);
    }
    else
    {
      v71 = 0;
    }
    sub_20BE71C2C((uint64_t *)this + 16, v71 >> 1);
    if (v71 >= 2)
    {
      v73 = 0;
      if (v71 >> 1 <= 1)
        v74 = 1;
      else
        v74 = v71 >> 1;
      do
      {
        v75 = *(_QWORD *)__p + v73;
        v106 = (__int128 *)v75;
        v76 = sub_20BDDDFDC((uint64_t **)this + 13, (const void **)v75, (uint64_t)&unk_20CA52BBA, &v106);
        std::string::operator=((std::string *)(v76 + 7), (const std::string *)(v75 + 24));
        v77 = (__int128 *)(*(_QWORD *)__p + v73);
        v78 = *((_QWORD *)this + 17);
        if (v78 >= *((_QWORD *)this + 18))
        {
          v79 = sub_20BE4EE50((uint64_t *)this + 16, v77);
        }
        else
        {
          sub_20BE4EDF4((_QWORD *)this + 16, v77);
          v79 = v78 + 24;
        }
        *((_QWORD *)this + 17) = v79;
        v73 += 48;
        --v74;
      }
      while (v74);
    }
    v80 = v98;
    if (v98)
    {
      v81 = (unint64_t *)&v98->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v109);
    v62 = v113;
  }
  if (v62)
  {
    v83 = (unint64_t *)&v62->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
}

void sub_20BE729F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v39;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&__p);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(v36 - 160));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v36 - 112));
  v39 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v35);
  MEMORY[0x212B929D0](v34 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v36 - 96, (uint64_t)v39);
  else
    sub_20BE02504(v36 - 96, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE729D4);
}

void sub_20BE72C3C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getTargetNames(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  const void **v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  const void ***v16;

  v14 = a1 + 8;
  v15 = "IMaterial::getTargetNames";
  v12 = 0;
  v13 = 0;
  v10 = 0;
  v11 = &v12;
  v8 = 0;
  v9 = 0;
  v3 = *(_QWORD **)(a1 + 56);
  v4 = (_QWORD *)(a1 + 64);
  if (v3 != (_QWORD *)(a1 + 64))
  {
    do
    {
      sub_20BE7C754((uint64_t)(v3 + 4), (uint64_t *)&v8, 0);
      if (v9 - (_QWORD)v8 == 48)
        sub_20BE74FC0((uint64_t **)&v11, v8, (uint64_t)v8);
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v4);
  }
  sub_20BDE5078((uint64_t *)a2);
  sub_20BE71C2C((uint64_t *)a2, v13);
  sub_20BE72E18((uint64_t *)a2, *(std::string **)(a2 + 8), v11, &v12);
  v16 = &v8;
  sub_20BDE5038((void ***)&v16);
  sub_20BDECAB8((uint64_t)&v11, v12);
}

void sub_20BE72D70(void *a1, int a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  char *v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, char *);
  v15 = va_arg(va2, _QWORD);
  *(_QWORD *)(v4 - 56) = va;
  sub_20BDE5038((void ***)(v4 - 56));
  sub_20BDECAB8((uint64_t)va1, v14);
  v7 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v3 + 40));
  MEMORY[0x212B929D0](v3 + 16, "");
  if (a2 == 2)
    sub_20BE02570((uint64_t)va2, (uint64_t)v7);
  else
    sub_20BE02504((uint64_t)va2, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE72D58);
}

void sub_20BE72DF8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

std::string *sub_20BE72E18(uint64_t *a1, std::string *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a3 == a4)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a3;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a4);
  }
  return sub_20BE750D8(a1, a2, a3, a4, v4);
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getShaderTypesForTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unsigned __int8 **v25;

  v23 = a1 + 8;
  v24 = "IMaterialSchema::getShaderTypesForTarget";
  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = &v21;
  v17 = 0;
  v18 = 0;
  v4 = *(_QWORD **)(a1 + 56);
  v5 = (_QWORD *)(a1 + 64);
  if (v4 != (_QWORD *)(a1 + 64))
  {
    while (1)
    {
      sub_20BE7C754((uint64_t)(v4 + 4), (uint64_t *)&v17, 0);
      v7 = (uint64_t)v17;
      if (v18 - (_QWORD)v17 != 48)
        goto LABEL_20;
      v8 = v17[23];
      if ((v8 & 0x80u) == 0)
        v9 = v17[23];
      else
        v9 = *((_QWORD *)v17 + 1);
      v10 = *(unsigned __int8 *)(a2 + 23);
      v11 = (char)v10;
      if ((v10 & 0x80u) != 0)
        v10 = *(_QWORD *)(a2 + 8);
      if (v9 != v10)
        goto LABEL_20;
      v12 = v11 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v8 & 0x80) == 0)
        break;
      if (!memcmp(*(const void **)v17, v12, *((_QWORD *)v17 + 1)))
        goto LABEL_19;
LABEL_20:
      v14 = (_QWORD *)v4[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v4[2];
          v16 = *v15 == (_QWORD)v4;
          v4 = v15;
        }
        while (!v16);
      }
      v4 = v15;
      if (v15 == v5)
        goto LABEL_26;
    }
    if (v17[23])
    {
      v13 = v17;
      while (*v13 == *v12)
      {
        ++v13;
        ++v12;
        if (!--v8)
          goto LABEL_19;
      }
      goto LABEL_20;
    }
LABEL_19:
    sub_20BE74FC0((uint64_t **)&v20, (const void **)(v7 + 24), v7 + 24);
    goto LABEL_20;
  }
LABEL_26:
  sub_20BDE5078((uint64_t *)a3);
  sub_20BE71C2C((uint64_t *)a3, v22);
  sub_20BE72E18((uint64_t *)a3, *(std::string **)(a3 + 8), v20, &v21);
  v25 = &v17;
  sub_20BDE5038((void ***)&v25);
  sub_20BDECAB8((uint64_t)&v20, v21);
}

void sub_20BE7300C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, char *a14, uint64_t a15, char a16, uint64_t a17, void **a18)
{
  uint64_t v18;
  void *v21;

  a18 = (void **)&a10;
  sub_20BDE5038(&a18);
  sub_20BDECAB8((uint64_t)&a13, a14);
  v21 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v18 + 40));
  MEMORY[0x212B929D0](v18 + 16, "");
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a16, (uint64_t)v21);
  else
    sub_20BE02504((uint64_t)&a16, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE72FF0);
}

void sub_20BE73094(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcMaterial::v12::IMaterialSchema::getShader(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  uint64_t v8;
  void *__p[2];
  char v11;
  std::string v12;
  uint64_t v13;
  const char *v14;

  v13 = a1 + 8;
  v14 = "IMaterialSchema::getShader";
  sub_20BDDC0E4(__p, "");
  sub_20BE7C4F0(a2, a3, (uint64_t)__p, &v12);
  if (v11 < 0)
    operator delete(__p[0]);
  v8 = sub_20BDEEBA4(a1 + 56, (const void **)&v12.__r_.__value_.__l.__data_);
  if (a1 + 64 == v8)
  {
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    return 0;
  }
  else
  {
    std::string::operator=(a4, (const std::string *)(v8 + 56));
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    return 1;
  }
}

void sub_20BE73180(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;
  void *v24;

  if (a14 < 0)
    operator delete(__p);
  v24 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v21 + 40));
  MEMORY[0x212B929D0](v21 + 16, "");
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a21, (uint64_t)v24);
  else
    sub_20BE02504((uint64_t)&a21, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE73168);
}

void sub_20BE73218(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getShaderParameters(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t PropertyHeader;
  _DWORD v9[4];
  void *__p;
  std::string v11;
  uint64_t v12;
  std::string v13;
  uint64_t v14;
  const char *v15;

  *(_DWORD *)a4 = 2;
  sub_20BDDC0E4((_QWORD *)(a4 + 8), "");
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  v14 = a1 + 8;
  v15 = "IMaterialSchema::getShaderParameters";
  sub_20BDDC0E4(&__p, "params");
  sub_20BE7C4F0(a2, a3, (uint64_t)&__p, &v13);
  if (v11.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a1 + 8);
  if (PropertyHeader && !*(_DWORD *)(PropertyHeader + 24))
  {
    v9[0] = 0;
    v9[2] = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&__p, a1 + 8, &v13, v9);
    *(_DWORD *)a4 = (_DWORD)__p;
    std::string::operator=((std::string *)(a4 + 8), &v11);
    sub_20BDE881C((_QWORD *)(a4 + 32), &v12);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_20BE7335C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  void *v30;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a12);
  if (a26 < 0)
    operator delete(__p);
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v26 + 40));
  MEMORY[0x212B929D0](v26 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 80, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 80, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE73340);
}

void sub_20BE73410(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty *v1;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcMaterial::v12::IMaterialSchema::getNumNetworkNodes(Alembic::AbcMaterial::v12::IMaterialSchema *this)
{
  if (*((char *)this + 231) < 0)
  {
    if (*((_QWORD *)this + 27))
      return 0;
  }
  else if (*((_BYTE *)this + 231))
  {
    return 0;
  }
  if (*((_QWORD *)this + 29))
    return Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::AbcMaterial::v12::IMaterialSchema *)((char *)this + 200));
  return 0;
}

void sub_20BE73508(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkNodeNames(uint64_t a1, uint64_t *a2)
{
  unint64_t NumProperties;
  uint64_t v5;
  uint64_t i;
  uint64_t PropertyHeader;
  unint64_t v8;
  uint64_t v9;

  sub_20BDE5078(a2);
  if (*(char *)(a1 + 231) < 0)
  {
    if (*(_QWORD *)(a1 + 216))
      return;
  }
  else if (*(_BYTE *)(a1 + 231))
  {
    return;
  }
  if (*(_QWORD *)(a1 + 232))
  {
    NumProperties = Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::Abc::v12::ICompoundProperty *)(a1 + 200));
    sub_20BE71C2C(a2, NumProperties);
    v5 = Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::Abc::v12::ICompoundProperty *)(a1 + 200));
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((Alembic::Abc::v12::ICompoundProperty *)(a1 + 200));
        if (!*(_DWORD *)(PropertyHeader + 24))
        {
          v8 = a2[1];
          if (v8 >= a2[2])
          {
            v9 = sub_20BE4EE50(a2, (__int128 *)PropertyHeader);
          }
          else
          {
            sub_20BE4EDF4(a2, (__int128 *)PropertyHeader);
            v9 = v8 + 24;
          }
          a2[1] = v9;
        }
      }
    }
  }
}

void sub_20BE73610(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v9 + 40));
  MEMORY[0x212B929D0](v9 + 16, "");
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v11);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE735F8);
}

void sub_20BE73674(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkNode(Alembic::AbcMaterial::v12::IMaterialSchema *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t PropertyHeader;
  uint64_t v6;
  _DWORD v7[4];
  _BYTE v8[48];
  char *v9;
  const char *v10;

  v9 = (char *)this + 8;
  v10 = "IMateriaSchema::getNetworkNode";
  if ((*((char *)this + 231) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 231))
      goto LABEL_5;
LABEL_8:
    *(_DWORD *)a3 = 2;
    sub_20BDDC0E4((_QWORD *)(a3 + 8), "");
    *(_QWORD *)(a3 + 88) = 0;
    v6 = a3 + 88;
    *(_QWORD *)(v6 - 32) = 0;
    *(_QWORD *)(v6 - 24) = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 - 56) = 0;
    *(_QWORD *)(v6 - 48) = 0;
    *(_BYTE *)(v6 - 40) = 0;
    *(_QWORD *)(v6 - 16) = 0;
    *(_QWORD *)(v6 - 8) = v6;
    return;
  }
  if (*((_QWORD *)this + 27))
    goto LABEL_8;
LABEL_5:
  if (!*((_QWORD *)this + 29))
    goto LABEL_8;
  if (Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::AbcMaterial::v12::IMaterialSchema *)((char *)this + 200)) <= a2)
    goto LABEL_8;
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((Alembic::AbcMaterial::v12::IMaterialSchema *)((char *)this + 200));
  if (*(_DWORD *)(PropertyHeader + 24))
    goto LABEL_8;
  v7[0] = 0;
  v7[2] = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v8, (char *)this + 200, PropertyHeader, v7);
  Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::NetworkNode(a3, (uint64_t)v8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v8);
}

void sub_20BE737A0(void *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v9;
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va);
  v9 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v5 + 40));
  MEMORY[0x212B929D0](v5 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v6 - 48, (uint64_t)v9);
  else
    sub_20BE02504(v6 - 48, 0);
  __cxa_end_catch();
  *(_DWORD *)v4 = 2;
  sub_20BDDC0E4((_QWORD *)(v4 + 8), "");
  JUMPOUT(0x20BE73744);
}

void sub_20BE73838(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::NetworkNode(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *this)
{
  *(_DWORD *)this = 2;
  sub_20BDDC0E4((_QWORD *)this + 1, "");
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
  return this;
}

{
  *(_DWORD *)this = 2;
  sub_20BDDC0E4((_QWORD *)this + 1, "");
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
  return this;
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkNode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = *(_DWORD *)(a1 + 200);
  if (*(char *)(a1 + 231) < 0)
  {
    sub_20BDDBFAC(&v10, *(void **)(a1 + 208), *(_QWORD *)(a1 + 216));
  }
  else
  {
    v10 = *(_OWORD *)(a1 + 208);
    v11 = *(_QWORD *)(a1 + 224);
  }
  v6 = *(_QWORD *)(a1 + 240);
  v12 = *(_QWORD *)(a1 + 232);
  v13 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::NetworkNode(a3, (uint64_t)&v9, a2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v9);
}

void sub_20BE73950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a9);
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkTerminalTargetNames(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  unint64_t v8;
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  const void ***v17;

  v15 = a1 + 8;
  v16 = "IMateriaSchema::getNetworkTerminalTargetNames";
  sub_20BDE5078((uint64_t *)a2);
  v13 = 0;
  v14 = 0;
  v11 = 0;
  v12 = &v13;
  v9 = 0;
  v10 = 0;
  v4 = *(_QWORD **)(a1 + 80);
  if (v4 == (_QWORD *)(a1 + 88))
  {
    v8 = 0;
  }
  else
  {
    do
    {
      sub_20BE7C754((uint64_t)(v4 + 4), (uint64_t *)&v9, 0);
      if (v10 - (_QWORD)v9 == 48)
        sub_20BE74FC0((uint64_t **)&v12, v9, (uint64_t)v9);
      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != (_QWORD *)(a1 + 88));
    v8 = v14;
  }
  sub_20BE71C2C((uint64_t *)a2, v8);
  sub_20BE72E18((uint64_t *)a2, *(std::string **)(a2 + 8), v12, &v13);
  v17 = &v9;
  sub_20BDE5038((void ***)&v17);
  sub_20BDECAB8((uint64_t)&v12, v13);
}

void sub_20BE73A84(void *a1, int a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  char *v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, char *);
  v15 = va_arg(va2, _QWORD);
  *(_QWORD *)(v4 - 56) = va;
  sub_20BDE5038((void ***)(v4 - 56));
  sub_20BDECAB8((uint64_t)va1, v14);
  v7 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v3 + 40));
  MEMORY[0x212B929D0](v3 + 16, "");
  if (a2 == 2)
    sub_20BE02570((uint64_t)va2, (uint64_t)v7);
  else
    sub_20BE02504((uint64_t)va2, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE73A6CLL);
}

void sub_20BE73B0C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkTerminalShaderTypesForTarget(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  char **v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  const char *v25;
  unsigned __int8 **v26;

  v24 = a1 + 8;
  v25 = "IMateriaSchema::getNetworkTerminalShaderTypesForTarget";
  sub_20BDE5078((uint64_t *)a3);
  v22 = 0;
  v23 = 0;
  v20 = 0;
  v21 = &v22;
  v18 = 0;
  v19 = 0;
  v6 = *(_QWORD **)(a1 + 80);
  if (v6 == (_QWORD *)(a1 + 88))
  {
    v17 = 0;
    goto LABEL_28;
  }
  do
  {
    sub_20BE7C754((uint64_t)(v6 + 4), (uint64_t *)&v18, 0);
    v7 = (uint64_t)v18;
    if (v19 - (_QWORD)v18 == 48)
    {
      v8 = v18[23];
      if ((v8 & 0x80u) == 0)
        v9 = v18[23];
      else
        v9 = *((_QWORD *)v18 + 1);
      v10 = a2[23];
      v11 = (char)v10;
      if ((v10 & 0x80u) != 0)
        v10 = *((_QWORD *)a2 + 1);
      if (v9 == v10)
      {
        if (v11 >= 0)
          v12 = a2;
        else
          v12 = *(unsigned __int8 **)a2;
        if ((v8 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v18, v12, *((_QWORD *)v18 + 1)))
            goto LABEL_20;
LABEL_19:
          sub_20BE74FC0((uint64_t **)&v21, (const void **)(v7 + 24), v7 + 24);
          goto LABEL_20;
        }
        if (!v18[23])
          goto LABEL_19;
        v13 = v18;
        while (*v13 == *v12)
        {
          ++v13;
          ++v12;
          if (!--v8)
            goto LABEL_19;
        }
      }
    }
LABEL_20:
    v14 = (_QWORD *)v6[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)v6[2];
        v16 = *v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
    }
    v6 = v15;
  }
  while (v15 != (_QWORD *)(a1 + 88));
  v17 = v23;
LABEL_28:
  sub_20BE71C2C((uint64_t *)a3, v17);
  sub_20BE72E18((uint64_t *)a3, *(std::string **)(a3 + 8), v21, &v22);
  v26 = &v18;
  sub_20BDE5038((void ***)&v26);
  sub_20BDECAB8((uint64_t)&v21, v22);
}

void sub_20BE73CD0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, char *a14, uint64_t a15, char a16, uint64_t a17, void **a18)
{
  uint64_t v18;
  void *v21;

  a18 = (void **)&a10;
  sub_20BDE5038(&a18);
  sub_20BDECAB8((uint64_t)&a13, a14);
  v21 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v18 + 40));
  MEMORY[0x212B929D0](v18 + 16, "");
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a16, (uint64_t)v21);
  else
    sub_20BE02504((uint64_t)&a16, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE73CB4);
}

void sub_20BE73D58(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkTerminal(uint64_t a1, const void **a2, uint64_t a3, std::string *a4, uint64_t a5)
{
  size_t v10;
  std::string *v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  _BOOL8 v19;
  __int128 v21;
  uint64_t v22;
  std::string v23;
  void *__p[2];
  std::string::size_type v25;
  uint64_t v26;
  const char *v27;

  v26 = a1 + 8;
  v27 = "IMateriaSchema::getNetworkTerminal";
  if (*((char *)a2 + 23) >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = &v23;
  sub_20BDF6BDC((uint64_t)&v23, v10 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if (*((char *)a2 + 23) >= 0)
      v12 = a2;
    else
      v12 = *a2;
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 46;
  v13 = *(char *)(a3 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a3;
  else
    v14 = *(const std::string::value_type **)a3;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  v16 = std::string::append(&v23, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v25 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v18 = sub_20BDEEBA4(a1 + 80, (const void **)__p);
  v19 = a1 + 88 != v18;
  if (a1 + 88 != v18)
  {
    memset(&v23, 0, sizeof(v23));
    sub_20BE7C754(v18 + 56, (uint64_t *)&v23, 1);
    std::string::operator=(a4, (const std::string *)v23.__r_.__value_.__l.__data_);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23.__r_.__value_.__l.__size_ - v23.__r_.__value_.__r.__words[0]) >> 3) < 2)
    {
      sub_20BDDC0E4(&v21, "");
    }
    else if (*(char *)(v23.__r_.__value_.__r.__words[0] + 47) < 0)
    {
      sub_20BDDBFAC(&v21, *(void **)(v23.__r_.__value_.__r.__words[0] + 24), *(_QWORD *)(v23.__r_.__value_.__r.__words[0] + 32));
    }
    else
    {
      v21 = *(_OWORD *)(v23.__r_.__value_.__r.__words[0] + 24);
      v22 = *(_QWORD *)(v23.__r_.__value_.__r.__words[0] + 40);
    }
    if (*(char *)(a5 + 23) < 0)
      operator delete(*(void **)a5);
    *(_OWORD *)a5 = v21;
    *(_QWORD *)(a5 + 16) = v22;
    *(_QWORD *)&v21 = &v23;
    sub_20BDE5038((void ***)&v21);
  }
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  return v19;
}

void sub_20BE73F5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void *v28;

  a9 = &a12;
  sub_20BDE5038((void ***)&a9);
  if (a23 < 0)
    operator delete(__p);
  v28 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v25 + 40));
  MEMORY[0x212B929D0](v25 + 16, "");
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a25, (uint64_t)v28);
  else
    sub_20BE02504((uint64_t)&a25, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE73F3CLL);
}

void sub_20BE74018(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unint64_t Alembic::AbcMaterial::v12::IMaterialSchema::getNumNetworkInterfaceParameterMappings(Alembic::AbcMaterial::v12::IMaterialSchema *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 3);
}

BOOL Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkInterfaceParameterMapping(uint64_t a1, unint64_t a2, std::string *this, std::string *a4, uint64_t a5)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 128);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 136) - v5) >> 3) <= a2)
    return 0;
  std::string::operator=(this, (const std::string *)(v5 + 24 * a2));
  return Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkInterfaceParameterMapping(a1, (const void **)&this->__r_.__value_.__l.__data_, a4, a5);
}

void sub_20BE74140(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkInterfaceParameterMapping(uint64_t a1, const void **a2, std::string *a3, uint64_t a4)
{
  uint64_t v7;
  _BOOL8 v8;
  std::string v10;
  std::string *__str;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;

  v14 = a1 + 8;
  v15 = "IMateriaSchema::getNetworkInterfaceParameterMapping";
  v7 = sub_20BDEEBA4(a1 + 104, a2);
  v8 = a1 + 112 != v7;
  if (a1 + 112 != v7)
  {
    __str = 0;
    v12 = 0;
    v13 = 0;
    sub_20BE7C754(v7 + 56, (uint64_t *)&__str, 1);
    std::string::operator=(a3, __str);
    if (0xAAAAAAAAAAAAAAABLL * ((v12 - (uint64_t)__str) >> 3) < 2)
    {
      sub_20BDDC0E4(&v10, "");
    }
    else if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20BDDBFAC(&v10, __str[1].__r_.__value_.__l.__data_, __str[1].__r_.__value_.__l.__size_);
    }
    else
    {
      v10 = __str[1];
    }
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v10;
    v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    sub_20BDE5038((void ***)&v10);
  }
  return v8;
}

void sub_20BE74270(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;
  void *v18;

  a9 = (void **)&a12;
  sub_20BDE5038(&a9);
  v18 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v15 + 40));
  MEMORY[0x212B929D0](v15 + 16, "");
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a15, (uint64_t)v18);
  else
    sub_20BE02504((uint64_t)&a15, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE74258);
}

void sub_20BE742F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkInterfaceParameterMappingNames(uint64_t a1, uint64_t a2)
{
  if (a1 + 128 != a2)
    sub_20BE75818(a2, *(std::string **)(a1 + 128), *(__int128 **)(a1 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 3));
}

_BYTE *Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkInterfaceParameters@<X0>(Alembic::AbcMaterial::v12::IMaterialSchema *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_DWORD *)a2 = *((_DWORD *)this + 38);
  result = (_BYTE *)(a2 + 8);
  if (*((char *)this + 183) < 0)
  {
    result = sub_20BDDBFAC(result, *((void **)this + 20), *((_QWORD *)this + 21));
  }
  else
  {
    *(_OWORD *)result = *((_OWORD *)this + 10);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 22);
  }
  v5 = *((_QWORD *)this + 24);
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 23);
  *(_QWORD *)(a2 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::NetworkNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  return a1;
}

uint64_t Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::NetworkNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v6;
  uint64_t PropertyHeader;
  _DWORD v9[4];
  int v10;
  std::string v11;
  uint64_t v12;

  *(_DWORD *)a1 = 2;
  v6 = (std::string *)(a1 + 8);
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(char *)(a2 + 31) < 0)
  {
    if (*(_QWORD *)(a2 + 16))
      return a1;
  }
  else if (*(_BYTE *)(a2 + 31))
  {
    return a1;
  }
  if (*(_QWORD *)(a2 + 32))
  {
    PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a2);
    if (PropertyHeader)
    {
      if (!*(_DWORD *)(PropertyHeader + 24))
      {
        v9[0] = 0;
        v9[2] = 0;
        Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v10, a2, a3, v9);
        *(_DWORD *)a1 = v10;
        std::string::operator=(v6, &v11);
        sub_20BDE881C((_QWORD *)(a1 + 32), &v12);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v10);
      }
    }
  }
  return a1;
}

void sub_20BE745B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  Alembic::Abc::v12::ICompoundProperty *v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va);
  sub_20BDE9D48(v4, *((_QWORD **)v3 + 11));
  sub_20BDE5038((void ***)va);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v3);
  _Unwind_Resume(a1);
}

BOOL Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::valid(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *this)
{
  if (*((char *)this + 31) < 0)
  {
    if (*((_QWORD *)this + 2))
      return 0;
  }
  else if (*((_BYTE *)this + 31))
  {
    return 0;
  }
  return *((_QWORD *)this + 4) != 0;
}

void **Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getName@<X0>(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *this@<X0>, _QWORD *a2@<X8>)
{
  void **result;

  if (*((char *)this + 31) < 0)
  {
    if (!*((_QWORD *)this + 2))
      goto LABEL_5;
    return (void **)sub_20BDDC0E4(a2, "");
  }
  if (*((_BYTE *)this + 31))
    return (void **)sub_20BDDC0E4(a2, "");
LABEL_5:
  if (!*((_QWORD *)this + 4))
    return (void **)sub_20BDDC0E4(a2, "");
  result = (void **)sub_20BE75ADC((uint64_t)this);
  if (*((char *)result + 23) < 0)
    return (void **)sub_20BDDBFAC(a2, *result, (unint64_t)result[1]);
  *(_OWORD *)a2 = *(_OWORD *)result;
  a2[2] = result[2];
  return result;
}

uint64_t Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getTarget(uint64_t a1, uint64_t a2)
{
  uint64_t PropertyHeader;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  void *__p[2];
  char v14;

  if (*(char *)(a1 + 31) < 0)
  {
    if (*(_QWORD *)(a1 + 16))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 31))
  {
    return 0;
  }
  if (!*(_QWORD *)(a1 + 32))
    return 0;
  sub_20BDDC0E4(__p, "target");
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a1);
  v5 = PropertyHeader;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (v5)
      goto LABEL_10;
    return 0;
  }
  if (!PropertyHeader)
    return 0;
LABEL_10:
  if (*(_DWORD *)(v5 + 24) != 1)
    return 0;
  result = 0;
  if (*(_DWORD *)(v5 + 56) == 12 && *(_BYTE *)(v5 + 60) == 1)
  {
    v7 = sub_20BE07A80(v5 + 32, 0);
    result = 0;
    if (v7)
    {
      LODWORD(v11) = 0;
      DWORD2(v11) = 0;
      LODWORD(v8) = 0;
      LODWORD(v9) = 0;
      sub_20BE07490((uint64_t)__p, (int *)a1, v5, (uint64_t **)&v11, &v8);
      v8 = 0;
      v9 = 0;
      v10 = 2;
      sub_20BE07440((uint64_t)__p, (uint64_t)&v8, &v11);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_OWORD *)a2 = v11;
      *(_QWORD *)(a2 + 16) = v12;
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty(__p);
      return 1;
    }
  }
  return result;
}

void sub_20BE747E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&__p);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getNodeType(uint64_t a1, uint64_t a2)
{
  uint64_t PropertyHeader;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  void *__p[2];
  char v14;

  if (*(char *)(a1 + 31) < 0)
  {
    if (*(_QWORD *)(a1 + 16))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 31))
  {
    return 0;
  }
  if (!*(_QWORD *)(a1 + 32))
    return 0;
  sub_20BDDC0E4(__p, "type");
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a1);
  v5 = PropertyHeader;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (v5)
      goto LABEL_10;
    return 0;
  }
  if (!PropertyHeader)
    return 0;
LABEL_10:
  if (*(_DWORD *)(v5 + 24) != 1)
    return 0;
  result = 0;
  if (*(_DWORD *)(v5 + 56) == 12 && *(_BYTE *)(v5 + 60) == 1)
  {
    v7 = sub_20BE07A80(v5 + 32, 0);
    result = 0;
    if (v7)
    {
      LODWORD(v11) = 0;
      DWORD2(v11) = 0;
      LODWORD(v8) = 0;
      LODWORD(v9) = 0;
      sub_20BE07490((uint64_t)__p, (int *)a1, v5, (uint64_t **)&v11, &v8);
      v8 = 0;
      v9 = 0;
      v10 = 2;
      sub_20BE07440((uint64_t)__p, (uint64_t)&v8, &v11);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_OWORD *)a2 = v11;
      *(_QWORD *)(a2 + 16) = v12;
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty(__p);
      return 1;
    }
  }
  return result;
}

void sub_20BE74958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&__p);
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getParameters(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t PropertyHeader;
  uint64_t v5;
  _DWORD v6[4];
  void *v7[2];
  char v8;
  void *__p;
  std::string v10;
  uint64_t v11;

  *(_DWORD *)a2 = 2;
  sub_20BDDC0E4((_QWORD *)(a2 + 8), "");
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  if (*((char *)this + 31) < 0)
  {
    if (*((_QWORD *)this + 2))
      return;
  }
  else if (*((_BYTE *)this + 31))
  {
    return;
  }
  if (*((_QWORD *)this + 4))
  {
    sub_20BDDC0E4(&__p, "params");
    PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)this);
    v5 = PropertyHeader;
    if (v10.__r_.__value_.__s.__data_[15] < 0)
    {
      operator delete(__p);
      if (!v5)
        return;
    }
    else if (!PropertyHeader)
    {
      return;
    }
    if (!*(_DWORD *)(v5 + 24))
    {
      sub_20BDDC0E4(v7, "params");
      v6[0] = 0;
      v6[2] = 0;
      Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&__p, this, v7, v6);
      *(_DWORD *)a2 = (_DWORD)__p;
      std::string::operator=((std::string *)(a2 + 8), &v10);
      sub_20BDE881C((_QWORD *)(a2 + 32), &v11);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
      if (v8 < 0)
        operator delete(v7[0]);
    }
  }
}

void sub_20BE74AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  Alembic::Abc::v12::ICompoundProperty *v23;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a18);
  if (a17 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v23);
  _Unwind_Resume(a1);
}

unint64_t Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getNumConnections(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *this)
{
  uint64_t PropertyHeader;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t *v12;
  __int128 *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t *v20;
  int v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  void *v24[2];
  int v25;
  char v26;
  void *__p[2];
  char v28;

  if (!*((_BYTE *)this + 48))
  {
    sub_20BDDC0E4(__p, ".connections");
    PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)this);
    v3 = PropertyHeader;
    if (v28 < 0)
    {
      operator delete(__p[0]);
      if (!v3)
      {
LABEL_29:
        *((_BYTE *)this + 48) = 1;
        return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
      }
    }
    else if (!PropertyHeader)
    {
      goto LABEL_29;
    }
    sub_20BDDC0E4(v24, ".connections");
    LODWORD(v22) = 0;
    LODWORD(v23) = 0;
    LODWORD(v20) = 0;
    v21 = 0;
    sub_20BE18AF0((uint64_t)__p, (int *)this, (uint64_t)v24, &v22, &v20);
    if (v26 < 0)
      operator delete(v24[0]);
    v22 = 0;
    v23 = 0;
    v24[0] = 0;
    v24[1] = 0;
    v25 = 2;
    sub_20BE17E28((uint64_t)__p, (uint64_t)&v22, (uint64_t)v24);
    v4 = (uint64_t *)v22[2];
    v5 = v22[3] - (_QWORD)v4;
    if (v5)
    {
      v6 = v5 >> 3;
      if (v6 <= 1)
        v6 = 1;
      v7 = 1;
      do
      {
        v8 = *v4++;
        v7 *= v8;
        --v6;
      }
      while (v6);
    }
    else
    {
      v7 = 0;
    }
    sub_20BE71C2C((uint64_t *)this + 7, v7 >> 1);
    if (v7 >= 2)
    {
      v9 = 0;
      if (v7 >> 1 <= 1)
        v10 = 1;
      else
        v10 = v7 >> 1;
      do
      {
        v11 = (std::string *)(*v22 + v9);
        v24[0] = v11;
        v12 = sub_20BDDDFDC((uint64_t **)this + 10, (const void **)&v11->__r_.__value_.__l.__data_, (uint64_t)&unk_20CA52BBA, (__int128 **)v24);
        std::string::operator=((std::string *)(v12 + 7), v11 + 1);
        v13 = (__int128 *)(*v22 + v9);
        v14 = *((_QWORD *)this + 8);
        if (v14 >= *((_QWORD *)this + 9))
        {
          v15 = sub_20BE4EE50((uint64_t *)this + 7, v13);
        }
        else
        {
          sub_20BE4EDF4((_QWORD *)this + 7, v13);
          v15 = v14 + 24;
        }
        *((_QWORD *)this + 8) = v15;
        v9 += 48;
        --v10;
      }
      while (v10);
    }
    v16 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(__p);
    goto LABEL_29;
  }
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
}

void sub_20BE74D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a12);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&a20);
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::splitConnectionValue(uint64_t a1, uint64_t a2, std::string *a3, uint64_t a4)
{
  std::string v6;
  std::string *__str;
  uint64_t v8;
  uint64_t v9;

  __str = 0;
  v8 = 0;
  v9 = 0;
  sub_20BE7C754(a2, (uint64_t *)&__str, 1);
  std::string::operator=(a3, __str);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)__str) >> 3) < 2)
  {
    sub_20BDDC0E4(&v6, "");
  }
  else if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20BDDBFAC(&v6, __str[1].__r_.__value_.__l.__data_, __str[1].__r_.__value_.__l.__size_);
  }
  else
  {
    v6 = __str[1];
  }
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v6;
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  sub_20BDE5038((void ***)&v6);
}

void sub_20BE74E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  sub_20BDE5038(&a9);
  _Unwind_Resume(a1);
}

BOOL Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getConnection(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *a1, unint64_t a2, std::string *a3, std::string *a4, uint64_t a5)
{
  if (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getNumConnections(a1) <= a2)
    return 0;
  std::string::operator=(a3, (const std::string *)(*((_QWORD *)a1 + 7) + 24 * a2));
  return Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getConnection(a1, (const void **)&a3->__r_.__value_.__l.__data_, a4, a5);
}

BOOL Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getConnection(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *a1, const void **a2, std::string *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *__p[2];
  uint64_t v13;

  Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getNumConnections(a1);
  v8 = sub_20BDEEBA4((uint64_t)a1 + 80, a2);
  v9 = v8;
  v10 = (char *)a1 + 88;
  if (v10 != (char *)v8)
  {
    if (*(char *)(v8 + 79) < 0)
    {
      v8 = (uint64_t)sub_20BDDBFAC(__p, *(void **)(v8 + 56), *(_QWORD *)(v8 + 64));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v8 + 56);
      v13 = *(_QWORD *)(v8 + 72);
    }
    Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::splitConnectionValue(v8, (uint64_t)__p, a3, a4);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  return v10 != (char *)v9;
}

void sub_20BE74FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BE74FC0(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    sub_20BE7503C((uint64_t)a1, a3, (uint64_t)&v7);
    sub_20BDDE1B4(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *sub_20BE7503C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    result[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20BE750BC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BDEEB58(v3, v2);
  _Unwind_Resume(a1);
}

std::string *sub_20BE750D8(uint64_t *a1, std::string *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  std::string *v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;
  int v23[2];
  char *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  char v28;

  v5 = a2;
  if (a5 >= 1)
  {
    v10 = (uint64_t)(a1 + 2);
    v9 = a1[2];
    v11 = a1[1];
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v11) >> 3)) >= a5)
    {
      *(_QWORD *)v23 = a3;
      sub_20BE754A0((_QWORD **)v23, a5);
      v20 = a1[1] - (_QWORD)v5;
      v21 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 3);
      if (v21 >= a5
        || (*(_QWORD *)v23 = a3,
            sub_20BE754A0((_QWORD **)v23, v21),
            a1[1] = (uint64_t)sub_20BE7552C(v10, *(_QWORD **)v23, a4, (_QWORD *)a1[1]),
            v20 >= 1))
      {
        sub_20BE752D4((uint64_t)a1, (uint64_t)v5, v11, (uint64_t)&v5[a5]);
        sub_20BE75714((int)&v28, a3, *(_QWORD **)v23, v5);
      }
    }
    else
    {
      v12 = *a1;
      v13 = a5 - 0x5555555555555555 * ((uint64_t)(v11 - *a1) >> 3);
      if (v13 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v12) >> 3);
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v12) >> 3);
      v16 = 2 * v15;
      if (2 * v15 <= v13)
        v16 = v13;
      if (v15 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v16;
      v27 = a1 + 2;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)(a1 + 2), v17);
      else
        v18 = 0;
      *(_QWORD *)v23 = v18;
      v24 = &v18[24 * v14];
      v25 = v24;
      v26 = &v18[24 * v17];
      sub_20BE75340(v23, a3, a5);
      v5 = (std::string *)sub_20BE753F0((uint64_t)a1, v23, (__int128 *)v5);
      sub_20BDF3648((uint64_t)v23);
    }
  }
  return v5;
}

void sub_20BE752B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE752D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v10 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
      *(_OWORD *)v8 = v10;
      v8 += 24;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20BE75690((uint64_t)&v12, a2, v7, v6);
}

_QWORD *sub_20BE75340(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v3 = result;
  v4 = result[2];
  if (a3)
  {
    v6 = v4 + 24 * a3;
    do
    {
      if (*((char *)a2 + 55) < 0)
      {
        result = sub_20BDDBFAC((_BYTE *)v4, (void *)a2[4], a2[5]);
      }
      else
      {
        v7 = *((_OWORD *)a2 + 2);
        *(_QWORD *)(v4 + 16) = a2[6];
        *(_OWORD *)v4 = v7;
      }
      v8 = (_QWORD *)a2[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)a2[2];
          v10 = *v9 == (_QWORD)a2;
          a2 = v9;
        }
        while (!v10);
      }
      v4 += 24;
      a2 = v9;
    }
    while (v4 != v6);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_20BE753E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20BE753F0(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1 + 16;
  sub_20BDF3534(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(_QWORD *)a1, *(_QWORD *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20BE7579C(v7, a3, *(__int128 **)(a1 + 8), a2[2]);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = a2[1];
  a2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_QWORD **sub_20BE754A0(_QWORD **result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD *v7;
  _QWORD *v8;

  if (a2 < 0)
  {
    v7 = *result;
    do
    {
      v8 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v4 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v7[2];
          v5 = *v4 == (_QWORD)v7;
          v7 = v4;
        }
        while (v5);
      }
      v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2)
      return result;
    v2 = *result;
    do
    {
      v3 = (_QWORD *)v2[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v2[2];
          v5 = *v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (a2-- > 1);
  }
  *result = v4;
  return result;
}

_QWORD *sub_20BE7552C(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *__dst)
{
  _QWORD *v4;
  _QWORD *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD v12[3];
  char v13;
  void *v14;
  char *v15;

  v4 = __dst;
  v14 = __dst;
  v15 = (char *)__dst;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 55) < 0)
      {
        sub_20BDDBFAC(v4, (void *)v6[4], v6[5]);
      }
      else
      {
        v7 = *((_OWORD *)v6 + 2);
        v4[2] = v6[6];
        *(_OWORD *)v4 = v7;
      }
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v4 = v15 + 24;
      v15 += 24;
      v6 = v9;
    }
    while (v9 != a3);
  }
  v13 = 1;
  sub_20BE75618((uint64_t)v12);
  return v4;
}

void sub_20BE75604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE75618((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE75618(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BE7564C(a1);
  return a1;
}

void sub_20BE7564C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

uint64_t sub_20BE75690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = a3;
    do
    {
      v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0)
        operator delete(*(void **)v7);
      v8 = *(_OWORD *)(v6 - 24);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 - 8);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v6 - 1) = 0;
      *(_BYTE *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

_QWORD *sub_20BE75714(int a1, _QWORD *a2, _QWORD *a3, std::string *this)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      std::string::operator=(this, (const std::string *)(v5 + 4));
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      ++this;
      v5 = v8;
    }
    while (v8 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_20BE7579C(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      v4 += 24;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    while (a2 != a3);
    v10 = v4;
  }
  v8 = 1;
  sub_20BE75618((uint64_t)v7);
  return v4;
}

void sub_20BE75818(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_20BE7598C((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_20BDE4FA4((_QWORD *)a1, v11);
    v12 = sub_20BE759C4(v8, (__int128 *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    sub_20BE75A80(__str, v13, v9);
    v12 = sub_20BE759C4(v8, (__int128 *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_20BE75A80(__str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0)
        operator delete(*(void **)(v16 - 24));
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_20BE7597C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20BE75984(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20BE7598C(uint64_t *a1)
{
  if (*a1)
  {
    sub_20BDE5078(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_20BE759C4(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_20BDDBFAC(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20BE75618((uint64_t)v9);
  return v4;
}

void sub_20BE75A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE75618((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *sub_20BE75A80(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t sub_20BE75ADC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20BE75B18(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  unsigned __int8 v11;
  _QWORD *v12;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  if ((v11 & 1) == 0)
  {
    {
      v12 = operator new(0x50uLL);
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      *((_DWORD *)v12 + 6) = 1;
      v12[6] = 0;
      v12[5] = 0;
      v12[4] = v12 + 5;
      *((_DWORD *)v12 + 14) = 127;
      *((_BYTE *)v12 + 60) = 0;
      v12[8] = 0;
      v12[9] = 0;
      Alembic::Abc::v12::IBasePropertyT<std::shared_ptr<Alembic::AbcCoreAbstract::v12::CompoundPropertyReader>>::getHeader(void)const::phd = (uint64_t)v12;
    }
  }
  JUMPOUT(0x20BE75B08);
}

void sub_20BE75BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcMaterial::v12::MaterialFlatten::MaterialFlatten(uint64_t this)
{
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = 0;
  *(_BYTE *)(this + 24) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = this + 64;
  return this;
}

{
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = 0;
  *(_BYTE *)(this + 24) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = this + 64;
  return this;
}

uint64_t Alembic::AbcMaterial::v12::MaterialFlatten::MaterialFlatten(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = sub_20BE78EE0((uint64_t *)a1, a2);
  return a1;
}

{
  std::string v5[4];
  void *v6;
  void *v7;
  _QWORD *v8[3];
  _QWORD *v9[3];
  _QWORD *v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_20BE04EB0((uint64_t)v5, a2);
  v5[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C519D28;
  sub_20BE78970((uint64_t)&v6, a2 + 96);
  Alembic::AbcMaterial::v12::MaterialFlatten::append(a1, v5);
  v5[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C519D28;
  v6 = &unk_24C519D60;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v13);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v12);
  v14 = (void **)&v11;
  sub_20BDE5038(&v14);
  sub_20BDE9D48((uint64_t)v10, v10[1]);
  sub_20BDE9D48((uint64_t)v9, v9[1]);
  sub_20BDE9D48((uint64_t)v8, v8[1]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v7);
  Alembic::Abc::v12::IObject::~IObject((void **)&v5[0].__r_.__value_.__l.__data_);
  return a1;
}

void sub_20BE75CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;

  v13 = v12;
  sub_20BE78E5C(v11, *(_QWORD **)(v10 + 64));
  a10 = v13;
  sub_20BDE5038(&a10);
  a10 = (void **)v10;
  sub_20BE78DD0(&a10);
  _Unwind_Resume(a1);
}

void sub_20BE75DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_20BE760CC((uint64_t)&a9);
  sub_20BE78E5C(v10, *(_QWORD **)(v9 + 64));
  *(_QWORD *)(v12 - 72) = v11;
  sub_20BDE5038((void ***)(v12 - 72));
  *(_QWORD *)(v12 - 72) = v9;
  sub_20BE78DD0((void ***)(v12 - 72));
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::MaterialFlatten::append(uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t Header;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t (**v14)();
  int v15;
  std::string v16;
  uint64_t v17;
  uint64_t v18;
  std::string v19;
  void *v20;
  void *v21;
  _QWORD *v22[3];
  _QWORD *v23[3];
  _QWORD *v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  std::string v33;
  void **v34;

  v4 = (uint64_t)&a2[4];
  v5 = *(_QWORD *)(a1 + 8);
  if (v5 >= *(_QWORD *)(a1 + 16))
  {
    v6 = sub_20BE78EE0((uint64_t *)a1, v4);
  }
  else
  {
    sub_20BE78970(*(_QWORD *)(a1 + 8), v4);
    v6 = v5 + 248;
    *(_QWORD *)(a1 + 8) = v5 + 248;
  }
  *(_QWORD *)(a1 + 8) = v6;
  Alembic::Abc::v12::IObject::getParent(a2, (uint64_t)&v28);
  while (1)
  {
    if (v30 < 0)
    {
      if (v29)
        break;
    }
    else if (v30)
    {
      break;
    }
    if (!v31)
      break;
    Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&v28);
    if (sub_20BE791A0(Header + 48, 0))
    {
      LODWORD(v12) = 0;
      v13 = 0;
      LODWORD(v10) = 0;
      v11 = 0;
      sub_20BE7A4C8((uint64_t)&v14, (uint64_t)&v28, 0, &v12, &v10);
      v8 = *(_QWORD *)(a1 + 8);
      if (v8 >= *(_QWORD *)(a1 + 16))
      {
        v9 = sub_20BE78EE0((uint64_t *)a1, (uint64_t)&v20);
      }
      else
      {
        sub_20BE78970(*(_QWORD *)(a1 + 8), (uint64_t)&v20);
        v9 = v8 + 248;
        *(_QWORD *)(a1 + 8) = v8 + 248;
      }
      *(_QWORD *)(a1 + 8) = v9;
      v14 = off_24C519D28;
      v20 = &unk_24C519D60;
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v27);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v26);
      v34 = (void **)&v25;
      sub_20BDE5038(&v34);
      sub_20BDE9D48((uint64_t)v24, v24[1]);
      sub_20BDE9D48((uint64_t)v23, v23[1]);
      sub_20BDE9D48((uint64_t)v22, v22[1]);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v21);
      Alembic::Abc::v12::IObject::~IObject((void **)&v14);
    }
    Alembic::Abc::v12::IObject::getParent(&v28, (uint64_t)&v14);
    LODWORD(v28.__r_.__value_.__r.__words[1]) = v15;
    std::string::operator=((std::string *)&v28.__r_.__value_.__r.__words[2], &v16);
    sub_20BDE881C(&v31, &v17);
    sub_20BDE881C(&v32, &v18);
    std::string::operator=(&v33, &v19);
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v14);
  }
  *(_BYTE *)(a1 + 24) = 0;
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v28);
}

void sub_20BE76078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v22 + 8) = v23;
  _Unwind_Resume(exception_object);
}

void sub_20BE760CC(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_24C519D28;
  *(_QWORD *)(a1 + 96) = &unk_24C519D60;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 248));
  v2 = (void **)(a1 + 224);
  sub_20BDE5038(&v2);
  sub_20BDE9D48(a1 + 200, *(_QWORD **)(a1 + 208));
  sub_20BDE9D48(a1 + 176, *(_QWORD **)(a1 + 184));
  sub_20BDE9D48(a1 + 152, *(_QWORD **)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
}

uint64_t Alembic::AbcMaterial::v12::MaterialFlatten::MaterialFlatten(uint64_t a1, Alembic::Abc::v12::IObject *a2, uint64_t a3)
{
  uint64_t v5;
  int hasMaterial;
  int MaterialAssignmentPath;
  std::string::size_type v8;
  BOOL v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type size;
  int v14;
  uint64_t Header;
  uint64_t v17;
  uint64_t v18;
  std::string v19[4];
  void *v20;
  void *v21;
  _QWORD *v22[3];
  _QWORD *v23[3];
  _QWORD *v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string v28;
  void (**v29)(Alembic::Abc::v12::IObject *__hidden);
  int v30;
  std::string v31;
  __int128 v32;
  __int128 v33;
  std::string v34;
  void *__p;
  int v36;
  std::string v37;
  __int128 v38;
  __int128 v39;
  std::string v40;
  _BYTE v41[96];
  std::string __str;
  void *v43;
  void *v44;
  _QWORD *v45[3];
  _QWORD *v46[3];
  _QWORD *v47[3];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[96];
  void *v52;
  void *v53;
  _QWORD *v54[3];
  _QWORD *v55[3];
  _QWORD *v56[3];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;

  v5 = a1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_20BE78750((uint64_t)&v52);
  sub_20BE04EB0((uint64_t)v51, (uint64_t)a2);
  sub_20BDDC0E4(&__p, ".material");
  hasMaterial = Alembic::AbcMaterial::v12::hasMaterial((Alembic::Abc::v12::IObject *)v51, (uint64_t)&v52, (uint64_t)&__p);
  if (v37.__r_.__value_.__s.__data_[7] < 0)
    operator delete(__p);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v51);
  if (hasMaterial)
  {
    sub_20BE78970((uint64_t)&v43, (uint64_t)&v52);
    Alembic::AbcMaterial::v12::MaterialFlatten::append(v5, (uint64_t)&v43);
    v43 = &unk_24C519D60;
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v50);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v49);
    __p = &v48;
    sub_20BDE5038((void ***)&__p);
    sub_20BDE9D48((uint64_t)v47, v47[1]);
    sub_20BDE9D48((uint64_t)v46, v46[1]);
    sub_20BDE9D48((uint64_t)v45, v45[1]);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v44);
  }
  memset(&__str, 0, sizeof(__str));
  sub_20BE04EB0((uint64_t)v41, (uint64_t)a2);
  sub_20BDDC0E4(&__p, ".material.assign");
  MaterialAssignmentPath = Alembic::AbcMaterial::v12::getMaterialAssignmentPath((uint64_t)v41, (uint64_t)&__str, (uint64_t)&__p);
  if (v37.__r_.__value_.__s.__data_[7] < 0)
    operator delete(__p);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v41);
  if (!MaterialAssignmentPath)
    goto LABEL_40;
  v36 = 2;
  v18 = v5;
  sub_20BDDC0E4(&v37, "");
  v38 = 0u;
  v39 = 0u;
  memset(&v40, 0, sizeof(v40));
  __p = off_24C518E68;
  if (*(char *)(a3 + 31) < 0)
  {
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_16;
  }
  else if (*(_BYTE *)(a3 + 31))
  {
    goto LABEL_16;
  }
  if (*(_QWORD *)(a3 + 32))
  {
    Alembic::Abc::v12::IArchive::getTop((Alembic::Abc::v12::IArchive *)a3, (uint64_t)&v29);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v31.__r_.__value_.__l.__size_)
        goto LABEL_15;
    }
    else if (*((_BYTE *)&v31.__r_.__value_.__s + 23))
    {
LABEL_15:
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v29);
      goto LABEL_16;
    }
    v17 = v32;
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v29);
    if (v17)
    {
      Alembic::Abc::v12::IArchive::getTop((Alembic::Abc::v12::IArchive *)a3, (uint64_t)&v29);
      v36 = v30;
      std::string::operator=(&v37, &v31);
      sub_20BDE881C(&v38, (uint64_t *)&v32);
      sub_20BDE881C(&v39, (uint64_t *)&v33);
      std::string::operator=(&v40, &v34);
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v29);
      goto LABEL_17;
    }
  }
LABEL_16:
  Alembic::Abc::v12::IObject::getArchive(a2, (uint64_t)&v28);
  Alembic::Abc::v12::IArchive::getTop((Alembic::Abc::v12::IArchive *)&v28, (uint64_t)&v29);
  v36 = v30;
  std::string::operator=(&v37, &v31);
  sub_20BDE881C(&v38, (uint64_t *)&v32);
  sub_20BDE881C(&v39, (uint64_t *)&v33);
  std::string::operator=(&v40, &v34);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v29);
  Alembic::Abc::v12::IArchive::~IArchive((Alembic::Abc::v12::IArchive *)&v28);
LABEL_17:
  v8 = 0;
  v9 = 0;
  while (!v9)
  {
    v10 = std::string::find(&__str, 47, v8);
    v11 = v10;
    v9 = v10 == -1;
    if (v10 == -1)
    {
      v12 = -1;
LABEL_25:
      std::string::basic_string(&v28, &__str, v8, v12, (std::allocator<char> *)&v29);
      if (Alembic::Abc::v12::IObject::getChildHeader((uint64_t)&__p))
      {
        Alembic::Abc::v12::IObject::getChild((uint64_t)&__p, (uint64_t)&v29);
        v36 = v30;
        std::string::operator=(&v37, &v31);
        sub_20BDE881C(&v38, (uint64_t *)&v32);
        sub_20BDE881C(&v39, (uint64_t *)&v33);
        std::string::operator=(&v40, &v34);
        Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v29);
        v14 = 0;
      }
      else
      {
        v30 = 2;
        sub_20BDDC0E4(&v31, "");
        v29 = off_24C518E68;
        v32 = 0u;
        v33 = 0u;
        memset(&v34, 0, sizeof(v34));
        v36 = v30;
        std::string::operator=(&v37, &v31);
        sub_20BDE881C(&v38, (uint64_t *)&v32);
        sub_20BDE881C(&v39, (uint64_t *)&v33);
        std::string::operator=(&v40, &v34);
        Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v29);
        v14 = 3;
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      v8 = v11 + 1;
      goto LABEL_31;
    }
    v12 = v10 - v8;
    if (v10 != v8)
      goto LABEL_25;
    ++v8;
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    v9 = v8 == size;
    v14 = 2;
LABEL_31:
    if (v14 == 3)
      break;
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = v18;
    if (!v37.__r_.__value_.__l.__size_)
      goto LABEL_36;
  }
  else
  {
    v5 = v18;
    if (!*((_BYTE *)&v37.__r_.__value_.__s + 23))
    {
LABEL_36:
      if ((_QWORD)v38)
      {
        Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&__p);
        if (sub_20BE791A0(Header + 48, 0))
        {
          LODWORD(v29) = 0;
          v30 = 0;
          LODWORD(v28.__r_.__value_.__l.__data_) = 0;
          LODWORD(v28.__r_.__value_.__r.__words[1]) = 0;
          sub_20BE79604((uint64_t)v19, (uint64_t)&__p, (uint64_t **)&v29, (uint64_t **)&v28);
          Alembic::AbcMaterial::v12::MaterialFlatten::append(v5, v19);
          v19[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C519D28;
          v20 = &unk_24C519D60;
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v27);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v26);
          v60 = (void **)&v25;
          sub_20BDE5038(&v60);
          sub_20BDE9D48((uint64_t)v24, v24[1]);
          sub_20BDE9D48((uint64_t)v23, v23[1]);
          sub_20BDE9D48((uint64_t)v22, v22[1]);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v21);
          Alembic::Abc::v12::IObject::~IObject((void **)&v19[0].__r_.__value_.__l.__data_);
        }
      }
    }
  }
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
LABEL_40:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v52 = &unk_24C519D60;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v59);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v58);
  __p = &v57;
  sub_20BDE5038((void ***)&__p);
  sub_20BDE9D48((uint64_t)v56, v56[1]);
  sub_20BDE9D48((uint64_t)v55, v55[1]);
  sub_20BDE9D48((uint64_t)v54, v54[1]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v53);
  return v5;
}

void sub_20BE7676C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&STACK[0x218]);
  if (SLOBYTE(STACK[0x2EF]) < 0)
    operator delete((void *)STACK[0x2D8]);
  sub_20BE76958((uint64_t)&STACK[0x448]);
  sub_20BE78E5C(a9, *(_QWORD **)(a11 + 64));
  STACK[0x448] = a10;
  sub_20BDE5038((void ***)&STACK[0x448]);
  STACK[0x448] = a11;
  sub_20BE78DD0((void ***)&STACK[0x448]);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcMaterial::v12::MaterialFlatten::append(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= *(_QWORD *)(a1 + 16))
  {
    result = sub_20BE78EE0((uint64_t *)a1, a2);
  }
  else
  {
    sub_20BE78970(*(_QWORD *)(a1 + 8), a2);
    result = v3 + 248;
    *(_QWORD *)(a1 + 8) = v3 + 248;
  }
  *(_QWORD *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

void sub_20BE76950(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20BE76958(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C519D60;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 152));
  v3 = (void **)(a1 + 128);
  sub_20BDE5038(&v3);
  sub_20BDE9D48(a1 + 104, *(_QWORD **)(a1 + 112));
  sub_20BDE9D48(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_20BDE9D48(a1 + 56, *(_QWORD **)(a1 + 64));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 8));
  return a1;
}

BOOL Alembic::AbcMaterial::v12::MaterialFlatten::empty(Alembic::AbcMaterial::v12::MaterialFlatten *this)
{
  return *(_QWORD *)this == *((_QWORD *)this + 1);
}

void Alembic::AbcMaterial::v12::MaterialFlatten::getTargetNames(uint64_t *a1, uint64_t a2)
{
  uint64_t i;
  const void **v5;
  const void **v6;
  const void **v7;
  const void **v8;
  uint64_t v9;
  char **v10;
  char *v11;
  unint64_t v12;
  const void ***v13;

  v11 = 0;
  v12 = 0;
  v10 = &v11;
  for (i = *a1; i != a1[1]; i += 248)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    Alembic::AbcMaterial::v12::IMaterialSchema::getTargetNames(i, (uint64_t)&v7);
    v5 = v7;
    v6 = v8;
    while (v5 != v6)
    {
      sub_20BE7AA28((uint64_t **)&v10, (uint64_t *)&v11, v5, (uint64_t)v5);
      v5 += 3;
    }
    v13 = &v7;
    sub_20BDE5038((void ***)&v13);
  }
  sub_20BDE5078((uint64_t *)a2);
  sub_20BE71C2C((uint64_t *)a2, v12);
  sub_20BE72E18((uint64_t *)a2, *(std::string **)(a2 + 8), v10, &v11);
  sub_20BDECAB8((uint64_t)&v10, v11);
}

void sub_20BE76AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
  sub_20BDECAB8((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::MaterialFlatten::getShaderTypesForTarget(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  const void **v7;
  const void **v8;
  const void **v9;
  const void **v10;
  uint64_t v11;
  char **v12;
  char *v13;
  unint64_t v14;
  const void ***v15;

  v13 = 0;
  v14 = 0;
  v12 = &v13;
  for (i = *a1; i != a1[1]; i += 248)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    Alembic::AbcMaterial::v12::IMaterialSchema::getShaderTypesForTarget(i, a2, (uint64_t)&v9);
    v7 = v9;
    v8 = v10;
    while (v7 != v8)
    {
      sub_20BE7AA28((uint64_t **)&v12, (uint64_t *)&v13, v7, (uint64_t)v7);
      v7 += 3;
    }
    v15 = &v9;
    sub_20BDE5038((void ***)&v15);
  }
  sub_20BDE5078((uint64_t *)a3);
  sub_20BE71C2C((uint64_t *)a3, v14);
  sub_20BE72E18((uint64_t *)a3, *(std::string **)(a3 + 8), v12, &v13);
  sub_20BDECAB8((uint64_t)&v12, v13);
}

void sub_20BE76C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
  sub_20BDECAB8((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcMaterial::v12::MaterialFlatten::getShader(uint64_t *a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  if (*a1 == a1[1])
    return 0;
  do
  {
    result = Alembic::AbcMaterial::v12::IMaterialSchema::getShader(v4, a2, a3, a4);
    if ((_DWORD)result)
      break;
    v4 += 248;
  }
  while (v4 != a1[1]);
  return result;
}

void Alembic::AbcMaterial::v12::MaterialFlatten::getShaderParameters(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t NumProperties;
  unint64_t i;
  const void **PropertyHeader;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *__p[2];
  char v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD v33[3];

  v6 = *a4;
  v7 = a4[1];
  if (v7 != *a4)
  {
    do
    {
      v7 -= 80;
      sub_20BE7AAA8((uint64_t)(a4 + 2), v7);
    }
    while (v7 != v6);
  }
  a4[1] = v6;
  v33[0] = 0;
  v33[1] = 0;
  v32 = v33;
  v8 = *a1;
  if (*a1 == a1[1])
  {
    v16 = 0;
    goto LABEL_28;
  }
  do
  {
    Alembic::AbcMaterial::v12::IMaterialSchema::getShaderParameters(v8, a2, a3, (uint64_t)&v27);
    if (SHIBYTE(v29) < 0)
    {
      if (*((_QWORD *)&v28 + 1))
        goto LABEL_25;
    }
    else if (HIBYTE(v29))
    {
      goto LABEL_25;
    }
    if (v30)
    {
      NumProperties = Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::Abc::v12::ICompoundProperty *)&v27);
      sub_20BE76F40(a4, NumProperties);
      for (i = 0;
            i < Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::Abc::v12::ICompoundProperty *)&v27);
            ++i)
      {
        PropertyHeader = (const void **)Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((Alembic::Abc::v12::ICompoundProperty *)&v27);
        if (v33 == (_QWORD *)sub_20BDEEBA4((uint64_t)&v32, PropertyHeader))
        {
          sub_20BE74FC0(&v32, PropertyHeader, (uint64_t)PropertyHeader);
          v19 = v27;
          if (SHIBYTE(v29) < 0)
          {
            sub_20BDDBFAC(&v20, (void *)v28, *((unint64_t *)&v28 + 1));
          }
          else
          {
            v20 = v28;
            v21 = v29;
          }
          v22 = v30;
          v23 = v31;
          if (v31)
          {
            v12 = (unint64_t *)(v31 + 8);
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
          }
          sub_20BE78C1C((char *)__p, (__int128 *)PropertyHeader, (uint64_t)&v19, (uint64_t)PropertyHeader);
          v14 = a4[1];
          if (v14 >= a4[2])
          {
            v15 = sub_20BE7AE1C(a4, (__int128 *)__p);
          }
          else
          {
            sub_20BE7AF28((uint64_t)(a4 + 2), a4[1], (__int128 *)__p);
            v15 = v14 + 80;
            a4[1] = v14 + 80;
          }
          a4[1] = v15;
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v26);
          if (v25 < 0)
            operator delete(__p[0]);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v19);
        }
      }
    }
LABEL_25:
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v27);
    v8 += 248;
  }
  while (v8 != a1[1]);
  v16 = (char *)v33[0];
LABEL_28:
  sub_20BDECAB8((uint64_t)&v32, v16);
}

void sub_20BE76EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a27);
  sub_20BDECAB8(v27 - 112, *(char **)(v27 - 104));
  _Unwind_Resume(a1);
}

void **sub_20BE76F40(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BE7AB58((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 80 * v6;
    sub_20BE7AAE4(a1, v7);
    return sub_20BE7ADA8(v7);
  }
  return result;
}

void sub_20BE76FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE7ADA8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE76FF0(uint64_t a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void Alembic::AbcMaterial::v12::MaterialFlatten::getNetworkTerminalTargetNames(uint64_t *a1, uint64_t a2)
{
  uint64_t i;
  const void **v5;
  const void **v6;
  const void **v7;
  const void **v8;
  uint64_t v9;
  char **v10;
  char *v11;
  unint64_t v12;
  const void ***v13;

  v11 = 0;
  v12 = 0;
  v10 = &v11;
  for (i = *a1; i != a1[1]; i += 248)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkTerminalTargetNames(i, (uint64_t)&v7);
    v5 = v7;
    v6 = v8;
    while (v5 != v6)
    {
      sub_20BE7AA28((uint64_t **)&v10, (uint64_t *)&v11, v5, (uint64_t)v5);
      v5 += 3;
    }
    v13 = &v7;
    sub_20BDE5038((void ***)&v13);
  }
  sub_20BDE5078((uint64_t *)a2);
  sub_20BE71C2C((uint64_t *)a2, v12);
  sub_20BE72E18((uint64_t *)a2, *(std::string **)(a2 + 8), v10, &v11);
  sub_20BDECAB8((uint64_t)&v10, v11);
}

void sub_20BE77114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
  sub_20BDECAB8((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::MaterialFlatten::getNetworkTerminalShaderTypesForTarget(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t i;
  const void **v7;
  const void **v8;
  const void **v9;
  const void **v10;
  uint64_t v11;
  char **v12;
  char *v13;
  unint64_t v14;
  const void ***v15;

  v13 = 0;
  v14 = 0;
  v12 = &v13;
  for (i = *a1; i != a1[1]; i += 248)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkTerminalShaderTypesForTarget(i, a2, (uint64_t)&v9);
    v7 = v9;
    v8 = v10;
    while (v7 != v8)
    {
      sub_20BE7AA28((uint64_t **)&v12, (uint64_t *)&v13, v7, (uint64_t)v7);
      v7 += 3;
    }
    v15 = &v9;
    sub_20BDE5038((void ***)&v15);
  }
  sub_20BDE5078((uint64_t *)a3);
  sub_20BE71C2C((uint64_t *)a3, v14);
  sub_20BE72E18((uint64_t *)a3, *(std::string **)(a3 + 8), v12, &v13);
  sub_20BDECAB8((uint64_t)&v12, v13);
}

void sub_20BE77240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
  sub_20BDECAB8((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

BOOL Alembic::AbcMaterial::v12::MaterialFlatten::getNetworkTerminal(uint64_t *a1, const void **a2, uint64_t a3, std::string *a4, uint64_t a5)
{
  uint64_t v5;
  _BOOL8 result;

  v5 = *a1;
  if (*a1 == a1[1])
    return 0;
  do
  {
    result = Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkTerminal(v5, a2, a3, a4, a5);
    if (result)
      break;
    v5 += 248;
  }
  while (v5 != a1[1]);
  return result;
}

void Alembic::AbcMaterial::v12::MaterialFlatten::flattenNetwork(Alembic::AbcMaterial::v12::MaterialFlatten *this)
{
  uint64_t *v2;
  Alembic::AbcMaterial::v12::IMaterialSchema *v3;
  const void **i;
  unint64_t v5;
  uint64_t v6;
  unint64_t NumNetworkInterfaceParameterMappings;
  unint64_t j;
  Alembic::AbcMaterial::v12::MaterialFlatten *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  void *__p[2];
  uint64_t v28;
  std::string v29;
  std::string __str;
  const void **v31;
  const void **v32;
  uint64_t v33;
  char **v34;
  char *v35[2];

  if (!*((_BYTE *)this + 24))
  {
    *((_BYTE *)this + 24) = 1;
    v2 = (uint64_t *)((char *)this + 32);
    sub_20BDE5078((uint64_t *)this + 4);
    sub_20BE78E5C((uint64_t)this + 56, *((_QWORD **)this + 8));
    *((_QWORD *)this + 7) = (char *)this + 64;
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 8) = 0;
    v35[0] = 0;
    v35[1] = 0;
    v34 = v35;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    memset(&__str, 0, sizeof(__str));
    memset(&v29, 0, sizeof(v29));
    __p[0] = 0;
    __p[1] = 0;
    v28 = 0;
    v3 = *(Alembic::AbcMaterial::v12::IMaterialSchema **)this;
    if (*(_QWORD *)this != *((_QWORD *)this + 1))
    {
      do
      {
        Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkNodeNames((uint64_t)v3, (uint64_t *)&v31);
        for (i = v31; i != v32; i += 3)
        {
          if (v35 != (char **)sub_20BDEEBA4((uint64_t)&v34, i))
          {
            sub_20BE74FC0((uint64_t **)&v34, i, (uint64_t)i);
            v5 = *((_QWORD *)this + 5);
            if (v5 >= *((_QWORD *)this + 6))
            {
              v6 = sub_20BE4EE50(v2, (__int128 *)i);
            }
            else
            {
              sub_20BE4EDF4(v2, (__int128 *)i);
              v6 = v5 + 24;
            }
            *((_QWORD *)this + 5) = v6;
          }
        }
        NumNetworkInterfaceParameterMappings = Alembic::AbcMaterial::v12::IMaterialSchema::getNumNetworkInterfaceParameterMappings(v3);
        if (NumNetworkInterfaceParameterMappings)
        {
          for (j = 0; j != NumNetworkInterfaceParameterMappings; ++j)
          {
            if (Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkInterfaceParameterMapping((uint64_t)v3, j, &__str, &v29, (uint64_t)__p))
            {
              v26 = 0uLL;
              v9 = (Alembic::AbcMaterial::v12::MaterialFlatten *)sub_20BDEEBA4((uint64_t)this + 56, (const void **)&v29.__r_.__value_.__l.__data_);
              if ((Alembic::AbcMaterial::v12::MaterialFlatten *)((char *)this + 64) == v9)
              {
                v12 = operator new(0x18uLL);
                v12[2] = 0;
                v12[1] = 0;
                *v12 = v12 + 1;
                sub_20BE7AFD8(&v25, (uint64_t)v12);
                v13 = v25;
                v25 = 0uLL;
                v14 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
                v26 = v13;
                if (v14)
                {
                  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
                  do
                    v16 = __ldaxr(p_shared_owners);
                  while (__stlxr(v16 - 1, p_shared_owners));
                  if (!v16)
                  {
                    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                    std::__shared_weak_count::__release_weak(v14);
                  }
                }
                v17 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
                if (*((_QWORD *)&v25 + 1))
                {
                  v18 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
                  do
                    v19 = __ldaxr(v18);
                  while (__stlxr(v19 - 1, v18));
                  if (!v19)
                  {
                    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                    std::__shared_weak_count::__release_weak(v17);
                  }
                }
                *(_QWORD *)&v25 = &v29;
                v11 = sub_20BE7B128((uint64_t **)this + 7, (const void **)&v29.__r_.__value_.__l.__data_, (uint64_t)&unk_20CA52C78, (__int128 **)&v25)+ 7;
                v10 = (uint64_t *)&v26;
              }
              else
              {
                v10 = (uint64_t *)((char *)v9 + 56);
                v11 = (uint64_t *)&v26;
              }
              sub_20BDE881C(v11, v10);
              v20 = sub_20BDEEBA4(v26, (const void **)__p);
              if ((_QWORD)v26 + 8 == v20)
              {
                *(_QWORD *)&v25 = __p;
                v21 = sub_20BDDDFDC((uint64_t **)v26, (const void **)__p, (uint64_t)&unk_20CA52C78, (__int128 **)&v25);
                std::string::operator=((std::string *)(v21 + 7), &__str);
              }
              v22 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
              if (*((_QWORD *)&v26 + 1))
              {
                v23 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
                do
                  v24 = __ldaxr(v23);
                while (__stlxr(v24 - 1, v23));
                if (!v24)
                {
                  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                  std::__shared_weak_count::__release_weak(v22);
                }
              }
            }
          }
        }
        v3 = (Alembic::AbcMaterial::v12::IMaterialSchema *)((char *)v3 + 248);
      }
      while (v3 != *((Alembic::AbcMaterial::v12::IMaterialSchema **)this + 1));
      if (SHIBYTE(v28) < 0)
        operator delete(__p[0]);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
    sub_20BDE5038((void ***)&__str);
    sub_20BDECAB8((uint64_t)&v34, v35[0]);
  }
}

void sub_20BE77638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  uint64_t v32;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  a26 = &a32;
  sub_20BDE5038((void ***)&a26);
  sub_20BDECAB8(v32 - 120, *(char **)(v32 - 112));
  _Unwind_Resume(a1);
}

unint64_t Alembic::AbcMaterial::v12::MaterialFlatten::getNumNetworkNodes(Alembic::AbcMaterial::v12::MaterialFlatten *this)
{
  Alembic::AbcMaterial::v12::MaterialFlatten::flattenNetwork(this);
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3);
}

double Alembic::AbcMaterial::v12::MaterialFlatten::getNetworkNode@<D0>(Alembic::AbcMaterial::v12::MaterialFlatten *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  double result;

  Alembic::AbcMaterial::v12::MaterialFlatten::flattenNetwork(this);
  v6 = *((_QWORD *)this + 4);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 5) - v6) >> 3) <= a2)
  {
    *(_QWORD *)(a3 + 80) = 0;
    result = 0.0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  else
  {
    Alembic::AbcMaterial::v12::MaterialFlatten::getNetworkNode(this, (const void **)(v6 + 24 * a2), (char *)a3);
  }
  return result;
}

double Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::NetworkNode(Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode *this)
{
  double result;

  *((_QWORD *)this + 10) = 0;
  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 10) = 0;
  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

void Alembic::AbcMaterial::v12::MaterialFlatten::getNetworkNode(Alembic::AbcMaterial::v12::MaterialFlatten *a1@<X0>, const void **a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  std::__shared_weak_count *v17;

  Alembic::AbcMaterial::v12::MaterialFlatten::flattenNetwork(a1);
  v16 = 0;
  v17 = 0;
  v6 = sub_20BDEEBA4((uint64_t)a1 + 56, a2);
  if ((Alembic::AbcMaterial::v12::MaterialFlatten *)((char *)a1 + 64) != (Alembic::AbcMaterial::v12::MaterialFlatten *)v6)
    sub_20BDE881C(&v16, (uint64_t *)(v6 + 56));
  v7 = v17;
  v15[0] = v16;
  v15[1] = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::NetworkNode(a3, (uint64_t)a2, (Alembic::AbcMaterial::v12::IMaterialSchema **)a1, v15);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v12 = v17;
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20BE7788C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  _Unwind_Resume(a1);
}

char *Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::NetworkNode(char *__dst, uint64_t a2, Alembic::AbcMaterial::v12::IMaterialSchema **a3, _QWORD *a4)
{
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  Alembic::AbcMaterial::v12::IMaterialSchema *i;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  void **v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[56];
  uint64_t v29;
  _QWORD *v30[4];

  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v8 = *(_OWORD *)a2;
    *((_QWORD *)__dst + 2) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)__dst = v8;
  }
  *(_OWORD *)(__dst + 24) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  *((_QWORD *)__dst + 9) = *a4;
  v9 = a4[1];
  *((_QWORD *)__dst + 10) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  sub_20BE77BAC((uint64_t *)__dst + 3, 0xEF7BDEF7BDEF7BDFLL * ((a3[1] - *a3) >> 3));
  sub_20BE77C68((uint64_t *)__dst + 6, 0xEF7BDEF7BDEF7BDFLL * ((a3[1] - *a3) >> 3));
  for (i = *a3; i != a3[1]; i = (Alembic::AbcMaterial::v12::IMaterialSchema *)((char *)i + 248))
  {
    Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkNode((uint64_t)i, a2, (uint64_t)v28);
    if (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::valid((Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *)v28))
    {
      v13 = *((_QWORD *)__dst + 4);
      if (v13 >= *((_QWORD *)__dst + 5))
      {
        v14 = sub_20BE7B8A8((uint64_t *)__dst + 3, (uint64_t)v28);
      }
      else
      {
        sub_20BE7B564((uint64_t)(__dst + 40), *((_QWORD *)__dst + 4), (uint64_t)v28);
        v14 = v13 + 104;
        *((_QWORD *)__dst + 4) = v13 + 104;
      }
      *((_QWORD *)__dst + 4) = v14;
    }
    Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkInterfaceParameters(i, (uint64_t)&v23);
    if (SHIBYTE(v25) < 0)
    {
      if (!*((_QWORD *)&v24 + 1))
      {
LABEL_17:
        if (v26)
        {
          v15 = *((_QWORD *)__dst + 7);
          if (v15 >= *((_QWORD *)__dst + 8))
          {
            v18 = sub_20BE7B9CC((uint64_t *)__dst + 6, (uint64_t)&v23);
          }
          else
          {
            *(_DWORD *)v15 = (_DWORD)v23;
            v16 = (_BYTE *)(v15 + 8);
            if (SHIBYTE(v25) < 0)
            {
              sub_20BDDBFAC(v16, (void *)v24, *((unint64_t *)&v24 + 1));
            }
            else
            {
              v17 = v24;
              *(_QWORD *)(v15 + 24) = v25;
              *(_OWORD *)v16 = v17;
            }
            *(_QWORD *)(v15 + 32) = v26;
            v19 = v27;
            *(_QWORD *)(v15 + 40) = v27;
            if (v19)
            {
              v20 = (unint64_t *)(v19 + 8);
              do
                v21 = __ldxr(v20);
              while (__stxr(v21 + 1, v20));
            }
            v18 = v15 + 48;
            *((_QWORD *)__dst + 7) = v15 + 48;
          }
          *((_QWORD *)__dst + 7) = v18;
        }
      }
    }
    else if (!HIBYTE(v25))
    {
      goto LABEL_17;
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v23);
    sub_20BDE9D48((uint64_t)v30, v30[1]);
    v23 = (void **)&v29;
    sub_20BDE5038(&v23);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v28);
  }
  return __dst;
}

void sub_20BE77B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 + 56) = v18;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a11);
  sub_20BE77D18((uint64_t)&a17);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(a9);
  a17 = a10;
  sub_20BE7B370((void ***)&a17);
  sub_20BE7B2A4((void ***)&a17);
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(a1);
}

void **sub_20BE77BAC(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0x4EC4EC4EC4EC4EC5 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x276276276276277)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BE7B454((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 104 * v6;
    sub_20BE7B3E0(a1, v7);
    return sub_20BE7B6D4(v7);
  }
  return result;
}

void sub_20BE77C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE7B6D4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE77C68(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BE6D0B4(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 48 * v6;
    sub_20BE7B748(a1, v7);
    return sub_20BE7B85C((uint64_t)v7);
  }
  return result;
}

void sub_20BE77D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE7B85C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BE77D18(uint64_t a1)
{
  void **v2;

  sub_20BDE9D48(a1 + 80, *(_QWORD **)(a1 + 88));
  v2 = (void **)(a1 + 56);
  sub_20BDE5038(&v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)a1);
}

BOOL Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::valid(Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode *this)
{
  return *((_QWORD *)this + 3) != *((_QWORD *)this + 4);
}

char *Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::getName@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  if (this[23] < 0)
    return (char *)sub_20BDDBFAC((_BYTE *)a2, *(void **)this, *((_QWORD *)this + 1));
  *(_OWORD *)a2 = *(_OWORD *)this;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 2);
  return this;
}

uint64_t Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::getTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 == *(_QWORD *)(a1 + 32))
    return 0;
  while (1)
  {
    if (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getTarget(v2, a2))
    {
      v5 = *(unsigned __int8 *)(a2 + 23);
      if ((v5 & 0x80u) != 0)
        v5 = *(_QWORD *)(a2 + 8);
      if (v5)
        break;
    }
    v2 += 104;
    if (v2 == *(_QWORD *)(a1 + 32))
      return 0;
  }
  return 1;
}

uint64_t Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::getNodeType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 == *(_QWORD *)(a1 + 32))
    return 0;
  while (1)
  {
    if (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getNodeType(v2, a2))
    {
      v5 = *(unsigned __int8 *)(a2 + 23);
      if ((v5 & 0x80u) != 0)
        v5 = *(_QWORD *)(a2 + 8);
      if (v5)
        break;
    }
    v2 += 104;
    if (v2 == *(_QWORD *)(a1 + 32))
      return 0;
  }
  return 1;
}

void Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::getParameters(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 **v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t PropertyHeader;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *i;
  unint64_t j;
  const void **v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *__p[2];
  char v42;
  _BYTE v43[56];
  char **v44;
  char *v45[3];

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v4 -= 80;
      sub_20BE7AAA8((uint64_t)(a2 + 2), v4);
    }
    while (v4 != v5);
  }
  a2[1] = v5;
  v45[0] = 0;
  v45[1] = 0;
  v44 = v45;
  v6 = (__int128 **)a1[9];
  if (v6)
  {
    v7 = *v6;
    if (*v6 != (__int128 *)(v6 + 1))
    {
      do
      {
        if (v45 == (char **)sub_20BDEEBA4((uint64_t)&v44, (const void **)v7 + 4))
        {
          v11 = a1[6];
          if (v11 != a1[7])
          {
            while (1)
            {
              PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v11);
              if (PropertyHeader)
                break;
              v11 += 48;
              if (v11 == a1[7])
                goto LABEL_6;
            }
            v36 = *(_DWORD *)v11;
            if (*(char *)(v11 + 31) < 0)
            {
              sub_20BDDBFAC(&v37, *(void **)(v11 + 8), *(_QWORD *)(v11 + 16));
            }
            else
            {
              v13 = *(_OWORD *)(v11 + 8);
              v38 = *(_QWORD *)(v11 + 24);
              v37 = v13;
            }
            v39 = *(_QWORD *)(v11 + 32);
            v14 = *(_QWORD *)(v11 + 40);
            v40 = v14;
            if (v14)
            {
              v15 = (unint64_t *)(v14 + 8);
              do
                v16 = __ldxr(v15);
              while (__stxr(v16 + 1, v15));
            }
            sub_20BE78C1C((char *)__p, v7 + 2, (uint64_t)&v36, PropertyHeader);
            v17 = a2[1];
            if (v17 >= a2[2])
            {
              v18 = sub_20BE7AE1C(a2, (__int128 *)__p);
            }
            else
            {
              sub_20BE7AF28((uint64_t)(a2 + 2), a2[1], (__int128 *)__p);
              v18 = v17 + 80;
              a2[1] = v17 + 80;
            }
            a2[1] = v18;
            Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v43);
            if (v42 < 0)
              operator delete(__p[0]);
            Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v36);
            sub_20BE74FC0((uint64_t **)&v44, (const void **)v7 + 4, (uint64_t)(v7 + 2));
          }
        }
LABEL_6:
        v8 = (__int128 *)*((_QWORD *)v7 + 1);
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = *(__int128 **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (__int128 *)*((_QWORD *)v7 + 2);
            v10 = *(_QWORD *)v9 == (_QWORD)v7;
            v7 = v9;
          }
          while (!v10);
        }
        v7 = v9;
      }
      while (v9 != (__int128 *)(a1[9] + 8));
    }
  }
  for (i = (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *)a1[3];
        i != (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *)a1[4];
        i = (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *)((char *)i + 104))
  {
    Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getParameters(i, (uint64_t)&v31);
    if (SHIBYTE(v33) < 0)
    {
      if (!*((_QWORD *)&v32 + 1))
      {
LABEL_34:
        if (v34)
        {
          for (j = 0;
                j < Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::Abc::v12::ICompoundProperty *)&v31);
                ++j)
          {
            v21 = (const void **)Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((Alembic::Abc::v12::ICompoundProperty *)&v31);
            if (v45 == (char **)sub_20BDEEBA4((uint64_t)&v44, v21))
            {
              sub_20BE74FC0((uint64_t **)&v44, v21, (uint64_t)v21);
              v26 = v31;
              if (SHIBYTE(v33) < 0)
              {
                sub_20BDDBFAC(&v27, (void *)v32, *((unint64_t *)&v32 + 1));
              }
              else
              {
                v27 = v32;
                v28 = v33;
              }
              v29 = v34;
              v30 = v35;
              if (v35)
              {
                v22 = (unint64_t *)(v35 + 8);
                do
                  v23 = __ldxr(v22);
                while (__stxr(v23 + 1, v22));
              }
              sub_20BE78C1C((char *)__p, (__int128 *)v21, (uint64_t)&v26, (uint64_t)v21);
              v24 = a2[1];
              if (v24 >= a2[2])
              {
                v25 = sub_20BE7AE1C(a2, (__int128 *)__p);
              }
              else
              {
                sub_20BE7AF28((uint64_t)(a2 + 2), a2[1], (__int128 *)__p);
                v25 = v24 + 80;
                a2[1] = v24 + 80;
              }
              a2[1] = v25;
              Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v43);
              if (v42 < 0)
                operator delete(__p[0]);
              Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v26);
            }
          }
        }
      }
    }
    else if (!HIBYTE(v33))
    {
      goto LABEL_34;
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v31);
  }
  sub_20BDECAB8((uint64_t)&v44, v45[0]);
}

void sub_20BE7822C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BDECAB8(v1 - 112, *(char **)(v1 - 104));
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::getConnections(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *v6;
  unint64_t NumConnections;
  unint64_t i;
  void *__dst[2];
  char v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  __int128 v15;
  uint64_t v16;
  std::string v17;
  std::string v18;
  char **v19;
  char *v20[2];

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v4 -= 72;
      sub_20BE7BAD8((uint64_t)(a2 + 2), v4);
    }
    while (v4 != v5);
  }
  a2[1] = v5;
  v20[0] = 0;
  v20[1] = 0;
  v19 = v20;
  memset(&v18, 0, sizeof(v18));
  memset(&v17, 0, sizeof(v17));
  v15 = 0uLL;
  v16 = 0;
  v6 = *(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode **)(a1 + 24);
  if (v6 != *(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode **)(a1 + 32))
  {
    do
    {
      NumConnections = Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getNumConnections(v6);
      if (NumConnections)
      {
        for (i = 0; i != NumConnections; ++i)
        {
          if (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getConnection(v6, i, &v18, &v17, (uint64_t)&v15)
            && v20 == (char **)sub_20BDEEBA4((uint64_t)&v19, (const void **)&v18.__r_.__value_.__l.__data_))
          {
            sub_20BE74FC0((uint64_t **)&v19, (const void **)&v18.__r_.__value_.__l.__data_, (uint64_t)&v18);
            sub_20BE78CEC((char *)__dst, (__int128 *)&v18, (__int128 *)&v17, &v15);
            sub_20BE784B8(a2, (__int128 *)__dst);
            if (v14 < 0)
              operator delete(__p);
            if (v12 < 0)
              operator delete(v11);
            if (v10 < 0)
              operator delete(__dst[0]);
          }
        }
      }
      v6 = (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *)((char *)v6 + 104);
    }
    while (v6 != *(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode **)(a1 + 32));
    if (SHIBYTE(v16) < 0)
      operator delete((void *)v15);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  sub_20BDECAB8((uint64_t)&v19, v20[0]);
}

void sub_20BE78454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (*(char *)(v30 - 73) < 0)
    operator delete(*(void **)(v30 - 96));
  sub_20BDECAB8(v30 - 72, *(char **)(v30 - 64));
  _Unwind_Resume(a1);
}

void **sub_20BE784B8(uint64_t *a1, __int128 *a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *v21[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0x38E38E38E38E38ELL)
      sub_20BDDF694();
    v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x1C71C71C71C71C7)
      v15 = 0x38E38E38E38E38ELL;
    else
      v15 = v13;
    v21[4] = result;
    if (v15)
      v16 = (char *)sub_20BE7BBA0((uint64_t)result, v15);
    else
      v16 = 0;
    v17 = &v16[72 * v12];
    v21[0] = v16;
    v21[1] = v17;
    v21[3] = &v16[72 * v15];
    v18 = *a2;
    *((_QWORD *)v17 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v17 = v18;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v19 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v17 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v17 + 24) = v19;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v20 = a2[3];
    *((_QWORD *)v17 + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)v17 + 3) = v20;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    v21[2] = v17 + 72;
    sub_20BE7BB2C(a1, v21);
    v11 = a1[1];
    result = sub_20BE7BD38(v21);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = a2[3];
    *(_QWORD *)(v7 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(v7 + 48) = v10;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    v11 = v7 + 72;
    a1[1] = v7 + 72;
  }
  a1[1] = v11;
  return result;
}

void sub_20BE78654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE7BD38((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE78668(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20BE786B8(uint64_t a1)
{
  void *v2;
  void **v3;

  *(_QWORD *)a1 = off_24C519D28;
  *(_QWORD *)(a1 + 96) = &unk_24C519D60;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 248));
  v3 = (void **)(a1 + 224);
  sub_20BDE5038(&v3);
  sub_20BDE9D48(a1 + 200, *(_QWORD **)(a1 + 208));
  sub_20BDE9D48(a1 + 176, *(_QWORD **)(a1 + 184));
  sub_20BDE9D48(a1 + 152, *(_QWORD **)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
  operator delete(v2);
}

uint64_t sub_20BE78750(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24C519D60;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 160), "");
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  return a1;
}

void sub_20BE78848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Alembic::Abc::v12::ICompoundProperty *v13;
  _QWORD **v14;
  _QWORD **v15;
  _QWORD **v16;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v13);
  sub_20BDE5038((void ***)&a10);
  sub_20BDE9D48(v12, *v16);
  sub_20BDE9D48(v11, *v15);
  sub_20BDE9D48(v10, *v14);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(a9);
  _Unwind_Resume(a1);
}

void sub_20BE7889C(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C519D60;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 152));
  v2 = (void **)(a1 + 128);
  sub_20BDE5038(&v2);
  sub_20BDE9D48((uint64_t)(a1 + 104), *((_QWORD **)a1 + 14));
  sub_20BDE9D48((uint64_t)(a1 + 80), *((_QWORD **)a1 + 11));
  sub_20BDE9D48((uint64_t)(a1 + 56), *((_QWORD **)a1 + 8));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 1);
  operator delete(a1);
}

uint64_t sub_20BE78920(uint64_t a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20BE78948(void **a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20BE78970(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)a1 = &unk_24C519D60;
  sub_20BDEBF8C((uint64_t *)(a1 + 56), (const void ***)(a2 + 56));
  sub_20BDEBF8C((uint64_t *)(a1 + 80), (const void ***)(a2 + 80));
  sub_20BDEBF8C((uint64_t *)(a1 + 104), (const void ***)(a2 + 104));
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BE78B98((char *)(a1 + 128), *(__int128 **)(a2 + 128), *(__int128 **)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3));
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  v9 = (_BYTE *)(a1 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    sub_20BDDBFAC(v9, *(void **)(a2 + 160), *(_QWORD *)(a2 + 168));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  v14 = (_BYTE *)(a1 + 208);
  if (*(char *)(a2 + 231) < 0)
  {
    sub_20BDDBFAC(v14, *(void **)(a2 + 208), *(_QWORD *)(a2 + 216));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_OWORD *)v14 = v15;
  }
  v16 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  return a1;
}

void sub_20BE78B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD **v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Alembic::Abc::v12::ICompoundProperty *v15;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v15);
  sub_20BDE5038((void ***)&a10);
  sub_20BDE9D48(v14, v10[14]);
  sub_20BDE9D48(v13, v10[11]);
  sub_20BDE9D48(v12, v10[8]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v11);
  _Unwind_Resume(a1);
}

char *sub_20BE78B98(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_20BDE4FA4(result, a4);
    result = sub_20BE759C4((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_20BE78BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BDE5038(&a9);
  _Unwind_Resume(a1);
}

char *sub_20BE78C1C(char *__dst, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  _BYTE *v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v7;
  }
  *((_DWORD *)__dst + 6) = *(_DWORD *)a3;
  v8 = __dst + 32;
  if (*(char *)(a3 + 31) < 0)
  {
    sub_20BDDBFAC(v8, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v9 = *(_OWORD *)(a3 + 8);
    *((_QWORD *)__dst + 6) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)v8 = v9;
  }
  v10 = *(_QWORD *)(a3 + 40);
  *((_QWORD *)__dst + 7) = *(_QWORD *)(a3 + 32);
  *((_QWORD *)__dst + 8) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *((_QWORD *)__dst + 9) = a4;
  return __dst;
}

void sub_20BE78CD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20BE78CEC(char *__dst, __int128 *a2, __int128 *a3, __int128 *a4)
{
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(__dst + 24, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v8;
  }
  v9 = __dst + 48;
  if (*((char *)a4 + 23) < 0)
  {
    sub_20BDDBFAC(v9, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v10 = *a4;
    *((_QWORD *)__dst + 8) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v9 = v10;
  }
  return __dst;
}

void sub_20BE78D9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20BE78DD0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 248;
      v7 = v4 - 248;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 248;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20BE78E5C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20BE78E5C(a1, *a2);
    sub_20BE78E5C(a1, a2[1]);
    sub_20BE78EA4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20BE78EA4(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20BE78EE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x108421084210842)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xEF7BDEF7BDEF7BDFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x84210842108421)
    v9 = 0x108421084210842;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE79070(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[248 * v4];
  v16 = &v10[248 * v9];
  sub_20BE78970((uint64_t)v14, a2);
  v15 = v14 + 248;
  sub_20BE78FFC(a1, &v13);
  v11 = a1[1];
  sub_20BE79150((uint64_t)&v13);
  return v11;
}

void sub_20BE78FE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE79150((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE78FFC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BE790B8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20BE79070(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x108421084210843)
    sub_20BDDF5B4();
  return operator new(248 * a2);
}

uint64_t sub_20BE790B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 248;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 248;
    sub_20BE78970(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_20BE79150(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 248);
    *(_QWORD *)(a1 + 16) = i - 248;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20BE791A0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  std::string::size_type size;
  char v6;
  std::string *v7;
  unsigned __int8 *v8;
  _BOOL8 v11;
  void *v12;
  unsigned __int8 v15;
  size_t v16;
  std::string::size_type v17;
  int v18;
  std::string *p_p;
  uint64_t v20;
  void **p_s1;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  std::string __p;
  void *v30[2];
  char v31;
  void *__s1;
  size_t __n;
  unsigned __int8 v34;
  std::string v35;
  const void *v36[2];
  char v37;
  _QWORD *v38;
  _BYTE v39[15];
  unsigned __int8 v40;

  if (a2 == 2)
  {
    sub_20BDDC0E4(v36, "schema");
    sub_20BE01E1C(a1, v36, &v38);
    if (((char)v40 & 0x80000000) == 0)
    {
      v11 = v40 == 23
         && v38 == (_QWORD *)0x726574614D636241
         && *(_QWORD *)v39 == 0x6574614D5F6C6169
         && *(_QWORD *)&v39[7] == 0x31765F6C61697265;
      goto LABEL_78;
    }
    v12 = v38;
    v11 = *(_QWORD *)v39 == 23
       && *v38 == 0x726574614D636241
       && v38[1] == 0x6574614D5F6C6169
       && *(_QWORD *)((char *)v38 + 15) == 0x31765F6C61697265;
    goto LABEL_77;
  }
  if (a2 == 1)
    return 1;
  if (a2)
    return 0;
  sub_20BDDC0E4(v36, "schemaObjTitle");
  sub_20BE01E1C(a1, v36, &v38);
  sub_20BE79528(&v35);
  v3 = v40;
  if ((v40 & 0x80u) == 0)
    v4 = v40;
  else
    v4 = *(_QWORD *)v39;
  size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v35.__r_.__value_.__l.__size_;
  if (v4 != size)
  {
LABEL_45:
    sub_20BDDC0E4(v30, "schema");
    sub_20BE01E1C(a1, (const void **)v30, &__s1);
    sub_20BE79528(&__p);
    v15 = v34;
    if ((v34 & 0x80u) == 0)
      v16 = v34;
    else
      v16 = __n;
    v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = __p.__r_.__value_.__l.__size_;
    if (v16 != v17)
    {
      v11 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_69;
      goto LABEL_64;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((char)v34 < 0)
    {
      v11 = memcmp(__s1, p_p, __n) == 0;
    }
    else
    {
      if (!v34)
      {
        v11 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_69:
          if ((v15 & 0x80) != 0)
            operator delete(__s1);
          if (v31 < 0)
            operator delete(v30[0]);
          if ((*((_BYTE *)&v35.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_75;
          goto LABEL_74;
        }
LABEL_64:
        operator delete(__p.__r_.__value_.__l.__data_);
        v15 = v34;
        goto LABEL_69;
      }
      v20 = v34 - 1;
      p_s1 = &__s1;
      do
      {
        v23 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        v22 = v23;
        v25 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        v24 = v25;
        v27 = v20-- != 0;
        v11 = v22 == v24;
      }
      while (v22 == v24 && v27);
    }
    if ((v18 & 0x80000000) == 0)
      goto LABEL_69;
    goto LABEL_64;
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v35;
  else
    v7 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v40 & 0x80) != 0)
  {
    if (memcmp(v38, v7, *(size_t *)v39))
      goto LABEL_45;
  }
  else if (v40)
  {
    v8 = (unsigned __int8 *)&v38;
    while (*v8 == v7->__r_.__value_.__s.__data_[0])
    {
      ++v8;
      v7 = (std::string *)((char *)v7 + 1);
      if (!--v3)
        goto LABEL_65;
    }
    goto LABEL_45;
  }
LABEL_65:
  v11 = 1;
  if (v6 < 0)
LABEL_74:
    operator delete(v35.__r_.__value_.__l.__data_);
LABEL_75:
  if (((char)v40 & 0x80000000) == 0)
    goto LABEL_78;
  v12 = v38;
LABEL_77:
  operator delete(v12);
LABEL_78:
  if (v37 < 0)
    operator delete((void *)v36[0]);
  return v11;
}

void sub_20BE794A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(exception_object);
}

void sub_20BE79528(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_20BDDC0E4(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcMaterial_Material_v1");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".material");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_20BE795D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE79604(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t Header;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string *v21;
  std::string::size_type size;
  _QWORD *exception;
  _QWORD *v24;
  uint64_t *v25;
  int v26;
  uint64_t *v27;
  int v28;
  uint64_t *v29;
  int v30;
  void *v31;
  uint64_t v32;
  unsigned __int8 v33;
  std::string v34;
  void *__p[2];
  char v36;
  uint64_t *v37;
  void *v38;
  std::string v39;
  uint64_t v40;
  _QWORD v41[3];
  _QWORD v42[3];
  _QWORD v43[3];
  __int128 v44;
  uint64_t v45;
  int v46;
  std::string v47;
  uint64_t v48;
  int v49;
  std::string v50;
  uint64_t v51[8];
  _BYTE v52[96];
  void **v53;

  v8 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v8 = off_24C519D28;
  sub_20BE78750((uint64_t)(v8 + 12));
  v9 = sub_20BE04EB0((uint64_t)v52, a2);
  LODWORD(v37) = 0;
  LODWORD(v38) = 0;
  LODWORD(v31) = 0;
  LODWORD(v32) = 0;
  *(_DWORD *)(a1 + 8) = sub_20BE04D74(v9, a3, a4, &v37, (uint64_t **)&v31);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v52);
  v51[6] = a1 + 8;
  v51[7] = (uint64_t)"ISchemaObject::ISchemaObject( wrap)";
  Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)a1);
  LODWORD(v37) = 0;
  LODWORD(v38) = 0;
  LODWORD(v31) = 0;
  LODWORD(v32) = 0;
  v11 = sub_20BE6DA40(a3, a4, &v37, (uint64_t **)&v31);
  v12 = Header + 48;
  if ((sub_20BE791A0(v12, v11) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v37);
    v16 = sub_20BDDC1C8(&v39, (uint64_t)"Incorrect match of schema: ", 27);
    sub_20BDDC0E4(__p, "schemaObjTitle");
    sub_20BE01E1C(v12, (const void **)__p, &v31);
    if ((v33 & 0x80u) == 0)
      v17 = &v31;
    else
      v17 = v31;
    if ((v33 & 0x80u) == 0)
      v18 = v33;
    else
      v18 = v32;
    v19 = sub_20BDDC1C8(v16, (uint64_t)v17, v18);
    v20 = sub_20BDDC1C8(v19, (uint64_t)" to expected: ", 14);
    sub_20BE79528(&v34);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v34;
    else
      v21 = (std::string *)v34.__r_.__value_.__r.__words[0];
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    else
      size = v34.__r_.__value_.__l.__size_;
    sub_20BDDC1C8(v20, (uint64_t)v21, size);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if ((char)v33 < 0)
      operator delete(v31);
    if (v36 < 0)
      operator delete(__p[0]);
    std::stringbuf::str();
    sub_20BDDBF20(&v31, (__int128 *)__p);
    if (v36 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v24 = sub_20BDDC09C(exception, (uint64_t)&v31);
    __cxa_throw(v24, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)a1, (uint64_t)&v31);
  sub_20BDDC0E4(__p, ".material");
  v13 = *(_DWORD *)(a1 + 8);
  LODWORD(v34.__r_.__value_.__l.__data_) = 1;
  LODWORD(v34.__r_.__value_.__r.__words[1]) = v13;
  LODWORD(v27) = 0;
  v28 = 0;
  LODWORD(v25) = 0;
  v26 = 0;
  v14 = sub_20BE6DA40(a3, a4, &v27, &v25);
  LODWORD(v29) = 5;
  v30 = v14;
  sub_20BE79B9C((uint64_t)&v37, (uint64_t)&v31, (uint64_t)__p, (uint64_t **)&v34, &v29);
  *(_DWORD *)(a1 + 104) = (_DWORD)v38;
  std::string::operator=((std::string *)(a1 + 112), &v39);
  sub_20BDE881C((_QWORD *)(a1 + 136), &v40);
  sub_20BE7A460(a1 + 152, v41);
  sub_20BE7A460(a1 + 176, v42);
  sub_20BE7A460(a1 + 200, v43);
  sub_20BE7598C((uint64_t *)(a1 + 224));
  *(_OWORD *)(a1 + 224) = v44;
  *(_QWORD *)(a1 + 240) = v45;
  v45 = 0;
  v44 = 0uLL;
  *(_DWORD *)(a1 + 248) = v46;
  std::string::operator=((std::string *)(a1 + 256), &v47);
  sub_20BDE881C((_QWORD *)(a1 + 280), &v48);
  *(_DWORD *)(a1 + 296) = v49;
  std::string::operator=((std::string *)(a1 + 304), &v50);
  sub_20BDE881C((_QWORD *)(a1 + 328), v51);
  v37 = (uint64_t *)&unk_24C519D60;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v49);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v46);
  v53 = (void **)&v44;
  sub_20BDE5038(&v53);
  sub_20BDE9D48((uint64_t)v43, (_QWORD *)v43[1]);
  sub_20BDE9D48((uint64_t)v42, (_QWORD *)v42[1]);
  sub_20BDE9D48((uint64_t)v41, (_QWORD *)v41[1]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v38);
  if (v36 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v31);
  return a1;
}

void sub_20BE799E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  Alembic::Abc::v12::IObject *v36;
  uint64_t v37;
  void *v40;
  uint64_t v41;

  sub_20BDDC194((std::exception *)&a15);
  sub_20BDDBE98((uint64_t)&a36);
  v40 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v41 = (uint64_t)v40;
    sub_20BE79B64(v36);
    sub_20BE02570(v37 - 200, v41);
  }
  else
  {
    sub_20BE79B64(v36);
    sub_20BE02504(v37 - 200, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE79890);
}

void sub_20BE79B48()
{
  __cxa_end_catch();
  JUMPOUT(0x20BE79A94);
}

void sub_20BE79B54()
{
  __cxa_end_catch();
  JUMPOUT(0x20BE79A94);
}

void sub_20BE79B64(Alembic::Abc::v12::IObject *a1)
{
  sub_20BDEBF08((_QWORD *)a1 + 17);
  MEMORY[0x212B929D0]((char *)a1 + 112, "");
  Alembic::Abc::v12::IObject::reset(a1);
}

uint64_t sub_20BE79B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v6;

  v6 = sub_20BE79CE4(a1, a2, a3, a4, a5);
  *(_QWORD *)v6 = &unk_24C519D60;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 56) = v6 + 64;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 80) = v6 + 88;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 104) = v6 + 112;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 144) = 0;
  *(_DWORD *)(v6 + 152) = 2;
  sub_20BDDC0E4((_QWORD *)(v6 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  Alembic::AbcMaterial::v12::IMaterialSchema::init((Alembic::AbcMaterial::v12::IMaterialSchema *)a1);
  return a1;
}

void sub_20BE79C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Alembic::Abc::v12::ICompoundProperty *v14;
  Alembic::Abc::v12::ICompoundProperty *v15;
  Alembic::Abc::v12::ICompoundProperty *v16;

  v16 = v15;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v16);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v14);
  sub_20BDE5038((void ***)&a10);
  sub_20BDE9D48(v13, *(_QWORD **)(v10 + 112));
  sub_20BDE9D48(v12, *(_QWORD **)(v10 + 88));
  sub_20BDE9D48(v11, *(_QWORD **)(v10 + 64));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(v10 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20BE79CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C519DC0;
  sub_20BE79D7C(a1, a2, a3, a4, a5);
  return a1;
}

void sub_20BE79D68(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_20BE79D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *exception;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  void *__p[2];
  char v41;
  void *v42[2];
  unsigned __int8 v43;
  __int128 v44;
  _QWORD v45[37];
  int v46;
  uint64_t v47[4];
  std::__shared_weak_count *v48;
  int v49;
  uint64_t v50;

  *((_QWORD *)&v44 + 1) = 0;
  v45[0] = 0;
  *(_QWORD *)&v44 = (char *)&v44 + 8;
  v45[35] = 0;
  v45[36] = 0;
  v46 = 2;
  sub_20BDEBF8C(v47, (const void ***)&v44);
  v47[3] = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  sub_20BDE9D48((uint64_t)&v44, *((_QWORD **)&v44 + 1));
  sub_20BE02E30(a4, (uint64_t)&v46);
  sub_20BE02E30(a5, (uint64_t)&v46);
  *(_DWORD *)(a1 + 8) = v46;
  v45[33] = a1 + 8;
  v45[34] = "ISchema::ISchema::init()";
  if (*(char *)(a2 + 31) < 0)
  {
    if (*(_QWORD *)(a2 + 16))
      goto LABEL_27;
  }
  else if (*(_BYTE *)(a2 + 31))
  {
LABEL_27:
    sub_20BDDBD68((uint64_t)&v44);
    sub_20BDDC1C8(v45, (uint64_t)"NULL parent passed into ISchema ctor", 36);
    std::stringbuf::str();
    sub_20BDDBF20(v42, (__int128 *)__p);
    if (v41 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v25 = sub_20BDDC09C(exception, (uint64_t)v42);
    __cxa_throw(v25, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v10 = *(_QWORD *)(a2 + 32);
  if (!v10)
    goto LABEL_27;
  v11 = *(std::__shared_weak_count **)(a2 + 40);
  v39 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 80))(v10, a3);
  if (!v14)
  {
    sub_20BDDBD68((uint64_t)&v44);
    v26 = sub_20BDDC1C8(v45, (uint64_t)"Nonexistent compound property: ", 31);
    v27 = *(char *)(a3 + 23);
    if (v27 >= 0)
      v28 = a3;
    else
      v28 = *(_QWORD *)a3;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a3 + 23);
    else
      v29 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v26, v28, v29);
    std::stringbuf::str();
    sub_20BDDBF20(v42, (__int128 *)__p);
    if (v41 < 0)
      operator delete(__p[0]);
    v30 = __cxa_allocate_exception(0x20uLL);
    v31 = sub_20BDDC09C(v30, (uint64_t)v42);
    __cxa_throw(v31, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = v14 + 32;
  if ((sub_20BE7A308(v14 + 32, v50) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v44);
    v32 = sub_20BDDC1C8(v45, (uint64_t)"Incorrect match of schema: ", 27);
    sub_20BDDC0E4(__p, "schema");
    sub_20BE01E1C(v15, (const void **)__p, v42);
    if ((v43 & 0x80u) == 0)
      v33 = v42;
    else
      v33 = (void **)v42[0];
    if ((v43 & 0x80u) == 0)
      v34 = v43;
    else
      v34 = (uint64_t)v42[1];
    v35 = sub_20BDDC1C8(v32, (uint64_t)v33, v34);
    v36 = sub_20BDDC1C8(v35, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v36, (uint64_t)"AbcMaterial_Material_v1", 23);
    if ((char)v43 < 0)
      operator delete(v42[0]);
    if (v41 < 0)
      operator delete(__p[0]);
    std::stringbuf::str();
    sub_20BDDBF20(v42, (__int128 *)__p);
    if (v41 < 0)
      operator delete(__p[0]);
    v37 = __cxa_allocate_exception(0x20uLL);
    v38 = sub_20BDDC09C(v37, (uint64_t)v42);
    __cxa_throw(v38, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(&v44, v10, a3);
  sub_20BDE82DC(a1 + 40, &v44);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v39)
  {
    v19 = (unint64_t *)&v39->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v21 = v48;
  if (v48)
  {
    v22 = (unint64_t *)&v48->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  sub_20BDE9D48((uint64_t)v47, (_QWORD *)v47[1]);
}

void sub_20BE7A18C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  void *v29;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  v29 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v25 + 40));
  MEMORY[0x212B929D0](v25 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v26 - 160, (uint64_t)v29);
  else
    sub_20BE02504(v26 - 160, 0);
  __cxa_end_catch();
  JUMPOUT(0x20BE79F2CLL);
}

void sub_20BE7A2D0()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 128);
  JUMPOUT(0x20BE7A300);
}

uint64_t sub_20BE7A308(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v10;
  _QWORD *v11;
  _BYTE v12[15];
  char v13;

  if (a2 == 1)
    return 1;
  if ((a2 & 0xFFFFFFFD) != 0)
    return 0;
  sub_20BDDC0E4(__p, "schema");
  sub_20BE01E1C(a1, (const void **)__p, &v11);
  if (v13 < 0)
  {
    v2 = *(_QWORD *)v12 == 23
      && *v11 == 0x726574614D636241
      && v11[1] == 0x6574614D5F6C6169
      && *(_QWORD *)((char *)v11 + 15) == 0x31765F6C61697265;
    operator delete(v11);
  }
  else
  {
    v2 = v13 == 23
      && v11 == (_QWORD *)0x726574614D636241
      && *(_QWORD *)v12 == 0x6574614D5F6C6169
      && *(_QWORD *)&v12[7] == 0x31765F6C61697265;
  }
  if (v10 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20BE7A444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BE7A460(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  sub_20BDE9D48(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

uint64_t sub_20BE7A4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t Header;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type size;
  _QWORD *exception;
  _QWORD *v25;
  uint64_t *v26;
  int v27;
  uint64_t *v28;
  int v29;
  uint64_t *v30;
  int v31;
  void *v32;
  uint64_t v33;
  unsigned __int8 v34;
  std::string v35;
  void *__p[2];
  char v37;
  uint64_t *v38;
  void *v39;
  std::string v40;
  uint64_t v41;
  _QWORD v42[3];
  _QWORD v43[3];
  _QWORD v44[3];
  __int128 v45;
  uint64_t v46;
  int v47;
  std::string v48;
  uint64_t v49;
  int v50;
  std::string v51;
  uint64_t v52[8];
  _BYTE v53[96];
  void **v54;

  v9 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v9 = off_24C519D28;
  sub_20BE78750((uint64_t)(v9 + 12));
  v10 = sub_20BE04EB0((uint64_t)v53, a2);
  LODWORD(v38) = 0;
  LODWORD(v39) = 0;
  LODWORD(v32) = 0;
  LODWORD(v33) = 0;
  *(_DWORD *)(a1 + 8) = sub_20BE04D74(v10, a4, a5, &v38, (uint64_t **)&v32);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v53);
  v52[6] = a1 + 8;
  v52[7] = (uint64_t)"ISchemaObject::ISchemaObject( wrapflag)";
  Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)a1);
  LODWORD(v38) = 0;
  LODWORD(v39) = 0;
  LODWORD(v32) = 0;
  LODWORD(v33) = 0;
  v12 = sub_20BE6DA40(a4, a5, &v38, (uint64_t **)&v32);
  v13 = Header + 48;
  if ((sub_20BE791A0(v13, v12) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v38);
    v17 = sub_20BDDC1C8(&v40, (uint64_t)"Incorrect match of schema: ", 27);
    sub_20BDDC0E4(__p, "schemaObjTitle");
    sub_20BE01E1C(v13, (const void **)__p, &v32);
    if ((v34 & 0x80u) == 0)
      v18 = &v32;
    else
      v18 = v32;
    if ((v34 & 0x80u) == 0)
      v19 = v34;
    else
      v19 = v33;
    v20 = sub_20BDDC1C8(v17, (uint64_t)v18, v19);
    v21 = sub_20BDDC1C8(v20, (uint64_t)" to expected: ", 14);
    sub_20BE79528(&v35);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v35;
    else
      v22 = (std::string *)v35.__r_.__value_.__r.__words[0];
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    else
      size = v35.__r_.__value_.__l.__size_;
    sub_20BDDC1C8(v21, (uint64_t)v22, size);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if ((char)v34 < 0)
      operator delete(v32);
    if (v37 < 0)
      operator delete(__p[0]);
    std::stringbuf::str();
    sub_20BDDBF20(&v32, (__int128 *)__p);
    if (v37 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v25 = sub_20BDDC09C(exception, (uint64_t)&v32);
    __cxa_throw(v25, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)a1, (uint64_t)&v32);
  sub_20BDDC0E4(__p, ".material");
  v14 = *(_DWORD *)(a1 + 8);
  LODWORD(v35.__r_.__value_.__l.__data_) = 1;
  LODWORD(v35.__r_.__value_.__r.__words[1]) = v14;
  LODWORD(v28) = 0;
  v29 = 0;
  LODWORD(v26) = 0;
  v27 = 0;
  v15 = sub_20BE6DA40(a4, a5, &v28, &v26);
  LODWORD(v30) = 5;
  v31 = v15;
  sub_20BE79B9C((uint64_t)&v38, (uint64_t)&v32, (uint64_t)__p, (uint64_t **)&v35, &v30);
  *(_DWORD *)(a1 + 104) = (_DWORD)v39;
  std::string::operator=((std::string *)(a1 + 112), &v40);
  sub_20BDE881C((_QWORD *)(a1 + 136), &v41);
  sub_20BE7A460(a1 + 152, v42);
  sub_20BE7A460(a1 + 176, v43);
  sub_20BE7A460(a1 + 200, v44);
  sub_20BE7598C((uint64_t *)(a1 + 224));
  *(_OWORD *)(a1 + 224) = v45;
  *(_QWORD *)(a1 + 240) = v46;
  v46 = 0;
  v45 = 0uLL;
  *(_DWORD *)(a1 + 248) = v47;
  std::string::operator=((std::string *)(a1 + 256), &v48);
  sub_20BDE881C((_QWORD *)(a1 + 280), &v49);
  *(_DWORD *)(a1 + 296) = v50;
  std::string::operator=((std::string *)(a1 + 304), &v51);
  sub_20BDE881C((_QWORD *)(a1 + 328), v52);
  v38 = (uint64_t *)&unk_24C519D60;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v50);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v47);
  v54 = (void **)&v45;
  sub_20BDE5038(&v54);
  sub_20BDE9D48((uint64_t)v44, (_QWORD *)v44[1]);
  sub_20BDE9D48((uint64_t)v43, (_QWORD *)v43[1]);
  sub_20BDE9D48((uint64_t)v42, (_QWORD *)v42[1]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v39);
  if (v37 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v32);
  return a1;
}

void sub_20BE7A8A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  Alembic::Abc::v12::IObject *v36;
  uint64_t v37;
  void *v40;
  uint64_t v41;

  sub_20BDDC194((std::exception *)&a15);
  sub_20BDDBE98((uint64_t)&a36);
  v40 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v41 = (uint64_t)v40;
    sub_20BE79B64(v36);
    sub_20BE02570(v37 - 200, v41);
  }
  else
  {
    sub_20BE79B64(v36);
    sub_20BE02504(v37 - 200, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20BE7A754);
}

void sub_20BE7AA0C()
{
  __cxa_end_catch();
  JUMPOUT(0x20BE7A958);
}

void sub_20BE7AA18()
{
  __cxa_end_catch();
  JUMPOUT(0x20BE7A958);
}

uint64_t *sub_20BE7AA28(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)sub_20BDEC0F8(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_20BE7503C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void sub_20BE7AAA8(uint64_t a1, uint64_t a2)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t sub_20BE7AAE4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BE7AB9C((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20BE7AB58(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    sub_20BDDF5B4();
  return operator new(80 * a2);
}

uint64_t sub_20BE7AB9C(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 *v9;
  int v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    v10 = a1;
    do
    {
      v9 -= 5;
      sub_20BE7AC64(v10, (_QWORD *)(v7 - 80), v9);
      v7 = *((_QWORD *)&v16 + 1) - 80;
      *((_QWORD *)&v16 + 1) -= 80;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20BE7AD24((uint64_t)v13);
  return v11;
}

void sub_20BE7AC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE7AD24((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_20BE7AC64(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v5;
  _BYTE *result;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    __dst[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a3 + 6);
  result = __dst + 4;
  if (*((char *)a3 + 55) < 0)
  {
    result = sub_20BDDBFAC(result, *((void **)a3 + 4), *((_QWORD *)a3 + 5));
  }
  else
  {
    v7 = a3[2];
    __dst[6] = *((_QWORD *)a3 + 6);
    *(_OWORD *)result = v7;
  }
  v8 = *((_QWORD *)a3 + 8);
  __dst[7] = *((_QWORD *)a3 + 7);
  __dst[8] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  __dst[9] = *((_QWORD *)a3 + 9);
  return result;
}

void sub_20BE7AD08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE7AD24(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BE7AD58((uint64_t *)a1);
  return a1;
}

void sub_20BE7AD58(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20BE7AAA8(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **sub_20BE7ADA8(void **a1)
{
  sub_20BE7ADD8(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20BE7ADD8(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 80;
    sub_20BE7AAA8(v4, i - 80);
  }
}

uint64_t sub_20BE7AE1C(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_20BDDF694();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_20BE7AB58((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[80 * v3];
  v13 = &v7[80 * v6];
  sub_20BE7AF28((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 80;
  sub_20BE7AAE4(a1, &v10);
  v8 = a1[1];
  sub_20BE7ADA8(&v10);
  return v8;
}

void sub_20BE7AF14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE7ADA8((void **)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_20BE7AF28(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *result;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v5 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v5;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
  result = (_BYTE *)(a2 + 32);
  if (*((char *)a3 + 55) < 0)
  {
    result = sub_20BDDBFAC(result, *((void **)a3 + 4), *((_QWORD *)a3 + 5));
  }
  else
  {
    v7 = a3[2];
    *(_QWORD *)(a2 + 48) = *((_QWORD *)a3 + 6);
    *(_OWORD *)result = v7;
  }
  v8 = *((_QWORD *)a3 + 8);
  *(_QWORD *)(a2 + 56) = *((_QWORD *)a3 + 7);
  *(_QWORD *)(a2 + 64) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a2 + 72) = *((_QWORD *)a3 + 9);
  return result;
}

void sub_20BE7AFBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BE7AFD8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD **v6;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C519DE0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  sub_20BE7B0E8(&v6, 0);
  return a1;
}

void sub_20BE7B03C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE7B0E8((_QWORD ***)va, 0);
  _Unwind_Resume(a1);
}

void sub_20BE7B058(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BE7B06C(uint64_t a1)
{
  sub_20BE7B0B4(a1 + 24, *(_QWORD ***)(a1 + 24));
}

uint64_t sub_20BE7B074(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C519E30))
    return a1 + 24;
  else
    return 0;
}

void sub_20BE7B0B4(uint64_t a1, _QWORD **a2)
{
  if (a2)
  {
    sub_20BDE9D48((uint64_t)a2, a2[1]);
    operator delete(a2);
  }
}

void sub_20BE7B0E8(_QWORD ***a1, _QWORD **a2)
{
  _QWORD **v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_20BDE9D48((uint64_t)v2, v2[1]);
    operator delete(v2);
  }
}

uint64_t *sub_20BE7B128(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20BE7B1D0((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20BE7B260((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_20BE7B1D0@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20BE7B248(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE7B260(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20BE7B260(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BE78EA4((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20BE7B2A4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        sub_20BE7B328((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20BE7B328(uint64_t a1, uint64_t a2)
{
  void **v3;

  sub_20BDE9D48(a2 + 80, *(_QWORD **)(a2 + 88));
  v3 = (void **)(a2 + 56);
  sub_20BDE5038(&v3);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)a2);
}

void sub_20BE7B370(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v4 - 48));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20BE7B3E0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BE7B49C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20BE7B454(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277)
    sub_20BDDF5B4();
  return operator new(104 * a2);
}

uint64_t sub_20BE7B49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 104;
      sub_20BE7B564(a1, v7 - 104, v9);
      v7 = *((_QWORD *)&v16 + 1) - 104;
      *((_QWORD *)&v16 + 1) -= 104;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20BE7B650((uint64_t)v13);
  return v11;
}

void sub_20BE7B550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE7B650((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BE7B564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  char v10;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v5 = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_20BDDBFAC(v5, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)v5 = v6;
  }
  v7 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 40) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_BYTE *)(a3 + 48);
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 48) = v10;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  sub_20BE78B98((char *)(a2 + 56), *(__int128 **)(a3 + 56), *(__int128 **)(a3 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 3));
  return sub_20BDEBF8C((uint64_t *)(a2 + 80), (const void ***)(a3 + 80));
}

void sub_20BE7B628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  Alembic::Abc::v12::ICompoundProperty *v2;
  va_list va;

  va_start(va, a2);
  sub_20BDE5038((void ***)va);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE7B650(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BE7B684((uint64_t *)a1);
  return a1;
}

void sub_20BE7B684(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20BE7B328(v3, v1);
      v1 += 104;
    }
    while (v1 != v2);
  }
}

void **sub_20BE7B6D4(void **a1)
{
  sub_20BE7B704(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20BE7B704(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 104;
    sub_20BE7B328(v4, i - 104);
  }
}

uint64_t sub_20BE7B748(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BE7B7BC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BE7B7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = a7 - 48;
  while (a3 + v11 != a5)
  {
    v13 = v12 + v11;
    v11 -= 48;
    sub_20BE6CFCC(a1, v13, v11 + a3);
  }
  return a6;
}

uint64_t sub_20BE7B85C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(i - 48));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20BE7B8A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276)
    sub_20BDDF694();
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL)
    v6 = 0x276276276276276;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_20BE7B454((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[104 * v3];
  v13 = &v7[104 * v6];
  sub_20BE7B564((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 104;
  sub_20BE7B3E0(a1, &v10);
  v8 = a1[1];
  sub_20BE7B6D4(&v10);
  return v8;
}

void sub_20BE7B9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE7B6D4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE7B9CC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_20BDDF694();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_20BE6D0B4((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[48 * v3];
  v13 = &v7[48 * v6];
  sub_20BE6CFCC((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 48;
  sub_20BE7B748(a1, &v10);
  v8 = a1[1];
  sub_20BE7B85C((uint64_t)&v10);
  return v8;
}

void sub_20BE7BAC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE7B85C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BE7BAD8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t sub_20BE7BB2C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BE7BBE8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20BE7BBA0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    sub_20BDDF5B4();
  return operator new(72 * a2);
}

uint64_t sub_20BE7BBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 72);
      *(_QWORD *)(v9 - 56) = *(_QWORD *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v10;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 72) = 0;
      v11 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v11;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v12 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 72;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    *((_QWORD *)&v17 + 1) = v9;
  }
  v15 = 1;
  sub_20BE7BCB4((uint64_t)v14);
  return a6;
}

uint64_t sub_20BE7BCB4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BE7BCE8((uint64_t *)a1);
  return a1;
}

void sub_20BE7BCE8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20BE7BAD8(v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **sub_20BE7BD38(void **a1)
{
  sub_20BE7BD68(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20BE7BD68(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 72;
    sub_20BE7BAD8(v4, i - 72);
  }
}

uint64_t Alembic::AbcMaterial::v12::getMaterialAssignmentPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t MaterialAssignmentPath;
  _BYTE v7[48];

  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(_QWORD *)(a1 + 24))
      goto LABEL_5;
    return 0;
  }
  if (*(_BYTE *)(a1 + 39))
    return 0;
LABEL_5:
  if (!*(_QWORD *)(a1 + 40))
    return 0;
  Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)a1, (uint64_t)v7);
  MaterialAssignmentPath = Alembic::AbcMaterial::v12::getMaterialAssignmentPath((uint64_t)v7, a2, a3);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v7);
  return MaterialAssignmentPath;
}

{
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  void *v14[6];

  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 31))
      goto LABEL_5;
    return 0;
  }
  if (*(_QWORD *)(a1 + 16))
    return 0;
LABEL_5:
  if (!*(_QWORD *)(a1 + 32))
    return 0;
  result = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a1);
  if (!result)
    return result;
  v7 = result;
  if (*(_DWORD *)(result + 24) != 1)
    return 0;
  result = 0;
  if (*(_DWORD *)(v7 + 56) == 12 && *(_BYTE *)(v7 + 60) == 1)
  {
    v8 = sub_20BE07A80(v7 + 32, 0);
    result = 0;
    if (v8)
    {
      LODWORD(v12) = 0;
      DWORD2(v12) = 0;
      LODWORD(v9) = 0;
      LODWORD(v10) = 0;
      sub_20BE07490((uint64_t)v14, (int *)a1, a3, (uint64_t **)&v12, &v9);
      v9 = 0;
      v10 = 0;
      v11 = 2;
      sub_20BE07440((uint64_t)v14, (uint64_t)&v9, &v12);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_OWORD *)a2 = v12;
      *(_QWORD *)(a2 + 16) = v13;
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v14);
      return 1;
    }
  }
  return result;
}

void sub_20BE7BE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a9);
  _Unwind_Resume(a1);
}

void sub_20BE7BF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)va);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcMaterial::v12::hasMaterial(Alembic::Abc::v12::IObject *this, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t Header;
  uint64_t hasMaterial;
  _BYTE v14[48];

  if (*((char *)this + 39) < 0)
  {
    if (*((_QWORD *)this + 3))
      goto LABEL_17;
  }
  else if (*((_BYTE *)this + 39))
  {
    goto LABEL_17;
  }
  if (!*((_QWORD *)this + 5))
    goto LABEL_17;
  v6 = *(char *)(a3 + 23);
  if (v6 < 0)
  {
    if (*(_QWORD *)(a3 + 8) == 9)
    {
      v7 = *(_QWORD *)a3;
      goto LABEL_11;
    }
LABEL_17:
    Alembic::Abc::v12::IObject::getProperties(this, (uint64_t)v14);
    hasMaterial = Alembic::AbcMaterial::v12::hasMaterial((uint64_t)v14, a2, a3);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v14);
    return hasMaterial;
  }
  v7 = a3;
  if (v6 != 9)
    goto LABEL_17;
LABEL_11:
  v8 = *(_QWORD *)v7;
  v9 = *(unsigned __int8 *)(v7 + 8);
  if (v8 != 0x6169726574616D2ELL || v9 != 108)
    goto LABEL_17;
  Header = Alembic::Abc::v12::IObject::getHeader(this);
  hasMaterial = 0;
  if ((sub_20BE791A0(Header + 48, 0) & 1) == 0)
    goto LABEL_17;
  return hasMaterial;
}

void sub_20BE7C058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcMaterial::v12::hasMaterial(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  int v11;
  void *v12;
  void *v13;
  std::string v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  __int128 v19;
  uint64_t v20;
  int v21;
  std::string v22;
  uint64_t v23;
  int v24;
  std::string v25;
  uint64_t v26;
  void **v27;

  if (*(char *)(a1 + 31) < 0)
  {
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    return 0;
  }
  if (*(_BYTE *)(a1 + 31))
    return 0;
LABEL_5:
  if (!*(_QWORD *)(a1 + 32))
    return 0;
  result = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a1);
  if (result)
  {
    v7 = sub_20BE7A308(result + 32, 0);
    result = 0;
    if (v7)
    {
      LODWORD(v10) = 0;
      v11 = 0;
      LODWORD(v8) = 0;
      v9 = 0;
      sub_20BE79B9C((uint64_t)&v12, a1, a3, &v10, &v8);
      *(_DWORD *)(a2 + 8) = (_DWORD)v13;
      std::string::operator=((std::string *)(a2 + 16), &v14);
      sub_20BDE881C((_QWORD *)(a2 + 40), &v15);
      sub_20BE7A460(a2 + 56, v16);
      sub_20BE7A460(a2 + 80, v17);
      sub_20BE7A460(a2 + 104, v18);
      sub_20BE7598C((uint64_t *)(a2 + 128));
      *(_OWORD *)(a2 + 128) = v19;
      *(_QWORD *)(a2 + 144) = v20;
      v20 = 0;
      v19 = 0uLL;
      *(_DWORD *)(a2 + 152) = v21;
      std::string::operator=((std::string *)(a2 + 160), &v22);
      sub_20BDE881C((_QWORD *)(a2 + 184), &v23);
      *(_DWORD *)(a2 + 200) = v24;
      std::string::operator=((std::string *)(a2 + 208), &v25);
      sub_20BDE881C((_QWORD *)(a2 + 232), &v26);
      v12 = &unk_24C519D60;
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v24);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v21);
      v27 = (void **)&v19;
      sub_20BDE5038(&v27);
      sub_20BDE9D48((uint64_t)v18, (_QWORD *)v18[1]);
      sub_20BDE9D48((uint64_t)v17, (_QWORD *)v17[1]);
      sub_20BDE9D48((uint64_t)v16, (_QWORD *)v16[1]);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v13);
      return 1;
    }
  }
  return result;
}

void sub_20BE7C254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BE76958((uint64_t)va);
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::addMaterialAssignment(Alembic::Abc::v12::OObject *a1, const void *a2, uint64_t a3)
{
  _BYTE v5[48];

  Alembic::Abc::v12::OObject::getProperties(a1, (uint64_t)v5);
  Alembic::AbcMaterial::v12::addMaterialAssignment((uint64_t)v5, a2, a3);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v5);
}

void sub_20BE7C2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&a9);
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::addMaterialAssignment(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  int v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20[6];

  v15 = *(_DWORD *)a1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_20BDDBFAC(&v16, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v16 = *(_OWORD *)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 24);
  }
  v6 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 32);
  v19 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  LODWORD(v13) = 0;
  v14 = 0;
  LODWORD(v11) = 0;
  v12 = 0;
  LODWORD(v9) = 0;
  v10 = 0;
  sub_20BE0C69C((uint64_t)v20, &v15, a3, &v13, &v11, &v9);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v15);
  Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)v20, a2);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v20);
}

void sub_20BE7C3A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(v1 - 80));
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::addMaterial(Alembic::Abc::v12::OObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v5[48];

  Alembic::Abc::v12::OObject::getProperties(a1, (uint64_t)v5);
  Alembic::AbcMaterial::v12::addMaterial((uint64_t)v5, a2, a3);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v5);
}

void sub_20BE7C40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&a9);
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::addMaterial(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _DWORD v11[4];
  _DWORD v12[4];
  _DWORD v13[4];
  _DWORD v14[4];
  uint64_t v15;
  std::__shared_weak_count *v16;

  v5 = *(std::__shared_weak_count **)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v14[0] = 0;
  v14[2] = 0;
  v13[0] = 0;
  v13[2] = 0;
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  v11[2] = 0;
  Alembic::AbcMaterial::v12::OMaterialSchema::OMaterialSchema(a3, &v15, a2, v14, v13, v12, v11);
  v8 = v16;
  if (v16)
  {
    v9 = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20BE7C4DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v1 - 32));
  _Unwind_Resume(a1);
}

void sub_20BE7C4F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  uint64_t v10;
  void **v11;
  std::string::size_type v12;
  void *__p[2];
  unsigned __int8 v14;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_20BDDBFAC(a4, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  std::string::append(a4, ".");
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)a2;
  else
    v8 = *(const std::string::value_type **)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  std::string::append(a4, v8, v9);
  v10 = *(unsigned __int8 *)(a3 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (v10)
  {
    std::operator+<char>();
    if ((v14 & 0x80u) == 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v12 = v14;
    else
      v12 = (std::string::size_type)__p[1];
    std::string::append(a4, (const std::string::value_type *)v11, v12);
    if ((char)v14 < 0)
      operator delete(__p[0]);
  }
}

void sub_20BE7C5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

std::string::size_type sub_20BE7C614(uint64_t a1, uint64_t a2)
{
  std::string::size_type result;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  _QWORD *v15;
  __int128 __p;
  char v17;
  _QWORD v18[4];
  _BYTE v19[16];
  _QWORD v20[33];

  if (std::string::find((const std::string *)a1, 46, 0) != -1
    || (result = std::string::find((const std::string *)a1, 47, 0), result != -1))
  {
    sub_20BDDBD68((uint64_t)v19);
    v5 = sub_20BDDC1C8(v20, (uint64_t)"invalid name for ", 17);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = sub_20BDDC1C8(v5, v7, v8);
    v10 = sub_20BDDC1C8(v9, (uint64_t)":", 1);
    v11 = *(char *)(a1 + 23);
    if (v11 >= 0)
      v12 = a1;
    else
      v12 = *(_QWORD *)a1;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a1 + 23);
    else
      v13 = *(_QWORD *)(a1 + 8);
    sub_20BDDC1C8(v10, v12, v13);
    std::stringbuf::str();
    sub_20BDDBF20(v18, &__p);
    if (v17 < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    v15 = sub_20BDDC09C(exception, (uint64_t)v18);
    __cxa_throw(v15, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  return result;
}

void sub_20BE7C72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BDDC194((std::exception *)va);
  sub_20BDDBE98((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20BE7C754(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string::size_type v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  std::string::size_type v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  std::string __p;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t *v66;

  sub_20BDE5078(a2);
  v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    sub_20BDDC0E4(&__p, "");
    v42 = a2[2];
    v43 = a2[1];
    if (v43 < v42)
    {
      v44 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v43 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v43 = v44;
      v41 = v43 + 24;
      goto LABEL_46;
    }
    v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - *a2) >> 3);
    v46 = v45 + 1;
    if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *a2) >> 3);
    if (2 * v47 > v46)
      v46 = 2 * v47;
    if (v47 >= 0x555555555555555)
      v48 = 0xAAAAAAAAAAAAAAALL;
    else
      v48 = v46;
    v66 = a2 + 2;
    if (v48)
      v49 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v48);
    else
      v49 = 0;
    v55 = &v49[24 * v45];
    v62 = v49;
    v63 = v55;
    v65 = &v49[24 * v48];
    v56 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v55 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v55 = v56;
    memset(&__p, 0, sizeof(__p));
    v64 = v55 + 24;
    sub_20BDF34C0(a2, &v62);
    goto LABEL_67;
  }
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = *(unsigned __int8 *)(a1 + 23);
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a1 + 8);
    if (v8 >= v9)
      break;
    v10 = std::string::find((const std::string *)a1, 46, v8);
    if (v10 == -1)
      break;
    v11 = v10;
    std::string::basic_string(&__p, (const std::string *)a1, v8, v10 - v8, (std::allocator<char> *)&v62);
    v13 = a2[1];
    v12 = a2[2];
    if (v13 >= v12)
    {
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *a2) >> 3);
      v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *a2) >> 3);
      if (2 * v17 > v16)
        v16 = 2 * v17;
      if (v17 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v16;
      v66 = a2 + 2;
      if (v18)
        v19 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v18);
      else
        v19 = 0;
      v20 = &v19[24 * v15];
      v62 = v19;
      v63 = v20;
      v65 = &v19[24 * v18];
      v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((_QWORD *)v20 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v20 = v21;
      memset(&__p, 0, sizeof(__p));
      v64 = v20 + 24;
      sub_20BDF34C0(a2, &v62);
      v22 = a2[1];
      sub_20BDF3648((uint64_t)&v62);
      v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      a2[1] = v22;
      if (v23 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v13 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v13 = v14;
      a2[1] = v13 + 24;
    }
    v24 = *(unsigned __int8 *)(a1 + 23);
    if ((v24 & 0x80u) != 0)
      v24 = *(_QWORD *)(a1 + 8);
    if (v11 == v24 - 1)
    {
      sub_20BDDC0E4(&__p, "");
      v26 = a2[1];
      v25 = a2[2];
      if (v26 >= v25)
      {
        v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        v29 = v28 + 1;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0x555555555555555)
          v31 = 0xAAAAAAAAAAAAAAALL;
        else
          v31 = v29;
        v66 = a2 + 2;
        if (v31)
          v32 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v31);
        else
          v32 = 0;
        v33 = &v32[24 * v28];
        v62 = v32;
        v63 = v33;
        v65 = &v32[24 * v31];
        v34 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((_QWORD *)v33 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v33 = v34;
        memset(&__p, 0, sizeof(__p));
        v64 = v33 + 24;
        sub_20BDF34C0(a2, &v62);
        v35 = a2[1];
        sub_20BDF3648((uint64_t)&v62);
        v36 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        a2[1] = v35;
        if (v36 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v26 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v26 = v27;
        a2[1] = v26 + 24;
      }
    }
    v8 = v11 + 1;
    ++v7;
  }
  while (a3 - 1 >= v7);
  v37 = *(unsigned __int8 *)(a1 + 23);
  if ((v37 & 0x80u) != 0)
    v37 = *(_QWORD *)(a1 + 8);
  if (v8 < v37)
  {
    std::string::basic_string(&__p, (const std::string *)a1, v8, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v62);
    v39 = a2[1];
    v38 = a2[2];
    if (v39 < v38)
    {
      v40 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v39 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v39 = v40;
      v41 = v39 + 24;
LABEL_46:
      a2[1] = v41;
      return;
    }
    v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *a2) >> 3);
    v51 = v50 + 1;
    if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *a2) >> 3);
    if (2 * v52 > v51)
      v51 = 2 * v52;
    if (v52 >= 0x555555555555555)
      v53 = 0xAAAAAAAAAAAAAAALL;
    else
      v53 = v51;
    v66 = a2 + 2;
    if (v53)
      v54 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v53);
    else
      v54 = 0;
    v57 = &v54[24 * v50];
    v62 = v54;
    v63 = v57;
    v65 = &v54[24 * v53];
    v58 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v57 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v57 = v58;
    memset(&__p, 0, sizeof(__p));
    v64 = v57 + 24;
    sub_20BDF34C0(a2, &v62);
LABEL_67:
    v59 = a2[1];
    sub_20BDF3648((uint64_t)&v62);
    v60 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v59;
    if (v60 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20BE7CC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20BDF3648((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *Alembic::Ogawa::v12::IArchive::IArchive(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  Alembic::Ogawa::v12::IArchive *v9;

  v8 = operator new(8uLL);
  Alembic::Ogawa::v12::IStreams::IStreams(v8, a2, a3, a4);
  v9 = (Alembic::Ogawa::v12::IArchive *)sub_20BE7CFEC(a1, (uint64_t)v8);
  a1[2] = 0;
  a1[3] = 0;
  Alembic::Ogawa::v12::IArchive::init(v9);
  return a1;
}

void sub_20BE7CD24(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v3;

  v3 = v2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

void Alembic::Ogawa::v12::IArchive::init(Alembic::Ogawa::v12::IArchive *this)
{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;

  if (Alembic::Ogawa::v12::IStreams::isValid(*(Alembic::Ogawa::v12::IStreams **)this))
  {
    v12 = 0;
    Alembic::Ogawa::v12::IStreams::read(*(_QWORD *)this, 0, 8, 8, &v12);
    v2 = operator new(8uLL);
    v3 = (uint64_t)v2;
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    v10 = *(_QWORD *)this;
    v11 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    Alembic::Ogawa::v12::IGroup::IGroup(v2, &v10, v12, 0, 0);
    sub_20BE7CEF0((_QWORD *)this + 2, v3);
    v7 = v11;
    if (v11)
    {
      v8 = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_20BE7CE2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

_QWORD *Alembic::Ogawa::v12::IArchive::IArchive(_QWORD *a1, uint64_t a2)
{
  void *v4;
  Alembic::Ogawa::v12::IArchive *v5;

  v4 = operator new(8uLL);
  Alembic::Ogawa::v12::IStreams::IStreams(v4, a2);
  v5 = (Alembic::Ogawa::v12::IArchive *)sub_20BE7CFEC(a1, (uint64_t)v4);
  a1[2] = 0;
  a1[3] = 0;
  Alembic::Ogawa::v12::IArchive::init(v5);
  return a1;
}

void sub_20BE7CEB8(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v3;

  v3 = v2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

void sub_20BE7CEF0(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20BE7D0CC(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void Alembic::Ogawa::v12::IArchive::~IArchive(Alembic::Ogawa::v12::IArchive *this)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((Alembic::Ogawa::v12::IArchive *)((char *)this + 16));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(this);
}

{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((Alembic::Ogawa::v12::IArchive *)((char *)this + 16));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(this);
}

uint64_t Alembic::Ogawa::v12::IArchive::isValid(Alembic::Ogawa::v12::IStreams **this)
{
  return Alembic::Ogawa::v12::IStreams::isValid(*this);
}

uint64_t Alembic::Ogawa::v12::IArchive::isFrozen(Alembic::Ogawa::v12::IStreams **this)
{
  return Alembic::Ogawa::v12::IStreams::isFrozen(*this);
}

uint64_t Alembic::Ogawa::v12::IArchive::getVersion(Alembic::Ogawa::v12::IStreams **this)
{
  return Alembic::Ogawa::v12::IStreams::getVersion(*this);
}

uint64_t Alembic::Ogawa::v12::IArchive::getGroup@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 24);
  *a2 = *(_QWORD *)(this + 16);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *sub_20BE7CFEC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C519E58;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BE7D034(_Unwind_Exception *exception_object)
{
  Alembic::Ogawa::v12::IStreams *v1;
  void *v3;

  if (v1)
  {
    Alembic::Ogawa::v12::IStreams::~IStreams(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20BE7D054(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BE7D068(uint64_t a1)
{
  Alembic::Ogawa::v12::IStreams *v1;
  void *v2;

  v1 = *(Alembic::Ogawa::v12::IStreams **)(a1 + 24);
  if (v1)
  {
    Alembic::Ogawa::v12::IStreams::~IStreams(v1);
    operator delete(v2);
  }
}

uint64_t sub_20BE7D08C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C519EA8))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20BE7D0CC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C519ED0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BE7D114(_Unwind_Exception *exception_object)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **v1;
  void *v3;

  if (v1)
  {
    Alembic::Ogawa::v12::IGroup::~IGroup(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20BE7D134(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BE7D148(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **v1;
  void *v2;

  v1 = *(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource ***)(a1 + 24);
  if (v1)
  {
    Alembic::Ogawa::v12::IGroup::~IGroup(v1);
    operator delete(v2);
  }
}

uint64_t sub_20BE7D16C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C519F20))
    return a1 + 24;
  else
    return 0;
}

void Alembic::Ogawa::v12::IData::~IData(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **this)
{
  sub_20BE7D37C(this, 0);
}

{
  sub_20BE7D37C(this, 0);
}

Alembic::Ogawa::v12::IStreams ***Alembic::Ogawa::v12::IData::IData(Alembic::Ogawa::v12::IStreams ***a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  Alembic::Ogawa::v12::IStreams **v8;
  Alembic::Ogawa::v12::IStreams **v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t Size;
  Alembic::Ogawa::v12::IStreams *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v8 = (Alembic::Ogawa::v12::IStreams **)operator new(0x20uLL);
  v9 = v8;
  v10 = a2[1];
  v20 = *a2;
  v21 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *v8 = 0;
  v8[1] = 0;
  sub_20BDE881C(v8, &v20);
  *a1 = v9;
  v13 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (unint64_t *)*a1;
  v19 = 0;
  v16[2] = a3 & 0x7FFFFFFFFFFFFFFFLL;
  v16[3] = 0;
  if ((a3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    Alembic::Ogawa::v12::IStreams::read(*v16, a4, a3 & 0x7FFFFFFFFFFFFFFFLL, 8, &v19);
    Size = Alembic::Ogawa::v12::IStreams::getSize(**a1);
    if (Size >= (unint64_t)v19)
      (*a1)[3] = v19;
  }
  return a1;
}

void sub_20BE7D300(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **v1;

  sub_20BE7D37C(v1, 0);
  _Unwind_Resume(a1);
}

unint64_t **Alembic::Ogawa::v12::IData::read(unint64_t **this, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  BOOL v6;

  if (a2)
  {
    v5 = (*this)[3];
    if (v5)
      v6 = a4 + a2 > v5;
    else
      v6 = 1;
    if (!v6)
      return (unint64_t **)Alembic::Ogawa::v12::IStreams::read(**this, a5, a4 + (*this)[2] + 8, a2, a3);
  }
  return this;
}

uint64_t Alembic::Ogawa::v12::IData::getSize(Alembic::Ogawa::v12::IData *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 24);
}

uint64_t Alembic::Ogawa::v12::IData::getPos(Alembic::Ogawa::v12::IData *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 16);
}

void sub_20BE7D37C(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **a1, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a2)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v3);
    operator delete(v4);
  }
}

Alembic::Ogawa::v12::IStreams ***Alembic::Ogawa::v12::IGroup::IGroup(Alembic::Ogawa::v12::IStreams ***a1, uint64_t *a2, uint64_t a3, char a4, unint64_t a5)
{
  Alembic::Ogawa::v12::IStreams **v10;
  Alembic::Ogawa::v12::IStreams **v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  Alembic::Ogawa::v12::IStreams *v18;
  unint64_t *v19;
  Alembic::Ogawa::v12::IStreams *v20;
  unint64_t Size;
  Alembic::Ogawa::v12::IStreams **v22;
  unint64_t v23;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v10 = (Alembic::Ogawa::v12::IStreams **)operator new(0x38uLL);
  v11 = v10;
  v12 = a2[1];
  v25 = *a2;
  v26 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v10[6] = 0;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)v10 = 0u;
  sub_20BDE881C(v10, &v25);
  *a1 = v11;
  v15 = v26;
  if (!v26)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!a3)
      return a1;
  }
  else
  {
LABEL_8:
    if (!a3)
      return a1;
  }
  v18 = **a1;
  if (v18 && (Alembic::Ogawa::v12::IStreams::isValid(v18) & 1) != 0)
  {
    v19 = (unint64_t *)*a1;
    v19[6] = a3;
    Alembic::Ogawa::v12::IStreams::read(*v19, a5, a3, 8, v19 + 5);
    v20 = (*a1)[5];
    Size = Alembic::Ogawa::v12::IStreams::getSize(**a1);
    v22 = *a1;
    if ((unint64_t)v20 <= Size >> 3 && (v23 = (unint64_t)v22[5]) != 0)
    {
      if (v23 < 9 || (a4 & 1) == 0)
      {
        sub_20BDFC880((uint64_t)(v22 + 2), v23);
        Alembic::Ogawa::v12::IStreams::read((unint64_t)**a1, a5, a3 + 8, 8 * (_QWORD)(*a1)[5], (*a1)[2]);
      }
    }
    else
    {
      v22[5] = 0;
    }
  }
  return a1;
}

void sub_20BE7D514(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **v1;

  sub_20BE7DA6C(v1, 0);
  _Unwind_Resume(a1);
}

void Alembic::Ogawa::v12::IGroup::~IGroup(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **this)
{
  sub_20BE7DA6C(this, 0);
}

{
  sub_20BE7DA6C(this, 0);
}

void Alembic::Ogawa::v12::IGroup::getGroup(uint64_t **this@<X0>, unint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Alembic::Ogawa::v12::IStreams ***v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t v24;

  *a5 = 0;
  a5[1] = 0;
  v24 = 0x8000000000000000;
  v9 = (unint64_t *)*this;
  v10 = (*this)[5];
  if (v10)
  {
    v11 = v9[2];
    v12 = v9[3];
    if (v11 == v12)
    {
      if (v10 <= a2)
        return;
      Alembic::Ogawa::v12::IStreams::read(*v9, a4, v9[6] + 8 * a2 + 8, 8, &v24);
      v13 = v24;
      if (!v24)
        goto LABEL_12;
LABEL_10:
      if (v13 < 9 || v13 == (*this)[6])
        return;
      goto LABEL_12;
    }
  }
  else
  {
    v11 = v9[2];
    v12 = v9[3];
  }
  if (a2 >= (uint64_t)(v12 - v11) >> 3)
    return;
  v13 = *(_QWORD *)(v11 + 8 * a2);
  if (v13 < 0)
    return;
  v24 = *(_QWORD *)(v11 + 8 * a2);
  if (v13)
    goto LABEL_10;
LABEL_12:
  v14 = (Alembic::Ogawa::v12::IStreams ***)operator new(8uLL);
  v15 = (uint64_t)v14;
  v16 = (*this)[1];
  v22 = **this;
  v23 = (std::__shared_weak_count *)v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  Alembic::Ogawa::v12::IGroup::IGroup(v14, &v22, v13, a3, a4);
  sub_20BE7CEF0(a5, v15);
  v19 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20BE7D6DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v2);
  _Unwind_Resume(a1);
}

BOOL Alembic::Ogawa::v12::IGroup::isLight(Alembic::Ogawa::v12::IGroup *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 40)
      && *(_QWORD *)(*(_QWORD *)this + 16) == *(_QWORD *)(*(_QWORD *)this + 24);
}

BOOL Alembic::Ogawa::v12::IGroup::isChildGroup(Alembic::Ogawa::v12::IGroup *this, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)this + 16);
  return a2 < (*(_QWORD *)(*(_QWORD *)this + 24) - v2) >> 3 && *(_QWORD *)(v2 + 8 * a2) >= 0;
}

void Alembic::Ogawa::v12::IGroup::getData(unint64_t **this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;

  *a4 = 0;
  a4[1] = 0;
  v8 = *this;
  v9 = (*this)[5];
  if (v9)
  {
    v10 = v8[2];
    v11 = v8[3];
    if (v10 == v11)
    {
      if (v9 > a2)
      {
        v31 = 0;
        Alembic::Ogawa::v12::IStreams::read(*v8, a3, v8[6] + 8 * a2 + 8, 8, &v31);
        v12 = v31;
        if (v31 < 0)
        {
          v13 = operator new(8uLL);
          v14 = (uint64_t)v13;
          v15 = (std::__shared_weak_count *)(*this)[1];
          v29 = **this;
          v30 = v15;
          if (v15)
          {
            p_shared_owners = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldxr(p_shared_owners);
            while (__stxr(v17 + 1, p_shared_owners));
          }
          Alembic::Ogawa::v12::IData::IData(v13, &v29, v12, a3);
          sub_20BE7D96C(a4, v14);
          v18 = v30;
          if (v30)
          {
            v19 = (unint64_t *)&v30->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
LABEL_22:
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
            return;
          }
        }
      }
      return;
    }
  }
  else
  {
    v10 = v8[2];
    v11 = v8[3];
  }
  if (a2 < (uint64_t)(v11 - v10) >> 3 && (*(_QWORD *)(v10 + 8 * a2) & 0x8000000000000000) != 0)
  {
    v21 = operator new(8uLL);
    v22 = (uint64_t)v21;
    v23 = v8[1];
    v27 = *v8;
    v28 = (std::__shared_weak_count *)v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      v8 = *this;
    }
    Alembic::Ogawa::v12::IData::IData(v21, &v27, *(_QWORD *)(v8[2] + 8 * a2), a3);
    sub_20BE7D96C(a4, v22);
    v18 = v28;
    if (v28)
    {
      v26 = (unint64_t *)&v28->__shared_owners_;
      do
        v20 = __ldaxr(v26);
      while (__stlxr(v20 - 1, v26));
      goto LABEL_22;
    }
  }
}

void sub_20BE7D90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v4;
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v4);
  _Unwind_Resume(a1);
}

void sub_20BE7D96C(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20BE7DAC8(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t Alembic::Ogawa::v12::IGroup::isChildData(Alembic::Ogawa::v12::IGroup *this, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)this + 16);
  if (a2 >= (*(_QWORD *)(*(_QWORD *)this + 24) - v2) >> 3)
    return 0;
  else
    return *(_QWORD *)(v2 + 8 * a2) >> 63;
}

uint64_t Alembic::Ogawa::v12::IGroup::getNumChildren(Alembic::Ogawa::v12::IGroup *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 40);
}

BOOL Alembic::Ogawa::v12::IGroup::isEmptyChildGroup(Alembic::Ogawa::v12::IGroup *this, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)this + 16);
  return a2 < (*(_QWORD *)(*(_QWORD *)this + 24) - v2) >> 3 && *(_QWORD *)(v2 + 8 * a2) == 0;
}

BOOL Alembic::Ogawa::v12::IGroup::isEmptyChildData(Alembic::Ogawa::v12::IGroup *this, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)this + 16);
  return a2 < (*(_QWORD *)(*(_QWORD *)this + 24) - v2) >> 3 && *(_QWORD *)(v2 + 8 * a2) == 0x8000000000000000;
}

void sub_20BE7DA6C(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **a1, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a2)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    sub_20BE7DA98(v3);
    operator delete(v4);
  }
}

void sub_20BE7DA98(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(this);
}

_QWORD *sub_20BE7DAC8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C519F48;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BE7DB10(_Unwind_Exception *exception_object)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **v1;
  void *v3;

  if (v1)
  {
    Alembic::Ogawa::v12::IData::~IData(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20BE7DB30(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BE7DB44(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **v1;
  void *v2;

  v1 = *(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource ***)(a1 + 24);
  if (v1)
  {
    Alembic::Ogawa::v12::IData::~IData(v1);
    operator delete(v2);
  }
}

uint64_t sub_20BE7DB68(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C519F98))
    return a1 + 24;
  else
    return 0;
}

uint64_t *Alembic::Ogawa::v12::IStreams::IStreams(uint64_t *a1, char *a2, uint64_t a3, int a4)
{
  _QWORD *v8;
  char *v9;
  char *v10;
  int *v11;
  size_t *v12;
  const char *v13;
  int v14;
  std::__shared_weak_count *v15;
  void (**v16)(std::__shared_weak_count *__hidden);
  int v17;
  int v18;
  int v19;
  off_t st_size;
  int v21;
  void *v22;
  void *v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD v32[2];
  char *v33;
  std::__shared_weak_count *v34;
  stat v35;

  v8 = operator new(0x20uLL);
  *(_DWORD *)v8 = 0;
  v8[2] = 0;
  v8[3] = 0;
  v8[1] = 0;
  *a1 = (uint64_t)v8;
  if (a4)
  {
    v9 = (char *)operator new(0x40uLL);
    v10 = v9;
    *(_QWORD *)v9 = off_24C519FC0;
    *((_QWORD *)v9 + 1) = a3;
    if (a2[23] < 0)
    {
      sub_20BDDBFAC(v9 + 16, *(void **)a2, *((_QWORD *)a2 + 1));
      v17 = a2[23];
      *((_DWORD *)v10 + 10) = -1;
      v11 = (int *)(v10 + 40);
      *((_QWORD *)v10 + 6) = 0;
      v12 = (size_t *)(v10 + 48);
      *((_QWORD *)v10 + 7) = 0;
      if (v17 < 0)
        a2 = *(char **)a2;
    }
    else
    {
      *((_OWORD *)v9 + 1) = *(_OWORD *)a2;
      *((_QWORD *)v9 + 4) = *((_QWORD *)a2 + 2);
      *((_DWORD *)v9 + 10) = -1;
      v11 = (int *)(v9 + 40);
      *((_QWORD *)v9 + 6) = 0;
      v12 = (size_t *)(v9 + 48);
      *((_QWORD *)v9 + 7) = 0;
    }
    v18 = open(a2, 0);
    v19 = v18;
    if (v18 < 0)
      v18 = -1;
    *v11 = v18;
    if ((v19 & 0x80000000) == 0 && (fstat(v18, &v35) & 0x80000000) == 0)
    {
      st_size = v35.st_size;
      if ((v35.st_size & 0x8000000000000000) == 0)
      {
        v21 = *((_DWORD *)v10 + 10);
        v22 = (void *)*((_QWORD *)v10 + 7);
        if (v22)
        {
          munmap(v22, *v12);
          *((_QWORD *)v10 + 7) = 0;
        }
        v23 = mmap(0, st_size, 1, 2, v21, 0);
        if (v23 != (void *)-1)
        {
          *((_QWORD *)v10 + 6) = st_size;
          *((_QWORD *)v10 + 7) = v23;
        }
      }
    }
    v33 = v10;
    v15 = (std::__shared_weak_count *)operator new(0x20uLL);
    v15->__shared_weak_owners_ = 0;
    v16 = &off_24C51A028;
  }
  else
  {
    v10 = (char *)operator new(0x20uLL);
    *(_QWORD *)v10 = off_24C51A0A0;
    *((_QWORD *)v10 + 2) = a3;
    if (a2[23] >= 0)
      v13 = a2;
    else
      v13 = *(const char **)a2;
    v14 = open(v13, 0);
    *((_DWORD *)v10 + 2) = v14;
    *((_QWORD *)v10 + 3) = 0;
    if (fstat(v14, &v35) < 0 || v35.st_size < 0)
      *((_QWORD *)v10 + 3) = 0;
    else
      *((_QWORD *)v10 + 3) = v35.st_size;
    v33 = v10;
    v15 = (std::__shared_weak_count *)operator new(0x20uLL);
    v15->__shared_weak_owners_ = 0;
    v16 = &off_24C51A0F8;
  }
  v15->__vftable = (std::__shared_weak_count_vtbl *)v16;
  v15->__shared_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  v34 = v15;
  v24 = *a1;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  v32[0] = v10;
  v32[1] = v15;
  do
    v26 = __ldxr(p_shared_owners);
  while (__stxr(v26 + 1, p_shared_owners));
  sub_20BE7DEB8(v24, v32, 1);
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v28 = v34;
  if (v34)
  {
    v29 = (unint64_t *)&v34->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return a1;
}

void sub_20BE7DE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t *v11;
  void *v12;

  operator delete(v12);
  sub_20BE7EC58(v11, 0);
  _Unwind_Resume(a1);
}

void sub_20BE7DEB8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a3 && *a2 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2))
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v22 = 0;
      v23 = 0;
      (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)*a2 + 32))(*a2, v6, 0, 16, &v22);
      if ((_DWORD)v22 != 2002872143 || BYTE4(v22) != 97)
      {
LABEL_28:
        *(_DWORD *)a1 = 0;
        return;
      }
      v9 = BYTE5(v22) == 255;
      v10 = BYTE6(v22);
      v11 = SHIBYTE(v22);
      v12 = v23;
      v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
      v14 = v11 | (v10 << 8);
      if (v6)
      {
        if (v7 != v12
          || *(unsigned __int8 *)(a1 + 1) != v9
          || *(unsigned __int16 *)(a1 + 2) != v14
          || *(_QWORD *)(a1 + 8) != v13)
        {
          goto LABEL_28;
        }
      }
      else
      {
        *(_BYTE *)(a1 + 1) = v9;
        *(_WORD *)(a1 + 2) = v14;
        v7 = v12;
        *(_QWORD *)(a1 + 8) = v13;
      }
      ++v6;
    }
    while (a3 != v6);
    if ((unsigned __int16)(v11 | (v10 << 8)) == 1)
    {
      v16 = *a2;
      v15 = a2[1];
      if (v15)
      {
        v17 = (unint64_t *)(v15 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = *(std::__shared_weak_count **)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = v15;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      *(_BYTE *)a1 = 1;
    }
  }
}

uint64_t *Alembic::Ogawa::v12::IStreams::IStreams(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count_vtbl *v5;
  void **p_on_zero_shared_weak;
  void (__cdecl *on_zero_shared)(std::__shared_weak_count *__hidden);
  void (__cdecl *v8)(std::__shared_weak_count *__hidden);
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  unint64_t v12;
  void (__cdecl *v13)(std::__shared_count *__hidden);
  unint64_t v14;
  unint64_t v15;
  char *v16;
  void (__cdecl *v17)(std::__shared_weak_count *__hidden);
  char *on_zero_shared_weak;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD v36[3];
  std::__shared_weak_count *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x20uLL);
  *(_DWORD *)v4 = 0;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  *a1 = (uint64_t)v4;
  v5 = (std::__shared_weak_count_vtbl *)operator new(0x40uLL);
  v5->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24C51A170;
  v5->~__shared_weak_count_0 = 0;
  v5->__on_zero_shared = 0;
  v5->__get_deleter = 0;
  sub_20BDFD340(&v5->~__shared_weak_count_0, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v5->__on_zero_shared_weak = 0;
  v5[1].~__shared_weak_count = 0;
  p_on_zero_shared_weak = (void **)&v5->__on_zero_shared_weak;
  v5[1].~__shared_weak_count_0 = 0;
  v8 = v5->~__shared_weak_count_0;
  on_zero_shared = (void (__cdecl *)(std::__shared_weak_count *__hidden))v5->__on_zero_shared;
  v9 = (char *)on_zero_shared - (char *)v8;
  if ((unint64_t)((char *)on_zero_shared - (char *)v8) > 0x1FFFFFFFFFFFFFF8)
    v10 = -1;
  else
    v10 = (8 * ((char *)on_zero_shared - (char *)v8)) | 0x10;
  v11 = operator new[](v10);
  *v11 = 64;
  v11[1] = v9 >> 3;
  if (on_zero_shared == v8)
  {
    v13 = (void (__cdecl *)(std::__shared_count *__hidden))on_zero_shared;
  }
  else
  {
    v12 = 0;
    do
    {
      pthread_mutex_init((pthread_mutex_t *)&v11[v12 / 8 + 2], 0);
      v12 += 64;
    }
    while (v9 >> 3 << 6 != v12);
    on_zero_shared = v5->~__shared_weak_count_0;
    v13 = v5->__on_zero_shared;
  }
  v5[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))(v11 + 2);
  sub_20BE7E950((void **)&v5->__on_zero_shared_weak, ((char *)v13 - (char *)on_zero_shared) >> 3);
  if (v5->__on_zero_shared != (void (__cdecl *)(std::__shared_count *__hidden))v5->~__shared_weak_count_0)
  {
    v14 = 0;
    do
    {
      std::istream::tellg();
      v16 = (char *)v5[1].~__shared_weak_count;
      v15 = (unint64_t)v5[1].~__shared_weak_count_0;
      if ((unint64_t)v16 >= v15)
      {
        on_zero_shared_weak = (char *)*p_on_zero_shared_weak;
        v19 = (v16 - (_BYTE *)*p_on_zero_shared_weak) >> 3;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61)
          sub_20BDDF694();
        v21 = v15 - (_QWORD)on_zero_shared_weak;
        if (v21 >> 2 > v20)
          v20 = v21 >> 2;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)sub_20BDDF6A8((uint64_t)&v5[1].~__shared_weak_count_0, v22);
          on_zero_shared_weak = (char *)v5->__on_zero_shared_weak;
          v16 = (char *)v5[1].~__shared_weak_count;
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[8 * v19];
        *(_QWORD *)v24 = v38;
        v17 = (void (__cdecl *)(std::__shared_weak_count *__hidden))(v24 + 8);
        while (v16 != on_zero_shared_weak)
        {
          v25 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v24 - 1) = v25;
          v24 -= 8;
        }
        v5->__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
        v5[1].~__shared_weak_count = v17;
        v5[1].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v23[8 * v22];
        if (on_zero_shared_weak)
          operator delete(on_zero_shared_weak);
      }
      else
      {
        *(_QWORD *)v16 = v38;
        v17 = (void (__cdecl *)(std::__shared_weak_count *__hidden))(v16 + 8);
      }
      v5[1].~__shared_weak_count = v17;
      ++v14;
    }
    while (v14 < ((char *)v5->__on_zero_shared - (char *)v5->~__shared_weak_count_0) >> 3);
  }
  v36[2] = v5;
  v26 = (std::__shared_weak_count *)operator new(0x20uLL);
  v26->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C51A1C8;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v5;
  v37 = v26;
  v28 = *a1;
  v36[0] = v5;
  v36[1] = v26;
  do
    v29 = __ldxr(p_shared_owners);
  while (__stxr(v29 + 1, p_shared_owners));
  v30 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v5->~__shared_weak_count + 2))(v5);
  sub_20BE7DEB8(v28, v36, v30);
  do
    v31 = __ldaxr(p_shared_owners);
  while (__stlxr(v31 - 1, p_shared_owners));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  v32 = v37;
  if (v37)
  {
    v33 = (unint64_t *)&v37->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  return a1;
}

void sub_20BE7E3A8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20BE7EC58(v1, 0);
  _Unwind_Resume(a1);
}

void Alembic::Ogawa::v12::IStreams::~IStreams(Alembic::Ogawa::v12::IStreams *this)
{
  sub_20BE7EC58((uint64_t *)this, 0);
}

{
  sub_20BE7EC58((uint64_t *)this, 0);
}

uint64_t Alembic::Ogawa::v12::IStreams::isValid(Alembic::Ogawa::v12::IStreams *this)
{
  return **(unsigned __int8 **)this;
}

uint64_t Alembic::Ogawa::v12::IStreams::isFrozen(Alembic::Ogawa::v12::IStreams *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 1);
}

uint64_t Alembic::Ogawa::v12::IStreams::getVersion(Alembic::Ogawa::v12::IStreams *this)
{
  return *(unsigned __int16 *)(*(_QWORD *)this + 2);
}

uint64_t Alembic::Ogawa::v12::IStreams::getSize(Alembic::Ogawa::v12::IStreams *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 8);
}

unint64_t Alembic::Ogawa::v12::IStreams::read(unint64_t this, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  unint64_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  std::locale v12;

  if (**(_BYTE **)this)
  {
    v9 = this;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 16) + 16))(*(_QWORD *)(*(_QWORD *)this + 16));
    if (this > a2)
    {
      this = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, void *))(**(_QWORD **)(*(_QWORD *)v9 + 16)
                                                                                           + 32))(*(_QWORD *)(*(_QWORD *)v9 + 16), a2, a3, a4, a5);
      if ((this & 1) == 0)
      {
        v10 = sub_20BDDC1C8(MEMORY[0x24BEDB318], (uint64_t)"Ogawa IStreams::read failed.", 28);
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
        v11 = std::locale::use_facet(&v12, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        return std::ostream::flush();
      }
    }
  }
  return this;
}

void sub_20BE7E5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

size_t *sub_20BE7E600(size_t *a1)
{
  void *v2;

  v2 = (void *)a1[1];
  if (v2)
  {
    munmap(v2, *a1);
    a1[1] = 0;
  }
  return a1;
}

uint64_t sub_20BE7E638(uint64_t a1)
{
  size_t *v2;
  void *v3;
  int v4;

  *(_QWORD *)a1 = off_24C519FC0;
  v2 = (size_t *)(a1 + 48);
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    munmap(v3, *v2);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v4 = *(_DWORD *)(a1 + 40);
  if (v4 != -1)
    close(v4);
  sub_20BE7E600(v2);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20BE7E6A8(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20BE7E638(a1);
  operator delete(v1);
}

uint64_t sub_20BE7E6BC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

BOOL sub_20BE7E6C4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) != 0;
}

uint64_t sub_20BE7E6D4(uint64_t a1, int a2, size_t a3, size_t __n, void *__dst)
{
  size_t v5;
  BOOL v7;
  int v8;

  v5 = *(_QWORD *)(a1 + 48);
  v7 = v5 < __n || v5 < a3 || __n + a3 > v5;
  v8 = v7;
  if (!v7)
    memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 56) + a3), __n);
  return v8 ^ 1u;
}

uint64_t sub_20BE7E720(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t sub_20BE7E728()
{
  return -1;
}

void sub_20BE7E734(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BE7E748(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20BE7E760(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51A078))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20BE7E7A0(uint64_t a1)
{
  int v2;

  *(_QWORD *)a1 = off_24C51A0A0;
  v2 = *(_DWORD *)(a1 + 8);
  if ((v2 & 0x80000000) == 0)
    close(v2);
  return a1;
}

void sub_20BE7E7DC(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20BE7E7A0(a1);
  operator delete(v1);
}

uint64_t sub_20BE7E7F0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

BOOL sub_20BE7E7F8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) >= 0;
}

uint64_t sub_20BE7E808(uint64_t a1, uint64_t a2, off_t a3, unint64_t a4, char *a5)
{
  uint64_t result;
  unint64_t v10;
  unint64_t v12;
  int v13;
  size_t v14;
  ssize_t v15;
  _BOOL4 v16;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result)
  {
    v10 = *(_QWORD *)(a1 + 24);
    if (v10 >= a4 || v10 >= a4 + a3)
    {
      v12 = 0;
      v13 = *(_DWORD *)(a1 + 8);
      while (1)
      {
        v14 = a4 - v12 >= 0x40000000 ? 0x40000000 : a4 - v12;
        v15 = pread(v13, a5, v14, a3);
        v12 += v15 & ~(v15 >> 63);
        if (v15 < 0)
          break;
        v16 = v12 < a4;
        if (v15)
        {
          a3 += v15;
          a5 += v15;
          if (v12 < a4)
            continue;
        }
        return !v16;
      }
      if (*__error() != 4)
        return 0;
      v16 = v12 < a4;
      return !v16;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_20BE7E8D8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

void sub_20BE7E8E4(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BE7E8F8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20BE7E910(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51A148))
    return a1 + 24;
  else
    return 0;
}

void sub_20BE7E950(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_20BDDF694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_20BDDF6A8(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sub_20BE7E9E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *a1 = off_24C51A170;
  v2 = a1[7];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 - 8);
    if (v3)
    {
      v4 = v3 << 6;
      do
      {
        pthread_mutex_destroy((pthread_mutex_t *)(v2 - 64 + v4));
        v4 -= 64;
      }
      while (v4);
    }
    operator delete[]((void *)(v2 - 16));
  }
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[1];
  if (v6)
  {
    a1[2] = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_20BE7EA6C(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_20BE7E9E4(a1);
  operator delete(v1);
}

uint64_t sub_20BE7EA80(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
}

BOOL sub_20BE7EA90(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) != *(_QWORD *)(a1 + 16);
}

BOOL sub_20BE7EAA0(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  pthread_mutex_t *v4;
  _QWORD *v5;
  _BOOL8 v6;

  if (a2 >= (uint64_t)(a1[2] - a1[1]) >> 3)
    v3 = 0;
  else
    v3 = a2;
  v4 = (pthread_mutex_t *)(a1[7] + (v3 << 6));
  pthread_mutex_lock(v4);
  v5 = *(_QWORD **)(a1[1] + 8 * v3);
  std::istream::seekg();
  if (*(_DWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 32))
  {
    v6 = 0;
  }
  else
  {
    std::istream::read();
    v6 = *(_DWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 32) == 0;
  }
  pthread_mutex_unlock(v4);
  return v6;
}

void sub_20BE7EBBC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20BDC12F4(exception_object);
}

void sub_20BE7EBEC(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BE7EC00(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20BE7EC18(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51A218))
    return a1 + 24;
  else
    return 0;
}

void sub_20BE7EC58(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v2 + 16));
    operator delete((void *)v2);
  }
}

uint64_t *Alembic::Ogawa::v12::OArchive::OArchive(uint64_t *a1, uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v4 = operator new(8uLL);
  Alembic::Ogawa::v12::OStream::OStream(v4, a2);
  sub_20BE7EFD0(a1, (uint64_t)v4);
  a1[2] = 0;
  a1[3] = 0;
  v5 = operator new(0x18uLL);
  v6 = v5;
  v7 = (std::__shared_weak_count *)a1[1];
  v14 = *a1;
  v15 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  Alembic::Ogawa::v12::OGroup::OGroup(v5, &v14);
  sub_20BE7EDC0(a1 + 2, v6);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return a1;
}

{
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v4 = operator new(8uLL);
  Alembic::Ogawa::v12::OStream::OStream(v4, a2);
  sub_20BE7EFD0(a1, (uint64_t)v4);
  v5 = operator new(0x18uLL);
  v6 = v5;
  v7 = (std::__shared_weak_count *)a1[1];
  v14 = *a1;
  v15 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  Alembic::Ogawa::v12::OGroup::OGroup(v5, &v14);
  sub_20BE7F0B0(a1 + 2, v6);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return a1;
}

void sub_20BE7ED6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v9;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v9);
  _Unwind_Resume(a1);
}

void sub_20BE7EDC0(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20BE7F0B0(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20BE7EF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v9);
  _Unwind_Resume(a1);
}

void Alembic::Ogawa::v12::OArchive::~OArchive(Alembic::Ogawa::v12::OArchive *this)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((Alembic::Ogawa::v12::OArchive *)((char *)this + 16));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(this);
}

{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((Alembic::Ogawa::v12::OArchive *)((char *)this + 16));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(this);
}

BOOL Alembic::Ogawa::v12::OArchive::isValid(Alembic::Ogawa::v12::OStream **this)
{
  return Alembic::Ogawa::v12::OStream::isValid(*this);
}

uint64_t Alembic::Ogawa::v12::OArchive::getGroup@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 24);
  *a2 = *(_QWORD *)(this + 16);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *sub_20BE7EFD0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C51A240;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BE7F018(_Unwind_Exception *exception_object)
{
  Alembic::Ogawa::v12::OStream *v1;
  void *v3;

  if (v1)
  {
    Alembic::Ogawa::v12::OStream::~OStream(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20BE7F038(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BE7F04C(uint64_t a1)
{
  Alembic::Ogawa::v12::OStream *v1;
  void *v2;

  v1 = *(Alembic::Ogawa::v12::OStream **)(a1 + 24);
  if (v1)
  {
    Alembic::Ogawa::v12::OStream::~OStream(v1);
    operator delete(v2);
  }
}

uint64_t sub_20BE7F070(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51A290))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20BE7F0B0(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C51A2B8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  sub_20BDEA008((uint64_t)a1, a2, (uint64_t)a2);
  return a1;
}

void sub_20BE7F108(_Unwind_Exception *exception_object)
{
  Alembic::Ogawa::v12::OGroup *v1;
  void *v3;

  if (v1)
  {
    Alembic::Ogawa::v12::OGroup::~OGroup(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20BE7F128(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BE7F13C(uint64_t a1)
{
  Alembic::Ogawa::v12::OGroup *v1;
  void *v2;

  v1 = *(Alembic::Ogawa::v12::OGroup **)(a1 + 24);
  if (v1)
  {
    Alembic::Ogawa::v12::OGroup::~OGroup(v1);
    operator delete(v2);
  }
}

uint64_t sub_20BE7F160(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51A308))
    return a1 + 24;
  else
    return 0;
}

Alembic::Ogawa::v12::OData *Alembic::Ogawa::v12::OData::OData(Alembic::Ogawa::v12::OData *this)
{
  _OWORD *v2;

  v2 = operator new(0x20uLL);
  *v2 = 0u;
  v2[1] = 0u;
  *(_QWORD *)this = v2;
  return this;
}

{
  _OWORD *v2;

  v2 = operator new(0x20uLL);
  *v2 = 0u;
  v2[1] = 0u;
  *(_QWORD *)this = v2;
  return this;
}

_QWORD *Alembic::Ogawa::v12::OData::OData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v8 = operator new(0x20uLL);
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    *v8 = v9;
    v8[1] = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v8[2] = a3;
    v8[3] = a4;
    *a1 = v8;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    *v8 = v9;
    v8[1] = 0;
    v8[2] = a3;
    v8[3] = a4;
    *a1 = v8;
  }
  return a1;
}

void Alembic::Ogawa::v12::OData::~OData(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **this)
{
  sub_20BE7D37C(this, 0);
}

{
  sub_20BE7D37C(this, 0);
}

uint64_t **Alembic::Ogawa::v12::OData::rewrite(uint64_t **this, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t **v4;
  uint64_t ***v5;
  uint64_t **v7;
  BOOL v8;

  if (a2)
  {
    v4 = this;
    v5 = (uint64_t ***)*this;
    this = (uint64_t **)**this;
    if (this)
    {
      v7 = v5[3];
      if (v7)
        v8 = a4 + a2 > (unint64_t)v7;
      else
        v8 = 1;
      if (!v8)
      {
        Alembic::Ogawa::v12::OStream::seek(this, (uint64_t)v5[2] + a4 + 8);
        return (uint64_t **)Alembic::Ogawa::v12::OStream::write((_QWORD *)**v4, a3, a2);
      }
    }
  }
  return this;
}

uint64_t Alembic::Ogawa::v12::OData::getSize(Alembic::Ogawa::v12::OData *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 24);
}

uint64_t Alembic::Ogawa::v12::OData::getPos(Alembic::Ogawa::v12::OData *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 16);
}

_QWORD *Alembic::Ogawa::v12::OGroup::OGroup(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _OWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  *a1 = 0;
  a1[1] = 0;
  v6 = operator new(0x48uLL);
  a1[2] = v6;
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  sub_20BDE881C(v6, *(uint64_t **)(*a2 + 16));
  v7 = (_QWORD *)(a1[2] + 16);
  v8 = (std::__shared_weak_count *)a2[1];
  v15 = *a2;
  v16 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v17 = a3;
  sub_20BE7F4AC(v7, (uint64_t)&v15);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_QWORD *)(a1[2] + 64) = 0x7FFFFFFFFFFFFFFFLL;
  return a1;
}

void sub_20BE7F480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t *v3;
  std::__shared_weak_count *v5;
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  sub_20BE808B8(v3, 0);
  v5 = *(std::__shared_weak_count **)(v2 + 8);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE7F4AC(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)sub_20BDE4FF4(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    v16[2] = v14 + 24;
    sub_20BE13050(a1, v16);
    v8 = a1[1];
    result = sub_20BE130B4((uint64_t)v16);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 16);
    v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return result;
}

void sub_20BE7F5BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE130B4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *Alembic::Ogawa::v12::OGroup::OGroup(_QWORD *a1, uint64_t *a2)
{
  _OWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;

  *a1 = 0;
  a1[1] = 0;
  v4 = operator new(0x48uLL);
  a1[2] = v4;
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  sub_20BDE881C(v4, a2);
  v5 = (_QWORD *)(a1[2] + 16);
  v11 = 0;
  v12 = 0;
  v10 = 0;
  sub_20BE7F4AC(v5, (uint64_t)&v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)(a1[2] + 64) = 0x7FFFFFFFFFFFFFFFLL;
  return a1;
}

void sub_20BE7F6C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va1);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  sub_20BE808B8(v3, 0);
  v5 = *(std::__shared_weak_count **)(v2 + 8);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

void Alembic::Ogawa::v12::OGroup::~OGroup(Alembic::Ogawa::v12::OGroup *this)
{
  std::__shared_weak_count *v2;

  Alembic::Ogawa::v12::OGroup::freeze(this);
  sub_20BE808B8((uint64_t *)this + 2, 0);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void Alembic::Ogawa::v12::OGroup::freeze(Alembic::Ogawa::v12::OGroup *this)
{
  _QWORD **v1;
  uint64_t v3;
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **v5;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v9;
  uint64_t v10;

  v1 = (_QWORD **)*((_QWORD *)this + 2);
  if (v1[8] == (_QWORD *)0x7FFFFFFFFFFFFFFFLL)
  {
    if (v1[5] == v1[6])
    {
      v1[8] = 0;
    }
    else
    {
      v3 = Alembic::Ogawa::v12::OStream::getAndSeekEndPos((Alembic::Ogawa::v12::OStream *)*v1);
      v4 = *((_QWORD *)this + 2);
      *(_QWORD *)(v4 + 64) = v3;
      v10 = (uint64_t)(*(_QWORD *)(v4 + 48) - *(_QWORD *)(v4 + 40)) >> 3;
      Alembic::Ogawa::v12::OStream::write(*(_QWORD **)v4, &v10, 8);
      Alembic::Ogawa::v12::OStream::write(**((_QWORD ***)this + 2), *(const void **)(*((_QWORD *)this + 2) + 40), 8 * v10);
      v1 = (_QWORD **)*((_QWORD *)this + 2);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **)(v1 + 3);
    v6 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v1[2];
    if (v6 != (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v1[3])
    {
      do
      {
        if (*(_QWORD *)v6 || *((_QWORD *)v6 + 2))
        {
          v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
          v8 = *(_QWORD *)(v7 + 64);
          if (v8 != 0x7FFFFFFFFFFFFFFFLL)
          {
            Alembic::Ogawa::v12::OStream::seek(*v1, v8 + 8 * *((_QWORD *)v6 + 2) + 8);
            Alembic::Ogawa::v12::OStream::write(**((_QWORD ***)this + 2), (const void *)(*((_QWORD *)this + 2) + 64), 8);
            v1 = (_QWORD **)*((_QWORD *)this + 2);
            v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
          }
          *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8 * *((_QWORD *)v6 + 2)) = v1[8];
        }
        else
        {
          Alembic::Ogawa::v12::OStream::seek(*v1, 8);
          Alembic::Ogawa::v12::OStream::write(**((_QWORD ***)this + 2), (const void *)(*((_QWORD *)this + 2) + 64), 8);
          v1 = (_QWORD **)*((_QWORD *)this + 2);
        }
        v6 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)v6 + 24);
      }
      while (v6 != (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v1[3]);
      v5 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **)(v1 + 3);
      v9 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v1[2];
      while (v6 != v9)
      {
        v6 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)v6 - 24);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v6);
      }
      v6 = v9;
    }
    *v5 = v6;
  }
}

void Alembic::Ogawa::v12::OGroup::addGroup(Alembic::Ogawa::v12::OGroup *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  unint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *a2 = 0;
  a2[1] = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  if (v3[8] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = v3[7];
    v6 = (char *)v3[6];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (char *)v3[5];
      v9 = (v6 - v8) >> 3;
      if ((unint64_t)(v9 + 1) >> 61)
        sub_20BDDF694();
      v10 = v5 - (_QWORD)v8;
      v11 = (uint64_t)(v5 - (_QWORD)v8) >> 2;
      if (v11 <= v9 + 1)
        v11 = v9 + 1;
      if (v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
      {
        v13 = (char *)sub_20BDDF6A8((uint64_t)(v3 + 7), v12);
        v8 = (char *)v3[5];
        v6 = (char *)v3[6];
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      v15 = &v13[8 * v12];
      *(_QWORD *)v14 = 0;
      v7 = v14 + 8;
      while (v6 != v8)
      {
        v16 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v14 - 1) = v16;
        v14 -= 8;
      }
      v3[5] = v14;
      v3[6] = v7;
      v3[7] = v15;
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      v7 = v6 + 8;
    }
    v3[6] = v7;
    v17 = operator new(0x18uLL);
    sub_20BDE70B8(&v21, this);
    Alembic::Ogawa::v12::OGroup::OGroup(v17, &v21, ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) - *(_QWORD *)(*((_QWORD *)this + 2) + 40)) >> 3) - 1);
    sub_20BE7EDC0(a2, v17);
    v18 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

void sub_20BE7FA3C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

BOOL Alembic::Ogawa::v12::OGroup::isFrozen(Alembic::Ogawa::v12::OGroup *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 64) != 0x7FFFFFFFFFFFFFFFLL;
}

void Alembic::Ogawa::v12::OGroup::createData(Alembic::Ogawa::v12::OGroup *this@<X0>, const void *a2@<X2>, uint64_t a3@<X1>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  Alembic::Ogawa::v12::OData *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;

  *a4 = 0;
  a4[1] = 0;
  v5 = *((_QWORD *)this + 2);
  if (*(_QWORD *)(v5 + 64) == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (a3)
    {
      v9 = Alembic::Ogawa::v12::OStream::getAndSeekEndPos(*(Alembic::Ogawa::v12::OStream **)v5);
      v35 = a3;
      Alembic::Ogawa::v12::OStream::write(**((_QWORD ***)this + 2), &v35, 8);
      Alembic::Ogawa::v12::OStream::write(**((_QWORD ***)this + 2), a2, a3);
      v10 = operator new(8uLL);
      v11 = (uint64_t)v10;
      v12 = (uint64_t *)*((_QWORD *)this + 2);
      v14 = *v12;
      v13 = (std::__shared_weak_count *)v12[1];
      v33 = v14;
      v34 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      Alembic::Ogawa::v12::OData::OData(v10, &v33, v9, a3);
      sub_20BE7FCEC(a4, v11);
      v17 = v34;
      if (v34)
      {
        v18 = (unint64_t *)&v34->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    else
    {
      v20 = *(_QWORD *)(v5 + 56);
      v21 = *(char **)(v5 + 48);
      if ((unint64_t)v21 >= v20)
      {
        v23 = *(char **)(v5 + 40);
        v24 = (v21 - v23) >> 3;
        if ((unint64_t)(v24 + 1) >> 61)
          sub_20BDDF694();
        v25 = v20 - (_QWORD)v23;
        v26 = (uint64_t)(v20 - (_QWORD)v23) >> 2;
        if (v26 <= v24 + 1)
          v26 = v24 + 1;
        if (v25 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          v28 = (char *)sub_20BDDF6A8(v5 + 56, v27);
          v23 = *(char **)(v5 + 40);
          v21 = *(char **)(v5 + 48);
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[8 * v24];
        v30 = &v28[8 * v27];
        *(_QWORD *)v29 = 0x8000000000000000;
        v22 = v29 + 8;
        while (v21 != v23)
        {
          v31 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v29 - 1) = v31;
          v29 -= 8;
        }
        *(_QWORD *)(v5 + 40) = v29;
        *(_QWORD *)(v5 + 48) = v22;
        *(_QWORD *)(v5 + 56) = v30;
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_QWORD *)v21 = 0x8000000000000000;
        v22 = v21 + 8;
      }
      *(_QWORD *)(v5 + 48) = v22;
      v32 = (Alembic::Ogawa::v12::OData *)operator new(8uLL);
      Alembic::Ogawa::v12::OData::OData(v32);
      sub_20BE7FCEC(a4, (uint64_t)v32);
    }
  }
}

void sub_20BE7FC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;
  void *v11;

  operator delete(v11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  _Unwind_Resume(a1);
}

void sub_20BE7FCEC(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20BDECC34(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void Alembic::Ogawa::v12::OGroup::addData(Alembic::Ogawa::v12::OGroup *this@<X0>, const void *a2@<X2>, uint64_t a3@<X1>, Alembic::Ogawa::v12::OData **a4@<X8>)
{
  _QWORD *v6;
  uint64_t Pos;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t *v18;
  char *v19;
  unint64_t v20;

  Alembic::Ogawa::v12::OGroup::createData(this, a2, a3, a4);
  if (*a4)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 2);
    Pos = Alembic::Ogawa::v12::OData::getPos(*a4);
    v8 = v6[7];
    v9 = Pos | 0x8000000000000000;
    v10 = (unint64_t *)v6[6];
    if ((unint64_t)v10 >= v8)
    {
      v12 = (unint64_t *)v6[5];
      v13 = v10 - v12;
      if ((unint64_t)(v13 + 1) >> 61)
        sub_20BDDF694();
      v14 = v8 - (_QWORD)v12;
      v15 = (uint64_t)(v8 - (_QWORD)v12) >> 2;
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      if (v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
      {
        v17 = (char *)sub_20BDDF6A8((uint64_t)(v6 + 7), v16);
        v12 = (unint64_t *)v6[5];
        v10 = (unint64_t *)v6[6];
      }
      else
      {
        v17 = 0;
      }
      v18 = (unint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v11 = v18 + 1;
      while (v10 != v12)
      {
        v20 = *--v10;
        *--v18 = v20;
      }
      v6[5] = v18;
      v6[6] = v11;
      v6[7] = v19;
      if (v12)
        operator delete(v12);
    }
    else
    {
      *v10 = v9;
      v11 = v10 + 1;
    }
    v6[6] = v11;
  }
}

void sub_20BE7FE58(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

void Alembic::Ogawa::v12::OGroup::createData(Alembic::Ogawa::v12::OGroup *this@<X0>, const unint64_t *a2@<X2>, const void **a3@<X3>, uint64_t a4@<X1>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  const unint64_t *v9;
  uint64_t v11;
  const unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  Alembic::Ogawa::v12::OData *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;

  *a5 = 0;
  a5[1] = 0;
  v6 = *((_QWORD *)this + 2);
  if (*(_QWORD *)(v6 + 64) != 0x7FFFFFFFFFFFFFFFLL)
    return;
  v7 = a4;
  if (a4)
  {
    v9 = a2;
    v11 = 0;
    v12 = a2;
    v13 = a4;
    do
    {
      v14 = *v12++;
      v11 += v14;
      --v13;
    }
    while (v13);
    v43 = v11;
    if (v11)
    {
      v15 = Alembic::Ogawa::v12::OStream::getAndSeekEndPos(*(Alembic::Ogawa::v12::OStream **)v6);
      Alembic::Ogawa::v12::OStream::write(**((_QWORD ***)this + 2), &v43, 8);
      for (; v7; --v7)
      {
        v17 = *v9++;
        v16 = v17;
        if (v17)
          Alembic::Ogawa::v12::OStream::write(**((_QWORD ***)this + 2), *a3, v16);
        ++a3;
      }
      v18 = operator new(8uLL);
      v19 = (uint64_t)v18;
      v20 = (uint64_t *)*((_QWORD *)this + 2);
      v22 = *v20;
      v21 = (std::__shared_weak_count *)v20[1];
      v41 = v22;
      v42 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
      }
      Alembic::Ogawa::v12::OData::OData(v18, &v41, v15, v43);
      sub_20BE7FCEC(a5, v19);
      v25 = v42;
      if (v42)
      {
        v26 = (unint64_t *)&v42->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      return;
    }
  }
  else
  {
    v43 = 0;
  }
  v28 = *(_QWORD *)(v6 + 56);
  v29 = *(char **)(v6 + 48);
  if ((unint64_t)v29 >= v28)
  {
    v31 = *(char **)(v6 + 40);
    v32 = (v29 - v31) >> 3;
    if ((unint64_t)(v32 + 1) >> 61)
      sub_20BDDF694();
    v33 = v28 - (_QWORD)v31;
    v34 = (uint64_t)(v28 - (_QWORD)v31) >> 2;
    if (v34 <= v32 + 1)
      v34 = v32 + 1;
    if (v33 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v34;
    if (v35)
    {
      v36 = (char *)sub_20BDDF6A8(v6 + 56, v35);
      v31 = *(char **)(v6 + 40);
      v29 = *(char **)(v6 + 48);
    }
    else
    {
      v36 = 0;
    }
    v37 = &v36[8 * v32];
    v38 = &v36[8 * v35];
    *(_QWORD *)v37 = 0x8000000000000000;
    v30 = v37 + 8;
    while (v29 != v31)
    {
      v39 = *((_QWORD *)v29 - 1);
      v29 -= 8;
      *((_QWORD *)v37 - 1) = v39;
      v37 -= 8;
    }
    *(_QWORD *)(v6 + 40) = v37;
    *(_QWORD *)(v6 + 48) = v30;
    *(_QWORD *)(v6 + 56) = v38;
    if (v31)
      operator delete(v31);
  }
  else
  {
    *(_QWORD *)v29 = 0x8000000000000000;
    v30 = v29 + 8;
  }
  *(_QWORD *)(v6 + 48) = v30;
  v40 = (Alembic::Ogawa::v12::OData *)operator new(8uLL);
  Alembic::Ogawa::v12::OData::OData(v40);
  sub_20BE7FCEC(a5, (uint64_t)v40);
}

void sub_20BE800A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v2);
  _Unwind_Resume(a1);
}

void Alembic::Ogawa::v12::OGroup::addData(Alembic::Ogawa::v12::OGroup *this@<X0>, const unint64_t *a2@<X2>, const void **a3@<X3>, uint64_t a4@<X1>, Alembic::Ogawa::v12::OData **a5@<X8>)
{
  _QWORD *v7;
  uint64_t Pos;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;

  Alembic::Ogawa::v12::OGroup::createData(this, a2, a3, a4, a5);
  if (*a5)
  {
    v7 = (_QWORD *)*((_QWORD *)this + 2);
    Pos = Alembic::Ogawa::v12::OData::getPos(*a5);
    v9 = v7[7];
    v10 = Pos | 0x8000000000000000;
    v11 = (unint64_t *)v7[6];
    if ((unint64_t)v11 >= v9)
    {
      v13 = (unint64_t *)v7[5];
      v14 = v11 - v13;
      if ((unint64_t)(v14 + 1) >> 61)
        sub_20BDDF694();
      v15 = v9 - (_QWORD)v13;
      v16 = (uint64_t)(v9 - (_QWORD)v13) >> 2;
      if (v16 <= v14 + 1)
        v16 = v14 + 1;
      if (v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
      {
        v18 = (char *)sub_20BDDF6A8((uint64_t)(v7 + 7), v17);
        v13 = (unint64_t *)v7[5];
        v11 = (unint64_t *)v7[6];
      }
      else
      {
        v18 = 0;
      }
      v19 = (unint64_t *)&v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v10;
      v12 = v19 + 1;
      while (v11 != v13)
      {
        v21 = *--v11;
        *--v19 = v21;
      }
      v7[5] = v19;
      v7[6] = v12;
      v7[7] = v20;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v11 = v10;
      v12 = v11 + 1;
    }
    v7[6] = v12;
  }
}

void sub_20BE801F0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

void Alembic::Ogawa::v12::OGroup::addData(uint64_t a1, Alembic::Ogawa::v12::OData **a2)
{
  _QWORD *v2;
  uint64_t Pos;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t *v14;
  char *v15;
  unint64_t v16;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2[8] == 0x7FFFFFFFFFFFFFFFLL)
  {
    Pos = Alembic::Ogawa::v12::OData::getPos(*a2);
    v4 = v2[7];
    v5 = Pos | 0x8000000000000000;
    v6 = (unint64_t *)v2[6];
    if ((unint64_t)v6 >= v4)
    {
      v8 = (unint64_t *)v2[5];
      v9 = v6 - v8;
      if ((unint64_t)(v9 + 1) >> 61)
        sub_20BDDF694();
      v10 = v4 - (_QWORD)v8;
      v11 = (uint64_t)(v4 - (_QWORD)v8) >> 2;
      if (v11 <= v9 + 1)
        v11 = v9 + 1;
      if (v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
      {
        v13 = (char *)sub_20BDDF6A8((uint64_t)(v2 + 7), v12);
        v8 = (unint64_t *)v2[5];
        v6 = (unint64_t *)v2[6];
      }
      else
      {
        v13 = 0;
      }
      v14 = (unint64_t *)&v13[8 * v9];
      v15 = &v13[8 * v12];
      *v14 = v5;
      v7 = v14 + 1;
      while (v6 != v8)
      {
        v16 = *--v6;
        *--v14 = v16;
      }
      v2[5] = v14;
      v2[6] = v7;
      v2[7] = v15;
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v6 = v5;
      v7 = v6 + 1;
    }
    v2[6] = v7;
  }
}

void Alembic::Ogawa::v12::OGroup::addGroup(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void **v7;
  char *v8;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v2 = (_QWORD *)a1[2];
  if (v2[8] != 0x7FFFFFFFFFFFFFFFLL)
    return;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = v2[7];
  v7 = (void **)(v2 + 5);
  v8 = (char *)v2[6];
  if (v5 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if ((unint64_t)v8 >= v6)
    {
      v19 = (char *)*v7;
      v20 = (v8 - (_BYTE *)*v7) >> 3;
      if ((unint64_t)(v20 + 1) >> 61)
        goto LABEL_47;
      v21 = v6 - (_QWORD)v19;
      v22 = (uint64_t)(v6 - (_QWORD)v19) >> 2;
      if (v22 <= v20 + 1)
        v22 = v20 + 1;
      if (v21 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
      {
        v24 = (char *)sub_20BDDF6A8((uint64_t)(v2 + 7), v23);
        v19 = (char *)v2[5];
        v8 = (char *)v2[6];
        v5 = *(_QWORD *)(v4 + 64);
      }
      else
      {
        v24 = 0;
      }
      v36 = &v24[8 * v20];
      v37 = &v24[8 * v23];
      *(_QWORD *)v36 = v5;
      v11 = v36 + 8;
      while (v8 != v19)
      {
        v38 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v36 - 1) = v38;
        v36 -= 8;
      }
      v2[5] = v36;
      v2[6] = v11;
      v2[7] = v37;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_QWORD *)v8 = v5;
      v11 = v8 + 8;
    }
    v2[6] = v11;
    return;
  }
  if ((unint64_t)v8 >= v6)
  {
    v12 = (char *)*v7;
    v13 = (v8 - (_BYTE *)*v7) >> 3;
    v14 = v13 + 1;
    if (!((unint64_t)(v13 + 1) >> 61))
    {
      v15 = v6 - (_QWORD)v12;
      v16 = (uint64_t)(v6 - (_QWORD)v12) >> 2;
      if (v16 > v14)
        v14 = v16;
      if (v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      if (v17)
      {
        v18 = (char *)sub_20BDDF6A8((uint64_t)(v2 + 7), v17);
        v12 = (char *)v2[5];
        v8 = (char *)v2[6];
      }
      else
      {
        v18 = 0;
      }
      v25 = &v18[8 * v13];
      v26 = &v18[8 * v17];
      *(_QWORD *)v25 = 0;
      v10 = v25 + 8;
      while (v8 != v12)
      {
        v27 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v25 - 1) = v27;
        v25 -= 8;
      }
      v2[5] = v25;
      v2[6] = v10;
      v2[7] = v26;
      if (v12)
        operator delete(v12);
      goto LABEL_29;
    }
LABEL_47:
    sub_20BDDF694();
  }
  *(_QWORD *)v8 = 0;
  v10 = v8 + 8;
LABEL_29:
  v2[6] = v10;
  v28 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 16);
  sub_20BDE70B8(&v39, a1);
  v29 = ((uint64_t)(*(_QWORD *)(a1[2] + 48) - *(_QWORD *)(a1[2] + 40)) >> 3) - 1;
  v40 = v39;
  v39 = 0uLL;
  v41 = v29;
  sub_20BE7F4AC(v28, (uint64_t)&v40);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_20BE8056C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void Alembic::Ogawa::v12::OGroup::addEmptyGroup(Alembic::Ogawa::v12::OGroup *this)
{
  _QWORD *v1;
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v1 = (_QWORD *)*((_QWORD *)this + 2);
  if (v1[8] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v2 = v1[7];
    v3 = (char *)v1[6];
    if ((unint64_t)v3 >= v2)
    {
      v5 = (char *)v1[5];
      v6 = (v3 - v5) >> 3;
      if ((unint64_t)(v6 + 1) >> 61)
        sub_20BDDF694();
      v7 = v2 - (_QWORD)v5;
      v8 = (uint64_t)(v2 - (_QWORD)v5) >> 2;
      if (v8 <= v6 + 1)
        v8 = v6 + 1;
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
        v9 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v9 = v8;
      if (v9)
      {
        v10 = (char *)sub_20BDDF6A8((uint64_t)(v1 + 7), v9);
        v5 = (char *)v1[5];
        v3 = (char *)v1[6];
      }
      else
      {
        v10 = 0;
      }
      v11 = &v10[8 * v6];
      v12 = &v10[8 * v9];
      *(_QWORD *)v11 = 0;
      v4 = v11 + 8;
      while (v3 != v5)
      {
        v13 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        *((_QWORD *)v11 - 1) = v13;
        v11 -= 8;
      }
      v1[5] = v11;
      v1[6] = v4;
      v1[7] = v12;
      if (v5)
        operator delete(v5);
    }
    else
    {
      *(_QWORD *)v3 = 0;
      v4 = v3 + 8;
    }
    v1[6] = v4;
  }
}

void Alembic::Ogawa::v12::OGroup::addEmptyData(Alembic::Ogawa::v12::OGroup *this)
{
  _QWORD *v1;
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v1 = (_QWORD *)*((_QWORD *)this + 2);
  if (v1[8] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v2 = v1[7];
    v3 = (char *)v1[6];
    if ((unint64_t)v3 >= v2)
    {
      v5 = (char *)v1[5];
      v6 = (v3 - v5) >> 3;
      if ((unint64_t)(v6 + 1) >> 61)
        sub_20BDDF694();
      v7 = v2 - (_QWORD)v5;
      v8 = (uint64_t)(v2 - (_QWORD)v5) >> 2;
      if (v8 <= v6 + 1)
        v8 = v6 + 1;
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
        v9 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v9 = v8;
      if (v9)
      {
        v10 = (char *)sub_20BDDF6A8((uint64_t)(v1 + 7), v9);
        v5 = (char *)v1[5];
        v3 = (char *)v1[6];
      }
      else
      {
        v10 = 0;
      }
      v11 = &v10[8 * v6];
      v12 = &v10[8 * v9];
      *(_QWORD *)v11 = 0x8000000000000000;
      v4 = v11 + 8;
      while (v3 != v5)
      {
        v13 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        *((_QWORD *)v11 - 1) = v13;
        v11 -= 8;
      }
      v1[5] = v11;
      v1[6] = v4;
      v1[7] = v12;
      if (v5)
        operator delete(v5);
    }
    else
    {
      *(_QWORD *)v3 = 0x8000000000000000;
      v4 = v3 + 8;
    }
    v1[6] = v4;
  }
}

uint64_t Alembic::Ogawa::v12::OGroup::getNumChildren(Alembic::Ogawa::v12::OGroup *this)
{
  return (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) - *(_QWORD *)(*((_QWORD *)this + 2) + 40)) >> 3;
}

BOOL Alembic::Ogawa::v12::OGroup::isChildGroup(Alembic::Ogawa::v12::OGroup *this, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 40);
  return a2 < (*(_QWORD *)(*((_QWORD *)this + 2) + 48) - v2) >> 3 && *(_QWORD *)(v2 + 8 * a2) >= 0;
}

uint64_t Alembic::Ogawa::v12::OGroup::isChildData(Alembic::Ogawa::v12::OGroup *this, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 40);
  if (a2 >= (*(_QWORD *)(*((_QWORD *)this + 2) + 48) - v2) >> 3)
    return 0;
  else
    return *(_QWORD *)(v2 + 8 * a2) >> 63;
}

BOOL Alembic::Ogawa::v12::OGroup::isChildEmptyGroup(Alembic::Ogawa::v12::OGroup *this, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 40);
  return a2 < (*(_QWORD *)(*((_QWORD *)this + 2) + 48) - v2) >> 3 && *(_QWORD *)(v2 + 8 * a2) == 0;
}

BOOL Alembic::Ogawa::v12::OGroup::isChildEmptyData(Alembic::Ogawa::v12::OGroup *this, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 40);
  return a2 < (*(_QWORD *)(*((_QWORD *)this + 2) + 48) - v2) >> 3 && *(_QWORD *)(v2 + 8 * a2) == 0x8000000000000000;
}

uint64_t Alembic::Ogawa::v12::OGroup::replaceData(uint64_t result, unint64_t a2, Alembic::Ogawa::v12::OData **a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 16) + 40);
  if (a2 < (*(_QWORD *)(*(_QWORD *)(result + 16) + 48) - v3) >> 3
    && (*(_QWORD *)(v3 + 8 * a2) & 0x8000000000000000) != 0)
  {
    v5 = result;
    result = Alembic::Ogawa::v12::OData::getPos(*a3);
    v6 = result | 0x8000000000000000;
    v9 = result | 0x8000000000000000;
    v7 = *(_QWORD *)(v5 + 16);
    v8 = *(_QWORD *)(v7 + 64);
    if (v8 != 0x7FFFFFFFFFFFFFFFLL)
    {
      Alembic::Ogawa::v12::OStream::seek(*(_QWORD **)v7, v8 + 8 * a2 + 8);
      result = (uint64_t)Alembic::Ogawa::v12::OStream::write(**(_QWORD ***)(v5 + 16), &v9, 8);
      v6 = v9;
      v7 = *(_QWORD *)(v5 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8 * a2) = v6;
  }
  return result;
}

void sub_20BE808B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    sub_20BE808E4(v3);
    operator delete(v4);
  }
}

void sub_20BE808E4(uint64_t a1)
{
  void *v2;
  void **v3;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  v3 = (void **)(a1 + 16);
  sub_20BE12BE4(&v3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)a1);
}

uint64_t **Alembic::Ogawa::v12::OStream::OStream(uint64_t **a1, __int128 *a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)operator new(0x78uLL);
  sub_20BE80FC4((uint64_t)v4, a2);
  *a1 = v4;
  Alembic::Ogawa::v12::OStream::init(a1);
  return a1;
}

void sub_20BE8097C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20BE8139C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t Alembic::Ogawa::v12::OStream::init(uint64_t **this)
{
  uint64_t result;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;

  result = **this;
  if (result)
  {
    std::ostream::write();
    result = std::ostream::flush();
    v3 = *this;
    v4 = (*this)[6];
    v5 = (*this)[5] + 16;
    (*this)[5] = v5;
    if (v5 > v4)
      v3[6] = v5;
  }
  return result;
}

uint64_t **Alembic::Ogawa::v12::OStream::OStream(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)operator new(0x78uLL);
  sub_20BE81210((uint64_t)v4, a2);
  *a1 = v4;
  Alembic::Ogawa::v12::OStream::init(a1);
  return a1;
}

void sub_20BE80A94(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20BE8139C(v1, 0);
  _Unwind_Resume(a1);
}

void Alembic::Ogawa::v12::OStream::~OStream(Alembic::Ogawa::v12::OStream *this)
{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _BYTE v6[16];
  _QWORD v7[17];
  _BYTE v8[128];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = **(_QWORD ***)this;
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)this + 32);
    MEMORY[0x212B92B68](v6, v2);
    v4 = (char *)v2 + *(_QWORD *)(*v2 - 24);
    if ((v4[32] & 5) == 0)
    {
      v5 = *((_QWORD *)v4 + 5);
      memset(v8, 0, sizeof(v8));
      v9 = v3 + 5;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v5 + 40))(v7, v5, v8, 16);
      if (v7[16] == -1)
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) | 4);
    }
    MEMORY[0x212B92B74](v6);
    std::ostream::write();
    std::ostream::flush();
  }
  sub_20BE8139C((uint64_t *)this, 0);
}

void sub_20BE80C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
  {
    MEMORY[0x212B92B74](&a10);
    sub_20BDC12F4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL Alembic::Ogawa::v12::OStream::isValid(Alembic::Ogawa::v12::OStream *this)
{
  return **(_QWORD **)this != 0;
}

uint64_t Alembic::Ogawa::v12::OStream::getAndSeekEndPos(Alembic::Ogawa::v12::OStream *this)
{
  _QWORD *v1;
  pthread_mutex_t *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[16];
  _QWORD v13[17];
  _BYTE v14[128];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD **)this;
  if (!**(_QWORD **)this)
    return 0;
  v3 = (pthread_mutex_t *)(v1 + 7);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 7));
  v4 = *(_QWORD **)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 48);
  v4[5] = v5;
  v6 = (_QWORD *)*v4;
  v7 = v4[4];
  MEMORY[0x212B92B68](v12, *v4);
  v8 = (char *)v6 + *(_QWORD *)(*v6 - 24);
  if ((v8[32] & 5) == 0)
  {
    v9 = *((_QWORD *)v8 + 5);
    memset(v14, 0, sizeof(v14));
    v15 = v7 + v5;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v9 + 40))(v13, v9, v14, 16);
    if (v13[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)), *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 32) | 4);
  }
  MEMORY[0x212B92B74](v12);
  v10 = *(_QWORD *)(*(_QWORD *)this + 40);
  pthread_mutex_unlock(v3);
  return v10;
}

void sub_20BE80D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pthread_mutex_t *v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x212B92B74](va);
  pthread_mutex_unlock(v2);
  _Unwind_Resume(a1);
}

_QWORD *Alembic::Ogawa::v12::OStream::seek(_QWORD *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD **v4;
  pthread_mutex_t *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE v10[16];
  _QWORD v11[17];
  _BYTE v12[128];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*this;
  if (*(_QWORD *)*this)
  {
    v4 = (_QWORD **)this;
    v5 = (pthread_mutex_t *)(v2 + 7);
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 7));
    v6 = (_QWORD *)**v4;
    v7 = (*v4)[4];
    MEMORY[0x212B92B68](v10, v6);
    v8 = (char *)v6 + *(_QWORD *)(*v6 - 24);
    if ((v8[32] & 5) == 0)
    {
      v9 = *((_QWORD *)v8 + 5);
      memset(v12, 0, sizeof(v12));
      v13 = v7 + a2;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v9 + 40))(v11, v9, v12, 16);
      if (v11[16] == -1)
        std::ios_base::clear((std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)), *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 32) | 4);
    }
    MEMORY[0x212B92B74](v10);
    (*v4)[5] = a2;
    return (_QWORD *)pthread_mutex_unlock(v5);
  }
  return this;
}

void sub_20BE80EE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pthread_mutex_t *v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x212B92B74](va);
  pthread_mutex_unlock(v2);
  _Unwind_Resume(a1);
}

_QWORD *Alembic::Ogawa::v12::OStream::write(_QWORD *this, const void *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  pthread_mutex_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v3 = (_QWORD *)*this;
  if (*(_QWORD *)*this)
  {
    v5 = (uint64_t)this;
    v6 = (pthread_mutex_t *)(v3 + 7);
    pthread_mutex_lock((pthread_mutex_t *)(v3 + 7));
    std::ostream::write();
    std::ostream::flush();
    v7 = *(_QWORD *)v5;
    v8 = *(_QWORD *)(*(_QWORD *)v5 + 48);
    v9 = *(_QWORD *)(*(_QWORD *)v5 + 40) + a3;
    *(_QWORD *)(*(_QWORD *)v5 + 40) = v9;
    if (v9 > v8)
      *(_QWORD *)(v7 + 48) = v9;
    return (_QWORD *)pthread_mutex_unlock(v6);
  }
  return this;
}

void sub_20BE80FAC(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE80FC4(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  _QWORD *v4;
  std::ios_base *v5;

  *(_QWORD *)a1 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 8), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 56), 0);
  v4 = operator new(0x238uLL);
  sub_20BE81108(v4);
  if (v4[16])
  {
    *(_QWORD *)a1 = v4;
    v5 = (std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24));
    v5->__exceptions_ = 5;
    std::ios_base::clear(v5, v5->__rdstate_);
  }
  else
  {
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)), *(_DWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 32) | 4);
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  }
  return a1;
}

void sub_20BE810C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  pthread_mutex_t *v3;
  void *v4;

  operator delete(v4);
  pthread_mutex_destroy(v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE81108(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  a1[52] = MEMORY[0x24BEDB840] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x212B92AA8](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_20BE811D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x212B92EB0](v1 + 416);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE81210(uint64_t a1, uint64_t a2)
{
  std::ios_base *v3;
  uint64_t v4;
  uint64_t v5;
  std::runtime_error *exception;
  _QWORD v8[16];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 56), 0);
  if (*(_QWORD *)a1)
  {
    v3 = (std::ios_base *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24));
    v3->__exceptions_ = 5;
    std::ios_base::clear(v3, v3->__rdstate_);
    v4 = *(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24);
    if ((*(_BYTE *)(v4 + 32) & 5) != 0)
    {
      *(_QWORD *)(a1 + 32) = -1;
    }
    else
    {
      (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 40) + 32))(v8, *(_QWORD *)(v4 + 40), 0, 1, 16);
      v5 = v9;
      *(_QWORD *)(a1 + 32) = v9;
      if (v5 != -1)
        return a1;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Illegal start of Ogawa stream");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return a1;
}

void sub_20BE81348(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v2;
  void *v3;
  void **v4;

  __cxa_free_exception(v3);
  pthread_mutex_destroy(v2);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v4);
  _Unwind_Resume(a1);
}

void sub_20BE8139C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20BE813C8(v3);
    operator delete(v4);
  }
}

uint64_t sub_20BE813C8(uint64_t a1)
{
  const void *v2;
  char *v3;
  char *v4;

  if (*(char *)(a1 + 31) < 0)
  {
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_10;
  }
  else if (!*(_BYTE *)(a1 + 31))
  {
    goto LABEL_10;
  }
  v2 = *(const void **)a1;
  if (*(_QWORD *)a1)
  {
    v3 = (char *)__dynamic_cast(v2, MEMORY[0x24BEDB6F0], MEMORY[0x24BEDB6F8], 0);
    if (v3)
    {
      v4 = v3;
      if (!std::filebuf::close())
        std::ios_base::clear((std::ios_base *)&v4[*(_QWORD *)(*(_QWORD *)v4 - 24)], *(_DWORD *)&v4[*(_QWORD *)(*(_QWORD *)v4 - 24) + 32] | 4);
      (*(void (**)(char *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
LABEL_10:
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 56));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20BE81480(float a1, uint64_t a2, int a3)
{
  if (a3 <= 2 && a1 <= 0.0)
    return (1 << a3);
  else
    return 8;
}

uint64_t OpenSubdiv::__aapl__::Sdc::Crease::DetermineVertexVertexRule(OpenSubdiv::__aapl__::Sdc::Crease *this, float a2, int a3, float *a4)
{
  unsigned int v5;
  uint64_t v6;
  float v7;

  if (a2 > 0.0)
    return 8;
  if (a3 < 1)
    return 1;
  v5 = 0;
  v6 = a3;
  do
  {
    v7 = *a4++;
    if (v7 > 0.0)
      ++v5;
    --v6;
  }
  while (v6);
  if (v5 <= 2)
    return (1 << v5);
  else
    return 8;
}

float OpenSubdiv::__aapl__::Sdc::Crease::ComputeFractionalWeightAtVertex(OpenSubdiv::__aapl__::Sdc::Crease *this, float a2, float a3, int a4, float *a5, const float *a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float result;

  v6 = a2 > 0.0 && a3 <= 0.0;
  if (a2 <= 0.0 || a3 > 0.0)
    a2 = 0.0;
  if (a6 && *((_BYTE *)this + 2))
  {
    if (a4 >= 1)
    {
      v7 = a4;
      do
      {
        if (*a5 > 0.0 && *a6 <= 0.0)
        {
          a2 = a2 + *a5;
          ++v6;
        }
        ++a6;
        ++a5;
        --v7;
      }
      while (v7);
    }
  }
  else if (a4 >= 1)
  {
    v8 = a4;
    do
    {
      v9 = *a5++;
      v10 = v9;
      v6 += v9 > 0.0 && v9 <= 1.0;
      if (v9 <= 0.0 || v9 > 1.0)
        v10 = -0.0;
      a2 = a2 + v10;
      --v8;
    }
    while (v8);
  }
  if (!v6)
    return 0.0;
  result = a2 / (float)v6;
  if (result > 1.0)
    return 1.0;
  return result;
}

float sub_20BE815C0(uint64_t a1, int a2, float *a3, float a4)
{
  float v4;
  int v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2 >= 2 && *(_BYTE *)(a1 + 2))
  {
    v4 = 0.0;
    if (a4 > 0.0)
    {
      v4 = 10.0;
      if (a4 < 10.0)
      {
        v5 = 0;
        v6 = a2;
        v7 = 0.0;
        do
        {
          v8 = *a3++;
          v9 = v8;
          v10 = v8 > 0.0 && v8 < 10.0;
          if (v8 <= 0.0 || v8 >= 10.0)
            v9 = -0.0;
          v7 = v7 + v9;
          v5 += v10;
          --v6;
        }
        while (v6);
        v11 = v5 != 0;
        v12 = v5 - 1;
        if (v12 != 0 && v11)
          a4 = (float)((float)((float)(v7 - a4) / (float)v12) * 0.25) + (float)(a4 * 0.75);
        return fmaxf(a4 + -1.0, 0.0);
      }
    }
  }
  else
  {
    v4 = 0.0;
    if (a4 > 0.0)
    {
      v4 = 10.0;
      if (a4 < 10.0)
      {
        v4 = 0.0;
        if (a4 > 1.0)
          return a4 + -1.0;
      }
    }
  }
  return v4;
}

uint64_t OpenSubdiv::__aapl__::Sdc::Crease::SubdivideEdgeSharpnessesAroundVertex(uint64_t this, int a2, float *a3, float *a4)
{
  int v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  int v14;
  uint64_t v15;
  float v16;
  float v17;

  if (a2 > 1 && *(_BYTE *)(this + 2))
  {
    if (*(_BYTE *)(this + 2) == 1)
    {
      v4 = 0;
      v5 = a2;
      v6 = 0.0;
      v7 = a2;
      v8 = a3;
      do
      {
        v9 = *v8++;
        v10 = v9;
        v4 += v9 > 0.0 && v9 < 10.0;
        if (v9 <= 0.0 || v9 >= 10.0)
          v10 = -0.0;
        v6 = v6 + v10;
        --v7;
      }
      while (v7);
      if (v4)
      {
        while (1)
        {
          v11 = *a3;
          v12 = 0.0;
          if (*a3 <= 0.0)
            goto LABEL_16;
          v12 = 10.0;
          if (v11 >= 10.0)
            goto LABEL_16;
          if (v4 == 1)
            break;
          v13 = (float)((float)((float)((float)(v6 - v11) / (float)(v4 - 1)) * 0.25) + (float)(v11 * 0.75)) + -1.0;
          v12 = 0.0;
          if (v13 <= 0.0)
            goto LABEL_16;
LABEL_17:
          *a4++ = v13;
          ++a3;
          if (!--v5)
            return this;
        }
        v12 = v11 + -1.0;
        if (v11 <= 1.0)
          v12 = 0.0;
LABEL_16:
        v13 = v12;
        goto LABEL_17;
      }
      do
      {
        v14 = *(_DWORD *)a3++;
        *(_DWORD *)a4++ = v14;
        --v5;
      }
      while (v5);
    }
  }
  else if (a2 >= 1)
  {
    v15 = a2;
    do
    {
      v16 = *a3;
      v17 = 0.0;
      if (*a3 > 0.0)
      {
        v17 = 10.0;
        if (v16 < 10.0)
        {
          v17 = 0.0;
          if (v16 > 1.0)
            v17 = v16 + -1.0;
        }
      }
      *a4++ = v17;
      ++a3;
      --v15;
    }
    while (v15);
  }
  return this;
}

double sub_20BE817EC()
{
  char *v0;
  double result;

  if (!qword_254784EB0)
  {
    v0 = (char *)operator new[](0x48uLL);
    qword_254784EB0 = (uint64_t)v0;
    *(_QWORD *)v0 = "bilinear";
    *(_OWORD *)(v0 + 8) = xmmword_20CA539A0;
    *((_QWORD *)v0 + 3) = "catmark";
    *((_OWORD *)v0 + 2) = xmmword_20CA539B0;
    *((_QWORD *)v0 + 6) = "loop";
    *(_QWORD *)&result = 0x300000001;
    *(_OWORD *)(v0 + 56) = xmmword_20CA539C0;
  }
  return result;
}

uint64_t sub_20BE81864(unsigned int a1)
{
  uint64_t v2;

  sub_20BE817EC();
  return *(unsigned int *)(v2 + 24 * a1 + 8);
}

uint64_t sub_20BE81890(unsigned int a1)
{
  uint64_t v2;

  sub_20BE817EC();
  return *(unsigned int *)(v2 + 24 * a1 + 12);
}

uint64_t sub_20BE818BC(unsigned int a1)
{
  uint64_t v2;

  sub_20BE817EC();
  return *(unsigned int *)(v2 + 24 * a1 + 16);
}

uint64_t sub_20BE818E8(unsigned int a1)
{
  uint64_t v2;

  sub_20BE817EC();
  return *(unsigned int *)(v2 + 24 * a1 + 20);
}

double sub_20BE81914(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 8) = 1280;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 10) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  return result;
}

_QWORD *sub_20BE81964(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[21];
  if (v3)
  {
    a1[22] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[18];
  if (v4)
  {
    a1[19] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[15];
  if (v5)
  {
    a1[16] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[12];
  if (v6)
  {
    a1[13] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[9];
  if (v7)
  {
    a1[10] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[6];
  if (v8)
  {
    a1[7] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[3];
  if (v9)
  {
    a1[4] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_20BE81A08(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 8) = *a2;
  return result;
}

void sub_20BE81A14(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int16 v7;
  char v8;

  sub_20BE81ACC((uint64_t)(a1 + 3), (int)((uint64_t)(*(_QWORD *)(*a1 + 56) - *(_QWORD *)(*a1 + 48)) >> 2));
  v2 = a1[6];
  v8 = 0;
  v3 = *a1;
  v4 = *(int *)(*a1 + 4);
  v5 = a1[7] - v2;
  if (v4 <= v5)
  {
    if (v4 < v5)
      a1[7] = v2 + v4;
  }
  else
  {
    sub_20BE82D08(a1 + 6, v4 - v5, &v8);
    v3 = *a1;
  }
  sub_20BE81AFC((uint64_t)(a1 + 9), *(int *)(v3 + 8));
  sub_20BE81ACC((uint64_t)(a1 + 12), *(int *)(*a1 + 8));
  v6 = (int)((uint64_t)(*(_QWORD *)(*a1 + 296) - *(_QWORD *)(*a1 + 288)) >> 2);
  v7 = 0;
  sub_20BE81B2C((uint64_t)(a1 + 15), v6, &v7);
}

void sub_20BE81ACC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_20BE82B00((char **)a1, a2 - v2);
  }
}

void sub_20BE81AFC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    sub_20BE82C08((char **)a1, a2 - v2);
  }
}

void sub_20BE81B2C(uint64_t a1, unint64_t a2, _WORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    sub_20BE82E20((void **)a1, a2 - v3, a3);
  }
}

void sub_20BE81B5C(uint64_t a1, int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = a2;
  sub_20BE81ACC(a1 + 144, a2);
  v6 = 0;
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176) - v4;
  if (v3 <= v5)
  {
    if (v3 < v5)
      *(_QWORD *)(a1 + 176) = v4 + v3;
  }
  else
  {
    sub_20BE82D08((_QWORD *)(a1 + 168), v3 - v5, &v6);
  }
  if (!*(_BYTE *)(a1 + 13))
    sub_20BE81BD4(a1 + 192, v3);
}

void sub_20BE81BD4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_20BE82F28((void **)a1, a2 - v2);
  }
}

uint64_t sub_20BE81C04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

void sub_20BE81C0C(uint64_t a1, int a2)
{
  int v3;
  int v4;
  int v5;
  _BOOL4 v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int32 *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int32 *v19;
  uint64_t v20;
  int *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int32 *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _WORD *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  _WORD *v64;
  uint64_t v65;
  char v66;
  char v67;
  __int32 *v68;
  uint64_t v69;
  int v70;
  _WORD *v71;
  __int32 v72;
  __int32 *v73;
  __int32 *v74;
  __int32 *v75;
  uint64_t v76;
  uint64_t v77;
  _BOOL4 v78;
  _WORD *v79;
  __int16 *v80;
  __int16 v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t i;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  unsigned __int16 *v97;
  int *v98;
  unsigned __int16 *v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  __int16 v104;
  char v105;
  char v107;
  unsigned __int16 *v108;
  int v109;
  int v110;
  _BYTE *v111;
  char v112;
  uint64_t v113;
  int v114;
  _BOOL4 v115;
  unsigned int v116;
  BOOL v117;
  int v118;
  unsigned int v119;
  int v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  __int16 v126;
  BOOL v127;
  _BOOL4 v128;
  unsigned int v129;
  _QWORD *v130;
  int v131;
  __int16 *v132;
  char v133;
  int v134;
  uint64_t v135;
  void *v137[3];
  void *v138;
  int v139;
  int v140;
  _BYTE v141[160];
  void *__p;
  __int16 *v143;
  int v144;
  int v145;
  _BYTE v146[32];
  void *v147;
  __int32 *__s;
  int v149;
  int v150;
  _BYTE v151[64];
  void *v152;
  __int32 *v153;
  int v154;
  int v155;
  uint64_t v156;
  __int32 *v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 9);
  v129 = v4 - 3;
  *(_BYTE *)(a1 + 12) = v4 == 5;
  v5 = v4 & 0xFE;
  v131 = v4;
  v7 = v3 != 2 && v4 != 0;
  v128 = v7;
  *(_BYTE *)(a1 + 13) = v5 == 4;
  *(_BYTE *)(a1 + 14) = (v4 & 0xFE) == 2;
  v8 = v5 == 4 || v4 == 3;
  v9 = *(int *)(*(_QWORD *)a1 + 8);
  LOWORD(v138) = 0;
  sub_20BE83028(v137, v9, &v138);
  v10 = (int)((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 296) - *(_QWORD *)(*(_QWORD *)a1 + 288)) >> 2);
  LOWORD(v138) = 0;
  v130 = (_QWORD *)(a1 + 120);
  sub_20BE81B2C(a1 + 120, v10, &v138);
  v127 = v8;
  v11 = *(_QWORD *)a1;
  v12 = *(unsigned int *)(*(_QWORD *)a1 + 20);
  v153 = (__int32 *)&v156;
  v154 = v12;
  v155 = 16;
  v157 = 0;
  if (v12 < 0x11)
  {
    v13 = (__int32 *)v151;
    v147 = 0;
    __s = (__int32 *)v151;
    v149 = v12;
    v150 = 16;
    v152 = 0;
    v132 = (__int16 *)v146;
    __p = 0;
    v143 = (__int16 *)v146;
    v144 = v12;
    v145 = 16;
    v138 = v141;
    v139 = v12;
    v140 = 16;
  }
  else
  {
    v157 = (__int32 *)operator new(4 * v12);
    v153 = v157;
    v155 = v12;
    __s = (__int32 *)v151;
    v149 = v12;
    v150 = 16;
    v152 = 0;
    v152 = operator new(4 * v12);
    v147 = 0;
    __s = (__int32 *)v152;
    v150 = v12;
    v143 = (__int16 *)v146;
    v144 = v12;
    v145 = 16;
    v147 = operator new(2 * v12);
    __p = 0;
    v143 = (__int16 *)v147;
    v145 = v12;
    v138 = v141;
    v139 = v12;
    v140 = 16;
    __p = operator new(10 * v12);
    v138 = __p;
    v140 = v12;
    v13 = __s;
    v132 = v143;
    v11 = *(_QWORD *)a1;
  }
  if (*(int *)(v11 + 8) >= 1)
  {
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v16 = (2 * v14) | 1;
      v17 = *(_QWORD *)(v11 + 264);
      v18 = *(unsigned int *)(v17 + 8 * v14);
      v19 = v153;
      if ((int)v18 >= 1)
      {
        v20 = *(int *)(v17 + 4 * v16);
        v21 = (int *)(*(_QWORD *)(v11 + 288) + 4 * v20);
        v22 = (unsigned __int16 *)(*(_QWORD *)(v11 + 312) + 2 * v20);
        v23 = *(_QWORD *)(v11 + 24);
        v24 = *(_QWORD *)(a1 + 24);
        v25 = v18;
        v26 = v153;
        do
        {
          v27 = *v21++;
          v28 = *(_DWORD *)(v23 + 8 * v27 + 4);
          LODWORD(v27) = *v22++;
          *v26++ = *(_DWORD *)(v24 + 4 * (v28 + (int)v27));
          --v25;
        }
        while (v25);
      }
      v29 = *(_QWORD *)(v11 + 336);
      v30 = *(int *)(v29 + 4 * v16);
      v31 = (int *)(*(_QWORD *)(v11 + 360) + 4 * v30);
      v32 = *(unsigned int *)(v29 + 8 * v14);
      v33 = *(unsigned __int16 *)(*(_QWORD *)(v11 + 432) + 2 * v14);
      if ((v33 & 1) != 0)
      {
        if ((int)v18 >= 1 && (int)v32 >= 1)
        {
          v42 = 0;
          v43 = *(_QWORD *)(v11 + 384) + 2 * v30;
          do
          {
            v44 = v31[v42];
            v45 = *(_QWORD **)a1;
            v46 = *(_QWORD *)(*(_QWORD *)a1 + 144);
            v47 = *(unsigned int *)(v46 + 8 * (_DWORD)v44);
            if ((int)v47 >= 2)
            {
              v48 = 0;
              v49 = 0;
              v50 = *(int *)(v46 + 8 * v44 + 4);
              v51 = (int *)(v45[15] + 8 * (_DWORD)v44);
              while (v47 != v48)
              {
                v52 = *(int *)(v45[21] + 4 * v50 + 4 * v48);
                v53 = 2 * v52;
                v54 = v45[3];
                v55 = *(int *)(v54 + 8 * v52 + 4);
                v56 = v45[6] + 4 * v55;
                v57 = *(_DWORD *)(v54 + 4 * v53);
                v58 = *(unsigned __int16 *)(v45[24] + 2 * v50 + 2 * v48);
                v59 = *(_QWORD *)(a1 + 24) + 4 * v55;
                v60 = *v51;
                if (*(_WORD *)(v43 + 2 * v42) == ((_DWORD)v60 != *(_DWORD *)(v56 + 4 * v58)))
                  v61 = *(unsigned __int16 *)(v45[24] + 2 * v50 + 2 * v48);
                else
                  v61 = v58 + 1;
                if (v61 == v57)
                  v62 = 0;
                else
                  v62 = v61;
                v63 = *(_DWORD *)(v59 + 4 * v62);
                if (v48)
                {
                  ++v48;
                  if (v63 != v49)
                  {
                    v64 = v137[0];
                    *((_WORD *)v137[0] + v60) = 1;
                    v64[v51[1]] = 1;
                    v65 = *(_QWORD *)(a1 + 48);
                    v66 = *(_BYTE *)(v65 + v44) & 0xFD | (2 * (v14 == v60));
                    *(_BYTE *)(v65 + v44) = v66;
                    v67 = v66 & 0xFB | (4 * (v14 == v51[1])) | 1;
                    *(_BYTE *)(v65 + v44) = v67;
                    *(_BYTE *)(v65 + v44) = v67 & 0xF7 | (8 * *(_BYTE *)(a1 + 13));
                    break;
                  }
                }
                else
                {
                  v48 = 1;
                  v49 = v63;
                }
              }
            }
            ++v42;
          }
          while (v42 != v32);
        }
      }
      else if ((int)v18 > (v33 & 4) >> 2)
      {
        v34 = (v33 >> 2) & 1;
        do
        {
          if (v34)
            v35 = v34;
          else
            v35 = v18;
          if (v19[v34] != v19[v35 - 1])
          {
            v36 = v31[v34];
            v37 = *(_QWORD *)(*(_QWORD *)a1 + 120) + 8 * v36;
            v38 = *(unsigned int *)v37;
            v39 = v137[0];
            *((_WORD *)v137[0] + (int)v38) = 1;
            v39[*(int *)(v37 + 4)] = 1;
            v40 = *(_QWORD *)(a1 + 48);
            LOBYTE(v38) = *(_BYTE *)(v40 + v36) & 0xFD | (2 * (v14 == v38));
            *(_BYTE *)(v40 + v36) = v38;
            LOBYTE(v37) = v38 & 0xFB | (4 * (v14 == *(_DWORD *)(v37 + 4))) | 1;
            *(_BYTE *)(v40 + v36) = v37;
            *(_BYTE *)(v40 + v36) = v37 & 0xF7 | (8 * *(_BYTE *)(a1 + 13));
          }
          ++v34;
        }
        while (v18 != v34);
      }
      v134 = v15;
      v133 = v33;
      if ((v33 & 4) != 0 && !*((_WORD *)v137[0] + v14))
      {
        if (*(_BYTE *)(a1 + 13))
        {
          if ((int)v18 < 1)
            goto LABEL_74;
          *((_WORD *)v137[0] + v14) = 1;
          if ((v33 & 1) != 0)
          {
            if ((int)v32 >= 1)
            {
              do
              {
                v83 = *v31++;
                v82 = v83;
                if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 240) + v83) & 2) != 0)
                  *(_BYTE *)(*(_QWORD *)(a1 + 48) + v82) |= 8u;
                --v32;
              }
              while (v32);
            }
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)(a1 + 48) + *v31) |= 8u;
            v77 = v31[(int)v32 - 1];
            *(_BYTE *)(*(_QWORD *)(a1 + 48) + v77) |= 8u;
          }
        }
        else
        {
          v78 = v128;
          if ((_DWORD)v18 != 1)
            v78 = 0;
          if (v78)
          {
            *((_WORD *)v137[0] + v14) = 1;
LABEL_74:
            *v13 = *v19;
            *v132 = 0;
            goto LABEL_75;
          }
        }
      }
      *v13 = *v19;
      *v132 = 0;
      if ((int)v18 > 1)
      {
        v68 = v19 + 1;
        v69 = v18 - 1;
        v70 = 1;
        v71 = v132 + 1;
        while (1)
        {
          v72 = *v68;
          if (*v68 == *(v68 - 1))
          {
            *v71 = *(v71 - 1);
          }
          else
          {
            *v71 = v70;
            if (v70 == 2)
            {
              if (*v13 == v72)
              {
LABEL_57:
                v73 = &v13[v70];
                v74 = wmemchr(v13, v72, v70);
                if (v74)
                  v75 = v74;
                else
                  v75 = &v13[v70];
                v76 = (char *)v75 - (char *)v13;
                if (v70 == v76 >> 2)
                {
                  ++v70;
                  *v73 = *v68;
                }
                else
                {
                  *v71 = (unint64_t)v76 >> 2;
                }
                goto LABEL_64;
              }
              v13[2] = v72;
              v70 = 3;
            }
            else
            {
              if (v70 != 1)
                goto LABEL_57;
              v13[1] = v72;
              v70 = 2;
            }
          }
LABEL_64:
          ++v71;
          ++v68;
          if (!--v69)
            goto LABEL_76;
        }
      }
LABEL_75:
      v70 = 1;
LABEL_76:
      if ((v133 & 1) != 0 && !*((_WORD *)v137[0] + v14))
        *((_WORD *)v137[0] + v14) = v70 > 1;
      *(_WORD *)(*(_QWORD *)(a1 + 72) + 2 * v14) = v70;
      *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v14) = v134;
      v11 = *(_QWORD *)a1;
      if (v70 >= 2 && (int)v18 >= 1)
      {
        v79 = (_WORD *)(*v130 + 2 * *(int *)(*(_QWORD *)(v11 + 264) + 4 * ((2 * v14) | 1)));
        v80 = v132;
        do
        {
          v81 = *v80++;
          *v79++ = v81;
          --v18;
        }
        while (v18);
      }
      v15 = v70 + v134;
      if (++v14 >= *(int *)(v11 + 8))
        goto LABEL_91;
    }
  }
  v15 = 0;
LABEL_91:
  sub_20BE81B5C(a1, v15);
  v84 = *(_QWORD **)a1;
  if (*(int *)(*(_QWORD *)a1 + 8) >= 1)
  {
    for (i = 0; i < *(int *)(*(_QWORD *)a1 + 8); ++i)
    {
      v86 = (2 * i) | 1;
      v87 = v84[33];
      v88 = *(int *)(v87 + 4 * v86);
      v89 = v84[36];
      v90 = *(unsigned int *)(v87 + 8 * i);
      v91 = v84[39];
      if ((int)v90 < 1)
        v92 = 0;
      else
        v92 = *(_DWORD *)(*(_QWORD *)(a1 + 24)
                        + 4
                        * (*(_DWORD *)(v84[3] + 8 * *(int *)(v89 + 4 * v88) + 4) + *(unsigned __int16 *)(v91 + 2 * v88)));
      v93 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 72) + 2 * i);
      v94 = *(_QWORD *)(a1 + 96);
      v95 = (_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * *(int *)(v94 + 4 * i));
      *v95 = v92;
      if (!*((_WORD *)v137[0] + i))
        goto LABEL_170;
      if (v93 >= 2 && (int)v90 >= 2)
      {
        v96 = *(int *)(v87 + 4 * v86);
        v97 = (unsigned __int16 *)(v91 + 2 * v88 + 2);
        v98 = (int *)(v89 + 4 * v88 + 4);
        v99 = (unsigned __int16 *)(*v130 + 2 * v96 + 2);
        v100 = v90 - 1;
        v101 = 1;
        do
        {
          v102 = *v99++;
          if (v101 == v102)
            v95[v101++] = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * (*(_DWORD *)(v84[3] + 8 * *v98 + 4) + *v97));
          ++v97;
          ++v98;
          --v100;
        }
        while (v100);
      }
      v135 = *(int *)(v94 + 4 * i);
      v103 = *(_QWORD *)(a1 + 168);
      v104 = *(_WORD *)(v84[54] + 2 * i);
      v105 = 1;
      if (!*(_BYTE *)(a1 + 13) && (v104 & 0x10) == 0 && (v104 & 1) == 0)
      {
        if (*(_BYTE *)(a1 + 14))
        {
          v105 = v93 > 2;
          v107 = !v127;
          if (v93 > 2)
            v107 = 1;
          if ((v107 & 1) != 0)
            goto LABEL_118;
          if ((_DWORD)v93 != 1)
          {
            v105 = 0;
            goto LABEL_118;
          }
        }
        else
        {
          v105 = 0;
          if (v129 > 2 || (_DWORD)v93 != 1)
            goto LABEL_118;
        }
        v105 = (v104 & 4) == 0;
      }
LABEL_118:
      v108 = (unsigned __int16 *)v138;
      bzero(v138, 10 * v93);
      sub_20BE8279C((_QWORD *)a1, i, (uint64_t)v108);
      if ((v105 & 1) == 0 && (_DWORD)v93 == 2 && *(_BYTE *)(a1 + 14))
      {
        v105 = v108[4] || v108[9] || v108[2] || v108[7] != 0;
        if (v131 == 3)
        {
          v110 = *v108;
          if (v110 != 1)
            LOBYTE(v110) = v108[5] == 1;
          v105 |= v110;
        }
        v109 = (v108[3] != 0) ^ (v108[8] != 0);
LABEL_132:
        v111 = (_BYTE *)(v103 + v135);
        if (v109)
          v112 = 48;
        else
          v112 = 8;
        v113 = 2;
        while (2)
        {
          *v111 = 1;
          if (v108[2])
          {
            *v111 = 5;
            goto LABEL_138;
          }
          if ((v105 & 1) != 0 || v108[4])
          {
            v114 = *v108;
            v115 = v114 == 1;
            if (v114 == a2)
              v116 = 1;
            else
              v116 = 3;
            v117 = 1;
            goto LABEL_146;
          }
          v117 = v131 != 0;
          v120 = *v108;
          v115 = v120 == 1;
          if (v120 != 1)
            v117 = 0;
          v118 = 3;
          if (v120 == a2)
            v116 = 1;
          else
            v116 = 3;
          if (v117)
LABEL_146:
            v118 = 1;
          if (v115)
            v116 = v118;
          *v111 = v116;
          v119 = v116 | ((v108[4] != 0) << 6);
          *v111 = v119;
          if (v108[4])
          {
            LOBYTE(v119) = v119 | ((*v108 - v108[4] > 1) << 7);
            *v111 = v119;
            if (!v117)
              goto LABEL_162;
          }
          else if (v117)
          {
            *v111 = v119 | ((*v108 > 1u) << 7);
          }
          else
          {
            v119 = v119 & 0xFFFFFF7F | (((v116 >> 1) & 1) << 7);
            *v111 = v119;
LABEL_162:
            if (v108[3] | v104 & 0x20)
              v121 = 16;
            else
              v121 = v112;
            *v111 = v119 | v121;
            if (!*(_BYTE *)(a1 + 13))
            {
              v122 = *(int *)(*(_QWORD *)(a1 + 96) + 4 * i);
              v123 = *(_QWORD *)(a1 + 192);
              v124 = v123 + 4 * v122;
              v125 = v108[1];
              *(_WORD *)(v124 + v113 - 2) = v125;
              v126 = *v108;
              if (v113 == 2 && v125)
                *(_WORD *)(v123 + 4 * v122 + 2) = v125 + ~(_WORD)v90 + v126;
              else
                *(_WORD *)(v124 + v113) = v125 + v126 - 1;
            }
          }
LABEL_138:
          v113 += 4;
          v108 += 5;
          ++v111;
          if (!--v93)
            goto LABEL_170;
          continue;
        }
      }
      if ((_DWORD)v93)
      {
        v109 = 0;
        goto LABEL_132;
      }
LABEL_170:
      v84 = *(_QWORD **)a1;
    }
  }
  operator delete(__p);
  operator delete(v147);
  operator delete(v152);
  operator delete(v157);
  if (v137[0])
  {
    v137[1] = v137[0];
    operator delete(v137[0]);
  }
}

void sub_20BE8271C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t v63;

  operator delete(__p);
  operator delete(a63);
  operator delete(*(void **)(v63 - 104));
  if (a20)
    operator delete(a20);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE8279C(_QWORD *result, int a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _WORD *v18;
  _WORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unsigned int v28;
  uint64_t v29;
  char v30;

  v3 = (_QWORD *)*result;
  v4 = *(unsigned __int16 *)(result[9] + 2 * a2);
  if ((*(_WORD *)(*(_QWORD *)(*result + 432) + 2 * a2) & 1) != 0)
  {
    if (*(_WORD *)(result[9] + 2 * a2))
    {
      v19 = (_WORD *)(a3 + 4);
      do
      {
        *(v19 - 2) = 0;
        *v19 = 1;
        v19 += 5;
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    v5 = v3[45];
    v6 = v3[42];
    v7 = (8 * ((unint64_t)(2 * a2) >> 1)) | 4;
    v8 = *(int *)(v6 + v7);
    v9 = 8 * a2;
    v10 = *(unsigned int *)(v6 + v9);
    v11 = (int *)(v5 + 4 * v8);
    v12 = v3[33];
    v13 = *(unsigned int *)(v12 + v9);
    if ((_DWORD)v4 != 1 || (int)v10 > (int)v13)
    {
      v15 = result[15] + 2 * *(int *)(v12 + v7);
      *(_DWORD *)a3 = 1;
      if ((int)v10 > (int)v13 || *(_WORD *)(v15 + 2 * ((int)v13 - 1)))
        goto LABEL_33;
      v16 = *v11;
      if ((*(_BYTE *)(result[6] + v16) & 1) != 0)
      {
        v18 = (_WORD *)(a3 + 4);
      }
      else
      {
        v17 = *(_BYTE *)(v3[30] + v16);
        if ((v17 & 4) != 0)
        {
          v18 = (_WORD *)(a3 + 8);
        }
        else
        {
          if ((v17 & 8) == 0)
          {
LABEL_33:
            if ((int)v13 >= 2)
            {
              v25 = 0;
              v26 = v5 + 4 * v8 + 4;
              do
              {
                v27 = (unsigned __int16 *)(v15 + 2 * v25);
                v28 = v27[1];
                if (v28 == *v27)
                {
                  v29 = *(int *)(v26 + 4 * v25);
                  if ((*(_BYTE *)(result[6] + v29) & 1) != 0)
                  {
                    ++*(_WORD *)(a3 + 10 * v27[1] + 4);
                  }
                  else
                  {
                    v30 = *(_BYTE *)(v3[30] + v29);
                    if ((v30 & 4) != 0)
                    {
                      ++*(_WORD *)(a3 + 10 * v27[1] + 8);
                    }
                    else if ((v30 & 8) != 0)
                    {
                      ++*(_WORD *)(a3 + 10 * v27[1] + 6);
                    }
                  }
                }
                else
                {
                  if (*(_WORD *)(a3 + 10 * v27[1]))
                  {
                    ++*(_WORD *)(a3 + 10 * v27[1] + 4);
                    v28 = v27[1];
                  }
                  *(_WORD *)(a3 + 10 * v28 + 2) = v25 + 1;
                }
                ++*(_WORD *)(a3 + 10 * v27[1]);
                ++v25;
              }
              while (v13 - 1 != v25);
            }
            if (!*(_WORD *)(v15 + 2 * ((int)v13 - 1)) && (int)v10 <= (int)v13)
              --*(_WORD *)(a3 + 4);
            return result;
          }
          v18 = (_WORD *)(a3 + 6);
        }
      }
      ++*v18;
      goto LABEL_33;
    }
    *(_DWORD *)a3 = 0;
    if ((int)v10 > 0)
    {
      v20 = 0;
      v21 = 0;
      v22 = result[6];
      do
      {
        v23 = v11[v21];
        if ((*(_BYTE *)(v22 + v23) & 1) != 0)
        {
          if (v20)
          {
            *(_WORD *)(a3 + 4) = 1;
            break;
          }
          *(_WORD *)a3 = v13;
          *(_WORD *)(a3 + 2) = v21;
          v20 = (unsigned __int16)v13;
        }
        else
        {
          v24 = *(_BYTE *)(v3[30] + v23);
          if ((v24 & 4) != 0)
          {
            ++*(_WORD *)(a3 + 8);
          }
          else if ((v24 & 8) != 0)
          {
            ++*(_WORD *)(a3 + 6);
          }
        }
        ++v21;
      }
      while (v10 != v21);
    }
    *(_WORD *)a3 = v13;
  }
  return result;
}

void *sub_20BE82A08(void **a1)
{
  return memcpy(a1[3], *((const void **)*a1 + 6), ((uint64_t)((*((_QWORD *)*a1 + 7) - *((_QWORD *)*a1 + 6)) << 30) >> 30) & 0xFFFFFFFFFFFFFFFCLL);
}

_QWORD *sub_20BE82A24(_QWORD *result)
{
  uint64_t v1;
  int *v2;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  int v17;
  int v18;
  int v19;

  v1 = *result;
  v2 = *(int **)(*result + 48);
  v3 = *(_QWORD *)(*result + 56) - (_QWORD)v2;
  if ((int)(v3 >> 2) >= 1)
  {
    v4 = result[12];
    v5 = (_DWORD *)result[3];
    v6 = (v3 >> 2);
    do
    {
      v7 = *v2++;
      *v5++ = *(_DWORD *)(v4 + 4 * v7);
      --v6;
    }
    while (v6);
  }
  v8 = *(_DWORD *)(v1 + 8);
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = result[9];
    do
    {
      if (*(unsigned __int16 *)(v10 + 2 * v9) >= 2u)
      {
        v11 = (unsigned int *)(*(_QWORD *)(v1 + 264) + 8 * v9);
        v12 = *v11;
        if ((int)v12 >= 1)
        {
          v13 = (int)v11[1];
          v14 = (int *)(*(_QWORD *)(v1 + 288) + 4 * v13);
          v15 = (unsigned __int16 *)(*(_QWORD *)(v1 + 312) + 2 * v13);
          v16 = (unsigned __int16 *)(result[15] + 2 * v13);
          do
          {
            v18 = *v16++;
            v17 = v18;
            if (v18)
            {
              v19 = *(_DWORD *)(*(_QWORD *)(v1 + 24) + 8 * *v14 + 4) + *v15;
              *(_DWORD *)(result[3] + 4 * v19) += v17;
            }
            ++v15;
            ++v14;
            --v12;
          }
          while (v12);
          v8 = *(_DWORD *)(v1 + 8);
        }
      }
      ++v9;
    }
    while (v9 < v8);
  }
  return result;
}

void sub_20BE82B00(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      sub_20BDDF694();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_20BDE1330(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_20BE82C08(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      sub_20BDDF694();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_20BDE31CC(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_20BE82D08(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = &v7[-*a1];
    v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0)
      sub_20BDDF694();
    v10 = v6 - *a1;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v14 = &v8[(_QWORD)v12];
    v15 = &v8[(_QWORD)v12 + v4];
    v16 = &v8[(_QWORD)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        v18 = *--v7;
        *--v14 = v18;
      }
      while (v7 != v17);
      v7 = (_BYTE *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
      operator delete(v7);
  }
}

void sub_20BE82E20(void **a1, unint64_t a2, _WORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _WORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  __int16 v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_WORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 1)
  {
    if (a2)
    {
      v16 = 2 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 2;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 1);
    if (v11 < 0)
      sub_20BDDF694();
    v12 = v10 >> 1;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 > v11)
      v11 = v13;
    if (v13 >= 0x7FFFFFFFFFFFFFFELL)
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)sub_20BDE31CC(v6, v14);
    else
      v15 = 0;
    v18 = &v15[2 * v12];
    v19 = &v18[2 * a2];
    v20 = 2 * a2;
    v21 = v18;
    do
    {
      *(_WORD *)v21 = *a3;
      v21 += 2;
      v20 -= 2;
    }
    while (v20);
    v22 = &v15[2 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 2)
    {
      v25 = *((_WORD *)i - 1);
      *((_WORD *)v18 - 1) = v25;
      v18 -= 2;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void sub_20BE82F28(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 2);
    if (v9 >> 62)
      sub_20BDDF694();
    v10 = v8 >> 2;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 1 > v9)
      v9 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_20BDE1330(v4, v12);
    else
      v13 = 0;
    v14 = &v13[4 * v10];
    v15 = &v13[4 * v12];
    bzero(v14, 4 * a2);
    v16 = &v14[4 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v14 - 1) = v19;
        v14 -= 4;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

_QWORD *sub_20BE83028(_QWORD *a1, uint64_t a2, _WORD *a3)
{
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDE3190(a1, a2);
    v6 = (_WORD *)a1[1];
    v7 = &v6[a2];
    v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20BE8308C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BE830A8(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *result = a2;
  result[1] = *(_QWORD *)(a2 + 8);
  result[2] = a3;
  result[3] = *(_QWORD *)(a2 + 16);
  result[4] = a4;
  result[6] = 0;
  result[7] = 0;
  result[5] = 0;
  return result;
}

uint64_t sub_20BE830C8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_20BE830F8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(a1[4] + 8) = *(_DWORD *)(a1[2] + 8);
  v2 = a1[2];
  v3 = a1[4];
  *(_BYTE *)(v3 + 12) = *(_BYTE *)(v2 + 12);
  *(_WORD *)(v3 + 13) = *(_WORD *)(v2 + 13);
  sub_20BE831A0(a1);
  sub_20BE832A8(a1);
  sub_20BE8330C((uint64_t)a1);
  sub_20BE833C0(a1);
  sub_20BE83448((int **)a1);
  v4 = a1[4];
  if (!*(_BYTE *)(v4 + 13))
  {
    sub_20BE83598(a1);
    sub_20BE836E0(a1);
    v4 = a1[4];
  }
  if (*(_DWORD *)(v4 + 16) <= *(_DWORD *)(a1[3] + 8))
    return sub_20BE82A08((void **)v4);
  else
    return sub_20BE82A24((_QWORD *)v4);
}

void sub_20BE831A0(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int16 v16;

  v2 = *a1;
  v3 = *(_DWORD *)(*a1 + 52);
  v4 = *(int *)(*a1 + 56);
  if ((int)v4 >= 1)
  {
    v5 = *(int *)(v2 + 80);
    v6 = v4 + v5;
    do
    {
      v7 = *(int *)(*(_QWORD *)(v2 + 312) + 4 * v5);
      if ((*(_BYTE *)(*(_QWORD *)(a1[2] + 48) + v7) & 1) != 0)
        v8 = *(_DWORD *)(*(_QWORD *)(a1[1] + 144) + 8 * v7);
      else
        v8 = 1;
      v3 += v8;
      ++v5;
    }
    while (v5 < v6);
  }
  v9 = *(int *)(v2 + 60);
  if ((int)v9 >= 1)
  {
    v10 = *(int *)(v2 + 84);
    v11 = v9 + v10;
    v12 = *(_QWORD *)(v2 + 312);
    do
      v3 += *(unsigned __int16 *)(*(_QWORD *)(a1[2] + 72) + 2 * *(int *)(v12 + 4 * v10++));
    while (v10 < v11);
  }
  sub_20BE81A14((_QWORD *)a1[4]);
  v13 = a1[4];
  v14 = *(_QWORD *)(v13 + 168);
  v15 = *(_QWORD *)(v13 + 176) - v14;
  if (v3 <= v15)
  {
    if (v3 < v15)
      *(_QWORD *)(v13 + 176) = v14 + v3;
  }
  else
  {
    sub_20BE83CA8((void **)(v13 + 168), v3 - v15);
  }
  v16 = 0;
  sub_20BE81B2C((uint64_t)(a1 + 5), v3, &v16);
}

_QWORD *sub_20BE832A8(_QWORD *a1)
{
  *(_DWORD *)(a1[4] + 16) = 0;
  if (*(_BYTE *)(*a1 + 37))
  {
    sub_20BE839F4(a1);
    sub_20BE83A44(a1);
    return sub_20BE83BB4(a1);
  }
  else
  {
    sub_20BE83BB4(a1);
    sub_20BE839F4(a1);
    return sub_20BE83A44(a1);
  }
}

void sub_20BE8330C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 168);
  v4 = *(int *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 176) - v3;
  if (v4 <= v5)
  {
    if (v4 < v5)
      *(_QWORD *)(v2 + 176) = v3 + v4;
  }
  else
  {
    sub_20BE83CA8((void **)(v2 + 168), v4 - v5);
    v2 = *(_QWORD *)(a1 + 32);
  }
  if (!*(_BYTE *)(v2 + 13))
  {
    sub_20BE81BD4(v2 + 192, *(int *)(v2 + 16));
    v2 = *(_QWORD *)(a1 + 32);
  }
  sub_20BE81AFC(a1 + 40, *(int *)(v2 + 16));
  sub_20BE81ACC(*(_QWORD *)(a1 + 32) + 144, *(int *)(*(_QWORD *)(a1 + 32) + 16));
  v6 = *(_QWORD *)(a1 + 32);
  if (*(int *)(v6 + 16) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(v6 + 144);
    do
    {
      *(_DWORD *)(v8 + 4 * v7) = v7;
      ++v7;
    }
    while (v7 < *(int *)(v6 + 16));
  }
}

_QWORD *sub_20BE833C0(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  LODWORD(v1) = *(_DWORD *)(*result + 44);
  if ((int)v1 >= 1)
  {
    v2 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(result[4] + 48) + v2++) = 0;
    while (v2 < *(int *)(*result + 44));
    LODWORD(v1) = *(_DWORD *)(*result + 44);
  }
  if ((int)v1 < *(_DWORD *)(result[3] + 4))
  {
    v1 = (int)v1;
    do
    {
      *(_BYTE *)(*(_QWORD *)(result[4] + 48) + v1) = *(_BYTE *)(*(_QWORD *)(result[2] + 48)
                                                                + *(int *)(*(_QWORD *)(*result + 288) + 4 * v1));
      ++v1;
    }
    while (v1 < *(int *)(result[3] + 4));
  }
  return result;
}

int **sub_20BE83448(int **result)
{
  int **v1;
  int *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = result;
  v2 = *result;
  v3 = (*result)[13];
  if (v3 >= 1)
  {
    v4 = v2[19];
    v5 = v3 + v4;
    v6 = *(int *)(*((_QWORD *)result[4] + 12) + 4 * v4);
    do
    {
      *(_BYTE *)(*((_QWORD *)result[4] + 21) + v6) = 0;
      ++v4;
      ++v6;
    }
    while (v4 < v5);
    v2 = *result;
  }
  v7 = v2[14];
  if ((int)v7 >= 1)
  {
    v8 = v2[20];
    v9 = v7 + v8;
    if (*((_BYTE *)result[2] + 13))
      v10 = 1;
    else
      v10 = 9;
    do
    {
      v11 = v1[4];
      v12 = *((_QWORD *)v11 + 9);
      if (*(_WORD *)(v12 + 2 * v8))
      {
        if ((*(_BYTE *)(*((_QWORD *)v1[2] + 6) + *(int *)(*((_QWORD *)*v1 + 39) + 4 * v8)) & 9) != 0)
          v13 = v10;
        else
          v13 = 0;
        result = (int **)memset((void *)(*((_QWORD *)v11 + 21) + *(int *)(*((_QWORD *)v11 + 12) + 4 * v8)), v13, *(unsigned __int16 *)(v12 + 2 * v8));
      }
      ++v8;
    }
    while (v8 < v9);
    v2 = *v1;
  }
  v14 = v2[15];
  if ((int)v14 >= 1)
  {
    v15 = v2[21];
    v16 = v14 + v15;
    do
    {
      v17 = *(int *)(*((_QWORD *)*v1 + 39) + 4 * v15);
      result = (int **)memcpy((void *)(*((_QWORD *)v1[4] + 21) + *(int *)(*((_QWORD *)v1[4] + 12) + 4 * v15++)), (const void *)(*((_QWORD *)v1[2] + 21) + *(int *)(*((_QWORD *)v1[2] + 12) + 4 * v17)), *(unsigned __int16 *)(*((_QWORD *)v1[2] + 9) + 2 * v17));
    }
    while (v15 < v16);
  }
  return result;
}

_QWORD *sub_20BE83598(_QWORD *result)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int16 v13;
  _WORD *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  char v25;

  v1 = *result;
  if (*(_DWORD *)(*result + 32) == 4)
    v2 = 2;
  else
    v2 = 3;
  v3 = *(int *)(v1 + 56);
  if ((int)v3 >= 1)
  {
    v4 = *(int *)(v1 + 80);
    v5 = v3 + v4;
    v6 = (_QWORD *)result[4];
    v7 = v6[9];
    v8 = v6[12];
    v9 = v6[21];
    do
    {
      v10 = *(int *)(v8 + 4 * v4);
      v11 = (char *)(v9 + v10);
      if ((*(_BYTE *)(v9 + v10) & 1) != 0 && (*(_BYTE *)(*(_QWORD *)(v1 + 384) + v4) & 1) == 0)
      {
        v12 = *(unsigned __int16 *)(v7 + 2 * v4);
        if (*(_WORD *)(v7 + 2 * v4))
        {
          v13 = 0;
          v14 = (_WORD *)(v6[24] + 4 * v10 + 2);
          do
          {
            v15 = *v11++;
            if ((v15 & 0x18) != 0)
            {
              *(v14 - 1) = v13;
              *v14 = v2 - 1 + v13;
            }
            v13 += v2;
            v14 += 2;
            --v12;
          }
          while (v12);
        }
      }
      ++v4;
    }
    while (v4 < v5);
  }
  v16 = *(int *)(v1 + 60);
  if ((int)v16 >= 1)
  {
    v17 = *(int *)(v1 + 84);
    v18 = v16 + v17;
    do
    {
      v19 = (_QWORD *)result[4];
      v20 = *(int *)(v19[12] + 4 * v17);
      v21 = (char *)(v19[21] + v20);
      if ((*v21 & 1) != 0 && (*(_BYTE *)(*(_QWORD *)(*result + 384) + v17) & 1) == 0)
      {
        v22 = *(unsigned __int16 *)(v19[9] + 2 * v17);
        if (*(_WORD *)(v19[9] + 2 * v17))
        {
          v23 = (_DWORD *)(*(_QWORD *)(result[2] + 192)
                         + 4
                         * *(int *)(*(_QWORD *)(result[2] + 96)
                                  + 4 * *(int *)(*(_QWORD *)(*result + 312) + 4 * v17)));
          v24 = (_DWORD *)(v19[24] + 4 * v20);
          do
          {
            v25 = *v21++;
            if ((v25 & 0x18) != 0)
              *v24 = *v23;
            ++v24;
            ++v23;
            --v22;
          }
          while (v22);
        }
      }
      ++v17;
    }
    while (v17 < v18);
  }
  return result;
}

void sub_20BE836E0(_QWORD *a1)
{
  void *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unsigned __int16 *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  BOOL v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  void *__p;
  uint64_t v43;

  v2 = 0;
  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int8 *)(a1[2] + 14);
  v4 = *(unsigned int *)(a1[3] + 20);
  v40 = &v41;
  __p = 0;
  if (v4 >= 0x11)
  {
    v2 = operator new(4 * v4);
    __p = v2;
    v40 = (uint64_t *)v2;
  }
  v5 = *(int *)(*a1 + 60);
  if ((int)v5 >= 1)
  {
    v6 = *(int *)(*a1 + 84);
    v7 = v5 + v6;
    while (1)
    {
      v8 = (_QWORD *)a1[4];
      v9 = *(int *)(v8[12] + 4 * v6);
      v10 = (char *)(v8[21] + v9);
      if ((*v10 & 1) == 0)
        goto LABEL_9;
      v11 = *a1;
      if ((*(_BYTE *)(*(_QWORD *)(*a1 + 384) + v6) & 1) != 0)
        goto LABEL_9;
      v12 = *(int *)(*(_QWORD *)(v11 + 312) + 4 * v6);
      v13 = (_QWORD *)a1[1];
      if ((*(_WORD *)(v13[54] + 2 * v12) & 0x60) == 0)
        goto LABEL_9;
      v14 = (_QWORD *)a1[3];
      v15 = *(_WORD *)(v14[54] + 2 * v6);
      if ((v15 & 0x30) != 0)
        goto LABEL_9;
      v16 = *(unsigned __int16 *)(v8[9] + 2 * v6);
      if ((v15 & 0x40) == 0)
      {
        if (*(_WORD *)(v8[9] + 2 * v6))
        {
          do
          {
            if ((*v10 & 0x10) != 0)
              *v10 = *v10 & 0xC7 | 8;
            ++v10;
            --v16;
          }
          while (v16);
        }
        goto LABEL_9;
      }
      v17 = v8[24];
      v18 = v14[45];
      if (((v14[46] - v18) & 0x3FFFFFFFCLL) != 0)
      {
        v20 = v14[42];
        v19 = (uint64_t *)(v18 + 4 * *(int *)(v20 + 8 * (_DWORD)v6 + 4));
        LODWORD(v20) = *(_DWORD *)(v20 + 8 * (int)v6);
      }
      else
      {
        v21 = v13[42];
        v20 = *(unsigned int *)(v21 + 8 * (_DWORD)v12);
        v19 = v40;
        if ((int)v20 >= 1)
        {
          v22 = 0;
          v23 = *(int *)(v21 + 8 * v12 + 4);
          v24 = v13[45] + 4 * v23;
          v25 = v13[48] + 2 * v23;
          v26 = *(_QWORD *)(v11 + 192);
          do
          {
            *((_DWORD *)v40 + v22) = *(_DWORD *)(v26
                                               + 8 * *(int *)(v24 + 4 * v22)
                                               + 4 * *(unsigned __int16 *)(v25 + 2 * v22));
            ++v22;
          }
          while (v20 != v22);
        }
      }
      if ((_DWORD)v16)
        break;
LABEL_9:
      if (++v6 >= v7)
      {
        v2 = __p;
        goto LABEL_51;
      }
    }
    v27 = 0;
    v28 = v17 + 4 * v9;
    while (1)
    {
      v29 = v10[v27];
      if ((v29 & 0x30) == 0x10)
      {
        v30 = (unsigned __int16 *)(v28 + 4 * v27);
        v31 = *v30;
        v32 = v30[1];
        if (v32 <= v31)
        {
          if (v31 <= v32)
            goto LABEL_41;
          if ((int)v31 + 1 < (int)v20)
          {
            do
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a1[3] + 240) + *((int *)v19 + v31 + 1));
              if ((v36 & 8) != 0)
                break;
              v37 = v31 + 2;
              ++v31;
            }
            while (v37 < (int)v20);
            if ((v36 & 8) != 0)
              goto LABEL_42;
          }
          v38 = 0;
          do
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a1[3] + 240) + *((int *)v19 + v38));
            if ((v34 & 8) != 0)
              break;
            v35 = v38++ >= v32;
          }
          while (!v35);
        }
        else
        {
          v33 = v31 + 1;
          do
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a1[3] + 240) + *((int *)v19 + v33));
            if ((v34 & 8) != 0)
              break;
            v35 = v33++ >= v32;
          }
          while (!v35);
        }
        if ((v34 & 8) == 0)
LABEL_41:
          v10[v27] = v29 & 0xC7 | 8;
      }
LABEL_42:
      if (++v27 == v16)
      {
        if (v3 && (_DWORD)v16 == 2)
        {
          v39 = *v10;
          if ((*v10 & 0x20) != 0 && (v10[1] & 0x10) == 0)
          {
LABEL_50:
            *v10 = v39 & 0xDF;
          }
          else if ((*v10 & 0x10) == 0 && (v10[1] & 0x20) != 0)
          {
            v39 = *++v10;
            goto LABEL_50;
          }
        }
        goto LABEL_9;
      }
    }
  }
LABEL_51:
  operator delete(v2);
}

_QWORD *sub_20BE839F4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v1 = *(int *)(*result + 52);
  if ((int)v1 >= 1)
  {
    v2 = *(int *)(*result + 76);
    v3 = v1 + v2;
    v4 = result[4];
    v5 = *(_QWORD *)(v4 + 96);
    v6 = *(_QWORD *)(v4 + 72);
    v7 = *(_DWORD *)(v4 + 16);
    do
    {
      *(_DWORD *)(v5 + 4 * v2) = v7;
      *(_WORD *)(v6 + 2 * v2) = 1;
      v7 = *(_DWORD *)(v4 + 16) + 1;
      *(_DWORD *)(v4 + 16) = v7;
      ++v2;
    }
    while (v2 < v3);
  }
  return result;
}

_QWORD *sub_20BE83A44(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t i;

  v1 = *result;
  v2 = *(int *)(*result + 56);
  if ((int)v2 >= 1)
  {
    v3 = *(int *)(v1 + 80);
    v4 = v2 + v3;
    v5 = *(_QWORD *)(v1 + 312);
    v6 = result[4];
    v7 = *(_QWORD *)(v6 + 96);
    v8 = *(_QWORD *)(result[2] + 48);
    v9 = *(_DWORD *)(v6 + 16);
    v10 = *(_QWORD *)(v6 + 72);
    do
    {
      v11 = *(int *)(v5 + 4 * v3);
      *(_DWORD *)(v7 + 4 * v3) = v9;
      if ((*(_BYTE *)(v8 + v11) & 1) != 0)
      {
        v13 = result[1];
        v14 = *(_QWORD *)(v13 + 144);
        v12 = *(unsigned int *)(v14 + 8 * (_DWORD)v11);
        if ((_DWORD)v12 != 1)
        {
          v15 = *(_QWORD *)(v13 + 168);
          v16 = *(int *)(v14 + 8 * v11 + 4);
          if ((int)v12 >= 1)
          {
            v17 = 0;
            v18 = result[5] + 2 * v9;
            do
            {
              *(_WORD *)(v18 + 2 * v17) = v17;
              ++v17;
            }
            while (v12 != v17);
          }
          v19 = *(_QWORD *)(*(_QWORD *)v6 + 264);
          v20 = *(unsigned int *)(v19 + 8 * (int)v3);
          if ((int)v20 >= 1)
          {
            v21 = 0;
            v22 = v15 + 4 * v16;
            v23 = (8 * ((unint64_t)(2 * (int)v3) >> 1)) | 4;
            v24 = *(_QWORD *)(result[3] + 288) + 4 * *(int *)(*(_QWORD *)(result[3] + 264) + v23);
            v25 = *(_QWORD *)(v6 + 120) + 2 * *(int *)(v19 + v23);
            v26 = *(_QWORD *)(v1 + 264);
            do
            {
              v27 = *(_DWORD *)(v26 + 4 * *(int *)(v24 + 4 * v21));
              if ((_DWORD)v12 == 2)
              {
                if (v27 == *(_DWORD *)(v22 + 4))
                  *(_WORD *)(v25 + 2 * v21) = 1;
              }
              else if ((int)v12 >= 1)
              {
                for (i = 0; i != v12; ++i)
                {
                  if (v27 == *(_DWORD *)(v22 + 4 * i))
                    *(_WORD *)(v25 + 2 * v21) = i;
                }
              }
              ++v21;
            }
            while (v21 != v20);
          }
        }
      }
      else
      {
        LODWORD(v12) = 1;
      }
      *(_WORD *)(v10 + 2 * v3) = v12;
      v9 = *(_DWORD *)(v6 + 16) + v12;
      *(_DWORD *)(v6 + 16) = v9;
      ++v3;
    }
    while (v3 < v4);
  }
  return result;
}

_QWORD *sub_20BE83BB4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  __int16 *v19;
  _WORD *v20;
  __int16 v21;

  v1 = *result;
  v2 = *(int *)(*result + 60);
  if ((int)v2 >= 1)
  {
    v3 = *(int *)(v1 + 84);
    v4 = v2 + v3;
    v5 = *(_QWORD *)(v1 + 312);
    v6 = result[4];
    v7 = *(_QWORD *)(v6 + 96);
    v8 = (_QWORD *)result[2];
    v9 = v8[12];
    v10 = v8[21];
    v11 = *(_DWORD *)(v6 + 16);
    v12 = *(_QWORD *)(v6 + 72);
    do
    {
      v13 = *(int *)(v5 + 4 * v3);
      *(_DWORD *)(v7 + 4 * v3) = v11;
      if ((*(_BYTE *)(v10 + *(int *)(v9 + 4 * v13)) & 1) != 0)
      {
        v14 = *(unsigned __int16 *)(v8[9] + 2 * v13);
        if (v14 >= 2)
        {
          v15 = result[5] + 2 * v11;
          for (i = 1; i != v14; ++i)
            *(_WORD *)(v15 + 2 * i) = i;
          v17 = *(_QWORD *)(*(_QWORD *)v6 + 264);
          v18 = *(unsigned int *)(v17 + 8 * (_DWORD)v3);
          if ((int)v18 >= 1)
          {
            v19 = (__int16 *)(v8[15] + 2 * *(int *)(*(_QWORD *)(*v8 + 264) + 4 * (int)((2 * v13) | 1)));
            v20 = (_WORD *)(*(_QWORD *)(v6 + 120) + 2 * *(int *)(v17 + 8 * (int)v3 + 4));
            do
            {
              v21 = *v19++;
              *v20++ = v21;
              --v18;
            }
            while (v18);
          }
        }
      }
      else
      {
        LODWORD(v14) = 1;
      }
      *(_WORD *)(v12 + 2 * v3) = v14;
      v11 = *(_DWORD *)(v6 + 16) + v14;
      *(_DWORD *)(v6 + 16) = v11;
      ++v3;
    }
    while (v3 < v4);
  }
  return result;
}

void sub_20BE83CA8(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (v4 - v5 >= a2)
  {
    a1[1] = &v5[a2];
  }
  else
  {
    v6 = (unint64_t)*a1;
    v7 = (char *)(v5 - (_BYTE *)*a1);
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      sub_20BDDF694();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)operator new(v10);
    else
      v11 = 0;
    v12 = &v11[v10];
    v13 = &v7[(_QWORD)v11 + a2];
    if (v5 == (char *)v6)
    {
      v11 = &v7[(_QWORD)v11];
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
}

double sub_20BE83DA0(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[28] = 0u;
  a1[29] = 0u;
  a1[26] = 0u;
  a1[27] = 0u;
  a1[24] = 0u;
  a1[25] = 0u;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

_QWORD *sub_20BE83DE4(_QWORD *a1)
{
  _QWORD **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v4 = a1 + 57;
  v2 = (_QWORD **)a1[57];
  v3 = v4[1];
  if ((int)((unint64_t)(v3 - (_QWORD)v2) >> 3) >= 1)
  {
    v5 = 0;
    do
    {
      if (v2[v5])
      {
        v6 = sub_20BE81A04(v2[v5]);
        operator delete(v6);
        v2 = (_QWORD **)a1[57];
        v3 = a1[58];
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (_QWORD)v2) >> 3));
  }
  if (v2)
  {
    a1[58] = v2;
    operator delete(v2);
  }
  v7 = (void *)a1[54];
  if (v7)
  {
    a1[55] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[51];
  if (v8)
  {
    a1[52] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[48];
  if (v9)
  {
    a1[49] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[45];
  if (v10)
  {
    a1[46] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[42];
  if (v11)
  {
    a1[43] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[39];
  if (v12)
  {
    a1[40] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[36];
  if (v13)
  {
    a1[37] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[33];
  if (v14)
  {
    a1[34] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[30];
  if (v15)
  {
    a1[31] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[27];
  if (v16)
  {
    a1[28] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[24];
  if (v17)
  {
    a1[25] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[21];
  if (v18)
  {
    a1[22] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[18];
  if (v19)
  {
    a1[19] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[15];
  if (v20)
  {
    a1[16] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[12];
  if (v21)
  {
    a1[13] = v21;
    operator delete(v21);
  }
  v22 = (void *)a1[9];
  if (v22)
  {
    a1[10] = v22;
    operator delete(v22);
  }
  v23 = (void *)a1[6];
  if (v23)
  {
    a1[7] = v23;
    operator delete(v23);
  }
  v24 = (void *)a1[3];
  if (v24)
  {
    a1[4] = v24;
    operator delete(v24);
  }
  return a1;
}

BOOL sub_20BE83F80(unsigned int *a1, void (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unsigned __int16 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  unsigned __int16 *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  unsigned __int16 *v47;
  int v48;
  unsigned int v49;
  uint64_t i;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL4 v60;
  BOOL v61;
  _BOOL4 v63;
  _BOOL4 v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  void *__p;
  char __str[1024];
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)a1 + 6);
  if (((*((_QWORD *)a1 + 7) - v6) & 0x3FFFFFFFCLL) == 0)
  {
    if (!a2)
      return 0;
    snprintf(__str, 0x400uLL, "%s - missing face-verts", "MISSING_FACE_VERTS");
    a2(3, __str, a3);
    v60 = 1;
    goto LABEL_64;
  }
  v7 = *((_QWORD *)a1 + 36);
  if (((*((_QWORD *)a1 + 37) - v7) & 0x3FFFFFFFCLL) == 0)
  {
    v60 = a2 != 0;
LABEL_64:
    v61 = 0;
    if (!v60 || ((*((_QWORD *)a1 + 37) - *((_QWORD *)a1 + 36)) & 0x3FFFFFFFCLL) != 0)
      return v61;
    snprintf(__str, 0x400uLL, "%s - missing vert-faces", "MISSING_VERT_FACES");
    a2(4, __str, a3);
    return 0;
  }
  v8 = *a1;
  if ((int)v8 >= 1)
  {
    v9 = 0;
    while (1)
    {
      v10 = (unsigned int *)(*((_QWORD *)a1 + 3) + 8 * v9);
      v11 = *v10;
      if ((int)v11 >= 1)
        break;
LABEL_14:
      if (++v9 == v8)
        goto LABEL_15;
    }
    v12 = 0;
    v13 = v6 + 4 * (int)v10[1];
    v14 = *((_QWORD *)a1 + 33);
    while (1)
    {
      v15 = *(int *)(v13 + 4 * v12);
      v16 = *(unsigned int *)(v14 + 8 * (_DWORD)v15);
      if ((int)v16 < 1)
        break;
      v17 = *(int *)(v14 + 8 * v15 + 4);
      v18 = (int *)(v7 + 4 * v17);
      v19 = (unsigned __int16 *)(*((_QWORD *)a1 + 39) + 2 * v17);
      while (1)
      {
        v20 = *v18++;
        if (v9 == v20 && v12 == *v19)
          break;
        ++v19;
        if (!--v16)
          goto LABEL_61;
      }
      if (++v12 == v11)
        goto LABEL_14;
    }
LABEL_61:
    if (a2)
    {
      snprintf(__str, 0x400uLL, "%s - face %d correlation of vert %d failed", "FAILED_CORRELATION_FACE_VERT", v9, v12);
      a2(7, __str, a3);
    }
    return 0;
  }
LABEL_15:
  v21 = *((_QWORD *)a1 + 21);
  if (((*((_QWORD *)a1 + 22) - v21) & 0x3FFFFFFFCLL) == 0)
  {
    if (!a2)
      return 0;
    snprintf(__str, 0x400uLL, "%s - missing edge-faces", "MISSING_EDGE_FACES");
    a2(0, __str, a3);
    v63 = 1;
    goto LABEL_74;
  }
  v22 = *((_QWORD *)a1 + 9);
  if (((*((_QWORD *)a1 + 10) - v22) & 0x3FFFFFFFCLL) == 0)
  {
    v63 = a2 != 0;
LABEL_74:
    v61 = 0;
    if (!v63 || ((*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9)) & 0x3FFFFFFFCLL) != 0)
      return v61;
    snprintf(__str, 0x400uLL, "%s - missing face-edges", "MISSING_FACE_EDGES");
    a2(2, __str, a3);
    return 0;
  }
  if ((int)v8 >= 1)
  {
    v23 = 0;
    while (1)
    {
      v24 = (unsigned int *)(*((_QWORD *)a1 + 3) + 8 * v23);
      v25 = *v24;
      if ((int)v25 >= 1)
        break;
LABEL_28:
      if (++v23 == v8)
        goto LABEL_29;
    }
    v26 = 0;
    v27 = v22 + 4 * (int)v24[1];
    v28 = *((_QWORD *)a1 + 18);
    while (1)
    {
      v29 = *(int *)(v27 + 4 * v26);
      v30 = *(unsigned int *)(v28 + 8 * (_DWORD)v29);
      if ((int)v30 < 1)
        break;
      v31 = *(int *)(v28 + 8 * v29 + 4);
      v32 = (int *)(v21 + 4 * v31);
      v33 = (unsigned __int16 *)(*((_QWORD *)a1 + 24) + 2 * v31);
      while (1)
      {
        v34 = *v32++;
        if (v23 == v34 && v26 == *v33)
          break;
        ++v33;
        if (!--v30)
          goto LABEL_71;
      }
      if (++v26 == v25)
        goto LABEL_28;
    }
LABEL_71:
    if (a2)
    {
      snprintf(__str, 0x400uLL, "%s - face %d correlation of edge %d failed", "FAILED_CORRELATION_FACE_EDGE", v23, v26);
      a2(8, __str, a3);
    }
    return 0;
  }
LABEL_29:
  v35 = *((_QWORD *)a1 + 15);
  if (((*((_QWORD *)a1 + 16) - v35) & 0x3FFFFFFFCLL) == 0)
  {
    if (!a2)
      return 0;
    snprintf(__str, 0x400uLL, "%s - missing edge-verts", "MISSING_EDGE_VERTS");
    a2(1, __str, a3);
    v64 = 1;
    goto LABEL_82;
  }
  v36 = *((_QWORD *)a1 + 45);
  if (((*((_QWORD *)a1 + 46) - v36) & 0x3FFFFFFFCLL) == 0)
  {
    v64 = a2 != 0;
LABEL_82:
    v61 = 0;
    if (!v64 || ((*((_QWORD *)a1 + 46) - *((_QWORD *)a1 + 45)) & 0x3FFFFFFFCLL) != 0)
      return v61;
    snprintf(__str, 0x400uLL, "%s - missing vert-edges", "MISSING_VERT_EDGES");
    a2(5, __str, a3);
    return 0;
  }
  v37 = a1[1];
  if ((int)v37 < 1)
    goto LABEL_42;
  v38 = 0;
  v39 = *((_QWORD *)a1 + 42);
  do
  {
    v40 = 0;
    v41 = 1;
    do
    {
      v42 = v41;
      v43 = *(int *)(v35 + 8 * v38 + 4 * v40);
      v44 = *(unsigned int *)(v39 + 8 * (_DWORD)v43);
      if ((int)v44 < 1)
      {
LABEL_79:
        if (a2)
        {
          snprintf(__str, 0x400uLL, "%s - edge %d correlation of vert %d failed", "FAILED_CORRELATION_FACE_VERT", v38, v40);
          a2(7, __str, a3);
        }
        return 0;
      }
      v45 = *(int *)(v39 + 8 * v43 + 4);
      v46 = (int *)(v36 + 4 * v45);
      v47 = (unsigned __int16 *)(*((_QWORD *)a1 + 48) + 2 * v45);
      while (1)
      {
        v48 = *v46++;
        if (v38 == v48 && v40 == *v47)
          break;
        ++v47;
        if (!--v44)
          goto LABEL_79;
      }
      v41 = 0;
      v40 = 1;
    }
    while ((v42 & 1) != 0);
    ++v38;
  }
  while (v38 != v37);
LABEL_42:
  v49 = 2 * a1[5];
  v71 = &v72;
  __p = 0;
  if (v49 >= 0x21)
  {
    __p = operator new(4 * v49);
    v71 = (uint64_t *)__p;
  }
  if ((int)a1[2] >= 1)
  {
    for (i = 0; i < (int)a1[2]; ++i)
    {
      if ((*(_WORD *)(*((_QWORD *)a1 + 54) + 2 * i) & 0x801) == 0)
      {
        v51 = *((_QWORD *)a1 + 33);
        v52 = (8 * i) | 4;
        v53 = *(int *)(v51 + v52);
        v54 = *((_QWORD *)a1 + 36);
        v55 = *(int *)(v51 + 8 * i);
        v56 = *((_QWORD *)a1 + 42);
        v69 = *(int *)(v56 + v52);
        v70 = *((_QWORD *)a1 + 45);
        v57 = *(unsigned int *)(v56 + 8 * i);
        if (!sub_20BE8477C(a1, i, v71, (int *)v71 + v55))
        {
          if (a2)
          {
            snprintf(__str, 0x400uLL, "%s - vertex %d cannot orient incident faces and edges", "FAILED_ORIENTATION_INCIDENT_FACES_EDGES", i);
            a2(11, __str, a3);
          }
          goto LABEL_96;
        }
        if ((int)v55 >= 1)
        {
          v58 = 0;
          while (*(_DWORD *)(v54 + 4 * v53 + 4 * v58) == *((_DWORD *)v71 + v58))
          {
            if (v55 == ++v58)
              goto LABEL_54;
          }
          if (a2)
          {
            snprintf(__str, 0x400uLL, "%s - vertex %d orientation failure at incident face %d", "FAILED_ORIENTATION_INCIDENT_FACE", i, v58);
            a2(10, __str, a3);
          }
LABEL_96:
          v61 = 0;
          goto LABEL_102;
        }
LABEL_54:
        if ((int)v57 >= 1)
        {
          v59 = 0;
          while (*(_DWORD *)(v70 + 4 * v69 + 4 * v59) == *((_DWORD *)v71 + v55 + v59))
          {
            if (v57 == ++v59)
              goto LABEL_47;
          }
          if (a2)
          {
            snprintf(__str, 0x400uLL, "%s - vertex %d orientation failure at incident edge %d", "FAILED_ORIENTATION_INCIDENT_EDGE", i, v59);
            a2(9, __str, a3);
          }
          goto LABEL_96;
        }
      }
LABEL_47:
      ;
    }
  }
  v65 = a1[1];
  if ((int)v65 < 1)
  {
    v61 = 1;
    goto LABEL_102;
  }
  v66 = 0;
  v61 = 0;
  v67 = 4;
  while (2)
  {
    if ((*(_BYTE *)(*((_QWORD *)a1 + 30) + v66) & 1) != 0)
    {
LABEL_90:
      v61 = ++v66 >= v65;
      v67 += 8;
      if (v65 == v66)
        goto LABEL_102;
      continue;
    }
    break;
  }
  if (*(_DWORD *)(*((_QWORD *)a1 + 15) + v67 - 4) != *(_DWORD *)(*((_QWORD *)a1 + 15) + v67))
  {
    v68 = *(_DWORD *)(*((_QWORD *)a1 + 18) + v67 - 4);
    if ((v68 - 3) <= 0xFFFFFFFD)
    {
      if (a2)
      {
        snprintf(__str, 0x400uLL, "%s - edge %d with %d incident faces not tagged non-manifold", "NON_MANIFOLD_EDGE", v66, v68);
        a2(13, __str, a3);
      }
      goto LABEL_102;
    }
    goto LABEL_90;
  }
  if (a2)
  {
    snprintf(__str, 0x400uLL, "%s - Error in eIndex = %d:  degenerate edge not tagged marked non-manifold", "DEGENERATE_EDGE", v66);
    a2(12, __str, a3);
  }
LABEL_102:
  operator delete(__p);
  return v61;
}

void sub_20BE84750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE8477C(_QWORD *a1, __int32 __c, _DWORD *a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int32 *v19;
  size_t v20;
  __int32 *v21;
  __int32 *v22;
  __int32 *v23;
  unint64_t v24;
  int v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int32 *v32;
  size_t v33;
  __int32 *v34;
  __int32 *v35;
  __int32 *v36;
  int v37;
  __int32 *v38;
  uint64_t v39;
  int v40;
  __int32 v41;
  unint64_t v42;
  int v43;
  __int32 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v49;
  int *v50;
  int v51;
  int v52;
  __int32 *v53;
  size_t v54;
  __int32 *v55;
  __int32 *v56;
  __int32 *v57;
  uint64_t v58;
  int v60;

  v5 = a1[42];
  v6 = 8 * __c;
  v7 = *(unsigned int *)(v5 + v6);
  v8 = a1[33];
  v9 = *(_DWORD *)(v8 + v6);
  if (v9)
    v10 = (int)v7 < 2;
  else
    v10 = 1;
  if (!v10 && (int)v7 - v9 <= 1)
  {
    v15 = (8 * ((unint64_t)(2 * __c) >> 1)) | 4;
    v60 = v9;
    v58 = v7;
    if ((_DWORD)v7 == v9)
    {
      v16 = *(int *)(a1[36] + 4 * *(int *)(v8 + v15));
      v17 = (2 * v16) | 1;
      v18 = a1[3];
      v19 = (__int32 *)(a1[6] + 4 * *(int *)(v18 + 4 * v17));
      v20 = *(int *)(v18 + 8 * v16);
      v21 = &v19[v20];
      v22 = wmemchr(v19, __c, v20);
      if (v22)
        v23 = v22;
      else
        v23 = v21;
      v24 = (unint64_t)((char *)v23 - (char *)v19) >> 2;
      v25 = *(_DWORD *)(a1[9] + 4 * *(int *)(a1[3] + 4 * v17) + 4 * (int)v24);
    }
    else
    {
      LODWORD(v24) = 0;
      v26 = (int *)(a1[45] + 4 * *(int *)(v5 + v15));
      LODWORD(v16) = -1;
      v25 = -1;
      do
      {
        v28 = *v26++;
        v27 = v28;
        v29 = a1[18];
        if (*(_DWORD *)(v29 + 8 * v28) == 1)
        {
          v16 = *(int *)(a1[21] + 4 * *(int *)(v29 + 4 * ((2 * v27) | 1)));
          v30 = (2 * v16) | 1;
          v31 = a1[3];
          v32 = (__int32 *)(a1[6] + 4 * *(int *)(v31 + 4 * v30));
          v33 = *(int *)(v31 + 8 * v16);
          v34 = &v32[v33];
          v35 = wmemchr(v32, __c, v33);
          v36 = v35 ? v35 : v34;
          v24 = (unint64_t)((char *)v36 - (char *)v32) >> 2;
          v37 = *(_DWORD *)(a1[9] + 4 * *(int *)(a1[3] + 4 * v30) + 4 * (int)v24);
          v25 = v27;
          if (v27 == v37)
            break;
        }
        --v7;
      }
      while (v7);
    }
    *a3 = v16;
    *a4 = v25;
    v38 = a4 + 1;
    v39 = v58 - 1;
    v40 = 1;
    v41 = v25;
    LODWORD(v42) = v24;
    v43 = v60;
    while (1)
    {
      v44 = v41;
      v45 = a1[3];
      v46 = *(_DWORD *)(v45 + 8 * (int)v16);
      v47 = a1[9];
      if ((_DWORD)v42)
        v46 = v42;
      v41 = *(_DWORD *)(v47 + 4 * *(int *)(v45 + 8 * (_DWORD)v16 + 4) + 4 * (v46 - 1));
      if (v41 == v44 || v41 == v25)
        break;
      *v38 = v41;
      if (v40 < v43)
      {
        v49 = a1[18];
        v50 = (int *)(a1[21] + 4 * *(int *)(v49 + 4 * ((2 * v41) | 1)));
        v51 = *(_DWORD *)(v49 + 8 * v41);
        if (v51 == 1)
        {
          v52 = *v50;
          if (*v50 == (_DWORD)v16)
            return 0;
        }
        else
        {
          if (!v51)
            return 0;
          v52 = *v50;
        }
        v16 = v50[v52 == (_DWORD)v16];
        v53 = (__int32 *)(v47 + 4 * *(int *)(v45 + 4 * (int)((2 * v16) | 1)));
        v54 = *(int *)(v45 + 8 * v16);
        v55 = &v53[v54];
        v56 = wmemchr(v53, v41, v54);
        v43 = v60;
        if (v56)
          v57 = v56;
        else
          v57 = v55;
        v42 = (unint64_t)((char *)v57 - (char *)v53) >> 2;
        a3[v40++] = v16;
      }
      ++v38;
      if (!--v39)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_20BE84A3C(_QWORD *a1, int a2, int a3)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;

  v3 = a1[42];
  v4 = (int *)(a1[45] + 4 * *(int *)(v3 + 8 * a2 + 4));
  v5 = *(unsigned int *)(v3 + 8 * a2);
  if (a2 == a3)
  {
    if ((int)v5 >= 1)
    {
      v6 = a1[15];
      while (1)
      {
        v8 = *v4++;
        result = v8;
        if (*(_DWORD *)(v6 + 8 * v8) == *(_DWORD *)(v6 + 8 * v8 + 4))
          break;
        if (!--v5)
          return 0xFFFFFFFFLL;
      }
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  if ((int)v5 < 1)
    return 0xFFFFFFFFLL;
  v9 = a1[15];
  while (1)
  {
    v10 = *v4++;
    result = v10;
    v11 = (_DWORD *)(v9 + 8 * v10);
    if (*v11 == a3 || v11[1] == a3)
      break;
    if (!--v5)
      return 0xFFFFFFFFLL;
  }
  return result;
}

BOOL sub_20BE84AD0(int *a1)
{
  int v2;
  unint64_t v3;
  int *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t **v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  unint64_t v53;
  uint64_t **v54;
  uint64_t v55;
  char *v56;
  int v57;
  char *v58;
  int *v59;
  int *v60;
  int *v61;
  int *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  int *v68;
  int v69;
  _DWORD *v70;
  int *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  int *v77;
  int v78;
  int *v79;
  int *v80;
  unint64_t v81;
  _DWORD *v82;
  int *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  int v90;
  int *v91;
  int v92;
  int *v93;
  unint64_t v94;
  _DWORD *v95;
  int *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  int *v102;
  int v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  int v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  int *v148;
  _QWORD *v150;
  void **v151;
  uint64_t v152;
  int **v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void **v157;
  char *__p;
  char *v159;
  char *v160;
  int v161;
  int v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t *v165;
  _QWORD *v166[2];
  int v167;
  int v168;
  int *v169;
  int *v170;
  _QWORD **v171;
  _QWORD *v172[2];
  int v173;
  int v174;
  int *v175;
  _QWORD *v176;
  uint64_t *v177;
  _QWORD *v178[2];
  int v179;
  _DWORD *v180[2];

  v2 = a1[2];
  v3 = *a1;
  v4 = a1 + 66;
  sub_20BE81ACC((uint64_t)(a1 + 66), 2 * v2);
  sub_20BE81ACC((uint64_t)(a1 + 84), 2 * v2);
  sub_20BE862B8((uint64_t)(a1 + 102), v2);
  v150 = a1 + 108;
  sub_20BE862E8((uint64_t)(a1 + 108), v2);
  bzero(*((void **)a1 + 54), 2 * a1[2]);
  *a1 = v3;
  sub_20BE81ACC((uint64_t)(a1 + 6), 2 * v3);
  v5 = (char *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 13) - (_QWORD)v5;
  if (v3 <= v6)
  {
    if (v3 < v6)
      *((_QWORD *)a1 + 13) = &v5[v3];
  }
  else
  {
    sub_20BE83CA8((void **)a1 + 12, v3 - v6);
    v5 = (char *)*((_QWORD *)a1 + 12);
  }
  bzero(v5, *a1);
  a1[1] = 0;
  sub_20BE81ACC((uint64_t)(a1 + 36), 0);
  sub_20BE862B8((uint64_t)(a1 + 54), 0);
  v7 = *((_QWORD *)a1 + 30);
  v151 = (void **)(a1 + 60);
  if (*((_QWORD *)a1 + 31) != v7)
    *((_QWORD *)a1 + 31) = v7;
  sub_20BE81ACC((uint64_t)(a1 + 18), (int)((uint64_t)(*((_QWORD *)a1 + 7) - *((_QWORD *)a1 + 6)) >> 2));
  v8 = 4 * v2;
  v157 = (void **)(a1 + 30);
  sub_20BE857FC((void **)a1 + 15, v8);
  sub_20BE857FC((void **)a1 + 21, v8);
  sub_20BE857FC((void **)a1 + 18, v8);
  v9 = 2;
  v175 = a1 + 36;
  v176 = a1 + 42;
  v178[0] = 0;
  v178[1] = 0;
  v177 = (uint64_t *)v178;
  v10 = *((_QWORD *)a1 + 18);
  v11 = (unint64_t)(*((_QWORD *)a1 + 19) - v10) >> 2;
  if ((v11 & 0x80000000) == 0)
    v12 = (unint64_t)(*((_QWORD *)a1 + 19) - v10) >> 2;
  else
    v12 = v11 + 1;
  v13 = v12 >> 1;
  v173 = v13;
  v174 = 2;
  if ((int)v11 >= 2)
  {
    v14 = 0;
    v15 = (_DWORD *)(v10 + 4);
    do
    {
      *(v15 - 1) = 0;
      *v15 = v174 * v14;
      v15 += 2;
      ++v14;
      v13 = v173;
    }
    while (v14 < v173);
    v9 = v174;
  }
  sub_20BE81ACC((uint64_t)(a1 + 42), v13 * v9);
  v16 = 6;
  v169 = v4;
  v170 = a1 + 72;
  v172[0] = 0;
  v172[1] = 0;
  v171 = v172;
  v17 = *((_QWORD *)a1 + 33);
  v18 = (unint64_t)(*((_QWORD *)a1 + 34) - v17) >> 2;
  if ((v18 & 0x80000000) == 0)
    v19 = (unint64_t)(*((_QWORD *)a1 + 34) - v17) >> 2;
  else
    v19 = v18 + 1;
  v20 = v19 >> 1;
  v167 = v20;
  v168 = 6;
  if ((int)v18 >= 2)
  {
    v21 = 0;
    v22 = (_DWORD *)(v17 + 4);
    do
    {
      *(v22 - 1) = 0;
      *v22 = v168 * v21;
      v22 += 2;
      ++v21;
      v20 = v167;
    }
    while (v21 < v167);
    v16 = v168;
  }
  sub_20BE81ACC((uint64_t)(a1 + 72), v20 * v16);
  v23 = 6;
  v163 = a1 + 84;
  v164 = a1 + 90;
  v166[0] = 0;
  v166[1] = 0;
  v165 = (uint64_t *)v166;
  v24 = *((_QWORD *)a1 + 42);
  v25 = (unint64_t)(*((_QWORD *)a1 + 43) - v24) >> 2;
  if ((v25 & 0x80000000) == 0)
    v26 = (unint64_t)(*((_QWORD *)a1 + 43) - v24) >> 2;
  else
    v26 = v25 + 1;
  v27 = v26 >> 1;
  v161 = v27;
  v162 = 6;
  if ((int)v25 >= 2)
  {
    v28 = 0;
    v29 = (_DWORD *)(v24 + 4);
    do
    {
      *(v29 - 1) = 0;
      *v29 = v162 * v28;
      v29 += 2;
      ++v28;
      v27 = v161;
    }
    while (v28 < v161);
    v23 = v162;
  }
  sub_20BE81ACC((uint64_t)(a1 + 90), v27 * v23);
  __p = 0;
  v159 = 0;
  v160 = 0;
  if ((int)v3 >= 1)
  {
    v30 = 0;
    v153 = (int **)(a1 + 34);
    v152 = v3;
    while (1)
    {
      v31 = (unsigned int *)(*((_QWORD *)a1 + 3) + 8 * v30);
      v32 = *v31;
      if ((int)v32 >= 1)
        break;
LABEL_196:
      if (++v30 == v152)
        goto LABEL_197;
    }
    v33 = 0;
    v34 = (int)v31[1];
    v155 = v32;
    v156 = *((_QWORD *)a1 + 6) + 4 * v34;
    v154 = *((_QWORD *)a1 + 9) + 4 * v34;
    while (1)
    {
      v35 = *(_DWORD *)(v156 + 4 * v33);
      v36 = v33 + 1;
      v37 = (v33 + 1);
      if (v33 + 1 == v32)
        v37 = 0;
      v38 = *(_DWORD *)(v156 + 4 * v37);
      if (v35 == v38)
      {
        v39 = v159;
        if (v159 < v160)
        {
          *(_DWORD *)v159 = a1[1];
          v40 = v159 + 4;
LABEL_63:
          v159 = v40;
LABEL_64:
          LODWORD(v50) = a1[1];
          a1[1] = v50 + 1;
          v60 = (int *)*((_QWORD *)a1 + 16);
          v59 = (int *)*((_QWORD *)a1 + 17);
          if (v60 >= v59)
          {
            v62 = (int *)*v157;
            v63 = ((char *)v60 - (_BYTE *)*v157) >> 2;
            v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 62)
              goto LABEL_216;
            v65 = (char *)v59 - (char *)v62;
            if (v65 >> 1 > v64)
              v64 = v65 >> 1;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
              v66 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v66 = v64;
            if (v66)
            {
              v67 = (char *)sub_20BDE1330((uint64_t)v153, v66);
              v62 = (int *)*((_QWORD *)a1 + 15);
              v60 = (int *)*((_QWORD *)a1 + 16);
            }
            else
            {
              v67 = 0;
            }
            v68 = (int *)&v67[4 * v63];
            *v68 = v35;
            v61 = v68 + 1;
            while (v60 != v62)
            {
              v69 = *--v60;
              *--v68 = v69;
            }
            v59 = (int *)&v67[4 * v66];
            *((_QWORD *)a1 + 15) = v68;
            *((_QWORD *)a1 + 16) = v61;
            *((_QWORD *)a1 + 17) = v59;
            if (v62)
            {
              operator delete(v62);
              v59 = *v153;
            }
          }
          else
          {
            *v60 = v35;
            v61 = v60 + 1;
          }
          *((_QWORD *)a1 + 16) = v61;
          if (v61 >= v59)
          {
            v71 = (int *)*v157;
            v72 = ((char *)v61 - (_BYTE *)*v157) >> 2;
            v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 62)
              goto LABEL_216;
            v74 = (char *)v59 - (char *)v71;
            if (v74 >> 1 > v73)
              v73 = v74 >> 1;
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
              v75 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v75 = v73;
            if (v75)
            {
              v76 = (char *)sub_20BDE1330((uint64_t)v153, v75);
              v71 = (int *)*((_QWORD *)a1 + 15);
              v61 = (int *)*((_QWORD *)a1 + 16);
            }
            else
            {
              v76 = 0;
            }
            v77 = (int *)&v76[4 * v72];
            *v77 = v38;
            v70 = v77 + 1;
            while (v61 != v71)
            {
              v78 = *--v61;
              *--v77 = v78;
            }
            *((_QWORD *)a1 + 15) = v77;
            *((_QWORD *)a1 + 16) = v70;
            *((_QWORD *)a1 + 17) = &v76[4 * v75];
            if (v71)
              operator delete(v71);
          }
          else
          {
            *v61 = v38;
            v70 = v61 + 1;
          }
          *((_QWORD *)a1 + 16) = v70;
          v79 = v175;
          v80 = (int *)*((_QWORD *)v175 + 1);
          v81 = *((_QWORD *)v175 + 2);
          if ((unint64_t)v80 >= v81)
          {
            v83 = *(int **)v175;
            v84 = ((uint64_t)v80 - *(_QWORD *)v175) >> 2;
            v85 = v84 + 1;
            if ((unint64_t)(v84 + 1) >> 62)
              goto LABEL_216;
            v86 = v81 - (_QWORD)v83;
            if (v86 >> 1 > v85)
              v85 = v86 >> 1;
            if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
              v87 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v87 = v85;
            if (v87)
            {
              v88 = (char *)sub_20BDE1330((uint64_t)(v175 + 4), v87);
              v83 = *(int **)v79;
              v80 = (int *)*((_QWORD *)v79 + 1);
            }
            else
            {
              v88 = 0;
            }
            v89 = &v88[4 * v84];
            *(_DWORD *)v89 = 0;
            v82 = v89 + 4;
            while (v80 != v83)
            {
              v90 = *--v80;
              *((_DWORD *)v89 - 1) = v90;
              v89 -= 4;
            }
            *(_QWORD *)v79 = v89;
            *((_QWORD *)v79 + 1) = v82;
            *((_QWORD *)v79 + 2) = &v88[4 * v87];
            if (v83)
              operator delete(v83);
          }
          else
          {
            *v80 = 0;
            v82 = v80 + 1;
          }
          *((_QWORD *)v79 + 1) = v82;
          v91 = v175;
          v92 = v174 * v173;
          v93 = (int *)*((_QWORD *)v175 + 1);
          v94 = *((_QWORD *)v175 + 2);
          if ((unint64_t)v93 >= v94)
          {
            v96 = *(int **)v175;
            v97 = ((uint64_t)v93 - *(_QWORD *)v175) >> 2;
            v98 = v97 + 1;
            if ((unint64_t)(v97 + 1) >> 62)
LABEL_216:
              sub_20BDDF694();
            v99 = v94 - (_QWORD)v96;
            if (v99 >> 1 > v98)
              v98 = v99 >> 1;
            if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
              v100 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v100 = v98;
            if (v100)
            {
              v101 = (char *)sub_20BDE1330((uint64_t)(v175 + 4), v100);
              v96 = *(int **)v91;
              v93 = (int *)*((_QWORD *)v91 + 1);
            }
            else
            {
              v101 = 0;
            }
            v102 = (int *)&v101[4 * v97];
            *v102 = v92;
            v95 = v102 + 1;
            while (v93 != v96)
            {
              v103 = *--v93;
              *--v102 = v103;
            }
            *(_QWORD *)v91 = v102;
            *((_QWORD *)v91 + 1) = v95;
            *((_QWORD *)v91 + 2) = &v101[4 * v100];
            if (v96)
              operator delete(v96);
          }
          else
          {
            *v93 = v92;
            v95 = v93 + 1;
          }
          *((_QWORD *)v91 + 1) = v95;
          v104 = ++v173;
          sub_20BE81ACC((uint64_t)v176, v174 * v104);
          sub_20BE85890((uint64_t)&v161, v35, v50);
          sub_20BE85890((uint64_t)&v161, v38, v50);
          goto LABEL_129;
        }
        v44 = __p;
        v45 = (v159 - __p) >> 2;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 62)
          goto LABEL_216;
        v47 = v160 - __p;
        if ((v160 - __p) >> 1 > v46)
          v46 = v47 >> 1;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
          v48 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48)
        {
          v49 = (char *)sub_20BDE1330((uint64_t)&v160, v48);
          v44 = __p;
          v39 = v159;
        }
        else
        {
          v49 = 0;
        }
        v56 = &v49[4 * v45];
        *(_DWORD *)v56 = a1[1];
        v40 = v56 + 4;
        while (v39 != v44)
        {
          v57 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *((_DWORD *)v56 - 1) = v57;
          v56 -= 4;
        }
        v58 = &v49[4 * v48];
        __p = v56;
        goto LABEL_61;
      }
      v179 = *(_DWORD *)(v156 + 4 * v33);
      v41 = *(unsigned int *)(*v163 + 8 * v35);
      if ((int)v41 <= v162)
      {
        v43 = (char *)(*v164 + 4 * *(int *)(*v163 + 4 * ((2 * v35) | 1)));
      }
      else
      {
        v180[0] = &v179;
        v42 = sub_20BE86554(&v165, &v179, (uint64_t)&unk_20CA539D8, v180);
        v43 = (char *)v42[5];
        v41 = ((unint64_t)((char *)v42[6] - v43) >> 2);
      }
      if ((int)v41 < 1)
        goto LABEL_64;
      while (1)
      {
        v51 = *(int *)v43;
        v43 += 4;
        v50 = v51;
        v52 = (char *)*v157 + 8 * v51;
        if (*v52 == v38 || v52[1] == v38)
          break;
        if (!--v41)
          goto LABEL_64;
      }
      if ((_DWORD)v50 == -1)
        goto LABEL_64;
      v179 = v50;
      LODWORD(v53) = *(_DWORD *)(*(_QWORD *)v175 + 8 * v50);
      if ((int)v53 <= v174)
      {
        v55 = *v176 + 4 * *(int *)(*(_QWORD *)v175 + 4 * (int)((2 * v50) | 1));
      }
      else
      {
        v180[0] = &v179;
        v54 = sub_20BE86554(&v177, &v179, (uint64_t)&unk_20CA539D8, v180);
        v55 = (uint64_t)v54[5];
        v53 = ((unint64_t)v54[6] - v55) >> 2;
      }
      if (v30 == *(_DWORD *)(v55 + 4 * ((int)v53 - 1)))
      {
        v106 = v159;
        v105 = v160;
        if (v159 >= v160)
        {
          v115 = __p;
          v116 = (v159 - __p) >> 2;
          v117 = v116 + 1;
          if ((unint64_t)(v116 + 1) >> 62)
            goto LABEL_217;
          v118 = v160 - __p;
          if ((v160 - __p) >> 1 > v117)
            v117 = v118 >> 1;
          if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL)
            v119 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v119 = v117;
          if (v119)
          {
            v120 = (char *)sub_20BDE1330((uint64_t)&v160, v119);
            v115 = __p;
            v106 = v159;
          }
          else
          {
            v120 = 0;
          }
          v122 = &v120[4 * v116];
          *(_DWORD *)v122 = v50;
          v107 = v122 + 4;
          while (v106 != v115)
          {
            v123 = *((_DWORD *)v106 - 1);
            v106 -= 4;
            *((_DWORD *)v122 - 1) = v123;
            v122 -= 4;
          }
          v105 = &v120[4 * v119];
          __p = v122;
          v160 = v105;
          if (v115)
          {
            operator delete(v115);
            v105 = v160;
          }
        }
        else
        {
          *(_DWORD *)v159 = v50;
          v107 = v159 + 4;
        }
        if (v107 < v105)
        {
          *(_DWORD *)v107 = a1[1];
          v40 = v107 + 4;
          goto LABEL_63;
        }
        v44 = __p;
        v124 = (v107 - __p) >> 2;
        v125 = v124 + 1;
        if ((unint64_t)(v124 + 1) >> 62)
          goto LABEL_217;
        v126 = v105 - __p;
        if (v126 >> 1 > v125)
          v125 = v126 >> 1;
        if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL)
          v127 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v127 = v125;
        if (v127)
        {
          v128 = (char *)sub_20BDE1330((uint64_t)&v160, v127);
          v44 = __p;
        }
        else
        {
          v128 = 0;
        }
        v129 = &v128[4 * v124];
        *(_DWORD *)v129 = a1[1];
        v40 = v129 + 4;
        while (v107 != v44)
        {
          v130 = *((_DWORD *)v107 - 1);
          v107 -= 4;
          *((_DWORD *)v129 - 1) = v130;
          v129 -= 4;
        }
        v58 = &v128[4 * v127];
        __p = v129;
LABEL_61:
        v160 = v58;
        if (v44)
          operator delete(v44);
        goto LABEL_63;
      }
      if ((int)v53 >= 2)
        break;
      if (v35 == *((_DWORD *)*v157 + 2 * v50))
      {
        v108 = v159;
        if (v159 < v160)
        {
LABEL_155:
          *(_DWORD *)v108 = v50;
          v121 = v108 + 4;
LABEL_195:
          v159 = v121;
          goto LABEL_129;
        }
        v109 = __p;
        v131 = (v159 - __p) >> 2;
        v132 = v131 + 1;
        if ((unint64_t)(v131 + 1) >> 62)
LABEL_217:
          sub_20BDDF694();
        v133 = v160 - __p;
        if ((v160 - __p) >> 1 > v132)
          v132 = v133 >> 1;
        if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL)
          v113 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v113 = v132;
        if (v113)
        {
          v114 = (char *)sub_20BDE1330((uint64_t)&v160, v113);
          v109 = __p;
          v108 = v159;
        }
        else
        {
          v114 = 0;
        }
        v134 = &v114[4 * v131];
        *(_DWORD *)v134 = v50;
        v121 = v134 + 4;
        while (v108 != v109)
        {
          v136 = *((_DWORD *)v108 - 1);
          v108 -= 4;
          *((_DWORD *)v134 - 1) = v136;
          v134 -= 4;
        }
LABEL_193:
        __p = v134;
        v160 = &v114[4 * v113];
        if (v109)
          operator delete(v109);
        goto LABEL_195;
      }
LABEL_129:
      sub_20BE85890((uint64_t)&v173, v50, v30);
      sub_20BE85890((uint64_t)&v167, v35, v30);
      v32 = v155;
      *(_DWORD *)(v154 + 4 * v33++) = v50;
      if (v36 == v155)
        goto LABEL_196;
    }
    v108 = v159;
    if (v159 < v160)
      goto LABEL_155;
    v109 = __p;
    v110 = (v159 - __p) >> 2;
    v111 = v110 + 1;
    if ((unint64_t)(v110 + 1) >> 62)
      goto LABEL_217;
    v112 = v160 - __p;
    if ((v160 - __p) >> 1 > v111)
      v111 = v112 >> 1;
    if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
      v113 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v113 = v111;
    if (v113)
    {
      v114 = (char *)sub_20BDE1330((uint64_t)&v160, v113);
      v109 = __p;
      v108 = v159;
    }
    else
    {
      v114 = 0;
    }
    v134 = &v114[4 * v110];
    *(_DWORD *)v134 = v50;
    v121 = v134 + 4;
    while (v108 != v109)
    {
      v135 = *((_DWORD *)v108 - 1);
      v108 -= 4;
      *((_DWORD *)v134 - 1) = v135;
      v134 -= 4;
    }
    goto LABEL_193;
  }
LABEL_197:
  v137 = sub_20BE85A44(&v173);
  v138 = sub_20BE85A44(&v167);
  v139 = sub_20BE85A44(&v161);
  v140 = a1[5];
  if (v138 > v140)
    v140 = v138;
  if (v139 <= v140)
    v141 = v140;
  else
    v141 = v139;
  a1[4] = v137;
  a1[5] = v141;
  if (v141 < 0x10000)
  {
    v142 = a1[1];
    sub_20BE81ACC((uint64_t)(a1 + 36), 2 * v142);
    sub_20BE862B8((uint64_t)(a1 + 54), v142);
    v143 = *((_QWORD *)a1 + 30);
    v144 = *((_QWORD *)a1 + 31) - v143;
    if (v142 <= v144)
    {
      if (v142 < v144)
        *((_QWORD *)a1 + 31) = v143 + v142;
    }
    else
    {
      sub_20BE83CA8(v151, v142 - v144);
    }
    if ((int)v142 >= 1)
      bzero(*((void **)a1 + 30), a1[1]);
    v145 = __p;
    if ((int)((unint64_t)(v159 - __p) >> 2) >= 1)
    {
      v146 = 0;
      do
      {
        v147 = *(int *)&v145[4 * v146];
        *((_BYTE *)*v151 + v147) |= 1u;
        v148 = (int *)((char *)*v157 + 8 * v147);
        *(_WORD *)(*v150 + 2 * *v148) |= 1u;
        *(_WORD *)(*v150 + 2 * v148[1]) |= 1u;
        ++v146;
        v145 = __p;
      }
      while (v146 < (int)((unint64_t)(v159 - __p) >> 2));
    }
    sub_20BE85CD4((uint64_t)a1);
    sub_20BE85D3C((uint64_t)a1);
  }
  if (__p)
    operator delete(__p);
  sub_20BE86504((uint64_t)&v165, v166[0]);
  sub_20BE86504((uint64_t)&v171, v172[0]);
  sub_20BE86504((uint64_t)&v177, v178[0]);
  return v141 < 0x10000;
}

void sub_20BE85788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,_QWORD *a36)
{
  uint64_t v36;

  if (__p)
    operator delete(__p);
  sub_20BE86504(a17, a30);
  sub_20BE86504(a13, a36);
  sub_20BE86504(a15, *(_QWORD **)(v36 - 120));
  _Unwind_Resume(a1);
}

void sub_20BE857FC(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      sub_20BDDF694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_20BDE1330(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_20BE85890(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t **v8;
  void **v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  int v24;
  int v25;
  int *v26;

  v25 = a2;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = *(_DWORD *)(v5 + 8 * a2);
  v7 = *(int *)(v5 + 8 * a2 + 4);
  if (v6 >= *(_DWORD *)(a1 + 4))
  {
    v26 = &v25;
    v8 = sub_20BE86554((uint64_t **)(a1 + 24), &v25, (uint64_t)&unk_20CA539D8, &v26);
    v9 = (void **)(v8 + 5);
    v10 = *(int *)(a1 + 4);
    if (v6 <= (int)v10)
    {
      sub_20BE81ACC((uint64_t)(v8 + 5), v10 + 1);
      memcpy(*v9, (const void *)(**(_QWORD **)(a1 + 16) + 4 * v7), 4 * *(int *)(a1 + 4));
      *((_DWORD *)*v9 + *(int *)(a1 + 4)) = a3;
    }
    else
    {
      v11 = v8;
      v12 = (uint64_t)(v8 + 7);
      v13 = v8[7];
      v14 = (char *)v8[6];
      if (v14 >= (char *)v13)
      {
        v16 = (char *)*v9;
        v17 = (v14 - (_BYTE *)*v9) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          sub_20BDDF694();
        v19 = (char *)v13 - v16;
        if (v19 >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)sub_20BDE1330(v12, v20);
          v16 = (char *)v11[5];
          v14 = (char *)v11[6];
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[4 * v17];
        v23 = (uint64_t *)&v21[4 * v20];
        *(_DWORD *)v22 = a3;
        v15 = (uint64_t *)(v22 + 4);
        while (v14 != v16)
        {
          v24 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v24;
          v22 -= 4;
        }
        v11[5] = (uint64_t *)v22;
        v11[6] = v15;
        v11[7] = v23;
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_DWORD *)v14 = a3;
        v15 = (uint64_t *)(v14 + 4);
      }
      v11[6] = v15;
    }
  }
  else
  {
    *(_DWORD *)(**(_QWORD **)(a1 + 16) + 4 * ((int)v7 + v6)) = a3;
  }
  ++*(_DWORD *)(**(_QWORD **)(a1 + 8) + 8 * v25);
}

uint64_t sub_20BE85A44(int *a1)
{
  int *v2;
  int v3;
  uint64_t v4;
  char v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void **p_p;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v25;
  void *__p;
  void *v27;
  uint64_t v28;
  int *v29;

  v2 = (int *)**((_QWORD **)a1 + 1);
  v3 = *v2;
  LODWORD(v4) = *a1;
  if (*((_QWORD *)a1 + 5))
  {
    if ((int)v4 < 2)
    {
      v5 = 0;
      v8 = a1[1];
    }
    else
    {
      v5 = 0;
      v6 = v2 + 3;
      v7 = 1;
      do
      {
        *v6 = v3;
        v8 = a1[1];
        v4 = *a1;
        v5 |= v3 > (int)v8 * (int)v7;
        v3 += *(v6 - 1);
        ++v7;
        v6 += 2;
      }
      while (v7 < v4);
    }
    v12 = v5 | (v3 > (int)v8 * (int)v4);
    __p = 0;
    v27 = 0;
    v28 = 0;
    if (v5 & 1 | (v3 > (int)v8 * (int)v4))
    {
      sub_20BE81ACC((uint64_t)&__p, v3);
      LODWORD(v4) = *a1;
      v8 = a1[1];
      p_p = &__p;
    }
    else
    {
      p_p = (void **)*((_QWORD *)a1 + 2);
    }
    v25 = 0;
    if ((int)v4 >= 1)
    {
      v14 = 0;
      do
      {
        v15 = **((_QWORD **)a1 + 1);
        v16 = *(int *)(v15 + 8 * v14);
        v17 = (char *)*p_p;
        v18 = *(int *)(v15 + 8 * v14 + 4);
        v19 = a1[1];
        if ((int)v16 <= v19)
        {
          v20 = (uint64_t *)(**((_QWORD **)a1 + 2) + 4 * v19 * v14);
        }
        else
        {
          v29 = &v25;
          v20 = sub_20BE86554((uint64_t **)a1 + 3, &v25, (uint64_t)&unk_20CA539D8, &v29)[5];
          if ((int)v8 <= (int)v16)
            v8 = v16;
          else
            v8 = v8;
        }
        memmove(&v17[4 * v18], v20, 4 * v16);
        v14 = v25 + 1;
        v25 = v14;
      }
      while (v14 < *a1);
    }
    v21 = *((_QWORD *)a1 + 2);
    if ((v12 & 1) != 0)
    {
      v22 = *(void **)v21;
      *(_QWORD *)v21 = __p;
      *(_QWORD *)(v21 + 8) = v27;
      v23 = *(_QWORD *)(v21 + 16);
      *(_QWORD *)(v21 + 16) = v28;
      __p = v22;
      v28 = v23;
      if (!v22)
        return v8;
      goto LABEL_29;
    }
    sub_20BE81ACC(*((_QWORD *)a1 + 2), v3);
    v22 = __p;
    if (__p)
    {
LABEL_29:
      v27 = v22;
      operator delete(v22);
    }
  }
  else
  {
    if ((int)v4 < 2)
    {
      v8 = *v2;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      LODWORD(v8) = *v2;
      do
      {
        v11 = v2[v9 + 2];
        memmove((void *)(**((_QWORD **)a1 + 2) + 4 * v3), (const void *)(**((_QWORD **)a1 + 2) + 4 * v2[v9 + 3]), 4 * v11);
        v2 = (int *)**((_QWORD **)a1 + 1);
        v2[v9 + 3] = v3;
        v3 += v11;
        if ((int)v8 <= (int)v11)
          v8 = v11;
        else
          v8 = v8;
        ++v10;
        v9 += 2;
      }
      while (v10 < *a1);
    }
    sub_20BE81ACC(*((_QWORD *)a1 + 2), v3);
  }
  return v8;
}

void sub_20BE85CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE85CD4(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t i;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = (_QWORD *)result;
    for (i = 0; i != v1; ++i)
    {
      v4 = v2[54];
      if ((*(_WORD *)(v4 + 2 * i) & 1) == 0)
      {
        result = sub_20BE85FF8(v2, i);
        if ((result & 1) == 0)
          *(_WORD *)(v4 + 2 * i) |= 1u;
      }
    }
  }
  return result;
}

void sub_20BE85D3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _WORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int32 *v14;
  uint64_t v15;
  __int32 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  __int16 v35;
  uint64_t j;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  _WORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int32 *v47;
  uint64_t v48;
  __int32 *v49;
  int v50;
  int v51;
  uint64_t v52;

  v2 = *(unsigned int *)(a1 + 8);
  v52 = *(unsigned int *)(a1 + 4);
  sub_20BE81AFC(a1 + 312, (uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 2);
  sub_20BE81AFC(a1 + 384, (uint64_t)(*(_QWORD *)(a1 + 368) - *(_QWORD *)(a1 + 360)) >> 2);
  sub_20BE81AFC(a1 + 192, (uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 2);
  if ((int)v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (unsigned int *)(*(_QWORD *)(a1 + 264) + 8 * i);
      v5 = *v4;
      if ((int)v5 >= 1)
      {
        v6 = (int)v4[1];
        v7 = (int *)(*(_QWORD *)(a1 + 288) + 4 * v6);
        v8 = (_WORD *)(*(_QWORD *)(a1 + 312) + 2 * v6);
        v9 = -1;
        do
        {
          v10 = *v7;
          if ((_DWORD)v10 == v9)
            v11 = (unsigned __int16)*(v8 - 1) + 1;
          else
            v11 = 0;
          v12 = *(_QWORD *)(a1 + 24);
          v13 = *(_QWORD *)(a1 + 48) + 4 * *(int *)(v12 + 4 * (int)((2 * v10) | 1));
          v14 = (__int32 *)(v13 + 4 * v11);
          v15 = v13 + 4 * *(int *)(v12 + 8 * v10);
          v16 = wmemchr(v14, i, (v15 - (uint64_t)v14) >> 2);
          if (v16)
            v17 = (int)v16;
          else
            v17 = v15;
          *v8++ = (v14 + ((v17 - (_DWORD)v14) & 0x3FFFC) - v13) >> 2;
          v18 = *v7++;
          v9 = v18;
          --v5;
        }
        while (v5);
      }
    }
    v19 = 0;
    v20 = *(_QWORD *)(a1 + 360);
    v21 = *(_QWORD *)(a1 + 336);
    v22 = *(_QWORD *)(a1 + 384);
    while (1)
    {
      v23 = (unsigned int *)(v21 + 8 * v19);
      v24 = *v23;
      if ((int)v24 >= 1)
        break;
LABEL_26:
      if (*(_DWORD *)(a1 + 20) > (int)v24)
        LODWORD(v24) = *(_DWORD *)(a1 + 20);
      *(_DWORD *)(a1 + 20) = v24;
      if (++v19 == v2)
        goto LABEL_29;
    }
    v25 = 0;
    v26 = (int)v23[1];
    v27 = v20 + 4 * v26;
    v28 = v22 + 2 * v26;
    v29 = *(_QWORD *)(a1 + 120);
    while (1)
    {
      v30 = *(int *)(v27 + 4 * v25);
      v31 = (int *)(v29 + 8 * v30);
      v33 = *v31;
      v32 = v31[1];
      if (v33 != (_DWORD)v32)
        break;
      if (v25)
      {
        v34 = (_DWORD)v30 == *(_DWORD *)(v27 + 4 * v25 - 4);
        goto LABEL_20;
      }
      v35 = 0;
LABEL_23:
      *(_WORD *)(v28 + 2 * v25++) = v35;
      if (v24 == v25)
        goto LABEL_26;
    }
    v34 = v19 == v32;
LABEL_20:
    v35 = v34;
    goto LABEL_23;
  }
LABEL_29:
  if ((int)v52 >= 1)
  {
    for (j = 0; j != v52; ++j)
    {
      v37 = (unsigned int *)(*(_QWORD *)(a1 + 144) + 8 * j);
      v38 = *v37;
      if ((int)v38 >= 1)
      {
        v39 = (int)v37[1];
        v40 = (int *)(*(_QWORD *)(a1 + 168) + 4 * v39);
        v41 = (_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v39);
        v42 = -1;
        do
        {
          v43 = *v40;
          if ((_DWORD)v43 == v42)
            v44 = (unsigned __int16)*(v41 - 1) + 1;
          else
            v44 = 0;
          v45 = *(_QWORD *)(a1 + 24);
          v46 = *(_QWORD *)(a1 + 72) + 4 * *(int *)(v45 + 4 * (int)((2 * v43) | 1));
          v47 = (__int32 *)(v46 + 4 * v44);
          v48 = v46 + 4 * *(int *)(v45 + 8 * v43);
          v49 = wmemchr(v47, j, (v48 - (uint64_t)v47) >> 2);
          if (v49)
            v50 = (int)v49;
          else
            v50 = v48;
          *v41++ = (v47 + ((v50 - (_DWORD)v47) & 0x3FFFC) - v46) >> 2;
          v51 = *v40++;
          v42 = v51;
          --v38;
        }
        while (v38);
      }
    }
  }
}

uint64_t sub_20BE85FF8(_QWORD *a1, __int32 __c)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  void *__p;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a1[36];
  v5 = a1[33];
  v6 = (8 * ((unint64_t)(2 * __c) >> 1)) | 4;
  v7 = *(int *)(v5 + v6);
  v8 = 8 * __c;
  v9 = *(int *)(v5 + v8);
  v10 = a1[42];
  v11 = *(int *)(v10 + v6);
  v12 = a1[45];
  v13 = *(int *)(v10 + v8);
  v14 = &v17;
  __p = 0;
  if ((v13 + v9) >= 0x21)
  {
    v14 = (uint64_t *)operator new(4 * (v13 + v9));
    __p = v14;
  }
  v15 = sub_20BE8477C(a1, __c, v14, (int *)v14 + v9);
  if ((_DWORD)v15)
  {
    memcpy((void *)(v4 + 4 * v7), v14, 4 * v9);
    memcpy((void *)(v12 + 4 * v11), (char *)v14 + 4 * v9, 4 * v13);
  }
  operator delete(__p);
  return v15;
}

uint64_t sub_20BE86134(_QWORD *a1, int a2, _DWORD *a3)
{
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = operator new(0xD8uLL);
  sub_20BE81914((uint64_t)v6, (uint64_t)a1);
  sub_20BE81A08((uint64_t)v6, a3);
  sub_20BE81C04((uint64_t)v6, a2);
  sub_20BE81A14(v6);
  v8 = (_QWORD *)a1[58];
  v7 = a1[59];
  if ((unint64_t)v8 >= v7)
  {
    v10 = a1[57];
    v11 = ((uint64_t)v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20BDDF694();
    v12 = v7 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)sub_20BDDF6A8((uint64_t)(a1 + 59), v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = v6;
    v9 = v16 + 8;
    v19 = (char *)a1[57];
    v18 = (char *)a1[58];
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)a1[57];
    }
    a1[57] = v16;
    a1[58] = v9;
    a1[59] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v8 = v6;
    v9 = v8 + 1;
  }
  a1[58] = v9;
  return (((unint64_t)v9 - a1[57]) >> 3) - 1;
}

void sub_20BE86254(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE86268(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 8 * a2) + 16);
}

uint64_t sub_20BE86278(uint64_t a1, int a2, int a3)
{
  _QWORD *v3;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 456) + 8 * a3);
  return v3[3] + 4 * *(int *)(*(_QWORD *)(*v3 + 24) + 8 * a2 + 4);
}

void sub_20BE862A8(uint64_t a1, int a2, int a3)
{
  sub_20BE81C0C(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 8 * a2), a3);
}

void sub_20BE862B8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_20BE86318((char **)a1, a2 - v2);
  }
}

void sub_20BE862E8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    sub_20BE86420((char **)a1, a2 - v2);
  }
}

void sub_20BE86318(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      sub_20BDDF694();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_20BDE1330(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_20BE86420(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;

  v4 = (uint64_t)(a1 + 2);
  v5 = a1[2];
  v6 = a1[1];
  if (a2 <= (v5 - v6) >> 1)
  {
    a1[1] = &v6[2 * a2];
  }
  else
  {
    v7 = *a1;
    v8 = v6 - *a1;
    v9 = a2 + (v8 >> 1);
    if (v9 < 0)
      sub_20BDDF694();
    v10 = v8 >> 1;
    v11 = v5 - v7;
    if (v11 > v9)
      v9 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
    {
      v13 = (char *)sub_20BDE31CC(v4, v12);
      v7 = *a1;
      v6 = a1[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v10];
    v15 = &v13[2 * v12];
    v16 = &v14[2 * a2];
    if (v6 != v7)
    {
      do
      {
        v17 = *((_WORD *)v6 - 1);
        v6 -= 2;
        *((_WORD *)v14 - 1) = v17;
        v14 -= 2;
      }
      while (v6 != v7);
      v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
      operator delete(v7);
  }
}

void sub_20BE86504(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_20BE86504(a1, *a2);
    sub_20BE86504(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t **sub_20BE86554(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    sub_20BDDE1B4(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

double sub_20BE86618(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _QWORD *v4;
  double result;

  sub_20BE87C08(a1, a2, a3, a4);
  *v4 = &off_24C51A330;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)((char *)v4 + 28) = 0x400000000;
  return result;
}

void sub_20BE86648(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_20BE87CA0(a1);
  operator delete(v1);
}

void sub_20BE8665C(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;

  v2 = *(int **)(a1 + 8);
  v3 = *((_QWORD *)v2 + 7) - *((_QWORD *)v2 + 6);
  v4 = *((_QWORD *)v2 + 10) - *((_QWORD *)v2 + 9);
  v5 = *((_QWORD *)v2 + 16) - *((_QWORD *)v2 + 15);
  v6 = *v2;
  v7 = v2[1];
  v8 = v2[2];
  v13 = 0;
  v9 = *((_QWORD *)v2 + 3);
  v10 = (unint64_t)(*((_QWORD *)v2 + 4) - v9) >> 2;
  *(_QWORD *)(a1 + 88) = v9;
  *(_DWORD *)(a1 + 96) = v10;
  v11 = *((_QWORD *)v2 + 3);
  v12 = (unint64_t)(*((_QWORD *)v2 + 4) - v11) >> 2;
  *(_QWORD *)(a1 + 104) = v11;
  *(_DWORD *)(a1 + 112) = v12;
  sub_20BE86740(a1 + 120, (int)(v3 >> 2), &v13);
  sub_20BE86740(a1 + 144, (int)(v4 >> 2), &v13);
  sub_20BE86740(a1 + 192, (int)(v5 >> 2), &v13);
  sub_20BE86740(a1 + 168, v6, &v13);
  sub_20BE86740(a1 + 216, v7, &v13);
  sub_20BE86740(a1 + 240, v8, &v13);
}

void sub_20BE86740(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_20BE87AF8((void **)a1, a2 - v3, a3);
  }
}

_QWORD *sub_20BE86770(_QWORD *a1)
{
  int *v2;

  v2 = (int *)a1[2];
  if (*((_QWORD *)v2 + 4) == *((_QWORD *)v2 + 3))
  {
    sub_20BE867B8((uint64_t)a1);
    v2 = (int *)a1[2];
  }
  sub_20BE81ACC((uint64_t)(v2 + 12), 4 * *v2);
  return sub_20BE86824(a1);
}

void sub_20BE867B8(uint64_t a1)
{
  int *v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;

  sub_20BE81ACC(*(_QWORD *)(a1 + 16) + 24, 2 * **(int **)(a1 + 16));
  v2 = *(int **)(a1 + 16);
  if (*v2 >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = (_DWORD *)(*((_QWORD *)v2 + 3) + 4);
    do
    {
      *(v5 - 1) = 4;
      *v5 = v3;
      ++v4;
      v3 += 4;
      v5 += 2;
    }
    while (v4 < *v2);
  }
}

